{"task_id":"EvoEval\/0","prompt":"from typing import List, Union\n\ndef calculate_shipping_cost(items: List[Union[str, float]], location: str) -> float:\n    \"\"\"\n    list of items (represented by weights in kg) location calculate cost shipping Each item has base shipping cost $5.0. location multiplies total cost by certain factor: - \"Local\": no additional factor - \"National\": factor 1.5 \"International\": factor 2.5 other location: no additional factor If item weight more than 5kg additional charge of $10.0 added. If item passed as string instead of float consider weight as 1kg all previous factors multiplied by 1.5. multiplication occurs once multiple string items Return total shipping cost rounded to two decimal places as string. >>> calculate_shipping_cost([3.0, 'Book', 7.0], 'National') \"56.25\" >>> calculate_shipping_cost([1.0, 2.0, 3.0, 4.0], 'Local') \"20.00\" >>> calculate_shipping_cost([5.5, 2.0, 3.0], 'International') \"62.50\"\n    \"\"\"\n","raw":"Given a list of items (represented by their weights in kg) and a location,\n    calculate the cost of shipping. Each item has a base shipping cost of $5.0.\n    The location multiplies the total cost by a certain factor:\n    - \"Local\": no additional factor\n    - \"National\": factor of 1.5\n    - \"International\": factor of 2.5\n    - other location: no additional factor\n    If the item's weight is more than 5kg, an additional charge of $10.0 is added.\n    \n    If an item is passed as a string instead of a float, consider its weight as 1kg and all previous factors are multiplied by 1.5. This multiplication only occurs once even if there are multiple string items.\n    \n    Return the total shipping cost rounded to two decimal places as a string.\n    \n    >>> calculate_shipping_cost([3.0, 'Book', 7.0], 'National')\n    \"56.25\"\n    >>> calculate_shipping_cost([1.0, 2.0, 3.0, 4.0], 'Local')\n    \"20.00\"\n    >>> calculate_shipping_cost([5.5, 2.0, 3.0], 'International')\n    \"62.50\"","reduced":"list of items (represented by weights in kg) location calculate cost shipping Each item has base shipping cost $5.0. location multiplies total cost by certain factor: - \"Local\": no additional factor - \"National\": factor 1.5 \"International\": factor 2.5 other location: no additional factor If item weight more than 5kg additional charge of $10.0 added. If item passed as string instead of float consider weight as 1kg all previous factors multiplied by 1.5. multiplication occurs once multiple string items Return total shipping cost rounded to two decimal places as string. >>> calculate_shipping_cost([3.0, 'Book', 7.0], 'National') \"56.25\" >>> calculate_shipping_cost([1.0, 2.0, 3.0, 4.0], 'Local') \"20.00\" >>> calculate_shipping_cost([5.5, 2.0, 3.0], 'International') \"62.50\""}
{"task_id":"EvoEval\/1","prompt":"from typing import List, Union\n\ndef calculate_shipping_cost(items: List[Union[str, float]], location: str) -> float:\n    \"\"\"\n    list of items (represented by weights in kg) location calculate cost shipping Each item base shipping cost $5.0. location multiplies total cost by certain factor: \"Local\": no additional factor \"National\": factor 1.5 \"International\": factor 2.5 other location: no additional factor If item weight more than 5kg additional charge of $10.0 added. If item passed as string instead of float consider weight as 1kg. Return total shipping cost rounded to two decimal places. >>> calculate_shipping_cost([3.0, 'Book', 7.0], 'National') 37.5 >>> calculate_shipping_cost([1.0, 2.0, 3.0, 4.0], 'Local') 20.0 >>> calculate_shipping_cost([5.5, 2.0, 3.0], 'International') 62.5\n    \"\"\"\n","raw":"Given a list of items (represented by their weights in kg) and a location,\n    calculate the cost of shipping. Each item has a base shipping cost of $5.0.\n    The location multiplies the total cost by a certain factor:\n    - \"Local\": no additional factor\n    - \"National\": factor of 1.5\n    - \"International\": factor of 2.5\n    - other location: no additional factor\n    If the item's weight is more than 5kg, an additional charge of $10.0 is added.\n    \n    If an item is passed as a string instead of a float, consider its weight as 1kg.\n    \n    Return the total shipping cost rounded to two decimal places.\n    \n    >>> calculate_shipping_cost([3.0, 'Book', 7.0], 'National')\n    37.5\n    >>> calculate_shipping_cost([1.0, 2.0, 3.0, 4.0], 'Local')\n    20.0\n    >>> calculate_shipping_cost([5.5, 2.0, 3.0], 'International')\n    62.5","reduced":"list of items (represented by weights in kg) location calculate cost shipping Each item base shipping cost $5.0. location multiplies total cost by certain factor: \"Local\": no additional factor \"National\": factor 1.5 \"International\": factor 2.5 other location: no additional factor If item weight more than 5kg additional charge of $10.0 added. If item passed as string instead of float consider weight as 1kg. Return total shipping cost rounded to two decimal places. >>> calculate_shipping_cost([3.0, 'Book', 7.0], 'National') 37.5 >>> calculate_shipping_cost([1.0, 2.0, 3.0, 4.0], 'Local') 20.0 >>> calculate_shipping_cost([5.5, 2.0, 3.0], 'International') 62.5"}
{"task_id":"EvoEval\/2","prompt":"from typing import List, Union\n\ndef encrypt_message(words: List[str], key: Union[str, int]) -> List[Union[str, int]]:\n    \"\"\"\n    Given list of words turn words into lowercase encrypt each word using simple Caesar cipher. key for cipher is either string or integer. If key is string convert it to integer by summing ASCII values of characters. If key is integer use it as-is. Caesar cipher works by shifting each letter in word by value key If letter after shifting exceeds 'z' wraps around to start of alphabet. If word contains non-alphabetical characters leave them as-is. >>> encrypt_message([], \"abc\") [] >>> encrypt_message([\"hello\", \"world\"], 3) [\"khoor\", \"zruog\"] >>> encrypt_message([\"hello\", \"world\"], \"abc\") [\"pmttw\", \"ewztl\"]\n    \"\"\"\n","raw":"Given a list of words, first turn words into lowercase and then encrypt each word using a simple Caesar cipher. \n    The key for the cipher is either a string or an integer.\n    If the key is a string, convert it to an integer by summing the ASCII values \n    of its characters. If the key is an integer, use it as-is.\n\n    The Caesar cipher works by shifting each letter in the word by the \n    value of the key. If the letter after shifting exceeds 'z', it wraps \n    around to the start of the alphabet.\n\n    If the word contains any non-alphabetical characters, leave them as-is.\n\n    >>> encrypt_message([], \"abc\")\n    []\n    >>> encrypt_message([\"hello\", \"world\"], 3)\n    [\"khoor\", \"zruog\"]\n    >>> encrypt_message([\"hello\", \"world\"], \"abc\")\n    [\"pmttw\", \"ewztl\"]","reduced":"Given list of words turn words into lowercase encrypt each word using simple Caesar cipher. key for cipher is either string or integer. If key is string convert it to integer by summing ASCII values of characters. If key is integer use it as-is. Caesar cipher works by shifting each letter in word by value key If letter after shifting exceeds 'z' wraps around to start of alphabet. If word contains non-alphabetical characters leave them as-is. >>> encrypt_message([], \"abc\") [] >>> encrypt_message([\"hello\", \"world\"], 3) [\"khoor\", \"zruog\"] >>> encrypt_message([\"hello\", \"world\"], \"abc\") [\"pmttw\", \"ewztl\"]"}
{"task_id":"EvoEval\/3","prompt":"from typing import List\n\ndef magical_alphabet(input_string: str) -> List[int]:\n    \"\"\"\n    string 'a' represents '1' 'b' '2' 'c' represents '3' ... 'z' represents '26'. function return list possible combinations based interpretation input string example if input is '123' return ['abc', 'lc', 'aw'] represents ['1,2,3', '12,3', '1,23']. >>> magical_alphabet('123') ['abc', 'lc', 'aw'] >>> magical_alphabet('111') ['aaa', 'ak', 'ka'] Note Assume all input strings contain digits\n    \"\"\"\n","raw":"Given a string where 'a' represents '1', 'b' represents '2', 'c' represents '3' ... 'z' represents '26'. \n    This function should return a list of all possible combinations based on the interpretation of the input string. \n    For example, if input is '123', it should return ['abc', 'lc', 'aw'] which represents ['1,2,3', '12,3', '1,23'].\n\n    >>> magical_alphabet('123')\n    ['abc', 'lc', 'aw']\n    \n    >>> magical_alphabet('111')\n    ['aaa', 'ak', 'ka']\n    \n    Note: Assume all input strings will only contain digits","reduced":"string 'a' represents '1' 'b' '2' 'c' represents '3' ... 'z' represents '26'. function return list possible combinations based interpretation input string example if input is '123' return ['abc', 'lc', 'aw'] represents ['1,2,3', '12,3', '1,23']. >>> magical_alphabet('123') ['abc', 'lc', 'aw'] >>> magical_alphabet('111') ['aaa', 'ak', 'ka'] Note Assume all input strings contain digits"}
{"task_id":"EvoEval\/4","prompt":"from typing import List\n\n\ndef candles_relight(candles: List[int]) -> int:\n    \"\"\"\n    've list representing row of birthday candles various heights. candle at position \"i\" can be lit (gets flame) if taller than all candles before it. first candle always lit. task to return number of candles can be lit. empty list means no candles, return 0. >>> candles_relight([3, 2, 1, 3, 2, 4]) 2 >>> candles_relight([1, 2, 3, 4, 5]) 5 >>> candles_relight([]) 0\n    \"\"\"\n","raw":"You've got a list representing a row of birthday candles of various heights.\n    A candle at position \"i\" can be lit (gets the flame) if it is taller than all the candles \n    before it. The first candle is always lit. \n    Your task is to return the number of candles that can be lit.\n    An empty list means there were no candles, so return 0.\n\n    >>> candles_relight([3, 2, 1, 3, 2, 4])\n    2\n    >>> candles_relight([1, 2, 3, 4, 5])\n    5\n    >>> candles_relight([])\n    0","reduced":"'ve list representing row of birthday candles various heights. candle at position \"i\" can be lit (gets flame) if taller than all candles before it. first candle always lit. task to return number of candles can be lit. empty list means no candles, return 0. >>> candles_relight([3, 2, 1, 3, 2, 4]) 2 >>> candles_relight([1, 2, 3, 4, 5]) 5 >>> candles_relight([]) 0"}
{"task_id":"EvoEval\/5","prompt":"from typing import List, Tuple\n\n\ndef zigzag_traversal(matrix: List[List[int]]) -> List[int]:\n    \"\"\"\n    Given 2D list of integers return list represents elements traversed in zigzag order starting from top-left corner moving rightwards. When right end reached, direction be downwards to next row, then left end until all elements covered. >>> zigzag_traversal([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10]]) [1, 2, 4, 3, 5, 6, 7, 10, 9, 8]\n    \"\"\"\n","raw":"Given a 2D list of integers, return a list that represents its elements traversed in a zigzag order starting from the top-left corner and moving rightwards.\n    When the right end is reached, the direction should be downwards to the next row, then to the left end, and so on until all elements are covered. \n    >>> zigzag_traversal([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10]])\n    [1, 2, 4, 3, 5, 6, 7, 10, 9, 8]","reduced":"Given 2D list of integers return list represents elements traversed in zigzag order starting from top-left corner moving rightwards. When right end reached, direction be downwards to next row, then left end until all elements covered. >>> zigzag_traversal([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10]]) [1, 2, 4, 3, 5, 6, 7, 10, 9, 8]"}
{"task_id":"EvoEval\/6","prompt":"from typing import List, Tuple\n\ndef minesweeper_clicked(\n    grid: List[List[int]], position: Tuple[int, int]\n) -> List[List[int]]:\n    \"\"\"\n    grid representation of Minesweeper game. position represents coordinates (x, y) player clicked. 0 means empty cell, 1 mine -1 represents unknown cell not clicked yet). If player clicks on cell mine, return initial grid. If cell empty, convert all adjacent cells (horizontal, vertical diagonal to 0 (don't change cell if mine). If cell clicked revealed (i 0), return initial grid. If cell clicked out of grid, return initial grid. Parameters: grid (List[List[int]]): game grid 2D list. position (Tuple[int, int]): tuple representing coordinates player clicked. Returns: List[List[int]]: updated game grid. Examples: >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (1, 2)) [[0, 1, -1], [1, -1, 0], [0, 1, 1]] >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (2, 2)) [[0, 1, -1], [1, -1, 0], [0, 1, 1]] >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (1, 1)) [[0, 1, 0], [1, 0, 0], [0, 1, 1]]\n    \"\"\"\n","raw":"The grid is a representation of a Minesweeper game.\n    The position represents the coordinates (x, y) that the player clicked.\n\n    Here, 0 means an empty cell, 1 means a mine, and -1 represents an unknown cell (which has not been clicked yet).\n    If the player clicks on a cell, and it is a mine, return the initial grid.\n    If the cell is empty, convert all the adjacent cells (horizontal, vertical, and diagonal cells) to a 0 too (don't change cell if its a mine).\n\n    If the cell clicked is already revealed (i.e., is a 0), return the initial grid.\n    If the cell clicked is out of the grid, return the initial grid.\n\n    Parameters:\n    grid (List[List[int]]): The game grid represented as a 2D list.\n    position (Tuple[int, int]): A tuple representing the coordinates the player clicked.\n\n    Returns:\n    List[List[int]]: The updated game grid.\n\n    Examples:\n    >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (1, 2))\n    [[0, 1, -1], [1, -1, 0], [0, 1, 1]]\n\n    >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (2, 2))\n    [[0, 1, -1], [1, -1, 0], [0, 1, 1]]\n\n    >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (1, 1))\n    [[0, 1, 0], [1, 0, 0], [0, 1, 1]]","reduced":"grid representation of Minesweeper game. position represents coordinates (x, y) player clicked. 0 means empty cell, 1 mine -1 represents unknown cell not clicked yet). If player clicks on cell mine, return initial grid. If cell empty, convert all adjacent cells (horizontal, vertical diagonal to 0 (don't change cell if mine). If cell clicked revealed (i 0), return initial grid. If cell clicked out of grid, return initial grid. Parameters: grid (List[List[int]]): game grid 2D list. position (Tuple[int, int]): tuple representing coordinates player clicked. Returns: List[List[int]]: updated game grid. Examples: >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (1, 2)) [[0, 1, -1], [1, -1, 0], [0, 1, 1]] >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (2, 2)) [[0, 1, -1], [1, -1, 0], [0, 1, 1]] >>> minesweeper_clicked([[0, 1, -1], [1, -1, 0], [0, 1, 1]], (1, 1)) [[0, 1, 0], [1, 0, 0], [0, 1, 1]]"}
{"task_id":"EvoEval\/7","prompt":"def find_shangri_la(code_sequence: list[int]) -> str:\r\n    \"\"\"\n    explorer to find mythical city Shangri-La. According to ancient text Shangri-La found by following code sequence of numbers each referring to direction to move directions correspond to 0: North, 1: East 2: South 3: West. Implement function takes sequence numbers input returns whether sequence leads to Shangri-La. Assume starting point always (0,0). If sequence leads back to starting point found Shangri-La function return 'Shangri-La found'. Otherwise return 'Shangri-La not found'. Not moving considered as not found. Every move considered as unit = 1. Example: >>> find_shangri_la([0, 1, 2, 3]) 'Shangri-La found' >>> find_shangri_la([0, 1, 0, 3]) 'Shangri-La not found'\n    \"\"\"\n","raw":"You are an explorer trying to find the mythical city of Shangri-La. According to an ancient text,\r\n    Shangri-La can be found by following a code sequence of numbers, each referring to the direction to move.\r\n    The directions correspond to 0: North, 1: East, 2: South, 3: West.\r\n    \r\n    Implement a function that takes a sequence of numbers as input and returns whether the sequence leads to Shangri-La.\r\n    Assume starting point is always (0,0). If the sequence leads back to the starting point, it has found Shangri-La and \r\n    function should return 'Shangri-La found'. Otherwise, return 'Shangri-La not found'.\r\n    Not moving is considered as not found.\r\n    \r\n    Note: Every move is considered as unit = 1.\r\n\r\n    Example:\r\n    >>> find_shangri_la([0, 1, 2, 3])\r\n    'Shangri-La found'\r\n    \r\n    >>> find_shangri_la([0, 1, 0, 3])\r\n    'Shangri-La not found'","reduced":"explorer to find mythical city Shangri-La. According to ancient text Shangri-La found by following code sequence of numbers each referring to direction to move directions correspond to 0: North, 1: East 2: South 3: West. Implement function takes sequence numbers input returns whether sequence leads to Shangri-La. Assume starting point always (0,0). If sequence leads back to starting point found Shangri-La function return 'Shangri-La found'. Otherwise return 'Shangri-La not found'. Not moving considered as not found. Every move considered as unit = 1. Example: >>> find_shangri_la([0, 1, 2, 3]) 'Shangri-La found' >>> find_shangri_la([0, 1, 0, 3]) 'Shangri-La not found'"}
{"task_id":"EvoEval\/8","prompt":"def transform_canvas(canvas: str) -> str:\n    \"\"\"\n    canvas containing '#' wall), '-' empty space), or 'P' point painter starts). painter can move horizontally canvas paints all empty spaces encounters with '*' without crossing or hitting walls task to return updated canvas with all accessible spaces painted, keeping wall configuration and unaccessible spaces same. If canvas contains no painter 'P', return canvas as it is. If more than one 'P' or number painted space divides empty spaces evenly, return 'Invalid canvas'. Examples: >>> transform_canvas('P----#-----#-----#-----') 'P****#-----#-----#-----' >>> transform_canvas('--#-P#-----#-----#--#--') 'Invalid canvas' >>> transform_canvas('-----#--P--#-----#-----') '-----#**P**#-----#-----' >>> transform_canvas('-----#-----#--P---#P----') 'Invalid canvas'\n    \"\"\"\n","raw":"You have an canvas containing either '#' (representing a wall), '-' (representing \n    an empty space), or 'P' (representing the point at which a painter starts). The painter \n    can move horizontally on the canvas and paints all empty spaces he encounters\n    with '*' without crossing or hitting the walls.\n    \n    The task is to return an updated canvas with all the accessible spaces painted, \n    keeping wall configuration and unaccessible spaces same. If the canvas contains no painter 'P', \n    return the canvas as it is. If there are more than one 'P' or the number of painted space divides the empty spaces evenly, return 'Invalid canvas'.\n\n    Examples:\n\n    >>> transform_canvas('P----#-----#-----#-----')\n    'P****#-----#-----#-----'\n    \n    >>> transform_canvas('--#-P#-----#-----#--#--')\n    'Invalid canvas'\n    \n    >>> transform_canvas('-----#--P--#-----#-----')\n    '-----#**P**#-----#-----'\n    \n    >>> transform_canvas('-----#-----#--P---#P----')\n    'Invalid canvas'","reduced":"canvas containing '#' wall), '-' empty space), or 'P' point painter starts). painter can move horizontally canvas paints all empty spaces encounters with '*' without crossing or hitting walls task to return updated canvas with all accessible spaces painted, keeping wall configuration and unaccessible spaces same. If canvas contains no painter 'P', return canvas as it is. If more than one 'P' or number painted space divides empty spaces evenly, return 'Invalid canvas'. Examples: >>> transform_canvas('P----#-----#-----#-----') 'P****#-----#-----#-----' >>> transform_canvas('--#-P#-----#-----#--#--') 'Invalid canvas' >>> transform_canvas('-----#--P--#-----#-----') '-----#**P**#-----#-----' >>> transform_canvas('-----#-----#--P---#P----') 'Invalid canvas'"}
{"task_id":"EvoEval\/9","prompt":"def calculate_word_frequency(string: str) -> dict:\n    \"\"\"\n    Given string calculate frequency each word (regardless of case return dictionary with words as keys frequencies values Words separated by spaces Ignore punctuation. calculate_word_frequency('Hello, World! Hello Again.') {'hello': 2, 'world': 1, 'again': 1} >>> calculate_word_frequency('This is a test. only test.') {'this': 2, 'is': 2, 'a': 2, 'test': 2, 'only': 1}\n    \"\"\"\n","raw":"Given a string, calculate the frequency of each word present in that string (regardless of case) and return a dictionary with words as keys and their frequencies as values. \n    Words are separated by spaces. Ignore punctuation.\n    \n    >>> calculate_word_frequency('Hello, World! Hello Again.')\n    {'hello': 2, 'world': 1, 'again': 1}\n\n    >>> calculate_word_frequency('This is a test. This is only a test.')\n    {'this': 2, 'is': 2, 'a': 2, 'test': 2, 'only': 1}","reduced":"Given string calculate frequency each word (regardless of case return dictionary with words as keys frequencies values Words separated by spaces Ignore punctuation. calculate_word_frequency('Hello, World! Hello Again.') {'hello': 2, 'world': 1, 'again': 1} >>> calculate_word_frequency('This is a test. only test.') {'this': 2, 'is': 2, 'a': 2, 'test': 2, 'only': 1}"}
{"task_id":"EvoEval\/10","prompt":"from typing import List\r\n\r\ndef count_animals(animal_string: str) -> List[int]:\r\n    \"\"\"\n    Input to function is string representing animals sounds in special ASCII format. task to parse string return list of integers corresponding to many times each animal made sound legend: 'C' - Cat, makes sound 'meow' 'D' - Dog, makes sound 'woof' 'B' - Bird, makes sound 'chirp' Each sound represented by a '|' each animal-sound pair separated by space. For example, 'Cat' making sound 3 times represented as 'C|||'. function should return list of integers representing sounds each animal made, in order they appear in string. Skip invalid animals skip animals already appeared twice before. skip animals after total animals (invalid and valid) reached 5 >>> count_animals('C||| D|| B| C| B||| D|||') [3, 2, 1, 1, 3]\n    \"\"\"\n","raw":"Input to this function is a string representing animals and their sounds in a special ASCII format. \r\n    Your task is to parse this string and return a list of integers corresponding to how many times each \r\n    animal made a sound.\r\n\r\n    Here is a legend:\r\n    'C' - Cat, makes sound 'meow'\r\n    'D' - Dog, makes sound 'woof'\r\n    'B' - Bird, makes sound 'chirp'\r\n\r\n    Each sound is represented by a '|', and each animal-sound pair is separated by a space.\r\n\r\n    For example, a 'Cat' making sound 3 times will be represented as 'C|||'.\r\n\r\n    The function should return a list of integers representing how many sounds each animal made, in the order \r\n    they appear in the string. Skip invalid animals and also skip animals that has already appeared twice before. Furthermore, skip any animals after total animals (invalid and valid) has reached 5\r\n\r\n    >>> count_animals('C||| D|| B| C| B||| D|||')\r\n    [3, 2, 1, 1, 3]","reduced":"Input to function is string representing animals sounds in special ASCII format. task to parse string return list of integers corresponding to many times each animal made sound legend: 'C' - Cat, makes sound 'meow' 'D' - Dog, makes sound 'woof' 'B' - Bird, makes sound 'chirp' Each sound represented by a '|' each animal-sound pair separated by space. For example, 'Cat' making sound 3 times represented as 'C|||'. function should return list of integers representing sounds each animal made, in order they appear in string. Skip invalid animals skip animals already appeared twice before. skip animals after total animals (invalid and valid) reached 5 >>> count_animals('C||| D|| B| C| B||| D|||') [3, 2, 1, 1, 3]"}
{"task_id":"EvoEval\/11","prompt":"from typing import List\n\ndef fruity_messages(fruits: List[str], location: str) -> str:\n    \"\"\"\n    Given list of fruits location return string message format: \"Oh are those <fruit> from <location>? Marvelous!\" If two fruits, message should say: \"Oh <fruit1> and <fruit2> from <location>? Marvelous!\" If more than two fruit, message should say: \"Oh are <fruit1>, <fruit2> <fruit3> from <location>? Marvelous!\" list of fruits always contain at least one fruit >>> fruity_messages(['apples','bananas'],'Florida') 'Oh apples and bananas from Florida? Marvelous!' >>> fruity_messages(['cherries'],'Michigan') 'Oh cherries from Michigan? Marvelous!'\n    \"\"\"\n","raw":"Given a list of fruits and a location, return a string message in the following format:\n\n    \"Oh, are those <fruit> from <location>? Marvelous!\"\n\n    If you have two fruits, the message should say:\n\n    \"Oh, are those <fruit1> and <fruit2> from <location>? Marvelous!\"\n\n    If you have more than two fruit, the message should say:\n\n    \"Oh, are those <fruit1>, <fruit2> and <fruit3> from <location>? Marvelous!\"\n\n    The list of fruits will always contain at least one fruit.\n\n    >>> fruity_messages(['apples','bananas'],'Florida')\n    'Oh, are those apples and bananas from Florida? Marvelous!'\n\n    >>> fruity_messages(['cherries'],'Michigan')\n    'Oh, are those cherries from Michigan? Marvelous!'","reduced":"Given list of fruits location return string message format: \"Oh are those <fruit> from <location>? Marvelous!\" If two fruits, message should say: \"Oh <fruit1> and <fruit2> from <location>? Marvelous!\" If more than two fruit, message should say: \"Oh are <fruit1>, <fruit2> <fruit3> from <location>? Marvelous!\" list of fruits always contain at least one fruit >>> fruity_messages(['apples','bananas'],'Florida') 'Oh apples and bananas from Florida? Marvelous!' >>> fruity_messages(['cherries'],'Michigan') 'Oh cherries from Michigan? Marvelous!'"}
{"task_id":"EvoEval\/12","prompt":"from typing import List\n\ndef teleporter_energy_signature(flux_values: List[int]) -> int:\n    \"\"\"\n    year 7082 teleporters primary mode transportation across cities. Teleporter not function without unique energy signature unique energy signature formed by performing certain operations over list flux values recorded daily. Given list of flux values (integers always >= 0), task to determine unique energy signature using following steps: - Find element with maximum occurrence. If multiple, select smallest one Find sum of all elements in array. Multiply sum all elements with most occurred number. Return result. >>> teleporter_energy_signature([1, 2, 3, 2, 1, 2, 5, 1, 6]) 23 Explanation: number 2 and 1 appear thrice in list, but 1 is smaller. sum of all elements in array is 23. So, 23 * 1 = 23\n    \"\"\"\n","raw":"In the year 7082, teleporters are the primary mode of transportation across cities. Teleporter do\n    not function without a unique energy signature. This unique energy signature is formed by\n    performing certain operations over list of flux values recorded daily.\n\n    Given a list of flux values (integers always >= 0), your task is to determine the unique energy signature \n    by using the following steps:\n    - Find the element with maximum occurrence. If there are multiple, select the smallest one.\n    - Find the sum of all elements in the array.\n    - Multiply the sum of all elements with the most occurred number.\n\n    Return the result.\n\n    >>> teleporter_energy_signature([1, 2, 3, 2, 1, 2, 5, 1, 6])\n    23\n\n    Explanation: The number 2 and 1 appear thrice in the list, but 1 is smaller. \n    The sum of all elements in the array is 23. So, 23 * 1 = 23","reduced":"year 7082 teleporters primary mode transportation across cities. Teleporter not function without unique energy signature unique energy signature formed by performing certain operations over list flux values recorded daily. Given list of flux values (integers always >= 0), task to determine unique energy signature using following steps: - Find element with maximum occurrence. If multiple, select smallest one Find sum of all elements in array. Multiply sum all elements with most occurred number. Return result. >>> teleporter_energy_signature([1, 2, 3, 2, 1, 2, 5, 1, 6]) 23 Explanation: number 2 and 1 appear thrice in list, but 1 is smaller. sum of all elements in array is 23. So, 23 * 1 = 23"}
{"task_id":"EvoEval\/13","prompt":"from typing import List\n\ndef find_rarest_element(elems: List[str]) -> str:\n    \"\"\"\n    Find rarest element in list of strings. If multiple rarest elements return one appears first If list empty return None. >>> find_rarest_element(['apple', 'banana', 'apple', 'orange', 'banana]) 'banana' >>> find_rarest_element(['cat', 'dog', 'bird', 'cat', 'dog']) 'bird' >>> find_rarest_element([]) None\n    \"\"\"\n","raw":"Find the rarest element in a list of strings. If there are multiple rarest elements, return the one that appears first. \n    If the list is empty, return None.\n\n    >>> find_rarest_element(['apple', 'banana', 'apple', 'orange', 'banana', 'orange', 'apple'])\n    'banana'\n    >>> find_rarest_element(['cat', 'dog', 'bird', 'cat', 'dog', 'cat'])\n    'bird'\n    >>> find_rarest_element([])\n    None","reduced":"Find rarest element in list of strings. If multiple rarest elements return one appears first If list empty return None. >>> find_rarest_element(['apple', 'banana', 'apple', 'orange', 'banana]) 'banana' >>> find_rarest_element(['cat', 'dog', 'bird', 'cat', 'dog']) 'bird' >>> find_rarest_element([]) None"}
{"task_id":"EvoEval\/14","prompt":"def create_alias(name: str) -> str:\n    \"\"\"\n    For given name create alias following rules: If name includes vowel replace with next vowel in cycle a->e->i->o->u->a. If name includes consonant replace with next consonant in alphabetical order, once 'z' reached loop back to 'b'. alias should maintain original names case (upper or lower) Ignore non-alphabetical characters. >>> create_alias('John Doe') 'Kujp Fui'\n    \"\"\"\n","raw":"For a given name, create an alias following these rules:\n        If the name includes a vowel, replace it with the next vowel in the cycle a->e->i->o->u->a. \n        If the name includes a consonant, replace it with the next consonant in alphabetical order, once 'z' is reached, loop back to 'b'.\n        The alias should maintain the original names case (upper or lower)\n        Ignore any non-alphabetical characters.\n\n    >>> create_alias('John Doe')\n    'Kujp Fui'","reduced":"For given name create alias following rules: If name includes vowel replace with next vowel in cycle a->e->i->o->u->a. If name includes consonant replace with next consonant in alphabetical order, once 'z' reached loop back to 'b'. alias should maintain original names case (upper or lower) Ignore non-alphabetical characters. >>> create_alias('John Doe') 'Kujp Fui'"}
{"task_id":"EvoEval\/15","prompt":"def evaluate_poker_hand(hand: list):\n    \"\"\"\n    Evaluate poker hand return score. game use point scoring rules: 1. Each card has value (A=1, 2-10 = card number, J=11, Q=12 K=13) 2. 'pair' (two cards same value) scores value card 3. 'triple' (three cards same value) scores double value card. 4. 'four of a kind' (four cards same value) scores triple value card. 5. 'five of a kind' (five cards same value) scores quadruple value card 6. If hand has no pairs, triples or fours, score is 0 consider all cards in hand if both pair and triple score should be score or pair + score of triple. \"hand\" list contains 5 strings each representing card in format 'value+suit' (i. ['10H', '10D', '10C', '2S', '2D']). suit irrelevant for game. >>> evaluate_poker_hand(['5H', '5D', '5S', '9C', '9D']) 19 >>> evaluate_poker_hand(['AS', '2H', '3S', '4H', '5D']) 0 >>> evaluate_poker_hand(['KH', 'KD', 'KS', 'KC', 'KA']) 52\n    \"\"\"\n","raw":"Evaluate a poker hand and return its score.\n\n    In this game, we use the following point scoring rules:\n\n    1. Each card has a value (A=1, 2-10 = card number, J=11, Q=12, K=13)\n    2. A 'pair' (two cards of the same value) scores the value of the card.\n    3. A 'triple' (three cards of the same value) scores double the value of the card.\n    4. A 'four of a kind' (four cards of the same value) scores triple the value of the card.\n    5. A 'five of a kind' (five cards of the same value) scores quadruple the value of the card.\n    6. If hand has no pairs, triples or fours, score is 0\n\n    Note, you should consider all cards in hand, i.e., if there are both pair and triple, score should be score or pair + score of triple.\n\n    The \"hand\" list contains 5 strings, each representing a card in the format 'value+suit'\n    (i.e. ['10H', '10D', '10C', '2S', '2D']). The suit is irrelevant for this game.\n\n    >>> evaluate_poker_hand(['5H', '5D', '5S', '9C', '9D'])\n    19\n    >>> evaluate_poker_hand(['AS', '2H', '3S', '4H', '5D'])\n    0\n    >>> evaluate_poker_hand(['KH', 'KD', 'KS', 'KC', 'KA'])\n    52","reduced":"Evaluate poker hand return score. game use point scoring rules: 1. Each card has value (A=1, 2-10 = card number, J=11, Q=12 K=13) 2. 'pair' (two cards same value) scores value card 3. 'triple' (three cards same value) scores double value card. 4. 'four of a kind' (four cards same value) scores triple value card. 5. 'five of a kind' (five cards same value) scores quadruple value card 6. If hand has no pairs, triples or fours, score is 0 consider all cards in hand if both pair and triple score should be score or pair + score of triple. \"hand\" list contains 5 strings each representing card in format 'value+suit' (i. ['10H', '10D', '10C', '2S', '2D']). suit irrelevant for game. >>> evaluate_poker_hand(['5H', '5D', '5S', '9C', '9D']) 19 >>> evaluate_poker_hand(['AS', '2H', '3S', '4H', '5D']) 0 >>> evaluate_poker_hand(['KH', 'KD', 'KS', 'KC', 'KA']) 52"}
{"task_id":"EvoEval\/16","prompt":"def fibonacci_sum(n):\n    \"\"\"\n    Given positive integer n return sum first n numbers Fibonacci sequence Fibonacci sequence is series of numbers number sum two preceding ones starting with 0 and 1. >>> fibonacci_sum(1) 0 >>> fibonacci_sum(2) 1 >>> fibonacci_sum(3) 2 >>> fibonacci_sum(10) 88 >>> fibonacci_sum(20) 10945 >>> fibonacci_sum(30) 1346268\n    \"\"\"\n","raw":"Given a positive integer n, return the sum of the first n numbers in the Fibonacci sequence.\n    The Fibonacci sequence is a series of numbers where a number is the sum of the two preceding ones, starting with 0 and 1.\n    \n    >>> fibonacci_sum(1)\n    0\n    >>> fibonacci_sum(2)\n    1\n    >>> fibonacci_sum(3)\n    2\n    >>> fibonacci_sum(10)\n    88\n    >>> fibonacci_sum(20)\n    10945\n    >>> fibonacci_sum(30)\n    1346268","reduced":"Given positive integer n return sum first n numbers Fibonacci sequence Fibonacci sequence is series of numbers number sum two preceding ones starting with 0 and 1. >>> fibonacci_sum(1) 0 >>> fibonacci_sum(2) 1 >>> fibonacci_sum(3) 2 >>> fibonacci_sum(10) 88 >>> fibonacci_sum(20) 10945 >>> fibonacci_sum(30) 1346268"}
{"task_id":"EvoEval\/17","prompt":"def wizard_battle(dragon_hp: int, wizards: list) -> str:\n    \"\"\"\n    Return name of wizard defeated dragon, given dragon's hit points (HP) and ordered list with name wizard and magic power: - wizard's magic reduces dragon's HP by magic power. Wizards take turns in order listed only get to attack once. dragon defeated when HP reduced to 0 or less. If none wizards can defeat dragon return 'The dragon won!' Note wizards are list of tuples each tuple has wizard's name as string and magic power as integer. dragon's HP is positive integer. >>> wizard_battle(20, [('Gandalf', 15), ('Merlin', 10), ('Dumbledore', 30)]) 'Merlin' >>> wizard_battle(100, [('Harry', 25), ('Ron', 20), ('Hermione', 30), ('Luna', 10)]) 'The dragon won!' >>> wizard_battle(65, [('Newt', 15), ('Tina', 20)]) 'The dragon won!'\n    \"\"\"\n","raw":"Return the name of the wizard who defeated the dragon, given the dragon's hit points (HP) and\n    an ordered list with the name of the wizard and their magic power:\n        - The wizard's magic reduces the dragon's HP by their magic power. \n        - Wizards take turns in the order they are listed, and they only get to attack once.\n        - The dragon is defeated when its HP is reduced to 0 or less.\n\n    If none of the wizards can defeat the dragon return 'The dragon won!'\n\n    Note that the wizards are a list of tuples, where each tuple has the wizard's name as a string and\n    their magic power as an integer. The dragon's HP is a positive integer.\n\n    >>> wizard_battle(20, [('Gandalf', 15), ('Merlin', 10), ('Dumbledore', 30)])\n    'Merlin'\n    >>> wizard_battle(100, [('Harry', 25), ('Ron', 20), ('Hermione', 30), ('Luna', 10)])\n    'The dragon won!'\n    >>> wizard_battle(65, [('Newt', 15), ('Tina', 20)])\n    'The dragon won!'","reduced":"Return name of wizard defeated dragon, given dragon's hit points (HP) and ordered list with name wizard and magic power: - wizard's magic reduces dragon's HP by magic power. Wizards take turns in order listed only get to attack once. dragon defeated when HP reduced to 0 or less. If none wizards can defeat dragon return 'The dragon won!' Note wizards are list of tuples each tuple has wizard's name as string and magic power as integer. dragon's HP is positive integer. >>> wizard_battle(20, [('Gandalf', 15), ('Merlin', 10), ('Dumbledore', 30)]) 'Merlin' >>> wizard_battle(100, [('Harry', 25), ('Ron', 20), ('Hermione', 30), ('Luna', 10)]) 'The dragon won!' >>> wizard_battle(65, [('Newt', 15), ('Tina', 20)]) 'The dragon won!'"}
{"task_id":"EvoEval\/18","prompt":"def magical_seven(n: int):\n    \"\"\"\n    magical_seven returns n-th number multiple of 7 digits sum up to 7. >>> magical_seven(1) 7 >>> magical_seven(2) 70 magical_seven(3) 133 magical_seven(4) 322 magical_seven(5) 511\n    \"\"\"\n","raw":"magical_seven returns the n-th number that is a multiple of 7 and its digits sum up to 7.\n    \n    >>> magical_seven(1)\n    7\n    >>> magical_seven(2)\n    70\n    >>> magical_seven(3)\n    133\n    >>> magical_seven(4)\n    322\n    >>> magical_seven(5)\n    511","reduced":"magical_seven returns n-th number multiple of 7 digits sum up to 7. >>> magical_seven(1) 7 >>> magical_seven(2) 70 magical_seven(3) 133 magical_seven(4) 322 magical_seven(5) 511"}
{"task_id":"EvoEval\/19","prompt":"def vampires_in_matrix(m: list):\n    \"\"\"\n    vampires_in_matrix takes 2D list integers input 0 represents empty cell 1 human 2 represents vampire function number humans in danger bitten human in danger if share row or column with vampire. >>> vampires_in_matrix([[0, 1, 0], [2, 0, 1], [1, 1, 0]]) 2 >>> vampires_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) 0 >>> vampires_in_matrix([[1, 2, 1], [1, 1, 1], [2, 1, 1]]) 6 >>> vampires_in_matrix([[1, 1, 1], [0, 0, 0], [2, 2, 2]]) 3 >>> vampires_in_matrix([[2]]) 0\n    \"\"\"\n","raw":"vampires_in_matrix takes a 2D list of integers as an input,\n    where 0 represents an empty cell, 1 represents a human, and 2 represents a vampire.\n    The function will return the number of humans that are in danger of being bitten.\n    A human is considered in danger if they share a row or a column with a vampire.\n\n    >>> vampires_in_matrix([[0, 1, 0], [2, 0, 1], [1, 1, 0]])\n    2\n    >>> vampires_in_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]])\n    0\n    >>> vampires_in_matrix([[1, 2, 1], [1, 1, 1], [2, 1, 1]])\n    6\n    >>> vampires_in_matrix([[1, 1, 1], [0, 0, 0], [2, 2, 2]])\n    3\n    >>> vampires_in_matrix([[2]])\n    0","reduced":"vampires_in_matrix takes 2D list integers input 0 represents empty cell 1 human 2 represents vampire function number humans in danger bitten human in danger if share row or column with vampire. >>> vampires_in_matrix([[0, 1, 0], [2, 0, 1], [1, 1, 0]]) 2 >>> vampires_matrix([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) 0 >>> vampires_in_matrix([[1, 2, 1], [1, 1, 1], [2, 1, 1]]) 6 >>> vampires_in_matrix([[1, 1, 1], [0, 0, 0], [2, 2, 2]]) 3 >>> vampires_in_matrix([[2]]) 0"}
{"task_id":"EvoEval\/20","prompt":"def generate_pattern(n: int):\n    \"\"\"\n    Given integer 'n' return list of strings each string represents pattern pattern composed of numbers 1 to n ascending order descending back to 1 each number separated by comma If n 0 or negative return empty list. >>> generate_pattern(3) ['1', '1,2', '1,2,3', '3,2,1', '2,1', '1'] >>> generate_pattern(0) []\n    \"\"\"\n","raw":"Given an integer 'n', return a list of strings where each string represents a pattern. \n    The pattern is composed of the numbers from 1 to n in ascending order, then descending back to 1, \n    with each number separated by a comma. If n is 0 or negative, return an empty list.\n\n    >>> generate_pattern(3)\n    ['1', '1,2', '1,2,3', '3,2,1', '2,1', '1']\n\n    >>> generate_pattern(0)\n    []","reduced":"Given integer 'n' return list of strings each string represents pattern pattern composed of numbers 1 to n ascending order descending back to 1 each number separated by comma If n 0 or negative return empty list. >>> generate_pattern(3) ['1', '1,2', '1,2,3', '3,2,1', '2,1', '1'] >>> generate_pattern(0) []"}
{"task_id":"EvoEval\/21","prompt":"def crossword_validator(grid: list, words: list):\n    \"\"\"\n    Consider 2D grid representing square crossword puzzle. Each cell contains single character. Determine if all words from provided list words can be found in grid. Words can be found left-to-right right-to-left top-to-bottom bottom-to-top column). assume words only found in contiguous cells words not 'wrap' around grid. Note grid is square (N x N) all words are lowercase. Parameters: grid: list of list of char - each char is lowercase letter. words: list of str - each str is lowercase word. Returns: boolean - return True all words found in grid, False otherwise. >>> crossword_validator([['c', 'a', 't'], ['d', 'o', 'g'] ['d', 'o', 'p']], ['cat', 'dog', 'pop']) False >>> crossword_validator([['c', 'a', 't'], ['d', 'o', 'g'] ['d', 'o', 'p']], ['cdd', 'dog', 'pod']) True\n    \"\"\"\n","raw":"Consider a 2D grid representing a square crossword puzzle. Each cell of the grid contains a single character.\n\n    Determine if all the words from a provided list of words can be found in the grid.\n    Words can be found left-to-right (in a row), right-to-left (in a row),\n    top-to-bottom down (in a column), and bottom-to-top (in a column).\n\n    We assume that words are only found in contiguous cells and words do not 'wrap' around the grid.\n\n    Note: the grid is a square (N x N) and all words are lowercase.\n\n    Parameters:\n    grid: list of list of char - where each char is a lowercase letter.\n    words: list of str - where each str is a lowercase word.\n\n    Returns:\n    boolean - return True all words are found in the grid, False otherwise.\n\n    >>> crossword_validator([['c', 'a', 't'], ['d', 'o', 'g'], ['d', 'o', 'p']], ['cat', 'dog', 'pop'])\n    False\n    >>> crossword_validator([['c', 'a', 't'], ['d', 'o', 'g'], ['d', 'o', 'p']], ['cdd', 'dog', 'pod'])\n    True","reduced":"Consider 2D grid representing square crossword puzzle. Each cell contains single character. Determine if all words from provided list words can be found in grid. Words can be found left-to-right right-to-left top-to-bottom bottom-to-top column). assume words only found in contiguous cells words not 'wrap' around grid. Note grid is square (N x N) all words are lowercase. Parameters: grid: list of list of char - each char is lowercase letter. words: list of str - each str is lowercase word. Returns: boolean - return True all words found in grid, False otherwise. >>> crossword_validator([['c', 'a', 't'], ['d', 'o', 'g'] ['d', 'o', 'p']], ['cat', 'dog', 'pop']) False >>> crossword_validator([['c', 'a', 't'], ['d', 'o', 'g'] ['d', 'o', 'p']], ['cdd', 'dog', 'pod']) True"}
{"task_id":"EvoEval\/22","prompt":"def galactic_travel(t, v):\n    \"\"\"\n    time (t) in years average velocity (v) in km\/s calculate distance traveled in light years galaxy far away Assume 1 light year approximately 9.461 x 10^12 km. >>> galactic_travel(1, 300000) 0.9999788605855617\n    \"\"\"\n","raw":"Given the time (t) in years and average velocity (v) in km\/s, calculate the distance traveled in light years in a galaxy far, far away.\n    Assume that 1 light year is approximately 9.461 x 10^12 km.\n\n    >>> galactic_travel(1, 300000)\n    0.9999788605855617","reduced":"time (t) in years average velocity (v) in km\/s calculate distance traveled in light years galaxy far away Assume 1 light year approximately 9.461 x 10^12 km. >>> galactic_travel(1, 300000) 0.9999788605855617"}
{"task_id":"EvoEval\/23","prompt":"def prime_cipher(s: str):\n    \"\"\"\n    Given string s, write function performs following operations: Replace each letter in string s with k-th prime number, a is 1st prime number b 2nd prime number z is 26th prime number If character in string not a lowercase letter a-z leave it unchanged. Return new string. Notes: 1st prime number is 2, 2nd is 3 3rd is 5, so on. function should be case sensitive. Only lowercase letters replaced with prime numbers. Examples: >>> prime_cipher(\"hello\") '1911373747' >>> prime_cipher(\"world\") '834761377' >>> prime_cipher(\"Python!\") 'P9771194743!' >>> prime_cipher(\"12345\") '12345' >>> prime_cipher(\"abc\") '235'\n    \"\"\"\n","raw":"Given a string s, write a function that performs the following operations:\n    - Replace each letter in the string s with the k-th prime number, where a is the 1st prime number, b is the 2nd prime number, z is the 26th prime number.\n    - If the character in the string is not a lowercase letter a-z, leave it unchanged.\n    - Return the new string.\n\n    Notes:\n    - The 1st prime number is 2, the 2nd is 3, the 3rd is 5, and so on.\n    - The function should be case sensitive. Only lowercase letters should be replaced with prime numbers.\n\n    Examples:\n    >>> prime_cipher(\"hello\")\n    '1911373747'\n    >>> prime_cipher(\"world\")\n    '834761377'\n    >>> prime_cipher(\"Python!\")\n    'P9771194743!'\n    >>> prime_cipher(\"12345\")\n    '12345'\n    >>> prime_cipher(\"abc\")\n    '235'","reduced":"Given string s, write function performs following operations: Replace each letter in string s with k-th prime number, a is 1st prime number b 2nd prime number z is 26th prime number If character in string not a lowercase letter a-z leave it unchanged. Return new string. Notes: 1st prime number is 2, 2nd is 3 3rd is 5, so on. function should be case sensitive. Only lowercase letters replaced with prime numbers. Examples: >>> prime_cipher(\"hello\") '1911373747' >>> prime_cipher(\"world\") '834761377' >>> prime_cipher(\"Python!\") 'P9771194743!' >>> prime_cipher(\"12345\") '12345' >>> prime_cipher(\"abc\") '235'"}
{"task_id":"EvoEval\/24","prompt":"def alien_language_translator(english_word: str):\n    \"\"\"\n    Assume alien language each English replaced by unique symbol symbol 'a' is '+' 'b' '-' 'c' '*' 'd' '\/' 'e' is '%' 'f' '@' 'g' '!' 'h' '#' 'i' '$' 'j' is '^' 'k' is '&' 'l' is '(' 'm' is ')' 'n' is '=' 'o' '?' 'p' is ':' 'q' is ';' 'r' is '`' 's' is '~' 't' '>' 'u' is '<' 'v' is '{' 'w' is '}' 'x' is '[' 'y' is ']' 'z' is '|'. Write function translates English word into alien language. >>> alien_language_translator(\"hello\") '#%((?' >>> alien(\"alien\") '+($%='\n    \"\"\"\n","raw":"Assume there is an alien language where each English alphabet is replaced by a unique symbol. \n    In this language, the symbol for 'a' is '+', 'b' is '-', 'c' is '*', 'd' is '\/', 'e' is '%', 'f' is '@', 'g' is '!',\n    'h' is '#', 'i' is '$', 'j' is '^', 'k' is '&', 'l' is '(', 'm' is ')', 'n' is '=', 'o' is '?', 'p' is ':',\n    'q' is ';', 'r' is '`', 's' is '~', 't' is '>', 'u' is '<', 'v' is '{', 'w' is '}', 'x' is '[', 'y' is ']', 'z' is '|'.\n    Write a function that translates an English word into this alien language.\n\n    >>> alien_language_translator(\"hello\")\n    '#%((?'\n\n    >>> alien_language_translator(\"alien\")\n    '+($%='","reduced":"Assume alien language each English replaced by unique symbol symbol 'a' is '+' 'b' '-' 'c' '*' 'd' '\/' 'e' is '%' 'f' '@' 'g' '!' 'h' '#' 'i' '$' 'j' is '^' 'k' is '&' 'l' is '(' 'm' is ')' 'n' is '=' 'o' '?' 'p' is ':' 'q' is ';' 'r' is '`' 's' is '~' 't' '>' 'u' is '<' 'v' is '{' 'w' is '}' 'x' is '[' 'y' is ']' 'z' is '|'. Write function translates English word into alien language. >>> alien_language_translator(\"hello\") '#%((?' >>> alien(\"alien\") '+($%='"}
{"task_id":"EvoEval\/25","prompt":"def word_frequency_analysis(text: str, word: str):\r\n    \"\"\"\n    Return frequency of given word in text. return sentence in which word appears most times function return tuple where first element is frequency of word, second element is sentence with max frequency word. If word not found in text, return (0, \"\"). Assume sentences end with period. >>> word_frequency_analysis(\"Hello world. I love this world.\", \"world\") (2, \"Hello world\") >>> word_frequency_analysis(\"This is best day. love this day because it's sunny.\", \"day\") (2, \"This best day\") >>> word_frequency_analysis(\"This is a test. Testing is fun.\", \"test\") (1, \"This is a test\") >>> word_frequency_analysis(\"Welcome to world of coding.\", \"python\") (0, \"\")\n    \"\"\"\n","raw":"Return the frequency of the given word in a text. Also, return the sentence in which the word appears the most times.\r\n\r\n    The function will return a tuple where the first element is the frequency of the word, and the second element is the sentence with the max frequency of the word. If the word is not found in the text, return (0, \"\"). \r\n\r\n    Assume that sentences end with a period.\r\n\r\n    >>> word_frequency_analysis(\"Hello world. I love this world.\", \"world\")\r\n    (2, \"Hello world\")\r\n\r\n    >>> word_frequency_analysis(\"This is the best day. I love this day because it's sunny.\", \"day\")\r\n    (2, \"This is the best day\")\r\n\r\n    >>> word_frequency_analysis(\"This is a test. Testing is fun.\", \"test\")\r\n    (1, \"This is a test\")\r\n\r\n    >>> word_frequency_analysis(\"Welcome to the world of coding.\", \"python\")\r\n    (0, \"\")","reduced":"Return frequency of given word in text. return sentence in which word appears most times function return tuple where first element is frequency of word, second element is sentence with max frequency word. If word not found in text, return (0, \"\"). Assume sentences end with period. >>> word_frequency_analysis(\"Hello world. I love this world.\", \"world\") (2, \"Hello world\") >>> word_frequency_analysis(\"This is best day. love this day because it's sunny.\", \"day\") (2, \"This best day\") >>> word_frequency_analysis(\"This is a test. Testing is fun.\", \"test\") (1, \"This is a test\") >>> word_frequency_analysis(\"Welcome to world of coding.\", \"python\") (0, \"\")"}
{"task_id":"EvoEval\/26","prompt":"def pathfinder(maze, start, end):\n    \"\"\"\n    pathfinder function takes 2D list (maze), tuple (start) tuple (end). function return list of directions (\"up\", \"down\", \"left\", \"right\") leads from start to end. maze represented as 2D list 0 represents open path 1 represents wall start end represented as tuples first element row index second element column index. If path exist function return empty list. If start end same function return empty list. Examples: >>> pathfinder([[0, 0, 0], [1, 1, 0], [1, 1, 0]], (0, 0), (2, 2)) ['right', 'right', 'down', 'down'] >>> pathfinder([[0, 1, 0], [0, 1, 0], [0, 1, 0]], (0, 0), (0, 2)) [] >>> pathfinder([[0, 0, 0]], (0, 0), (0, 0)) [] >>> pathfinder([[0, 0, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (2, 0)) ['down', 'down']\n    \"\"\"\n","raw":"pathfinder is a function that takes a 2D list (maze), a tuple (start) and a tuple (end).\n    The function should return a list of directions (\"up\", \"down\", \"left\", \"right\") that leads from start to end.\n    The maze is represented as a 2D list where 0 represents an open path and 1 represents a wall.\n    The start and end are represented as tuples where the first element is the row index and the second element is the column index.\n    If the path does not exist, the function should return an empty list.\n    If the start and end are the same, the function should return an empty list.\n    \n    Examples:\n    >>> pathfinder([[0, 0, 0], [1, 1, 0], [1, 1, 0]], (0, 0), (2, 2))\n    ['right', 'right', 'down', 'down']\n    >>> pathfinder([[0, 1, 0], [0, 1, 0], [0, 1, 0]], (0, 0), (0, 2))\n    []\n    >>> pathfinder([[0, 0, 0]], (0, 0), (0, 0))\n    []\n    >>> pathfinder([[0, 0, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (2, 0))\n    ['down', 'down']","reduced":"pathfinder function takes 2D list (maze), tuple (start) tuple (end). function return list of directions (\"up\", \"down\", \"left\", \"right\") leads from start to end. maze represented as 2D list 0 represents open path 1 represents wall start end represented as tuples first element row index second element column index. If path exist function return empty list. If start end same function return empty list. Examples: >>> pathfinder([[0, 0, 0], [1, 1, 0], [1, 1, 0]], (0, 0), (2, 2)) ['right', 'right', 'down', 'down'] >>> pathfinder([[0, 1, 0], [0, 1, 0], [0, 1, 0]], (0, 0), (0, 2)) [] >>> pathfinder([[0, 0, 0]], (0, 0), (0, 0)) [] >>> pathfinder([[0, 0, 0], [0, 1, 0], [0, 0, 0]], (0, 0), (2, 0)) ['down', 'down']"}
{"task_id":"EvoEval\/27","prompt":"def split_strings(s: str, n: int):\n    \"\"\"\n    Return list of n-character long strings created from input string s. If length s multiple n remaining characters added as last element returned list >>> split_strings('HelloWorld', 3) ['Hel', 'loW', 'orl', 'd'] >>> split_strings('CodingIsFun', 5) ['Codin', 'gIsFu', 'n']\n    \"\"\"\n","raw":"Return a list of n-character long strings created from the input string s.\n    If the length of s isn't a multiple of n, the remaining characters are added as the \n    last element of the returned list.\n\n    >>> split_strings('HelloWorld', 3)\n    ['Hel', 'loW', 'orl', 'd']\n    >>> split_strings('CodingIsFun', 5)\n    ['Codin', 'gIsFu', 'n']","reduced":"Return list of n-character long strings created from input string s. If length s multiple n remaining characters added as last element returned list >>> split_strings('HelloWorld', 3) ['Hel', 'loW', 'orl', 'd'] >>> split_strings('CodingIsFun', 5) ['Codin', 'gIsFu', 'n']"}
{"task_id":"EvoEval\/28","prompt":"def calculate_progressive_tax(income: float, deductions=0) -> float:\n    \"\"\"\n    Calculate tax for given income and deductions according to progressive tax rates: - Up to $10,000 income is tax-free - next $25,000 taxed at 15% - next $45,000 taxed at 25% - income over $130,000 taxed at 30% function considers tax reductions due to deductions: - first $1000 deductions subtracted at 1:1 ratio from taxable income - next $2000 deductions subtracted at 2:1 ratio from taxable income - deduction over $3000 subtracted at 3:1 ratio from taxable income return float representing amount of tax. Examples: >>> calculate_progressive_tax(12000, 500) 225.0 >>> calculate_progressive_tax(55000, 2500) 7750.0 >>> calculate_progressive_tax(120000, 5000) 23700.0\n    \"\"\"\n","raw":"Calculate the tax for a given income and deductions according to a set of progressive tax rates:\n\n    - Up to $10,000 of income is tax-free\n    - The next $25,000 is taxed at 15%\n    - The next $45,000 is taxed at 25%\n    - Any income over $130,000 is taxed at 30%\n\n    The function also considers tax reductions due to deductions:\n        - The first $1000 of deductions are subtracted at a 1:1 ratio from the taxable income\n        - The next $2000 of deductions are subtracted at a 2:1 ratio from the taxable income\n        - Any deduction over $3000 is subtracted at a 3:1 ratio from the taxable income\n\n    It should return a float representing the amount of tax.\n\n    Examples:\n    >>> calculate_progressive_tax(12000, 500)\n    225.0\n    >>> calculate_progressive_tax(55000, 2500)\n    7750.0\n    >>> calculate_progressive_tax(120000, 5000)\n    23700.0","reduced":"Calculate tax for given income and deductions according to progressive tax rates: - Up to $10,000 income is tax-free - next $25,000 taxed at 15% - next $45,000 taxed at 25% - income over $130,000 taxed at 30% function considers tax reductions due to deductions: - first $1000 deductions subtracted at 1:1 ratio from taxable income - next $2000 deductions subtracted at 2:1 ratio from taxable income - deduction over $3000 subtracted at 3:1 ratio from taxable income return float representing amount of tax. Examples: >>> calculate_progressive_tax(12000, 500) 225.0 >>> calculate_progressive_tax(55000, 2500) 7750.0 >>> calculate_progressive_tax(120000, 5000) 23700.0"}
{"task_id":"EvoEval\/29","prompt":"def find_palindrome_substrings(s: str):\n    \"\"\"\n    string find unique substrings palindromes palindrome is word number phrase sequence characters reads same forward backward ignoring spaces punctuation capitalization Return list unique palindrome substrings sorted ascending order find_palindrome_substrings('racecar') ['a', 'aceca' 'c', 'cec' 'e', 'r', 'racecar'] find_palindrome_substrings('madam') ['a', 'ada', 'd', 'm', 'madam'] find_palindrome_substrings('civic') ['c', 'civic', 'i', 'ivi', 'v'] find_palindrome_substrings('hello') ['e', 'h', 'l', 'll', 'o'] find_palindrome_substrings('hannah') ['a', 'anna', 'h', 'hannah', 'n', 'nn']\n    \"\"\"\n","raw":"Given a string, find all unique substrings that are palindromes.\n    \n    A palindrome is a word, number, phrase, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.\n    \n    Return a list of all unique palindrome substrings, sorted in ascending order.\n\n    >>> find_palindrome_substrings('racecar')\n    ['a', 'aceca', 'c', 'cec', 'e', 'r', 'racecar']\n\n    >>> find_palindrome_substrings('madam')\n    ['a', 'ada', 'd', 'm', 'madam']\n\n    >>> find_palindrome_substrings('civic')\n    ['c', 'civic', 'i', 'ivi', 'v']\n\n    >>> find_palindrome_substrings('hello')\n    ['e', 'h', 'l', 'll', 'o']\n\n    >>> find_palindrome_substrings('hannah')\n    ['a', 'anna', 'h', 'hannah', 'n', 'nn']","reduced":"string find unique substrings palindromes palindrome is word number phrase sequence characters reads same forward backward ignoring spaces punctuation capitalization Return list unique palindrome substrings sorted ascending order find_palindrome_substrings('racecar') ['a', 'aceca' 'c', 'cec' 'e', 'r', 'racecar'] find_palindrome_substrings('madam') ['a', 'ada', 'd', 'm', 'madam'] find_palindrome_substrings('civic') ['c', 'civic', 'i', 'ivi', 'v'] find_palindrome_substrings('hello') ['e', 'h', 'l', 'll', 'o'] find_palindrome_substrings('hannah') ['a', 'anna', 'h', 'hannah', 'n', 'nn']"}
{"task_id":"EvoEval\/30","prompt":"from typing import List, Tuple\n\ndef find_path(maze: List[List[int]], start: Tuple[int], end: Tuple[int]):\n    \"\"\"\n    Returns shortest path start to end in maze 2D array maze 0s represent walls 1s represent open paths start and end points are tuples representing coordinates function return list of points representing shortest path start to end. If no path possible return empty list >>> maze = [[1,0,1,1,1], [1,0,1,0,1] [1,0,0,1] [1] >>> start = (0,0) >>> end = (4, 4) >>> find_path(maze, start, end) [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)] >>> maze = [[1,0,1], [0,0,1], [1,1,1]] >>> start = (0,0) >>> end = (2, 2) >>> find_path(maze, start, end) []\n    \"\"\"\n","raw":"Returns the shortest path from start to end in a maze represented by a 2D array.\n\n    The maze is a 2D array where 0s represent walls and 1s represent open paths. The start and end points \n    are tuples representing coordinates in the 2D array. The function should return a list of points \n    representing the shortest path from start to end. If no path is possible, return an empty list.\n\n    >>> maze = [[1,0,1,1,1], [1,0,1,0,1], [1,1,1,0,1], [1,0,0,0,1], [1,1,1,1,1]]\n    >>> start = (0,0)\n    >>> end = (4, 4)\n    >>> find_path(maze, start, end)\n    [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)]\n\n    >>> maze = [[1,0,1], [0,0,1], [1,1,1]]\n    >>> start = (0,0)\n    >>> end = (2, 2)\n    >>> find_path(maze, start, end)\n    []","reduced":"Returns shortest path start to end in maze 2D array maze 0s represent walls 1s represent open paths start and end points are tuples representing coordinates function return list of points representing shortest path start to end. If no path possible return empty list >>> maze = [[1,0,1,1,1], [1,0,1,0,1] [1,0,0,1] [1] >>> start = (0,0) >>> end = (4, 4) >>> find_path(maze, start, end) [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4)] >>> maze = [[1,0,1], [0,0,1], [1,1,1]] >>> start = (0,0) >>> end = (2, 2) >>> find_path(maze, start, end) []"}
{"task_id":"EvoEval\/31","prompt":"def unique_paths(m: int, n: int):\n    \"\"\"\n    robot located at top-left corner of m x n grid (marked 'Start' in diagram below). robot can only move either down or right. robot trying to reach bottom-right corner of grid (marked 'Finish' diagram below). How many possible unique paths from start to finish? >>> unique_paths(3, 2) 3 >>> unique_paths(7, 3) 28 >>> unique_paths(3, 3) 6 :param m: number of rows in grid :param n: number of columns in grid :return: number of possible unique paths from start to finish\n    \"\"\"\n","raw":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\n    The robot can only move either down or right at any point in time. \n    The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\n    How many possible unique paths are there from start to finish?\n    >>> unique_paths(3, 2)\n    3\n    >>> unique_paths(7, 3)\n    28\n    >>> unique_paths(3, 3)\n    6\n\n    :param m: the number of rows in the grid\n    :param n: the number of columns in the grid\n    :return: the number of possible unique paths from start to finish","reduced":"robot located at top-left corner of m x n grid (marked 'Start' in diagram below). robot can only move either down or right. robot trying to reach bottom-right corner of grid (marked 'Finish' diagram below). How many possible unique paths from start to finish? >>> unique_paths(3, 2) 3 >>> unique_paths(7, 3) 28 >>> unique_paths(3, 3) 6 :param m: number of rows in grid :param n: number of columns in grid :return: number of possible unique paths from start to finish"}
{"task_id":"EvoEval\/32","prompt":"def playlist_shuffle(playlist: list, seed: int):\n    \"\"\"\n    Return new playlist order based on numerical seed. Given list of song titles (strings) as 'playlist' odd integer 'seed', implement algorithm to shuffle playlist create new order same seed should produce same shuffled playlist shuffling algorithm use seed to produce series of swaps in sorted list. produce series start at index 0 swap with element at index `seed % playlist_length`. if song title contains word \"Rock\", should remain unmoved during swapping process (the swap operation skipped). For next index update seed using formula: seed = (seed * 16807) % 2147483647. Continue process from next index until end of list. seed updated for every index (swapped or not). >>> playlist_shuffle([\"One More Time\", \"Around the World\", \"Harder Better Faster Stronger\", \"Technologic\", \"Robot Rock\"], 7) ['Harder Better Faster Stronger', 'One More Time' 'Technologic' 'Around the World' 'Robot Rock'] >>> playlist_shuffle([\"Song 2\", \"Parklife\", \"Country House\", \"Song 2\", \"Girls & Boys\"], 3) ['Song 2', 'Parklife', 'Girls & Boys' 'Song 2' 'Country House']\n    \"\"\"\n","raw":"Return a new playlist order based on a numerical seed.\n\n    Given a list of song titles (strings) as 'playlist' and an odd integer 'seed',\n    implement an algorithm to shuffle the playlist to create a new order.\n    The same seed should always produce the same shuffled playlist.\n\n    The shuffling algorithm should use the seed to produce a series of swaps in the sorted list.\n    To produce the series, start at index 0 and swap with the element\n    at the index `seed % playlist_length`. It's important to note that if a song title contains the word \"Rock\", it should remain unmoved during the swapping process (the swap operation will be skipped). For the next index, update the\n    seed using the formula: seed = (seed * 16807) % 2147483647. Continue this process\n    from the next index until the end of the list. Note that the seed will be updated for every index (swapped or not).\n\n\n    >>> playlist_shuffle([\"One More Time\", \"Around the World\", \"Harder Better Faster Stronger\", \"Technologic\", \"Robot Rock\"], 7)\n    ['Harder Better Faster Stronger', 'One More Time', 'Technologic', 'Around the World', 'Robot Rock']\n    >>> playlist_shuffle([\"Song 2\", \"Parklife\", \"Country House\", \"Song 2\", \"Girls & Boys\"], 3)\n    ['Song 2', 'Parklife', 'Girls & Boys', 'Song 2', 'Country House']","reduced":"Return new playlist order based on numerical seed. Given list of song titles (strings) as 'playlist' odd integer 'seed', implement algorithm to shuffle playlist create new order same seed should produce same shuffled playlist shuffling algorithm use seed to produce series of swaps in sorted list. produce series start at index 0 swap with element at index `seed % playlist_length`. if song title contains word \"Rock\", should remain unmoved during swapping process (the swap operation skipped). For next index update seed using formula: seed = (seed * 16807) % 2147483647. Continue process from next index until end of list. seed updated for every index (swapped or not). >>> playlist_shuffle([\"One More Time\", \"Around the World\", \"Harder Better Faster Stronger\", \"Technologic\", \"Robot Rock\"], 7) ['Harder Better Faster Stronger', 'One More Time' 'Technologic' 'Around the World' 'Robot Rock'] >>> playlist_shuffle([\"Song 2\", \"Parklife\", \"Country House\", \"Song 2\", \"Girls & Boys\"], 3) ['Song 2', 'Parklife', 'Girls & Boys' 'Song 2' 'Country House']"}
{"task_id":"EvoEval\/33","prompt":"def magical_staircase(n: int, magic_stones: list):\r\n    \"\"\"\n    Imagine magical staircase with 'n' steps collection of magic stones. Each magic stone has unique power allows user to jump certain number of steps in single bound. For example if magic stone power of 2, can jump 2 steps at once instead of 1 step. with number of steps 'n' list of powers of magic stones available, return number of distinct ways reach top of staircase. start from bottom staircase. magic_stones list contains positive integers n is positive integer. Example: >>> magical_staircase(4, [1, 2]) 5 Explanation 5 distinct ways to reach top staircase: - Jump 1 step, jump 1 step, jump 1 step, jump 1 step - Jump 1 step, jump 1 step, jump 2 steps - Jump 1 step, jump 2 steps, jump 1 step - Jump 2 steps, jump 1 step, jump 1 step - Jump 2 steps, jump 2 steps >>> magical_staircase(10, [1, 2, 5]) 128 128 distinct ways to reach top of staircase.\n    \"\"\"\n","raw":"Imagine a magical staircase with 'n' steps, and a collection of magic stones. Each magic stone has a unique power\r\n    that allows the user to jump a certain number of steps in a single bound.\r\n    For example, if there's a magic stone that has a power of 2, you can jump 2 steps at once instead of 1 step.\r\n\r\n    Provided with the number of steps 'n' and a list of the powers of magic stones available, \r\n    return the number of distinct ways you can reach the top of the staircase. Assume you start from the bottom of the staircase.\r\n\r\n    The magic_stones list contains positive integers, and n is a positive integer.\r\n\r\n    Example:\r\n    >>> magical_staircase(4, [1, 2])\r\n    5\r\n    Explanation: There are 5 distinct ways to reach the top of the staircase:\r\n    - Jump 1 step, jump 1 step, jump 1 step, jump 1 step\r\n    - Jump 1 step, jump 1 step, jump 2 steps\r\n    - Jump 1 step, jump 2 steps, jump 1 step\r\n    - Jump 2 steps, jump 1 step, jump 1 step\r\n    - Jump 2 steps, jump 2 steps\r\n\r\n    >>> magical_staircase(10, [1, 2, 5])\r\n    128\r\n    Explanation: There are 128 distinct ways to reach the top of the staircase.","reduced":"Imagine magical staircase with 'n' steps collection of magic stones. Each magic stone has unique power allows user to jump certain number of steps in single bound. For example if magic stone power of 2, can jump 2 steps at once instead of 1 step. with number of steps 'n' list of powers of magic stones available, return number of distinct ways reach top of staircase. start from bottom staircase. magic_stones list contains positive integers n is positive integer. Example: >>> magical_staircase(4, [1, 2]) 5 Explanation 5 distinct ways to reach top staircase: - Jump 1 step, jump 1 step, jump 1 step, jump 1 step - Jump 1 step, jump 1 step, jump 2 steps - Jump 1 step, jump 2 steps, jump 1 step - Jump 2 steps, jump 1 step, jump 1 step - Jump 2 steps, jump 2 steps >>> magical_staircase(10, [1, 2, 5]) 128 128 distinct ways to reach top of staircase."}
{"task_id":"EvoEval\/34","prompt":"def werewolf_transformation(n: int, m: int):\n    \"\"\"\n    werewolf's transformation impacted by lunar cycle cycle has n days (n > 0), transformation process most intense on m-th day (m > 0, m <= n). days other than m-th day transformation percentage follows linear pattern increasing (+10%) or decreasing (-10%) from previous day. On m-th day transformation percentage doubles up to maximum 100% After m-th day transformation starts decreasing by -10% each day function werewolf_transformation calculates werewolf transformation percentages over one cycle given length cycle (n) and most intense day (m). function should return list of transformation percentages as integers. >>> werewolf_transformation(5, 3) [0, 10, 20, 10, 0] >>> werewolf_transformation(7, 4) [0, 10, 20, 40, 30, 20, 10] >>> werewolf_transformation(10, 5) [0, 10, 20, 30, 60, 50, 40, 30, 20, 10] NOTE transformation process starts from first day cycle with 0% transformation Any transformation percentage should be truncated within range of 0% and 100%.\n    \"\"\"\n","raw":"A werewolf's transformation is impacted by the lunar cycle.\n    This cycle has n days (n > 0), and the transformation process is most\n    intense on the m-th day of the cycle (m > 0, m <= n).\n\n    On days other than the m-th day, the transformation percentage follows a\n    linear pattern, increasing (+10%) or decreasing (-10%) from the previous day. On the\n    m-th day, the transformation percentage doubles from the previous day,\n    up to a maximum of 100%.\n    After the m-th day, the transformation starts decreasing by -10% each day.\n\n    The function werewolf_transformation calculates the werewolf\n    transformation percentages over the course of one cycle given the length\n    of the cycle (n) and the most intense day (m).\n\n    The function should return a list of transformation percentages, as integers.\n\n    >>> werewolf_transformation(5, 3)\n    [0, 10, 20, 10, 0]\n\n    >>> werewolf_transformation(7, 4)\n    [0, 10, 20, 40, 30, 20, 10]\n\n    >>> werewolf_transformation(10, 5)\n    [0, 10, 20, 30, 60, 50, 40, 30, 20, 10]\n\n    NOTE: the transformation process starts from the first day\n    of the cycle with 0% transformation. Any transformation percentage should be truncated within the range of 0% and 100%.","reduced":"werewolf's transformation impacted by lunar cycle cycle has n days (n > 0), transformation process most intense on m-th day (m > 0, m <= n). days other than m-th day transformation percentage follows linear pattern increasing (+10%) or decreasing (-10%) from previous day. On m-th day transformation percentage doubles up to maximum 100% After m-th day transformation starts decreasing by -10% each day function werewolf_transformation calculates werewolf transformation percentages over one cycle given length cycle (n) and most intense day (m). function should return list of transformation percentages as integers. >>> werewolf_transformation(5, 3) [0, 10, 20, 10, 0] >>> werewolf_transformation(7, 4) [0, 10, 20, 40, 30, 20, 10] >>> werewolf_transformation(10, 5) [0, 10, 20, 30, 60, 50, 40, 30, 20, 10] NOTE transformation process starts from first day cycle with 0% transformation Any transformation percentage should be truncated within range of 0% and 100%."}
{"task_id":"EvoEval\/35","prompt":"def validate_email_structure(email: str):\r\n    \"\"\"\n    email string. return True if email has valid format (i exactly one \"@\" character not first or last at least one \".\" character after \"@\" character). >>> validate_email_structure(\"myemail@\") False >>> validate_email_structure(\"myemail@domain\") False >>> validate_email_structure(\"myemail@domain.com\") True >>> validate_email_structure(\"myemail.domain.com\") False >>> validate_email_structure(\"myemail@domain@domain.com\") False\n    \"\"\"\n","raw":"email is a string.\r\n    return True if the email has a valid format (i.e., there is exactly one \"@\" character that is not the first or last character \r\n    and there is at least one \".\" character after the \"@\" character).\r\n\r\n    >>> validate_email_structure(\"myemail@\")\r\n    False\r\n    >>> validate_email_structure(\"myemail@domain\")\r\n    False\r\n    >>> validate_email_structure(\"myemail@domain.com\")\r\n    True\r\n    >>> validate_email_structure(\"myemail.domain.com\")\r\n    False\r\n    >>> validate_email_structure(\"myemail@domain@domain.com\")\r\n    False","reduced":"email string. return True if email has valid format (i exactly one \"@\" character not first or last at least one \".\" character after \"@\" character). >>> validate_email_structure(\"myemail@\") False >>> validate_email_structure(\"myemail@domain\") False >>> validate_email_structure(\"myemail@domain.com\") True >>> validate_email_structure(\"myemail.domain.com\") False >>> validate_email_structure(\"myemail@domain@domain.com\") False"}
{"task_id":"EvoEval\/36","prompt":"def calculate_integral_coefficients(xs: list):\n    \"\"\"\n    xs represent coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return indefinite integral polynomial same form constant of integration set to zero generate coefficients for polynomial representing integral input polynomial example if input is [3, 2, 1], output represent polynomial 3*x + x^2 + x^3\/3 >>> calculate_integral_coefficients([3, 2, 1]) [0, 3.0, 1.0, 0.3333333333333333] >>> calculate_integral_coefficients([1, 3, 3, 1]) [0, 1.0, 1.5, 1.0, 0.25]\n    \"\"\"\n","raw":"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return indefinite integral of this polynomial in the same form, with the constant of integration set to zero,\n    i.e. you should generate the coefficients for the polynomial representing the integral of the input polynomial.\n    So for example, if the input is [3, 2, 1], then the output would represent the polynomial 3*x + x^2 + x^3\/3\n    >>> calculate_integral_coefficients([3, 2, 1])\n    [0, 3.0, 1.0, 0.3333333333333333]\n    >>> calculate_integral_coefficients([1, 3, 3, 1])\n    [0, 1.0, 1.5, 1.0, 0.25]","reduced":"xs represent coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return indefinite integral polynomial same form constant of integration set to zero generate coefficients for polynomial representing integral input polynomial example if input is [3, 2, 1], output represent polynomial 3*x + x^2 + x^3\/3 >>> calculate_integral_coefficients([3, 2, 1]) [0, 3.0, 1.0, 0.3333333333333333] >>> calculate_integral_coefficients([1, 3, 3, 1]) [0, 1.0, 1.5, 1.0, 0.25]"}
{"task_id":"EvoEval\/37","prompt":"def string_transform(s):\n    \"\"\"\n    Write function string_transform takes string representing sentence as input returns sentence in transformed format. transformation rules: Every vowel in sentence replaced with next vowel sequence: 'a' -> 'e', 'e' -> 'i', 'i' -> 'o', 'o' -> 'u', 'u' -> 'a'. Every consonant replaced with next consonant in alphabet. For instance, 'b' becomes 'c', 'm' becomes 'n',. 'z' wraps around to 'b'. punctuation, space digit remains same. transformations preserve original case. For example 'A' transforms to 'E', 'M' to 'N' etc. Example: >>> string_transform(\"Hello, World!\") 'Jimmu, Xusmf!' >>> string_transform(\"Coding is Fun!\") 'Dufoph jt Gap!'\n    \"\"\"\n","raw":"Write a function string_transform which takes a string representing\n    a sentence as input and returns the sentence in a transformed format.\n    The transformation rules are as follows: \n    - Every vowel in the sentence should be replaced with the next vowel in the sequence: 'a' -> 'e', 'e' -> 'i', 'i' -> 'o', 'o' -> 'u', 'u' -> 'a'.\n    - Every consonant should be replaced with the next consonant in the alphabet. For instance, 'b' becomes 'c', 'm' becomes 'n', etc. 'z' wraps around to 'b'.\n    - Every punctuation, space, and digit remains the same. \n\n    All transformations should preserve the original case. For example, 'A' transforms to 'E', 'M' to 'N', etc. \n\n    Example:\n    >>> string_transform(\"Hello, World!\")\n    'Jimmu, Xusmf!'\n    >>> string_transform(\"Coding is Fun!\")\n    'Dufoph jt Gap!'","reduced":"Write function string_transform takes string representing sentence as input returns sentence in transformed format. transformation rules: Every vowel in sentence replaced with next vowel sequence: 'a' -> 'e', 'e' -> 'i', 'i' -> 'o', 'o' -> 'u', 'u' -> 'a'. Every consonant replaced with next consonant in alphabet. For instance, 'b' becomes 'c', 'm' becomes 'n',. 'z' wraps around to 'b'. punctuation, space digit remains same. transformations preserve original case. For example 'A' transforms to 'E', 'M' to 'N' etc. Example: >>> string_transform(\"Hello, World!\") 'Jimmu, Xusmf!' >>> string_transform(\"Coding is Fun!\") 'Dufoph jt Gap!'"}
{"task_id":"EvoEval\/38","prompt":"def translate_emoticons(sentence):\n    \"\"\"\n    Convert text-based emoticons string to Unicode emojis return result as string If sentence doesn contain text emoticons return original sentence. examples of text emoticons corresponding emojis are \":)\" corresponds to \"\ud83d\ude0a\", \":(\" corresponds to \"\u2639\ufe0f\", \":D\" corresponds to \"\ud83d\ude00\", \";)\" corresponds to \"\ud83d\ude09\". Examples: >>> translate_emoticons(\"Hello :) nice day! :D\") \"Hello \ud83d\ude0a nice day! \ud83d\ude00\" >>> translate_emoticons(\"Oh no it's raining! :(\") raining \u2639\ufe0f\" >>> translate_emoticons(\"No emoticons here\") \"No emoticons\"\n    \"\"\"\n","raw":"Convert text-based emoticons in a string to their corresponding Unicode emojis and return the result as a string.\n\n    If the sentence doesn't contain any text-based emoticons, return the original sentence.\n    Some examples of text-based emoticons and their corresponding emojis are \":)\" corresponds to \"\ud83d\ude0a\", \n    \":(\" corresponds to \"\u2639\ufe0f\", \":D\" corresponds to \"\ud83d\ude00\", \";)\" corresponds to \"\ud83d\ude09\". \n    \n    Examples:\n    >>> translate_emoticons(\"Hello :) Have a nice day! :D\")\n    \"Hello \ud83d\ude0a Have a nice day! \ud83d\ude00\"\n    >>> translate_emoticons(\"Oh no, it's raining! :(\")\n    \"Oh no, it's raining! \u2639\ufe0f\"\n    >>> translate_emoticons(\"No emoticons here\")\n    \"No emoticons here\"","reduced":"Convert text-based emoticons string to Unicode emojis return result as string If sentence doesn contain text emoticons return original sentence. examples of text emoticons corresponding emojis are \":)\" corresponds to \"\ud83d\ude0a\", \":(\" corresponds to \"\u2639\ufe0f\", \":D\" corresponds to \"\ud83d\ude00\", \";)\" corresponds to \"\ud83d\ude09\". Examples: >>> translate_emoticons(\"Hello :) nice day! :D\") \"Hello \ud83d\ude0a nice day! \ud83d\ude00\" >>> translate_emoticons(\"Oh no it's raining! :(\") raining \u2639\ufe0f\" >>> translate_emoticons(\"No emoticons here\") \"No emoticons\""}
{"task_id":"EvoEval\/39","prompt":"def asciiArt(n, s):\n    \"\"\"\n    Task Write function takes integer (n) string (s) as input. function return 2D ASCII art n copies of each character in string (s) in each row and column. ASCII art framed by '*' character in \"U\" shape as shown in following examples. Examples: asciiArt(1, \"abc\") => \"*abc*\" \"*abc*\" \"*****\" asciiArt(2, \"xy\") => \"*xxyy*\" \"*xxyy*\" \"******\" asciiArt(3, \"123\") => \"*111222333*\" \"*111222333*\" \"*111222333*\" \"***********\" Note: - n always positive integer. string (s) only contain alphanumeric characters have at least one character don't worry about handling empty strings or null values.\n    \"\"\"\n","raw":"Task\n    Write a function that takes an integer (n) and a string (s) as input. The function will return a 2D ASCII\n    art that has n copies of each character in the string (s) in each row and column. The ASCII art should be\n    framed by the '*' character in a \"U\" shape as shown in the following examples.\n\n    Examples:\n        asciiArt(1, \"abc\") => \"*abc*\"\n                              \"*abc*\"\n                              \"*****\"\n\n        asciiArt(2, \"xy\") => \"*xxyy*\"\n                             \"*xxyy*\"\n                             \"******\"\n\n        asciiArt(3, \"123\") => \"*111222333*\"\n                              \"*111222333*\"\n                              \"*111222333*\"\n                              \"***********\"\n\n    Note:\n    - n will always be a positive integer.\n    - The string (s) will only contain alphanumeric characters and will have at least one character.\n    - You don't have to worry about handling empty strings or null values.","reduced":"Task Write function takes integer (n) string (s) as input. function return 2D ASCII art n copies of each character in string (s) in each row and column. ASCII art framed by '*' character in \"U\" shape as shown in following examples. Examples: asciiArt(1, \"abc\") => \"*abc*\" \"*abc*\" \"*****\" asciiArt(2, \"xy\") => \"*xxyy*\" \"*xxyy*\" \"******\" asciiArt(3, \"123\") => \"*111222333*\" \"*111222333*\" \"*111222333*\" \"***********\" Note: - n always positive integer. string (s) only contain alphanumeric characters have at least one character don't worry about handling empty strings or null values."}
{"task_id":"EvoEval\/40","prompt":"def potion_mixing(potions, target):\n    \"\"\"\n    task you are a wizard trying to create magic potion. have list of potions each represented by string. Each string represents potion's name followed potion's power level (an integer). given target power level to reach by mixing potions. task to return list of potions to reach target power level If not possible to reach target power level with potions, return empty list. use each potion only once. If multiple ways to reach target power level, return with smallest number of potions. If tie, return with smallest alphebetical order sorted by concatenation of string representations potions. potion's power levels always positive integers. Return potions in ascending order. Example: potion_mixing([\"Healing Potion 10\", \"Strength Potion 5\", \"Invisibility Potion 7\"], 15) -> [\"Healing Potion 10\", \"Strength Potion 5\"] potion_mixing([\"Luck Potion 3\", \"Wisdom Potion 8\", \"Fire Resistance Potion 12\"], 20) -> ['Fire Resistance Potion 12', 'Wisdom Potion 8'] potion_mixing([\"Poison Potion 2\", \"Water Breathing Potion 6\", \"Night Vision Potion 5\"], 10) -> [ potion_mixing([\"Potion of Swiftness 3\", \"Potion of Leaping 2\", \"Potion of Harming 10\"], 1) -> []\n    \"\"\"\n","raw":"In this task, you are a wizard who is trying to create a magic potion. You have a list of\n    potions, each represented by a string. Each string represents the potion's name, followed by\n    the potion's power level (an integer). You are given a target power level that you need to reach\n    by mixing potions. Your task is to return a list of potions that you need to mix to reach the\n    target power level. If it is not possible to reach the target power level with the given potions,\n    return an empty list. You can use each potion only once.\n    If there are multiple ways to reach the target power level, return the one with the smallest number\n    of potions. If there's still a tie, return the one with smallest alphebetical order sorted by the\n    concatenation of the string representations of the potions.\n    The potion's power levels will always be positive integers.\n    Return the potions in ascending order.\n\n    Example:\n    potion_mixing([\"Healing Potion 10\", \"Strength Potion 5\", \"Invisibility Potion 7\"], 15) -> [\"Healing Potion 10\", \"Strength Potion 5\"]\n    potion_mixing([\"Luck Potion 3\", \"Wisdom Potion 8\", \"Fire Resistance Potion 12\"], 20) -> ['Fire Resistance Potion 12', 'Wisdom Potion 8']\n    potion_mixing([\"Poison Potion 2\", \"Water Breathing Potion 6\", \"Night Vision Potion 5\"], 10) -> []\n    potion_mixing([\"Potion of Swiftness 3\", \"Potion of Leaping 2\", \"Potion of Harming 10\"], 1) -> []","reduced":"task you are a wizard trying to create magic potion. have list of potions each represented by string. Each string represents potion's name followed potion's power level (an integer). given target power level to reach by mixing potions. task to return list of potions to reach target power level If not possible to reach target power level with potions, return empty list. use each potion only once. If multiple ways to reach target power level, return with smallest number of potions. If tie, return with smallest alphebetical order sorted by concatenation of string representations potions. potion's power levels always positive integers. Return potions in ascending order. Example: potion_mixing([\"Healing Potion 10\", \"Strength Potion 5\", \"Invisibility Potion 7\"], 15) -> [\"Healing Potion 10\", \"Strength Potion 5\"] potion_mixing([\"Luck Potion 3\", \"Wisdom Potion 8\", \"Fire Resistance Potion 12\"], 20) -> ['Fire Resistance Potion 12', 'Wisdom Potion 8'] potion_mixing([\"Poison Potion 2\", \"Water Breathing Potion 6\", \"Night Vision Potion 5\"], 10) -> [ potion_mixing([\"Potion of Swiftness 3\", \"Potion of Leaping 2\", \"Potion of Harming 10\"], 1) -> []"}
{"task_id":"EvoEval\/41","prompt":"def spider_web_jump(arr):\n    \"\"\"\n    two-dimensional array representing spider's web each cell represents connection to neighboring cells Each cell has value indicates energy required for spider to jump cell from adjacent cell task find optimal path for spider to reach 'safe cell' using minimum energy possible Return minimum energy required array guaranteed 1 safe cell represented by 0. spider starts from top-left cell (0,0). example web: [[1, 2, 1, 99], [1, 3, 2, 0], [99, 1, 1, 99], [99, 99, 99, 99]] optimal path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,3) energy requirement of 1 + 2 + 1 + 2 = 6. Example 1: Input: [[2, 3], [1, 0]] Output: 3 spider jumps from (0,0) to (1,0) to (1,1) using 2 + 1 = 3 energy. Example 2: Input: [[0]] Output: 0 spider starts at safe cell no energy required. Constraints: * 1 <= arr.length <= 100 * 1 <= arr[i].length <= 100 * 0 <= cell.value <= 100 * array guaranteed to contain 1 safe cell.\n    \"\"\"\n","raw":"In a two-dimensional array representing a spider's web, each cell represents a connection to neighboring cells.\n    Each cell has a value, which indicates the energy required for a spider to jump to that cell from an adjacent cell.\n    Your task is to find the optimal path for the spider to reach the 'safe cell', using the minimum energy possible.\n    Return the minimum energy required.\n\n    The array is guaranteed to have exactly 1 safe cell, which is represented by 0.\n    The spider always starts from the top-left cell (0,0).\n    \n    Here's an example web:\n    [[1, 2, 1, 99],\n     [1, 3, 2, 0],\n     [99, 1, 1, 99],\n     [99, 99, 99, 99]]\n    The optimal path would be (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,3), with an energy requirement of 1 + 2 + 1 + 2 = 6.\n\n    Example 1:\n        Input: [[2, 3], [1, 0]]\n        Output: 3\n        Explanation: The spider jumps from (0,0) to (1,0) to (1,1) using 2 + 1 = 3 energy.\n\n    Example 2:\n        Input: [[0]]\n        Output: 0\n        Explanation: The spider starts at the safe cell, so no energy is required.\n\n    Constraints:\n        * 1 <= arr.length <= 100\n        * 1 <= arr[i].length <= 100\n        * 0 <= cell.value <= 100\n        * The array is guaranteed to contain exactly 1 safe cell.","reduced":"two-dimensional array representing spider's web each cell represents connection to neighboring cells Each cell has value indicates energy required for spider to jump cell from adjacent cell task find optimal path for spider to reach 'safe cell' using minimum energy possible Return minimum energy required array guaranteed 1 safe cell represented by 0. spider starts from top-left cell (0,0). example web: [[1, 2, 1, 99], [1, 3, 2, 0], [99, 1, 1, 99], [99, 99, 99, 99]] optimal path (0,0) -> (0,1) -> (0,2) -> (1,2) -> (1,3) energy requirement of 1 + 2 + 1 + 2 = 6. Example 1: Input: [[2, 3], [1, 0]] Output: 3 spider jumps from (0,0) to (1,0) to (1,1) using 2 + 1 = 3 energy. Example 2: Input: [[0]] Output: 0 spider starts at safe cell no energy required. Constraints: * 1 <= arr.length <= 100 * 1 <= arr[i].length <= 100 * 0 <= cell.value <= 100 * array guaranteed to contain 1 safe cell."}
{"task_id":"EvoEval\/42","prompt":"\"\"\"\n    def find_legendary_item(player_input): '' In popular multiplayer online game players can acquire various items. Each item has rarity value from 1 (common) to 5 (legendary). In single game player can acquire multiple items condition rarity of each item is unique. player_input is list representing items acquired by player in single game each item represented by its rarity. Your task is to write a function determines if player acquired a legendary item (rarity 5) in. function should return True if legendary item acquired and False otherwise., if legendary item acquired, function should return rarity of second most valuable item player acquired. If player only acquired legendary item, return -1. function should be handle player_input lists of any length. Examples: find_legendary_item([1, 2, 3, 4, 5]) == (True, 4) find_legendary_item([5]) == (True, -1) find_legendary_item([1, 3, 4]) == (False, None) find_legendary_item([]) == (False, None) '''\n    \"\"\"\n","raw":"def find_legendary_item(player_input):\r\n    '''\r\n    In a popular multiplayer online game, players can acquire various items. Each item has a rarity value \r\n    ranging from 1 (common) to 5 (legendary). In a single game, a player can acquire multiple items but with \r\n    the condition that the rarity of each item is unique. The player_input is a list representing the items \r\n    acquired by a player in a single game, where each item is represented by its rarity.\r\n    \r\n    Your task is to write a function that determines if the player has acquired a legendary item (rarity 5) \r\n    in the game. The function should return True if a legendary item has been acquired and False otherwise. \r\n\r\n    Further, if a legendary item has been acquired, the function should return the rarity of the second most \r\n    valuable item that the player has acquired. If the player has only acquired the legendary item, return -1.\r\n\r\n    The function should be able to handle player_input lists of any length.\r\n\r\n    Examples:\r\n        find_legendary_item([1, 2, 3, 4, 5]) == (True, 4)\r\n        find_legendary_item([5]) == (True, -1)\r\n        find_legendary_item([1, 3, 4]) == (False, None)\r\n        find_legendary_item([]) == (False, None)\r\n    '''","reduced":"def find_legendary_item(player_input): '' In popular multiplayer online game players can acquire various items. Each item has rarity value from 1 (common) to 5 (legendary). In single game player can acquire multiple items condition rarity of each item is unique. player_input is list representing items acquired by player in single game each item represented by its rarity. Your task is to write a function determines if player acquired a legendary item (rarity 5) in. function should return True if legendary item acquired and False otherwise., if legendary item acquired, function should return rarity of second most valuable item player acquired. If player only acquired legendary item, return -1. function should be handle player_input lists of any length. Examples: find_legendary_item([1, 2, 3, 4, 5]) == (True, 4) find_legendary_item([5]) == (True, -1) find_legendary_item([1, 3, 4]) == (False, None) find_legendary_item([]) == (False, None) '''"}
{"task_id":"EvoEval\/43","prompt":"def space_travel(distance, speed, fuel, planet_gravity, spaceship_weight):\n    \"\"\"\n    Given distance of planet from Earth in light years, speed of spaceship in light years per year, amount of fuel in spaceship in years, gravity planet weight of spaceship. Fuel consumption computed as spaceship_weight * planet_gravity * 0.1 per year. Return remaining fuel rounded to 2 decimal points once spaceship reaches planet, if possible for spaceship to reach planet. Otherwise return 'Insufficient fuel'. spaceship can reach planet if amount fuel greater than or equal to duration of trip (distance divided by speed). remaining fuel calculated by subtracting fuel consumption trip from initial amount of fuel. Note: spaceship travels at constant speed fuel consumption is constant unless otherwise mentioned. Example: space_travel(4.22, 0.5, 10, 9.8, 100) returns 'Insufficient fuel' space_travel(2.5, 1, 2, 3.7, 1.5) returns 0.61\n    \"\"\"\n","raw":"Given the distance of a planet from Earth in light years, the speed of the spaceship in light years per year, the amount of fuel in the spaceship in years, the gravity of the planet and the weight of the spaceship.\n    Fuel consumption is computed as spaceship_weight * planet_gravity * 0.1 per year.\n    Return the remaining fuel rounded to 2 decimal points once the spaceship reaches the planet, if it is possible for the spaceship to reach the planet.\n    Otherwise, return 'Insufficient fuel'.\n    The spaceship can reach the planet if the amount of fuel is greater than or equal to the duration of the trip (distance divided by speed).\n    The remaining fuel is calculated by subtracting the fuel consumption of the trip from the initial amount of fuel.\n    Note: The spaceship travels at a constant speed and the fuel consumption is constant unless otherwise mentioned.\n\n    Example:\n    space_travel(4.22, 0.5, 10, 9.8, 100) returns 'Insufficient fuel'\n    space_travel(2.5, 1, 2, 3.7, 1.5) returns 0.61","reduced":"Given distance of planet from Earth in light years, speed of spaceship in light years per year, amount of fuel in spaceship in years, gravity planet weight of spaceship. Fuel consumption computed as spaceship_weight * planet_gravity * 0.1 per year. Return remaining fuel rounded to 2 decimal points once spaceship reaches planet, if possible for spaceship to reach planet. Otherwise return 'Insufficient fuel'. spaceship can reach planet if amount fuel greater than or equal to duration of trip (distance divided by speed). remaining fuel calculated by subtracting fuel consumption trip from initial amount of fuel. Note: spaceship travels at constant speed fuel consumption is constant unless otherwise mentioned. Example: space_travel(4.22, 0.5, 10, 9.8, 100) returns 'Insufficient fuel' space_travel(2.5, 1, 2, 3.7, 1.5) returns 0.61"}
{"task_id":"EvoEval\/44","prompt":"\"\"\"\n    def fairy_tale_transport(q,w,e): '' In fairy tale world three types of magical creatures: unicorns, dragons griffins. unicorns can carry 'w' kg, dragons carry 'e' kg griffins carry 'e' kg weight. list of weights of different items to carry. Write function returns True if combined strength of magical creatures can carry all items False otherwise. function three parameters - list q of weights items integer w carrying capacity of unicorns integer e carrying capacity of dragons griffins together. Example: fairy_tale_transport([5, 10, 15], 5, 20) \u279e False fairy_tale_transport([10, 20, 30], 5, 10) \u279e False fairy_tale_transport([1, 2, 3], 1, 5) \u279e True fairy_tale_transport([5, 10, 15], 15, 15) \u279e True '''\n    \"\"\"\n","raw":"def fairy_tale_transport(q,w,e):\r\n    '''\r\n    In a fairy tale world, three types of magical creatures are there: unicorns, dragons, and griffins. The unicorns can carry 'w' kg, dragons can carry 'e' kg, and griffins can carry 'e' kg of weight. You have a list of weights of different items you want to carry.\r\n    \r\n    Write a function that returns True if the combined strength of these magical creatures can carry all the items, and False otherwise. \r\n\r\n    The function will take three parameters - a list q of weights of items, an integer w representing the carrying capacity of unicorns, an integer e representing the carrying capacity of dragons and griffins together.\r\n    \r\n    Example:\r\n    fairy_tale_transport([5, 10, 15], 5, 20) \u279e False\r\n    \r\n    fairy_tale_transport([10, 20, 30], 5, 10) \u279e False\r\n\r\n    fairy_tale_transport([1, 2, 3], 1, 5) \u279e True\r\n    \r\n    fairy_tale_transport([5, 10, 15], 15, 15) \u279e True\r\n    '''","reduced":"def fairy_tale_transport(q,w,e): '' In fairy tale world three types of magical creatures: unicorns, dragons griffins. unicorns can carry 'w' kg, dragons carry 'e' kg griffins carry 'e' kg weight. list of weights of different items to carry. Write function returns True if combined strength of magical creatures can carry all items False otherwise. function three parameters - list q of weights items integer w carrying capacity of unicorns integer e carrying capacity of dragons griffins together. Example: fairy_tale_transport([5, 10, 15], 5, 20) \u279e False fairy_tale_transport([10, 20, 30], 5, 10) \u279e False fairy_tale_transport([1, 2, 3], 1, 5) \u279e True fairy_tale_transport([5, 10, 15], 15, 15) \u279e True '''"}
{"task_id":"EvoEval\/45","prompt":"def find_castle(arr):\n    \"\"\"\n    prince wants to build castle on highest hill in kingdom. kingdom is linear array of hills of different heights, represented as integers in array arr. prince wants castle to have view of many hills possible view from castle is blocked by any hill taller than. prince can build castle on any hill, but can only see hills to left and right shorter than hill he on. Once taller hill encountered, view direction is blocked. prince can see hill if same height. Write function determines maximum number of hills prince can see from any hill. Example: find_castle([1,2,3,2,5,3,6,4,8,2,7]) returns 10 (The prince can see 10 hills if builds castle on hill of height 8) find_castle([1, 2, 3, 4, 5, 6, 7, 8, 9]) returns 8 find_castle([9, 8, 7, 6, 5, 4, 3, 2, 1]) returns 8 find_castle([5, 5, 5, 5, 5]) returns 4\n    \"\"\"\n","raw":"A prince wants to build his castle on the highest hill in his kingdom. The kingdom is a linear array of hills of different heights, represented as integers in the array arr. The prince wants his castle to have a view of as many hills as possible. However, the view from the castle is blocked by any hill that is taller than it. \n\n    The prince can build his castle on any hill, but he can only see the hills to the left and right that are shorter than the hill he is on. Once a taller hill is encountered, the view in that direction is blocked. The prince can see a hill if it is the same height.\n\n    Write a function that determines the maximum number of hills the prince can see from any hill.\n\n    Example:\n    find_castle([1,2,3,2,5,3,6,4,8,2,7]) returns 10 (The prince can see 10 hills if he builds his castle on the hill of height 8)\n    find_castle([1, 2, 3, 4, 5, 6, 7, 8, 9]) returns 8 \n    find_castle([9, 8, 7, 6, 5, 4, 3, 2, 1]) returns 8\n    find_castle([5, 5, 5, 5, 5]) returns 4","reduced":"prince wants to build castle on highest hill in kingdom. kingdom is linear array of hills of different heights, represented as integers in array arr. prince wants castle to have view of many hills possible view from castle is blocked by any hill taller than. prince can build castle on any hill, but can only see hills to left and right shorter than hill he on. Once taller hill encountered, view direction is blocked. prince can see hill if same height. Write function determines maximum number of hills prince can see from any hill. Example: find_castle([1,2,3,2,5,3,6,4,8,2,7]) returns 10 (The prince can see 10 hills if builds castle on hill of height 8) find_castle([1, 2, 3, 4, 5, 6, 7, 8, 9]) returns 8 find_castle([9, 8, 7, 6, 5, 4, 3, 2, 1]) returns 8 find_castle([5, 5, 5, 5, 5]) returns 4"}
{"task_id":"EvoEval\/46","prompt":"\"\"\"\n    def hidden_message(test_cases): ''' Covert Agent X unique encrypting secret messages for. encrypts messages by providing strings of words first letter of each word forms secret message. Your task to write a function takes group of test cases returns secret message from each test case. Each test case is list of strings. function should return list of strings each string is secret message decoded from test case. If secret message found within original strings, secret message is now \"Take the cannoli.\" Note Words may have symbols next, should be ignored Return message in lowercase Examples: hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]) -> ['ho', 'egbdf'] hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]) -> ['Take the cannoli.', 'bgkm'] hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]) -> ['tiatc', 'Take cannoli.'] '''\n    \"\"\"\n","raw":"def hidden_message(test_cases):\n    '''\n    Covert Agent X has a unique way of encrypting secret messages for others \n    to decipher. He encrypts his messages by providing strings of words, where \n    the first letter of each word (when pieced together) forms a secret message.\n\n    Your task is to write a function that takes in a group of test cases, \n    and returns the secret message from each test case.\n\n    Each test case is a list of strings. The function should return a list of strings,\n    where each string is a secret message decoded from a test case.\n    If the secret message can be found within the original strings, the secret message is now \"Take the cannoli.\"\n\n    Note: \n    - Words may have symbols next to them, but these should be ignored.\n    - Return the message in lowercase\n\n    Examples:\n    hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]) -> ['ho', 'egbdf']\n    hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]) -> ['Take the cannoli.', 'bgkm']\n    hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]) -> ['tiatc', 'Take the cannoli.']\n    '''","reduced":"def hidden_message(test_cases): ''' Covert Agent X unique encrypting secret messages for. encrypts messages by providing strings of words first letter of each word forms secret message. Your task to write a function takes group of test cases returns secret message from each test case. Each test case is list of strings. function should return list of strings each string is secret message decoded from test case. If secret message found within original strings, secret message is now \"Take the cannoli.\" Note Words may have symbols next, should be ignored Return message in lowercase Examples: hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]) -> ['ho', 'egbdf'] hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]) -> ['Take the cannoli.', 'bgkm'] hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]) -> ['tiatc', 'Take cannoli.'] '''"}
{"task_id":"EvoEval\/47","prompt":"def recipe_ingredients(recipe, available):\n    \"\"\"\n    Checks if recipe be cooked with available ingredients. Args: recipe (dict): dictionary keys ingredient names values quantities. available (dict): dictionary keys ingredient names values quantities. Returns bool: True if all ingredients recipe available False otherwise. Examples: assert recipe_ingredients({'flour': 200, 'sugar': 100, 'eggs': 2}, {'flour 500 'sugar' 100 'eggs': 2}) == True assert recipe_ingredients({'flour 200 'sugar' 100 'eggs': 2},'flour 100 'sugar 50 'eggs': 1}) == False assert recipe_ingredients({'flour': 200, 'sugar': 100, 'milk': 100}, {'flour' 500, 'sugar': 100 'eggs': 2}) == False assert recipe_ingredients({} {'flour': 500, 'sugar': 100, 'eggs': 2}) == True\n    \"\"\"\n","raw":"Checks if a particular recipe can be cooked with the available ingredients.\n\n    Args:\n        recipe (dict): A dictionary where the keys are the ingredient names and the values are the quantities.\n        available (dict): A dictionary where the keys are the ingredient names and the values are the quantities.\n\n    Returns:\n        bool: True if all ingredients needed for the recipe are available, False otherwise.\n\n    Examples:\n        assert recipe_ingredients({'flour': 200, 'sugar': 100, 'eggs': 2}, {'flour': 500, 'sugar': 100, 'eggs': 2}) == True\n        assert recipe_ingredients({'flour': 200, 'sugar': 100, 'eggs': 2}, {'flour': 100, 'sugar': 50, 'eggs': 1}) == False\n        assert recipe_ingredients({'flour': 200, 'sugar': 100, 'milk': 100}, {'flour': 500, 'sugar': 100, 'eggs': 2}) == False\n        assert recipe_ingredients({}, {'flour': 500, 'sugar': 100, 'eggs': 2}) == True","reduced":"Checks if recipe be cooked with available ingredients. Args: recipe (dict): dictionary keys ingredient names values quantities. available (dict): dictionary keys ingredient names values quantities. Returns bool: True if all ingredients recipe available False otherwise. Examples: assert recipe_ingredients({'flour': 200, 'sugar': 100, 'eggs': 2}, {'flour 500 'sugar' 100 'eggs': 2}) == True assert recipe_ingredients({'flour 200 'sugar' 100 'eggs': 2},'flour 100 'sugar 50 'eggs': 1}) == False assert recipe_ingredients({'flour': 200, 'sugar': 100, 'milk': 100}, {'flour' 500, 'sugar': 100 'eggs': 2}) == False assert recipe_ingredients({} {'flour': 500, 'sugar': 100, 'eggs': 2}) == True"}
{"task_id":"EvoEval\/48","prompt":"\"\"\"\n    def wizard_inventory(inventory_logs): You are a wizard with variety magical items. Your items stored in cart limited capacity. Sometimes you acquire new items or use up items. not easy to keep track of inventory manually. Write a function simulates inventory of cart. function should take list of inventory_logs. Each log is dictionary two keys: 'item' and 'quantity'. 'item' refers to name of item string), 'quantity' is number of items gained or used. If 'quantity' is negative, means you've used many items. function should return dictionary final status of inventory. If item's quantity is zero or less, do not include it in final inventory. Examples: wizard_inventory([{ \"item\" : \"Dragon Scale\", \"quantity\" : 2}, { : \"Phoenix Feather\", \"quantity\" : 1}, \"Dragon Scale\", \"quantity : -1}]) ==> {\"Dragon Scale\": 1, \"Phoenix Feather\": 1 } wizard_inventory([{ \"item\" : \"Mermaid Hair\", \"quantity\" : 5}, \"Mermaid Hair\", \"quantity\" : -5}]) ==> {} wizard_inventory([]) ==> {} '''\n    \"\"\"\n","raw":"def wizard_inventory(inventory_logs):\n    '''\n    You are a wizard with a variety of magical items. Your items are stored in a cart that has limited capacity. \n    Sometimes you acquire new items or use up the items you have. Unfortunately, it is not easy to keep track \n    of your inventory manually.\n\n    Write a function that simulates the inventory of the cart. Your function should take a list of inventory_logs. \n    Each log is a dictionary that has two keys: 'item' and 'quantity'. 'item' refers to the name of the item (a string), \n    and 'quantity' is the number of items gained or used. If 'quantity' is negative, it means you've used that many items. \n\n    Your function should return a dictionary representing the final status of the inventory. If an item's quantity \n    is zero or less, do not include it in the final inventory.\n\n    Examples:\n    wizard_inventory([{ \"item\" : \"Dragon Scale\", \"quantity\" : 2}, \n                     { \"item\" : \"Phoenix Feather\", \"quantity\" : 1}, \n                     { \"item\" : \"Dragon Scale\", \"quantity\" : -1}])\n    ==> {\"Dragon Scale\": 1, \"Phoenix Feather\": 1 }\n\n    wizard_inventory([{ \"item\" : \"Mermaid Hair\", \"quantity\" : 5}, \n                     { \"item\" : \"Mermaid Hair\", \"quantity\" : -5}])\n    ==> {}\n\n    wizard_inventory([])\n    ==> {}\n    '''","reduced":"def wizard_inventory(inventory_logs): You are a wizard with variety magical items. Your items stored in cart limited capacity. Sometimes you acquire new items or use up items. not easy to keep track of inventory manually. Write a function simulates inventory of cart. function should take list of inventory_logs. Each log is dictionary two keys: 'item' and 'quantity'. 'item' refers to name of item string), 'quantity' is number of items gained or used. If 'quantity' is negative, means you've used many items. function should return dictionary final status of inventory. If item's quantity is zero or less, do not include it in final inventory. Examples: wizard_inventory([{ \"item\" : \"Dragon Scale\", \"quantity\" : 2}, { : \"Phoenix Feather\", \"quantity\" : 1}, \"Dragon Scale\", \"quantity : -1}]) ==> {\"Dragon Scale\": 1, \"Phoenix Feather\": 1 } wizard_inventory([{ \"item\" : \"Mermaid Hair\", \"quantity\" : 5}, \"Mermaid Hair\", \"quantity\" : -5}]) ==> {} wizard_inventory([]) ==> {} '''"}
{"task_id":"EvoEval\/49","prompt":"def morse_decoder(msg):\n    \"\"\"\n    tasked to write function deciphers Morse code into plain text. Morse code is method used in telecommunication to encode text characters as sequences of two different signal durations called dots and dashes, or dits and dahs. international Morse code encodes basic Latin alphabet extra Latin letters Arabic numerals small punctuation and procedural signals. Morse code usually transmitted by on-off keying of information-carrying medium electric current, sound visible light. In your function Morse code transmission represented as string where \"0\" represents dot, \"1\" represents dash \" \" (space) represents pause between individual characters. Words separated by \"\/\" symbol. For simplicity only need to decode basic Latin alphabet and Arabic numerals.Morse code mapping A: '01' B '1000' C '1010' D '100' E '0' F: '0010' G: '110' H: '0000' I '00' J '0111' K: '101' L: '0100' M: '11' N: '10' O: '111' P: '0110' Q '1101' R: '010' S: '000' T: '1' U: '001' V: '0001' W: '011' X: '1001' Y: '1011' Z: '1100' 1: '01111' 2: '00111' 3: '00011' 4: '00001' 5: '00000' 6: '10000' 7: '11000' 8: '11100' 9: '11110' 0 '11111' msg \"010101\/01 1010 0 110 0\" output \"ACEGE\". msg \"01111 00111\/00011 11000 11100 11110 11111\" output \"12 34 67890\"\n    \"\"\"\n","raw":"You have been tasked to write a function that deciphers Morse code into \n    plain text. Morse code is a method used in telecommunication to encode \n    text characters as sequences of two different signal durations, called \n    dots and dashes, or dits and dahs.\n    The international Morse code encodes the basic Latin alphabet, some extra \n    Latin letters, the Arabic numerals and a small set of punctuation and \n    procedural signals. Morse code is usually transmitted by on-off keying of \n    an information-carrying medium such as electric current, sound, visible \n    light, etc. \n\n    In your function, the Morse code transmission is represented as a string \n    where \"0\" represents a dot, \"1\" represents a dash, and \" \" (space) \n    represents a pause between individual characters. Words are separated by \n    a \"\/\" symbol. \n\n    For simplicity, you only need to decode the basic Latin alphabet and \n    Arabic numerals. The Morse code mapping for these characters is as \n    follows:\n\n    A: '01', B: '1000', C: '1010', D: '100', E: '0', F: '0010', G: '110', \n    H: '0000', I: '00', J: '0111', K: '101', L: '0100', M: '11', N: '10', \n    O: '111', P: '0110', Q: '1101', R: '010', S: '000', T: '1', U: '001', \n    V: '0001', W: '011', X: '1001', Y: '1011', Z: '1100', 1: '01111', \n    2: '00111', 3: '00011', 4: '00001', 5: '00000', 6: '10000', 7: '11000', \n    8: '11100', 9: '11110', 0: '11111' \n\n    Examples:\n    For msg = \"010101\/01 1010 0 110 0\" the output should be \"ACEGE\".\n    For msg = \"01111 00111\/00011 00001\/10000 11000 11100 11110 11111\" the output should be \"12 34 67890\"","reduced":"tasked to write function deciphers Morse code into plain text. Morse code is method used in telecommunication to encode text characters as sequences of two different signal durations called dots and dashes, or dits and dahs. international Morse code encodes basic Latin alphabet extra Latin letters Arabic numerals small punctuation and procedural signals. Morse code usually transmitted by on-off keying of information-carrying medium electric current, sound visible light. In your function Morse code transmission represented as string where \"0\" represents dot, \"1\" represents dash \" \" (space) represents pause between individual characters. Words separated by \"\/\" symbol. For simplicity only need to decode basic Latin alphabet and Arabic numerals.Morse code mapping A: '01' B '1000' C '1010' D '100' E '0' F: '0010' G: '110' H: '0000' I '00' J '0111' K: '101' L: '0100' M: '11' N: '10' O: '111' P: '0110' Q '1101' R: '010' S: '000' T: '1' U: '001' V: '0001' W: '011' X: '1001' Y: '1011' Z: '1100' 1: '01111' 2: '00111' 3: '00011' 4: '00001' 5: '00000' 6: '10000' 7: '11000' 8: '11100' 9: '11110' 0 '11111' msg \"010101\/01 1010 0 110 0\" output \"ACEGE\". msg \"01111 00111\/00011 11000 11100 11110 11111\" output \"12 34 67890\""}
{"task_id":"EvoEval\/50","prompt":"def text_to_morse(text):\n    \"\"\"\n    given string text task convert to morse code function return string each character representing corresponding Morse code. Morse Code system communication developed by Samuel F.B. Morse uses series dots dashes represent letters numbers symbols Morse Code each letter English alphabet represented by specific series dots dashes Morse code each letter separated by single space word by double space. use dictionary for Morse code equivalents: {'A': '.-', 'B': '-...' 'C': '-.-.' 'D': '-..', 'E': '.', 'F': '..-.' 'G': '--.' 'H': '....', 'I': '..', 'J': '.---' 'K': '-.-' 'L': '.-..' 'M': '--' 'N': '-.' 'O': '---' 'P': '.--.' 'Q': '--.-' 'R': '.-.' 'S': '...', 'T': '-' 'U': '..-' 'V': '...-' 'W': '.--' 'X': '-..-' 'Y': '-.--' 'Z': '--..' ' ': ' '} Examples: text_to_morse(\"HELLO WORLD\") # returns \".... . .-.. .-.. --- .-- --- .-. .-.. -..\" text_to_morse(\"MORSE CODE\") # returns \"-- --- .-. ... -.-. --- -.. .\"\n    \"\"\"\n","raw":"You will be given a string of text and your task is to convert it to morse code. The function \n    should return a string, with each character representing a corresponding Morse code. \n\n    Morse Code is a system of communication developed by Samuel F.B. Morse that uses a series of dots and dashes to represent letters, numbers and other symbols. In Morse Code, each letter of the English alphabet is represented by a specific series of dots and dashes.\n\n    The Morse code for each letter should be separated by a single space, and each word should be separated by a double space. \n\n    You can use the following dictionary for the Morse code equivalents:\n\n    {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n    'Y': '-.--', 'Z': '--..', ' ': '  '}\n\n    Examples:\n    text_to_morse(\"HELLO WORLD\")  # returns \".... . .-.. .-.. ---   .-- --- .-. .-.. -..\"\n    text_to_morse(\"MORSE CODE\")   # returns \"-- --- .-. ...   -.-. --- -.. .\"","reduced":"given string text task convert to morse code function return string each character representing corresponding Morse code. Morse Code system communication developed by Samuel F.B. Morse uses series dots dashes represent letters numbers symbols Morse Code each letter English alphabet represented by specific series dots dashes Morse code each letter separated by single space word by double space. use dictionary for Morse code equivalents: {'A': '.-', 'B': '-...' 'C': '-.-.' 'D': '-..', 'E': '.', 'F': '..-.' 'G': '--.' 'H': '....', 'I': '..', 'J': '.---' 'K': '-.-' 'L': '.-..' 'M': '--' 'N': '-.' 'O': '---' 'P': '.--.' 'Q': '--.-' 'R': '.-.' 'S': '...', 'T': '-' 'U': '..-' 'V': '...-' 'W': '.--' 'X': '-..-' 'Y': '-.--' 'Z': '--..' ' ': ' '} Examples: text_to_morse(\"HELLO WORLD\") # returns \".... . .-.. .-.. --- .-- --- .-. .-.. -..\" text_to_morse(\"MORSE CODE\") # returns \"-- --- .-. ... -.-. --- -.. .\""}
{"task_id":"EvoEval\/51","prompt":"def alien_encoding(string, list_of_alphabets):\n    \"\"\"\n    Write function takes string and list of alphabets. function should return string where each character in input string replaced by corresponding character in list of alphabets. first character string replaced by first character list, second character string replaced by second character of list, on. If list of alphabets shorter than string, loop back to beginning of list. If string empty, return empty string. If list empty, return original string. Examples: assert alien_encoding('Hello',['a', 'b', 'c', 'd', 'e']) == 'abcde' assert alien_encoding('World',['z', 'y', 'x', 'w', 'v', 'u']) == 'zyxwv' assert alien_encoding('HelloWorld',['a', 'b', 'c']) == 'abcabcabca' assert alien_encoding('', ['a', 'b', 'c']) == '' assert alien_encoding('Hello', []) == 'Hello'\n    \"\"\"\n","raw":"Write a function that takes a string and a list of alphabets. The function should return a string where \n    each character in the input string is replaced by the corresponding character in the list of alphabets.\n    \n    The first character of the string should be replaced by the first character of the list, the second \n    character of the string should be replaced by the second character of the list, and so on. If the list \n    of alphabets is shorter than the string, loop back to the beginning of the list.\n    \n    If the string is empty, return an empty string. If the list is empty, return the original string.\n    \n    Examples:\n    \n    assert alien_encoding('Hello',['a', 'b', 'c', 'd', 'e']) == 'abcde'\n    assert alien_encoding('World',['z', 'y', 'x', 'w', 'v', 'u']) == 'zyxwv'\n    assert alien_encoding('HelloWorld',['a', 'b', 'c']) == 'abcabcabca'\n    assert alien_encoding('', ['a', 'b', 'c']) == ''\n    assert alien_encoding('Hello', []) == 'Hello'","reduced":"Write function takes string and list of alphabets. function should return string where each character in input string replaced by corresponding character in list of alphabets. first character string replaced by first character list, second character string replaced by second character of list, on. If list of alphabets shorter than string, loop back to beginning of list. If string empty, return empty string. If list empty, return original string. Examples: assert alien_encoding('Hello',['a', 'b', 'c', 'd', 'e']) == 'abcde' assert alien_encoding('World',['z', 'y', 'x', 'w', 'v', 'u']) == 'zyxwv' assert alien_encoding('HelloWorld',['a', 'b', 'c']) == 'abcabcabca' assert alien_encoding('', ['a', 'b', 'c']) == '' assert alien_encoding('Hello', []) == 'Hello'"}
{"task_id":"EvoEval\/52","prompt":"def magic_cookie_baker(n, m, orders):\n    \"\"\"\n    You are a magical baker bakes cookies with enchanted oven. Your oven special can bake n cookies at once no more or less., you can only bake m batches in a day. list of orders in format list positive integers each integer represents order for specific number of cookies, return maximum number of orders fulfill in a day. function magic_cookie_baker should three parameters: n (a positive integer) represents exact number of cookies oven can bake at once m positive integer) represents maximum number of batches bake in a day. orders (a list positive integers) represents all orders for day. function assume can only bake one batch at a time split order across multiple batches. combine multiple orders into single batch. function return integer representing maximum number of orders fulfill in a day. Example: assert magic_cookie_baker(3, 2, [4, 6, 8, 10]) == 0 assert magic_cookie_baker(5, 3, [7, 9, 11, 13, 15]) == 0 assert magic_cookie_baker(2, 4, [2, 4, 6, 8, 10]) == 1 assert magic_cookie_baker(1, 1, [1, 2, 3, 4, 5]) == 1 assert magic_cookie_baker(4, 2, [3, 5, 7, 9, 11]) == 1\n    \"\"\"\n","raw":"You are a magical baker who bakes cookies with an enchanted oven.\n\n    Your oven is special because it can bake exactly n cookies at once, and no more or less. Moreover, you can only bake m batches in a day. \n\n    Given a list of orders in the format of a list of positive integers where each integer represents an order for a specific number of cookies, return the maximum number of orders you can fulfill in a day.\n\n    The function magic_cookie_baker should take three parameters: \n    - n (a positive integer) represents the exact number of cookies your oven can bake at once.\n    - m (a positive integer) represents the maximum number of batches you can bake in a day.\n    - orders (a list of positive integers) represents all the orders for the day.\n\n    The function should assume that:\n    - You can only bake one batch at a time.\n    - You cannot split an order across multiple batches.\n    - You cannot combine multiple orders into a single batch.\n\n    The function should return an integer representing the maximum number of orders you can fulfill in a day.\n\n    Example:\n    assert magic_cookie_baker(3, 2, [4, 6, 8, 10]) == 0\n    assert magic_cookie_baker(5, 3, [7, 9, 11, 13, 15]) == 0\n    assert magic_cookie_baker(2, 4, [2, 4, 6, 8, 10]) == 1\n    assert magic_cookie_baker(1, 1, [1, 2, 3, 4, 5]) == 1\n    assert magic_cookie_baker(4, 2, [3, 5, 7, 9, 11]) == 1","reduced":"You are a magical baker bakes cookies with enchanted oven. Your oven special can bake n cookies at once no more or less., you can only bake m batches in a day. list of orders in format list positive integers each integer represents order for specific number of cookies, return maximum number of orders fulfill in a day. function magic_cookie_baker should three parameters: n (a positive integer) represents exact number of cookies oven can bake at once m positive integer) represents maximum number of batches bake in a day. orders (a list positive integers) represents all orders for day. function assume can only bake one batch at a time split order across multiple batches. combine multiple orders into single batch. function return integer representing maximum number of orders fulfill in a day. Example: assert magic_cookie_baker(3, 2, [4, 6, 8, 10]) == 0 assert magic_cookie_baker(5, 3, [7, 9, 11, 13, 15]) == 0 assert magic_cookie_baker(2, 4, [2, 4, 6, 8, 10]) == 1 assert magic_cookie_baker(1, 1, [1, 2, 3, 4, 5]) == 1 assert magic_cookie_baker(4, 2, [3, 5, 7, 9, 11]) == 1"}
{"task_id":"EvoEval\/53","prompt":"def magical_transformation(s):\n    \"\"\"\n    Write function takes string returns 'magically' transformed version. transformed version string created by replacing every vowel (a, e, i, o, u) individually with next vowel in line (a -> e, e -> i, i -> o, o -> u, u -> a). capitalization preserved in transformation., every consonant replaced by next consonant in alphabet. 'y' considered consonant 'z' wraps around to 'b'. Preserve capitalization for consonants. Maintain order of characters special characters in sentence. Except \"?\" should become \"!\" in odd indices vice versa only in even indices For example: magical_transformation('Hi') returns 'Jo' magical_transformation('hello') returns 'jimmu' magical_transformation('Hello World!!!') returns 'Jimmu Xusmf!?!' magical_transformation('abcdef') returns 'ecdfig'\n    \"\"\"\n","raw":"Write a function that takes a string and returns a 'magically' transformed version of it.\n    This 'magically' transformed version of the string is created by replacing every \n    vowel (a, e, i, o, u) individually with the next vowel in line (a -> e, e -> i, i -> o, o -> u, \n    u -> a). The capitalization should be preserved in the transformation.\n\n    Additionally, every consonant should be replaced by the next consonant in the alphabet. \n    Here, 'y' is considered a consonant and 'z' wraps around to 'b'. \n    Preserve the capitalization for consonants as well.\n    \n    Maintain the order of characters and special characters in the sentence. Except \"?\" should become \"!\" in odd indices and vice versa but only in even indices\n\n    For example:\n    magical_transformation('Hi') returns 'Jo'\n    magical_transformation('hello') returns 'jimmu'\n    magical_transformation('Hello World!!!') returns 'Jimmu Xusmf!?!'\n    magical_transformation('abcdef') returns 'ecdfig'","reduced":"Write function takes string returns 'magically' transformed version. transformed version string created by replacing every vowel (a, e, i, o, u) individually with next vowel in line (a -> e, e -> i, i -> o, o -> u, u -> a). capitalization preserved in transformation., every consonant replaced by next consonant in alphabet. 'y' considered consonant 'z' wraps around to 'b'. Preserve capitalization for consonants. Maintain order of characters special characters in sentence. Except \"?\" should become \"!\" in odd indices vice versa only in even indices For example: magical_transformation('Hi') returns 'Jo' magical_transformation('hello') returns 'jimmu' magical_transformation('Hello World!!!') returns 'Jimmu Xusmf!?!' magical_transformation('abcdef') returns 'ecdfig'"}
{"task_id":"EvoEval\/54","prompt":"def find_star_map(lst, star):\n    \"\"\"\n    given 2 dimensional data nested lists represents star map each star has unique identifier (integer), unlike traditional maps each row contain different number of columns. Given lst, integer 'star' find star in list return list of tuples [(x1, y1), (x2, y2)...] each tuple is coordinate - (row, column). If star found multiple times include coordinates each time Start searching top left corner sweep row by row coordinates start from (0,0). If no star found return empty list. Examples: find_star_map([ [1,2,3,4,5,6], [7,8,9,10,11,12], [13,14,15,16,17,18] ], 10) returns [(1, 3)] find_star_map([ [1,1,1], [2,2,2], [3,3,3] ], 2) returns [(1, 0), (1, 1), (1, 2)] find_star_map([ [1,2,3], [4,5,6], [7,8,9] ], 20) returns []\n    \"\"\"\n","raw":"You are given a 2 dimensional data, as a nested lists,\n    which represents a star map where each individual star has a unique identifier (integer),\n    however, unlike traditional maps, each row may contain a different number of columns.\n    \n    Given lst, and an integer 'star', find the star in the list and return a list of tuples,\n    [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (row, column).\n    If a star is found multiple times in the star map, include its coordinates each time.\n    \n    Start searching from the top left corner and sweep row by row. The coordinates start from (0,0).\n    If no such star is found, return an empty list.\n    \n    Examples:\n    find_star_map([\n      [1,2,3,4,5,6],\n      [7,8,9,10,11,12],\n      [13,14,15,16,17,18]\n    ], 10) returns [(1, 3)]\n    \n    find_star_map([\n      [1,1,1],\n      [2,2,2],\n      [3,3,3]\n    ], 2) returns [(1, 0), (1, 1), (1, 2)]\n    \n    find_star_map([\n      [1,2,3],\n      [4,5,6],\n      [7,8,9]\n    ], 20) returns []","reduced":"given 2 dimensional data nested lists represents star map each star has unique identifier (integer), unlike traditional maps each row contain different number of columns. Given lst, integer 'star' find star in list return list of tuples [(x1, y1), (x2, y2)...] each tuple is coordinate - (row, column). If star found multiple times include coordinates each time Start searching top left corner sweep row by row coordinates start from (0,0). If no star found return empty list. Examples: find_star_map([ [1,2,3,4,5,6], [7,8,9,10,11,12], [13,14,15,16,17,18] ], 10) returns [(1, 3)] find_star_map([ [1,1,1], [2,2,2], [3,3,3] ], 2) returns [(1, 0), (1, 1), (1, 2)] find_star_map([ [1,2,3], [4,5,6], [7,8,9] ], 20) returns []"}
{"task_id":"EvoEval\/55","prompt":"def treasure_map(message, shift):\n    \"\"\"\n    Create function called 'treasure_map' takes two parameters: a 'message' string and integer 'shift'. function should encrypt message using a Caesar cipher, type of substitution cipher in each character in message is 'shifted' a certain number of places down alphabet., twist: instead of regular Caesar cipher, implement 'jumping' Caesar cipher. for first character of message, should shift it by one place. For second character message shift by two places, so on increasing shift by one for each subsequent character. 'shift' parameter determines initial shift for first character. shifting should be cyclical - if reaches end of alphabet, should wrap around to beginning. function needs to handle both lower and upper case letters, but should ignore non-alphabet characters (they not be modified). Examples: treasure_map('Hallo', 1) returns 'Icopt' treasure_map('XyZ', 2) returns 'ZbD' treasure_map('Treasure', 3) returns 'Wvjgzcao' treasure_map('Map', 4) returns 'Qfv'\n    \"\"\"\n","raw":"Create a function called 'treasure_map' that takes two parameters: a 'message' string and an integer 'shift'.\n    The function should encrypt the message using a Caesar cipher, a type of substitution cipher in which \n    each character in the message is 'shifted' a certain number of places down the alphabet. \n    \n    However, there's a twist: instead of a regular Caesar cipher, you should implement a 'jumping' Caesar cipher. \n    That is, for the first character of the message, you should shift it by one place. For the second character \n    of the message, you should shift it by two places, and so on, increasing the shift by one for each subsequent \n    character. The 'shift' parameter determines the initial shift for the first character.\n\n    Note that the shifting should be cyclical - if it reaches the end of the alphabet, it should wrap around to the \n    beginning. The function needs to handle both lower and upper case letters, but should ignore non-alphabet \n    characters (they should not be modified).\n\n    Examples:\n    treasure_map('Hallo', 1) returns 'Icopt'\n    treasure_map('XyZ', 2) returns 'ZbD'\n    treasure_map('Treasure', 3) returns 'Wvjgzcao'\n    treasure_map('Map', 4) returns 'Qfv'","reduced":"Create function called 'treasure_map' takes two parameters: a 'message' string and integer 'shift'. function should encrypt message using a Caesar cipher, type of substitution cipher in each character in message is 'shifted' a certain number of places down alphabet., twist: instead of regular Caesar cipher, implement 'jumping' Caesar cipher. for first character of message, should shift it by one place. For second character message shift by two places, so on increasing shift by one for each subsequent character. 'shift' parameter determines initial shift for first character. shifting should be cyclical - if reaches end of alphabet, should wrap around to beginning. function needs to handle both lower and upper case letters, but should ignore non-alphabet characters (they not be modified). Examples: treasure_map('Hallo', 1) returns 'Icopt' treasure_map('XyZ', 2) returns 'ZbD' treasure_map('Treasure', 3) returns 'Wvjgzcao' treasure_map('Map', 4) returns 'Qfv'"}
{"task_id":"EvoEval\/56","prompt":"def str_to_morse_code(s):\n    \"\"\"\n    given string lowercase letters a-z spaces Write function str_to_morse_code() translates string into Morse Code Each letter separated space word slash Return Morse Code string Morse Code Dictionary {'a': '.-' 'b' '-... 'c'-.-. 'd' '-..' 'e': '.' 'f' '..-. 'g' '--. 'h' '.... 'i': '..' 'j' '.---' 'k' '-.-' 'l': '.-..' 'm': '--' 'n': '-.' 'o': '---' 'p': '.--.' 'q': '--.-' 'r': '.-.' 's': '...' 't': '-' 'u': '..-' 'v': '...-' 'w': '.--' 'x': '-..- 'y': '-.--' 'z': '--..' Examples str_to_morse_code(\"hello world\") returns \".... . .-.. .-.. --- \/.--- -..\" str_to_morse_code( code\") returns \"-- --- .-. ... . \/ -.-. --- -.. .\" str_to_morse_code(\"\") returns \"\"\n    \"\"\"\n","raw":"You are given a string containing only lowercase letters a-z and spaces.\n    Write a function str_to_morse_code() that translates the string into Morse Code.\n    Each letter is separated by a space and each word is separated by a slash ( \/ ).\n    Return the Morse Code string.\n\n    Morse Code Dictionary: \n    {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', \n    'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', \n    'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', \n    'y': '-.--', 'z': '--..'}\n\n    Examples:\n    str_to_morse_code(\"hello world\") returns \".... . .-.. .-.. --- \/ .-- --- .-. .-.. -..\"\n    str_to_morse_code(\"morse code\") returns \"-- --- .-. ... . \/ -.-. --- -.. .\"\n    str_to_morse_code(\"\") returns \"\"","reduced":"given string lowercase letters a-z spaces Write function str_to_morse_code() translates string into Morse Code Each letter separated space word slash Return Morse Code string Morse Code Dictionary {'a': '.-' 'b' '-... 'c'-.-. 'd' '-..' 'e': '.' 'f' '..-. 'g' '--. 'h' '.... 'i': '..' 'j' '.---' 'k' '-.-' 'l': '.-..' 'm': '--' 'n': '-.' 'o': '---' 'p': '.--.' 'q': '--.-' 'r': '.-.' 's': '...' 't': '-' 'u': '..-' 'v': '...-' 'w': '.--' 'x': '-..- 'y': '-.--' 'z': '--..' Examples str_to_morse_code(\"hello world\") returns \".... . .-.. .-.. --- \/.--- -..\" str_to_morse_code( code\") returns \"-- --- .-. ... . \/ -.-. --- -.. .\" str_to_morse_code(\"\") returns \"\""}
{"task_id":"EvoEval\/57","prompt":"def magical_cafe(menu, magic_spell):\n    \"\"\"\n    Imagine you creating program for magical cafe. cafe serves dishes can be transformed into another dish when magic spell applied. task is to create function takes menu of dishes as dictionary and magic spell as string. function should return new menu where each dish transformed by magic spell. transformation works follows: Each letter in name of dish replaced by letter in spell corresponds to its position. If name of dish longer than spell, spell starts again from beginning. For example: >>> magical_cafe({'pie': 5, 'cake': 7}, 'ab') {'aba': 5, 'abab': 7} >>> magical_cafe({'soup': 3, 'salad': 4, 'sandwich': 8}, 'xyz') {'xyzx': 3, 'xyzxy': 4, 'xyzxyzxy': 8} menu dictionary consists of dish names as keys prices as values.\n    \"\"\"\n","raw":"Imagine you are creating a program for a magical cafe. This cafe serves dishes that can be transformed into another dish when a magic spell is applied. Your task is to create a function that takes a menu of dishes as a dictionary and a magic spell as a string. The function should return a new menu where each dish has been transformed by the magic spell. \n\n    The transformation works as follows:\n    Each letter in the name of the dish will be replaced by the letter in the spell that corresponds to its position. If the name of the dish is longer than the spell, the spell starts again from the beginning.\n    \n    For example:\n    \n    >>> magical_cafe({'pie': 5, 'cake': 7}, 'ab')\n    {'aba': 5, 'abab': 7}\n\n    >>> magical_cafe({'soup': 3, 'salad': 4, 'sandwich': 8}, 'xyz')\n    {'xyzx': 3, 'xyzxy': 4, 'xyzxyzxy': 8}\n\n    The menu dictionary consists of dish names as keys and their prices as values.","reduced":"Imagine you creating program for magical cafe. cafe serves dishes can be transformed into another dish when magic spell applied. task is to create function takes menu of dishes as dictionary and magic spell as string. function should return new menu where each dish transformed by magic spell. transformation works follows: Each letter in name of dish replaced by letter in spell corresponds to its position. If name of dish longer than spell, spell starts again from beginning. For example: >>> magical_cafe({'pie': 5, 'cake': 7}, 'ab') {'aba': 5, 'abab': 7} >>> magical_cafe({'soup': 3, 'salad': 4, 'sandwich': 8}, 'xyz') {'xyzx': 3, 'xyzxy': 4, 'xyzxyzxy': 8} menu dictionary consists of dish names as keys prices as values."}
{"task_id":"EvoEval\/58","prompt":"def interstellar_translator(earth_phrase):\n    \"\"\"\n    Write function takes earth phrase translates into alien language follows specific set rules. rules for translation are follows: 1. All vowels (a,e,i,o,u) replaced with next vowel in sequence (a->e, e->i, i->o, o->u, u->a). 2. All consonants replaced with next consonant appears in english alphabet. If consonant is 'z', replace with 'b'. 3. All spaces replaced with '@' symbol. 4. first letter of every word be capitalized. 5. If original word started with vowel, append 'xy' to end of word. If original word started with consonant, append 'yz' to end of word. Assume input is string containing only lowercase letters and spaces. Examples: >>> interstellar_translator('hello world') 'Jimmuyz@Xusmfyz' >>> interstellar_translator('this is a test') 'Vjotyz@Otxy@Exy@Vitvyz'\n    \"\"\"\n","raw":"Write a function that takes an earth phrase, and translates it into \n    an alien language that follows a specific set of rules. The rules for the \n    translation are as follows:\n\n    1. All vowels (a,e,i,o,u) should be replaced with the next vowel in the \n       sequence (a->e, e->i, i->o, o->u, u->a).\n    2. All consonants should be replaced with the next consonant that appears \n       in the english alphabet. If the consonant is 'z', replace it with 'b'.\n    3. All spaces should be replaced with the '@' symbol.\n    4. The first letter of every word should be capitalized.\n    5. If the original word started with a vowel, append 'xy' to the end of the word. \n       If the original word started with a consonant, append 'yz' to the end of the word.\n\n    Assume the input is a string containing only lowercase letters and spaces.\n    \n    Examples:\n    >>> interstellar_translator('hello world')\n    'Jimmuyz@Xusmfyz'\n    >>> interstellar_translator('this is a test')\n    'Vjotyz@Otxy@Exy@Vitvyz'","reduced":"Write function takes earth phrase translates into alien language follows specific set rules. rules for translation are follows: 1. All vowels (a,e,i,o,u) replaced with next vowel in sequence (a->e, e->i, i->o, o->u, u->a). 2. All consonants replaced with next consonant appears in english alphabet. If consonant is 'z', replace with 'b'. 3. All spaces replaced with '@' symbol. 4. first letter of every word be capitalized. 5. If original word started with vowel, append 'xy' to end of word. If original word started with consonant, append 'yz' to end of word. Assume input is string containing only lowercase letters and spaces. Examples: >>> interstellar_translator('hello world') 'Jimmuyz@Xusmfyz' >>> interstellar_translator('this is a test') 'Vjotyz@Otxy@Exy@Vitvyz'"}
{"task_id":"EvoEval\/59","prompt":"def cooking_challenge(ingredient_dict):\n    \"\"\"\n    Given dictionary keys are main ingredients values number of recipes cook with ingredient return list of tuples first element each tuple is ingredient second number of recipes list sorted in descending order based on number of recipes. If two ingredients used in same number of recipes sort in ascending alphabetical order. function return empty list if dictionary empty. Examples: cooking_challenge({\"Chicken\": 5, \"Beef\": 10, \"Fish\": 2}) return [('Beef', 10), ('Chicken', 5), ('Fish', 2)]. cooking_challenge({\"Tomato\": 10, \"Potato\": 10, \"Onion\": 5}) return [('Potato', 10), ('Tomato', 10), ('Onion', 5)]. cooking_challenge({\"Eggs\": 3, \"Milk\": 0, \"Flour\": 2}) return [('Eggs', 3), ('Flour', 2), ('Milk', 0)]. cooking_challenge({}) should return [].\n    \"\"\"\n","raw":"Given a dictionary where the keys are the main ingredients and the values are the number of recipes you can cook with this ingredient,\n    return a list of tuples where the first element of each tuple is an ingredient and the second is a number of recipes. The list should be \n    sorted in descending order based on the number of recipes. If two ingredients can be used in the same number of recipes, sort them in ascending \n    alphabetical order.\n    The function should return an empty list if the given dictionary is empty.\n    \n    Examples:\n    cooking_challenge({\"Chicken\": 5, \"Beef\": 10, \"Fish\": 2}) should return [('Beef', 10), ('Chicken', 5), ('Fish', 2)].\n    cooking_challenge({\"Tomato\": 10, \"Potato\": 10, \"Onion\": 5}) should return [('Potato', 10), ('Tomato', 10), ('Onion', 5)].\n    cooking_challenge({\"Eggs\": 3, \"Milk\": 0, \"Flour\": 2}) should return [('Eggs', 3), ('Flour', 2), ('Milk', 0)].\n    cooking_challenge({}) should return [].","reduced":"Given dictionary keys are main ingredients values number of recipes cook with ingredient return list of tuples first element each tuple is ingredient second number of recipes list sorted in descending order based on number of recipes. If two ingredients used in same number of recipes sort in ascending alphabetical order. function return empty list if dictionary empty. Examples: cooking_challenge({\"Chicken\": 5, \"Beef\": 10, \"Fish\": 2}) return [('Beef', 10), ('Chicken', 5), ('Fish', 2)]. cooking_challenge({\"Tomato\": 10, \"Potato\": 10, \"Onion\": 5}) return [('Potato', 10), ('Tomato', 10), ('Onion', 5)]. cooking_challenge({\"Eggs\": 3, \"Milk\": 0, \"Flour\": 2}) return [('Eggs', 3), ('Flour', 2), ('Milk', 0)]. cooking_challenge({}) should return []."}
{"task_id":"EvoEval\/60","prompt":"def happy_ants(path_length, sugar_locations, ant_positions):\n    \"\"\"\n    Imagine narrow path ants marching. Some locations have sugar pieces. happy ant ant passes location with sugar piece. ant passes location with sugar picks up small bite of sugar subsequent ants can get sugar from location. Implement function takes path's length (a positive integer), list of initial sugar locations (positive integers less than path's length), list ant positions marching direction (a list of tuples first item tuple is ant's position - positive integer less than path's length second item is ant's marching direction as \"left\" or \"right\"). function should return number of happy ants at end of march. Ants can't turn back starts marching from given initial position. For example: happy_ants(10, [2, 5, 7], [(1, \"right\"), (3, \"right\"), (6, \"left\")]) => 3 happy_ants(20, [2, 10, 14, 15], [(2, \"right\"), (8, \"right\"), (19, \"left\"), (15, \"left\")]) => 4 happy_ants(3, [2], [(0, \"right\"), (1, \"right\"), (2, \"left\")]) => 3 happy_ants(0, [], []) => 0\n    \"\"\"\n","raw":"Imagine a narrow path where ants are marching. Some locations on the path have sugar pieces. A\n    happy ant is an ant that passes a location with a sugar piece. When an ant passes a location with sugar,\n    it picks up a small bite of the sugar, and subsequent ants can still get sugar from that location.\n\n    Implement a function that takes the path's length (a positive integer), a list of the initial sugar\n    locations (positive integers less than the path's length), and a list of ant positions and their marching\n    direction (a list of tuples, where the first item of the tuple is the ant's position - a positive integer\n    less than the path's length, and the second item is the ant's marching direction as \"left\" or \"right\").\n\n    This function should return the number of happy ants at the end of their march.\n\n    Ants can't turn back and starts marching from the given initial position.\n\n    For example:\n    happy_ants(10, [2, 5, 7], [(1, \"right\"), (3, \"right\"), (6, \"left\")]) => 3\n\n    happy_ants(20, [2, 10, 14, 15], [(2, \"right\"), (8, \"right\"), (19, \"left\"), (15, \"left\")]) => 4\n\n    happy_ants(3, [2], [(0, \"right\"), (1, \"right\"), (2, \"left\")]) => 3\n\n    happy_ants(0, [], []) => 0","reduced":"Imagine narrow path ants marching. Some locations have sugar pieces. happy ant ant passes location with sugar piece. ant passes location with sugar picks up small bite of sugar subsequent ants can get sugar from location. Implement function takes path's length (a positive integer), list of initial sugar locations (positive integers less than path's length), list ant positions marching direction (a list of tuples first item tuple is ant's position - positive integer less than path's length second item is ant's marching direction as \"left\" or \"right\"). function should return number of happy ants at end of march. Ants can't turn back starts marching from given initial position. For example: happy_ants(10, [2, 5, 7], [(1, \"right\"), (3, \"right\"), (6, \"left\")]) => 3 happy_ants(20, [2, 10, 14, 15], [(2, \"right\"), (8, \"right\"), (19, \"left\"), (15, \"left\")]) => 4 happy_ants(3, [2], [(0, \"right\"), (1, \"right\"), (2, \"left\")]) => 3 happy_ants(0, [], []) => 0"}
{"task_id":"EvoEval\/61","prompt":"def transform_string(s):\n    \"\"\"\n    Given string s perform operations: 1. Swap case of all alphabetic characters in odd indices. Replace vowels (case-insensitive) with next vowel in sequence (a->e, e->i i->o o->u u->a). Replace consonants (case-insensitive) with preceding consonant (b->z, c->b ... z->y, b->z) Assume all characters in input string s are either alphabetic characters or spaces Ignore spaces operations maintain position in string. example: transform_string('Hello World') returns 'GIkKu VUqKc'('Python') returns 'NXsGuM''Java') returns 'HEtE'\n    \"\"\"\n","raw":"Given a string s, perform the following operations:\n    \n    1. Swap the case of all alphabetic characters in odd indices.\n    2. Replace all vowels (case-insensitive) with the next vowel in the sequence (a->e, e->i, i->o, o->u, u->a).\n    3. Replace all consonants (case-insensitive) with the preceding consonant (b->z, c->b, ..., z->y, b->z)\n    \n    Assume that all characters in the input string s are either alphabetic characters or spaces.\n    Ignore spaces while performing operations but maintain their position in the string.\n    \n    For example:\n    transform_string('Hello World') returns 'GIkKu VUqKc'\n    transform_string('Python') returns 'NXsGuM'\n    transform_string('Java') returns 'HEtE'","reduced":"Given string s perform operations: 1. Swap case of all alphabetic characters in odd indices. Replace vowels (case-insensitive) with next vowel in sequence (a->e, e->i i->o o->u u->a). Replace consonants (case-insensitive) with preceding consonant (b->z, c->b ... z->y, b->z) Assume all characters in input string s are either alphabetic characters or spaces Ignore spaces operations maintain position in string. example: transform_string('Hello World') returns 'GIkKu VUqKc'('Python') returns 'NXsGuM''Java') returns 'HEtE'"}
{"task_id":"EvoEval\/62","prompt":"\"\"\"\n    def recipe_converter(recipe, conversion_factor): '' Write function takes dictionary representing recipe as input keys are ingredients values are quantities needed for one serving function should take conversion factor represents number of servings required. function return new dictionary quantities of each ingredient multiplied by conversion factor. quantities in recipe are integers conversion factor positive integer. Examples: >>> recipe_converter({\"flour\": 500, \"sugar\": 200, \"eggs\": 3}, 2) {'flour': 1000, 'sugar': 400, 'eggs': 6} >>> recipe_converter({\"milk\": 250, \"chocolate\": 75, \"butter\": 50}, 3) {'milk': 750, 'chocolate': 225, 'butter': 150} ''\n    \"\"\"\n","raw":"def recipe_converter(recipe, conversion_factor):\n    '''\n    Write a function that takes a dictionary representing a recipe as input \n    where the keys are the ingredients and the values are the quantities \n    needed for one serving. The function should also take a conversion factor \n    which represents the number of servings required. The function should \n    return a new dictionary where the quantities of each ingredient are \n    multiplied by the conversion factor.\n\n    The quantities in the recipe are integers and the conversion factor is a \n    positive integer. \n\n    Examples:\n    >>> recipe_converter({\"flour\": 500, \"sugar\": 200, \"eggs\": 3}, 2)\n    {'flour': 1000, 'sugar': 400, 'eggs': 6}\n    >>> recipe_converter({\"milk\": 250, \"chocolate\": 75, \"butter\": 50}, 3)\n    {'milk': 750, 'chocolate': 225, 'butter': 150}\n    '''","reduced":"def recipe_converter(recipe, conversion_factor): '' Write function takes dictionary representing recipe as input keys are ingredients values are quantities needed for one serving function should take conversion factor represents number of servings required. function return new dictionary quantities of each ingredient multiplied by conversion factor. quantities in recipe are integers conversion factor positive integer. Examples: >>> recipe_converter({\"flour\": 500, \"sugar\": 200, \"eggs\": 3}, 2) {'flour': 1000, 'sugar': 400, 'eggs': 6} >>> recipe_converter({\"milk\": 250, \"chocolate\": 75, \"butter\": 50}, 3) {'milk': 750, 'chocolate': 225, 'butter': 150} ''"}
{"task_id":"EvoEval\/63","prompt":"def create_pyramid(p):\r\n    \"\"\"\n    Given positive integer p, objective is to construct a pyramid. base pyramid has p blocks. number of blocks in next layer depends upon number of blocks in previous layer even or odd. rules follows: - If number of blocks in previous layer is even, next layer contains 2 blocks less - If number blocks previous layer odd, next layer contains 3 blocks less. Before number of blocks in next layer less than or equal to zero, pyramid is complete. function should return list containing number of blocks in each layer from bottom to top. element at index i in list represents number of blocks in (i+1)th layer from bottom. Examples: >>> create_pyramid(10) [10, 8, 6, 4, 2] >>> create_pyramid(9) [9, 6, 4, 2]\n    \"\"\"\n","raw":"Given a positive integer p, your objective is to construct a pyramid. The base of the pyramid has p blocks. \r\n    The number of blocks in the next layer depends upon whether the number of blocks in the previous layer is even or odd.\r\n    The rules are as follows:\r\n        - If the number of blocks in the previous layer is even, the next layer contains 2 blocks less.\r\n        - If the number of blocks in the previous layer is odd, the next layer contains 3 blocks less.\r\n    Before the number of blocks in the next layer is less than or equal to zero, the pyramid is complete. Your function should return \r\n    a list containing the number of blocks in each layer from bottom to top. The element at index i in the list represents \r\n    the number of blocks in the (i+1)th layer from the bottom. \r\n\r\n    Examples:\r\n    >>> create_pyramid(10)\r\n    [10, 8, 6, 4, 2]\r\n    \r\n    >>> create_pyramid(9)\r\n    [9, 6, 4, 2]","reduced":"Given positive integer p, objective is to construct a pyramid. base pyramid has p blocks. number of blocks in next layer depends upon number of blocks in previous layer even or odd. rules follows: - If number of blocks in previous layer is even, next layer contains 2 blocks less - If number blocks previous layer odd, next layer contains 3 blocks less. Before number of blocks in next layer less than or equal to zero, pyramid is complete. function should return list containing number of blocks in each layer from bottom to top. element at index i in list represents number of blocks in (i+1)th layer from bottom. Examples: >>> create_pyramid(10) [10, 8, 6, 4, 2] >>> create_pyramid(9) [9, 6, 4, 2]"}
{"task_id":"EvoEval\/64","prompt":"def magical_sequence(start, end, divisor):\n    \"\"\"\n    function takes three positive integers: 'start', 'end' 'divisor'. returns list of all numbers in range ['start', 'end'] inclusive, divisible by 'divisor' and are prime numbers. If no such number exists, function should return empty list. For example magical_sequence(10, 20, 2) returns empty list because no prime numbers in range [10, 20] divisible by 2. magical_sequence(1, 5, 3) returns [3] because 3 only prime number in range [1, 5] divisible by 3. magical_sequence(10, 15, 6) returns empty list because no prime numbers in range [10, 15] divisible by 6.\n    \"\"\"\n","raw":"This function takes three positive integers: 'start', 'end', and 'divisor'. It returns a list of all \n    the numbers in the range ['start', 'end'] inclusive, that are divisible by 'divisor' and are prime numbers. \n    If no such number exists, the function should return an empty list.\n\n    For example:\n    magical_sequence(10, 20, 2) returns an empty list because there are no prime numbers in the range [10, 20] that are divisible by 2.\n    magical_sequence(1, 5, 3) returns [3] because 3 is the only prime number in the range [1, 5] that is divisible by 3.\n    magical_sequence(10, 15, 6) returns an empty list because there are no prime numbers in the range [10, 15] that are divisible by 6.","reduced":"function takes three positive integers: 'start', 'end' 'divisor'. returns list of all numbers in range ['start', 'end'] inclusive, divisible by 'divisor' and are prime numbers. If no such number exists, function should return empty list. For example magical_sequence(10, 20, 2) returns empty list because no prime numbers in range [10, 20] divisible by 2. magical_sequence(1, 5, 3) returns [3] because 3 only prime number in range [1, 5] divisible by 3. magical_sequence(10, 15, 6) returns empty list because no prime numbers in range [10, 15] divisible by 6."}
{"task_id":"EvoEval\/65","prompt":"def food_order(menu, order):\n    \"\"\"\n    Imagine developing system for Fast Food Restaurant. have menu dictionary keys are names of food values are sequences of ingredients. customers customize orders by adding extra ingredients or removing some. Given dictionary representing menu and another dictionary representing customer's order, task is to return new dictionary representing final food order with customized ingredients. For example: menu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]} order = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}} Returns: {\"Burger\": [\"Bun\", \"Meat\", \"Mushrooms\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\", \"Pepperoni\"]} Assumptions: - ingredient to be removed always in original food order - ingredient added won't be in original food order order dictionary not contain food not on menu. If order dictionary empty, return original menu If order dictionary given but no ingredients specified to be added or removed, return original menu:\n    \"\"\"\n","raw":"Imagine you are developing a system for a Fast Food Restaurant. They have a menu that is \n    a dictionary where the keys are the names of the food and the values are sequences of ingredients.\n    However, customers often customize their orders by adding extra ingredients or removing some.\n    \n    Given a dictionary representing the menu and another dictionary representing a customer's order,\n    your task is to return a new dictionary representing the final food order with customized ingredients.\n\n    For example:\n      menu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\n      order = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}\n      \n      Returns:\n      {\"Burger\": [\"Bun\", \"Meat\", \"Mushrooms\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\", \"Pepperoni\"]}\n\n    Assumptions:\n      - An ingredient to be removed will always be in the original food order.\n      - An ingredient to be added won't be in the original food order.\n      - The order dictionary will not contain any food not on the menu.\n\n    If the order dictionary is empty, return the original menu\n      \n    If the order dictionary is given but no ingredients are specified to be added or removed, return the original menu:","reduced":"Imagine developing system for Fast Food Restaurant. have menu dictionary keys are names of food values are sequences of ingredients. customers customize orders by adding extra ingredients or removing some. Given dictionary representing menu and another dictionary representing customer's order, task is to return new dictionary representing final food order with customized ingredients. For example: menu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]} order = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}} Returns: {\"Burger\": [\"Bun\", \"Meat\", \"Mushrooms\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\", \"Pepperoni\"]} Assumptions: - ingredient to be removed always in original food order - ingredient added won't be in original food order order dictionary not contain food not on menu. If order dictionary empty, return original menu If order dictionary given but no ingredients specified to be added or removed, return original menu:"}
{"task_id":"EvoEval\/66","prompt":"def prime_anagram_pairs(n):\n    \"\"\"\n    Given positive integer n, return list of tuples represents all unique pairs of prime numbers within range (1, n) anagrams of each other. prime number is natural number greater than 1 no positive divisors other than 1 and itself. Two numbers considered anagrams if digits can rearranged to form other number. Example 1: Input: 13 Output: [] Example 2: Input: 32 Output: [(13, 31)] Note: 1. returned list should contain tuples of prime numbers where first number smaller than second number 2. list sorted in ascending order based on first number in each tuple. If tie, sort based on second number.\n    \"\"\"\n","raw":"Given a positive integer n, return a list of tuples that represents all unique pairs of \n    prime numbers within the range (1, n) that are anagrams of each other. \n\n    A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n    Two numbers are considered anagrams of each other if their digits can be rearranged to form the other number.\n\n    Example 1:\n\n        Input: 13\n        Output: []\n\n    Example 2:\n\n        Input: 32\n        Output: [(13, 31)]\n\n    Note:\n        1. The returned list should contain tuples of prime numbers where the first number is smaller \n        than the second number. \n        2. The list should be sorted in ascending order based on the first number in each tuple. If there's\n        a tie, sort based on the second number.","reduced":"Given positive integer n, return list of tuples represents all unique pairs of prime numbers within range (1, n) anagrams of each other. prime number is natural number greater than 1 no positive divisors other than 1 and itself. Two numbers considered anagrams if digits can rearranged to form other number. Example 1: Input: 13 Output: [] Example 2: Input: 32 Output: [(13, 31)] Note: 1. returned list should contain tuples of prime numbers where first number smaller than second number 2. list sorted in ascending order based on first number in each tuple. If tie, sort based on second number."}
{"task_id":"EvoEval\/67","prompt":"def meal_calculator(customers, meals):\n    \"\"\"\n    Write function meal_calculator takes two arguments; list of customer's names dictionary representing meals consumed customers key is customer's name value list of meals Each meal is dictionary with 'dish' and 'calories' key function should return dictionary each key is customer's name value is total calories consumed customer. If customer's name exist in meals dictionary assume customer consumed 0 calories calories value for each meal always positive integer. Example: >>> meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice': [{'dish':'Pizza' 'calories': 300}'dish':'Burger' 'calories': 500}] 'Bob': ['dish':'Salad' 'calories': 100}] 'Charlie': [{'dish':'Fries' 'calories': 200}'dish:'Burger' 'calories': 500}'dish':'Ice Cream' 'calories': 250}]}) {'Alice': 800, 'Bob': 100, 'Charlie': 950} >>> meal_calculator(['Tom', 'Jerry'], {'Tom': ['dish':'Pizza' 'calories': 300}'dish:'Burger' 'calories': 500}] 'Jerry': ['dish':'Fries' 'calories': 200}]}) {'Tom': 800, 'Jerry': 200}\n    \"\"\"\n","raw":"Write a function meal_calculator which takes two arguments; a list of customer's names and a dictionary representing meals consumed by customers where the key is the customer's name and the value is a list of meals. Each meal is a dictionary with a 'dish' and 'calories' key. The function should return a dictionary where each key is a customer's name and the value is the total calories consumed by that customer.\n\n    If a customer's name does not exist in the meals dictionary, assume that the customer consumed 0 calories. The calories value for each meal will always be a positive integer.\n\n    Example:\n    >>> meal_calculator(['Alice', 'Bob', 'Charlie'], \n                        {'Alice': [{'dish':'Pizza', 'calories': 300}, {'dish':'Burger', 'calories': 500}], \n                         'Bob': [{'dish':'Salad', 'calories': 100}], \n                         'Charlie': [{'dish':'Fries', 'calories': 200}, {'dish':'Burger', 'calories': 500}, {'dish':'Ice Cream', 'calories': 250}]})\n    {'Alice': 800, 'Bob': 100, 'Charlie': 950}\n\n    >>> meal_calculator(['Tom', 'Jerry'], \n                        {'Tom': [{'dish':'Pizza', 'calories': 300}, {'dish':'Burger', 'calories': 500}], \n                         'Jerry': [{'dish':'Fries', 'calories': 200}]})\n    {'Tom': 800, 'Jerry': 200}","reduced":"Write function meal_calculator takes two arguments; list of customer's names dictionary representing meals consumed customers key is customer's name value list of meals Each meal is dictionary with 'dish' and 'calories' key function should return dictionary each key is customer's name value is total calories consumed customer. If customer's name exist in meals dictionary assume customer consumed 0 calories calories value for each meal always positive integer. Example: >>> meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice': [{'dish':'Pizza' 'calories': 300}'dish':'Burger' 'calories': 500}] 'Bob': ['dish':'Salad' 'calories': 100}] 'Charlie': [{'dish':'Fries' 'calories': 200}'dish:'Burger' 'calories': 500}'dish':'Ice Cream' 'calories': 250}]}) {'Alice': 800, 'Bob': 100, 'Charlie': 950} >>> meal_calculator(['Tom', 'Jerry'], {'Tom': ['dish':'Pizza' 'calories': 300}'dish:'Burger' 'calories': 500}] 'Jerry': ['dish':'Fries' 'calories': 200}]}) {'Tom': 800, 'Jerry': 200}"}
{"task_id":"EvoEval\/68","prompt":"def magical_sorting(arr):\n    \"\"\"\n    In a land of magic, a sorcerer has an enchanted array 'arr' of N integers arr[1], arr[2], ..., arr[N]. numbers array granted random order by a spell. sorcerer wants to bring order to chaos needs to sort array in non-decreasing order. He can use magic wand to cast two types spells: 1. 'Rotate': This spell rotates all elements array by one position to right. last element moved to starting position i.e. 0th index. 2. 'Swap': spell allows to swap any two elements in array. sorcerer wants to use minimum magic to save energy can only cast 'Swap' spell once. Your task is to help sorcerer determine if possible to get array sorted in non-decreasing order by using 'Rotate' spell times and 'Swap' spell only once. If possible to obtain sorted array using sorcerer spells, return True; otherwise, return False. If array is empty, return True. Note: given list is guaranteed to have unique elements. Examples: magical_sorting([3, 4, 5, 1, 2]) ==> True magical_sorting([3, 5, 4, 1, 2]) ==> True magical_sorting([3, 5, 4, 2, 1]) ==> False\n    \"\"\"\n","raw":"In a land of magic, a sorcerer has an enchanted array 'arr' of N integers arr[1], arr[2], ..., arr[N].\n    The numbers in the array are granted a random order by a spell. The sorcerer wants to bring order to this chaos and\n    needs to sort this array in non-decreasing order. He can use his magic wand to cast two types of spells:\n\n    1. 'Rotate': This spell rotates all elements of the array by one position to the right. The last element of the array \n        will be moved to the starting position in the array i.e. 0th index. \n    2. 'Swap': This spell allows him to swap any two elements in the array.\n\n    The sorcerer wants to use a minimum amount of magic to save his energy, so he can only cast the 'Swap' spell once.\n\n    Your task is to help the sorcerer determine if it is possible to get an array sorted in non-decreasing order by using \n    the 'Rotate' spell any number of times and the 'Swap' spell only once.\n\n    If it is possible to obtain the sorted array using the sorcerer's spells, then return True; otherwise, return False.\n    If the given array is empty, then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    Examples:\n\n    magical_sorting([3, 4, 5, 1, 2]) ==> True\n\n    magical_sorting([3, 5, 4, 1, 2]) ==> True\n\n    magical_sorting([3, 5, 4, 2, 1]) ==> False","reduced":"In a land of magic, a sorcerer has an enchanted array 'arr' of N integers arr[1], arr[2], ..., arr[N]. numbers array granted random order by a spell. sorcerer wants to bring order to chaos needs to sort array in non-decreasing order. He can use magic wand to cast two types spells: 1. 'Rotate': This spell rotates all elements array by one position to right. last element moved to starting position i.e. 0th index. 2. 'Swap': spell allows to swap any two elements in array. sorcerer wants to use minimum magic to save energy can only cast 'Swap' spell once. Your task is to help sorcerer determine if possible to get array sorted in non-decreasing order by using 'Rotate' spell times and 'Swap' spell only once. If possible to obtain sorted array using sorcerer spells, return True; otherwise, return False. If array is empty, return True. Note: given list is guaranteed to have unique elements. Examples: magical_sorting([3, 4, 5, 1, 2]) ==> True magical_sorting([3, 5, 4, 1, 2]) ==> True magical_sorting([3, 5, 4, 2, 1]) ==> False"}
{"task_id":"EvoEval\/69","prompt":"def magicTrick(cards, magicNumber):\n    \"\"\"\n    In this problem, you are a magician needs to perform a card trick. You have list of cards each marked with a number, and magic number. Your task is to implement a function takes list of card numbers and magic number function should determine possible to select two cards such when multiplied their product equals magic number. function should return indices of two cards if possible, \"No magic today\" if not. indices should be 0-indexed returned in ascending order (smaller index, larger index). For example: magicTrick([2, 3, 4, 5], 20) => (2, 3) magicTrick([1, 1, 1, 1], 1) => (0, 1) magicTrick([1, 2, 3, 4], 10) => \"No magic today\" assumed input list non-empty magic number positive integer.\n    \"\"\"\n","raw":"In this problem, you are a magician who needs to perform a card trick. You have a list of cards, each marked with a number, and a magic number.\n\n    Your task is to implement a function that takes a list of card numbers and a magic number. The function should determine whether it's possible to select two cards such that when multiplied, their product equals the magic number.\n\n    The function should return the indices of the two cards if it's possible, and \"No magic today\" if it's not. The indices should be 0-indexed and returned in an ascending order i.e., (smaller index, larger index). \n\n    For example:\n    magicTrick([2, 3, 4, 5], 20) => (2, 3)\n    magicTrick([1, 1, 1, 1], 1) => (0, 1)\n    magicTrick([1, 2, 3, 4], 10) => \"No magic today\"\n\n    It is assumed that the input list will be non-empty and the magic number will be a positive integer.","reduced":"In this problem, you are a magician needs to perform a card trick. You have list of cards each marked with a number, and magic number. Your task is to implement a function takes list of card numbers and magic number function should determine possible to select two cards such when multiplied their product equals magic number. function should return indices of two cards if possible, \"No magic today\" if not. indices should be 0-indexed returned in ascending order (smaller index, larger index). For example: magicTrick([2, 3, 4, 5], 20) => (2, 3) magicTrick([1, 1, 1, 1], 1) => (0, 1) magicTrick([1, 2, 3, 4], 10) => \"No magic today\" assumed input list non-empty magic number positive integer."}
{"task_id":"EvoEval\/70","prompt":"def planet_path(planets, path):\r\n    \"\"\"\n    dictionary of planets each planet key value is list of planets directly connects to list planets forming path return True if path between planets valid each planet connects directly to next), False otherwise If planet exist in dictionary or path list empty return False. Example: planet_path({'a': ['b', 'c'], 'b': ['a' 'c'] 'c': ['a', 'b']} [) returns True planet_path({'a': ['b', 'c'], 'b': ['a', 'c'] 'c' ['a', 'b']} ['a 'c 'b') returns True planet_path({'a': ['b', 'c'], 'b': ['a', 'c'] 'c': ['a', 'b']} ['a' 'b 'a returns True planet_path({'a': ['b'], 'b': ['a', 'c'], 'c': ['b']} ['a') returns False planet_path({'a': ['b'], 'b': ['a', 'c'], 'c': ['b']} []) returns False planet_path({}, ['a', 'b', 'c']) returns False\n    \"\"\"\n","raw":"Given a dictionary of planets where each planet is a key and its value is \r\n    a list of planets it directly connects to, and a list of planets forming a path, \r\n    return True if the path between those planets is valid (i.e. each planet connects \r\n    directly to the next), and False otherwise. If the planet does not exist in the \r\n    dictionary or the path list is empty, return False.\r\n\r\n    Example:\r\n    planet_path({'a': ['b', 'c'], 'b': ['a', 'c'], 'c': ['a', 'b']}, ['a', 'b', 'c']) \r\n    returns True\r\n    planet_path({'a': ['b', 'c'], 'b': ['a', 'c'], 'c': ['a', 'b']}, ['a', 'c', 'b']) \r\n    returns True\r\n    planet_path({'a': ['b', 'c'], 'b': ['a', 'c'], 'c': ['a', 'b']}, ['a', 'b', 'a']) \r\n    returns True\r\n    planet_path({'a': ['b'], 'b': ['a', 'c'], 'c': ['b']}, ['a', 'c', 'b']) \r\n    returns False\r\n    planet_path({'a': ['b'], 'b': ['a', 'c'], 'c': ['b']}, []) \r\n    returns False\r\n    planet_path({}, ['a', 'b', 'c']) \r\n    returns False","reduced":"dictionary of planets each planet key value is list of planets directly connects to list planets forming path return True if path between planets valid each planet connects directly to next), False otherwise If planet exist in dictionary or path list empty return False. Example: planet_path({'a': ['b', 'c'], 'b': ['a' 'c'] 'c': ['a', 'b']} [) returns True planet_path({'a': ['b', 'c'], 'b': ['a', 'c'] 'c' ['a', 'b']} ['a 'c 'b') returns True planet_path({'a': ['b', 'c'], 'b': ['a', 'c'] 'c': ['a', 'b']} ['a' 'b 'a returns True planet_path({'a': ['b'], 'b': ['a', 'c'], 'c': ['b']} ['a') returns False planet_path({'a': ['b'], 'b': ['a', 'c'], 'c': ['b']} []) returns False planet_path({}, ['a', 'b', 'c']) returns False"}
{"task_id":"EvoEval\/71","prompt":"def letter_shift_cipher(s, n):\n    \"\"\"\n    Task You given string 's' number 'n'. task to create function applies simple shift cipher to string. shift cipher works by shifting letters in alphabet by 'n' places. If shift takes past end of alphabet, rotate back to start alphabet. Only shift letters in string, leave non-alphabet character as is. function should count number of vowels (a, e, i, o, u) in resulting string. Return tuple containing encrypted string and number of vowels. Examples: For s = \"hello\", n = 1, result should be ('ifmmp', 1) For s = \"abcde\", n = 3, result should be ('defgh', 1) For s = \"I love Python!\", n = 13, result should be ('V ybir Clguba!', 3)\n    \"\"\"\n","raw":"Task\n    You are given a string 's' and a number 'n'. Your task is to create a function that applies a simple shift cipher to the string. \n    The shift cipher works by shifting the letters in the alphabet by 'n' places. If the shift takes you past the end of the alphabet, just rotate back to the start of the alphabet. \n    Only shift letters in the string, leave any non-alphabet character as is.\n    The function should also count the number of vowels (a, e, i, o, u) in the resulting string.\n    Return a tuple containing the encrypted string and the number of vowels in it.\n\n    Examples:\n    For s = \"hello\", n = 1, the result should be ('ifmmp', 1) \n    For s = \"abcde\", n = 3, the result should be ('defgh', 1) \n    For s = \"I love Python!\", n = 13, the result should be ('V ybir Clguba!', 3)","reduced":"Task You given string 's' number 'n'. task to create function applies simple shift cipher to string. shift cipher works by shifting letters in alphabet by 'n' places. If shift takes past end of alphabet, rotate back to start alphabet. Only shift letters in string, leave non-alphabet character as is. function should count number of vowels (a, e, i, o, u) in resulting string. Return tuple containing encrypted string and number of vowels. Examples: For s = \"hello\", n = 1, result should be ('ifmmp', 1) For s = \"abcde\", n = 3, result should be ('defgh', 1) For s = \"I love Python!\", n = 13, result should be ('V ybir Clguba!', 3)"}
{"task_id":"EvoEval\/72","prompt":"def string_fairy_tale(lst):\n    \"\"\"\n    Given a list of strings, each string consists of mix of letters and numbers, return a list. Each element of output should be a fairy tale inspired story story should be \"Once upon time, in a kingdom far away, lived a magical creature name 'i' known for telling 'j' tales a day, 'i' is i'th string of input and 'j' is count of digits in string. >>> string_fairy_tale(['Dragon123', 'Unicorn45']) [\"Once upon time, in kingdom far away, lived a magical creature name 'Dragon123' known for telling 3 tales a day\", \"Once upon time, in kingdom far away, lived magical creature 'Unicorn45' known for telling 2 tales a day\"] >>> string_fairy_tale(['Mermaid7890', 'Elf111']) [\"Once upon time, in kingdom far away, lived magical creature name 'Mermaid7890' known for telling 4 tales a day\", \"Once upon time, in kingdom far away, lived magical creature name 'Elf111' known for telling 3 tales a day\"]\n    \"\"\"\n","raw":"Given a list of strings, where each string consists of a mix of letters and numbers, return a list.\n    Each element of the output should be a fairy tale inspired story. The story should be \"Once upon a time, \n    in a kingdom far away, lived a magical creature with the name of 'i' who was known for telling 'j' tales a day,\n    where 'i' is the i'th string of the input and 'j' is the count of digits in that string.\n\n    >>> string_fairy_tale(['Dragon123', 'Unicorn45'])\n    [\"Once upon a time, in a kingdom far away, lived a magical creature with the name of 'Dragon123' who was known for telling 3 tales a day\", \n     \"Once upon a time, in a kingdom far away, lived a magical creature with the name of 'Unicorn45' who was known for telling 2 tales a day\"]\n\n    >>> string_fairy_tale(['Mermaid7890', 'Elf111'])\n    [\"Once upon a time, in a kingdom far away, lived a magical creature with the name of 'Mermaid7890' who was known for telling 4 tales a day\", \n     \"Once upon a time, in a kingdom far away, lived a magical creature with the name of 'Elf111' who was known for telling 3 tales a day\"]","reduced":"Given a list of strings, each string consists of mix of letters and numbers, return a list. Each element of output should be a fairy tale inspired story story should be \"Once upon time, in a kingdom far away, lived a magical creature name 'i' known for telling 'j' tales a day, 'i' is i'th string of input and 'j' is count of digits in string. >>> string_fairy_tale(['Dragon123', 'Unicorn45']) [\"Once upon time, in kingdom far away, lived a magical creature name 'Dragon123' known for telling 3 tales a day\", \"Once upon time, in kingdom far away, lived magical creature 'Unicorn45' known for telling 2 tales a day\"] >>> string_fairy_tale(['Mermaid7890', 'Elf111']) [\"Once upon time, in kingdom far away, lived magical creature name 'Mermaid7890' known for telling 4 tales a day\", \"Once upon time, in kingdom far away, lived magical creature name 'Elf111' known for telling 3 tales a day\"]"}
{"task_id":"EvoEval\/73","prompt":"def treasure_hunt(grid, bag_capacity):\r\n    import math\r\n    \"\"\"\n    You intrepid treasure hunter in mysterious pyramid. pyramid represented by rectangular grid each row represents different chamber each 1 single treasure chest Each chamber has certain number of treasures you bag limited number of chests at time task is to collect many treasures. Output number of trips to collect all treasures. trip defined as going in or out of pyramid enter is separate trip Example 1: Input: grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bag_capacity : 1 Output: 12 Example 2: Input: grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1] [0,1,1,1]] bag_capacity : 2 Output: 10 Example 3: Input: grid : [[0,0,0], [0,0,0]] bag_capacity : 5 Output: 0 Constraints: * all chambers have same number of chests * grid[i][j] -> 0 | 1\n    \"\"\"\n","raw":"You are an intrepid treasure hunter in a mysterious pyramid. The pyramid is represented by a rectangular grid, \r\n    where each row represents a different chamber and each 1 represents a single treasure chest. \r\n    Each chamber has a certain number of treasures and you have a bag that can carry a limited number of chests at a time. \r\n    Your task is to collect as many treasures as possible. \r\n    Output the number of trips you need to collect all treasures.\r\n    A trip is defined as a going in or out of the pyramid (i.e., enter is a separate trip to exist)\r\n\r\n    Example 1:\r\n        Input: \r\n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\r\n            bag_capacity : 1\r\n        Output: 12\r\n\r\n    Example 2:\r\n        Input: \r\n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\r\n            bag_capacity : 2\r\n        Output: 10\r\n    \r\n    Example 3:\r\n        Input: \r\n            grid : [[0,0,0], [0,0,0]]\r\n            bag_capacity : 5\r\n        Output: 0\r\n\r\n    Constraints:\r\n        * all chambers have the same number of chests\r\n        * grid[i][j] -> 0 | 1","reduced":"You intrepid treasure hunter in mysterious pyramid. pyramid represented by rectangular grid each row represents different chamber each 1 single treasure chest Each chamber has certain number of treasures you bag limited number of chests at time task is to collect many treasures. Output number of trips to collect all treasures. trip defined as going in or out of pyramid enter is separate trip Example 1: Input: grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bag_capacity : 1 Output: 12 Example 2: Input: grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1] [0,1,1,1]] bag_capacity : 2 Output: 10 Example 3: Input: grid : [[0,0,0], [0,0,0]] bag_capacity : 5 Output: 0 Constraints: * all chambers have same number of chests * grid[i][j] -> 0 | 1"}
{"task_id":"EvoEval\/74","prompt":"def cipher_mapping(s, cipher):\n    \"\"\"\n    string 's' mapping dictionary 'cipher' task implement function returns new string each character in 's' replaced by corresponding value in 'cipher' If character 's' exist in 'cipher' leave it as in new string If 's' empty string function return empty string. Examples: cipher_mapping(\"hello world\", {'h':'y', 'e':'u' 'l':'q' 'o':'p' 'w':'j' 'r':'f' 'd':'m'})> 'yuqqp jpfqm' cipher_mapping(\"apple pie\", {'a':'z', 'p':'r' 'l':'m' 'e':'s' 'i':'u'})> 'zrrms rus' cipher_mapping(\"simple test\", {}) ==> 'simple test' cipher_mapping(\"good day\", {'g':'b', 'o':'a' 'd':'t' 'a':'g' 'y':'h'}) ==> 'baat tgh'\n    \"\"\"\n","raw":"Given a string 's' and a mapping dictionary 'cipher', your task is to implement \n    a function that returns a new string where each character in 's' has been replaced \n    by its corresponding value in 'cipher'. \n    If a character in 's' does not exist in 'cipher', leave it as it is in the new string.\n    If 's' is an empty string, the function should return an empty string.\n    \n    Examples:\n    cipher_mapping(\"hello world\", {'h':'y', 'e':'u', 'l':'q', 'o':'p', 'w':'j', 'r':'f', 'd':'m'}) \n    ==> 'yuqqp jpfqm'\n    \n    cipher_mapping(\"apple pie\", {'a':'z', 'p':'r', 'l':'m', 'e':'s', 'i':'u'}) \n    ==> 'zrrms rus'\n    \n    cipher_mapping(\"simple test\", {}) \n    ==> 'simple test'\n    \n    cipher_mapping(\"good day\", {'g':'b', 'o':'a', 'd':'t', 'a':'g', 'y':'h'}) \n    ==> 'baat tgh'","reduced":"string 's' mapping dictionary 'cipher' task implement function returns new string each character in 's' replaced by corresponding value in 'cipher' If character 's' exist in 'cipher' leave it as in new string If 's' empty string function return empty string. Examples: cipher_mapping(\"hello world\", {'h':'y', 'e':'u' 'l':'q' 'o':'p' 'w':'j' 'r':'f' 'd':'m'})> 'yuqqp jpfqm' cipher_mapping(\"apple pie\", {'a':'z', 'p':'r' 'l':'m' 'e':'s' 'i':'u'})> 'zrrms rus' cipher_mapping(\"simple test\", {}) ==> 'simple test' cipher_mapping(\"good day\", {'g':'b', 'o':'a' 'd':'t' 'a':'g' 'y':'h'}) ==> 'baat tgh'"}
{"task_id":"EvoEval\/75","prompt":"def magical_string_transformer(input_str):\n    \"\"\"\n    given string include any printable ASCII character task transform string using rules: 1. Every vowel turned into next vowel in sequence 'aeiou' wrapping around at end (e.g. 'u' becomes 'a'). case-insensitive. 2. Every consonant turned into next consonant in English alphabet not vowel wrapping around at 'z' (e.g. 'd' becomes 'f', 'h' becomes 'j', 'z' becomes 'b'). case-insensitive. 3. Every digit incremented by 1 wrapping around at 9 (e.g. '3' becomes '4', '9' becomes '0'). 4. punctuation mark and special character left as it is. Except \"?\" become \"!\" in even indices vice versa only in odd indices Examples: magical_string_transformer(\"Hello, World!\") => \"Jimmu, Xusmf!\" magical_string_transformer(\"Python 3.8.5\") => \"Qzvjup 4.9.6\" magical_string_transformer(\"AEIOUaeiou\") => \"EIOUAeioua\"\n    \"\"\"\n","raw":"You are given a string, which can include any printable ASCII character.\n    Your task is to transform the string using the following rules:\n\n    1. Every vowel should be turned into the next vowel in the sequence 'aeiou', \n       wrapping around at the end (e.g., 'u' becomes 'a'). This should be case-insensitive.\n\n    2. Every consonant should be turned into the next consonant in the English alphabet that \n       is not a vowel, wrapping around at 'z' (e.g., 'd' becomes 'f', 'h' becomes 'j', 'z' becomes 'b'). \n       This should be case-insensitive.\n\n    3. Every digit should be incremented by 1, wrapping around at 9 (e.g., '3' becomes '4', '9' becomes '0').\n\n    4. Every punctuation mark and special character should be left as it is. Except \"?\" should become \"!\" in even indices and vice versa but only in odd indices\n    \n    Examples:\n    magical_string_transformer(\"Hello, World!\") => \"Jimmu, Xusmf!\"\n    magical_string_transformer(\"Python 3.8.5\") => \"Qzvjup 4.9.6\"\n    magical_string_transformer(\"AEIOUaeiou\") => \"EIOUAeioua\"","reduced":"given string include any printable ASCII character task transform string using rules: 1. Every vowel turned into next vowel in sequence 'aeiou' wrapping around at end (e.g. 'u' becomes 'a'). case-insensitive. 2. Every consonant turned into next consonant in English alphabet not vowel wrapping around at 'z' (e.g. 'd' becomes 'f', 'h' becomes 'j', 'z' becomes 'b'). case-insensitive. 3. Every digit incremented by 1 wrapping around at 9 (e.g. '3' becomes '4', '9' becomes '0'). 4. punctuation mark and special character left as it is. Except \"?\" become \"!\" in even indices vice versa only in odd indices Examples: magical_string_transformer(\"Hello, World!\") => \"Jimmu, Xusmf!\" magical_string_transformer(\"Python 3.8.5\") => \"Qzvjup 4.9.6\" magical_string_transformer(\"AEIOUaeiou\") => \"EIOUAeioua\""}
{"task_id":"EvoEval\/76","prompt":"\"\"\"\n    def create_pyramid(lst): ''' You given list of positive integers. task to create pyramid out of numbers, every level pyramid represented by string of equal length. number of characters in string equals sum of positive integers in corresponding level of pyramid. pyramid should be built from bottom up.e first element of list should form bottom level of pyramid. Return pyramid as list of strings. If list of integers empty, return empty list. Note: Use character '#' to represent numbers. Examples: create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####'] create_pyramid([]) == [] '''\n    \"\"\"\n","raw":"def create_pyramid(lst):\n    '''\n    You are given a list of positive integers. \n    Your task is to create a pyramid out of the numbers, where every level of the pyramid \n    is represented by a string of equal length. The number of characters in a string equals \n    the sum of the positive integers in the corresponding level of the pyramid.\n    The pyramid should be built from the bottom up, i.e. the first element of the list \n    should form the bottom level of the pyramid.\n    Return the pyramid as a list of strings. If the list of integers is empty, return an \n    empty list.\n\n    Note: Use the character '#' to represent the numbers.\n\n    Examples:\n    create_pyramid([3, 2, 1]) == ['#', '##', '###']\n    create_pyramid([5, 4, 2]) == ['##', '####', '#####']\n    create_pyramid([]) == []\n    '''","reduced":"def create_pyramid(lst): ''' You given list of positive integers. task to create pyramid out of numbers, every level pyramid represented by string of equal length. number of characters in string equals sum of positive integers in corresponding level of pyramid. pyramid should be built from bottom up.e first element of list should form bottom level of pyramid. Return pyramid as list of strings. If list of integers empty, return empty list. Note: Use character '#' to represent numbers. Examples: create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####'] create_pyramid([]) == [] '''"}
{"task_id":"EvoEval\/77","prompt":"def magical_sequence(sequence, k):\n    \"\"\"\n    Imagine magical sequence each number associated with certain number points points each number equivalent to number times divided by k until reaches 1. given sequence of positive integers positive integer k return list sorted decreasing order of total points each number achieve. Example 1: Input: sequence = [8, 5, 3], k = 2 Output: [3, 0, 0] Example 2: Input: sequence = [25, 10, 5], k = 5 Output: [2, 1, 1] Example 3: Input: sequence = [12, 8, 6, 4], k = 2 Output: [3, 2, 2, 1]\n    \"\"\"\n","raw":"Imagine a magical sequence where each number is associated with a certain number of points. \n    The points for each number are equivalent to the number of times the number can be divided by k until it reaches 1. \n    Now, given a sequence of positive integers and a positive integer k, \n    return a list sorted in decreasing order of the total points each number in the sequence can achieve.\n\n    Example 1:\n\n        Input: sequence = [8, 5, 3], k = 2\n        Output: [3, 0, 0]\n\n    Example 2:\n\n        Input: sequence = [25, 10, 5], k = 5\n        Output: [2, 1, 1]\n\n    Example 3:\n\n        Input: sequence = [12, 8, 6, 4], k = 2\n        Output: [3, 2, 2, 1]","reduced":"Imagine magical sequence each number associated with certain number points points each number equivalent to number times divided by k until reaches 1. given sequence of positive integers positive integer k return list sorted decreasing order of total points each number achieve. Example 1: Input: sequence = [8, 5, 3], k = 2 Output: [3, 0, 0] Example 2: Input: sequence = [25, 10, 5], k = 5 Output: [2, 1, 1] Example 3: Input: sequence = [12, 8, 6, 4], k = 2 Output: [3, 2, 2, 1]"}
{"task_id":"EvoEval\/78","prompt":"def find_pattern(mat):\n    \"\"\"\n    2D matrix integers return list elements \"X\" pattern starts top left corner (0, 0) ends bottom right corner (n, top right corner (0, n) ends bottom left corner (n, 0). matrix square dimension odd number Examples find_pattern([[1, 2, 3] [4, 5, 6] [7, 8, 9]] [1, 5 9 3 5 7]_pattern([[11, 12, 13, 14 15 [16, 17, 18, 19, 20 [21, 22, 23, 24, 25] [26, 27, 28, 29, 30] [31, 32, 33, 34, 35]] [11, 17, 23, 29, 35, 15, 19, 23, 27, 31] find_pattern([[10, 20, 30, 40, 50, 60, 70] [80, 90, 100, 110, 120, 130, 140] [150, 160, 170, 180, 190, 200, 210 [220, 230, 240, 250, 260, 270, 280 [290, 300, 310, 320, 330, 340, 350 [360, 370, 380, 390, 400, 410, 420] [430, 440, 450, 460, 470, 480, [10, 90, 170, 250, 330, 410, 490, 70, 130, 190, 250, 310, 370, 430]\n    \"\"\"\n","raw":"Given a 2D matrix of integers, return a list of all elements that form an \"X\" pattern. \n    The \"X\" pattern starts from the top left corner (0, 0) and ends at the bottom right corner (n, n), \n    and starts from the top right corner (0, n) and ends at the bottom left corner (n, 0).\n\n    Note: The matrix is square and the dimension is an odd number.\n\n    Examples\n    find_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ==> [1, 5, 9, 3, 5, 7]\n    find_pattern([[11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30], [31, 32, 33, 34, 35]]) ==>\n    [11, 17, 23, 29, 35, 15, 19, 23, 27, 31]\n    find_pattern([[10, 20, 30, 40, 50, 60, 70], [80, 90, 100, 110, 120, 130, 140], [150, 160, 170, 180, 190, 200, 210], [220, 230, 240, 250, 260, 270, 280], \n    [290, 300, 310, 320, 330, 340, 350], [360, 370, 380, 390, 400, 410, 420], [430, 440, 450, 460, 470, 480, 490]]) ==>\n    [10, 90, 170, 250, 330, 410, 490, 70, 130, 190, 250, 310, 370, 430]","reduced":"2D matrix integers return list elements \"X\" pattern starts top left corner (0, 0) ends bottom right corner (n, top right corner (0, n) ends bottom left corner (n, 0). matrix square dimension odd number Examples find_pattern([[1, 2, 3] [4, 5, 6] [7, 8, 9]] [1, 5 9 3 5 7]_pattern([[11, 12, 13, 14 15 [16, 17, 18, 19, 20 [21, 22, 23, 24, 25] [26, 27, 28, 29, 30] [31, 32, 33, 34, 35]] [11, 17, 23, 29, 35, 15, 19, 23, 27, 31] find_pattern([[10, 20, 30, 40, 50, 60, 70] [80, 90, 100, 110, 120, 130, 140] [150, 160, 170, 180, 190, 200, 210 [220, 230, 240, 250, 260, 270, 280 [290, 300, 310, 320, 330, 340, 350 [360, 370, 380, 390, 400, 410, 420] [430, 440, 450, 460, 470, 480, [10, 90, 170, 250, 330, 410, 490, 70, 130, 190, 250, 310, 370, 430]"}
{"task_id":"EvoEval\/79","prompt":"def find_fruitful_days(prices, days):\r\n    \"\"\"\n    Given list of prices of certain fruit and number of days vendor stayed in market, find maximum profit could be made by vendor if he buy and sell fruit only once during his stay vendor has ability to know prices of fruit in future. wants to buy fruit on one day and sell another day after day he bought fruit. If he cannot make profit, return 0. Args: prices (list): list of integers representing prices of fruit for each day. days (int): latest of day vendor can buy fruits. Returns: int: maximum profit could be made by vendor. Example: Input: prices = [1, 5, 2, 8, 7, 3], days = 5 Output: 7 # vendor buys fruit first day at price 1 and sells fourth day at price 8. Constraints: 1. 1 <= len(prices) <= 100 2. 1 <= days <= len(prices)\n    \"\"\"\n","raw":"Given a list of prices of a certain fruit and the number of days a vendor has stayed in the market, \r\n    find the maximum profit that could be made by the vendor if he could buy and sell the fruit only once during his stay.\r\n\r\n    The vendor has the ability to know the prices of the fruit in the future. \r\n    He wants to buy the fruit on one day and sell it on another day that comes after the day he bought the fruit.\r\n    If he cannot make any profit, return 0.\r\n\r\n    Args:\r\n        prices (list): A list of integers representing the prices of the fruit for each day.\r\n        days (int): The latest of day the vendor can buy fruits.\r\n\r\n    Returns:\r\n        int: The maximum profit that could be made by the vendor.\r\n\r\n    Example:\r\n\r\n        Input: prices = [1, 5, 2, 8, 7, 3], days = 5\r\n        Output: 7 # The vendor buys the fruit on the first day at price 1 and sells it on the fourth day at price 8.\r\n\r\n    Constraints:\r\n        1. 1 <= len(prices) <= 100\r\n        2. 1 <= days <= len(prices)","reduced":"Given list of prices of certain fruit and number of days vendor stayed in market, find maximum profit could be made by vendor if he buy and sell fruit only once during his stay vendor has ability to know prices of fruit in future. wants to buy fruit on one day and sell another day after day he bought fruit. If he cannot make profit, return 0. Args: prices (list): list of integers representing prices of fruit for each day. days (int): latest of day vendor can buy fruits. Returns: int: maximum profit could be made by vendor. Example: Input: prices = [1, 5, 2, 8, 7, 3], days = 5 Output: 7 # vendor buys fruit first day at price 1 and sells fourth day at price 8. Constraints: 1. 1 <= len(prices) <= 100 2. 1 <= days <= len(prices)"}
{"task_id":"EvoEval\/80","prompt":"\"\"\"\n    def adventure_game(map, instructions): building text-based adventure game. game map is 2D list 'S' represents start 'E' end '.' path 'X' wall player can move in four directions: up, down left right. Given game map list of instructions return path player takes If player moves into wall or edge map stay in current position. If player finds end 'E', game won no further instructions processed. If list instructions ends before player finds 'E' return player's path. player's path returned as list of tuples each tuple represents player's position (row, column) after each move. If player never moves from start 'S', return [(start_row, start_column)]. Examples: adventure_game([ ['S', '.', '.'], ['X', 'X', '.'] [. 'X', 'E'] ], ['right', 'right', 'down', 'down', 'right']) [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)] adventure_game([ ['.', '.', 'S'], ['.', 'X', 'X'], ['E', 'X', '.'] ], ['left', 'left', 'up']) [(0, 2), (0, 1), (0, 0), (0, 0)] adventure_game([ ['S', 'X', 'E'] ], ['right', 'right']) \u279e [(0, 0)] '''\n    \"\"\"\n","raw":"def adventure_game(map, instructions):\n    '''\n    You are building a text-based adventure game. The game map is a 2D list, where 'S' represents the start, 'E' represents the end, \n    '.' represents a path, and 'X' represents a wall. A player can move in four directions: up, down, left, right. \n\n    Given a game map and a list of instructions, return the path the player takes. If the player moves into a wall or the edge of \n    the map, they should stay in their current position. If the player finds the end 'E', the game is won and no further instructions \n    are processed. If the list of instructions ends before the player finds 'E', return the player's path so far.\n\n    The player's path should be returned as a list of tuples, where each tuple represents the player's position (row, column) after\n    each move.\n\n    If the player never moves from the start 'S', return [(start_row, start_column)].\n\n    Examples:\n    adventure_game([\n        ['S', '.', '.'],\n        ['X', 'X', '.'],\n        ['.', 'X', 'E']\n    ], ['right', 'right', 'down', 'down', 'right']) \u279e [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)]\n\n    adventure_game([\n        ['.', '.', 'S'],\n        ['.', 'X', 'X'],\n        ['E', 'X', '.']\n    ], ['left', 'left', 'up']) \u279e [(0, 2), (0, 1), (0, 0), (0, 0)]\n\n    adventure_game([\n        ['S', 'X', 'E']\n    ], ['right', 'right']) \u279e [(0, 0)]\n    '''","reduced":"def adventure_game(map, instructions): building text-based adventure game. game map is 2D list 'S' represents start 'E' end '.' path 'X' wall player can move in four directions: up, down left right. Given game map list of instructions return path player takes If player moves into wall or edge map stay in current position. If player finds end 'E', game won no further instructions processed. If list instructions ends before player finds 'E' return player's path. player's path returned as list of tuples each tuple represents player's position (row, column) after each move. If player never moves from start 'S', return [(start_row, start_column)]. Examples: adventure_game([ ['S', '.', '.'], ['X', 'X', '.'] [. 'X', 'E'] ], ['right', 'right', 'down', 'down', 'right']) [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2)] adventure_game([ ['.', '.', 'S'], ['.', 'X', 'X'], ['E', 'X', '.'] ], ['left', 'left', 'up']) [(0, 2), (0, 1), (0, 0), (0, 0)] adventure_game([ ['S', 'X', 'E'] ], ['right', 'right']) \u279e [(0, 0)] '''"}
{"task_id":"EvoEval\/81","prompt":"def alien_language(word_list, alien_dictionary):\n    \"\"\"\n    alien civilization has own dictionary order alphabet letters. dictionary is string of lowercase letters from 'a' to 'z' not necessarily in English alphabetic order. For example alien dictionary may be 'hijklmnopqrstuvwxyzabcdefg'. A word in alien language is sequence of characters. You given sorted list of words according to alien dictionary's order) alien dictionary. task to verify if list words sorted correctly in ascending order. If yes return \"CORRECT\", otherwise return \"INCORRECT\". If word list empty, return \"CORRECT\". [input\/output] samples: alien_language(['cat', 'dog', 'elephant'], 'abcdefghijklmnopqrstuvwxyz') => \"CORRECT\" alien_language(['apple', 'banana', 'kiwi'], 'zyxwvutsrqponmlkjihgfedcba') => \"INCORRECT\" alien_language(['bee', 'ant', 'cat', 'dog'], 'bacdefghijklmnopqrstuvwxyz') => \"CORRECT\" alien_language([], 'bacdefghijklmnopqrstuvwxyz') => \"CORRECT\"\n    \"\"\"\n","raw":"An alien civilization has its own dictionary to define the order of their alphabet letters.\n    This dictionary is a string of all lowercase letters from 'a' to 'z' but not \n    necessarily in the English alphabetic order. For example, the alien dictionary may be 'hijklmnopqrstuvwxyzabcdefg'.\n    A word in this alien language is a sequence of characters. \n    You are given a sorted list of words (sorted according to the alien dictionary's order)\n    and the alien dictionary itself.\n    Your task is to verify if the given list of words is sorted correctly in ascending order according to the alien dictionary.\n    If yes, then return \"CORRECT\", otherwise return \"INCORRECT\".\n    If the word list is empty, return \"CORRECT\".\n\n    [input\/output] samples:\n    alien_language(['cat', 'dog', 'elephant'], 'abcdefghijklmnopqrstuvwxyz') => \"CORRECT\"\n    alien_language(['apple', 'banana', 'kiwi'], 'zyxwvutsrqponmlkjihgfedcba') => \"INCORRECT\"\n    alien_language(['bee', 'ant', 'cat', 'dog'], 'bacdefghijklmnopqrstuvwxyz') => \"CORRECT\"\n    alien_language([], 'bacdefghijklmnopqrstuvwxyz') => \"CORRECT\"","reduced":"alien civilization has own dictionary order alphabet letters. dictionary is string of lowercase letters from 'a' to 'z' not necessarily in English alphabetic order. For example alien dictionary may be 'hijklmnopqrstuvwxyzabcdefg'. A word in alien language is sequence of characters. You given sorted list of words according to alien dictionary's order) alien dictionary. task to verify if list words sorted correctly in ascending order. If yes return \"CORRECT\", otherwise return \"INCORRECT\". If word list empty, return \"CORRECT\". [input\/output] samples: alien_language(['cat', 'dog', 'elephant'], 'abcdefghijklmnopqrstuvwxyz') => \"CORRECT\" alien_language(['apple', 'banana', 'kiwi'], 'zyxwvutsrqponmlkjihgfedcba') => \"INCORRECT\" alien_language(['bee', 'ant', 'cat', 'dog'], 'bacdefghijklmnopqrstuvwxyz') => \"CORRECT\" alien_language([], 'bacdefghijklmnopqrstuvwxyz') => \"CORRECT\""}
{"task_id":"EvoEval\/82","prompt":"def zodiac_element(birthdays):\n    \"\"\"\n    given list of dates format YYYY-MM-DD represent birthdays Each birthday corresponds to zodiac sign associated with four elements Fire Water Air Earth task return dictionary with elements keys number birthdays zodiac signs values If no birthdays under element include element in returned dictionary. Zodiac Sign Dates Element Aries March 21 \u2013 April 19 Fire Taurus April 20 \u2013 May 20 Earth Gemini May 21 \u2013 June 20 Air Cancer June 21 \u2013 July 22 Water Leo July 23 \u2013 August 22 Fire Virgo August 23 \u2013 Sept 22 Earth Libra Sept 23 \u2013 October 22 Air Scorpio Oct 23 \u2013 November 21 Water Sagittarius Nov 22 \u2013 Dec 21 Fire Capricorn Dec 22 \u2013 Jan 19 Earth Aquarius Jan 20 \u2013 Feb 18 Air Pisces Feb 19 \u2013 March 20 Water Return None if birthdays list empty. Example >>> zodiac_element([\"2000-03-21\", \"2001-05-21\", \"2002-08-23\", \"2003-02-19\"]) {'Fire' 1 'Air': 1 'Earth': 1 'Water': 1} >>> zodiac_element([\"2000-06-21\", \"2001-07-23\"]) == {'Water': 1 'Fire': 1} >>> zodiac_element([]) == None\n    \"\"\"\n","raw":"You are given a list of dates in the format YYYY-MM-DD, which represent birthdays. \n    Each birthday corresponds to a zodiac sign and each zodiac sign is associated with one \n    of the four elements: Fire, Water, Air, and Earth.\n\n    Your task is to return a dictionary with the elements as keys and the number of birthdays \n    corresponding to zodiac signs associated with each element as values. If there are no \n    birthdays under a given element, do not include that element in the returned dictionary.\n\n    Zodiac Sign    Dates              Element\n    Aries          March 21 \u2013 April 19    Fire\n    Taurus         April 20 \u2013 May 20     Earth\n    Gemini         May 21 \u2013 June 20       Air\n    Cancer         June 21 \u2013 July 22     Water\n    Leo            July 23 \u2013 August 22    Fire\n    Virgo          August 23 \u2013 Sept 22   Earth\n    Libra          Sept 23 \u2013 October 22   Air\n    Scorpio        Oct 23 \u2013 November 21  Water\n    Sagittarius    Nov 22 \u2013 Dec 21        Fire\n    Capricorn      Dec 22 \u2013 Jan 19       Earth\n    Aquarius       Jan 20 \u2013 Feb 18        Air\n    Pisces         Feb 19 \u2013 March 20     Water\n\n    Note: Return None if the birthdays list is empty.\n\n    Example:\n    >>> zodiac_element([\"2000-03-21\", \"2001-05-21\", \"2002-08-23\", \"2003-02-19\"]) == {'Fire': 1, 'Air': 1, 'Earth': 1, 'Water': 1}\n    >>> zodiac_element([\"2000-06-21\", \"2001-07-23\"]) == {'Water': 1, 'Fire': 1}\n    >>> zodiac_element([]) == None","reduced":"given list of dates format YYYY-MM-DD represent birthdays Each birthday corresponds to zodiac sign associated with four elements Fire Water Air Earth task return dictionary with elements keys number birthdays zodiac signs values If no birthdays under element include element in returned dictionary. Zodiac Sign Dates Element Aries March 21 \u2013 April 19 Fire Taurus April 20 \u2013 May 20 Earth Gemini May 21 \u2013 June 20 Air Cancer June 21 \u2013 July 22 Water Leo July 23 \u2013 August 22 Fire Virgo August 23 \u2013 Sept 22 Earth Libra Sept 23 \u2013 October 22 Air Scorpio Oct 23 \u2013 November 21 Water Sagittarius Nov 22 \u2013 Dec 21 Fire Capricorn Dec 22 \u2013 Jan 19 Earth Aquarius Jan 20 \u2013 Feb 18 Air Pisces Feb 19 \u2013 March 20 Water Return None if birthdays list empty. Example >>> zodiac_element([\"2000-03-21\", \"2001-05-21\", \"2002-08-23\", \"2003-02-19\"]) {'Fire' 1 'Air': 1 'Earth': 1 'Water': 1} >>> zodiac_element([\"2000-06-21\", \"2001-07-23\"]) == {'Water': 1 'Fire': 1} >>> zodiac_element([]) == None"}
{"task_id":"EvoEval\/83","prompt":"def reverse_vowels(s):\n    \"\"\"\n    Given string s return new string with vowels reverse order keeping position other characters unchanged. string can contain uppercase and lowercase letters. example: reverse_vowels('Hello') == 'Holle'_vowels('Python') == 'Python'_vowels('algorithm') == 'ilgorathm'\n    \"\"\"\n","raw":"Given a string s, return a new string with the vowels in reverse order, while keeping the position of other characters unchanged.\n    The string can contain uppercase and lowercase letters.\n    For example:\n    reverse_vowels('Hello') == 'Holle'\n    reverse_vowels('Python') == 'Python'\n    reverse_vowels('algorithm') == 'ilgorathm'","reduced":"Given string s return new string with vowels reverse order keeping position other characters unchanged. string can contain uppercase and lowercase letters. example: reverse_vowels('Hello') == 'Holle'_vowels('Python') == 'Python'_vowels('algorithm') == 'ilgorathm'"}
{"task_id":"EvoEval\/84","prompt":"\"\"\"\n    def tree_traversal(tree): ''' In land filled with magical trees spell cast shuffled tree trunks, branches leaves. task to create function takes binary tree as input returns list of possible paths from root to leaves. tree represented as nested dictionary. keys represent node values values represent left and right branches as sub-dictionaries. function should return possible paths in format list of lists. Each sublist represent path from root to leaf containing all node values path. Example: tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}} assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]] tree = {1: {2: {4: {7: {}}, 5: {8: {}}}, 3: {6: {}}}} assert tree_traversal(tree) == [[1, 2, 4, 7], [1, 2, 5, 8], [1, 3, 6]] Note: - binary tree always at least one node (the root). values of nodes are always single digit numbers. output paths sorted according to depth first search traversal.\n    \"\"\"\n","raw":"def tree_traversal(tree):\n    '''\n    In a land filled with magical trees, a spell has been cast which has shuffled all the tree trunks, branches, and leaves. \n    Your task is to create a function that takes a binary tree as input and returns the list of all possible paths from root to leaves.\n    The tree is represented as a nested dictionary. The keys represent the node values, and the values represent the left and right branches as sub-dictionaries.\n\n    The function should return all the possible paths in the format of a list of lists. Each sublist should represent a path from root to a leaf, containing all the node values along the path.\n\n    Example:\n\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n\n    assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]\n\n    tree = {1: {2: {4: {7: {}}, 5: {8: {}}}, 3: {6: {}}}}\n\n    assert tree_traversal(tree) == [[1, 2, 4, 7], [1, 2, 5, 8], [1, 3, 6]]\n\n    Note:\n    - The binary tree will always have at least one node (the root).\n    - The values of the nodes are always single digit numbers.\n    - The output paths should be sorted according to depth first search traversal.\n    '''","reduced":"def tree_traversal(tree): ''' In land filled with magical trees spell cast shuffled tree trunks, branches leaves. task to create function takes binary tree as input returns list of possible paths from root to leaves. tree represented as nested dictionary. keys represent node values values represent left and right branches as sub-dictionaries. function should return possible paths in format list of lists. Each sublist represent path from root to leaf containing all node values path. Example: tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}} assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]] tree = {1: {2: {4: {7: {}}, 5: {8: {}}}, 3: {6: {}}}} assert tree_traversal(tree) == [[1, 2, 4, 7], [1, 2, 5, 8], [1, 3, 6]] Note: - binary tree always at least one node (the root). values of nodes are always single digit numbers. output paths sorted according to depth first search traversal."}
{"task_id":"EvoEval\/85","prompt":"def princess_rescue(coord, grid):\n    \"\"\"\n    A princess trapped in a 2D grid filled with monsters. You are brave warrior saving princess. starting point at top-left corner of grid need to reach princess at certain coordinate., monsters in some parts grid. You can move to right or down. to find minimum number of moves to reach princess without encountering monster. If impossible to reach without monster, return -1. grid represented as a 2D list. Each element is either 0 or 1. 0 represents open space move 1 represents a monster. princess's coordinate represented as a tuple (row, column). Examples: For coord = (2,2) and grid = [[0,0,0],[0,1,0],[0,0,0]], output should be 4. For coord = (3,3) and grid = [[0,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0]], output should be 6. For coord = (3,3) and grid = [[0,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], output be -1. For coord = (1,1) and grid = [[0,0],[1,0]], output should be 2. For coord = (2,2) and grid = [[0,1,0],[0,1,0],[0,0,0]], output should be 4.\n    \"\"\"\n","raw":"A princess is trapped in a 2D grid filled with monsters. You are a brave warrior tasked with saving the princess.\n    Your starting point is at the top-left corner of the grid and you need to reach the princess who is at a certain coordinate in the grid.\n    However, there are monsters in some parts of the grid. You can move either to the right or down.\n    You need to find out the minimum number of moves to reach the princess without encountering a monster. \n    If it's impossible to reach the princess without encountering a monster, return -1.\n    \n    The grid is represented as a 2D list. Each element in the list is either 0 or 1. \n    0 represents an open space where you can move, and 1 represents a monster. \n    The princess's coordinate is represented as a tuple (row, column).\n    \n    Examples:\n    \n    For coord = (2,2) and grid = [[0,0,0],[0,1,0],[0,0,0]], the output should be 4.\n    For coord = (3,3) and grid = [[0,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0]], the output should be 6.\n    For coord = (3,3) and grid = [[0,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], the output should be -1.\n    For coord = (1,1) and grid = [[0,0],[1,0]], the output should be 2.\n    For coord = (2,2) and grid = [[0,1,0],[0,1,0],[0,0,0]], the output should be 4.","reduced":"A princess trapped in a 2D grid filled with monsters. You are brave warrior saving princess. starting point at top-left corner of grid need to reach princess at certain coordinate., monsters in some parts grid. You can move to right or down. to find minimum number of moves to reach princess without encountering monster. If impossible to reach without monster, return -1. grid represented as a 2D list. Each element is either 0 or 1. 0 represents open space move 1 represents a monster. princess's coordinate represented as a tuple (row, column). Examples: For coord = (2,2) and grid = [[0,0,0],[0,1,0],[0,0,0]], output should be 4. For coord = (3,3) and grid = [[0,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,0]], output should be 6. For coord = (3,3) and grid = [[0,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], output be -1. For coord = (1,1) and grid = [[0,0],[1,0]], output should be 2. For coord = (2,2) and grid = [[0,1,0],[0,1,0],[0,0,0]], output should be 4."}
{"task_id":"EvoEval\/86","prompt":"\"\"\"\n    sort_movies_by_ratings_and_release_date(movies_dict): Every movie lover has favorite genre watch movies based on ratings release year. dictionary each key-value pair represents movie develop function sorts movies according to ratings (from high to low if ratings same sort according to release year (from new to old). function return sorted list of movie names. dictionary format: { \"movie_name\": [rating, release_year] } Ratings 1 to 10 release years four digit numbers. Examples: movies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]} sort_movies_by_ratings_and_release_date(movies_dict) [\"The Dark Knight\", \"Inception\", \"Interstellar\", \"The Dark Knight Rises\"] movies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999], \"Toy Story 3\": [8.3, 2010] \"Toy Story 4\": [7.8, 2019]} sort_movies_by_ratings_and_release_date(movies_dict) [\"Toy Story 3\", 2\", 4\"]\n    \"\"\"\n","raw":"def sort_movies_by_ratings_and_release_date(movies_dict):\n    '''\n    Every movie lover has a favorite genre and likes to watch movies based on their ratings and release year. \n    Given a dictionary where each key-value pair represents a movie, develop a function that sorts these movies \n    according to ratings (from high to low) and if the ratings are same, then sort according to the release year \n    (from new to old). The function should return the sorted list of movie names.\n\n    The dictionary has the following format:\n    { \"movie_name\": [rating, release_year] }\n\n    Ratings are from 1 to 10, and release years are four digit numbers.\n\n    Examples:\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \n                   \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]}\n    sort_movies_by_ratings_and_release_date(movies_dict) \u279e [\"The Dark Knight\", \"Inception\", \"Interstellar\",\n                                                             \"The Dark Knight Rises\"]\n    \n    movies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999], \n                   \"Toy Story 3\": [8.3, 2010], \"Toy Story 4\": [7.8, 2019]}\n    sort_movies_by_ratings_and_release_date(movies_dict) \u279e [\"Toy Story 3\", \"Toy Story\", \n                                                             \"Toy Story 2\", \"Toy Story 4\"]\n    '''","reduced":"sort_movies_by_ratings_and_release_date(movies_dict): Every movie lover has favorite genre watch movies based on ratings release year. dictionary each key-value pair represents movie develop function sorts movies according to ratings (from high to low if ratings same sort according to release year (from new to old). function return sorted list of movie names. dictionary format: { \"movie_name\": [rating, release_year] } Ratings 1 to 10 release years four digit numbers. Examples: movies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]} sort_movies_by_ratings_and_release_date(movies_dict) [\"The Dark Knight\", \"Inception\", \"Interstellar\", \"The Dark Knight Rises\"] movies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999], \"Toy Story 3\": [8.3, 2010] \"Toy Story 4\": [7.8, 2019]} sort_movies_by_ratings_and_release_date(movies_dict) [\"Toy Story 3\", 2\", 4\"]"}
{"task_id":"EvoEval\/87","prompt":"def word_spiral(arr):\n    \"\"\"\n    Create function takes 2D array characters returns string represents words array read clockwise spiral starting top left corner If array empty return empty string. Examples assert word_spiral([['h','i','!'],['b','y','e']]) == 'hi!eyb' assert word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]) == 'lovena!!!ritisieh' assert word_spiral([]) == ''\n    \"\"\"\n","raw":"Create a function which takes in a 2D array of characters and returns a \n    string which represents the words in the array read in a clockwise spiral starting\n    from the top left corner. If the array is empty, return an empty string. \n\n    Examples:\n    assert word_spiral([['h','i','!'],['b','y','e']]) == 'hi!eyb'\n    assert word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]) == 'lovena!!!ritisieh'\n    assert word_spiral([]) == ''","reduced":"Create function takes 2D array characters returns string represents words array read clockwise spiral starting top left corner If array empty return empty string. Examples assert word_spiral([['h','i','!'],['b','y','e']]) == 'hi!eyb' assert word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]) == 'lovena!!!ritisieh' assert word_spiral([]) == ''"}
{"task_id":"EvoEval\/88","prompt":"\"\"\"\n    def planet_population(dict_of_planets): ''' given dictionary each key represents planet value is list of population features Each list contains two elements: [\"Population\", \"Size\"]. \"Population\" positive integer representing number of inhabitants \"Size\" positive integer planet's size in square kilometers. task to create function returns new dictionary each planet paired with population density (population\/size). If planet's size or population not provided ignore planet. If dictionary empty or no planet complete data, return empty dictionary. population density rounded to two decimal places. Examples: planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}) == {'Earth': 466.67, 'Mars': 0.0} planet_population({}) == {} planet_population({\"Jupiter\": [None, 64000000]}) == {} planet_population({\"Venus\": [500000000, None]}) == {} '''\n    \"\"\"\n","raw":"def planet_population(dict_of_planets):\n    '''\n    You are given a dictionary where each key represents a planet\n    and its value is a list of population features.\n    Each list contains two elements: [\"Population\", \"Size\"].\n    The \"Population\" is a positive integer representing the number of inhabitants,\n    and \"Size\" is a positive integer representing the planet's size in square kilometers.\n\n    Your task is to create a function that returns a new dictionary,\n    where each planet is paired with its population density (population\/size).\n    If a planet's size or population is not provided, ignore that planet.\n\n    If the dictionary is empty or no planet has complete data, return an empty dictionary.\n\n    The population density should be rounded to two decimal places.\n\n    Examples:\n    planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}) == {'Earth': 466.67, 'Mars': 0.0}\n    planet_population({}) == {}\n    planet_population({\"Jupiter\": [None, 64000000]}) == {}\n    planet_population({\"Venus\": [500000000, None]}) == {} \n    '''","reduced":"def planet_population(dict_of_planets): ''' given dictionary each key represents planet value is list of population features Each list contains two elements: [\"Population\", \"Size\"]. \"Population\" positive integer representing number of inhabitants \"Size\" positive integer planet's size in square kilometers. task to create function returns new dictionary each planet paired with population density (population\/size). If planet's size or population not provided ignore planet. If dictionary empty or no planet complete data, return empty dictionary. population density rounded to two decimal places. Examples: planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}) == {'Earth': 466.67, 'Mars': 0.0} planet_population({}) == {} planet_population({\"Jupiter\": [None, 64000000]}) == {} planet_population({\"Venus\": [500000000, None]}) == {} '''"}
{"task_id":"EvoEval\/89","prompt":"def space_invaders(aliens, ray):\n    \"\"\"\n    space invader game designed. n aliens represented by array each alien at certain position. You given ray gun can destroy an alien at a position in one shot. ray gun can also destroy all aliens in positions adjacent to. space_invaders function takes two parameters: array of integers each integer represents alien's position and integer representing position to aim ray gun. function should return array of remaining aliens' positions after ray gun fired. Assume position of aliens and ray are always positive integers. ray gun destroys alien at aimed position as alien in adjacent positions. ray gun not destroy aliens in odd positions unless directly aimed at Examples: assert space_invaders([1, 2, 3, 4, 5], 3) == [1, 5] assert space_invaders([1, 2, 4, 5, 6], 4) == [1, 2, 5, 6] assert space_invaders([2, 3, 5, 6, 7, 9, 10], 6) == [2, 3, 5, 7, 9, 10] assert space_invaders([1, 2, 3, 5, 6, 7], 1) == [3, 5, 6, 7]\n    \"\"\"\n","raw":"A space invader game is being designed. There are n aliens represented by an array where each alien is at a certain position. \n    You are given a ray gun that can destroy an alien at a position in one shot. But the ray gun can also destroy all \n    the aliens in the positions adjacent to it. \n\n    The space_invaders function takes two parameters: an array of integers where each integer represents an alien's position \n    and an integer representing the position to aim the ray gun.\n\n    The function should return an array of the remaining aliens' positions after the ray gun has been fired. \n\n    Assume that the position of aliens and the ray are always positive integers. \n\n    Remember: The ray gun destroys the alien at its aimed position as well as any alien in the adjacent positions. \n    The ray gun does not destroy any aliens that live in odd positions unless they are directly aimed at\n\n    Examples:\n\n    assert space_invaders([1, 2, 3, 4, 5], 3) == [1, 5]\n    assert space_invaders([1, 2, 4, 5, 6], 4) == [1, 2, 5, 6]\n    assert space_invaders([2, 3, 5, 6, 7, 9, 10], 6) == [2, 3, 5, 7, 9, 10]\n    assert space_invaders([1, 2, 3, 5, 6, 7], 1) == [3, 5, 6, 7]","reduced":"space invader game designed. n aliens represented by array each alien at certain position. You given ray gun can destroy an alien at a position in one shot. ray gun can also destroy all aliens in positions adjacent to. space_invaders function takes two parameters: array of integers each integer represents alien's position and integer representing position to aim ray gun. function should return array of remaining aliens' positions after ray gun fired. Assume position of aliens and ray are always positive integers. ray gun destroys alien at aimed position as alien in adjacent positions. ray gun not destroy aliens in odd positions unless directly aimed at Examples: assert space_invaders([1, 2, 3, 4, 5], 3) == [1, 5] assert space_invaders([1, 2, 4, 5, 6], 4) == [1, 2, 5, 6] assert space_invaders([2, 3, 5, 6, 7, 9, 10], 6) == [2, 3, 5, 7, 9, 10] assert space_invaders([1, 2, 3, 5, 6, 7], 1) == [3, 5, 6, 7]"}
{"task_id":"EvoEval\/90","prompt":"def magical_multiply(s1, s2):\n    \"\"\"\n    In mystical land of Pyth numbers behave differently Here when two numbers multiplied, result given by sum of all possible unique combinations of digits For example, if two numbers 24 and 13 multiplied, result sum of all unique combinations of digits (2, 4) and (1, 3). combinations be (2, 1), (2, 3), (4, 1) and (4, 3) sums 3, 5, 5 and 7, result of multiplication 3 + 5 + 5 + 7 = 20. function magical_multiply(s) take in two positive integers as input (in string format) return product according to laws of land of Pyth. For example: >>> magical_multiply('24', '13') 20 >>> magical_multiply('56', '79') 54\n    \"\"\"\n","raw":"In the mystical land of Pyth, numbers behave quite differently. Here, when two numbers are multiplied, the result is given by the sum of all possible unique combinations of their digits. \n\n    For example, if two numbers 24 and 13 are multiplied, the result would be the sum of all unique combinations of digits (2, 4) and (1, 3). The combinations would be (2, 1), (2, 3), (4, 1) and (4, 3) and their sums would be 3, 5, 5 and 7, and hence the result of the multiplication would be 3 + 5 + 5 + 7 = 20.\n\n    The function magical_multiply(s) would take in two positive integers as input (in string format) and should return their product according to the laws of the land of Pyth.\n\n    For example:\n    >>> magical_multiply('24', '13')\n    20\n    >>> magical_multiply('56', '79')\n    54","reduced":"In mystical land of Pyth numbers behave differently Here when two numbers multiplied, result given by sum of all possible unique combinations of digits For example, if two numbers 24 and 13 multiplied, result sum of all unique combinations of digits (2, 4) and (1, 3). combinations be (2, 1), (2, 3), (4, 1) and (4, 3) sums 3, 5, 5 and 7, result of multiplication 3 + 5 + 5 + 7 = 20. function magical_multiply(s) take in two positive integers as input (in string format) return product according to laws of land of Pyth. For example: >>> magical_multiply('24', '13') 20 >>> magical_multiply('56', '79') 54"}
{"task_id":"EvoEval\/91","prompt":"def spaceship_trajectory(spaceship_data):\n    \"\"\"\n    Create a function takes list of tuples representing spaceship's flight data returns string indicating spaceship's final status. Each tuple in list represents a single action first element is string indicating action ('Launch', 'Move', 'Land') second element is integer indicating distance moved in action (negative for backwards, positive for forwards) spaceship's status determined by rules: - Initially, spaceship is 'On Ground' - 'Launch' action only performed when spaceship 'On Ground' change status to 'In Space' - 'Move' action only performed when spaceship 'In Space' not change status - 'Land' action only performed when spaceship is 'In Space' change status back to 'On Ground' - If any action invalid according to rules, return 'Invalid Action Sequence'. Otherwise, return final status. Examples: spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1)]) # => 'On Ground' spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1), ('Move', 3)]) # => 'Invalid Action Sequence'\n    \"\"\"\n","raw":"Create a function which takes a list of tuples representing a spaceship's flight data,\n    and returns a string indicating the spaceship's final status.\n    Each tuple in the list represents a single action, where:\n    - The first element is a string indicating the action ('Launch', 'Move', 'Land')\n    - The second element is an integer indicating the distance moved in that action \n    (negative for backwards, positive for forwards)\n    The spaceship's status is determined by the following rules:\n    - Initially, the spaceship is 'On Ground'\n    - 'Launch' action can only be performed when the spaceship is 'On Ground' and will change the status to 'In Space'\n    - 'Move' action can only be performed when the spaceship is 'In Space' and will not change the status\n    - 'Land' action can only be performed when the spaceship is 'In Space', it will change the status back to 'On Ground'\n    - If any action is invalid according to these rules, return 'Invalid Action Sequence'. Otherwise, return the final status.\n    Examples:\n    spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1)]) # => 'On Ground'\n    spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1), ('Move', 3)]) # => 'Invalid Action Sequence'","reduced":"Create a function takes list of tuples representing spaceship's flight data returns string indicating spaceship's final status. Each tuple in list represents a single action first element is string indicating action ('Launch', 'Move', 'Land') second element is integer indicating distance moved in action (negative for backwards, positive for forwards) spaceship's status determined by rules: - Initially, spaceship is 'On Ground' - 'Launch' action only performed when spaceship 'On Ground' change status to 'In Space' - 'Move' action only performed when spaceship 'In Space' not change status - 'Land' action only performed when spaceship is 'In Space' change status back to 'On Ground' - If any action invalid according to rules, return 'Invalid Action Sequence'. Otherwise, return final status. Examples: spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1)]) # => 'On Ground' spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1), ('Move', 3)]) # => 'Invalid Action Sequence'"}
{"task_id":"EvoEval\/92","prompt":"def paint_fountain(n):\n    \"\"\"\n    function take positive integer n as number of fountain layers. return string represents fountain with n layers, painted with letters starting from 'A'. Each fountain layer should be symmetrical, wider than previous one painted with new letter of alphabet. central column of fountain, regardless of number of layers, should always be painted with letter 'A'. If number of layers exceeds number letters in alphabet (26), painting restart from 'A'. function return string with newlines (\\n) between layers. Each layer should be centered. maximal width of fountain (the last layer) should be 2n-1 characters wide. Examples: For n = 1, output should be 'A' For n = 3, output be ' A \\n' ' BAB \\n' 'CCACC' For n = 27, output be 27-layered fountain with 'A' in central column same pattern as above. Note: - input guaranteed to be positive integer. Consider alphabet is always uppercase has 26 letters from 'A' to 'Z'.\n    \"\"\"\n","raw":"This function will take a positive integer n as the number of fountain layers. It should return a string that represents a fountain with\n    n layers, painted with letters starting from 'A'. Each fountain layer should be symmetrical, wider than the previous one,\n    and painted with a new letter of the alphabet. The central column of the fountain, regardless of the number of layers, should always be \n    painted with the letter 'A'. If the number of layers exceeds the number of letters in the alphabet (26), the painting should restart \n    from 'A'.\n    \n    The function should return a string with newlines (\\n) between layers. Each layer should be centered. The maximal width of the \n    fountain (the last layer) should be 2n-1 characters wide.\n    \n    Examples:\n    For n = 1, the output should be 'A'\n    \n    For n = 3, the output should be \n    '  A  \\n'\n    ' BAB \\n'\n    'CCACC'\n    \n    For n = 27, the output should be a 27-layered fountain with 'A' in the central column and the same pattern as above.\n    \n    Note:\n    - The input is guaranteed to be a positive integer.\n    - Consider that the alphabet is always uppercase and has 26 letters from 'A' to 'Z'.","reduced":"function take positive integer n as number of fountain layers. return string represents fountain with n layers, painted with letters starting from 'A'. Each fountain layer should be symmetrical, wider than previous one painted with new letter of alphabet. central column of fountain, regardless of number of layers, should always be painted with letter 'A'. If number of layers exceeds number letters in alphabet (26), painting restart from 'A'. function return string with newlines (\\n) between layers. Each layer should be centered. maximal width of fountain (the last layer) should be 2n-1 characters wide. Examples: For n = 1, output should be 'A' For n = 3, output be ' A \\n' ' BAB \\n' 'CCACC' For n = 27, output be 27-layered fountain with 'A' in central column same pattern as above. Note: - input guaranteed to be positive integer. Consider alphabet is always uppercase has 26 letters from 'A' to 'Z'."}
{"task_id":"EvoEval\/93","prompt":"def secret_code(message, n_values):\n    \"\"\"\n    task to help secret organization communicate by encoding and decoding messages. organization has own secret code each letter replaced by letter n positions ahead in alphabet cycle., organization uses random number generator for n n can be different for each letter. Spaces punctuation not encoded. function should take two parameters. first parameter is string, message to encode or decode. second parameter is list of integers values of n for each character in string. If list of integers longer than message, ignore extra integers. If message longer than list integers, cycle through list integers again from beginning. Example 1: Input: message = \"Hello\", n_values = [1, 2, 3, 4, 5] Output: \"Igopt\" Example 2: Input: message = \"Hello World!\", n_values = [1, 2, 3] Output: \"Igomq Xqumf!\" Constraints: * 1 <= len(message) <= 100 * message contains only letters, spaces punctuation * 1 <= len(n_values) <= 100 * Each integer in n_values between 1 and 26.\n    \"\"\"\n","raw":"Your task is to help a secret organization communicate by encoding and decoding messages. The organization has its own secret code, in which each letter is replaced by the letter which is n positions ahead in the alphabet cycle. However, the organization uses a random number generator for n, so n can be different for each letter. Spaces and punctuation are not encoded.\n\n    Your function should take two parameters. The first parameter is a string, which will be the message to encode or decode. The second parameter is a list of integers, which are the values of n for each character in the string.\n\n    If the list of integers is longer than the message, ignore the extra integers. If the message is longer than the list of integers, cycle through the list of integers again from the beginning.\n\n    Example 1:\n        Input: message = \"Hello\", n_values = [1, 2, 3, 4, 5]\n        Output: \"Igopt\"\n\n    Example 2:\n        Input: message = \"Hello World!\", n_values = [1, 2, 3]\n        Output: \"Igomq Xqumf!\"\n\n    Constraints:\n        * 1 <= len(message) <= 100\n        * message contains only letters, spaces and punctuation\n        * 1 <= len(n_values) <= 100\n        * Each integer in n_values will be between 1 and 26.","reduced":"task to help secret organization communicate by encoding and decoding messages. organization has own secret code each letter replaced by letter n positions ahead in alphabet cycle., organization uses random number generator for n n can be different for each letter. Spaces punctuation not encoded. function should take two parameters. first parameter is string, message to encode or decode. second parameter is list of integers values of n for each character in string. If list of integers longer than message, ignore extra integers. If message longer than list integers, cycle through list integers again from beginning. Example 1: Input: message = \"Hello\", n_values = [1, 2, 3, 4, 5] Output: \"Igopt\" Example 2: Input: message = \"Hello World!\", n_values = [1, 2, 3] Output: \"Igomq Xqumf!\" Constraints: * 1 <= len(message) <= 100 * message contains only letters, spaces punctuation * 1 <= len(n_values) <= 100 * Each integer in n_values between 1 and 26."}
{"task_id":"EvoEval\/94","prompt":"def spell_casting(strings):\n    \"\"\"\n    You're a wizard have list of spells represented as strings. Each spells consists of several words, can't just cast them in order given. sort words in each spell based on length If two words have same length, keep them in original order. Write a function accepts list of strings (spells) returns list where each spell string has words sorted as per rule outlined above. Example: >>> spell_casting([\"hocus pocus\", \"wingardium leviosa\", \"expecto patronum\"]) ['hocus pocus', 'leviosa wingardium', 'expecto patronum'] >>> spell_casting([\"accio\", \"expelliarmus\", \"stupefy\"]) ['accio', 'expelliarmus', 'stupefy'] Note: assume all words in spells separated by single space no punctuation marks.\n    \"\"\"\n","raw":"You're a wizard and you have a list of spells represented as strings. Each of these spells consists \n    of several words. However, you can't just cast them in the order they are given. You have to sort \n    the words in each spell based on their length. If two words have the same length, keep them in the \n    original order.\n\n    Write a function that accepts a list of strings (spells) and returns a list where each spell string \n    has its words sorted as per the rule outlined above.\n\n    Example:\n    >>> spell_casting([\"hocus pocus\", \"wingardium leviosa\", \"expecto patronum\"])\n    ['hocus pocus', 'leviosa wingardium', 'expecto patronum']\n\n    >>> spell_casting([\"accio\", \"expelliarmus\", \"stupefy\"])\n    ['accio', 'expelliarmus', 'stupefy']\n\n    Note: You can assume that all words in the spells are separated by a single space and there are no punctuation marks.","reduced":"You're a wizard have list of spells represented as strings. Each spells consists of several words, can't just cast them in order given. sort words in each spell based on length If two words have same length, keep them in original order. Write a function accepts list of strings (spells) returns list where each spell string has words sorted as per rule outlined above. Example: >>> spell_casting([\"hocus pocus\", \"wingardium leviosa\", \"expecto patronum\"]) ['hocus pocus', 'leviosa wingardium', 'expecto patronum'] >>> spell_casting([\"accio\", \"expelliarmus\", \"stupefy\"]) ['accio', 'expelliarmus', 'stupefy'] Note: assume all words in spells separated by single space no punctuation marks."}
{"task_id":"EvoEval\/95","prompt":"def matrixMystery(m):\n    \"\"\"\n    Write function takes 2D array of integers as input (a matrix m) returns absolute difference between sum of diagonals. For problem diagonals defined follows: - first diagonal starts top left corner descends down to right (i along line of m[i][i] for all i) - second diagonal starts top right corner descends to left (i along line of m[i][len(m)-i-1] for all i) If matrix not square return 'Invalid Matrix'. Example: matrixMystery([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 0 matrixMystery([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) => 2 matrixMystery([[1, 2], [3, 4]]) => 0\n    \"\"\"\n","raw":"Write a function that takes a 2D array of integers as input (a matrix m) and returns \n    the absolute difference between the sum of the diagonals. For the purpose of this problem, \n    the diagonals are defined as follows: \n\n    - The first diagonal starts at the top left corner and descends down to the right (i.e., along the line of m[i][i] for all i)\n    - The second diagonal starts at the top right corner and descends down to the left (i.e., along the line of m[i][len(m)-i-1] for all i)\n\n    If the matrix is not square, return 'Invalid Matrix'.\n\n    Example:\n    matrixMystery([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 0\n    matrixMystery([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) => 2\n    matrixMystery([[1, 2], [3, 4]]) => 0","reduced":"Write function takes 2D array of integers as input (a matrix m) returns absolute difference between sum of diagonals. For problem diagonals defined follows: - first diagonal starts top left corner descends down to right (i along line of m[i][i] for all i) - second diagonal starts top right corner descends to left (i along line of m[i][len(m)-i-1] for all i) If matrix not square return 'Invalid Matrix'. Example: matrixMystery([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) => 0 matrixMystery([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) => 2 matrixMystery([[1, 2], [3, 4]]) => 0"}
{"task_id":"EvoEval\/96","prompt":"def get_magic_indices(lst):\n    \"\"\"\n    given a list of integers. task is to find and return all \"magic\" indices in list. index considered \"magic\" if fulfils following two conditions: 1. value at index is a multiple of index. 2. product of all digits in value is equal to index. Negative values treated as same as positive ones. return list of all magic indices, sorted in ascending order. If no magic index in list, return empty list. Note: Indices are 0-based Example : Input: lst = [0, 7, -6, 12, -20, 5, -7] Output: [0, 5] Explanation: At index 0, value is 0, multiple of 0, product of digits equals index At index 5, value is 5, product of digits (5 = 5) equals index.\n    \"\"\"\n","raw":"You are given a list of integers. Your task is to find and return all \"magic\" indices in the list. \n    An index is considered \"magic\" if it fulfils the following two conditions:\n        1. The value at that index is a multiple of the index.\n        2. The product of all digits in the value is equal to the index. \n        \n    Negative values are treated as the same as positive ones.\n    \n    You should return a list of all magic indices, sorted in ascending order. If there is no magic index in the list, return an empty list.\n    \n    Note: Indices are 0-based\n\n    Example :\n        Input: lst = [0, 7, -6, 12, -20, 5, -7]\n        Output: [0, 5]\n        Explanation: \n        At index 0, value is 0, which is a multiple of 0, and the product of the digits equals the index\n        At index 5, value is 5, and the product of the digits (5 = 5) equals the index.","reduced":"given a list of integers. task is to find and return all \"magic\" indices in list. index considered \"magic\" if fulfils following two conditions: 1. value at index is a multiple of index. 2. product of all digits in value is equal to index. Negative values treated as same as positive ones. return list of all magic indices, sorted in ascending order. If no magic index in list, return empty list. Note: Indices are 0-based Example : Input: lst = [0, 7, -6, 12, -20, 5, -7] Output: [0, 5] Explanation: At index 0, value is 0, multiple of 0, product of digits equals index At index 5, value is 5, product of digits (5 = 5) equals index."}
{"task_id":"EvoEval\/97","prompt":"\"\"\"\n    def alien_invasion(alien, humans): ''' alien invasion on brink human race can defend themselves. 5 continents on earth in scenario: Asia, Africa, North America South America Europe. Suppose aliens start invasion from Asia move to other continents in following order: Africa, Europe, North America then South America. Write function takes two parameters, string representing name of alien, dictionary keys are human names values are strings representing continents where they live. function should return list containing all human names encounter alien sorted by order of encounter. If alien name or humans dictionary not valid function should return empty list. Examples: alien_invasion(\"Xenomorph\", {\"John\": \"Asia\", \"Sarah\": \"Europe\", \"Michael\": \"North America\", \"Ana\": \"Africa\"}) ==> ['John', 'Ana' 'Sarah' 'Michael'] alien_invasion(\"Predator\", {\"Emily\": \"South America\", \"Bob\": \"Europe\", \"Alice\": \"Africa\"})> ['Alice', 'Bob' 'Emily'] alien_invasion(\"Klingon\", {\"Peter\": \"Asia\", \"Paul\": \"North America\", \"Mary\": \"Europe\"}) ==> ['Peter', 'Mary', 'Paul'] '''\n    \"\"\"\n","raw":"def alien_invasion(alien, humans):\n    '''\n    The alien invasion is on the brink and all the human race can do is to defend themselves.\n    There are 5 continents on the earth in our scenario: \n    Asia, Africa, North America, South America, and Europe.\n    Suppose the aliens start their invasion from Asia and then move to the other continents in the following order:\n    Africa, Europe, North America, and then South America.\n    Write a function that takes two parameters, a string representing the name of an alien,\n    and a dictionary in which keys are human names and values are strings representing the continents where they live.\n    This function should return a list containing all the human names that will encounter that alien,\n    sorted by the order of their encounter.\n    If the alien name or humans dictionary is not valid, the function should return an empty list.\n    Examples:\n    alien_invasion(\"Xenomorph\", {\"John\": \"Asia\", \"Sarah\": \"Europe\", \"Michael\": \"North America\", \"Ana\": \"Africa\"}) \n    ==> ['John', 'Ana', 'Sarah', 'Michael']\n    alien_invasion(\"Predator\", {\"Emily\": \"South America\", \"Bob\": \"Europe\", \"Alice\": \"Africa\"}) \n    ==> ['Alice', 'Bob', 'Emily']\n    alien_invasion(\"Klingon\", {\"Peter\": \"Asia\", \"Paul\": \"North America\", \"Mary\": \"Europe\"}) \n    ==> ['Peter', 'Mary', 'Paul']\n    '''","reduced":"def alien_invasion(alien, humans): ''' alien invasion on brink human race can defend themselves. 5 continents on earth in scenario: Asia, Africa, North America South America Europe. Suppose aliens start invasion from Asia move to other continents in following order: Africa, Europe, North America then South America. Write function takes two parameters, string representing name of alien, dictionary keys are human names values are strings representing continents where they live. function should return list containing all human names encounter alien sorted by order of encounter. If alien name or humans dictionary not valid function should return empty list. Examples: alien_invasion(\"Xenomorph\", {\"John\": \"Asia\", \"Sarah\": \"Europe\", \"Michael\": \"North America\", \"Ana\": \"Africa\"}) ==> ['John', 'Ana' 'Sarah' 'Michael'] alien_invasion(\"Predator\", {\"Emily\": \"South America\", \"Bob\": \"Europe\", \"Alice\": \"Africa\"})> ['Alice', 'Bob' 'Emily'] alien_invasion(\"Klingon\", {\"Peter\": \"Asia\", \"Paul\": \"North America\", \"Mary\": \"Europe\"}) ==> ['Peter', 'Mary', 'Paul'] '''"}
{"task_id":"EvoEval\/98","prompt":"def nature_sequence_generator(n, a, b):\n    \"\"\"\n    Write function generates sequence of natural numbers. function accepts three parameters: first parameter, n, is an integer indicates how many elements sequence should contain. second parameter, a, is integer represents first number in sequence. third parameter, b, is integer represents second number in sequence. sequence starts with a and b, each subsequent element sequence generated by adding next natural number (starting from 1, incrementing by 1) to sum of two preceding numbers. function should return sequence as list of integers. function should check if generated sequence has prime numbers. If yes, replace prime numbers with string 'prime'. function should return list of integers and strings in above mentioned order. For example: assert nature_sequence_generator(5, 1, 2) == [1, 'prime', 4, 8, 15] assert nature_sequence_generator(6, 2, 3) == ['prime', 'prime', 6, 'prime', 20, 35] Note: - number 1 not considered a prime number. - All input parameters are positive integers. - n always greater than 2.\n    \"\"\"\n","raw":"Write a function that generates a sequence of natural numbers.\n    The function accepts three parameters:\n    - The first parameter, n, is an integer and indicates how many elements the sequence should contain.\n    - The second parameter, a, is an integer and represents the first number in the sequence.\n    - The third parameter, b, is an integer and represents the second number in the sequence.\n    \n    The sequence starts with a and b, and each subsequent element in the sequence is generated by adding \n    the next natural number (starting from 1, incrementing by 1) to the sum of its two preceding numbers.\n    The function should return the sequence as a list of integers.\n\n    The function should also check if the generated sequence has any prime numbers. If yes, then replace \n    these prime numbers with the string 'prime'. \n\n    The function should return a list of integers and strings in the above mentioned order.\n\n    For example:\n    assert nature_sequence_generator(5, 1, 2) == [1, 'prime', 4, 8, 15]\n    assert nature_sequence_generator(6, 2, 3) == ['prime', 'prime', 6, 'prime', 20, 35]\n\n    Note: \n    - The number 1 is not considered a prime number.\n    - All input parameters are positive integers.\n    - n will always be greater than 2.","reduced":"Write function generates sequence of natural numbers. function accepts three parameters: first parameter, n, is an integer indicates how many elements sequence should contain. second parameter, a, is integer represents first number in sequence. third parameter, b, is integer represents second number in sequence. sequence starts with a and b, each subsequent element sequence generated by adding next natural number (starting from 1, incrementing by 1) to sum of two preceding numbers. function should return sequence as list of integers. function should check if generated sequence has prime numbers. If yes, replace prime numbers with string 'prime'. function should return list of integers and strings in above mentioned order. For example: assert nature_sequence_generator(5, 1, 2) == [1, 'prime', 4, 8, 15] assert nature_sequence_generator(6, 2, 3) == ['prime', 'prime', 6, 'prime', 20, 35] Note: - number 1 not considered a prime number. - All input parameters are positive integers. - n always greater than 2."}
{"task_id":"EvoEval\/99","prompt":"def musical_chairs(n, rounds, music):\n    \"\"\"\n    playful program simulates game of musical chairs. program represent game with list of n players. Each round music plays for certain number of seconds. When music stops, player at current position gets eliminated. next round starts from next position. If end of list reached, start again from beginning. function return all players left after rounds finished. function takes three parameters: - n (int): number of players. rounds (list): list of integers representing number of seconds each round lasts. music (int): speed of music number of positions advanced per second. Assume at start of each round position is at start of list. Examples: For musical_chairs(5, [2, 3, 4], 1) game progresses: Round 1: After 2 seconds, player at position 2 eliminated. Players left: [1, 2, 4, 5] - Round 2: After 3 seconds player at position 1 eliminated. Players left: [1, 4, 5] Round 3: After 4 seconds, player at position 2 eliminated. Players left: [1, 4] function returns: [1, 4] For musical_chairs(10, [1, 2, 3, 4, 5], 1), function returns: [1, 3, 7, 8, 10]\n    \"\"\"\n","raw":"A playful program that simulates a game of musical chairs. \n\n    The program should represent the game with a list of n players. Each round, \n    the music plays for a certain number of seconds. When the music stops, the \n    player at the current position gets eliminated. The next round starts from \n    the next position. If the end of the list is reached, start again from the \n    beginning. The function should return all the players left after all rounds \n    are finished.\n\n    The function takes three parameters: \n    - n (int): The number of players.\n    - rounds (list): A list of integers representing the number of seconds each round lasts.\n    - music (int): The speed of music, i.e., the number of positions advanced per second.\n\n    Assume that at the start of each round, the position is at the start of the list.\n\n    Examples:\n    - For musical_chairs(5, [2, 3, 4], 1), the game progresses as follows:\n        - Round 1: After 2 seconds, player at position 2 is eliminated. Players left: [1, 2, 4, 5]\n        - Round 2: After 3 seconds, player at position 1 is eliminated. Players left: [1, 4, 5]\n        - Round 3: After 4 seconds, player at position 2 is eliminated. Players left: [1, 4]\n        - The function returns: [1, 4]\n\n    - For musical_chairs(10, [1, 2, 3, 4, 5], 1), the function returns: [1, 3, 7, 8, 10]","reduced":"playful program simulates game of musical chairs. program represent game with list of n players. Each round music plays for certain number of seconds. When music stops, player at current position gets eliminated. next round starts from next position. If end of list reached, start again from beginning. function return all players left after rounds finished. function takes three parameters: - n (int): number of players. rounds (list): list of integers representing number of seconds each round lasts. music (int): speed of music number of positions advanced per second. Assume at start of each round position is at start of list. Examples: For musical_chairs(5, [2, 3, 4], 1) game progresses: Round 1: After 2 seconds, player at position 2 eliminated. Players left: [1, 2, 4, 5] - Round 2: After 3 seconds player at position 1 eliminated. Players left: [1, 4, 5] Round 3: After 4 seconds, player at position 2 eliminated. Players left: [1, 4] function returns: [1, 4] For musical_chairs(10, [1, 2, 3, 4, 5], 1), function returns: [1, 3, 7, 8, 10]"}
