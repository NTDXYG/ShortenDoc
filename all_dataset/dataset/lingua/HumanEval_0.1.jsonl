{"task_id":"HumanEval\/0","prompt":"from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list numbers any two numbers closer to than threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True\n    \"\"\"\n","raw":"Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True","reduced":"Check if in given list numbers any two numbers closer to than threshold. >>> has_close_elements([1.0, 2.0, 3.0], 0.5) False >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) True"}
{"task_id":"HumanEval\/1","prompt":"from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses. goal is to separate group into separate strings return list. Separate groups are balanced (each open brace is properly closed) not nested within each other Ignore spaces in the input string. >>> separate_paren_groups('( ) (( )) (( )( ))') ['()', '(())', '(()())']\n    \"\"\"\n","raw":"Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']","reduced":"Input to this function is a string containing multiple groups of nested parentheses. goal is to separate group into separate strings return list. Separate groups are balanced (each open brace is properly closed) not nested within each other Ignore spaces in the input string. >>> separate_paren_groups('( ) (( )) (( )( ))') ['()', '(())', '(()())']"}
{"task_id":"HumanEval\/2","prompt":"def truncate_number(number: float) -> float:\n    \"\"\"\n    Given positive floating point number, can be decomposed into integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return decimal part of number. >>> truncate_number(3.5) 0.5\n    \"\"\"\n","raw":"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5","reduced":"Given positive floating point number, can be decomposed into integer part (largest integer smaller than given number) and decimals (leftover part always smaller than 1). Return decimal part of number. >>> truncate_number(3.5) 0.5"}
{"task_id":"HumanEval\/3","prompt":"from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    You're given a list of deposit and withdrawal operations on bank account starts with zero balance. Your task is to detect if point balance of account fallls below zero, at point function should return True. Otherwise it should return False. >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True\n    \"\"\"\n","raw":"You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True","reduced":"You're given a list of deposit and withdrawal operations on bank account starts with zero balance. Your task is to detect if point balance of account fallls below zero, at point function should return True. Otherwise it should return False. >>> below_zero([1, 2, 3]) False >>> below_zero([1, 2, -4, 5]) True"}
{"task_id":"HumanEval\/4","prompt":"from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For given list of input numbers, calculate Mean Absolute Deviation around mean dataset. Mean Absolute Deviation is average absolute difference between each element and centerpoint (mean in this case): MAD = average | x - x_mean | >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) 1.0\n    \"\"\"\n","raw":"For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0","reduced":"For given list of input numbers, calculate Mean Absolute Deviation around mean dataset. Mean Absolute Deviation is average absolute difference between each element and centerpoint (mean in this case): MAD = average | x - x_mean | >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) 1.0"}
{"task_id":"HumanEval\/5","prompt":"from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert number 'delimeter' between two consecutive elements input list >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3]\n    \"\"\"\n","raw":"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]","reduced":"Insert number 'delimeter' between two consecutive elements input list >>> intersperse([], 4) [] >>> intersperse([1, 2, 3], 4) [1, 4, 2, 4, 3]"}
{"task_id":"HumanEval\/6","prompt":"from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to function is string represented multiple groups for nested parentheses separated by spaces. For each group output deepest level of nesting of parentheses. E.g. (()()) has maximum two levels nesting while ((())) has three. >>> parse_nested_parens('(()()) ((())) () ((())()())') [2, 3, 1, 3]\n    \"\"\"\n","raw":"Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]","reduced":"Input to function is string represented multiple groups for nested parentheses separated by spaces. For each group output deepest level of nesting of parentheses. E.g. (()()) has maximum two levels nesting while ((())) has three. >>> parse_nested_parens('(()()) ((())) () ((())()())') [2, 3, 1, 3]"}
{"task_id":"HumanEval\/7","prompt":"from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter input list strings for contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']","reduced":"Filter input list strings for contain given substring >>> filter_by_substring([], 'a') [] >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a') ['abc', 'bacd', 'array']"}
{"task_id":"HumanEval\/8","prompt":"from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For given list of integers, return a tuple consisting of sum and product of all the integers in list. Empty sum should be equal to 0 and empty product equal to 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)\n    \"\"\"\n","raw":"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)","reduced":"For given list of integers, return a tuple consisting of sum and product of all the integers in list. Empty sum should be equal to 0 and empty product equal to 1. >>> sum_product([]) (0, 1) >>> sum_product([1, 2, 3, 4]) (10, 24)"}
{"task_id":"HumanEval\/9","prompt":"from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From given list of integers generate list rolling maximum element found until given moment in sequence. >>> rolling_max([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n","raw":"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]","reduced":"From given list of integers generate list rolling maximum element found until given moment in sequence. >>> rolling_max([1, 2, 3, 2, 3, 4, 2]) [1, 2, 3, 3, 3, 4, 4]"}
{"task_id":"HumanEval\/10","prompt":"def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Find shortest palindrome begins with supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of string reverse of string prefix comes before palindromic suffix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac'\n    \"\"\"\n","raw":"Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'","reduced":"Find shortest palindrome begins with supplied string. Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. - Append to the end of string reverse of string prefix comes before palindromic suffix. >>> make_palindrome('') '' >>> make_palindrome('cat') 'catac' >>> make_palindrome('cata') 'catac'"}
{"task_id":"HumanEval\/11","prompt":"from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs return result as string >>> string_xor('010', '110') '100'\n    \"\"\"\n","raw":"Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'","reduced":"Input two strings a and b consisting only of 1s and 0s. Perform binary XOR on these inputs return result as string >>> string_xor('010', '110') '100'"}
{"task_id":"HumanEval\/12","prompt":"from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return longest one. Return first one in case of multiple strings same length. Return None in case input list empty. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc'\n    \"\"\"\n","raw":"Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'","reduced":"Out of list of strings, return longest one. Return first one in case of multiple strings same length. Return None in case input list empty. >>> longest([]) >>> longest(['a', 'b', 'c']) 'a' >>> longest(['a', 'bb', 'ccc']) 'ccc'"}
{"task_id":"HumanEval\/13","prompt":"def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return greatest common divisor two integers a b >>> greatest_common_divisor(3, 5) 1 >>> greatest_common_divisor(25, 15) 5\n    \"\"\"\n","raw":"Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5","reduced":"Return greatest common divisor two integers a b >>> greatest_common_divisor(3, 5) 1 >>> greatest_common_divisor(25, 15) 5"}
{"task_id":"HumanEval\/14","prompt":"from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list all prefixes from shortest to longest input string >>> all_prefixes('abc') ['a', 'ab', 'abc']\n    \"\"\"\n","raw":"Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']","reduced":"Return list all prefixes from shortest to longest input string >>> all_prefixes('abc') ['a', 'ab', 'abc']"}
{"task_id":"HumanEval\/15","prompt":"def string_sequence(n: int) -> str:\n    \"\"\"\n    Return string containing space-delimited numbers starting 0 upto n inclusive. string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5'\n    \"\"\"\n","raw":"Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'","reduced":"Return string containing space-delimited numbers starting 0 upto n inclusive. string_sequence(0) '0' >>> string_sequence(5) '0 1 2 3 4 5'"}
{"task_id":"HumanEval\/16","prompt":"def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given string, find out how many distinct characters (regardless of case) consist of >>> count_distinct_characters('xyzXYZ') 3 >>> count_distinct_characters('Jerry') 4\n    \"\"\"\n","raw":"Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4","reduced":"Given string, find out how many distinct characters (regardless of case) consist of >>> count_distinct_characters('xyzXYZ') 3 >>> count_distinct_characters('Jerry') 4"}
{"task_id":"HumanEval\/17","prompt":"from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to function is string representing musical notes in special ASCII format. task is to parse string return list of integers corresponding to how many beats each not last. legend: 'o' - whole note, lasts four beats 'o|' - half note lasts two beats '.|' - quater note, lasts one beat >>> parse_music('o o| .| o| o| .| .| .| .| o o') [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n","raw":"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]","reduced":"Input to function is string representing musical notes in special ASCII format. task is to parse string return list of integers corresponding to how many beats each not last. legend: 'o' - whole note, lasts four beats 'o|' - half note lasts two beats '.|' - quater note, lasts one beat >>> parse_music('o o| .| o| o| .| .| .| .| o o') [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id":"HumanEval\/18","prompt":"def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times given substring found in original string. Count overlaping cases. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3\n    \"\"\"\n","raw":"Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3","reduced":"Find how many times given substring found in original string. Count overlaping cases. >>> how_many_times('', 'a') 0 >>> how_many_times('aaa', 'a') 3 >>> how_many_times('aaaa', 'aa') 3"}
{"task_id":"HumanEval\/19","prompt":"from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input space-delimited string of numberals from 'zero' to 'nine' Valid choices are 'zero', 'one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine'. Return string with numbers sorted from smallest to largest >>> sort_numbers('three one five') 'one three five'\n    \"\"\"\n","raw":"Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'","reduced":"Input space-delimited string of numberals from 'zero' to 'nine' Valid choices are 'zero', 'one' 'two' 'three' 'four' 'five' 'six' 'seven' 'eight' 'nine'. Return string with numbers sorted from smallest to largest >>> sort_numbers('three one five') 'one three five'"}
{"task_id":"HumanEval\/20","prompt":"from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From supplied list of numbers (of length least two) select return two closest to each other return in order (smaller number, larger number). >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0)\n    \"\"\"\n","raw":"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)","reduced":"From supplied list of numbers (of length least two) select return two closest to each other return in order (smaller number, larger number). >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) (2.0, 2.2) >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) (2.0, 2.0)"}
{"task_id":"HumanEval\/21","prompt":"from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply linear transform to list, such smallest number will become 0 and largest become 1 >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n","raw":"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]","reduced":"Given list of numbers (of at least two elements), apply linear transform to list, such smallest number will become 0 and largest become 1 >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]) [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id":"HumanEval\/22","prompt":"from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter list python values for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3]\n    \"\"\"\n","raw":"Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]","reduced":"Filter list python values for integers >>> filter_integers(['a', 3.14, 5]) [5] >>> filter_integers([1, 2, 3, 'abc', {}, []]) [1, 2, 3]"}
{"task_id":"HumanEval\/23","prompt":"def strlen(string: str) -> int:\n    \"\"\"\n    Return length string >>> strlen('') 0 >>> strlen('abc') 3\n    \"\"\"\n","raw":"Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3","reduced":"Return length string >>> strlen('') 0 >>> strlen('abc') 3"}
{"task_id":"HumanEval\/24","prompt":"def largest_divisor(n: int) -> int:\n    \"\"\"\n    For given number n, find largest number divides n evenly, smaller than n >>> largest_divisor(15) 5\n    \"\"\"\n","raw":"For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5","reduced":"For given number n, find largest number divides n evenly, smaller than n >>> largest_divisor(15) 5"}
{"task_id":"HumanEval\/25","prompt":"from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer order from smallest to largest. Each factors should listed number of times corresponding to how many times it appeares in factorization. Input number equal to product of all factors >>> factorize(8) [2, 2, 2] >>> factorize(25) [5, 5] >>> factorize(70) [2, 5, 7]\n    \"\"\"\n","raw":"Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]","reduced":"Return list of prime factors of given integer order from smallest to largest. Each factors should listed number of times corresponding to how many times it appeares in factorization. Input number equal to product of all factors >>> factorize(8) [2, 2, 2] >>> factorize(25) [5, 5] >>> factorize(70) [2, 5, 7]"}
{"task_id":"HumanEval\/26","prompt":"from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From list of integers, remove all elements occur more than once. Keep order of elements left same as in input. >>> remove_duplicates([1, 2, 3, 2, 4]) [1, 3, 4]\n    \"\"\"\n","raw":"From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]","reduced":"From list of integers, remove all elements occur more than once. Keep order of elements left same as in input. >>> remove_duplicates([1, 2, 3, 2, 4]) [1, 3, 4]"}
{"task_id":"HumanEval\/27","prompt":"def flip_case(string: str) -> str:\n    \"\"\"\n    given string, flip lowercase characters to uppercase uppercase to lowercase. >>> flip_case('Hello') 'hELLO'\n    \"\"\"\n","raw":"For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'","reduced":"given string, flip lowercase characters to uppercase uppercase to lowercase. >>> flip_case('Hello') 'hELLO'"}
{"task_id":"HumanEval\/28","prompt":"from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate list strings single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc'\n    \"\"\"\n","raw":"Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'","reduced":"Concatenate list strings single string >>> concatenate([]) '' >>> concatenate(['a', 'b', 'c']) 'abc'"}
{"task_id":"HumanEval\/29","prompt":"from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter input list of strings for ones start with given prefix >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']\n    \"\"\"\n","raw":"Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']","reduced":"Filter input list of strings for ones start with given prefix >>> filter_by_prefix([], 'a') [] >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a') ['abc', 'array']"}
{"task_id":"HumanEval\/30","prompt":"def get_positive(l: list):\n    \"\"\"\n    Return positive numbers list. get_positive([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,]) [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n","raw":"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]","reduced":"Return positive numbers list. get_positive([-1, 2, -4, 5, 6]) [2, 5, 6] >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,]) [5, 3, 2, 3, 9, 123, 1]"}
{"task_id":"HumanEval\/31","prompt":"def is_prime(n):\n    \"\"\"\n    Return true if number prime false otherwise >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False\n    \"\"\"\n","raw":"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False","reduced":"Return true if number prime false otherwise >>> is_prime(6) False >>> is_prime(101) True >>> is_prime(11) True >>> is_prime(13441) True >>> is_prime(61) True >>> is_prime(4) False >>> is_prime(1) False"}
{"task_id":"HumanEval\/32","prompt":"import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of polynomial. find_zero find x poly(x) = 0. find_zero returns only zero point, even if many. find_zero only takes list xs having even number of coefficients largest non zero coefficient guarantees solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0\n    \"\"\"\n","raw":"xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0","reduced":"xs are coefficients of polynomial. find_zero find x poly(x) = 0. find_zero returns only zero point, even if many. find_zero only takes list xs having even number of coefficients largest non zero coefficient guarantees solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 1.0"}
{"task_id":"HumanEval\/33","prompt":"def sort_third(l: list):\n    \"\"\"\n    This function takes a list l returns list l' such l' is identical to l in the indicies not divisible by three, while its values at indicies divisible by three are equal to the values of corresponding indicies of l, but sorted. >>> sort_third([1, 2, 3]) [1, 2, 3] >>> sort_third([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]","reduced":"This function takes a list l returns list l' such l' is identical to l in the indicies not divisible by three, while its values at indicies divisible by three are equal to the values of corresponding indicies of l, but sorted. >>> sort_third([1, 2, 3]) [1, 2, 3] >>> sort_third([5, 6, 3, 4, 8, 9, 2]) [2, 6, 3, 4, 8, 9, 5]"}
{"task_id":"HumanEval\/34","prompt":"def unique(l: list):\n    \"\"\"\n    Return sorted unique elements list unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123]\n    \"\"\"\n","raw":"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]","reduced":"Return sorted unique elements list unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) [0, 2, 3, 5, 9, 123]"}
{"task_id":"HumanEval\/35","prompt":"def max_element(l: list):\n    \"\"\"\n    Return maximum element list. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,]) 123\n    \"\"\"\n","raw":"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123","reduced":"Return maximum element list. >>> max_element([1, 2, 3]) 3 >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,]) 123"}
{"task_id":"HumanEval\/36","prompt":"def fizz_buzz(n: int):\n    \"\"\"\n    Return number of times digit 7 appears in integers less than n divisible by 11 or 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3\n    \"\"\"\n","raw":"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3","reduced":"Return number of times digit 7 appears in integers less than n divisible by 11 or 13. >>> fizz_buzz(50) 0 >>> fizz_buzz(78) 2 >>> fizz_buzz(79) 3"}
{"task_id":"HumanEval\/37","prompt":"def sort_even(l: list):\n    \"\"\"\n    This function takes a list l returns list l' such l' is identical to l in the odd indicies, its values at even indicies equal to the values of even indicies of l, but sorted. >>> sort_even([1, 2, 3]) [1, 2, 3] >>> sort_even([5, 6, 3, 4]) [3, 6, 5, 4]\n    \"\"\"\n","raw":"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]","reduced":"This function takes a list l returns list l' such l' is identical to l in the odd indicies, its values at even indicies equal to the values of even indicies of l, but sorted. >>> sort_even([1, 2, 3]) [1, 2, 3] >>> sort_even([5, 6, 3, 4]) [3, 6, 5, 4]"}
{"task_id":"HumanEval\/38","prompt":"def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) \/\/ 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes input string encoded encode_cyclic function. Returns decoded string.\n    \"\"\"\n","raw":"takes as input string encoded with encode_cyclic function. Returns decoded string.","reduced":"takes input string encoded encode_cyclic function. Returns decoded string."}
{"task_id":"HumanEval\/39","prompt":"def prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number Fibonacci number it's also prime >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89\n    \"\"\"\n","raw":"prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89","reduced":"prime_fib returns n-th number Fibonacci number it's also prime >>> prime_fib(1) 2 >>> prime_fib(2) 3 >>> prime_fib(3) 5 >>> prime_fib(4) 13 >>> prime_fib(5) 89"}
{"task_id":"HumanEval\/40","prompt":"def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes list of integers as input. returns True if three distinct elements in list sum to zero, False otherwise. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero([1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero([1]) False\n    \"\"\"\n","raw":"triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False","reduced":"triples_sum_to_zero takes list of integers as input. returns True if three distinct elements in list sum to zero, False otherwise. >>> triples_sum_to_zero([1, 3, 5, 0]) False >>> triples_sum_to_zero([1, 3, -2, 1]) True >>> triples_sum_to_zero([1, 2, 3, 7]) False >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7]) True >>> triples_sum_to_zero([1]) False"}
{"task_id":"HumanEval\/41","prompt":"def car_race_collision(n: int):\n    \"\"\"\n    Imagine a road's a perfectly straight infinitely long line. n cars driving left to right; simultaneously, a different set of n cars driving right to left. two sets of cars start very far from each other. All cars move in the same speed. Two cars said to collide when a car's moving left to right hits a car's moving right to left. However, the cars are infinitely sturdy and strong; as they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions.\n    \"\"\"\n","raw":"Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.","reduced":"Imagine a road's a perfectly straight infinitely long line. n cars driving left to right; simultaneously, a different set of n cars driving right to left. two sets of cars start very far from each other. All cars move in the same speed. Two cars said to collide when a car's moving left to right hits a car's moving right to left. However, the cars are infinitely sturdy and strong; as they continue moving in their trajectory as if they did not collide. This function outputs the number of such collisions."}
{"task_id":"HumanEval\/42","prompt":"def incr_list(l: list):\n    \"\"\"\n    Return list elements 1. incr_list([1, 2, 3]) [2, 3, 4] incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n","raw":"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]","reduced":"Return list elements 1. incr_list([1, 2, 3]) [2, 3, 4] incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]) [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id":"HumanEval\/43","prompt":"def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes list of integers as input. returns True if two distinct elements in list sum to zero, False otherwise. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero([1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero([1]) False\n    \"\"\"\n","raw":"pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False","reduced":"pairs_sum_to_zero takes list of integers as input. returns True if two distinct elements in list sum to zero, False otherwise. >>> pairs_sum_to_zero([1, 3, 5, 0]) False >>> pairs_sum_to_zero([1, 3, -2, 1]) False >>> pairs_sum_to_zero([1, 2, 3, 7]) False >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7]) True >>> pairs_sum_to_zero([1]) False"}
{"task_id":"HumanEval\/44","prompt":"def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base input number x to base return string representation after conversion base numbers less than 10. change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111'\n    \"\"\"\n","raw":"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'","reduced":"Change numerical base input number x to base return string representation after conversion base numbers less than 10. change_base(8, 3) '22' >>> change_base(8, 2) '1000' >>> change_base(7, 2) '111'"}
{"task_id":"HumanEval\/45","prompt":"def triangle_area(a, h):\n    \"\"\"\n    Given length of side and high return area for triangle. >>> triangle_area(5, 3) 7.5\n    \"\"\"\n","raw":"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5","reduced":"Given length of side and high return area for triangle. >>> triangle_area(5, 3) 7.5"}
{"task_id":"HumanEval\/46","prompt":"def fib4(n: int):\n    \"\"\"\n    Fib4 number sequence is similar to Fibbonacci sequnece defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). write function to efficiently compute n-th element of fib4 number sequence. Do not use recursion >>> fib4(5) 4 >>> fib4(6) 8 >>> fib4(7) 14\n    \"\"\"\n","raw":"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14","reduced":"Fib4 number sequence is similar to Fibbonacci sequnece defined as follows: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4). write function to efficiently compute n-th element of fib4 number sequence. Do not use recursion >>> fib4(5) 4 >>> fib4(6) 8 >>> fib4(7) 14"}
{"task_id":"HumanEval\/47","prompt":"def median(l: list):\n    \"\"\"\n    Return median elements list l >>> median([3, 1, 2, 4, 5]) 3 >>> median([-10, 4, 6, 1000, 10, 20]) 15.0\n    \"\"\"\n","raw":"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0","reduced":"Return median elements list l >>> median([3, 1, 2, 4, 5]) 3 >>> median([-10, 4, 6, 1000, 10, 20]) 15.0"}
{"task_id":"HumanEval\/48","prompt":"def is_palindrome(text: str):\n    \"\"\"\n    Checks if string palindrome >>> is_palindrome('') True >>> is_palindrome('aba') True >>> is_palindrome('aaaaa') True >>> is_palindrome('zbcd') False\n    \"\"\"\n","raw":"Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False","reduced":"Checks if string palindrome >>> is_palindrome('') True >>> is_palindrome('aba') True >>> is_palindrome('aaaaa') True >>> is_palindrome('zbcd') False"}
{"task_id":"HumanEval\/49","prompt":"def modp(n: int, p: int):\n    \"\"\"\n    Return 2^n modulo p aware numerics). >>> modp(3, 5) 3 modp(1101, 101) 2 >>> modp(0, 101) 1 modp(3, 11) 8 >>> modp(100, 101) 1\n    \"\"\"\n","raw":"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1","reduced":"Return 2^n modulo p aware numerics). >>> modp(3, 5) 3 modp(1101, 101) 2 >>> modp(0, 101) 1 modp(3, 11) 8 >>> modp(100, 101) 1"}
{"task_id":"HumanEval\/50","prompt":"def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes input string encoded with encode_shift function Returns decoded string.\n    \"\"\"\n","raw":"takes as input string encoded with encode_shift function. Returns decoded string.","reduced":"takes input string encoded with encode_shift function Returns decoded string."}
{"task_id":"HumanEval\/51","prompt":"def remove_vowels(text):\n    \"\"\"\n    remove_vowels function takes returns without vowels >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd'\n    \"\"\"\n","raw":"remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'","reduced":"remove_vowels function takes returns without vowels >>> remove_vowels('') '' >>> remove_vowels(\"abcdef\\nghijklm\") 'bcdf\\nghjklm' >>> remove_vowels('abcdef') 'bcdf' >>> remove_vowels('aaaaa') '' >>> remove_vowels('aaBAA') 'B' >>> remove_vowels('zbcd') 'zbcd'"}
{"task_id":"HumanEval\/52","prompt":"def below_threshold(l: list, t: int):\n    \"\"\"\n    Return True if numbers list l below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False\n    \"\"\"\n","raw":"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False","reduced":"Return True if numbers list l below threshold t. >>> below_threshold([1, 2, 4, 10], 100) True >>> below_threshold([1, 20, 4, 10], 5) False"}
{"task_id":"HumanEval\/53","prompt":"def add(x: int, y: int):\n    \"\"\"\n    Add numbers x y >>> add(2, 3) 5 >>> add(5, 7) 12\n    \"\"\"\n","raw":"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12","reduced":"Add numbers x y >>> add(2, 3) 5 >>> add(5, 7) 12"}
{"task_id":"HumanEval\/54","prompt":"def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check two words same characters same_chars('eabcdzzzz' 'dddzzzzzzzddeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc' 'abcd') True same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabce') False >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') False\n    \"\"\"\n","raw":"Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False","reduced":"Check two words same characters same_chars('eabcdzzzz' 'dddzzzzzzzddeddabc') True >>> same_chars('abcd', 'dddddddabc') True >>> same_chars('dddddddabc' 'abcd') True same_chars('eabcd', 'dddddddabc') False >>> same_chars('abcd', 'dddddddabce') False >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc') False"}
{"task_id":"HumanEval\/55","prompt":"def fib(n: int):\n    \"\"\"\n    Return n-th Fibonacci number. fib(10) 55 >>> fib(1) 1 fib(8) 21\n    \"\"\"\n","raw":"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21","reduced":"Return n-th Fibonacci number. fib(10) 55 >>> fib(1) 1 fib(8) 21"}
{"task_id":"HumanEval\/56","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets string of \"<\" and \">\". return True if opening bracket corresponding closing bracket. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<<><>>\") True >>> correct_bracketing(\"><<>\") False\n    \"\"\"\n","raw":"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False","reduced":"brackets string of \"<\" and \">\". return True if opening bracket corresponding closing bracket. >>> correct_bracketing(\"<\") False >>> correct_bracketing(\"<>\") True >>> correct_bracketing(\"<<><>>\") True >>> correct_bracketing(\"><<>\") False"}
{"task_id":"HumanEval\/57","prompt":"def monotonic(l: list):\n    \"\"\"\n    Return True list elements monotonically increasing decreasing. >>> monotonic([1, 2, 4, 20]) True >>> monotonic([1, 20, 4, 10]) False >>> monotonic([4, 1, 0,]) True\n    \"\"\"\n","raw":"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True","reduced":"Return True list elements monotonically increasing decreasing. >>> monotonic([1, 2, 4, 20]) True >>> monotonic([1, 20, 4, 10]) False >>> monotonic([4, 1, 0,]) True"}
{"task_id":"HumanEval\/58","prompt":"def common(l1: list, l2: list):\n    \"\"\"\n    Return sorted elements two lists common([1, 4, 3, 34, 653, 2, 5] [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] common([5, 3, 2, 8], [3, 2]) [2, 3]\n    \"\"\"\n","raw":"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]","reduced":"Return sorted elements two lists common([1, 4, 3, 34, 653, 2, 5] [5, 7, 1, 5, 9, 653, 121]) [1, 5, 653] common([5, 3, 2, 8], [3, 2]) [2, 3]"}
{"task_id":"HumanEval\/59","prompt":"def largest_prime_factor(n: int):\n    \"\"\"\n    Return largest prime factor of n. Assume n > 1 not a prime. >>> largest_prime_factor(13195) 29 >>> largest_prime_factor(2048) 2\n    \"\"\"\n","raw":"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2","reduced":"Return largest prime factor of n. Assume n > 1 not a prime. >>> largest_prime_factor(13195) 29 >>> largest_prime_factor(2048) 2"}
{"task_id":"HumanEval\/60","prompt":"def sum_to_n(n: int):\n    \"\"\"\n    sum_to_n function sums numbers 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1\n    \"\"\"\n","raw":"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1","reduced":"sum_to_n function sums numbers 1 to n. >>> sum_to_n(30) 465 >>> sum_to_n(100) 5050 >>> sum_to_n(5) 15 >>> sum_to_n(10) 55 >>> sum_to_n(1) 1"}
{"task_id":"HumanEval\/61","prompt":"def correct_bracketing(brackets: str):\n    \"\"\"\n    brackets string of \"(\" \")\". return True if opening bracket has corresponding closing bracket >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"()\") True >>> correct_bracketing(\"(()())\") True >>> correct_bracketing(\")(()\") False\n    \"\"\"\n","raw":"brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False","reduced":"brackets string of \"(\" \")\". return True if opening bracket has corresponding closing bracket >>> correct_bracketing(\"(\") False >>> correct_bracketing(\"()\") True >>> correct_bracketing(\"(()())\") True >>> correct_bracketing(\")(()\") False"}
{"task_id":"HumanEval\/62","prompt":"def derivative(xs: list):\n    \"\"\"\n    xs represent coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative polynomial same form. >>> derivative([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative([1, 2, 3]) [2, 6]\n    \"\"\"\n","raw":"xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]","reduced":"xs represent coefficients polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative polynomial same form. >>> derivative([3, 1, 2, 4, 5]) [1, 4, 12, 20] >>> derivative([1, 2, 3]) [2, 6]"}
{"task_id":"HumanEval\/63","prompt":"def fibfib(n: int):\n    \"\"\"\n    FibFib number sequence is sequence similar to Fibbonacci sequnece defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). write function to efficiently compute n-th element of fibfib number sequence. >>> fibfib(1) 0 >>> fibfib(5) 4 >>> fibfib(8) 24\n    \"\"\"\n","raw":"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24","reduced":"FibFib number sequence is sequence similar to Fibbonacci sequnece defined as follows: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3). write function to efficiently compute n-th element of fibfib number sequence. >>> fibfib(1) 0 >>> fibfib(5) 4 >>> fibfib(8) 24"}
{"task_id":"HumanEval\/64","prompt":"def vowels_count(s):\n    \"\"\"\n    Write function vowels_count takes a string representing a word as input returns the number of vowels in string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' Here, 'y' is also a vowel, but only when at the end of given word. Example: >>> vowels_count(\"abcde\") 2 >>> vowels_count(\"ACEDY\") 3\n    \"\"\"\n","raw":"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3","reduced":"Write function vowels_count takes a string representing a word as input returns the number of vowels in string. Vowels in this case are 'a', 'e', 'i', 'o', 'u' Here, 'y' is also a vowel, but only when at the end of given word. Example: >>> vowels_count(\"abcde\") 2 >>> vowels_count(\"ACEDY\") 3"}
{"task_id":"HumanEval\/65","prompt":"def circular_shift(x, shift):\n    \"\"\"\n    Circular shift digits of integer x, shift digits right by shift return the result as string. If shift > number of digits, return digits reversed. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\"\n    \"\"\"\n","raw":"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"","reduced":"Circular shift digits of integer x, shift digits right by shift return the result as string. If shift > number of digits, return digits reversed. >>> circular_shift(12, 1) \"21\" >>> circular_shift(12, 2) \"12\""}
{"task_id":"HumanEval\/66","prompt":"def digitSum(s):\n    \"\"\"\n    Task Write function takes string as input returns sum of upper characters only' ASCII codes. Examples: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n","raw":"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153","reduced":"Task Write function takes string as input returns sum of upper characters only' ASCII codes. Examples: digitSum(\"\") => 0 digitSum(\"abAB\") => 131 digitSum(\"abcCd\") => 67 digitSum(\"helloE\") => 69 digitSum(\"woArBld\") => 131 digitSum(\"aAaaaXa\") => 153"}
{"task_id":"HumanEval\/67","prompt":"def fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will given a string represents number of apples and oranges distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given string represents the total number of oranges and apples and an integer represent total number of fruits in basket return number of mango fruits in basket. for examble: fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n","raw":"In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19","reduced":"In this task, you will given a string represents number of apples and oranges distributed in a basket of fruit this basket contains apples, oranges, and mango fruits. Given string represents the total number of oranges and apples and an integer represent total number of fruits in basket return number of mango fruits in basket. for examble: fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19"}
{"task_id":"HumanEval\/68","prompt":"def pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree has non-negative integer nodes your task is to pluck one of nodes return it. plucked node should be the node with smallest even value. If multiple nodes with the same smallest even value found return node has smallest index. plucked node should be returned in a list, [ smalest_value, its index ], If no even values or given array is empty, return []. Example 1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has smallest even value, and 2 has the smallest index. Example 2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has smallest even value, and 2 has the smallest index. Example 3: Input: [] Output: [] Example 4: Input: [5, 0, 3, 0, 4, 2] Output: [0, 1] Explanation: 0 is smallest value, but are two zeros, choose first zero, has the smallest index. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value\n    \"\"\"\n","raw":"\"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value","reduced":"\"Given an array representing a branch of a tree has non-negative integer nodes your task is to pluck one of nodes return it. plucked node should be the node with smallest even value. If multiple nodes with the same smallest even value found return node has smallest index. plucked node should be returned in a list, [ smalest_value, its index ], If no even values or given array is empty, return []. Example 1: Input: [4,2,3] Output: [2, 1] Explanation: 2 has smallest even value, and 2 has the smallest index. Example 2: Input: [1,2,3] Output: [2, 1] Explanation: 2 has smallest even value, and 2 has the smallest index. Example 3: Input: [] Output: [] Example 4: Input: [5, 0, 3, 0, 4, 2] Output: [0, 1] Explanation: 0 is smallest value, but are two zeros, choose first zero, has the smallest index. Constraints: * 1 <= nodes.length <= 10000 * 0 <= node.value"}
{"task_id":"HumanEval\/69","prompt":"def search(lst):\n    \"\"\"\n    You given a non-empty list of positive integers. Return greatest integer greater than zero, and has frequency greater than or equal to value of integer itself. frequency of integer is number of times it appears in the list. If no such a value exist, return -1. Examples: search([4, 1, 2, 2, 3, 1]) == 2 search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n","raw":"You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1","reduced":"You given a non-empty list of positive integers. Return greatest integer greater than zero, and has frequency greater than or equal to value of integer itself. frequency of integer is number of times it appears in the list. If no such a value exist, return -1. Examples: search([4, 1, 2, 2, 3, 1]) == 2 search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3 search([5, 5, 4, 4, 4]) == -1"}
{"task_id":"HumanEval\/70","prompt":"def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers return list in strange order. Strange sorting start with minimum value, then maximum of remaining integers, then minimum on. Examples: strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list([]) == []\n    \"\"\"\n","raw":"Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []","reduced":"Given list of integers return list in strange order. Strange sorting start with minimum value, then maximum of remaining integers, then minimum on. Examples: strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3] strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5] strange_sort_list([]) == []"}
{"task_id":"HumanEval\/71","prompt":"def triangle_area(a, b, c):\n    \"\"\"\n    Given lengths of three sides of a triangle. Return the area of triangle rounded to 2 decimal points if three sides form valid triangle. Otherwise return -1 Three sides make valid triangle when sum of any two sides is greater than third side. Example: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1\n    \"\"\"\n","raw":"Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1","reduced":"Given lengths of three sides of a triangle. Return the area of triangle rounded to 2 decimal points if three sides form valid triangle. Otherwise return -1 Three sides make valid triangle when sum of any two sides is greater than third side. Example: triangle_area(3, 4, 5) == 6.00 triangle_area(1, 2, 10) == -1"}
{"task_id":"HumanEval\/72","prompt":"def will_it_fly(q,w):\n    \"\"\"\n    Write function returns True if object q will fly, False otherwise. object q will fly if it's balanced (it is a palindromic list) and sum of its elements less than or equal maximum possible weight w. Example: will_it_fly([1, 2], 5) \u279e False # 1+2 is less than maximum possible weight, but it's unbalanced. will_it_fly([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than maximum possible weight. will_it_fly([3, 2, 3], 9) \u279e True # 3+2+3 is less than maximum possible weight, it's balanced. will_it_fly([3], 5) \u279e True # 3 is less than maximum possible weight, it's balanced.\n    \"\"\"\n","raw":"Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.","reduced":"Write function returns True if object q will fly, False otherwise. object q will fly if it's balanced (it is a palindromic list) and sum of its elements less than or equal maximum possible weight w. Example: will_it_fly([1, 2], 5) \u279e False # 1+2 is less than maximum possible weight, but it's unbalanced. will_it_fly([3, 2, 3], 1) \u279e False # it's balanced, but 3+2+3 is more than maximum possible weight. will_it_fly([3, 2, 3], 9) \u279e True # 3+2+3 is less than maximum possible weight, it's balanced. will_it_fly([3], 5) \u279e True # 3 is less than maximum possible weight, it's balanced."}
{"task_id":"HumanEval\/73","prompt":"def smallest_change(arr):\n    \"\"\"\n    Given array arr of integers, find minimum number of elements need to be changed to make array palindromic. A palindromic array is array read same backwards and forwards. In one change, can change one element to any other element. For example: smallest_change([1,2,3,5,4,7,9,6]) == 4 smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n","raw":"Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0","reduced":"Given array arr of integers, find minimum number of elements need to be changed to make array palindromic. A palindromic array is array read same backwards and forwards. In one change, can change one element to any other element. For example: smallest_change([1,2,3,5,4,7,9,6]) == 4 smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1 smallest_change([1, 2, 3, 2, 1]) == 0"}
{"task_id":"HumanEval\/74","prompt":"def total_match(lst1, lst2):\n    \"\"\"\n    Write function accepts two lists of strings returns list total number of chars in all strings list less than other list. if two lists have same number of chars, return first list. Examples total_match([], []) \u279e [] total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi'] total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin'] total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi'] total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n","raw":"Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']","reduced":"Write function accepts two lists of strings returns list total number of chars in all strings list less than other list. if two lists have same number of chars, return first list. Examples total_match([], []) \u279e [] total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi'] total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin'] total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi'] total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']"}
{"task_id":"HumanEval\/75","prompt":"def is_multiply_prime(a):\n    \"\"\"\n    Write function returns true if given number is multiplication of 3 prime numbers and false otherwise. Knowing (a) is less then 100. Example: is_multiply_prime(30) == True 30 = 2 * 3 * 5\n    \"\"\"\n","raw":"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5","reduced":"Write function returns true if given number is multiplication of 3 prime numbers and false otherwise. Knowing (a) is less then 100. Example: is_multiply_prime(30) == True 30 = 2 * 3 * 5"}
{"task_id":"HumanEval\/76","prompt":"def is_simple_power(x, n):\n    \"\"\"\n    task to write function returns true if number x is simple power of n false in other cases. x is simple power of n if n**int=x For example: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false\n    \"\"\"\n","raw":"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false","reduced":"task to write function returns true if number x is simple power of n false in other cases. x is simple power of n if n**int=x For example: is_simple_power(1, 4) => true is_simple_power(2, 2) => true is_simple_power(8, 2) => true is_simple_power(3, 2) => false is_simple_power(3, 1) => false is_simple_power(5, 3) => false"}
{"task_id":"HumanEval\/77","prompt":"def iscube(a):\n    \"\"\"\n    Write function takes integer a returns True if this ingeger is cube of some integer number. Note: may assume input is always valid. Examples: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False\n    \"\"\"\n","raw":"Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False","reduced":"Write function takes integer a returns True if this ingeger is cube of some integer number. Note: may assume input is always valid. Examples: iscube(1) ==> True iscube(2) ==> False iscube(-1) ==> True iscube(64) ==> True iscube(0) ==> True iscube(180) ==> False"}
{"task_id":"HumanEval\/78","prompt":"def hex_key(num):\n    \"\"\"\n    You tasked to write a function receives a hexadecimal number as string and counts number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... to determine a number of following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: may assume input is always correct or empty string, symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" output should be 1. For num = \"1077E\" output should be 2. For num = \"ABED1A33\" output should be 4. For num = \"123456789ABCDEF0\" output should be 6. For num = \"2020\" output should be 2.\n    \"\"\"\n","raw":"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.","reduced":"You tasked to write a function receives a hexadecimal number as string and counts number of hexadecimal digits that are primes (prime number, or a prime, is a natural number greater than 1 not a product of two smaller natural numbers). Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. Prime numbers are 2, 3, 5, 7, 11, 13, 17,... to determine a number of following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13). Note: may assume input is always correct or empty string, symbols A,B,C,D,E,F are always uppercase. Examples: For num = \"AB\" output should be 1. For num = \"1077E\" output should be 2. For num = \"ABED1A33\" output should be 4. For num = \"123456789ABCDEF0\" output should be 6. For num = \"2020\" output should be 2."}
{"task_id":"HumanEval\/79","prompt":"def decimal_to_binary(decimal):\n    \"\"\"\n    You will be given a number in decimal form and your task is to convert it to binary format. function should return a string, with each character representing a binary number. Each character in string will be '0' or '1'. extra couple of characters 'db' at the beginning and at the end of string. extra characters there to help with format. Examples: decimal_to_binary(15) # returns \"db1111db\" decimal_to_binary(32) # returns \"db100000db\"\n    \"\"\"\n","raw":"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"","reduced":"You will be given a number in decimal form and your task is to convert it to binary format. function should return a string, with each character representing a binary number. Each character in string will be '0' or '1'. extra couple of characters 'db' at the beginning and at the end of string. extra characters there to help with format. Examples: decimal_to_binary(15) # returns \"db1111db\" decimal_to_binary(32) # returns \"db100000db\""}
{"task_id":"HumanEval\/80","prompt":"def is_happy(s):\n    \"\"\"\n    You given a string s. task to check if string is happy or not. string is happy if length is at least 3 and every 3 consecutive letters distinct For example: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False\n    \"\"\"\n","raw":"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False","reduced":"You given a string s. task to check if string is happy or not. string is happy if length is at least 3 and every 3 consecutive letters distinct For example: is_happy(a) => False is_happy(aa) => False is_happy(abcd) => True is_happy(aabb) => False is_happy(adb) => True is_happy(xyy) => False"}
{"task_id":"HumanEval\/81","prompt":"def numerical_letter_grade(grades):\n    \"\"\"\n    the last week of semester teacher has to give grades to students. teacher been making her own algorithm for grading. only problem is, she lost the code she used for grading. She given you list of GPAs for some students you have to write a function can output list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n","raw":"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']","reduced":"the last week of semester teacher has to give grades to students. teacher been making her own algorithm for grading. only problem is, she lost the code she used for grading. She given you list of GPAs for some students you have to write a function can output list of letter grades using the following table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E Example: grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id":"HumanEval\/82","prompt":"def prime_length(string):\n    \"\"\"\n    Write function that takes string returns True if string length is prime number or False otherwise Examples prime_length('Hello') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == False\n    \"\"\"\n","raw":"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False","reduced":"Write function that takes string returns True if string length is prime number or False otherwise Examples prime_length('Hello') == True prime_length('abcdcba') == True prime_length('kittens') == True prime_length('orange') == False"}
{"task_id":"HumanEval\/83","prompt":"def starts_one_ends(n):\n    \"\"\"\n    Given positive integer n, return count of the numbers of n-digit positive integers start or end with 1.\n    \"\"\"\n","raw":"Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.","reduced":"Given positive integer n, return count of the numbers of n-digit positive integers start or end with 1."}
{"task_id":"HumanEval\/84","prompt":"def solve(N):\n    \"\"\"\n    Given positive integer N, return the total sum of its digits in binary. Example For N = 1000, sum of digits will be 1 output should be \"1\". For N = 150, sum of digits be 6 output should be \"110\". For N = 147, sum of digits be 12 output should be \"1100\". Variables: @N integer Constraints: 0 \u2264 N \u2264 10000. Output: a string of binary number\n    \"\"\"\n","raw":"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number","reduced":"Given positive integer N, return the total sum of its digits in binary. Example For N = 1000, sum of digits will be 1 output should be \"1\". For N = 150, sum of digits be 6 output should be \"110\". For N = 147, sum of digits be 12 output should be \"1100\". Variables: @N integer Constraints: 0 \u2264 N \u2264 10000. Output: a string of binary number"}
{"task_id":"HumanEval\/85","prompt":"def add(lst):\n    \"\"\"\n    Given non-empty list of integers lst. add the even elements at odd indices.. Examples: add([4, 2, 6, 7]) ==> 2\n    \"\"\"\n","raw":"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2","reduced":"Given non-empty list of integers lst. add the even elements at odd indices.. Examples: add([4, 2, 6, 7]) ==> 2"}
{"task_id":"HumanEval\/86","prompt":"def anti_shuffle(s):\n    \"\"\"\n    Write a function takes a string returns ordered version of it. Ordered version of string, is string where all words (separated by space) replaced by new word where all characters arranged in ascending order based on ascii value. Note: should keep order of words and blank spaces in the sentence. For example: anti_shuffle('Hi') returns 'Hi' anti_shuffle('hello') returns 'ehllo' anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n","raw":"Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'","reduced":"Write a function takes a string returns ordered version of it. Ordered version of string, is string where all words (separated by space) replaced by new word where all characters arranged in ascending order based on ascii value. Note: should keep order of words and blank spaces in the sentence. For example: anti_shuffle('Hi') returns 'Hi' anti_shuffle('hello') returns 'ehllo' anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'"}
{"task_id":"HumanEval\/87","prompt":"def get_row(lst, x):\n    \"\"\"\n    given 2 dimensional data as nested lists similar to matrix, unlike matrices each row may contain different number of columns. Given lst, and integer x, find integers x in list return list of tuples, [(x1, y1), (x2, y2) ...] each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates by rows in ascending order. Also sort coordinates of row by columns in descending order. Examples: get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)] get_row([], 1) == [] get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n","raw":"You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]","reduced":"given 2 dimensional data as nested lists similar to matrix, unlike matrices each row may contain different number of columns. Given lst, and integer x, find integers x in list return list of tuples, [(x1, y1), (x2, y2) ...] each tuple is a coordinate - (row, columns), starting with 0. Sort coordinates by rows in ascending order. Also sort coordinates of row by columns in descending order. Examples: get_row([ [1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1] ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)] get_row([], 1) == [] get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]"}
{"task_id":"HumanEval\/88","prompt":"def sort_array(array):\n    \"\"\"\n    Given array of non-negative integers, return copy of given array after sorting, sort given array in ascending order if sum( first index value, last index value) is odd, or sort descending order if sum( first index last index value) is even. Note: * don't change given array. Examples: * sort_array([]) => [] * sort_array([5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n","raw":"Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]","reduced":"Given array of non-negative integers, return copy of given array after sorting, sort given array in ascending order if sum( first index value, last index value) is odd, or sort descending order if sum( first index last index value) is even. Note: * don't change given array. Examples: * sort_array([]) => [] * sort_array([5]) => [5] * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5] * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]"}
{"task_id":"HumanEval\/89","prompt":"def encrypt(s):\n    \"\"\"\n    Create a function encrypt takes a string as an argument returns a string encrypted with the alphabet rotated. alphabet should be rotated in manner such letters shift down by two multiplied to two places. For example: encrypt('hi') returns 'lm' encrypt('asdfghjkl') returns 'ewhjklnop' encrypt('gf') returns 'kj' encrypt('et') returns 'ix'\n    \"\"\"\n","raw":"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'","reduced":"Create a function encrypt takes a string as an argument returns a string encrypted with the alphabet rotated. alphabet should be rotated in manner such letters shift down by two multiplied to two places. For example: encrypt('hi') returns 'lm' encrypt('asdfghjkl') returns 'ewhjklnop' encrypt('gf') returns 'kj' encrypt('et') returns 'ix'"}
{"task_id":"HumanEval\/90","prompt":"def next_smallest(lst):\n    \"\"\"\n    You given a list of integers. Write function next_smallest() returns 2nd smallest element of list. Return None if no such element. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None\n    \"\"\"\n","raw":"You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None","reduced":"You given a list of integers. Write function next_smallest() returns 2nd smallest element of list. Return None if no such element. next_smallest([1, 2, 3, 4, 5]) == 2 next_smallest([5, 1, 4, 3, 2]) == 2 next_smallest([]) == None next_smallest([1, 1]) == None"}
{"task_id":"HumanEval\/91","prompt":"def is_bored(S):\n    \"\"\"\n    You'll given a string of words, your task is to count the number of boredoms. A boredom is sentence starts with word \"I\". Sentences delimited by '.', '?' or '!'. For example: >>> is_bored(\"Hello world\") 0 >>> is_bored(\"The sky is blue. sun is shining. I love this weather\") 1\n    \"\"\"\n","raw":"You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1","reduced":"You'll given a string of words, your task is to count the number of boredoms. A boredom is sentence starts with word \"I\". Sentences delimited by '.', '?' or '!'. For example: >>> is_bored(\"Hello world\") 0 >>> is_bored(\"The sky is blue. sun is shining. I love this weather\") 1"}
{"task_id":"HumanEval\/92","prompt":"def any_int(x, y, z):\n    \"\"\"\n    Create function takes 3 numbers. Returns true if one numbers equal to the sum of other two, all numbers are integers. Returns false in any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False\n    \"\"\"\n","raw":"Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False","reduced":"Create function takes 3 numbers. Returns true if one numbers equal to the sum of other two, all numbers are integers. Returns false in any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False"}
{"task_id":"HumanEval\/93","prompt":"def encode(message):\n    \"\"\"\n    Write a function takes a message, encodes in such way it swaps case of all letters, replaces all vowels in the message with letter appears 2 places ahead of vowel in the english alphabet. Assume only letters. Examples: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG'\n    \"\"\"\n","raw":"Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'","reduced":"Write a function takes a message, encodes in such way it swaps case of all letters, replaces all vowels in the message with letter appears 2 places ahead of vowel in the english alphabet. Assume only letters. Examples: >>> encode('test') 'TGST' >>> encode('This is a message') 'tHKS KS C MGSSCGG'"}
{"task_id":"HumanEval\/94","prompt":"def skjkasdkd(lst):\n    \"\"\"\n    given list of integers. need to find largest prime value return sum of digits. Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output should be 10 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output should be 25 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output should be 13 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output should be 11 For lst = [0,81,12,3,1,21] output should be 3 For lst = [0,8,1,2,1,7] output should be 7\n    \"\"\"\n","raw":"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7","reduced":"given list of integers. need to find largest prime value return sum of digits. Examples: For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] output should be 10 For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] output should be 25 For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] output should be 13 For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] output should be 11 For lst = [0,81,12,3,1,21] output should be 3 For lst = [0,8,1,2,1,7] output should be 7"}
{"task_id":"HumanEval\/95","prompt":"def check_dict_case(dict):\n    \"\"\"\n    Given dictionary return True if all keys strings in lower case or all keys strings upper case, else return False function should return False is given dictionary empty Examples: check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True. check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) return False. check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) return False. check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) return False. check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n","raw":"Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.","reduced":"Given dictionary return True if all keys strings in lower case or all keys strings upper case, else return False function should return False is given dictionary empty Examples: check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True. check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) return False. check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) return False. check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) return False. check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True."}
{"task_id":"HumanEval\/96","prompt":"def count_up_to(n):\n    \"\"\"\n    Implement function takes non-negative integer returns array of first n integers prime numbers and less than n. for example: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n","raw":"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]","reduced":"Implement function takes non-negative integer returns array of first n integers prime numbers and less than n. for example: count_up_to(5) => [2,3] count_up_to(11) => [2,3,5,7] count_up_to(0) => [] count_up_to(20) => [2,3,5,7,11,13,17,19] count_up_to(1) => [] count_up_to(18) => [2,3,5,7,11,13,17]"}
{"task_id":"HumanEval\/97","prompt":"def multiply(a, b):\n    \"\"\"\n    Complete function takes two integers returns product of their unit digits. Assume input always valid. Examples: multiply(148, 412) should return 16. multiply(19, 28) should return 72. multiply(2020, 1851) should return 0. multiply(14,-15) should return 20.\n    \"\"\"\n","raw":"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.","reduced":"Complete function takes two integers returns product of their unit digits. Assume input always valid. Examples: multiply(148, 412) should return 16. multiply(19, 28) should return 72. multiply(2020, 1851) should return 0. multiply(14,-15) should return 20."}
{"task_id":"HumanEval\/98","prompt":"def count_upper(s):\n    \"\"\"\n    Given string s, count number of uppercase vowels in even indices example: count_upper('aBCdEf') returns 1 count_upper('abcdefg') returns 0 count_upper('dBBE') returns 0\n    \"\"\"\n","raw":"Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0","reduced":"Given string s, count number of uppercase vowels in even indices example: count_upper('aBCdEf') returns 1 count_upper('abcdefg') returns 0 count_upper('dBBE') returns 0"}
{"task_id":"HumanEval\/99","prompt":"def closest_integer(value):\n    \"\"\"\n    Create a function takes a value (string) representing a number returns the closest integer to it. If number equidistant from two integers, round it away from zero. Examples >>> closest_integer(\"10\") 10 >>> closest_integer(\"15.3\") 15 Note: Rounding away from zero means if given number is equidistant from two integers, one you should return is the one farthest from zero. For example closest_integer(\"14.5\") should return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n","raw":"Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.","reduced":"Create a function takes a value (string) representing a number returns the closest integer to it. If number equidistant from two integers, round it away from zero. Examples >>> closest_integer(\"10\") 10 >>> closest_integer(\"15.3\") 15 Note: Rounding away from zero means if given number is equidistant from two integers, one you should return is the one farthest from zero. For example closest_integer(\"14.5\") should return 15 and closest_integer(\"-14.5\") should return -15."}
{"task_id":"HumanEval\/100","prompt":"def make_a_pile(n):\n    \"\"\"\n    Given positive integer n, to make a pile of n levels of stones. first level has n stones. number of stones in the next level is: - next odd number if n is odd. - next even number if n is even. Return the number of stones in each level in a list, where element at index i represents number of stones in level (i+1). Examples: >>> make_a_pile(3) [3, 5, 7]\n    \"\"\"\n","raw":"Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]","reduced":"Given positive integer n, to make a pile of n levels of stones. first level has n stones. number of stones in the next level is: - next odd number if n is odd. - next even number if n is even. Return the number of stones in each level in a list, where element at index i represents number of stones in level (i+1). Examples: >>> make_a_pile(3) [3, 5, 7]"}
{"task_id":"HumanEval\/101","prompt":"def words_string(s):\n    \"\"\"\n    You given string of words separated by commas or spaces. Your task is to split string into words return array of words. For example: words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n","raw":"You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]","reduced":"You given string of words separated by commas or spaces. Your task is to split string into words return array of words. For example: words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"] words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id":"HumanEval\/102","prompt":"def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y returns biggest even integer number in the range [x, y] inclusive. If there's no such number, function should return -1. For example: choose_num(12, 15) = 14 choose_num(13, 12) = -1\n    \"\"\"\n","raw":"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1","reduced":"This function takes two positive numbers x and y returns biggest even integer number in the range [x, y] inclusive. If there's no such number, function should return -1. For example: choose_num(12, 15) = 14 choose_num(13, 12) = -1"}
{"task_id":"HumanEval\/103","prompt":"def rounded_avg(n, m):\n    \"\"\"\n    You given two positive integers n and m, your task is to compute the average of integers from n through m (including n and m). Round answer to nearest integer convert to binary. If n greater than m, return -1. Example: rounded_avg(1, 5) => \"0b11\" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => \"0b1111\" rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n","raw":"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"","reduced":"You given two positive integers n and m, your task is to compute the average of integers from n through m (including n and m). Round answer to nearest integer convert to binary. If n greater than m, return -1. Example: rounded_avg(1, 5) => \"0b11\" rounded_avg(7, 5) => -1 rounded_avg(10, 20) => \"0b1111\" rounded_avg(20, 33) => \"0b11010\""}
{"task_id":"HumanEval\/104","prompt":"def unique_digits(x):\n    \"\"\"\n    Given list of positive integers x. return sorted list all elements hasn't even digit. Note: Returned list should sorted in increasing order. For example: >>> unique_digits([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits([152, 323, 1422, 10]) []\n    \"\"\"\n","raw":"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []","reduced":"Given list of positive integers x. return sorted list all elements hasn't even digit. Note: Returned list should sorted in increasing order. For example: >>> unique_digits([15, 33, 1422, 1]) [1, 15, 33] >>> unique_digits([152, 323, 1422, 10]) []"}
{"task_id":"HumanEval\/105","prompt":"def by_length(arr):\n    \"\"\"\n    Given array of integers, sort integers between 1 and 9 inclusive reverse resulting array replace each digit by corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". example: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] If array empty return empty array: arr = [] return [] If array strange number ignore it: arr = [1, -1, 55] -> sort arr -> [-1, 1, 55] -> reverse arr -> [55, 1, -1] return = ['One']\n    \"\"\"\n","raw":"Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']","reduced":"Given array of integers, sort integers between 1 and 9 inclusive reverse resulting array replace each digit by corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\". example: arr = [2, 1, 1, 4, 5, 8, 2, 3] -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1] return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"] If array empty return empty array: arr = [] return [] If array strange number ignore it: arr = [1, -1, 55] -> sort arr -> [-1, 1, 55] -> reverse arr -> [55, 1, -1] return = ['One']"}
{"task_id":"HumanEval\/106","prompt":"def f(n):\n    \"\"\"\n    Implement function f takes n as a parameter, returns list of size n, such the value of element at index i is the factorial of i if i is even or sum of numbers from 1 to i otherwise. i starts from 1. factorial of i is the multiplication of numbers from 1 to i (1 * 2 * ... * i). Example: f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n","raw":"Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]","reduced":"Implement function f takes n as a parameter, returns list of size n, such the value of element at index i is the factorial of i if i is even or sum of numbers from 1 to i otherwise. i starts from 1. factorial of i is the multiplication of numbers from 1 to i (1 * 2 * ... * i). Example: f(5) == [1, 2, 6, 24, 15]"}
{"task_id":"HumanEval\/107","prompt":"def even_odd_palindrome(n):\n    \"\"\"\n    Given positive integer n, return tuple has number of even and odd integer palindromes fall within range(1, n), inclusive. Example 1: Input: 3 Output: (1, 2) Explanation: Integer palindrome are 1, 2, 3. one of is even, and two of are odd. Example 2: Input: 12 Output: (4, 6) Explanation: Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of are even, 6 of are odd. Note: 1. 1 <= n <= 10^3 2. returned tuple has number of even and odd integer palindromes respectively.\n    \"\"\"\n","raw":"Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.","reduced":"Given positive integer n, return tuple has number of even and odd integer palindromes fall within range(1, n), inclusive. Example 1: Input: 3 Output: (1, 2) Explanation: Integer palindrome are 1, 2, 3. one of is even, and two of are odd. Example 2: Input: 12 Output: (4, 6) Explanation: Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of are even, 6 of are odd. Note: 1. 1 <= n <= 10^3 2. returned tuple has number of even and odd integer palindromes respectively."}
{"task_id":"HumanEval\/108","prompt":"def count_nums(arr):\n    \"\"\"\n    Write function count_nums takes array of integers returns the number of elements has sum of digits > 0. If number is negative, its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3. >>> count_nums([]) == 0 >>> count_nums([-1, 11, -11]) == 1 >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n","raw":"Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3","reduced":"Write function count_nums takes array of integers returns the number of elements has sum of digits > 0. If number is negative, its first signed digit will be negative: e.g. -123 has signed digits -1, 2, and 3. >>> count_nums([]) == 0 >>> count_nums([-1, 11, -11]) == 1 >>> count_nums([1, 1, 2]) == 3"}
{"task_id":"HumanEval\/109","prompt":"def move_one_ball(arr):\n    \"\"\"\n    We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array randomly ordered. Your task is to determine if possible to get an array sorted in non-decreasing order by performing following operation on given array: You allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of array by one position in the right direction. last element of array be moved to starting position in the array i.e. 0th index. If possible to obtain sorted array by performing above operation then return True else return False. If given array is empty then return True. Note: given list is guaranteed to have unique elements For Example: move_one_ball([3, 4, 5, 1, 2])==>True Explanation: By performin 2 right shift operations, non-decreasing order can be achieved for given array. move_one_ball([3, 5, 4, 1, 2])==>False Explanation:It not possible to get non-decreasing order for given array by performing any number of right shift operations.\n    \"\"\"\n","raw":"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.","reduced":"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The numbers in the array randomly ordered. Your task is to determine if possible to get an array sorted in non-decreasing order by performing following operation on given array: You allowed to perform right shift operation any number of times. One right shift operation means shifting all elements of array by one position in the right direction. last element of array be moved to starting position in the array i.e. 0th index. If possible to obtain sorted array by performing above operation then return True else return False. If given array is empty then return True. Note: given list is guaranteed to have unique elements For Example: move_one_ball([3, 4, 5, 1, 2])==>True Explanation: By performin 2 right shift operations, non-decreasing order can be achieved for given array. move_one_ball([3, 5, 4, 1, 2])==>False Explanation:It not possible to get non-decreasing order for given array by performing any number of right shift operations."}
{"task_id":"HumanEval\/110","prompt":"def exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you implement a function that takes two lists of numbers, determines whether it possible to perform exchange of elements between them to make lst1 a list of only even numbers. no limit on the number of exchanged elements between lst1 and lst2. If possible to exchange elements between lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" assumed input lists will be non-empty.\n    \"\"\"\n","raw":"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.","reduced":"In this problem, you implement a function that takes two lists of numbers, determines whether it possible to perform exchange of elements between them to make lst1 a list of only even numbers. no limit on the number of exchanged elements between lst1 and lst2. If possible to exchange elements between lst1 and lst2 to make all the elements of lst1 to be even, return \"YES\". Otherwise, return \"NO\". For example: exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\" exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\" assumed input lists will be non-empty."}
{"task_id":"HumanEval\/111","prompt":"def histogram(test):\n    \"\"\"\n    Given string representing space separated lowercase letters, return dictionary of letter with most repetition containing corresponding count. If several letters have same occurrence, return all. Example: histogram('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram('a b b a') == {'a': 2, 'b': 2} histogram('a b c a b') == {'a': 2, 'b': 2} histogram('b b b b a') == {'b': 4} histogram('') == {}\n    \"\"\"\n","raw":"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}","reduced":"Given string representing space separated lowercase letters, return dictionary of letter with most repetition containing corresponding count. If several letters have same occurrence, return all. Example: histogram('a b c') == {'a': 1, 'b': 1, 'c': 1} histogram('a b b a') == {'a': 2, 'b': 2} histogram('a b c a b') == {'a': 2, 'b': 2} histogram('b b b b a') == {'b': 4} histogram('') == {}"}
{"task_id":"HumanEval\/112","prompt":"def reverse_delete(s,c):\n    \"\"\"\n    Task We given two strings s and c, to deleted all the characters in s equal to any character in c then check if result string is palindrome. A string is called palindrome if it reads the same backward as forward. should return a tuple containing result string and True\/False for check. Example For s = \"abcde\", c = \"ae\", result should be ('bcd',False) For s = \"abcdef\", c = \"b\" result should be ('acdef',False) For s = \"abcdedcba\", c = \"ab\", result should be ('cdedc',True)\n    \"\"\"\n","raw":"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True\/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)","reduced":"Task We given two strings s and c, to deleted all the characters in s equal to any character in c then check if result string is palindrome. A string is called palindrome if it reads the same backward as forward. should return a tuple containing result string and True\/False for check. Example For s = \"abcde\", c = \"ae\", result should be ('bcd',False) For s = \"abcdef\", c = \"b\" result should be ('acdef',False) For s = \"abcdedcba\", c = \"ab\", result should be ('cdedc',True)"}
{"task_id":"HumanEval\/113","prompt":"def odd_count(lst):\n    \"\"\"\n    Given a list of strings, each string consists of only digits, return a list. Each element i of output should be \"the number of odd elements in string i of input.\" all i's should be replaced by number of odd digits in i'th string of input. >>> odd_count(['1234567']) [\"the number of odd elements 4n str4ng 4 of 4nput.\"] >>> odd_count(['3',\"11111111\"]) [\"the number of odd elements 1n the str1ng 1 of 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n","raw":"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]","reduced":"Given a list of strings, each string consists of only digits, return a list. Each element i of output should be \"the number of odd elements in string i of input.\" all i's should be replaced by number of odd digits in i'th string of input. >>> odd_count(['1234567']) [\"the number of odd elements 4n str4ng 4 of 4nput.\"] >>> odd_count(['3',\"11111111\"]) [\"the number of odd elements 1n the str1ng 1 of 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id":"HumanEval\/114","prompt":"def minSubArraySum(nums):\n    \"\"\"\n    Given array of integers nums find minimum sum of non-empty sub-array nums. Example minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n","raw":"Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6","reduced":"Given array of integers nums find minimum sum of non-empty sub-array nums. Example minSubArraySum([2, 3, 4, 1, 2, 4]) == 1 minSubArraySum([-1, -2, -3]) == -6"}
{"task_id":"HumanEval\/115","prompt":"def max_fill(grid, capacity):\n    import math\n    \"\"\"\n    given rectangular grid of wells. Each row represents single well, each 1 in row represents single unit of water. Each well has corresponding bucket can used to extract water from, all buckets have same capacity. Your task is to use buckets to empty wells. Output number of times need to lower buckets. Example 1: Input: grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity : 1 Output: 6 Example 2: Input: grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]] bucket_capacity : 2 Output: 5 Example 3: Input: grid : [[0,0,0], [0,0,0]] bucket_capacity : 5 Output: 0 Constraints: * all wells have same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10\n    \"\"\"\n","raw":"You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10","reduced":"given rectangular grid of wells. Each row represents single well, each 1 in row represents single unit of water. Each well has corresponding bucket can used to extract water from, all buckets have same capacity. Your task is to use buckets to empty wells. Output number of times need to lower buckets. Example 1: Input: grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]] bucket_capacity : 1 Output: 6 Example 2: Input: grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]] bucket_capacity : 2 Output: 5 Example 3: Input: grid : [[0,0,0], [0,0,0]] bucket_capacity : 5 Output: 0 Constraints: * all wells have same length * 1 <= grid.length <= 10^2 * 1 <= grid[:,1].length <= 10^2 * grid[i][j] -> 0 | 1 * 1 <= capacity <= 10"}
{"task_id":"HumanEval\/116","prompt":"def sort_array(arr):\n    \"\"\"\n    In this Kata sort array of non-negative integers according to number of ones in binary representation in ascending order. For similar number ones sort based on decimal value. implemented like this: >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n","raw":"In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]","reduced":"In this Kata sort array of non-negative integers according to number of ones in binary representation in ascending order. For similar number ones sort based on decimal value. implemented like this: >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5] >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2] >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]"}
{"task_id":"HumanEval\/117","prompt":"def select_words(s, n):\n    \"\"\"\n    Given a string s and natural number n, you tasked to implement function returns list of all words from string s that contain exactly n consonants, in order these words appear in string s. If string s is empty function should return empty list. Note: may assume input string contains only letters and spaces. Examples: select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words(\"simple white space\", 2) ==> [] select_words(\"Hello world\", 4) ==> [\"world\"] select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n","raw":"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]","reduced":"Given a string s and natural number n, you tasked to implement function returns list of all words from string s that contain exactly n consonants, in order these words appear in string s. If string s is empty function should return empty list. Note: may assume input string contains only letters and spaces. Examples: select_words(\"Mary had a little lamb\", 4) ==> [\"little\"] select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"] select_words(\"simple white space\", 2) ==> [] select_words(\"Hello world\", 4) ==> [\"world\"] select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]"}
{"task_id":"HumanEval\/118","prompt":"def get_closest_vowel(word):\n    \"\"\"\n    You given a word. Your task is to find closest vowel stands between two consonants from the right side of word (case sensitive). Vowels in beginning and ending doesn't count. Return empty string if didn't find any vowel met above condition. may assume given string contains English letter only. Example: get_closest_vowel(\"yogurt\") ==> \"u\" get_closest_vowel(\"FULL\") ==> \"U\" get_closest_vowel(\"quick\") ==> \"\" get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n","raw":"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"","reduced":"You given a word. Your task is to find closest vowel stands between two consonants from the right side of word (case sensitive). Vowels in beginning and ending doesn't count. Return empty string if didn't find any vowel met above condition. may assume given string contains English letter only. Example: get_closest_vowel(\"yogurt\") ==> \"u\" get_closest_vowel(\"FULL\") ==> \"U\" get_closest_vowel(\"quick\") ==> \"\" get_closest_vowel(\"ab\") ==> \"\""}
{"task_id":"HumanEval\/119","prompt":"def match_parens(lst):\n    \"\"\"\n    You given list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if possible to concatenate the two strings in some order, resulting string will be good. A string S is considered to good if and only if all parentheses in S are balanced. For example: string '(())()' is good, while string '())' is not. Return 'Yes' if way to make good string, and return 'No' otherwise. Examples: match_parens(['()(', ')']) == 'Yes' match_parens([')', ')']) == 'No'\n    \"\"\"\n","raw":"You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'","reduced":"You given list of two strings, both strings consist of open parentheses '(' or close parentheses ')' only. Your job is to check if possible to concatenate the two strings in some order, resulting string will be good. A string S is considered to good if and only if all parentheses in S are balanced. For example: string '(())()' is good, while string '())' is not. Return 'Yes' if way to make good string, and return 'No' otherwise. Examples: match_parens(['()(', ')']) == 'Yes' match_parens([')', ')']) == 'No'"}
{"task_id":"HumanEval\/120","prompt":"def maximum(arr, k):\n    \"\"\"\n    Given array arr of integers and positive integer k, return sorted list of length k with maximum k numbers in arr. Example 1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Example 2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Example 3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1. length of array in range of [1, 1000]. 2. elements in the array in range of [-1000, 1000]. 3. 0 <= k <= len(arr)\n    \"\"\"\n","raw":"Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)","reduced":"Given array arr of integers and positive integer k, return sorted list of length k with maximum k numbers in arr. Example 1: Input: arr = [-3, -4, 5], k = 3 Output: [-4, -3, 5] Example 2: Input: arr = [4, -4, 4], k = 2 Output: [4, 4] Example 3: Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1 Output: [2] Note: 1. length of array in range of [1, 1000]. 2. elements in the array in range of [-1000, 1000]. 3. 0 <= k <= len(arr)"}
{"task_id":"HumanEval\/121","prompt":"def solution(lst):\n    \"\"\"\n    Given non-empty list of integers, return the sum of all odd elements in even positions. Examples solution([5, 8, 7, 1]) ==> 12 solution([3, 3, 3, 3, 3]) ==> 9 solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n","raw":"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0","reduced":"Given non-empty list of integers, return the sum of all odd elements in even positions. Examples solution([5, 8, 7, 1]) ==> 12 solution([3, 3, 3, 3, 3]) ==> 9 solution([30, 13, 24, 321]) ==>0"}
{"task_id":"HumanEval\/122","prompt":"def add_elements(arr, k):\n    \"\"\"\n    Given non-empty array of integers arr integer k return sum of elements with most two digits from first k elements of arr Example: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)\n    \"\"\"\n","raw":"Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)","reduced":"Given non-empty array of integers arr integer k return sum of elements with most two digits from first k elements of arr Example: Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4 Output: 24 # sum of 21 + 3 Constraints: 1. 1 <= len(arr) <= 100 2. 1 <= k <= len(arr)"}
{"task_id":"HumanEval\/123","prompt":"def get_odd_collatz(n):\n    \"\"\"\n    Given positive integer n, return sorted list has the odd numbers in collatz sequence. Collatz conjecture is a conjecture in mathematics concerns a sequence defined as follows: start with any positive integer n. each term obtained from the previous term as follows: if previous term is even, next term is one half of the previous term. If previous term is odd, next term is 3 times previous term plus 1. conjecture is no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order. For example: get_odd_collatz(5) returns [1, 5] # collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so odd numbers are only 1, and 5.\n    \"\"\"\n","raw":"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.","reduced":"Given positive integer n, return sorted list has the odd numbers in collatz sequence. Collatz conjecture is a conjecture in mathematics concerns a sequence defined as follows: start with any positive integer n. each term obtained from the previous term as follows: if previous term is even, next term is one half of the previous term. If previous term is odd, next term is 3 times previous term plus 1. conjecture is no matter what value of n, the sequence will always reach 1. Note: 1. Collatz(1) is [1]. 2. returned list sorted in increasing order. For example: get_odd_collatz(5) returns [1, 5] # collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so odd numbers are only 1, and 5."}
{"task_id":"HumanEval\/124","prompt":"def valid_date(date):\n    \"\"\"\n    to write a function which validates given date string and returns True if date is valid otherwise False. date is valid if all of following rules are satisfied: 1. date string not empty. 2. number of days not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And number of days not less than 1 or higher than 30 days for months 4,6,9,11. And, number of days not less than 1 or higher than 29 for the month 2. 3. months should not be less than 1 or higher than 12. 4. date should be in format: mm-dd-yyyy for example: valid_date('03-11-2000') => True valid_date('15-01-2012') => False valid_date('04-0-2040') => False valid_date('06-04-2020') => True valid_date('06\/04\/2020') => False\n    \"\"\"\n","raw":"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06\/04\/2020') => False","reduced":"to write a function which validates given date string and returns True if date is valid otherwise False. date is valid if all of following rules are satisfied: 1. date string not empty. 2. number of days not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And number of days not less than 1 or higher than 30 days for months 4,6,9,11. And, number of days not less than 1 or higher than 29 for the month 2. 3. months should not be less than 1 or higher than 12. 4. date should be in format: mm-dd-yyyy for example: valid_date('03-11-2000') => True valid_date('15-01-2012') => False valid_date('04-0-2040') => False valid_date('06-04-2020') => True valid_date('06\/04\/2020') => False"}
{"task_id":"HumanEval\/125","prompt":"def split_words(txt):\n    \"\"\"\n    Given string of words, return list of words split on whitespace, if no whitespaces exists in text split on commas ',' if no commas exists return number of lower-case letters with odd order in alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25 Examples split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"] split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"] split_words(\"abcdef\") == 3\n    \"\"\"\n","raw":"Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3","reduced":"Given string of words, return list of words split on whitespace, if no whitespaces exists in text split on commas ',' if no commas exists return number of lower-case letters with odd order in alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25 Examples split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"] split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"] split_words(\"abcdef\") == 3"}
{"task_id":"HumanEval\/126","prompt":"def is_sorted(lst):\n    \"\"\"\n    Given list of numbers return sorted in ascending order. If list more than 1 duplicate same number return False. Assume no negative numbers only integers. Examples is_sorted([5]) \u279e True is_sorted([1, 2, 3, 4, 5]) True is_sorted([1, 3, 2, 4, 5]) \u279e False is_sorted([1, 2, 3, 4, 5, 6]) \u279e True is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True is_sorted([1, 3, 2, 4, 5, 6, 7]) False is_sorted([1, 2, 2, 3, 3, 4]) \u279e True is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    \"\"\"\n","raw":"Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False","reduced":"Given list of numbers return sorted in ascending order. If list more than 1 duplicate same number return False. Assume no negative numbers only integers. Examples is_sorted([5]) \u279e True is_sorted([1, 2, 3, 4, 5]) True is_sorted([1, 3, 2, 4, 5]) \u279e False is_sorted([1, 2, 3, 4, 5, 6]) \u279e True is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True is_sorted([1, 3, 2, 4, 5, 6, 7]) False is_sorted([1, 2, 2, 3, 3, 4]) \u279e True is_sorted([1, 2, 2, 2, 3, 4]) \u279e False"}
{"task_id":"HumanEval\/127","prompt":"def intersection(interval1, interval2):\n    \"\"\"\n    given two intervals, each interval is a pair of integers. For example, interval = (start, end) = (1, 2). given intervals are closed means interval (start, end) includes both start and end. For each given interval, assumed its start is less or equal its end. Your task is to determine whether length of intersection of these two intervals is a prime number. Example, intersection of intervals (1, 3), (2, 4) is (2, 3) which its length is 1, not a prime number. If length of intersection is a prime number, return \"YES\", otherwise, return \"NO\". If two intervals don't intersect, return \"NO\". [input\/output] samples: intersection((1, 2), (2, 3)) ==> \"NO\" intersection((-1, 1), (0, 4)) ==> \"NO\" intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n","raw":"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input\/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"","reduced":"given two intervals, each interval is a pair of integers. For example, interval = (start, end) = (1, 2). given intervals are closed means interval (start, end) includes both start and end. For each given interval, assumed its start is less or equal its end. Your task is to determine whether length of intersection of these two intervals is a prime number. Example, intersection of intervals (1, 3), (2, 4) is (2, 3) which its length is 1, not a prime number. If length of intersection is a prime number, return \"YES\", otherwise, return \"NO\". If two intervals don't intersect, return \"NO\". [input\/output] samples: intersection((1, 2), (2, 3)) ==> \"NO\" intersection((-1, 1), (0, 4)) ==> \"NO\" intersection((-3, -1), (-5, 5)) ==> \"YES\""}
{"task_id":"HumanEval\/128","prompt":"def prod_signs(arr):\n    \"\"\"\n    given array arr of integers need to return sum of magnitudes of integers multiplied by product of all signs of each number in array represented by 1, -1 or 0. return None for empty arr. Example: >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) == None\n    \"\"\"\n","raw":"You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None","reduced":"given array arr of integers need to return sum of magnitudes of integers multiplied by product of all signs of each number in array represented by 1, -1 or 0. return None for empty arr. Example: >>> prod_signs([1, 2, 2, -4]) == -9 >>> prod_signs([0, 1]) == 0 >>> prod_signs([]) == None"}
{"task_id":"HumanEval\/129","prompt":"def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of grid contains a value. Every integer in range [1, N * N] inclusive appears exactly once on cells of grid. to find minimum path of length k in the grid. can start from any cell, in each step can move to any of neighbor cells, in, can go to cells which share an edge with you current cell. note a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than path B (of length k) if after making ordered lists of values on cells A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) have lst_A[j] = lst_B[j]. guaranteed answer is unique. Return an ordered list of values on cells that minimum path go through. Examples: Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3 Output: [1, 2, 1] Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1 Output: [1]\n    \"\"\"\n","raw":"Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]","reduced":"Given a grid with N rows and N columns (N >= 2) and a positive integer k, each cell of grid contains a value. Every integer in range [1, N * N] inclusive appears exactly once on cells of grid. to find minimum path of length k in the grid. can start from any cell, in each step can move to any of neighbor cells, in, can go to cells which share an edge with you current cell. note a path of length k means visiting exactly k cells (not necessarily distinct). You CANNOT go off the grid. A path A (of length k) is considered less than path B (of length k) if after making ordered lists of values on cells A and B go through (let's call them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other words, there exist an integer index i (1 <= i <= k) such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) have lst_A[j] = lst_B[j]. guaranteed answer is unique. Return an ordered list of values on cells that minimum path go through. Examples: Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3 Output: [1, 2, 1] Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1 Output: [1]"}
{"task_id":"HumanEval\/130","prompt":"def tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, studied deeply by mathematicians in last couple centuries., people don't know is Tribonacci sequence. Tribonacci sequence defined by recurrence: tri(1) = 3 tri(n) = 1 + n \/ 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example: tri(2) = 1 + (2 \/ 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 given non-negative integer number n, have to return list of first n + 1 numbers of Tribonacci sequence. Examples: tri(3) = [1, 3, 2, 8]\n    \"\"\"\n","raw":"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n \/ 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 \/ 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]","reduced":"Everyone knows Fibonacci sequence, studied deeply by mathematicians in last couple centuries., people don't know is Tribonacci sequence. Tribonacci sequence defined by recurrence: tri(1) = 3 tri(n) = 1 + n \/ 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd. For example: tri(2) = 1 + (2 \/ 2) = 2 tri(4) = 3 tri(3) = tri(2) + tri(1) + tri(4) = 2 + 3 + 3 = 8 given non-negative integer number n, have to return list of first n + 1 numbers of Tribonacci sequence. Examples: tri(3) = [1, 3, 2, 8]"}
{"task_id":"HumanEval\/131","prompt":"def digits(n):\n    \"\"\"\n    Given positive integer n, return product of odd digits. Return 0 if all digits even. For example: digits(1) == 1 digits(4) == 0 digits(235) == 15\n    \"\"\"\n","raw":"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15","reduced":"Given positive integer n, return product of odd digits. Return 0 if all digits even. For example: digits(1) == 1 digits(4) == 0 digits(235) == 15"}
{"task_id":"HumanEval\/132","prompt":"def is_nested(string):\n    \"\"\"\n    Create function takes string as input contains only square brackets. function should return True if and only if valid subsequence of brackets where at least one bracket in the subsequence is nested. is_nested('[[]]') \u279e True is_nested('[]]]]]]][[[[[]') \u279e False is_nested('[][]') \u279e False is_nested('[]') \u279e False is_nested('[[][]]') \u279e True is_nested('[[]][[') \u279e True\n    \"\"\"\n","raw":"Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True","reduced":"Create function takes string as input contains only square brackets. function should return True if and only if valid subsequence of brackets where at least one bracket in the subsequence is nested. is_nested('[[]]') \u279e True is_nested('[]]]]]]][[[[[]') \u279e False is_nested('[][]') \u279e False is_nested('[]') \u279e False is_nested('[[][]]') \u279e True is_nested('[[]][[') \u279e True"}
{"task_id":"HumanEval\/133","prompt":"def sum_squares(lst):\n    \"\"\"\n    You given a list of numbers. need to return sum of squared numbers in the given list, round each element in list to upper int(Ceiling) first. Examples: For lst = [1,2,3] output should be 14 For lst = [1,4,9] output should be 98 For lst = [1,3,5,7] output should be 84 For lst = [1.4,4.2,0] output should be 29 For lst = [-2.4,1,1] output should be 6\n    \"\"\"\n","raw":"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6","reduced":"You given a list of numbers. need to return sum of squared numbers in the given list, round each element in list to upper int(Ceiling) first. Examples: For lst = [1,2,3] output should be 14 For lst = [1,4,9] output should be 98 For lst = [1,3,5,7] output should be 84 For lst = [1.4,4.2,0] output should be 29 For lst = [-2.4,1,1] output should be 6"}
{"task_id":"HumanEval\/134","prompt":"def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Create function returns True if last character of given string is an alphabetical character not a part of a word, False otherwise. Note: \"word\" is group of characters separated by space. Examples: check_if_last_char_is_a_letter(\"apple pie\") \u279e False check_if_last_char_is_a_letter(\"apple pi e\") \u279e True check_if_last_char_is_a_letter(\"apple pi e \") \u279e False check_if_last_char_is_a_letter(\"\") \u279e False\n    \"\"\"\n","raw":"Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False","reduced":"Create function returns True if last character of given string is an alphabetical character not a part of a word, False otherwise. Note: \"word\" is group of characters separated by space. Examples: check_if_last_char_is_a_letter(\"apple pie\") \u279e False check_if_last_char_is_a_letter(\"apple pi e\") \u279e True check_if_last_char_is_a_letter(\"apple pi e \") \u279e False check_if_last_char_is_a_letter(\"\") \u279e False"}
{"task_id":"HumanEval\/135","prompt":"def can_arrange(arr):\n    \"\"\"\n    Create a function returns largest index of element not greater than or equal to the element immediately preceding it. If no such element exists then return -1. given array will not contain duplicate values. Examples: can_arrange([1,2,4,3,5]) = 3 can_arrange([1,2,3]) = -1\n    \"\"\"\n","raw":"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1","reduced":"Create a function returns largest index of element not greater than or equal to the element immediately preceding it. If no such element exists then return -1. given array will not contain duplicate values. Examples: can_arrange([1,2,4,3,5]) = 3 can_arrange([1,2,3]) = -1"}
{"task_id":"HumanEval\/136","prompt":"def largest_smallest_integers(lst):\n    \"\"\"\n    Create function returns tuple (a, b), where 'a' the largest of negative integers, and 'b' smallest of positive integers in a list. If no negative or positive integers, return them as None. Examples: largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n","raw":"Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)","reduced":"Create function returns tuple (a, b), where 'a' the largest of negative integers, and 'b' smallest of positive integers in a list. If no negative or positive integers, return them as None. Examples: largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1) largest_smallest_integers([]) == (None, None) largest_smallest_integers([0]) == (None, None)"}
{"task_id":"HumanEval\/137","prompt":"def compare_one(a, b):\n    \"\"\"\n    Create function takes integers, floats, or strings representing real numbers returns the larger variable in its given variable type. Return None if values equal. Note: If real number represented as a string, floating point might be . or , compare_one(1, 2.5) \u279e 2.5 compare_one(1, \"2,3\") \u279e \"2,3\" compare_one(\"5,1\", \"6\") \u279e \"6\" compare_one(\"1\", 1) \u279e None\n    \"\"\"\n","raw":"Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None","reduced":"Create function takes integers, floats, or strings representing real numbers returns the larger variable in its given variable type. Return None if values equal. Note: If real number represented as a string, floating point might be . or , compare_one(1, 2.5) \u279e 2.5 compare_one(1, \"2,3\") \u279e \"2,3\" compare_one(\"5,1\", \"6\") \u279e \"6\" compare_one(\"1\", 1) \u279e None"}
{"task_id":"HumanEval\/138","prompt":"def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate given number n can be written as sum of 4 positive even numbers Example is_equal_to_sum_even(4) == False is_equal_to_sum_even(6) == False is_equal_to_sum_even(8) == True\n    \"\"\"\n","raw":"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True","reduced":"Evaluate given number n can be written as sum of 4 positive even numbers Example is_equal_to_sum_even(4) == False is_equal_to_sum_even(6) == False is_equal_to_sum_even(8) == True"}
{"task_id":"HumanEval\/139","prompt":"def special_factorial(n):\n    \"\"\"\n    Brazilian factorial defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For example: >>> special_factorial(4) 288 function will receive integer as input should return special factorial of this integer.\n    \"\"\"\n","raw":"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.","reduced":"Brazilian factorial defined as: brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For example: >>> special_factorial(4) 288 function will receive integer as input should return special factorial of this integer."}
{"task_id":"HumanEval\/140","prompt":"def fix_spaces(text):\n    \"\"\"\n    Given string text, replace all spaces with underscores, if string has more than 2 consecutive spaces, replace all consecutive spaces with - fix_spaces(\"Example\") == \"Example\" fix_spaces(\"Example 1\") == \"Example_1\" fix_spaces(\" Example 2\") == \"_Example_2\" fix_spaces(\" Example 3\") == \"_Example-3\"\n    \"\"\"\n","raw":"Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"","reduced":"Given string text, replace all spaces with underscores, if string has more than 2 consecutive spaces, replace all consecutive spaces with - fix_spaces(\"Example\") == \"Example\" fix_spaces(\"Example 1\") == \"Example_1\" fix_spaces(\" Example 2\") == \"_Example_2\" fix_spaces(\" Example 3\") == \"_Example-3\""}
{"task_id":"HumanEval\/141","prompt":"def file_name_check(file_name):\n    \"\"\"\n    Create a function takes a string representing a file's name, returns 'Yes' if file's name is valid, returns 'No' otherwise. file's name is considered to be valid if only if all the following conditions are met: - should not be more than three digits ('0'-'9') in the file's name. - file's name contains exactly one dot '.' - substring before dot should not be empty, starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - substring after dot should be one of these: ['txt', 'exe', 'dll'] Examples: file_name_check(\"example.txt\") # => 'Yes' file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n","raw":"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)","reduced":"Create a function takes a string representing a file's name, returns 'Yes' if file's name is valid, returns 'No' otherwise. file's name is considered to be valid if only if all the following conditions are met: - should not be more than three digits ('0'-'9') in the file's name. - file's name contains exactly one dot '.' - substring before dot should not be empty, starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - substring after dot should be one of these: ['txt', 'exe', 'dll'] Examples: file_name_check(\"example.txt\") # => 'Yes' file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)"}
{"task_id":"HumanEval\/142","prompt":"def sum_squares(lst):\n    \"\"\"\n    \" This function will take a list of integers. For all entries in the list, function shall square the integer entry if its index is multiple of 3 and will cube the integer entry if index is multiple of 4 and not a multiple of 3. function not change entries in the list whose indexes not a multiple of 3 or 4. function shall then return the sum of all entries. Examples: For lst = [1,2,3] output should be 6 For lst = [] output should be 0 For lst = [-1,-5,2,-1,-5] output should be -126\n    \"\"\"\n","raw":"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126","reduced":"\" This function will take a list of integers. For all entries in the list, function shall square the integer entry if its index is multiple of 3 and will cube the integer entry if index is multiple of 4 and not a multiple of 3. function not change entries in the list whose indexes not a multiple of 3 or 4. function shall then return the sum of all entries. Examples: For lst = [1,2,3] output should be 6 For lst = [] output should be 0 For lst = [-1,-5,2,-1,-5] output should be -126"}
{"task_id":"HumanEval\/143","prompt":"def words_in_sentence(sentence):\n    \"\"\"\n    given a string representing a sentence, sentence contains some words separated by a space, you to return a string that contains words from the original sentence, whose lengths are prime numbers, order of words in the new string should be same as original one. Example 1: Input: sentence = \"This is a test\" Output: \"is\" Example 2: Input: sentence = \"lets go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters\n    \"\"\"\n","raw":"You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters","reduced":"given a string representing a sentence, sentence contains some words separated by a space, you to return a string that contains words from the original sentence, whose lengths are prime numbers, order of words in the new string should be same as original one. Example 1: Input: sentence = \"This is a test\" Output: \"is\" Example 2: Input: sentence = \"lets go for swimming\" Output: \"go for\" Constraints: * 1 <= len(sentence) <= 100 * sentence contains only letters"}
{"task_id":"HumanEval\/144","prompt":"def simplify(x, n):\n    \"\"\"\n    task is to implement a function will simplify expression x * n. function returns True if x * n evaluates to whole number and False otherwise. Both x and n, are string representation of a fraction, have following format, <numerator>\/<denominator> where both numerator and denominator are positive whole numbers. assume x, and n are valid fractions, do not have zero as denominator. simplify(\"1\/5\", \"5\/1\") = True simplify(\"1\/6\", \"2\/1\") = False simplify(\"7\/10\", \"10\/2\") = False\n    \"\"\"\n","raw":"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>\/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1\/5\", \"5\/1\") = True\n    simplify(\"1\/6\", \"2\/1\") = False\n    simplify(\"7\/10\", \"10\/2\") = False","reduced":"task is to implement a function will simplify expression x * n. function returns True if x * n evaluates to whole number and False otherwise. Both x and n, are string representation of a fraction, have following format, <numerator>\/<denominator> where both numerator and denominator are positive whole numbers. assume x, and n are valid fractions, do not have zero as denominator. simplify(\"1\/5\", \"5\/1\") = True simplify(\"1\/6\", \"2\/1\") = False simplify(\"7\/10\", \"10\/2\") = False"}
{"task_id":"HumanEval\/145","prompt":"def order_by_points(nums):\n    \"\"\"\n    Write a function sorts given list of integers in ascending order according to sum of digits. Note: if several items with similar sum digits, order them based on their index in original list. For example: >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points([]) == []\n    \"\"\"\n","raw":"Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []","reduced":"Write a function sorts given list of integers in ascending order according to sum of digits. Note: if several items with similar sum digits, order them based on their index in original list. For example: >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11] >>> order_by_points([]) == []"}
{"task_id":"HumanEval\/146","prompt":"def specialFilter(nums):\n    \"\"\"\n    Write function takes array of numbers as input returns the number of elements in the array greater than 10 and both first and last digits of number are odd (1, 3, 5, 7, 9). For example: specialFilter([15, -73, 14, -15]) => 1 specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n","raw":"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2","reduced":"Write function takes array of numbers as input returns the number of elements in the array greater than 10 and both first and last digits of number are odd (1, 3, 5, 7, 9). For example: specialFilter([15, -73, 14, -15]) => 1 specialFilter([33, -2, -3, 45, 21, 109]) => 2"}
{"task_id":"HumanEval\/147","prompt":"def get_max_triples(n):\n    \"\"\"\n    given positive integer n. to create integer array a of length n. For each i (1 \u2264 i \u2264 n), value of a[i] = i * i - i + 1. Return number of triples (a[i], a[j], a[k]) of a where i < j < k, a[i] + a[j] + a[k] is multiple of 3. Example : Input: n = 5 Output: 1 Explanation: a = [1, 3, 7, 13, 21] only valid triple is (1, 7, 13).\n    \"\"\"\n","raw":"You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).","reduced":"given positive integer n. to create integer array a of length n. For each i (1 \u2264 i \u2264 n), value of a[i] = i * i - i + 1. Return number of triples (a[i], a[j], a[k]) of a where i < j < k, a[i] + a[j] + a[k] is multiple of 3. Example : Input: n = 5 Output: 1 Explanation: a = [1, 3, 7, 13, 21] only valid triple is (1, 7, 13)."}
{"task_id":"HumanEval\/148","prompt":"def bf(planet1, planet2):\n    \"\"\"\n    eight planets in our solar system: closerst to Sun is Mercury, next is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. function should return a tuple containing all planets whose orbits located between orbit of planet1 and orbit of planet2, sorted by proximity to sun. function should return empty tuple if planet1 or planet2 are not correct planet names. Examples bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\") bf(\"Earth\", \"Mercury\") ==> (\"Venus\") bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n","raw":"There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")","reduced":"eight planets in our solar system: closerst to Sun is Mercury, next is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Write a function that takes two planet names as strings planet1 and planet2. function should return a tuple containing all planets whose orbits located between orbit of planet1 and orbit of planet2, sorted by proximity to sun. function should return empty tuple if planet1 or planet2 are not correct planet names. Examples bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\") bf(\"Earth\", \"Mercury\") ==> (\"Venus\") bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id":"HumanEval\/149","prompt":"def sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter, deletes the strings have odd lengths from, returns resulted list with a sorted order, list is always a list of strings and never an array of numbers, it may contain duplicates. order of list should be ascending by length of each word, should return the list sorted by that rule. If two words have the same length, sort list alphabetically. function should return a list of strings in sorted order. may assume all words will have the same length. For example: assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"] assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n","raw":"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]","reduced":"Write a function that accepts a list of strings as a parameter, deletes the strings have odd lengths from, returns resulted list with a sorted order, list is always a list of strings and never an array of numbers, it may contain duplicates. order of list should be ascending by length of each word, should return the list sorted by that rule. If two words have the same length, sort list alphabetically. function should return a list of strings in sorted order. may assume all words will have the same length. For example: assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"] assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]"}
{"task_id":"HumanEval\/150","prompt":"def x_or_y(n, x, y):\n    \"\"\"\n    simple program should return value of x if n is prime number and should return value of y otherwise. Examples: for x_or_y(7, 34, 12) == 34 for x_or_y(15, 8, 5) == 5\n    \"\"\"\n","raw":"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5","reduced":"simple program should return value of x if n is prime number and should return value of y otherwise. Examples: for x_or_y(7, 34, 12) == 34 for x_or_y(15, 8, 5) == 5"}
{"task_id":"HumanEval\/151","prompt":"def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of numbers the list odd. Ignore numbers negative or not integers. double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference([-1, -2, 0]) == 0 double_the_difference([9, -2]) == 81 double_the_difference([0]) == 0 If input list empty, return 0.\n    \"\"\"\n","raw":"Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.","reduced":"Given a list of numbers, return the sum of squares of numbers the list odd. Ignore numbers negative or not integers. double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 double_the_difference([-1, -2, 0]) == 0 double_the_difference([9, -2]) == 81 double_the_difference([0]) == 0 If input list empty, return 0."}
{"task_id":"HumanEval\/152","prompt":"def compare(game,guess):\n    \"\"\"\n    I think we all remember that feeling when the result of long-awaited event is finally known. feelings and thoughts at that moment are worth noting down and comparing. Your task is to determine if a person correctly guessed results of number of matches. You given two arrays of scores and guesses of equal length, each index shows a match. Return an array of same length denoting how far off each guess was. If they guessed correctly, value is 0, and if not, value is the absolute difference between guess and score. example: compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3] compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n","raw":"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]","reduced":"I think we all remember that feeling when the result of long-awaited event is finally known. feelings and thoughts at that moment are worth noting down and comparing. Your task is to determine if a person correctly guessed results of number of matches. You given two arrays of scores and guesses of equal length, each index shows a match. Return an array of same length denoting how far off each guess was. If they guessed correctly, value is 0, and if not, value is the absolute difference between guess and score. example: compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3] compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]"}
{"task_id":"HumanEval\/153","prompt":"def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    You will be given the name of a class (a string) and a list of extensions. extensions to be used to load additional classes to the class. strength of extension is as follows: Let CAP be the number of uppercase letters in extension's name, and let SM be number of lowercase letters in extension's name, strength is given by fraction CAP - SM. should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If two or more extensions with the same strength, choose the one that comes first in the list. For example, if given \"Slices\" as the class and a list of extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1). Example: for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n","raw":"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'","reduced":"You will be given the name of a class (a string) and a list of extensions. extensions to be used to load additional classes to the class. strength of extension is as follows: Let CAP be the number of uppercase letters in extension's name, and let SM be number of lowercase letters in extension's name, strength is given by fraction CAP - SM. should find the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If two or more extensions with the same strength, choose the one that comes first in the list. For example, if given \"Slices\" as the class and a list of extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then should return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension (its strength is -1). Example: for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'"}
{"task_id":"HumanEval\/154","prompt":"def cycpattern_check(a , b):\n    \"\"\"\n    given 2 words need to return True if second word or its rotations is a substring in first word cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check(\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n","raw":"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True","reduced":"given 2 words need to return True if second word or its rotations is a substring in first word cycpattern_check(\"abcd\",\"abd\") => False cycpattern_check(\"hello\",\"ell\") => True cycpattern_check(\"whassup\",\"psus\") => False cycpattern_check(\"abab\",\"baa\") => True cycpattern_check(\"efef\",\"eeff\") => False cycpattern_check(\"himenss\",\"simen\") => True"}
{"task_id":"HumanEval\/155","prompt":"def even_odd_count(num):\n    \"\"\"\n    Given integer. return tuple has number of even and odd digits respectively. Example: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2)\n    \"\"\"\n","raw":"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)","reduced":"Given integer. return tuple has number of even and odd digits respectively. Example: even_odd_count(-12) ==> (1, 1) even_odd_count(123) ==> (1, 2)"}
{"task_id":"HumanEval\/156","prompt":"def int_to_mini_roman(number):\n    \"\"\"\n    Given positive integer obtain roman numeral equivalent as string return in lowercase. Restrictions: 1 <= num <= 1000 Examples: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n","raw":"Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'","reduced":"Given positive integer obtain roman numeral equivalent as string return in lowercase. Restrictions: 1 <= num <= 1000 Examples: >>> int_to_mini_roman(19) == 'xix' >>> int_to_mini_roman(152) == 'clii' >>> int_to_mini_roman(426) == 'cdxxvi'"}
{"task_id":"HumanEval\/157","prompt":"def right_angle_triangle(a, b, c):\n    \"\"\"\n    Given lengths of three sides of a triangle. Return True if three sides form a right-angled triangle, False otherwise. right-angled triangle is triangle in one angle is right angle or 90 degree. Example: right_angle_triangle(3, 4, 5) == True right_angle_triangle(1, 2, 3) == False\n    \"\"\"\n","raw":"Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False","reduced":"Given lengths of three sides of a triangle. Return True if three sides form a right-angled triangle, False otherwise. right-angled triangle is triangle in one angle is right angle or 90 degree. Example: right_angle_triangle(3, 4, 5) == True right_angle_triangle(1, 2, 3) == False"}
{"task_id":"HumanEval\/158","prompt":"def find_max(words):\n    \"\"\"\n    Write function accepts list of strings. list contains different words. Return word with maximum number of unique characters. If multiple strings have maximum number unique characters, return one comes first in lexicographical order. find_max([\"name\", \"of\", \"string\"]) == \"string\" find_max([\"name\", \"enam\", \"game\"]) == \"enam\" find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n","raw":"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"","reduced":"Write function accepts list of strings. list contains different words. Return word with maximum number of unique characters. If multiple strings have maximum number unique characters, return one comes first in lexicographical order. find_max([\"name\", \"of\", \"string\"]) == \"string\" find_max([\"name\", \"enam\", \"game\"]) == \"enam\" find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\""}
{"task_id":"HumanEval\/159","prompt":"def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, already eaten a certain number of carrots, now need to eat more carrots to complete day's meals. you should return an array of [ total number of eaten carrots after meals, number of carrots left after meals ] if not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Example: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number : integer number of carrots eaten. @need : integer number of carrots need to eat. @remaining : integer number of remaining carrots thet exist in stock Constrain: * 0 <= number <= 1000 * 0 <= need <= 1000 * 0 <= remaining <= 1000 Have fun :)\n    \"\"\"\n","raw":"You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)","reduced":"You're a hungry rabbit, already eaten a certain number of carrots, now need to eat more carrots to complete day's meals. you should return an array of [ total number of eaten carrots after meals, number of carrots left after meals ] if not enough remaining carrots, you will eat all remaining carrots, but will still be hungry. Example: * eat(5, 6, 10) -> [11, 4] * eat(4, 8, 9) -> [12, 1] * eat(1, 10, 10) -> [11, 0] * eat(2, 11, 5) -> [7, 0] Variables: @number : integer number of carrots eaten. @need : integer number of carrots need to eat. @remaining : integer number of remaining carrots thet exist in stock Constrain: * 0 <= number <= 1000 * 0 <= need <= 1000 * 0 <= remaining <= 1000 Have fun :)"}
{"task_id":"HumanEval\/160","prompt":"def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. first list has basic algebra operations, second list is list of integers. Use two given lists to build algebric expression return evaluation of expression. basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( \/\/ ) Exponentiation ( ** ) Example: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: length of operator list is equal to length of operand list minus one. Operand is a list of non-negative integers. Operator list has at least one operator, operand list has at least two operands.\n    \"\"\"\n","raw":"Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( \/\/ ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.","reduced":"Given two lists operator, and operand. first list has basic algebra operations, second list is list of integers. Use two given lists to build algebric expression return evaluation of expression. basic algebra operations: Addition ( + ) Subtraction ( - ) Multiplication ( * ) Floor division ( \/\/ ) Exponentiation ( ** ) Example: operator['+', '*', '-'] array = [2, 3, 4, 5] result = 2 + 3 * 4 - 5 => result = 9 Note: length of operator list is equal to length of operand list minus one. Operand is a list of non-negative integers. Operator list has at least one operator, operand list has at least two operands."}
{"task_id":"HumanEval\/161","prompt":"def solve(s):\n    \"\"\"\n    given string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If string contains no letters, reverse string. function should return resulted string. Examples solve(\"1234\") = \"4321\" solve(\"ab\") = \"AB\" solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n","raw":"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"","reduced":"given string s. if s[i] is a letter, reverse its case from lower to upper or vise versa, otherwise keep it as it is. If string contains no letters, reverse string. function should return resulted string. Examples solve(\"1234\") = \"4321\" solve(\"ab\") = \"AB\" solve(\"#a@C\") = \"#A@c\""}
{"task_id":"HumanEval\/162","prompt":"def string_to_md5(text):\n    \"\"\"\n    Given string 'text' return its md5 hash equivalent string. If 'text' empty string return None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n","raw":"Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'","reduced":"Given string 'text' return its md5 hash equivalent string. If 'text' empty string return None. >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'"}
{"task_id":"HumanEval\/163","prompt":"def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b return even digits between a b ascending order example: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => []\n    \"\"\"\n","raw":"Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []","reduced":"Given two positive integers a and b return even digits between a b ascending order example: generate_integers(2, 8) => [2, 4, 6, 8] generate_integers(8, 2) => [2, 4, 6, 8] generate_integers(10, 14) => []"}
