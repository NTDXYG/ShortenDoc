{"task_id":"valid\/0","prompt":"def classify_text(text):\n    \"\"\"\n    Design rule-based system classify text into predefined categories.\n    \"\"\"\n","raw":"Design a rule-based system to classify text into predefined categories.","reduced":"Design rule-based system classify text into predefined categories."}
{"task_id":"valid\/1","prompt":"def create_frozen_set(s):\n    \"\"\"\n    Create frozen set from existing set. Parameters: s (set): The original set. Returns: frozenset: frozen set created from the original set.\n    \"\"\"\n","raw":"Create a frozen set from an existing set.\n    Parameters:\n    s (set): The original set.\n    Returns:\n    frozenset: The frozen set created from the original set.","reduced":"Create frozen set from existing set. Parameters: s (set): The original set. Returns: frozenset: frozen set created from the original set."}
{"task_id":"valid\/2","prompt":"def bitwise_xor(num1, num2):\n    \"\"\"\n    Calculates bitwise XOR two integers. Parameters: num1 (int): first integer value. num2 (int): second integer value. Returns: int: bitwise XOR of num1 and num2. Example: >>> bitwise_xor(5, 3) 6 >>> bitwise_xor(8, 12) 4\n    \"\"\"\n","raw":"Calculates the bitwise XOR of two integers.\n    Parameters:\n    num1 (int): The first integer value.\n    num2 (int): The second integer value.\n    Returns:\n    int: The bitwise XOR of num1 and num2.\n    Example:\n    >>> bitwise_xor(5, 3)\n    6\n    >>> bitwise_xor(8, 12)\n    4","reduced":"Calculates bitwise XOR two integers. Parameters: num1 (int): first integer value. num2 (int): second integer value. Returns: int: bitwise XOR of num1 and num2. Example: >>> bitwise_xor(5, 3) 6 >>> bitwise_xor(8, 12) 4"}
{"task_id":"valid\/3","prompt":"def sort_instruments(instruments):\n    \"\"\"\n    Given the following list of musical instruments, create function sorts returns these instruments in descending order based on their English alphabetic sequence:\n    \"\"\"\n","raw":"Given the following list of musical instruments, create a function that sorts and returns these instruments in descending order based on their English alphabetic sequence:","reduced":"Given the following list of musical instruments, create function sorts returns these instruments in descending order based on their English alphabetic sequence:"}
{"task_id":"valid\/4","prompt":"import json\n\n\ndef convert_json_to_list(json_string):\n    \"\"\"\n    Convert JSON string to list of dictionaries. Parameters: - json_string: JSON string to convert. Returns: - list of dictionaries representing JSON data. Raises - ValueError if input not valid JSON string Example Usage: >>> json_string = '[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]' >>> convert_json_to_list(json_string) [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]\n    \"\"\"\n","raw":"Convert a JSON string to a list of dictionaries.\n    Parameters:\n    - json_string: A JSON string to convert.\n    Returns:\n    - A list of dictionaries representing the JSON data.\n    Raises:\n    - ValueError if the input is not a valid JSON string.\n    Example Usage:\n    >>> json_string = '[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]'\n    >>> convert_json_to_list(json_string)\n    [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]","reduced":"Convert JSON string to list of dictionaries. Parameters: - json_string: JSON string to convert. Returns: - list of dictionaries representing JSON data. Raises - ValueError if input not valid JSON string Example Usage: >>> json_string = '[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]' >>> convert_json_to_list(json_string) [{'name': 'Alice', 'age': 25}, {'name': 'Bob', 'age': 30}]"}
{"task_id":"valid\/5","prompt":"def is_divisible_and_sum_divisible(n):\n    \"\"\"\n    Create function that returns true if number is divisible by 5 and the sum of its digits also divisible by 3. If input is not a number or a negative number, return False.\n    \"\"\"\n","raw":"Create a function that returns true if the number is divisible by 5 and the sum of its digits is also divisible by 3.\n    If the input is not a number or a negative number, return False.","reduced":"Create function that returns true if number is divisible by 5 and the sum of its digits also divisible by 3. If input is not a number or a negative number, return False."}
{"task_id":"valid\/6","prompt":"def discrete_logarithm(n, base):\n    \"\"\"\n    Write a function to return discrete logarithm of a number to given base.\n    \"\"\"\n","raw":"Write a function to return the discrete logarithm of a number to a given base.","reduced":"Write a function to return discrete logarithm of a number to given base."}
{"task_id":"valid\/7","prompt":"import json\nimport pprint\n\n\ndef pretty_print_json(json_str):\n    \"\"\"\n    Formats pretty prints JSON data. Args: json_str (str): JSON string to be pretty printed. Returns: None Raises: ValueError: If provided json_str not a valid JSON string.\n    \"\"\"\n","raw":"Formats and pretty prints JSON data.\n    Args:\n        json_str (str): The JSON string to be pretty printed.\n    Returns:\n        None\n    Raises:\n        ValueError: If the provided json_str is not a valid JSON string.","reduced":"Formats pretty prints JSON data. Args: json_str (str): JSON string to be pretty printed. Returns: None Raises: ValueError: If provided json_str not a valid JSON string."}
{"task_id":"valid\/8","prompt":"def has_consecutive_repeating_chars(s):\n    \"\"\"\n    Check if string contains consecutive repeating characters. Args: s (str): input string to check. Returns: bool: True if string contains consecutive characters, False otherwise.\n    \"\"\"\n","raw":"Check if a string contains consecutive repeating characters.\n    Args:\n        s (str): The input string to check.\n    Returns:\n        bool: True if the string contains consecutive repeating characters, False otherwise.","reduced":"Check if string contains consecutive repeating characters. Args: s (str): input string to check. Returns: bool: True if string contains consecutive characters, False otherwise."}
{"task_id":"valid\/9","prompt":"def replace_placeholders(template, values):\n    \"\"\"\n    You tasked with creating a Python function that processes a template and replaces placeholders with values from given dictionary. template provided as a string with placeholders enclosed in double curly braces, e.g., \"{{placeholder}}\". function should replace these placeholders with corresponding values from the dictionary and return updated template.\n    \"\"\"\n","raw":"You are tasked with creating a Python function that processes a template and replaces placeholders with values from a given dictionary.\n    The template will be provided as a string with placeholders enclosed in double curly braces, e.g., \"{{placeholder}}\".\n    The function should replace these placeholders with corresponding values from the dictionary and return the updated template.","reduced":"You tasked with creating a Python function that processes a template and replaces placeholders with values from given dictionary. template provided as a string with placeholders enclosed in double curly braces, e.g., \"{{placeholder}}\". function should replace these placeholders with corresponding values from the dictionary and return updated template."}
{"task_id":"valid\/10","prompt":"def are_all_characters_unique(string):\n    \"\"\"\n    Generate a code to check whether all characters in given string are unique or not.\n    \"\"\"\n","raw":"Generate a code to check whether all the characters in a given string are unique or not.","reduced":"Generate a code to check whether all characters in given string are unique or not."}
{"task_id":"valid\/11","prompt":"from datetime import datetime, timedelta\n\n\ndef add_days(date_string, days):\n    \"\"\"\n    Add certain number of days to a given date return resulting date. Args: date_string (str): A string representing a date in the format 'YYYY-MM-DD'. days (int): number of days to add to given date. Returns: str: A string representing resulting date in the format 'YYYY-MM-DD'.\n    \"\"\"\n","raw":"Add a certain number of days to a given date and return the resulting date.\n    Args:\n        date_string (str): A string representing a date in the format 'YYYY-MM-DD'.\n        days (int): The number of days to add to the given date.\n    Returns:\n        str: A string representing the resulting date in the format 'YYYY-MM-DD'.","reduced":"Add certain number of days to a given date return resulting date. Args: date_string (str): A string representing a date in the format 'YYYY-MM-DD'. days (int): number of days to add to given date. Returns: str: A string representing resulting date in the format 'YYYY-MM-DD'."}
{"task_id":"valid\/12","prompt":"def eliminate_whitespace(text):\n    \"\"\"\n    Develop a Python function to eliminate whitespace present at the start and finish of provided text segment. Additionally, function should also eliminate extra whitespace between words. Allow function to accept texts of up to 10,000 characters.\n    \"\"\"\n","raw":"Develop a Python function to eliminate the whitespace present at the start and finish of a provided text segment.\n    Additionally, the function should also eliminate any extra whitespace between words.\n    Allow the function to accept texts of up to 10,000 characters.","reduced":"Develop a Python function to eliminate whitespace present at the start and finish of provided text segment. Additionally, function should also eliminate extra whitespace between words. Allow function to accept texts of up to 10,000 characters."}
{"task_id":"valid\/13","prompt":"import string\n\n\ndef normalize_text(text):\n    \"\"\"\n    Implement a function in Python normalizes given text string for natural language processing, considering impact of multilingual data and requirement for handling linguistic variations and irregularities.\n    \"\"\"\n","raw":"Implement a function in Python that normalizes a given text string for natural language processing, considering the impact of multilingual data and the requirement for handling linguistic variations and irregularities.","reduced":"Implement a function in Python normalizes given text string for natural language processing, considering impact of multilingual data and requirement for handling linguistic variations and irregularities."}
{"task_id":"valid\/14","prompt":"import re\n\n\ndef match_words(text, word1, word2):\n    \"\"\"\n    Match a string contains either of two specific words. Parameters: - text (str): input string to be matched. - word1 (str): first word to be matched. - word2 (str): second word to be matched. Returns: - bool: True if string contains either of two words, False otherwise.\n    \"\"\"\n","raw":"Match a string that contains either of two specific words.\n    Parameters:\n    - text (str): The input string to be matched.\n    - word1 (str): The first word to be matched.\n    - word2 (str): The second word to be matched.\n    Returns:\n    - bool: True if the string contains either of the two words, False otherwise.","reduced":"Match a string contains either of two specific words. Parameters: - text (str): input string to be matched. - word1 (str): first word to be matched. - word2 (str): second word to be matched. Returns: - bool: True if string contains either of two words, False otherwise."}
{"task_id":"valid\/15","prompt":"def layer_sum(array):\n    \"\"\"\n    Create a function takes a 2D array returns the sum of individual layers.\n    \"\"\"\n","raw":"Create a function that takes a 2D array and returns the sum of individual layers.","reduced":"Create a function takes a 2D array returns the sum of individual layers."}
{"task_id":"valid\/16","prompt":"def parse_vim_settings(comment: str) -> dict:\n    \"\"\"\n    You given a code snippet contains comment indicating specific settings for Vim text editor. Your task is to write a program that parses this comment and extracts tabstop, expandtab, shiftwidth, and softtabstop values.\n    \"\"\"\n","raw":"You are given a code snippet that contains a comment indicating specific settings for the Vim text editor.\n    Your task is to write a program that parses this comment and extracts the tabstop, expandtab, shiftwidth, and softtabstop values.","reduced":"You given a code snippet contains comment indicating specific settings for Vim text editor. Your task is to write a program that parses this comment and extracts tabstop, expandtab, shiftwidth, and softtabstop values."}
{"task_id":"valid\/17","prompt":"def disassemble_sentence(sentence):\n    \"\"\"\n    Design software function can accept complex linguistic structure, specifically a sentence, as an argument disassemble it into a precisely arranged collection of lexical items, or words.\n    \"\"\"\n","raw":"Design a software function that can accept a complex linguistic structure, specifically a sentence, as an argument and disassemble it into a precisely arranged collection of lexical items, or words.","reduced":"Design software function can accept complex linguistic structure, specifically a sentence, as an argument disassemble it into a precisely arranged collection of lexical items, or words."}
{"task_id":"valid\/18","prompt":"def find_digits_count(num):\n    \"\"\"\n    This function takes integer parameter num returns count of digits in the number using recursion. Parameters: num (int): The integer number to count digits for. Returns: int: count of digits in the number.\n    \"\"\"\n","raw":"This function takes an integer parameter num and returns the count of digits in the number using recursion.\n\n    Parameters:\n    num (int): The integer number to count the digits for.\n\n    Returns:\n    int: The count of digits in the number.","reduced":"This function takes integer parameter num returns count of digits in the number using recursion. Parameters: num (int): The integer number to count digits for. Returns: int: count of digits in the number."}
{"task_id":"valid\/19","prompt":"def reverse_combine_sort(list1, list2):\n    \"\"\"\n    Write function that takes in 2 lists, reverses the elements of each list, combines the elements to output single list, then sorts elements in ascending order.\n    \"\"\"\n","raw":"Write a function that takes in 2 lists, reverses the elements of each list, combines the elements to output a single list, and then sorts the elements in ascending order.","reduced":"Write function that takes in 2 lists, reverses the elements of each list, combines the elements to output single list, then sorts elements in ascending order."}
{"task_id":"valid\/20","prompt":"def replace_all_words(input_string, old_word, new_word):\n    \"\"\"\n    function takes a string as input returns string with all occurrences of specified word replaced with another word. Parameters: input_string (str): input string. old_word (str): word to be replaced. new_word (str): The word to replace with. Returns: str: input string with all occurrences of old_word replaced with new_word.\n    \"\"\"\n","raw":"This function takes a string as input and returns the string with all occurrences of a specified word replaced with another word.\n    Parameters:\n    input_string (str): The input string.\n    old_word (str): The word to be replaced.\n    new_word (str): The word to replace with.\n    Returns:\n    str: The input string with all occurrences of old_word replaced with new_word.","reduced":"function takes a string as input returns string with all occurrences of specified word replaced with another word. Parameters: input_string (str): input string. old_word (str): word to be replaced. new_word (str): The word to replace with. Returns: str: input string with all occurrences of old_word replaced with new_word."}
{"task_id":"valid\/21","prompt":"def square_complex_number(z):\n    \"\"\"\n    Calculate the square of given complex number. Parameters: z (complex): complex number to be squared. Returns: complex: The square of given complex number.\n    \"\"\"\n","raw":"Calculate the square of a given complex number.\n    Parameters:\n        z (complex): The complex number to be squared.\n    Returns:\n        complex: The square of the given complex number.","reduced":"Calculate the square of given complex number. Parameters: z (complex): complex number to be squared. Returns: complex: The square of given complex number."}
{"task_id":"valid\/22","prompt":"def get_nested_dictionary_value(dictionary):\n    \"\"\"\n    Accesses value associated with key \"name\" in the nested dictionary. Args: dictionary (dict): The nested dictionary. Returns: object: The value associated with key \"name\" in nested dictionary. Returns None if key is not found.\n    \"\"\"\n","raw":"Accesses the value associated with the key \"name\" in the nested dictionary.\n    Args:\n        dictionary (dict): The nested dictionary.\n    Returns:\n        object: The value associated with the key \"name\" in the nested dictionary.\n                Returns None if the key is not found.","reduced":"Accesses value associated with key \"name\" in the nested dictionary. Args: dictionary (dict): The nested dictionary. Returns: object: The value associated with key \"name\" in nested dictionary. Returns None if key is not found."}
{"task_id":"valid\/23","prompt":"def struct_to_dict(struct):\n    \"\"\"\n    You tasked with implementing a function that converts a Python data structure into a dictionary. function should handle nested structures and convert them into nested dictionaries. function should be named `struct_to_dict` should take single argument `struct` representing the input data structure. function should return a dictionary representation of input structure.\n    \"\"\"\n","raw":"You are tasked with implementing a function that converts a Python data structure into a dictionary.\n    The function should handle nested structures and convert them into nested dictionaries.\n    The function should be named `struct_to_dict` and should take a single argument `struct` representing the input data structure.\n    The function should return a dictionary representation of the input structure.","reduced":"You tasked with implementing a function that converts a Python data structure into a dictionary. function should handle nested structures and convert them into nested dictionaries. function should be named `struct_to_dict` should take single argument `struct` representing the input data structure. function should return a dictionary representation of input structure."}
{"task_id":"valid\/24","prompt":"def findClosestPalindrome(num):\n    \"\"\"\n    Design a python function that finds closest palindrome to given number.\n    \"\"\"\n","raw":"Design a python function that finds the closest palindrome to a given number.","reduced":"Design a python function that finds closest palindrome to given number."}
{"task_id":"valid\/25","prompt":"def sqrt_calc(num):\n    \"\"\"\n    Generate a python program to calculate square root of number\n    \"\"\"\n","raw":"Generate a python program to calculate the square root of a number","reduced":"Generate a python program to calculate square root of number"}
{"task_id":"valid\/26","prompt":"def matrix_properties(matrix):\n    \"\"\"\n    Design a function that takes in a matrix, finds number of rows and columns, calculates the sum of diagonal elements. Additionally, function should check if input matrix is a square matrix or not (i.e. number of rows is equal to the number of columns). function should return the number of rows, columns, sum of diagonal elements, and a boolean indicating if matrix is square or not.\n    \"\"\"\n","raw":"Design a function that takes in a matrix, finds its number of rows and columns, and calculates the sum of the diagonal elements.\n    Additionally, the function should check if the input matrix is a square matrix or not (i.e.\n    the number of rows is equal to the number of columns).\n    The function should return the number of rows, columns, sum of the diagonal elements, and a boolean indicating if the matrix is square or not.","reduced":"Design a function that takes in a matrix, finds number of rows and columns, calculates the sum of diagonal elements. Additionally, function should check if input matrix is a square matrix or not (i.e. number of rows is equal to the number of columns). function should return the number of rows, columns, sum of diagonal elements, and a boolean indicating if matrix is square or not."}
{"task_id":"valid\/27","prompt":"import base64\n\n\ndef string_to_base64(string):\n    \"\"\"\n    Convert string to Base64 encoding. Parameters: string (str): string to be converted. Returns: str: Base64 encoding of the given string.\n    \"\"\"\n","raw":"Convert a string to Base64 encoding.\n    Parameters:\n    string (str): The string to be converted.\n    Returns:\n    str: The Base64 encoding of the given string.","reduced":"Convert string to Base64 encoding. Parameters: string (str): string to be converted. Returns: str: Base64 encoding of the given string."}
{"task_id":"valid\/28","prompt":"def clean_and_lower_string(s):\n    \"\"\"\n    Devise a programming function to transform given input string into equivalent string in lowercase whilst systematically omitting any characters fall outside of realm of alphabetical categorization.\n    \"\"\"\n","raw":"Devise a programming function to transform a given input string into an equivalent string in lowercase whilst systematically omitting any characters that fall outside of the realm of alphabetical categorization.","reduced":"Devise a programming function to transform given input string into equivalent string in lowercase whilst systematically omitting any characters fall outside of realm of alphabetical categorization."}
{"task_id":"valid\/29","prompt":"def find_minimum(lst):\n    \"\"\"\n    Complete the function so it returns minimum element in the provided list.\n    \"\"\"\n","raw":"Complete the function so that it returns the minimum element in the provided list.","reduced":"Complete the function so it returns minimum element in the provided list."}
{"task_id":"valid\/30","prompt":"import json\n\n\ndef validate_key_value(json_data, key, value):\n    \"\"\"\n    Validate if specific key-value pair not exist in JSON dictionary. Parameters: json_data (str or dict): JSON data either as a string or a Python dictionary. key (str): The key to be checked in the JSON dictionary. value (any): value to be checked against given key in the JSON dictionary. Returns: bool: True if key-value pair not exist in the JSON dictionary, False otherwise.\n    \"\"\"\n","raw":"Validate if a specific key-value pair does not exist in a JSON dictionary.\n\n    Parameters:\n    json_data (str or dict): The JSON data either as a string or a Python dictionary.\n    key (str): The key to be checked in the JSON dictionary.\n    value (any): The value to be checked against the given key in the JSON dictionary.\n\n    Returns:\n    bool: True if the key-value pair does not exist in the JSON dictionary, False otherwise.","reduced":"Validate if specific key-value pair not exist in JSON dictionary. Parameters: json_data (str or dict): JSON data either as a string or a Python dictionary. key (str): The key to be checked in the JSON dictionary. value (any): value to be checked against given key in the JSON dictionary. Returns: bool: True if key-value pair not exist in the JSON dictionary, False otherwise."}
{"task_id":"valid\/31","prompt":"def _make_button_table(buttons, num_columns):\n    \"\"\"\n    You tasked with creating a Python function that generates a table of buttons based on given list of buttons and number of columns to display. Each button should trigger specific action when clicked. Your task is to implement `_make_button_table` function, takes in two parameters:\n    \"\"\"\n","raw":"You are tasked with creating a Python function that generates a table of buttons based on a given list of buttons and the number of columns to display.\n    Each button should trigger a specific action when clicked.\n    Your task is to implement the `_make_button_table` function, which takes in two parameters:","reduced":"You tasked with creating a Python function that generates a table of buttons based on given list of buttons and number of columns to display. Each button should trigger specific action when clicked. Your task is to implement `_make_button_table` function, takes in two parameters:"}
{"task_id":"valid\/32","prompt":"def check_alphabet_order(s):\n    \"\"\"\n    Check if a given string contains all alphabets in a specific order. alphabets must appear consecutively and in the same order as in the English alphabet.\n    \"\"\"\n","raw":"Check if a given string contains all the alphabets in a specific order.\n    The alphabets must appear consecutively and in the same order as they do in the English alphabet.","reduced":"Check if a given string contains all alphabets in a specific order. alphabets must appear consecutively and in the same order as in the English alphabet."}
{"task_id":"valid\/33","prompt":"def larger_num(a, b):\n    \"\"\"\n    Write a function in Python receives two numbers as parameters returns the larger one\n    \"\"\"\n","raw":"Write a function in Python that receives two numbers as parameters and returns the larger one","reduced":"Write a function in Python receives two numbers as parameters returns the larger one"}
{"task_id":"valid\/34","prompt":"def sum_numeric_substrings(ts: str) -> int:\n    \"\"\"\n    You given a string `ts` containing mix of alphabetic characters and digits. Your task is to write a function that extracts all numeric substrings from input string and returns sum of these numeric values.\n    \"\"\"\n","raw":"You are given a string `ts` containing a mix of alphabetic characters and digits.\n    Your task is to write a function that extracts all the numeric substrings from the input string and returns the sum of these numeric values.","reduced":"You given a string `ts` containing mix of alphabetic characters and digits. Your task is to write a function that extracts all numeric substrings from input string and returns sum of these numeric values."}
{"task_id":"valid\/35","prompt":"def convert_last_to_upper(words):\n    \"\"\"\n    Craft a Python function that takes in a list of singular lower-cased English nouns, yields a altered list in which final alphabetic character of each entry converted to its upper-case equivalent.\n    \"\"\"\n","raw":"Craft a Python function that takes in a list of singular lower-cased English nouns, and it yields a altered list in which the final alphabetic character of each entry is converted to its upper-case equivalent.","reduced":"Craft a Python function that takes in a list of singular lower-cased English nouns, yields a altered list in which final alphabetic character of each entry converted to its upper-case equivalent."}
{"task_id":"valid\/36","prompt":"def validate_and_add(arr):\n    \"\"\"\n    Develop a Python function that not only computes the addition of all elements within assigned array, but validates array to ensure it only contains numerical values. array for this task is denoted as follows:\n    \"\"\"\n","raw":"Develop a Python function that not only computes the addition of all elements within an assigned array, but also validates the array to ensure that it only contains numerical values.\n    The array for this task is denoted as follows:","reduced":"Develop a Python function that not only computes the addition of all elements within assigned array, but validates array to ensure it only contains numerical values. array for this task is denoted as follows:"}
{"task_id":"valid\/37","prompt":"import json\n\n\ndef sort_neighborhoods(json_data):\n    \"\"\"\n    You tasked with creating a program that processes a JSON file containing information about various neighborhoods. Each neighborhood entry in JSON file contains a \"name\" field, represents name of neighborhood. Your task is to write a function that takes JSON data as input and returns list of neighborhood names sorted in alphabetical order.\n    \"\"\"\n","raw":"You are tasked with creating a program that processes a JSON file containing information about various neighborhoods.\n    Each neighborhood entry in the JSON file contains a \"name\" field, which represents the name of the neighborhood.\n    Your task is to write a function that takes the JSON data as input and returns a list of neighborhood names sorted in alphabetical order.","reduced":"You tasked with creating a program that processes a JSON file containing information about various neighborhoods. Each neighborhood entry in JSON file contains a \"name\" field, represents name of neighborhood. Your task is to write a function that takes JSON data as input and returns list of neighborhood names sorted in alphabetical order."}
{"task_id":"valid\/38","prompt":"def minAbsSumPair(arr, n):\n    \"\"\"\n    Create python program to carry out following tasks:\n    \"\"\"\n","raw":"Create a python program to carry out the following tasks:","reduced":"Create python program to carry out following tasks:"}
{"task_id":"valid\/39","prompt":"def evaluate_parentheses(p):\n    \"\"\"\n    Create a function to evaluate string of parentheses.\n    \"\"\"\n","raw":"Create a function to evaluate a string of parentheses.","reduced":"Create a function to evaluate string of parentheses."}
{"task_id":"valid\/40","prompt":"def calculate_election_results(votes):\n    \"\"\"\n    Create a program outputs results of an election. Each candidate's name must be a string consisting of only uppercase letters, with maximum length of 10 characters. number of votes for each candidate must be a positive integer not exceeding 1000. total number of votes must be at least 100. program should handle a list of votes, each vote represented as a tuple in the format (candidate_name, number_of_votes). output should be a dictionary containing the candidate names as keys and corresponding vote counts as values., program should calculate and display percentage of votes each candidate received, rounded to two decimal places.\n    \"\"\"\n","raw":"Create a program that outputs the results of an election.\n    Each candidate's name must be a string consisting of only uppercase letters, with a maximum length of 10 characters.\n    The number of votes for each candidate must be a positive integer not exceeding 1000.\n    The total number of votes must be at least 100.\n    The program should handle a list of votes, where each vote is represented as a tuple in the format (candidate_name, number_of_votes).\n    The output should be a dictionary containing the candidate names as keys and their corresponding vote counts as values.\n    Additionally, the program should calculate and display the percentage of votes each candidate received, rounded to two decimal places.","reduced":"Create a program outputs results of an election. Each candidate's name must be a string consisting of only uppercase letters, with maximum length of 10 characters. number of votes for each candidate must be a positive integer not exceeding 1000. total number of votes must be at least 100. program should handle a list of votes, each vote represented as a tuple in the format (candidate_name, number_of_votes). output should be a dictionary containing the candidate names as keys and corresponding vote counts as values., program should calculate and display percentage of votes each candidate received, rounded to two decimal places."}
{"task_id":"valid\/41","prompt":"from datetime import datetime\n\n\ndef date_analyzer(date_string):\n    \"\"\"\n    Develop a function capable of parsing analyzing dates adhering to the DD-MM-YYYY format and DD-MMM-YYYY (where MMM signifies written months). function should not only to parse these dates but should also validate them for feasibility (e.g., disallow dates like 30-Feb-2000 or 31-Apr-2022). If date is valid, function should display it in standardized format (e.g., January 01, 2018); if not, it should raise appropriate error.\n    \"\"\"\n","raw":"Develop a function capable of parsing and analyzing dates adhering to the DD-MM-YYYY format and the DD-MMM-YYYY (where MMM signifies written months).\n    The function should not only be able to parse these dates but should also validate them for feasibility (e.g., disallow dates like 30-Feb-2000 or 31-Apr-2022).\n    If the date is valid, the function should display it in a standardized format (e.g., January 01, 2018); if not, it should raise an appropriate error.","reduced":"Develop a function capable of parsing analyzing dates adhering to the DD-MM-YYYY format and DD-MMM-YYYY (where MMM signifies written months). function should not only to parse these dates but should also validate them for feasibility (e.g., disallow dates like 30-Feb-2000 or 31-Apr-2022). If date is valid, function should display it in standardized format (e.g., January 01, 2018); if not, it should raise appropriate error."}
{"task_id":"valid\/42","prompt":"def is_rename_allowed(oldname, newname, allowed_type):\n    \"\"\"\n    You tasked with implementing a file renaming utility that checks if the new file name has a valid file extension before renaming file. utility should only allow renaming if new file name has valid extension based on predefined list of allowed file types.\n    \"\"\"\n","raw":"You are tasked with implementing a file renaming utility that checks if the new file name has a valid file extension before renaming the file.\n    The utility should only allow renaming if the new file name has a valid extension based on a predefined list of allowed file types.","reduced":"You tasked with implementing a file renaming utility that checks if the new file name has a valid file extension before renaming file. utility should only allow renaming if new file name has valid extension based on predefined list of allowed file types."}
{"task_id":"valid\/43","prompt":"def remove_uneven(lst):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple. Additionally, function should also to handle tuples within tuples and remove uneven elements from them. function should also to handle a mix of integers, floats, and strings. If a string is numeric and even, it should be kept. If it's not numeric or not even, it should be removed.\n    \"\"\"\n","raw":"Write a function to remove uneven elements in the nested mixed tuple.\n    Additionally, the function should also be able to handle tuples within tuples and remove uneven elements from them as well.\n    The function should also be able to handle a mix of integers, floats, and strings.\n    If a string is numeric and even, it should be kept.\n    If it's not numeric or not even, it should be removed.","reduced":"Write a function to remove uneven elements in the nested mixed tuple. Additionally, function should also to handle tuples within tuples and remove uneven elements from them. function should also to handle a mix of integers, floats, and strings. If a string is numeric and even, it should be kept. If it's not numeric or not even, it should be removed."}
{"task_id":"valid\/44","prompt":"def hours_to_minutes(hours):\n    \"\"\"\n    Generate function to convert hours to minutes.\n    \"\"\"\n","raw":"Generate a function to convert hours to minutes.","reduced":"Generate function to convert hours to minutes."}
{"task_id":"valid\/45","prompt":"def count_specific_characters(string, specific_character):\n    \"\"\"\n    How you count number of specific characters in given string, considering both uppercase and lowercase characters as separate entities?\n    \"\"\"\n","raw":"How do you count the number of specific characters in a given string, considering both uppercase and lowercase characters as separate entities?","reduced":"How you count number of specific characters in given string, considering both uppercase and lowercase characters as separate entities?"}
{"task_id":"valid\/46","prompt":"def add_accuracy_to_histogram(histogram_data, generation, accs):\n    \"\"\"\n    You tasked with implementing a logging system for machine learning model training process. system should record the accuracy of model at different generations and store this information in a histogram., current code contains a commented-out line that adds accuracy data to histogram. Your goal is to create a function that takes accuracy data and generation number as input and returns the histogram data with the accuracy values added.\n    \"\"\"\n","raw":"You are tasked with implementing a logging system for a machine learning model training process.\n    The system should record the accuracy of the model at different generations and store this information in a histogram.\n    However, the current code contains a commented-out line that adds the accuracy data to the histogram.\n    Your goal is to create a function that takes the accuracy data and generation number as input and returns the histogram data with the accuracy values added.","reduced":"You tasked with implementing a logging system for machine learning model training process. system should record the accuracy of model at different generations and store this information in a histogram., current code contains a commented-out line that adds accuracy data to histogram. Your goal is to create a function that takes accuracy data and generation number as input and returns the histogram data with the accuracy values added."}
{"task_id":"valid\/47","prompt":"import re\n\n\ndef match_five_alphanumeric(string):\n    \"\"\"\n    Check if string consists of exactly five alphanumeric characters. Arguments: - string: string to be checked. Returns: - True if string matches criteria, False otherwise.\n    \"\"\"\n","raw":"Check if a string consists of exactly five alphanumeric characters.\n    Arguments:\n    - string: The string to be checked.\n    Returns:\n    - True if the string matches the criteria, False otherwise.","reduced":"Check if string consists of exactly five alphanumeric characters. Arguments: - string: string to be checked. Returns: - True if string matches criteria, False otherwise."}
{"task_id":"valid\/48","prompt":"from typing import List\n\n\ndef count_unique_languages(classifiers: List[str]) -> int:\n    \"\"\"\n    You tasked with creating a Python function that processes list of classifiers returns count of unique programming languages specified in classifiers. Each classifier is a string representing a programming language and its version. function should ignore any classifiers that do not match format \"Programming Language :: <language> :: <version>\".\n    \"\"\"\n","raw":"You are tasked with creating a Python function that processes a list of classifiers and returns the count of unique programming languages specified in the classifiers.\n    Each classifier is a string representing a programming language and its version.\n    The function should ignore any classifiers that do not match the format \"Programming Language :: <language> :: <version>\".","reduced":"You tasked with creating a Python function that processes list of classifiers returns count of unique programming languages specified in classifiers. Each classifier is a string representing a programming language and its version. function should ignore any classifiers that do not match format \"Programming Language :: <language> :: <version>\"."}
{"task_id":"valid\/49","prompt":"def arrayInstanceCount(arr):\n    \"\"\"\n    Construct an algorithm that takes a two-dimensional array as an input returns array containing count of instances of each number in the initial array.\n    \"\"\"\n","raw":"Construct an algorithm that takes a two-dimensional array as an input and returns an array containing the count of instances of each number in the initial array.","reduced":"Construct an algorithm that takes a two-dimensional array as an input returns array containing count of instances of each number in the initial array."}
{"task_id":"valid\/50","prompt":"import re\n\n\ndef match_url_to_view(url):\n    \"\"\"\n    You tasked with creating a URL routing system for a video competition website using Python's Django framework. provided code snippet is a part of URL configuration for website. `urlpatterns` list contains two URL patterns, each associated with a specific view function.\n    \"\"\"\n","raw":"You are tasked with creating a URL routing system for a video competition website using Python's Django framework.\n    The provided code snippet is a part of the URL configuration for the website.\n    The `urlpatterns` list contains two URL patterns, each associated with a specific view function.","reduced":"You tasked with creating a URL routing system for a video competition website using Python's Django framework. provided code snippet is a part of URL configuration for website. `urlpatterns` list contains two URL patterns, each associated with a specific view function."}
{"task_id":"valid\/51","prompt":"def insert_at_position(list, item, position):\n    \"\"\"\n    Create an editor to insert an item at given position in given list.\n    \"\"\"\n","raw":"Create an editor to insert an item at a given position in a given list.","reduced":"Create an editor to insert an item at given position in given list."}
{"task_id":"valid\/52","prompt":"def concatenate_string_with_sentence():\n    \"\"\"\n    Concatenates a string with sentence. Returns: - concatenated string.\n    \"\"\"\n","raw":"Concatenates a string with a sentence.\n    Returns:\n    - The concatenated string.","reduced":"Concatenates a string with sentence. Returns: - concatenated string."}
{"task_id":"valid\/53","prompt":"def find_substrings(s):\n    \"\"\"\n    Optimize the following code to improve running time.\n    \"\"\"\n","raw":"Optimize the following code to improve the running time.","reduced":"Optimize the following code to improve running time."}
{"task_id":"valid\/54","prompt":"def calculate_price_sum(list_of_dicts):\n    \"\"\"\n    Calculate aggregated sum of price values across multiple lists of dictionaries. These lists may not only contain \"price\" as key, but also \"price_1\", \"price_2\" up to \"price_n\"., price keys may skip some digits (e.g., may be key \"price_1\" and \"price_3\", but no \"price_2\").\n    \"\"\"\n","raw":"Calculate the aggregated sum of the price values across multiple lists of dictionaries.\n    These lists may not only contain \"price\" as the key, but also \"price_1\", \"price_2\" up to \"price_n\".\n    However, these price keys may skip some digits (e.g., there may be a key \"price_1\" and \"price_3\", but no \"price_2\").","reduced":"Calculate aggregated sum of price values across multiple lists of dictionaries. These lists may not only contain \"price\" as key, but also \"price_1\", \"price_2\" up to \"price_n\"., price keys may skip some digits (e.g., may be key \"price_1\" and \"price_3\", but no \"price_2\")."}
{"task_id":"valid\/55","prompt":"def find_intersection_and_remove(list1, list2):\n    \"\"\"\n    Find intersection between two lists remove common elements from second list. Args: list1 (list): first list. list2 (list): second list. Returns: list: intersection between two lists, with common elements removed from second list. Examples: >>> list1 = [1, 2, 3, 4, 5] >>> list2 = [3, 4, 5, 6, 7] >>> find_intersection_and_remove(list1, list2) [3, 4, 5]\n    \"\"\"\n","raw":"Find the intersection between two lists and remove common elements from the second list.\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n    Returns:\n        list: The intersection between the two lists, with common elements removed from the second list.\n    Examples:\n        >>> list1 = [1, 2, 3, 4, 5]\n        >>> list2 = [3, 4, 5, 6, 7]\n        >>> find_intersection_and_remove(list1, list2)\n        [3, 4, 5]","reduced":"Find intersection between two lists remove common elements from second list. Args: list1 (list): first list. list2 (list): second list. Returns: list: intersection between two lists, with common elements removed from second list. Examples: >>> list1 = [1, 2, 3, 4, 5] >>> list2 = [3, 4, 5, 6, 7] >>> find_intersection_and_remove(list1, list2) [3, 4, 5]"}
{"task_id":"valid\/56","prompt":"def route_request(request_method):\n    \"\"\"\n    You tasked with implementing a simple API routing system for a web application. application has two endpoints: `api_advisor_view` and `api_advisor_view_post`. goal is to create function that can match incoming API requests to appropriate endpoint handler based on request method (GET or POST).\n    \"\"\"\n","raw":"You are tasked with implementing a simple API routing system for a web application.\n    The application has two endpoints: `api_advisor_view` and `api_advisor_view_post`.\n    Your goal is to create a function that can match incoming API requests to the appropriate endpoint handler based on the request method (GET or POST).","reduced":"You tasked with implementing a simple API routing system for a web application. application has two endpoints: `api_advisor_view` and `api_advisor_view_post`. goal is to create function that can match incoming API requests to appropriate endpoint handler based on request method (GET or POST)."}
{"task_id":"valid\/57","prompt":"def gcd_recursive(a, b):\n    \"\"\"\n    Calculate Greatest Common Divisor (GCD) of two positive integers using recursive algorithm. Args: a (int): first positive integer. b (int): second positive integer. Returns: int: GCD of given integers. Raises: ValueError: If either `a` or `b` not a positive integer.\n    \"\"\"\n","raw":"Calculate the Greatest Common Divisor (GCD) of two positive integers using recursive algorithm.\n    Args:\n        a (int): The first positive integer.\n        b (int): The second positive integer.\n    Returns:\n        int: The GCD of the given integers.\n    Raises:\n        ValueError: If either `a` or `b` is not a positive integer.","reduced":"Calculate Greatest Common Divisor (GCD) of two positive integers using recursive algorithm. Args: a (int): first positive integer. b (int): second positive integer. Returns: int: GCD of given integers. Raises: ValueError: If either `a` or `b` not a positive integer."}
{"task_id":"valid\/58","prompt":"def categorize_config_files(file_paths):\n    \"\"\"\n    You working on a configuration management system for large infrastructure. system has a directory structure with various configuration files. Your task is to write a Python function that categorizes configuration files based on their location within directory structure.\n    \"\"\"\n","raw":"You are working on a configuration management system for a large infrastructure.\n    The system has a directory structure with various configuration files.\n    Your task is to write a Python function that categorizes the configuration files based on their location within the directory structure.","reduced":"You working on a configuration management system for large infrastructure. system has a directory structure with various configuration files. Your task is to write a Python function that categorizes configuration files based on their location within directory structure."}
{"task_id":"valid\/59","prompt":"def median_of_five(a, b, c, d, e):\n    \"\"\"\n    Develop program for calculating median of five numbers\n    \"\"\"\n","raw":"Develop a program for calculating the median of five numbers","reduced":"Develop program for calculating median of five numbers"}
{"task_id":"valid\/60","prompt":"def check_unique_list(my_list):\n    \"\"\"\n    Write Python program to check if given list of strings consists only of unique elements.\n    \"\"\"\n","raw":"Write a Python program to check if a given list of strings consists only of unique elements.","reduced":"Write Python program to check if given list of strings consists only of unique elements."}
{"task_id":"valid\/61","prompt":"def calculateTimeDifference(timeStart, timeEnd):\n    \"\"\"\n    You tasked with implementing a function calculates the time difference between two given timestamps. timestamps represented as integers, each integer denotes time in seconds. Your task is to write a function `calculateTimeDifference` that takes two integer parameters `timeStart` and `timeEnd`, representing starting and ending timestamps, and returns the time difference between them in seconds.\n    \"\"\"\n","raw":"You are tasked with implementing a function that calculates the time difference between two given timestamps.\n    The timestamps are represented as integers, where each integer denotes the time in seconds.\n    Your task is to write a function `calculateTimeDifference` that takes two integer parameters `timeStart` and `timeEnd`, representing the starting and ending timestamps, and returns the time difference between them in seconds.","reduced":"You tasked with implementing a function calculates the time difference between two given timestamps. timestamps represented as integers, each integer denotes time in seconds. Your task is to write a function `calculateTimeDifference` that takes two integer parameters `timeStart` and `timeEnd`, representing starting and ending timestamps, and returns the time difference between them in seconds."}
{"task_id":"valid\/62","prompt":"def binary_search_recursive(array, target, start, end):\n    \"\"\"\n    Generate algorithim to implement a recursive binary search.\n    \"\"\"\n","raw":"Generate an algorithim to implement a recursive binary search.","reduced":"Generate algorithim to implement a recursive binary search."}
{"task_id":"valid\/63","prompt":"def next_color(color):\n    \"\"\"\n    You tasked with implementing a simple function that simulates a color-changing mechanism. function takes in a color as input and returns next color in the sequence. sequence of colors is as follows: WHITE -> RED -> GREEN -> BLUE -> WHITE. function should return next color in the sequence based on input color.\n    \"\"\"\n","raw":"You are tasked with implementing a simple function that simulates a color-changing mechanism.\n    The function takes in a color as input and returns the next color in the sequence.\n    The sequence of colors is as follows: WHITE -> RED -> GREEN -> BLUE -> WHITE.\n    The function should return the next color in the sequence based on the input color.","reduced":"You tasked with implementing a simple function that simulates a color-changing mechanism. function takes in a color as input and returns next color in the sequence. sequence of colors is as follows: WHITE -> RED -> GREEN -> BLUE -> WHITE. function should return next color in the sequence based on input color."}
{"task_id":"valid\/64","prompt":"def increment_list_values(list):\n    \"\"\"\n    Using the comments as guide, refactor code to make it more concise.\n    \"\"\"\n","raw":"Using the comments as a guide, refactor the code to make it more concise.","reduced":"Using the comments as guide, refactor code to make it more concise."}
{"task_id":"valid\/65","prompt":"def contains_perfect_squares(start, end):\n    \"\"\"\n    Check if a given range of integers contains numbers are perfect squares. Args: start (int): The starting integer of range, inclusive. end (int): ending integer of range, inclusive. Returns: bool: True if perfect squares in the range, False otherwise.\n    \"\"\"\n","raw":"Check if a given range of integers contains numbers that are perfect squares.\n    Args:\n        start (int): The starting integer of the range, inclusive.\n        end (int): The ending integer of the range, inclusive.\n    Returns:\n        bool: True if there are perfect squares in the range, False otherwise.","reduced":"Check if a given range of integers contains numbers are perfect squares. Args: start (int): The starting integer of range, inclusive. end (int): ending integer of range, inclusive. Returns: bool: True if perfect squares in the range, False otherwise."}
{"task_id":"valid\/66","prompt":"def find_symbol(words, target):\n    \"\"\"\n    Craft technique for pinpointing distinct alphabetic symbol inside a systematically arranged collection of textual strings.\n    \"\"\"\n","raw":"Craft a technique for pinpointing a distinct alphabetic symbol inside a systematically arranged collection of textual strings.","reduced":"Craft technique for pinpointing distinct alphabetic symbol inside a systematically arranged collection of textual strings."}
{"task_id":"valid\/67","prompt":"def sentence_to_words(sentence):\n    \"\"\"\n    Create a function to convert sentence into array of words.\n    \"\"\"\n","raw":"Create a function to convert a sentence into an array of words.","reduced":"Create a function to convert sentence into array of words."}
{"task_id":"valid\/68","prompt":"def print_fruits_keys(dict):\n    \"\"\"\n    Print all keys in given dictionary. Args: dict (dict): dictionary whose keys need to be printed. Returns: None: function does not return anything. Example: >>> fruits = {'apple': 5, 'banana': 3, 'orange': 2} >>> print_fruits_keys(fruits) keys in given dictionary are: apple banana orange\n    \"\"\"\n","raw":"Print all the keys in the given dictionary.\n    Args:\n        dict (dict): The dictionary whose keys need to be printed.\n    Returns:\n        None: This function does not return anything.\n    Example:\n        >>> fruits = {'apple': 5, 'banana': 3, 'orange': 2}\n        >>> print_fruits_keys(fruits)\n        The keys in the given dictionary are:\n        apple\n        banana\n        orange","reduced":"Print all keys in given dictionary. Args: dict (dict): dictionary whose keys need to be printed. Returns: None: function does not return anything. Example: >>> fruits = {'apple': 5, 'banana': 3, 'orange': 2} >>> print_fruits_keys(fruits) keys in given dictionary are: apple banana orange"}
{"task_id":"valid\/69","prompt":"def concatenate_string_with_phrase_fstrings():\n    \"\"\"\n    Concatenates a string with phrase using string interpolation (f-strings). Returns: - concatenated string.\n    \"\"\"\n","raw":"Concatenates a string with a phrase using string interpolation (f-strings).\n    Returns:\n    - The concatenated string.","reduced":"Concatenates a string with phrase using string interpolation (f-strings). Returns: - concatenated string."}
{"task_id":"valid\/70","prompt":"import re\n\n\ndef capitalize_and_remove_special(strings):\n    \"\"\"\n    Generate a function that takes a list of strings returns a list includes the capitalized version of all strings, but also removes any strings contain special characters. Special characters include any characters not alphanumeric or whitespace. function should have a time complexity of O(n), where n is the total number of characters in all input strings.\n    \"\"\"\n","raw":"Generate a function that takes a list of strings and returns a list that includes the capitalized version of all strings, but also removes any strings that contain special characters.\n    Special characters include any characters that are not alphanumeric or whitespace.\n    The function should have a time complexity of O(n), where n is the total number of characters in all the input strings.","reduced":"Generate a function that takes a list of strings returns a list includes the capitalized version of all strings, but also removes any strings contain special characters. Special characters include any characters not alphanumeric or whitespace. function should have a time complexity of O(n), where n is the total number of characters in all input strings."}
{"task_id":"valid\/71","prompt":"def position_of_char(string, char):\n    \"\"\"\n    Suggest python code for detecting position of a character in a string. This function will detect position of a character in a string.\n    \"\"\"\n","raw":"Suggest the python code for detecting the position of a character in a string.\n    This function will detect the position of a character in a string.","reduced":"Suggest python code for detecting position of a character in a string. This function will detect position of a character in a string."}
{"task_id":"valid\/72","prompt":"def extract_bold_text(html_code):\n    \"\"\"\n    Identify all HTML tags for bold text in the given HTML code. You are required to write a program that extracts all bold text from HTML code and outputs the result. You not allowed to use any built-in HTML parsing libraries or functions. program should handle cases where multiple occurrences of bold text in the HTML code and should return all of them.\n    \"\"\"\n","raw":"Identify all the HTML tags for the bold text in the given HTML code.\n    You are required to write a program that extracts all the bold text from the HTML code and outputs the result.\n    You are not allowed to use any built-in HTML parsing libraries or functions.\n    The program should handle cases where there are multiple occurrences of bold text in the HTML code and should return all of them.","reduced":"Identify all HTML tags for bold text in the given HTML code. You are required to write a program that extracts all bold text from HTML code and outputs the result. You not allowed to use any built-in HTML parsing libraries or functions. program should handle cases where multiple occurrences of bold text in the HTML code and should return all of them."}
{"task_id":"valid\/73","prompt":"def vending_machine(item, money_inserted):\n    \"\"\"\n    You tasked with creating a Python function simulates a simple vending machine. vending machine will have a set list of items with corresponding prices. user will input money and select an item to purchase. function should then calculate change to return to the user and update the stock of item purchased.\n    \"\"\"\n","raw":"You are tasked with creating a Python function that simulates a simple vending machine.\n    The vending machine will have a set list of items with corresponding prices.\n    The user will input money and select an item to purchase.\n    The function should then calculate the change to return to the user and update the stock of the item purchased.","reduced":"You tasked with creating a Python function simulates a simple vending machine. vending machine will have a set list of items with corresponding prices. user will input money and select an item to purchase. function should then calculate change to return to the user and update the stock of item purchased."}
{"task_id":"valid\/74","prompt":"def merge_and_remove_duplicates(list1, list2):\n    \"\"\"\n    Merge two lists remove duplicates. Args: list1 (list): first input list. list2 (list): second input list. Returns: list: new list with merged contents of list1 and list2, removing duplicates.\n    \"\"\"\n","raw":"Merge two lists and remove duplicates.\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n    Returns:\n        list: A new list with merged contents of list1 and list2, while removing duplicates.","reduced":"Merge two lists remove duplicates. Args: list1 (list): first input list. list2 (list): second input list. Returns: list: new list with merged contents of list1 and list2, removing duplicates."}
{"task_id":"valid\/75","prompt":"def count_occurances(list, target):\n    \"\"\"\n    Create a function to count number of times element appears in a list.\n    \"\"\"\n","raw":"Create a function to count the number of times an element appears in a list.","reduced":"Create a function to count number of times element appears in a list."}
{"task_id":"valid\/76","prompt":"import base64\n\n\ndef encode_to_base64(string):\n    \"\"\"\n    Create code to encode given string into base64 string.\n    \"\"\"\n","raw":"Create code to encode a given string into a base64 string.","reduced":"Create code to encode given string into base64 string."}
{"task_id":"valid\/77","prompt":"def non_zero_indices(vector):\n    \"\"\"\n    You given a Python code snippet uses the `matplotlib` library to plot a vector. `plt.stem()` function used to create a stem plot of vector `x`. Your task is to write a Python function that takes a list of numbers as input and returns indices of non-zero entries in the vector.\n    \"\"\"\n","raw":"You are given a Python code snippet that uses the `matplotlib` library to plot a vector.\n    The `plt.stem()` function is used to create a stem plot of the vector `x`.\n    Your task is to write a Python function that takes a list of numbers as input and returns the indices of the non-zero entries in the vector.","reduced":"You given a Python code snippet uses the `matplotlib` library to plot a vector. `plt.stem()` function used to create a stem plot of vector `x`. Your task is to write a Python function that takes a list of numbers as input and returns indices of non-zero entries in the vector."}
{"task_id":"valid\/78","prompt":"def assign_and_validate():\n    \"\"\"\n    Design a function that assigns specific value to variable and validates it.\n    \"\"\"\n","raw":"Design a function that assigns a specific value to a variable and validates it.","reduced":"Design a function that assigns specific value to variable and validates it."}
{"task_id":"valid\/79","prompt":"import random\n\n\ndef random_rearrange(word):\n    \"\"\"\n    Rearrange the letters of given word randomly. Parameters: word (str): word to be rearranged. Returns: str: randomly rearranged word.\n    \"\"\"\n","raw":"Rearrange the letters of a given word randomly.\n    Parameters:\n    word (str): The word to be rearranged.\n    Returns:\n    str: The randomly rearranged word.","reduced":"Rearrange the letters of given word randomly. Parameters: word (str): word to be rearranged. Returns: str: randomly rearranged word."}
{"task_id":"valid\/80","prompt":"def classify_element(element):\n    \"\"\"\n    Construct function to classify element based on its type.\n    \"\"\"\n","raw":"Construct a function to classify an element based on its type.","reduced":"Construct function to classify element based on its type."}
{"task_id":"valid\/81","prompt":"def merge_duplicates(arr):\n    \"\"\"\n    Write a code to detect merge consecutive duplicate elements in given sorted array\n    \"\"\"\n","raw":"Write a code to detect and merge consecutive duplicate elements in a given sorted array","reduced":"Write a code to detect merge consecutive duplicate elements in given sorted array"}
{"task_id":"valid\/82","prompt":"import re\n\n\ndef tokenizeText(text):\n    \"\"\"\n    Create text tokenizer using regular expression in Python.\n    \"\"\"\n","raw":"Create a text tokenizer using regular expression in Python.","reduced":"Create text tokenizer using regular expression in Python."}
{"task_id":"valid\/83","prompt":"def find_divisible_numbers(numbers):\n    \"\"\"\n    Given a list of integers, find all numbers divisible by both 3 and 7. Calculate the average of these numbers and display it. Find maximum and minimum values among these numbers and display them well. Additionally, display number of occurrences of each unique number divisible by both 3 and 7 in list.\n    \"\"\"\n","raw":"Given a list of integers, find all the numbers that are divisible by both 3 and 7.\n    Calculate the average of these numbers and display it.\n    Find the maximum and minimum values among these numbers and display them as well.\n    Additionally, display the number of occurrences of each unique number divisible by both 3 and 7 in the list.","reduced":"Given a list of integers, find all numbers divisible by both 3 and 7. Calculate the average of these numbers and display it. Find maximum and minimum values among these numbers and display them well. Additionally, display number of occurrences of each unique number divisible by both 3 and 7 in list."}
{"task_id":"valid\/84","prompt":"def find_highest_frequency(sentence):\n    \"\"\"\n    Formulate a program to search and return word with highest frequency in a sentence.\n    \"\"\"\n","raw":"Formulate a program to search and return the word with the highest frequency in a sentence.","reduced":"Formulate a program to search and return word with highest frequency in a sentence."}
{"task_id":"valid\/85","prompt":"import math\n\n\ndef calculate_euler(decimal_places):\n    \"\"\"\n    function calculates the value of Euler's number (e) to given decimal place. Args: decimal_places (int): number of decimal places to which e should be calculated. Returns: float: value of Euler's number (e) to specified number of decimal places.\n    \"\"\"\n","raw":"This function calculates the value of Euler's number (e) to a given decimal place.\n\n    Args:\n        decimal_places (int): The number of decimal places to which e should be calculated.\n\n    Returns:\n        float: The value of Euler's number (e) to the specified number of decimal places.","reduced":"function calculates the value of Euler's number (e) to given decimal place. Args: decimal_places (int): number of decimal places to which e should be calculated. Returns: float: value of Euler's number (e) to specified number of decimal places."}
{"task_id":"valid\/86","prompt":"def getAverageAndSum(numbers):\n    \"\"\"\n    Create a function which takes a list of numbers and returns the average of numbers in list and sum of the numbers in the list.\n    \"\"\"\n","raw":"Create a function which takes a list of numbers and returns the average of the numbers in the list and the sum of the numbers in the list.","reduced":"Create a function which takes a list of numbers and returns the average of numbers in list and sum of the numbers in the list."}
{"task_id":"valid\/87","prompt":"def find_min_max_values(time_series):\n    \"\"\"\n    Find minimum and maximum values in given time series. Args: time_series (list): A list of numerical values representing time series. Returns: tuple: A tuple containing minimum and maximum values in time series. Raises: ValueError: If time series is empty or contains non-numerical values.\n    \"\"\"\n","raw":"Find the minimum and maximum values in a given time series.\n    Args:\n        time_series (list): A list of numerical values representing the time series.\n    Returns:\n        tuple: A tuple containing the minimum and maximum values in the time series.\n    Raises:\n        ValueError: If the time series is empty or contains non-numerical values.","reduced":"Find minimum and maximum values in given time series. Args: time_series (list): A list of numerical values representing time series. Returns: tuple: A tuple containing minimum and maximum values in time series. Raises: ValueError: If time series is empty or contains non-numerical values."}
{"task_id":"valid\/88","prompt":"def relatedArticles_count(encyclopedia):\n    \"\"\"\n    Given an \"encyclopedia\" as your input, design algorithm determines the number of related articles each entry in encyclopedia has. encyclopedia will be in this format:\n    \"\"\"\n","raw":"Given an \"encyclopedia\" as your input, design an algorithm that determines the number of related articles each entry in the encyclopedia has.\n    The encyclopedia will be in this format:","reduced":"Given an \"encyclopedia\" as your input, design algorithm determines the number of related articles each entry in encyclopedia has. encyclopedia will be in this format:"}
{"task_id":"valid\/89","prompt":"def find_largest_index(lst):\n    \"\"\"\n    Given list of integers, write a Python program to find the index of largest number.\n    \"\"\"\n","raw":"Given a list of integers, write a Python program to find the index of the largest number.","reduced":"Given list of integers, write a Python program to find the index of largest number."}
{"task_id":"valid\/90","prompt":"def have_common_element(list1, list2):\n    \"\"\"\n    Check if two lists have at least one common element. Args: list1 (list): first list. list2 (list): second list. Returns: bool: True if lists have least one common element, False otherwise.\n    \"\"\"\n","raw":"Check if two lists have at least one common element.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        bool: True if the lists have at least one common element, False otherwise.","reduced":"Check if two lists have at least one common element. Args: list1 (list): first list. list2 (list): second list. Returns: bool: True if lists have least one common element, False otherwise."}
{"task_id":"valid\/91","prompt":"from xml.etree.ElementTree import Element, tostring\n\n\ndef dict_to_xml(dictionary):\n    \"\"\"\n    Convert Python dictionary object into XML string representation. Args: dictionary (dict): input dictionary object. Returns: str: XML string representation of dictionary. Example: >>> dictionary = {'name': 'John' 'age': 30 'city': 'New York'} >>> xml_string = dict_to_xml(dictionary) >>> print(xml_string) <data> <name>John<\/name <age>30<\/age <city>New York<\/city <\/data\n    \"\"\"\n","raw":"Convert a Python dictionary object into an XML string representation.\n    Args:\n        dictionary (dict): The input dictionary object.\n    Returns:\n        str: The XML string representation of the dictionary.\n    Example:\n        >>> dictionary = {'name': 'John', 'age': 30, 'city': 'New York'}\n        >>> xml_string = dict_to_xml(dictionary)\n        >>> print(xml_string)\n        <data>\n            <name>John<\/name>\n            <age>30<\/age>\n            <city>New York<\/city>\n        <\/data>","reduced":"Convert Python dictionary object into XML string representation. Args: dictionary (dict): input dictionary object. Returns: str: XML string representation of dictionary. Example: >>> dictionary = {'name': 'John' 'age': 30 'city': 'New York'} >>> xml_string = dict_to_xml(dictionary) >>> print(xml_string) <data> <name>John<\/name <age>30<\/age <city>New York<\/city <\/data"}
{"task_id":"valid\/92","prompt":"def searchInMatrix(matrix, target):\n    \"\"\"\n    I faced with a challenge requires me to devise an efficient algorithm. algorithm's purpose is to locate specific value within a two-dimensional matrix of dimensions `m x n`. matrix is characterized by the following attributes:\n    \"\"\"\n","raw":"I am faced with a challenge that requires me to devise an efficient algorithm.\n    The algorithm's purpose is to locate a specific value within a two-dimensional matrix of dimensions `m x n`.\n    The matrix is characterized by the following attributes:","reduced":"I faced with a challenge requires me to devise an efficient algorithm. algorithm's purpose is to locate specific value within a two-dimensional matrix of dimensions `m x n`. matrix is characterized by the following attributes:"}
{"task_id":"valid\/93","prompt":"def sum_and_average_odd_elements(lst):\n    \"\"\"\n    Use a for loop to add up all odd elements in a list then find the average of these odd elements. Additionally, you not allowed to use any built-in functions for calculating sum or average of elements in the list, and not allowed to use modulus operator (%) to check if a number is odd. size of list will be at least 1000 elements.\n    \"\"\"\n","raw":"Use a for loop to add up all odd elements in a list and then find the average of these odd elements.\n    Additionally, you are not allowed to use any built-in functions for calculating the sum or average of elements in the list, and you are not allowed to use the modulus operator (%) to check if a number is odd.\n    The size of the list will be at least 1000 elements.","reduced":"Use a for loop to add up all odd elements in a list then find the average of these odd elements. Additionally, you not allowed to use any built-in functions for calculating sum or average of elements in the list, and not allowed to use modulus operator (%) to check if a number is odd. size of list will be at least 1000 elements."}
{"task_id":"valid\/94","prompt":"def nth_largest_element(lst, n):\n    \"\"\"\n    Find nth largest element from given list. Parameters: lst (list): list elements. n (int): position of element to find (1-indexed). Returns: int or None: nth largest element or None if n out of range Examples: >>> lst = [9, 4, 7, 2, 1, 5] >>> nth_largest_element(lst, 3) 5 >>> lst = [2, 1, 1, 4, 3, 5] >>> nth_largest_element(lst, 5) 1\n    \"\"\"\n","raw":"Find the nth largest element from a given list.\n    Parameters:\n    lst (list): The list of elements.\n    n (int): The position of the element to find (1-indexed).\n    Returns:\n    int or None: The nth largest element, or None if n is out of range.\n    Examples:\n    >>> lst = [9, 4, 7, 2, 1, 5]\n    >>> nth_largest_element(lst, 3)\n    5\n    >>> lst = [2, 1, 1, 4, 3, 5]\n    >>> nth_largest_element(lst, 5)\n    1","reduced":"Find nth largest element from given list. Parameters: lst (list): list elements. n (int): position of element to find (1-indexed). Returns: int or None: nth largest element or None if n out of range Examples: >>> lst = [9, 4, 7, 2, 1, 5] >>> nth_largest_element(lst, 3) 5 >>> lst = [2, 1, 1, 4, 3, 5] >>> nth_largest_element(lst, 5) 1"}
{"task_id":"valid\/95","prompt":"from functools import partial\n\n\ndef sum_list_elements(lst):\n    \"\"\"\n    Calculates sum of all elements in a list. Args: lst (list): input list of elements. Returns: int or float: sum of all elements in list.\n    \"\"\"\n","raw":"Calculates the sum of all elements in a list.\n    Args:\n        lst (list): The input list of elements.\n    Returns:\n        int or float: The sum of all elements in the list.","reduced":"Calculates sum of all elements in a list. Args: lst (list): input list of elements. Returns: int or float: sum of all elements in list."}
{"task_id":"valid\/96","prompt":"def find_exclusive_elements(set_a, set_b):\n    \"\"\"\n    Find the set of elements only in one sets (exclusive elements). Args: set_a (set): Set A set_b (set): Set B Returns: set: Exclusive elements between set A and set B\n    \"\"\"\n","raw":"Find the set of elements that are only in one of the sets (exclusive elements).\n    Args:\n        set_a (set): Set A\n        set_b (set): Set B\n\n    Returns:\n        set: Exclusive elements between set A and set B","reduced":"Find the set of elements only in one sets (exclusive elements). Args: set_a (set): Set A set_b (set): Set B Returns: set: Exclusive elements between set A and set B"}
{"task_id":"valid\/97","prompt":"def create_discord_bot_description(mapping):\n    \"\"\"\n    You tasked with creating a Discord bot can manage and play music in a server. bot should have ability to provide information about its features and web app for managing personal playlists and server settings. Additionally, bot should be able to categorize commands and provide help information for each command.\n    \"\"\"\n","raw":"You are tasked with creating a Discord bot that can manage and play music in a server.\n    The bot should have the ability to provide information about its features and a web app for managing personal playlists and server settings.\n    Additionally, the bot should be able to categorize commands and provide help information for each command.","reduced":"You tasked with creating a Discord bot can manage and play music in a server. bot should have ability to provide information about its features and web app for managing personal playlists and server settings. Additionally, bot should be able to categorize commands and provide help information for each command."}
{"task_id":"valid\/98","prompt":"def dec_to_ternary(n):\n    \"\"\"\n    Create Python function converts decimal numbers to ternary (base 3) representation for given range, and handles negative input values by returning absolute ternary representations.\n    \"\"\"\n","raw":"Create a Python function that converts decimal numbers to ternary (base 3) representation for a given range, and handles negative input values by returning their absolute ternary representations.","reduced":"Create Python function converts decimal numbers to ternary (base 3) representation for given range, and handles negative input values by returning absolute ternary representations."}
{"task_id":"valid\/99","prompt":"def get_file_extensions(*file_names):\n    \"\"\"\n    Generate tuple with file extensions of given filenames. Parameters: file_names (str): Variable length argument representing filenames. Returns: tuple: Tuple containing file extensions of given filenames. Example: >>> get_file_extensions('file1.txt', 'file2.py' 'file3.jpg' 'file4.docx') ('txt', 'py', 'jpg', 'docx')\n    \"\"\"\n","raw":"Generate a tuple with the file extensions of given filenames.\n    Parameters:\n    file_names (str): Variable length argument, representing the filenames.\n    Returns:\n    tuple: Tuple containing the file extensions of the given filenames.\n    Example:\n    >>> get_file_extensions('file1.txt', 'file2.py', 'file3.jpg', 'file4.docx')\n    ('txt', 'py', 'jpg', 'docx')","reduced":"Generate tuple with file extensions of given filenames. Parameters: file_names (str): Variable length argument representing filenames. Returns: tuple: Tuple containing file extensions of given filenames. Example: >>> get_file_extensions('file1.txt', 'file2.py' 'file3.jpg' 'file4.docx') ('txt', 'py', 'jpg', 'docx')"}
{"task_id":"valid\/100","prompt":"def ageClassifier(age):\n    \"\"\"\n    You given a number `g` represents age of a person. Your task is to write a function `ageClassifier` that categorizes age into different groups based on the following criteria:\n    \"\"\"\n","raw":"You are given a number `g` which represents the age of a person.\n    Your task is to write a function `ageClassifier` that categorizes the age into different groups based on the following criteria:","reduced":"You given a number `g` represents age of a person. Your task is to write a function `ageClassifier` that categorizes age into different groups based on the following criteria:"}
{"task_id":"valid\/101","prompt":"def calculate_grade_and_gpa(numerical_grade):\n    \"\"\"\n    By implementing ternary operator, determine letter grade of a student based on inputted numerical grade. Additionally, calculate grade point equivalent (GPA on a scale of 4.0) for given numerical grade.\n    \"\"\"\n","raw":"By implementing a ternary operator, determine the letter grade of a student based on the inputted numerical grade.\n    Additionally, calculate the grade point equivalent (GPA on a scale of 4.0) for the given numerical grade.","reduced":"By implementing ternary operator, determine letter grade of a student based on inputted numerical grade. Additionally, calculate grade point equivalent (GPA on a scale of 4.0) for given numerical grade."}
{"task_id":"valid\/102","prompt":"def total_price(listing):\n    \"\"\"\n    Automatically generate most of code for a function that takes in an online grocery listing and outputs the total price of all items in list.\n    \"\"\"\n","raw":"Automatically generate most of the code for a function that takes in an online grocery listing and outputs the total price of all the items in the list.","reduced":"Automatically generate most of code for a function that takes in an online grocery listing and outputs the total price of all items in list."}
{"task_id":"valid\/103","prompt":"def count_vowels_in_palindromes(palindrome_tuples):\n    \"\"\"\n    Devise a Python function receives as input parameters a tuple of palindrome strings. function should generate a dictionary, where palindrome string keys correlated with corresponding values, represented by the accumulated count of vowels ('a', 'e', 'i', 'o', 'u') embedded within these keys. task requires comprehension of palindrome structures, dictionary formulation, and vowel recognition.\n    \"\"\"\n","raw":"Devise a Python function that receives as input parameters a tuple made up of palindrome strings.\n    This function should generate a dictionary, where the palindrome string keys are correlated with their corresponding values, represented by the accumulated count of vowels ('a', 'e', 'i', 'o', 'u') embedded within these keys.\n    This task requires comprehension of palindrome structures, dictionary formulation, and vowel recognition.","reduced":"Devise a Python function receives as input parameters a tuple of palindrome strings. function should generate a dictionary, where palindrome string keys correlated with corresponding values, represented by the accumulated count of vowels ('a', 'e', 'i', 'o', 'u') embedded within these keys. task requires comprehension of palindrome structures, dictionary formulation, and vowel recognition."}
{"task_id":"valid\/104","prompt":"def stringmethod(s):\n    \"\"\"\n    You tasked with implementing a custom string method performs specific operation on a given string. method should take a string as input and return a modified version of string based on the following rules:\n    \"\"\"\n","raw":"You are tasked with implementing a custom string method that performs a specific operation on a given string.\n    The method should take a string as input and return a modified version of the string based on the following rules:","reduced":"You tasked with implementing a custom string method performs specific operation on a given string. method should take a string as input and return a modified version of string based on the following rules:"}
{"task_id":"valid\/105","prompt":"def has_zero_sum(arr):\n    \"\"\"\n    Given an array of integers, write a program checks if any two numbers in array sum to 0. If a pair of numbers sums to 0 exists, program should return True; otherwise, should return False.\n    \"\"\"\n","raw":"Given an array of integers, write a program that checks if any two numbers in the array sum to 0.\n    If a pair of numbers that sums to 0 exists, the program should return True; otherwise, it should return False.","reduced":"Given an array of integers, write a program checks if any two numbers in array sum to 0. If a pair of numbers sums to 0 exists, program should return True; otherwise, should return False."}
{"task_id":"valid\/106","prompt":"def extract_latest_versions(dependencies):\n    \"\"\"\n    You tasked with implementing a Python function that processes a list of dependencies and extracts the latest version for each dependency. Each dependency represented as a tuple containing package name and version number in the format ('package_name', 'version_number'). version number follows pattern '000X_auto_YYYYMMDD_HHMM', where X is a numerical identifier and YYYYMMDD_HHMM represents date and time of version.\n    \"\"\"\n","raw":"You are tasked with implementing a Python function that processes a list of dependencies and extracts the latest version for each dependency.\n    Each dependency is represented as a tuple containing the package name and the version number in the format ('package_name', 'version_number').\n    The version number follows the pattern '000X_auto_YYYYMMDD_HHMM', where X is a numerical identifier and YYYYMMDD_HHMM represents the date and time of the version.","reduced":"You tasked with implementing a Python function that processes a list of dependencies and extracts the latest version for each dependency. Each dependency represented as a tuple containing package name and version number in the format ('package_name', 'version_number'). version number follows pattern '000X_auto_YYYYMMDD_HHMM', where X is a numerical identifier and YYYYMMDD_HHMM represents date and time of version."}
{"task_id":"valid\/107","prompt":"def categorize_causes_of_death(causes):\n    \"\"\"\n    You tasked with creating a program to analyze list of unusual and bizarre causes of death. Each cause of death is represented as a string in the format \"action result\", where action is what the person was doing and result is unfortunate outcome. Your program should categorize causes of death into different groups based on action performed.\n    \"\"\"\n","raw":"You are tasked with creating a program to analyze a list of unusual and bizarre causes of death.\n    Each cause of death is represented as a string in the format \"action result\", where the action is what the person was doing and the result is the unfortunate outcome.\n    Your program should categorize the causes of death into different groups based on the action performed.","reduced":"You tasked with creating a program to analyze list of unusual and bizarre causes of death. Each cause of death is represented as a string in the format \"action result\", where action is what the person was doing and result is unfortunate outcome. Your program should categorize causes of death into different groups based on action performed."}
{"task_id":"valid\/108","prompt":"def generate_code_name(name):\n    \"\"\"\n    You tasked with creating a Python function that generates a unique code name for a user based on their input name. code name should be created by replacing spaces in input name with hyphens and converting entire name to lowercase. Your task is to implement `generate_code_name` function takes a string `name` as input and returns code name as a string.\n    \"\"\"\n","raw":"You are tasked with creating a Python function that generates a unique code name for a user based on their input name.\n    The code name should be created by replacing any spaces in the input name with hyphens and converting the entire name to lowercase.\n    Your task is to implement the `generate_code_name` function that takes a string `name` as input and returns the code name as a string.","reduced":"You tasked with creating a Python function that generates a unique code name for a user based on their input name. code name should be created by replacing spaces in input name with hyphens and converting entire name to lowercase. Your task is to implement `generate_code_name` function takes a string `name` as input and returns code name as a string."}
{"task_id":"valid\/109","prompt":"def detect_non_ascii(text):\n    \"\"\"\n    Provide a solution to detect non-ASCII characters in given text string.\n    \"\"\"\n","raw":"Provide a solution to detect any non-ASCII characters in a given text string.","reduced":"Provide a solution to detect non-ASCII characters in given text string."}
{"task_id":"valid\/110","prompt":"def remove_punctuations(string):\n    \"\"\"\n    Create program to remove punctuation marks from given string.\n    \"\"\"\n","raw":"Create a program to remove punctuation marks from a given string.","reduced":"Create program to remove punctuation marks from given string."}
{"task_id":"valid\/111","prompt":"def raise_power(num_list, exp):\n    \"\"\"\n    Debug and modify the following code to include exception handling and print correct output., create a function that will take a list and exponent value as inputs return a list with each element raised to given exponent. code is:\n    \"\"\"\n","raw":"Debug and modify the following code to include exception handling and print the correct output.\n    Also, create a function that will take a list and exponent value as inputs and return a list with each element raised to the given exponent.\n    The code is:","reduced":"Debug and modify the following code to include exception handling and print correct output., create a function that will take a list and exponent value as inputs return a list with each element raised to given exponent. code is:"}
{"task_id":"valid\/112","prompt":"def print_min_values(grid):\n    \"\"\"\n    You given a list of lists, each inner list represents a row of a 2D grid. Your task is to write a function that returns minimum value from each row and prints them in order they appear in grid.\n    \"\"\"\n","raw":"You are given a list of lists, where each inner list represents a row of a 2D grid.\n    Your task is to write a function that returns the minimum value from each row and prints them in the order they appear in the grid.","reduced":"You given a list of lists, each inner list represents a row of a 2D grid. Your task is to write a function that returns minimum value from each row and prints them in order they appear in grid."}
{"task_id":"valid\/113","prompt":"def print_thank_you(n, current_num=0):\n    \"\"\"\n    Write recursive function to output \"Thank you\" for the first 'n' even numbers, where 'n' is user-provided input. function should also handle input validation to ensure only positive integer values accepted.\n    \"\"\"\n","raw":"Write a recursive function to output \"Thank you\" for the first 'n' even numbers, where 'n' is a user-provided input.\n    The function should also handle input validation to ensure only positive integer values are accepted.","reduced":"Write recursive function to output \"Thank you\" for the first 'n' even numbers, where 'n' is user-provided input. function should also handle input validation to ensure only positive integer values accepted."}
{"task_id":"valid\/114","prompt":"def count_consecutive_occurrences(lst, element):\n    \"\"\"\n    Counts number of times a particular element occurs consecutively in a list. Args: lst (list): input list. element: element to count. Returns: int: number of consecutive occurrences of element in the list.\n    \"\"\"\n","raw":"Counts the number of times a particular element occurs consecutively in a list.\n    Args:\n        lst (list): The input list.\n        element: The element to count.\n    Returns:\n        int: The number of consecutive occurrences of the element in the list.","reduced":"Counts number of times a particular element occurs consecutively in a list. Args: lst (list): input list. element: element to count. Returns: int: number of consecutive occurrences of element in the list."}
{"task_id":"valid\/115","prompt":"from functools import partial\n\n\ndef check_repdigit(num, base=10):\n    \"\"\"\n    Check if given number is a repdigit number. Parameters: num (int): number to be checked. base (int, optional): base in to interpret number (default is 10). Returns: bool: True if number is repdigit, False otherwise. Notes: A repdigit number is a positive number in given base, where all digits in number are same. For example, in base 10, 1111, 222, 99 are repdigit numbers, while 1234 and 101 are not. Examples: >>> check_repdigit(1111) True >>> check_repdigit(1234) False >>> check_repdigit(101, base=2) True\n    \"\"\"\n","raw":"Check if a given number is a repdigit number.\n    Parameters:\n        num (int): The number to be checked.\n        base (int, optional): The base in which to interpret the number (default is 10).\n    Returns:\n        bool: True if the number is a repdigit, False otherwise.\n    Notes:\n        A repdigit number is a positive number in a given base, where all the digits in the number are the same.\n        For example, in base 10, 1111, 222, and 99 are repdigit numbers, while 1234 and 101 are not.\n    Examples:\n        >>> check_repdigit(1111)\n        True\n        >>> check_repdigit(1234)\n        False\n        >>> check_repdigit(101, base=2)\n        True","reduced":"Check if given number is a repdigit number. Parameters: num (int): number to be checked. base (int, optional): base in to interpret number (default is 10). Returns: bool: True if number is repdigit, False otherwise. Notes: A repdigit number is a positive number in given base, where all digits in number are same. For example, in base 10, 1111, 222, 99 are repdigit numbers, while 1234 and 101 are not. Examples: >>> check_repdigit(1111) True >>> check_repdigit(1234) False >>> check_repdigit(101, base=2) True"}
{"task_id":"valid\/116","prompt":"def remove_vowels_recursive(s):\n    \"\"\"\n    Write a function takes as input a string returns a new string with all vowels removed. function should have a time complexity of O(n), where n is length of input string, and should use constant space complexity. Additionally, function should handle both uppercase and lowercase vowels, any occurrence of a vowel should be removed regardless of its position in the word. Implement the function recursively.\n    \"\"\"\n","raw":"Write a function that takes as input a string and returns a new string with all the vowels removed.\n    The function should have a time complexity of O(n), where n is the length of the input string, and should use constant space complexity.\n    Additionally, the function should handle both uppercase and lowercase vowels, and any occurrence of a vowel should be removed regardless of its position in the word.\n    Implement the function recursively.","reduced":"Write a function takes as input a string returns a new string with all vowels removed. function should have a time complexity of O(n), where n is length of input string, and should use constant space complexity. Additionally, function should handle both uppercase and lowercase vowels, any occurrence of a vowel should be removed regardless of its position in the word. Implement the function recursively."}
{"task_id":"valid\/117","prompt":"def generate_cli_help(options):\n    \"\"\"\n    You tasked with creating a command-line interface (CLI) for a new application. CLI should accept various options and arguments to customize behavior of application. Your goal is to implement a function that generates a help message for CLI based on list of option tuples. Each tuple contains option name and its description.\n    \"\"\"\n","raw":"You are tasked with creating a command-line interface (CLI) for a new application.\n    The CLI should accept various options and arguments to customize the behavior of the application.\n    Your goal is to implement a function that generates a help message for the CLI based on a list of option tuples.\n    Each tuple contains the option name and its description.","reduced":"You tasked with creating a command-line interface (CLI) for a new application. CLI should accept various options and arguments to customize behavior of application. Your goal is to implement a function that generates a help message for CLI based on list of option tuples. Each tuple contains option name and its description."}
{"task_id":"valid\/118","prompt":"def get_first_character(input_string):\n    \"\"\"\n    This function takes a string as input returns the first character of string. Parameters: input_string (str): The input string. Returns: str: first character of input string.\n    \"\"\"\n","raw":"This function takes a string as input and returns the first character of the string.\n    Parameters:\n    input_string (str): The input string.\n    Returns:\n    str: The first character of the input string.","reduced":"This function takes a string as input returns the first character of string. Parameters: input_string (str): The input string. Returns: str: first character of input string."}
{"task_id":"valid\/119","prompt":"def count_val(Val):\n    \"\"\"\n    Write a function to generate a table of counts of given value in input array.\n    \"\"\"\n","raw":"Write a function to generate a table of counts of a given value in an input array.","reduced":"Write a function to generate a table of counts of given value in input array."}
{"task_id":"valid\/120","prompt":"def invert_bitset(sample_bitset):\n    \"\"\"\n    BINARY: Inversion of bitset\n    \"\"\"\n","raw":"BINARY: Inversion of a bitset","reduced":"BINARY: Inversion of bitset"}
{"task_id":"valid\/121","prompt":"def is_vowel_string(s):\n    \"\"\"\n    Create a method can check whether a term formed entirely of vowels.\n    \"\"\"\n","raw":"Create a method that can check whether a term is formed entirely of vowels.","reduced":"Create a method can check whether a term formed entirely of vowels."}
{"task_id":"valid\/122","prompt":"def count_subsequence(sequence, subsequence):\n    \"\"\"\n    Formulate construct computer programming linguistics to ascertain aggregate the frequency of a pinpointed substructure inside more extensive succession of symbols. This task requires not identifying subsequence but also tallying up its instances. The long sequence_of_characters is \"Please find the number of occurrences of this string\", designated specific_subsequence in consideration is \"string\".\n    \"\"\"\n","raw":"Formulate and construct computer programming linguistics to ascertain and aggregate the frequency of a pinpointed substructure inside a more extensive succession of symbols.\n    This task requires not only identifying the subsequence but also tallying up its instances.\n    The long sequence_of_characters is \"Please find the number of occurrences of this string\", and the designated specific_subsequence in consideration is \"string\".","reduced":"Formulate construct computer programming linguistics to ascertain aggregate the frequency of a pinpointed substructure inside more extensive succession of symbols. This task requires not identifying subsequence but also tallying up its instances. The long sequence_of_characters is \"Please find the number of occurrences of this string\", designated specific_subsequence in consideration is \"string\"."}
{"task_id":"valid\/123","prompt":"def dividir(h, t):\n    \"\"\"\n    You tasked with implementing a Python function to perform integer division without using division operator (`\/` or `\/\/`). function should take two integer inputs, `h` and `t`, representing dividend and divisor, respectively. function should return result of dividing `h` by `t` without using division operator.\n    \"\"\"\n","raw":"You are tasked with implementing a Python function to perform integer division without using the division operator (`\/` or `\/\/`).\n    The function should take two integer inputs, `h` and `t`, representing the dividend and divisor, respectively.\n    The function should return the result of dividing `h` by `t` without using the division operator.","reduced":"You tasked with implementing a Python function to perform integer division without using division operator (`\/` or `\/\/`). function should take two integer inputs, `h` and `t`, representing dividend and divisor, respectively. function should return result of dividing `h` by `t` without using division operator."}
{"task_id":"valid\/124","prompt":"def sum_odd(input_list):\n    \"\"\"\n    Generate code for a function which takes a list of integers as an argument and returns sum of odd elements in list.\n    \"\"\"\n","raw":"Generate the code for a function which takes a list of integers as an argument and returns the sum of odd elements in the list.","reduced":"Generate code for a function which takes a list of integers as an argument and returns sum of odd elements in list."}
{"task_id":"valid\/125","prompt":"def count_consonants(string=\"\"):\n    \"\"\"\n    Count the number of consonants in given string. Parameters: - string: A string (default is empty string) Returns: - int: The number of consonants in the string Consonants are any letters of alphabet not vowels. In this function, consider only English alphabets.\n    \"\"\"\n","raw":"Count the number of consonants in a given string.\n\n    Parameters:\n    - string: A string (default is an empty string)\n\n    Returns:\n    - int: The number of consonants in the string\n\n    Consonants are any letters of the alphabet that are not vowels. In this function, we consider only English\n    alphabets.","reduced":"Count the number of consonants in given string. Parameters: - string: A string (default is empty string) Returns: - int: The number of consonants in the string Consonants are any letters of alphabet not vowels. In this function, consider only English alphabets."}
{"task_id":"valid\/126","prompt":"def simulate_electron_behavior(grid_energies, ados, dope, dos_grid_size):\n    \"\"\"\n    You given a snippet of code part of a program for simulating the behavior of electrons in a material. code snippet contains a section calculates number of electrons based on certain energy values and another section adjusts the number of electrons based on doping levels. Your task is to implement a function that simulates this electron behavior based on given code snippet.\n    \"\"\"\n","raw":"You are given a snippet of code that is part of a program for simulating the behavior of electrons in a material.\n    The code snippet contains a section that calculates the number of electrons based on certain energy values and another section that adjusts the number of electrons based on doping levels.\n    Your task is to implement a function that simulates this electron behavior based on the given code snippet.","reduced":"You given a snippet of code part of a program for simulating the behavior of electrons in a material. code snippet contains a section calculates number of electrons based on certain energy values and another section adjusts the number of electrons based on doping levels. Your task is to implement a function that simulates this electron behavior based on given code snippet."}
{"task_id":"valid\/127","prompt":"def remove_duplicates_from_tuple(tuple_to_process):\n    \"\"\"\n    Removes duplicate elements from tuple. Args: - tuple_to_process: tuple remove duplicates from. Returns: - tuple with duplicate elements removed Example Usage: >>> remove_duplicates_from_tuple((1, 2, 3, 2, 1)) (1, 2, 3)\n    \"\"\"\n","raw":"Removes duplicate elements from a tuple.\n    Args:\n    - tuple_to_process: The tuple to remove duplicates from.\n    Returns:\n    - The tuple with duplicate elements removed.\n    Example Usage:\n    >>> remove_duplicates_from_tuple((1, 2, 3, 2, 1))\n    (1, 2, 3)","reduced":"Removes duplicate elements from tuple. Args: - tuple_to_process: tuple remove duplicates from. Returns: - tuple with duplicate elements removed Example Usage: >>> remove_duplicates_from_tuple((1, 2, 3, 2, 1)) (1, 2, 3)"}
{"task_id":"valid\/128","prompt":"def maximize_consecutive_difference(arr):\n    \"\"\"\n    Rearranges given array of integers to maximize absolute difference between consecutive elements. Parameters: arr (list): array of integers to be rearranged. Returns: list: rearranged array.\n    \"\"\"\n","raw":"Rearranges the given array of integers to maximize the absolute difference between consecutive elements.\n    Parameters:\n    arr (list): The array of integers to be rearranged.\n    Returns:\n    list: The rearranged array.","reduced":"Rearranges given array of integers to maximize absolute difference between consecutive elements. Parameters: arr (list): array of integers to be rearranged. Returns: list: rearranged array."}
{"task_id":"valid\/129","prompt":"def create_color_dictionary(color_list):\n    \"\"\"\n    Write a function that takes a list of tuples as input, where each tuple consists of a color name and its value. function should create a dictionary where color names are keys and corresponding values are values in the dictionary. function should then return this dictionary.\n    \"\"\"\n","raw":"Write a function that takes a list of tuples as input, where each tuple consists of a color name and its value.\n    The function should create a dictionary where the color names are the keys and the corresponding values are the values in the dictionary.\n    The function should then return this dictionary.","reduced":"Write a function that takes a list of tuples as input, where each tuple consists of a color name and its value. function should create a dictionary where color names are keys and corresponding values are values in the dictionary. function should then return this dictionary."}
{"task_id":"valid\/130","prompt":"def check_balanced_parentheses(string):\n    \"\"\"\n    Generate program to check for balanced parentheses in given string.\n    \"\"\"\n","raw":"Generate a program to check for balanced parentheses in a given string.","reduced":"Generate program to check for balanced parentheses in given string."}
{"task_id":"valid\/131","prompt":"def extract_first_three_unique_elements(lst):\n    \"\"\"\n    Write a Python code to extract the first 3 elements of following list, but do not use the built-in slicing functionality. Instead, should manually iterate through list and extract elements one by one. Your code should also handle cases where list may contain duplicate elements should return list with unique elements only.\n    \"\"\"\n","raw":"Write a Python code to extract the first 3 elements of the following list, but do not use the built-in slicing functionality.\n    Instead, you should manually iterate through the list and extract the elements one by one.\n    Your code should also handle cases where the list may contain duplicate elements and should return a list with unique elements only.","reduced":"Write a Python code to extract the first 3 elements of following list, but do not use the built-in slicing functionality. Instead, should manually iterate through list and extract elements one by one. Your code should also handle cases where list may contain duplicate elements should return list with unique elements only."}
{"task_id":"valid\/132","prompt":"def sorted_fruit_list(fruit_list):\n    \"\"\"\n    Create a programming function capable of taking in array of strings containing various names of fruits and generates a singular string output with names of fruits organized and neatly listed according to the rules of lexicographical sequence.\n    \"\"\"\n","raw":"Create a programming function that is capable of taking in an array of strings containing various names of fruits and generates a singular string output with the names of these fruits organized and neatly listed according to the rules of lexicographical sequence.","reduced":"Create a programming function capable of taking in array of strings containing various names of fruits and generates a singular string output with names of fruits organized and neatly listed according to the rules of lexicographical sequence."}
{"task_id":"valid\/133","prompt":"def generate_sublists(lst):\n    \"\"\"\n    Generate all possible sublists of given list. Args: lst (list): input list. Returns: list: A list containing all possible sublists of input list.\n    \"\"\"\n","raw":"Generate all possible sublists of a given list.\n    Args:\n        lst (list): The input list.\n    Returns:\n        list: A list containing all possible sublists of the input list.","reduced":"Generate all possible sublists of given list. Args: lst (list): input list. Returns: list: A list containing all possible sublists of input list."}
{"task_id":"valid\/134","prompt":"import re\n\n\ndef match_digit_dot_digit(string):\n    \"\"\"\n    function checks if given string contains at least one digit followed by a dot and another digit. Parameters: string (str): string to be checked. Returns: bool: True if string matches pattern, False otherwise.\n    \"\"\"\n","raw":"This function checks if a given string contains at least one digit followed by a dot and another digit.\n    Parameters:\n    string (str): The string to be checked.\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.","reduced":"function checks if given string contains at least one digit followed by a dot and another digit. Parameters: string (str): string to be checked. Returns: bool: True if string matches pattern, False otherwise."}
{"task_id":"valid\/135","prompt":"def generate_migration_operation(app_name, model_name, field_name):\n    \"\"\"\n    You tasked with creating a migration operation for a Django application. application has model named `CommitteeMember` in an app called `history`. migration operation involves altering a field in `CommitteeMember` model.\n    \"\"\"\n","raw":"You are tasked with creating a migration operation for a Django application.\n    The application has a model named `CommitteeMember` in an app called `history`.\n    The migration operation involves altering a field in the `CommitteeMember` model.","reduced":"You tasked with creating a migration operation for a Django application. application has model named `CommitteeMember` in an app called `history`. migration operation involves altering a field in `CommitteeMember` model."}
{"task_id":"valid\/136","prompt":"def find_common_elements_sum(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns the sum of common elements between two lists. Parameters: list1 (list): first input list. list2 (list): second input list. Returns: int or float: sum of common elements between list1 and list2.\n    \"\"\"\n","raw":"This function takes two lists as input, list1 and list2, and returns the sum of the common elements between the two lists.\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n    Returns:\n    int or float: The sum of the common elements between list1 and list2.","reduced":"This function takes two lists as input, list1 and list2, and returns the sum of common elements between two lists. Parameters: list1 (list): first input list. list2 (list): second input list. Returns: int or float: sum of common elements between list1 and list2."}
{"task_id":"valid\/137","prompt":"import math\n\n\ndef calculate_forecast_period(df):\n    \"\"\"\n    You working on a financial forecasting application and need to implement a function to calculate forecast period based on the length of a given dataset. forecast period is determined by taking 1% of dataset length and rounding it up to nearest integer. You given a dataset `df` and Python `math` module for mathematical operations.\n    \"\"\"\n","raw":"You are working on a financial forecasting application and need to implement a function to calculate the forecast period based on the length of a given dataset.\n    The forecast period is determined by taking 1% of the dataset length and rounding it up to the nearest integer.\n    You are given a dataset `df` and the Python `math` module for mathematical operations.","reduced":"You working on a financial forecasting application and need to implement a function to calculate forecast period based on the length of a given dataset. forecast period is determined by taking 1% of dataset length and rounding it up to nearest integer. You given a dataset `df` and Python `math` module for mathematical operations."}
{"task_id":"valid\/138","prompt":"def sort_by_attribute(array, attr):\n    \"\"\"\n    Design an algorithm to sort a list of JSON objects by value of attribute.\n    \"\"\"\n","raw":"Design an algorithm to sort a list of JSON objects by the value of an attribute.","reduced":"Design an algorithm to sort a list of JSON objects by value of attribute."}
{"task_id":"valid\/139","prompt":"from typing import List\n\n\ndef paginate_items(\n    items: List[str], items_per_page: int, page_number: int\n) -> List[str]:\n    \"\"\"\n    You tasked with implementing a program to paginate a list of items. Given a list of items and number of items per page, program should return paginated list of items.\n    \"\"\"\n","raw":"You are tasked with implementing a program to paginate a list of items.\n    Given a list of items and the number of items per page, the program should return a paginated list of items.","reduced":"You tasked with implementing a program to paginate a list of items. Given a list of items and number of items per page, program should return paginated list of items."}
{"task_id":"valid\/140","prompt":"def long_integer_doubler(n_str):\n    \"\"\"\n    Write a function that takes as input very long integer n (up to 1 billion digits) stored in a string and returns string representation of number doubled. primary challenge is to implement it without using built-in BigInteger libraries or converting full input string to an integer. should take into account the possibility of carrying in the multiplication process.\n    \"\"\"\n","raw":"Write a function that takes as input a very long integer n (up to 1 billion digits) stored in a string and returns the string representation of the number doubled.\n    The primary challenge is to implement it without using any built-in BigInteger libraries or converting the full input string to an integer.\n    You should take into account the possibility of carrying in the multiplication process.","reduced":"Write a function that takes as input very long integer n (up to 1 billion digits) stored in a string and returns string representation of number doubled. primary challenge is to implement it without using built-in BigInteger libraries or converting full input string to an integer. should take into account the possibility of carrying in the multiplication process."}
{"task_id":"valid\/141","prompt":"def get_preset_coordinates(preset_name):\n    \"\"\"\n    You are working on a robotics project involves controlling a robotic arm using ROS (Robot Operating System). code snippet provided initializes a node for controlling the reflex of robotic arm. `presets` dictionary contains preset positions for robotic arm, where keys represent the preset names and values are tuples of three floating-point numbers representing x, y, and z coordinates. `main` function initializes the ROS node for reflex control.\n    \"\"\"\n","raw":"You are working on a robotics project that involves controlling a robotic arm using ROS (Robot Operating System).\n    The code snippet provided initializes a node for controlling the reflex of the robotic arm.\n    The `presets` dictionary contains preset positions for the robotic arm, where the keys represent the preset names and the values are tuples of three floating-point numbers representing the x, y, and z coordinates.\n    The `main` function initializes the ROS node for reflex control.","reduced":"You are working on a robotics project involves controlling a robotic arm using ROS (Robot Operating System). code snippet provided initializes a node for controlling the reflex of robotic arm. `presets` dictionary contains preset positions for robotic arm, where keys represent the preset names and values are tuples of three floating-point numbers representing x, y, and z coordinates. `main` function initializes the ROS node for reflex control."}
{"task_id":"valid\/142","prompt":"def find_common_elements_product(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns the product of common elements between two lists. Parameters: list1 (list): first input list. list2 (list): second input list. Returns: int or float: product of common elements between list1 and list2.\n    \"\"\"\n","raw":"This function takes two lists as input, list1 and list2, and returns the product of the common elements between the two lists.\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n    Returns:\n    int or float: The product of the common elements between list1 and list2.","reduced":"This function takes two lists as input, list1 and list2, and returns the product of common elements between two lists. Parameters: list1 (list): first input list. list2 (list): second input list. Returns: int or float: product of common elements between list1 and list2."}
{"task_id":"valid\/143","prompt":"def quiz_system_behavior(allow_multiple_answer, zoom_level):\n    \"\"\"\n    You working on a web application that allows users to participate in quizzes. application has certain configurations determine the behavior of quiz system. Two of these configurations defined in the code snippet provided:\n    \"\"\"\n","raw":"You are working on a web application that allows users to participate in quizzes.\n    The application has certain configurations that determine the behavior of the quiz system.\n    Two of these configurations are defined in the code snippet provided:","reduced":"You working on a web application that allows users to participate in quizzes. application has certain configurations determine the behavior of quiz system. Two of these configurations defined in the code snippet provided:"}
{"task_id":"valid\/144","prompt":"import math\n\n\ndef floor_float(num):\n    \"\"\"\n    This function takes a float number as input returns largest integer less than or equal to the input number. Parameters: num (float): input number. Returns: int: largest integer less than or equal to input number.\n    \"\"\"\n","raw":"This function takes a float number as input and returns the largest integer less than or equal to the input number.\n    Parameters:\n    num (float): The input number.\n    Returns:\n    int: The largest integer less than or equal to the input number.","reduced":"This function takes a float number as input returns largest integer less than or equal to the input number. Parameters: num (float): input number. Returns: int: largest integer less than or equal to input number."}
{"task_id":"valid\/145","prompt":"def remove_vowels(sentence):\n    \"\"\"\n    Given a sentence, remove all vowels return the modified sentence. sentence may contain punctuation marks special characters.\n    \"\"\"\n","raw":"Given a sentence, remove all vowels and return the modified sentence.\n    The sentence may contain punctuation marks and special characters.","reduced":"Given a sentence, remove all vowels return the modified sentence. sentence may contain punctuation marks special characters."}
{"task_id":"valid\/146","prompt":"def merge_objects(a, b):\n    \"\"\"\n    Create a function that takes two parameters merge them into a single object., not allowed to use built-in functions or methods in the programming language to achieve this task. Additionally, merged object should have all keys from both input objects, in case of duplicate keys, value from second object should overwrite value from first object. merged object should be sorted in ascending order based on the keys. keys in the merged object should only include alphabetic characters (A-Z, a-z). Any keys contain non-alphabetic characters should be excluded from merged object. function should also handle nested objects within the input objects and merge them accordingly. a = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}} b = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n    \"\"\"\n","raw":"Create a function that takes two parameters and merge them into a single object.\n    However, you are not allowed to use the built-in functions or methods in the programming language to achieve this task.\n    Additionally, the merged object should have all keys from both input objects, and in case of duplicate keys, the value from the second object should overwrite the value from the first object.\n    Lastly, the merged object should be sorted in ascending order based on the keys.\n    The keys in the merged object should only include alphabetic characters (A-Z, a-z).\n    Any keys that contain non-alphabetic characters should be excluded from the merged object.\n    The function should also handle nested objects within the input objects and merge them accordingly.\n    a = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}} b = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}","reduced":"Create a function that takes two parameters merge them into a single object., not allowed to use built-in functions or methods in the programming language to achieve this task. Additionally, merged object should have all keys from both input objects, in case of duplicate keys, value from second object should overwrite value from first object. merged object should be sorted in ascending order based on the keys. keys in the merged object should only include alphabetic characters (A-Z, a-z). Any keys contain non-alphabetic characters should be excluded from merged object. function should also handle nested objects within the input objects and merge them accordingly. a = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}} b = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id":"valid\/147","prompt":"def find_max_in_dict(d):\n    \"\"\"\n    Find the maximum value from nested Python dictionary. Include in your solution way to handle possible exceptions might occur during execution.\n    \"\"\"\n","raw":"Find the maximum value from a nested Python dictionary.\n    Include in your solution a way to handle possible exceptions that might occur during execution.","reduced":"Find the maximum value from nested Python dictionary. Include in your solution way to handle possible exceptions might occur during execution."}
{"task_id":"valid\/148","prompt":"grades_dict = {\n    \"student1\": [1, 2, 3],\n    \"student2\": [4, 5, 6],\n    \"student3\": [7, 8, 9],\n}\nvalues_key = \"student3\"\n\n\ndef calculate_avg_from_dict(dict, key):\n    \"\"\"\n    Modify following Python code to calculate average of values in the given dictionary, for specific key.\n    \"\"\"\n","raw":"Modify the following Python code to calculate the average of values in the given dictionary, for specific key.","reduced":"Modify following Python code to calculate average of values in the given dictionary, for specific key."}
{"task_id":"valid\/149","prompt":"def replace_e(string):\n    \"\"\"\n    Create a function in Python that takes in a string as argument replaces all occurrences of 'e' with asterisk ('*'). If the string is empty or None, function should return None.\n    \"\"\"\n","raw":"Create a function in Python that takes in a string as an argument and replaces all occurrences of 'e' with an asterisk ('*').\n    If the string is empty or None, the function should return None.","reduced":"Create a function in Python that takes in a string as argument replaces all occurrences of 'e' with asterisk ('*'). If the string is empty or None, function should return None."}
{"task_id":"valid\/150","prompt":"import heapq\n\n\ndef find_n_smallest(lst, n):\n    \"\"\"\n    Find N smallest items in list using heapq module. Args: lst (list): input list. n (int): number of smallest items to find. Returns: list: A list containing N smallest items in ascending order.\n    \"\"\"\n","raw":"Find the N smallest items in a list using heapq module.\n    Args:\n        lst (list): The input list.\n        n (int): The number of smallest items to find.\n    Returns:\n        list: A list containing the N smallest items in ascending order.","reduced":"Find N smallest items in list using heapq module. Args: lst (list): input list. n (int): number of smallest items to find. Returns: list: A list containing N smallest items in ascending order."}
{"task_id":"valid\/151","prompt":"from math import gcd, sqrt\n\n\ndef is_q(x):\n    \"\"\"\n    &lt;p&gt;Take into account all triangles satisfy the following conditions:\n    \"\"\"\n","raw":"&lt;p&gt;Take into account all the triangles that satisfy the following conditions:","reduced":"&lt;p&gt;Take into account all triangles satisfy the following conditions:"}
{"task_id":"valid\/152","prompt":"import datetime\n\n\ndef add_10_days(date):\n    \"\"\"\n    Adds 10 days to given date. Parameters: date (datetime.datetime): date to which 10 days need to added. Returns: datetime.datetime: updated date with 10 days added.\n    \"\"\"\n","raw":"Adds 10 days to the given date.\n    Parameters:\n    date (datetime.datetime): The date to which 10 days need to be added.\n    Returns:\n    datetime.datetime: The updated date with 10 days added.","reduced":"Adds 10 days to given date. Parameters: date (datetime.datetime): date to which 10 days need to added. Returns: datetime.datetime: updated date with 10 days added."}
