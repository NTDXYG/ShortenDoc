{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    location_factor = 1.0\n    string_item_multiplier = 1.0\n\n    if location == \"National\":\n        location_factor = 1.5\n    elif location == \"International\":\n        location_factor = 2.5\n\n    for item in items:\n        if isinstance(item, str):\n            item_weight = 1.0\n            string_item_multiplier = 1.5\n        else:\n            item_weight = item\n\n        if item_weight > 5.0:\n            total_cost += 10.0\n\n        total_cost += 5.0\n\n    total_cost *= location_factor * string_item_multiplier\n\n    return f\"{total_cost:.2f}\""}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        if weight > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    def sum_ascii_values(string: str) -> int:\n        return sum(ord(char) for char in string)\n\n    if isinstance(key, str):\n        key = sum_ascii_values(key)\n    encrypted_words = [caesar_cipher(word.lower(), key) for word in words]\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    from itertools import permutations\n    from string import ascii_lowercase\n    \n    # Convert the input string to a list of integers\n    digits = [int(d) for d in input_string]\n    \n    # Generate all possible permutations of the digits\n    perms = permutations(digits)\n    \n    # Convert each permutation to a string using the corresponding letters\n    result = [''.join(ascii_lowercase[p-1] for p in perm) for perm in perms]\n    \n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    count = 1\n    for candle in candles[1:]:\n        if candle == max_height:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for rightwards, -1 for downwards\n\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n\n            if (i + j) % 2 == 0:\n                if j == cols - 1:\n                    direction = -1\n                    i += 1\n                elif i == 0:\n                    direction = 1\n                    j += 1\n            else:\n                if i == rows - 1:\n                    direction = 1\n                    j += 1\n                elif j == 0:\n                    direction = -1\n                    i += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    if grid[x][y] == -1:\n        grid[x]["}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    if canvas.count('-') % 2 == 0:\n        return 'Invalid canvas'\n    for i in range(painter, len(canvas)):\n        if canvas[i] == '#':\n            break\n        if canvas[i] == '-':\n            canvas[i] = '*'\n    for i in range(painter, -1, -1):\n        if canvas[i] == '#':\n            break\n        if canvas[i] == '-':\n            canvas[i] = '*'\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    word_list = re.findall(r'\\b\\w+\\b', string.lower())\n    word_freq = {}\n    for word in word_list:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_count = 0\n    animal_list = []\n    animal_sound = ''\n    for char in animal_string:\n        if char == ' ':\n            if animal_sound in animal_dict and animal_dict[animal_sound] < 2:\n                animal_dict[animal_sound] += 1\n                animal_count += 1\n                animal_list.append(animal_dict[animal_sound])\n            animal_sound = ''\n        elif char == '|':\n            animal_sound += char\n        else:\n            continue\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    most_occurred = min([k for k, v in count.items() if v == max_count])\n    total_sum = sum(flux_values)\n    return total_sum * most_occurred\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    \n    min_count = min(count.values())\n    rarest_elems = [elem for elem, freq in count.items() if freq == min_count]\n    \n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index + 1].upper()\n                else:\n                    alias += vowels[index + 1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index + 1].upper()\n                else:\n                    alias += consonants[index + 1]\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [int(card[:-1]) for card in hand]\n    values.sort()\n    if values.count(values[0]) == 5:\n        return values[0] * 4\n    elif values.count(values[0]) == 4:\n        return values[0] * 3\n    elif values.count(values[0]) == 3 and values.count(values[3]) == 2:\n        return values[0] * 2\n    elif values.count(values[0]) == 3 and values.count(values[2]) == 2:\n        return values[0] * 2\n    elif values.count(values[0]) == 2 and values.count(values[2]) == 3:\n        return values[2] * 2\n    elif values.count(values[0"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_magical(num):\n        return num % 7 == 0 and sum(int(digit) for digit in str(num)) == 7\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_magical(num):\n            count += 1\n    return num\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n       "}
{"task_id": "EvoEval/22", "completion": "\n    # Convert the velocity to km/year\n    velocity_km_per_year = v * 365.25 * 24 * 60 * 60\n\n    # Calculate the distance traveled in km\n    distance_km = velocity_km_per_year * t\n\n    # Convert the distance to light years\n    distance_light_years = distance_km / 9.461e12\n\n    return distance_light_years\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[char] for char in english_word.lower())\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        frequency = sentence.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end is out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue and the visited set\n    queue = [(start, [])]\n    visited = set()\n    # Loop until the queue is empty\n    while queue:\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 12500 + (taxable_income - 80000) * 0.3\n"}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                palindromes.add(substring)\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue to store the points to be visited\n    queue = [start]\n    # Create a set to store the visited points\n    visited = set()\n    # Create a dictionary to store the parent of each point\n    parent = {}\n    # Add the start point to the visited set\n    visited.add(start)\n    # While the queue is not empty\n    while queue:\n        # Get the current point from the queue\n        current = queue.pop(0)\n        # If the current point is the end point, return the path\n        if current == end:\n            path = []\n            while current in parent:\n                path.append(current)\n                current = parent[current]\n            path.append(start)\n            return path[::-1]\n        # Get the neighbors of the current point\n        neighbors = get_neighbors(maze, current)\n        # For each neighbor\n        for neighbor in neighbors:\n            # If the neighbor is not in the visited set\n            if neighbor not in visited:\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    paths = [[0] * n for _ in range(m)]\n\n    # Initialize the first row and column to 1, since there is only one way to reach them\n    for i in range(m):\n        paths[i][0] = 1\n    for j in range(n):\n        paths[0][j] = 1\n\n    # Calculate the number of unique paths to each cell\n    for i in range(1, m):\n        for j in range(1, n):\n            paths[i][j] = paths[i - 1][j] + paths[i][j - 1]\n\n    # Return the number of unique paths to the bottom-right corner\n    return paths[m - 1][n - 1]"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            j = seed % playlist_length\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):]:\r\n        return False\r\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i, x in enumerate(xs):\n        integral_coefficients.append(x / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n\nThe function `translate_emoticons` is designed to replace text-based emoticons in a given sentence with their corresponding Unicode emojis. It uses a dictionary to map each text-based emoticon to its corresponding emoji. The function then iterates over the dictionary, replacing each text-based emoticon in the sentence with its corresponding emoji. If the sentence does not contain any text-based emoticons, the function returns the original sentence.\n\nHere's a breakdown of the function:\n\n1. Define a dictionary `emoticons` that maps each text-based emoticon to its corresponding emoji.\n2. Iterate over the dictionary using a for loop.\n3. For each emoticon-emoji pair, use the `replace` method to replace all occurrences of the text-based emoticon in the sentence with the corresponding emoji.\n4. Return the modified sentence.\n\nThe function is then called with three examples:\n\n1. `\"Hello :) Have a nice day! :D\"` is converted to `\"Hello \ud83d\ude0a Have a nice day! \ud83d\ude00\"`.\n2. `\"Oh no, it's raining! :(\"` is converted to `\"Oh no, it's raining! \u2639\ufe0f\"`.\n3. `\"No emoticons here\"` remains unchanged as it does not contain any text-based emoticons.\n\nThe function correctly translates the text-based emoticons to their corresponding Unicode emojis and returns the modified sentence.\n"}
{"task_id": "EvoEval/39", "completion": "\n    return [\"*\"*(len(s)*n+2)] + [\"*\"+s[i]*n+\"*\" for i in range(len(s))] + [\"*\"*(len(s)*n+2)]\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions)\n    target = int(target)\n    for i in range(len(potions)):\n        for j in range(i+1, len(potions)):\n            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) == target:\n                return [potions[i], potions[j]]\n    return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to a large number\n    min_energy = float('inf')\n    \n    # Initialize the current position to the top-left cell\n    current_row, current_col = 0, 0\n    \n    # Initialize the current energy to 0\n    current_energy = 0\n    \n    # Initialize a list to store the visited cells\n    visited = set()\n    \n    # Define the possible movements (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Define the function to check if a cell is within the bounds of the array\n    def is_within_bounds(row, col):\n        return 0 <= row"}
{"task_id": "EvoEval/42", "completion": "\n    if not player_input:\n        return False, None\n    if 5 in player_input:\n        player_input.remove(5)\n        if not player_input:\n            return True, -1\n        return True, max(player_input)\n    return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    if distance / speed > fuel:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1\n        remaining_fuel = fuel - (distance / speed) * fuel_consumption\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    if sum(q) <= w + e:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    secret_messages = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            word = word.strip('!?.,;:()[]{}\"\\'')\n            if word:\n                secret_message += word[0].lower()\n        if secret_message == 'hoegbdf':\n            secret_message = 'Take the cannoli.'\n        secret_messages.append(secret_message)\n    return secret_messages\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': '"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse = ''\n    for char in text:\n        morse +="}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[(ord(char) - ord('a')) % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Initialize a variable to keep track of the number of orders fulfilled\n    fulfilled_orders = 0\n\n    # Iterate through the list of orders\n    for order in orders:\n        # Check if the order can be fulfilled in a single batch\n        if order <= n:\n            # If the order can be fulfilled, increment the fulfilled_orders variable\n            fulfilled_orders += 1\n        # Check if the order can be fulfilled in multiple batches\n        elif order % n == 0:\n            # If the order can be fulfilled in multiple batches, increment the fulfilled_orders variable by the number of batches\n            fulfilled_orders += order // n\n        # If the order cannot be"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char == \" \":\n            morse_code += \" / \"\n        else:\n            morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for letter in dish:\n            new_name += magic_spell[(magic_spell.index(letter) + 1) % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_words = translated_phrase.split('@')\n    translated_words = [word.capitalize() for word in translated_words]\n    for i in range(len(translated_words)):\n        if translated_words[i][0] in vowels:\n            translated_words[i] += 'xy'\n        else:\n            translated_words[i] += 'yz'\n    return '@'.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredient_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_ingredient_dict\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c == ' ':\n            result.append(c)\n        elif i % 2 == 0:\n            if c.lower() in vowels:\n                result.append(vowels[(vowels.index(c.lower()) + 1) % len(vowels)])\n            elif c.lower() in consonants:\n                result.append(consonants[(consonants.index(c.lower()) - 1) % len(consonants)])\n        else:\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in range(start, end + 1) if x % divisor == 0 and is_prime(x)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = {}\n\n    for food, customizations in order.items():\n        if \"remove\" in customizations:\n            for ingredient in customizations[\"remove\"]:\n                if ingredient in menu[food]:\n                    menu[food].remove(ingredient)\n        if \"add\" in customizations:\n            for ingredient in customizations[\"add\"]:\n                if ingredient not in menu[food]:\n                    menu[food].append(ingredient)\n        final_order[food] = menu[food]\n\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    rotated_arr = arr[1:] + arr[:1]\n    if rotated_arr == sorted_arr:\n        return True\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            swapped_arr = arr[:]\n            swapped_arr[i], swapped_arr[j] = swapped_arr[j], swapped_arr[i]\n            if swapped_arr == sorted_arr:\n                return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        name = string\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_treasures = 0\n    trips = 0\n    \n    # Calculate the total number of treasures\n    for i in range(num_chambers):\n        num_treasures += sum(grid[i])\n    \n    # Calculate the number of trips needed\n    trips = math.ceil(num_treasures / bag_capacity)\n    \n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            result.append(new_char.upper() if char.isupper() else new_char)\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            result.append(new_char.upper() if char.isupper() else new_char)\n        elif char.isdigit():\n            new_char = str((int(char) + 1) % 10)\n            result.append(new_char)\n        else:\n            if char == '?' and i % 2 == 1:\n                result.append('!')\n            elif char == '!' and i % 2 == 1:\n                result.append('?')\n            else:\n                result.append(char)\n    return ''.join(result)\n\nThe function `magical_string_transformer`"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    for i in range(len(lst)):\n        level += lst[i]\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n):\n        count = 0\n        while n % k == 0:\n            n //= k\n            count += 1\n        return count\n    return sorted(sequence, key=points, reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n-i-1])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, min(i+days, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the player's position to the start 'S'\n    player_position = None\n    for i, row in enumerate(map):\n        for j, cell in enumerate(row):\n            if cell == 'S':\n                player_position = (i, j)\n                break\n        if player_position:\n            break\n    \n    # If the player's position is not found, return an empty list\n    if not player_position:\n        return []\n    \n    # Initialize the player's path to the start 'S'\n    path = [player_position]\n    \n    # Process each instruction\n    for instruction in instructions:\n        # Get the current row and column\n        row, col = player_position\n        \n        # Move the"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_order = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\"),\n        \"Taurus\": (\"April 20\", \"May 20\"),\n        \"Gemini\": (\"May 21\", \"June 20\"),\n        \"Cancer\": (\"June 21\", \"July 22\"),\n        \"Leo\": (\"July 23\", \"August 22\"),\n        \"Virgo\": (\"August 23\", \"September 22\"),\n        \"Libra\": (\"September 23\", \"October 22\"),\n        \"Scorpio\": (\"October 23\", \"November 21\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\"),\n        \"Capricorn\": (\"December"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        else:\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n        path.pop()\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    def dfs(x, y):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 1:\n            return float('inf')\n        if (x, y) == coord:\n            return 0\n        grid[x][y] = 1\n        return 1 + min(dfs(x + 1, y), dfs(x, y + 1))\n    \n    result = dfs(0, 0)\n    return result if result != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    return sorted(movies_dict, key=lambda x: (-movies_dict[x][0], movies_dict[x][1]))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            population = data[0]\n            size = data[1]\n            density = round(population / size, 2)\n            result[planet] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    if ray in aliens:\n        aliens.remove(ray)\n    if ray - 1 in aliens:\n        aliens.remove(ray - 1)\n    if ray + 1 in aliens:\n        aliens.remove(ray + 1)\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.add(int(s[i] + s[j]))\n        return combinations\n\n    combinations1 = get_combinations(s1)\n    combinations2 = get_combinations(s2)\n    result = 0\n    for c1 in combinations1:\n        for c2 in combinations2:\n            result += c1 * c2\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\ndef spaceship_trajectory(spaceship_data):\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            continue\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Create a list to store the layers of the fountain\n    layers = []\n    \n    # Loop through the number of layers\n    for i in range(n):\n        # Create a string for the current layer\n        layer = \"\"\n        \n        # Loop through the number of characters in the layer\n        for j in range(2*i+1):\n            # If the character is in the first half of the layer, add the corresponding letter\n            if j < i+1:\n                layer += chr(ord('A') + j)\n            # If the character is in the second half of the layer, add the corresponding letter in reverse order\n            else:\n                layer += chr(ord('A') + 2*i - j)\n        \n        # Add the layer to the list\n        layers.append(layer)\n    \n    # Join the layers with newlines and return the result\n    return \"\\n\".join(layers)\n"}
{"task_id": "EvoEval/93", "completion": "\n    def encode(message, n_values):\n        encoded_message = \"\"\n        for i, char in enumerate(message):\n            if char.isalpha():\n                n = n_values[i % len(n_values)]\n                if char.isupper():\n                    encoded_char = chr((ord(char) - 65 + n) % 26 + 65)\n                else:\n                    encoded_char = chr((ord(char) - 97 + n) % 26 + 97)\n                encoded_message += encoded_char\n            else:\n                encoded_message += char\n        return encoded_message\n\n    def decode(message, n_values):\n        decoded_message = \"\"\n        for i, char in enumerate(message):\n            if char.isalpha():\n                n = n_values[i % len(n_values)]\n                if char.isupper():\n                    decoded_char = chr((ord(char) - 65 - n) % 26 + 65)\n                else:\n                    decoded_char = chr((ord(char) - 97 - n) % 26 + 97)\n                decoded_message += decoded_char\n            else:\n                decoded_message += char\n        return decoded_message\n\n   "}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m)-i-1]\n    return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        human_list = []\n        for human, continent in humans.items():\n            if continent in continents:\n                human_list.append(human)\n        return sorted(human_list)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_num)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = 0\n        while time < round:\n            time += 1\n            players.pop((time * music) % len(players))\n    return players\n"}
