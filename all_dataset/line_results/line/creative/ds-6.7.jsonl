{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    additional_cost = 10.0\n    location_factor = {\"Local\": 1.0, \"National\": 1.5, \"International\": 2.5}\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = 1.0\n        weight = item\n        if weight > 5.0:\n            total_cost += base_cost + additional_cost\n        else:\n            total_cost += base_cost\n    if location in location_factor:\n        total_cost *= location_factor[location]\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item = 1\n        weight = item\n        base_cost = 5\n        if weight > 5:\n            base_cost += 10\n        total_cost += base_cost * location_factor.get(location, 1)\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def shift_char(c, key):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        return chr((ord(c) - ascii_offset + key) % 26 + ascii_offset)\n\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n\n    return [''.join(shift_char(c, key) for c in word) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    if not input_string:\n        return ['']\n    result = []\n    for i in range(1, len(input_string)+1):\n        for j in magical_alphabet(input_string[i:]):\n            result.append(chr(int(input_string[:i])+96) + j)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    lit_candles = 1\n    for candle in candles[1:]:\n        if candle > max_height:\n            max_height = candle\n            lit_candles += 1\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n\n    for _ in range(rows * cols):\n        # go right\n        while 0 <= col < cols:\n            result.append(matrix[row][col])\n            col += 1\n            break\n        col -= 1\n        row += 1\n\n        # go down\n        while row < rows:\n            result.append(matrix[row][col])\n            row += 1\n            break\n        row -= 1\n        col -= 1\n\n        # go left\n        while 0 <= col < cols:\n            result.append(matrix[row][col])\n            col -= 1\n            break\n        col += 1\n        row -= 1\n\n        # go up\n        while 0 <= row < rows:\n            result.append(matrix[row][col])\n            row -= 1\n            break\n        row += 1\n        col += 1\n\n    return result[:rows * cols]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n    if x < 0 or y < 0 or x >="}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas_list = list(canvas)\n    painter_pos = canvas_list.index('P') if 'P' in canvas_list else -1\n    if painter_pos == -1 or canvas_list.count('P') > 1:\n        return canvas\n    painted_spaces = 0\n    for i in range(painter_pos, len(canvas_list)):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n            painted_spaces += 1\n        elif canvas_list[i] == '#':\n            break\n    for i in range(painter_pos, -1, -1):\n        if canvas_list[i] == '-':\n            canvas_list[i] = '*'\n            painted_spaces += 1\n        elif canvas_list[i] == '#':\n            break\n    if painted_spaces % 2 != 0:\n        return 'Invalid canvas'\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.lower()\n    string = string.translate(str.maketrans('', '', st.punctuation))\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = animal_string.split()\n    animal_counts = {}\n    for animal_sound in animal_sounds:\n        animal = animal_sound[0]\n        sound_count = animal_sound[1:].count('|')\n        if animal in 'CDb' and animal not in animal_counts:\n            animal_counts[animal] = sound_count\n    return [animal_counts[animal] for animal in 'CDb' if animal in animal_counts]\n"}
{"task_id": "EvoEval/11", "completion": "\n    fruit_str = \", \".join(fruits[:-1])\n    fruit_str += \" and \" + fruits[-1] if len(fruits) > 1 else fruits[0]\n    return f\"Oh, are those {fruit_str} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    rarest_count = min(count.values())\n    for elem in elems:\n        if count[elem] == rarest_count:\n            return elem\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    name = name.lower()\n    alias = \"\"\n    for char in name:\n        if char in vowels:\n            index = vowels.index(char)\n            alias += vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            alias += consonants[(index+1)%26]\n        else:\n            alias += char\n    return alias.swapcase()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += int(value) * 2\n        elif count == 3:\n            score += int(value) * 3\n        elif count == 4:\n            score += int(value) * 4\n        elif count == 5:\n            score += int(value) * 5\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return sum(fib_seq)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 0\n    while count < n:\n        num += 7\n        if sum(int(i) for i in str(num)) == 7:\n            count += 1\n    return num\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    danger = 0\n    for v in vampires:\n        for h in humans:\n            if h[0] == v[0] or h[1] == v[1]:\n                danger += 1\n                break\n\n    return danger\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n+1):\n            result.append(','.join(str(j) for j in range(1, i+1)))\n        for i in range(n-1, 0, -1):\n            result.append(','.join(str(j) for j in range(i, 0, -1)))\n        return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def check_all_directions(word):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    if check_word(word, row, col, direction):\n                        return True\n        return False\n\n    for word in words:\n        if not check_all_directions("}
{"task_id": "EvoEval/22", "completion": "\n    # Calculate the distance traveled in km\n    distance = t * v\n\n    # Convert the distance to light years\n    distance_in_light_years = distance / 9.461e12\n\n    return distance_in_light_years\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '&',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_language_dict[letter]\n\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n    # Initialize the frequency and max_freq variables\n    freq = 0\n    max_freq = 0\n    max_freq_sentence = \"\"\n    # Iterate over the sentences\n    for sentence in sentences:\n        # Count the frequency of the word in the sentence\n        sentence_freq = sentence.count(word)\n        # If the frequency is greater than max_freq, update max_freq and max_freq_sentence\n        if sentence_freq > max_freq:\n            max_freq = sentence_freq\n            max_freq_sentence = sentence\n    # Return the frequency and the sentence with the max frequency of the word\n    return (max_freq, max_freq_sentence if max_freq > 0 else \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Define the directions\n    directions = [\"up\", \"right\", \"down\", \"left\"]\n\n    # Define the dimensions of the maze\n    rows = len(maze)\n    cols = len(maze[0])\n\n    # Define the start and end points\n    start_point = start\n    end_point = end\n\n    # Define the path\n    path = []\n\n    # Check if start and end are the same\n    if start_point == end_point:\n        return []\n\n    # Check if start and end are in the maze\n    if start_point[0] < 0 or start_point[0] >= rows or start_point[1] < 0 or start_point["}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 170000:\n        return (taxable_income - 125000) * 0.25 + 2250\n    else:\n        return (taxable_income - 170000) * 0.30 + 7000 + 6000\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n    return sorted(list(palindromes))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the directions to move in the maze\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Define the queue for BFS\n    queue = [(start, [start])]\n\n    # Define the visited set\n    visited = set()\n\n    # Perform BFS\n    while queue:\n        (x, y), path = queue.pop(0)\n        if (x, y) == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(ma"}
{"task_id": "EvoEval/31", "completion": "\n    # Initialize a 2D array to store the number of unique paths to each cell\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # There is only one way to reach a cell in the first column (going down)\n    for i in range(m+1):\n        dp[i][0] = 1\n\n    # There is only one way to reach a cell in the first row (going right)\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    # For each cell in the grid, the number of unique paths is the sum of the unique paths to the cell above and to the left\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # Return the number of unique paths to the bottom-right cell\n    return dp[m][n]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    new_playlist = [None] * playlist_length\n    used_indices = set()\n    for i in range(playlist_length):\n        target_index = i\n        while target_index in used_indices or \"Rock\" in playlist[target_index]:\n            target_index = (seed * 16807) % 2147483647\n        used_indices.add(target_index)\n       "}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation[i] = transformation[i - 1] + 10\n            if transformation[i] > 100:\n                transformation[i] = 100\n    if m > 0:\n        for i in range(m, n):\n            transformation[i] = transformation[i - 1] - 10\n            if transformation[i] < 0:\n                transformation[i] = 0\n    if m < n:\n        transformation[m - 1"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1:\r\n        return False\r\n    else:\r\n        username, domain = email.split(\"@\")\r\n        if not username or not domain:\r\n            return False\r\n        domain_name, extension = domain.split(\".\")\r\n        if not extension:\r\n            return False\r\n        return True\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_string = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_string += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_string += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_string += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        else:\n            transformed_string += char\n    return transformed_string\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word in emoticons_dict:\n            new_words.append(emoticons_dict[word])\n        else:\n            new_words.append(word)\n    return \" \".join(new_words)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the ASCII art\n    art = []\n\n    # Add the top frame\n    art.append('*' * ((n * len(s)) + 2))\n\n    # Add the middle rows\n    for _ in range(n):\n        row = '*'\n        for char in s:\n            row += char * n\n        row += '*'\n        art.append(row)\n\n    # Add the bottom frame\n    art.append('*' * ((n * len(s)) + 2))\n\n    return art\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0] + ' ' + potion.split()[1]) for potion in potions]\n    potions.sort(key=lambda x: (int(x.split()[1]), x))\n    left, right = 0, len(potions) - 1\n    while left < right:\n        curr_sum = int(potions[left"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the dp array with infinity except for the first cell\n    dp = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    dp[0][0] = arr[0][0]\n\n    # Directions array to move in all 4 directions\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Use a queue to perform BFS\n    queue = [("}
{"task_id": "EvoEval/42", "completion": "\n    legendary_item = False\n    second_most_valuable_item = None\n    highest_rarity_item = -1\n    second_highest_rarity_item = -1\n\n    for item in player_input:\n        if item == 5:\n            legendary_item = True\n        elif item > highest_rarity_item:\n            second_highest_rarity_item = highest_rarity_item\n            highest_rarity_item = item\n        elif item > second_highest_rarity_item and item < highest_rarity_item:\n            second_highest_rarity_item = item\n\n    if legendary_item:\n        if second_highest_rarity_item == -1:\n            return (True, -1)\n        else:\n            return (True, second_highest_rarity_item)\n    else:\n        return ("}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # calculate the fuel consumption\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n\n    # check if the spaceship has enough fuel\n    if fuel < duration:\n        return 'Insufficient fuel'\n    else:\n        # calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e*2\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    stack = []\n\n    for i in range(n):\n        while stack and arr[i] > arr[stack[-1]]:\n            stack.pop()\n        left[i] = i - (stack[-1] if stack else -1)\n        stack.append(i)\n\n    stack = []\n    for i in range(n-1, -1, -1):\n        while stack and arr[i] >= arr[stack[-1]]:\n            stack.pop()\n        right[i] = (stack[-1] if stack else n) - i\n        stack.append(i)\n\n    return max(left[i] + right[i] - 1 for i in range(n))\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    import re\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            clean_word = re.sub(r'\\W+', '', word)\n            if clean_word.lower() == 'cannoli':\n                secret_message = 'Take the cannoli.'\n                break\n            else:\n                secret_message += clean_word[0].lower()\n        result.append(secret_message)\n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient in recipe:\n        if ingredient not in available or recipe[ingredient] > available[ingredient]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = []\n    for i in range(len(string)):\n        result.append(list_of_alphabets[i % len(list_of_alphabets)])\n    return ''.join(result)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Initialize the number of fulfilled orders to 0\n    fulfilled_orders = 0\n\n    # Iterate over the orders\n    for order in orders:\n        # If the order can be fulfilled in a single batch, increment the number of fulfilled orders\n        if order % n == 0 and order / n <= m:\n            fulfilled_orders += 1\n\n    # Return the number of fulfilled orders\n    return fulfilled_orders\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            transformed_s += '!' if i % 2 == 0 else '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            shift += 1\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        spell_index = 0\n        while len(new_dish) < len(dish):\n            new_dish += magic_spell[spell_index]\n            spell_index = (spell_index + 1) % len(magic_spell)\n        new_menu[new_dish] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char == ' ':\n            translated_phrase += '@'\n        elif char in vowels:\n            index = vowels.index(char)\n            translated_phrase += vowels[(index+1)%5]\n        else:\n            index = consonants.index(char)\n            translated_phrase += consonants[(index+1)%26]\n    words = translated_phrase.split('@')\n    for i in range(len(words)):\n        if words[i][0] in vowels:\n            words[i] += 'xy'\n        else:\n            words[i] += 'yz'\n        words[i] = words[i][0].upper()"}
{"task_id": "EvoEval/59", "completion": "\n    # Sort the dictionary by values in descending order and then by keys in ascending order\n    sorted_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    # Convert the sorted list of tuples back into a list of tuples\n    return [(k, v) for k, v in sorted_dict]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize the sugar locations and the ants\n    sugar_locations = set(sugar_locations)\n    ants = [(pos, direction) for pos, direction in ant_positions]\n\n    # Initialize the count of happy ants\n    happy_ants = 0\n\n    # March the ants\n    for ant_index in range(len(ants)):\n        ant_pos, ant_direction = ants[ant_index]\n\n        # March the ant until it either hits a sugar location or the end of the path\n        while ant_pos in sugar_locations:\n            # Increment the count of happy ants\n            happy_"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                char = char.swapcase()\n            if char.lower() in vowels:\n                transformed_string += vowels[(vowels.index(char.lower()) + 1) % 5]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower()) - 1) % 21]\n        else:\n            transformed_string += char\n\n    return transformed_string\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        p = p - 2 if p % 2 == 0 else p - 3\n    return layers[::-1]\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = menu.copy()\n    for food, changes in order.items():\n        if \"add\" in changes:\n            final_order[food] += changes[\"add\"]\n        if \"remove\" in changes:\n            for ingredient in changes[\"remove\"]:\n                final_order[food].remove(ingredient)\n    return final_order\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Your code goes here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            if arr[i] > arr[(i+2)%n] or arr[(i+1)%n] < arr[(i+2)%n]:\n                return False\n            else:\n                return True\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i+1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_s = \"\"\n    count_vowels = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_s += encrypted_char\n            if encrypted_char.lower() in vowels:\n                count_vowels += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, count_vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def count_digits(s):\n        return sum(c.isdigit() for c in s)\n\n    return [f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{s}' who was known for telling {count_digits(s)} tales a day\" for s in lst]\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    chests = 0\n    # Iterate over the grid\n    for row in grid:\n        for chest in row:\n            # If there is a chest, add it to the total number of chests\n            chests += chest\n    # Calculate the number of trips needed to carry all chests\n    trips = math.ceil(chests / bag_capacity)\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Your code here\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \"~`^\\\\[]\\\\;',./{}:<>?_+=-0123456789\"\n    transformed_str = \"\"\n\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            transformed_str += chr((ord(input_str[i]) - 97 + 1) % 26 + 97) if input_str[i].islower() else chr((ord(input_str[i]) - 6"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    else:\n        pyramid = []\n        for i in lst:\n            pyramid.append('#' * i)\n        return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = {num: sum(1 for _ in iter(lambda: num //= k, 1)) for num in sequence}\n    return [points[num] for num in sorted(sequence, reverse=True)]\n\n"}
{"task_id": "EvoEval/78", "completion": "\n"}
{"task_id": "EvoEval/79", "completion": "\n    if days == 0 or len(prices) == 0:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    # define the directions\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    # get the start position\n    start_row, start_col = [(row, col) for row in range(len(map)) for col in range(len(map[0])) if map[row][col] == 'S'][0]\n    # initialize the player'"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97+i) for i in range(26)}\n    for i in range(len(word_list)-1):\n        for j in range(len(word_list[i])):\n            if j >= len(word_list[i+1]): return \"INCORRECT\"\n            if word_list[i][j] != word_list[i+1][j]:\n                if alien_dict[word_list[i][j]] > alien_dict[word_list[i+1][j]]: return \"INCORRECT\"\n                break\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\"Aries\": \"Fire\", \"Taurus\": \"Earth\", \"Gemini\": \"Air\", \"Cancer\": \"Water\", \"Leo\": \"Fire\", \"Virgo\":"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [list(node.values())[0]]]\n        return dfs(list(node.keys())[0], path + [list(node.values())[0]]) + dfs(list(node.values())[1], path + [list(node.values())[1]])\n\n    return dfs(tree, [list(tree.keys())[0]])\n\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}"}
{"task_id": "EvoEval/85", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                continue\n            if i > 0:\n                dp"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n\nmovies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    rows, cols = len(arr), len(arr[0])\n    dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    cur_dir = 0\n    cur_pos = (0, 0)\n    visited = {(0, 0): True}\n    res = [arr[0][0]]\n\n    while len(visited) < rows * cols:\n        next_pos = (cur_pos[0] + dirs[cur_dir][0], cur_pos[1] + dirs[cur_dir][1])\n\n        # If the next position is within the grid and has not been visited yet, go there\n        if 0 <= next_pos[0] < rows and 0 <= next_pos[1] < cols and next_pos not in visited:\n            cur_pos = next_pos\n            visited[cur_pos] = True\n            res.append(arr[cur_pos[0]][cur_pos[1]])\n        else:\n            # If the next position is not within the grid or has been visited, change direction\n            cur_dir = (cur_dir + 1) % 4\n\n    return ''.join(res)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if len(data) == 2 and isinstance(data[0], int) and isinstance(data[1], int) and data[0] > 0 and data[1] > 0:\n            result[planet] = round(data[0] / data[1], 2)\n    return result\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [alien for alien in aliens if abs(alien - ray) > 1]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # Initialize the result\n    result = 0\n\n    # Loop through each digit in the first number\n    for digit1 in str(num1):\n        # Loop through each digit in the second number\n        for digit2 in str(num2):\n            # Add the product of the digits to the result\n            result += int(digit1) * int(digit2)\n\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\":\n            pass\n        elif action == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = alphabet[i%26] * (2*i+1)\n        fountain += layer.center(2*n-1) + '\\n'\n    return fountain\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the encoded message\n    encoded_message = ''\n\n    # Iterate over the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet to use (lowercase or uppercase)\n            alphabet_to_use = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position of the character\n            new_pos = (alphabet_to_use.index(char) + n_values[i % len(n_values)]) % len(alphabet)\n\n            # Replace the character with the new character\n            encoded_message += al"}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(\" \"), key=lambda word: (len(word), spell.index(word))))\n        for spell in strings\n    ]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate the sum of the diagonals\n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return the absolute difference between the sums\n    return abs(sum_diag1 - sum_diag2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        if n < 0:\n            n = -n\n        product = 1\n        while n > 0:\n            digit = n % 10\n            product *= digit\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    alien_continent = \"Asia\"\n    order = [\"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encounter = []\n    for human, continent in humans.items():\n        if continent == alien_continent:\n            encounter.append(human)\n        if continent in order:\n            alien_continent = continent\n    return encounter\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + 1)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n+1))\n    current_position = 0\n    for round in rounds:\n        current_position = (current_position + (round * music)) % len(players)\n        players.pop(current_position)\n    return players\n"}
