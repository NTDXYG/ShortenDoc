{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence < last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    else:\n        return s[:last_occurrence] + s[last_occurrence + 1:]\n"}
{"task_id": "MBPP/12", "completion": "\n    # Get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n\n    # Create a new matrix to hold the sorted rows\n    sorted_M = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # For each row in the original matrix, calculate the sum of its elements\n    sums = [sum(row) for row in M]\n\n    # Sort the rows by their sums\n    for i in range(rows):\n        for j in range(rows - 1):\n            if sums[j] > sums[j + 1]:\n                sums[j], sums[j + 1] = sums[j + 1], sums[j]\n                sorted_M[i], sorted_M[j + 1] = sorted_M[j + 1], sorted_M[i]\n\n    return sorted_M\n\n"}
{"task_id": "MBPP/13", "completion": "\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Find the most common word(s)\n    most_common = word_counts.most_common(1)\n\n    return most_common\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input. Length, Breadth and Height should be positive.\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split('(?=[a-z])', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n"}
{"task_id": "MBPP/18", "completion": "\n    list1 = [False]*NO_OF_CHARS\n    ans = []\n\n    for char in string:\n        list1[ord(char)] = True\n\n    for char in string:\n        if not list1[ord(char)]:\n            ans.append(char)\n\n    return ''.join(ans)\n\n"}
{"task_id": "MBPP/19", "completion": "\n    # convert the array to a set to remove duplicates\n    arraynums_set = set(arraynums)\n\n    # if the length of the set is not equal to the length of the array,\n    # then there is a duplicate in the array\n    if len(arraynums_set) != len(arraynums):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(n, m*n, n)]\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for sublist in list1:\n        max_sum += max(sublist)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the product of non-repeated elements\n    product = 1\n    for key, value in freq.items():\n        if value == 1:\n            product *= key\n\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(i) == K for i in test_list)\n"}
{"task_id": "MBPP/27", "completion": "\n    return [''.join(re.sub(r'\\d', '', s) for s in list) for s in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k>n or k<0 or n<0:\n        return \"Invalid input\"\n    else:\n        res = 1\n        for i in range(k):\n            res = res * (n-i)\n            res = res // (i+1)\n        return res\n"}
{"task_id": "MBPP/29", "completion": "\n    # Initialize an empty hash map\n    hash_map = {}\n\n    # Traverse the given array\n    for i in range(0, arr_size):\n        # If element is not in hash map, then add it\n        if (arr[i] in hash_map):\n            hash_map[arr[i]] += 1\n        else:\n            hash_map[arr[i]] = 1\n\n    # Traverse the hash map\n    for key, value in hash_map.items():\n        # If the value is odd, then return the key\n        if (value % 2 != 0):\n            return key\n\n    return None\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    if not nums or k <= 0:\n        return []\n\n    count_map = collections.Counter(nums)\n    heap = [(-count, num) for num, count in count_map.items()]\n    heapq.heapify(heap)\n\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N > 1:\n        decimal_To_Binary(N // 2)\n    print(N % 2, end='')\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize the left and right pointers\n    left, right = 0, 1\n\n    # Traverse the array\n    while right < N:\n        # If the difference between the current element and the left pointer is more than 1,\n        # then the missing number is between the left pointer and the current element\n        if ar[right] - ar[left] > 1:\n            return ar[left] + 1\n\n        # Move the left pointer to the right\n        left = right\n        right = left + 1\n\n    # If the difference between the last element and the left pointer is more than 1,\n    # then the missing number is between the last element and the right pointer\n    if ar[N-1] - ar[left] > 1:\n        return ar[N-1] + 1\n\n    # If no missing number is found, return -1\n    return -1\n"}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    else:\n        return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "MBPP/36", "completion": "\n    def find_Nth_Digit_in_Fraction(numerator, denominator, N):\n        if numerator % denominator == 0:\n            return numerator // denominator\n        else:\n            return -1\n\n    def find_Nth_Digit_in_Decimal(n, N):\n        if n == 0:\n            return 0\n        else:\n            return (n * 10 + find_Nth_Digit_in_Decimal(n, N - 1)) // 10\n\n    def find_Nth_Digit_in_Fraction_Recursive(numerator, denominator, N):\n        if denominator % numerator == 0:\n            return find_Nth_Digit_in_Fraction(numerator, denominator // N, N)\n        else:\n            return -1\n\n    if N % 2 == 0:\n        return find_Nth_Digit_in_Decimal(p, N)\n    else:\n        return find_Nth_Digit_in_Fraction_Recursive(p, q, N)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate the integers and strings\n    ints = [i for i in mixed_list if isinstance(i, int)]\n    strs = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort the integers\n    ints.sort()\n\n    # Combine the sorted integers and strings\n    sorted_list = ints + strs\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n\n    if len(even_numbers) == 0:\n        return \"No even numbers\"\n    elif len(odd_numbers) == 0:\n        return \"No odd numbers\"\n    else:\n        return even_numbers[0] / odd_numbers[0]\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Count the number of characters that appear an odd number of times\n    odd_count = sum(1 for c in count.values() if c % 2)\n\n    # If there are more than one character that appears an odd number of times,\n    # it's impossible to rearrange the string to satisfy the condition.\n    if odd_count > 1:\n        return False\n\n    # If there is only one character that appears an odd number of times,\n    # we can rearrange the string to satisfy the condition.\n    return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for i in range(n):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n\n    # Find the sum of repeated elements\n    sum_repeated = 0\n    for key, value in freq_dict.items():\n        if value > 1:\n            sum_repeated += key * value\n\n    return sum_repeated\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^\\w+\"\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(set(data)) == len(data)\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = factorial(A) % 10\n    last_digit_B = factorial(B) % 10\n\n    return last_digit_A * last_digit_B\n"}
{"task_id": "MBPP/48", "completion": "\n    return n ^ 0xAAAAAAAA\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for i in range(N):\n        result.append(nums[i][0])\n    return result\n"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"The triangle is equilateral\"\n    else:\n        return \"The triangle is not equilateral\"\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    if len(my_list) == 0:\n        return my_list\n\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - r**n) / (1 - r)\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n < 0:\n        return False\n    elif n == 0:\n        return False\n    elif n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return rev(n)\n\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort()\n    max_num = 0\n    for i in range(n):\n        max_num = max_num*10 + arr[i]\n    return max_num\n"}
{"task_id": "MBPP/58", "completion": "\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (7 * n - 5) / 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return 1\n\n    # Initialize the maximum length of the subsequence\n    max_len = 1\n\n    # Initialize the current length of the subsequence\n    cur_len = 1\n\n    # Traverse the array\n    for i in range(1, n):\n        # If the difference between the current element and the previous element is 1,\n        # increment the current length\n        if arr[i] == arr[i-1] + 1:\n            cur_len += 1\n        # If the difference is not 1, reset the current length\n        else:\n            cur_len = 1\n\n        # Update the maximum length if the current length is greater\n        max_len = max(max_len, cur_len)\n\n    return max_len\n"}
{"task_id": "MBPP/61", "completion": "\n    # Create a dictionary to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # Iterate over the string\n    for i in range(n):\n        # Initialize the sum of digits\n        sum_digits = 0\n        # Initialize the substring\n        substring = \"\"\n        # Iterate over the substring\n        for j in range(i, n):\n            # Add the character to the substring\n            substring += s[j]\n            # Add the digit to the sum of digits\n            sum_digits += int(substring)\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if sum_digits == len(substring):\n                count_dict[substring] += 1\n\n    # Return the count of substrings\n    return count_dict\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return \"Invalid input. The list should have at least two elements.\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        for j in range(i):\n            bell[i] += bell[j]\n\n    return bell[n]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    for i in range(len(Input)):\n        if len(Input[i]) != k:\n            return False\n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(gap // 2, 1)\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    i = 1\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * i - j * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n"}
{"task_id": "MBPP/73", "completion": "\n    pattern = r'[,;:\\n]'\n    return re.split(pattern, text)\n"}
{"task_id": "MBPP/74", "completion": "\n    # Check if the length of the colors array is equal to the length of the patterns array\n    if len(colors) != len(patterns):\n        return False\n\n    # Check if the colors array is a subset of the patterns array\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n\n    # If the function hasn't returned False, it means the colors array follows the patterns array\n    return True\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for t in test_list:\n        if all(i % K == 0 for i in t):\n            result.append(t)\n    return result\n"}
{"task_id": "MBPP/76", "completion": "\n    # calculate the number of squares in a rectangle\n    squares = m * n\n\n    return squares\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n    return even_sum - odd_sum\n"}
{"task_id": "MBPP/78", "completion": "\n    def count_SetBits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    count = 0\n    for i in range(1, n+1):\n        if count_SetBits(i) % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/80", "completion": "\n    return n*(n-3)*(n-2)//6\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    result = \"\"\n    for char in strr:\n        result += char\n    return result\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        sequence = [2, 1]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (9 * n - 7) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.deepcopy(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n"}
{"task_id": "MBPP/89", "completion": "\n    return N - (N % 10)\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(len(word) for word in list1)\n"}
{"task_id": "MBPP/91", "completion": "\n    return sub_str in str1\n"}
{"task_id": "MBPP/92", "completion": "\n    # Convert the number to string\n    str_n = str(n)\n\n    # Check if the string is undulating\n    for i in range(len(str_n) - 1):\n        if str_n[i] > str_n[i + 1]:\n            return False\n\n    return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/97", "completion": "\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    return sum(numbers) / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n"}
{"task_id": "MBPP/100", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num + 1\n\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\n"}
{"task_id": "MBPP/101", "completion": "\n    # Your code here\n    if k <= n:\n        return arr[k-1]\n    else:\n        return \"Invalid index\"\n"}
{"task_id": "MBPP/102", "completion": "\n    word = re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0 and m == 0:\n        return 0\n    elif n == 0:\n        return m - 1\n    elif m == 0:\n        return n - 1\n    else:\n        return eulerian_num(n - 1, m - 1) + n + m - 1\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n"}
{"task_id": "MBPP/105", "completion": "\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if 'x' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for num in [num1, num2, num3]:\n        for n in num:\n            heapq.heappush(heap, n)\n    return heapq.heappop(heap)\n"}
{"task_id": "MBPP/109", "completion": "\n    # count the number of 1's in the binary string\n    count_ones = s.count('1')\n\n    # if the count of 1's is even, return 0 as there are no rotations\n    if count_ones % 2 == 0:\n        return 0\n\n    # if the count of 1's is odd, return the number of rotations\n    else:\n        return n - count_ones\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_ranges = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_ranges.append(i)\n    return missing_ranges\n"}
{"task_id": "MBPP/111", "completion": "\n    # Flatten the list\n    flat_list = [item for sublist in nestedlist for item in sublist]\n\n    # Find common elements\n    common_elements = set(flat_list)\n\n    return common_elements\n"}
{"task_id": "MBPP/112", "completion": "\n    import math\n    radius = diameter / 2\n    perimeter = 2 * math.pi * radius * (radius + height)\n    return perimeter\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not dict1 for dict1 in list1)\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n"}
{"task_id": "MBPP/117", "completion": "\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            print(f\"{i} is not convertible to float. Skipping...\")\n    return float_list\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == arr[mid ^ 1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return arr[low]\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and sum is\", sum)\n    if (count == 0):\n        print(\"No such triplet found\")\n"}
{"task_id": "MBPP/122", "completion": "\n    if n <= 0 or n > MAX:\n        return \"Invalid input\"\n\n    # Initialize the first two smart numbers\n    a, b = 0, 1\n\n    # If n is 1, return 0\n    if n == 1:\n        return a\n\n    # If n is 2, return 1\n    if n == 2:\n        return b\n\n    # If n is greater than 2, calculate the nth smart number\n    for i in range(2, n):\n        a, b = b, a + b\n\n    return b\n"}
{"task_id": "MBPP/123", "completion": "\n\n        Helper function to calculate the sum of divisors of a number.\n        \"\"\"\n        result = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    result += i\n                else:\n                    result += i + n//i\n        return result\n\n    result = 0\n    for i in range(2, limit + 1):\n        if sum_divisors(i) > i and sum_divisors(sum_divisors(i)) == i:\n            result += i\n    return result\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize the maximum difference\n    max_diff = 0\n\n    # Initialize the count of 0s and 1s\n    count_0 = 0\n    count_1 = 0\n\n    # Traverse the string\n    for i in range(len(string)):\n        # If the current character is '0'\n        if string[i] == '0':\n            # Increment the count of 0s\n            count_0 += 1\n        else:\n            # Else, increment the count of 1s\n            count_1 += 1\n\n        # If the count of 0s and 1s are equal\n        if count_0 == count_1:\n            # Update the maximum difference\n            max_diff = max(max_diff, count_0 - count_1)\n\n    # Return the maximum difference\n    return max_diff\n"}
{"task_id": "MBPP/126", "completion": "\n    def common_divisors(a, b):\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    return sum(common_divisors(a, b))\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n\n        Check if a matrix is a magic square.\n        \"\"\"\n        def sum_rows_cols(matrix):\n            \"\"\"\n            Calculate the sum of elements in each row and column.\n            \"\"\"\n            row_sums = [sum(row) for row in matrix]\n            col_sums = [sum(column) for column in zip(*matrix)]\n            return row_sums, col_sums\n\n        def sum_diagonals(matrix):\n            \"\"\"\n            Calculate the sum of elements in the main and secondary diagonals.\n            \"\"\"\n            main_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n            secondary_diagonal_sum = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n            return main_diagonal_sum, secondary_diagonal_sum\n\n        row_sums, col_sums = sum_rows_cols(matrix)\n        main_diagonal_sum, secondary_diagonal_sum = sum_diagonals(matrix)\n\n        if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and main_diagonal_sum == secondary_diagonal_sum == sum(matrix[0]):\n            return True\n        return False\n\n    # Check if the matrix is a square matrix\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return \"The matrix is not a square matrix.\"\n\n    # Check if the matrix is a magic square\n    if is_magic_square(my_matrix):\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\"\n"}
{"task_id": "MBPP/130", "completion": "\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Find the numbers with maximum frequency\n    max_freq_nums = [num for num, freq in freq_dict.items() if freq == max_freq]\n\n    return max_freq_nums\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    # Check if the last element of the array is even or odd\n    if arr[-1] % 2 == 0:\n        last_element_is_even = True\n    else:\n        last_element_is_even = False\n\n    # Perform operation p times\n    for _ in range(p):\n        if last_element_is_even:\n            arr.append(1)\n        else:\n            arr.append(2)\n\n    return arr\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.75\n    else:\n        bill = 100 * 0.75 + (units - 100) * 1.20\n    return bill\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 4 == 0:\n            n = n // 4\n        else:\n            return False\n    return True\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if sublist.count(item) == 1:\n                result.append(item)\n    return result\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums), 0, -1):\n        max_idx = 0\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        flip(nums, max_idx+1)\n        flip(nums, i)\n\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    return len(Input)\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n"}
{"task_id": "MBPP/145", "completion": "\n    min_element = min(arr)\n    max_diff = max(arr) - min_element\n    return max_diff\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n"}
{"task_id": "MBPP/147", "completion": "\n    # Base case: if we're at the bottom of the triangle, return the value at that point\n    if m == n:\n        return tri[m][n]\n\n    # Recursive case: find the maximum sum of the path from the current point to the bottom\n    else:\n        return max(max_path_sum(tri, m-1, n), max_path_sum(tri, m-1, n-1)) + tri[m][n]\n"}
{"task_id": "MBPP/148", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return max(sum_digits(a) + sum_digits(b) for a in range(1, x + 1) for b in range(a, x + 1))\n\n"}
{"task_id": "MBPP/149", "completion": "\n    if not arr:\n        return 0\n\n    dp = [1]*n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n        max_length = max(max_length, dp[i])\n\n    return max_length\n"}
{"task_id": "MBPP/150", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1: return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    # calculate the vertex\n    vertex = -b / (2 * a)\n\n    # check if the vertex is within the range of the parabola\n    if vertex < c:\n        return vertex\n    else:\n        return None\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if i == N:\n                result.append(nums[i][j])\n    return result\n\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 1"}
{"task_id": "MBPP/155", "completion": "\n    # Convert the number to binary and toggle the bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(g))-1) for k,g in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Calculate the sum of all elements in the array\n    total_sum = sum(arr)\n\n    # If the total sum is not divisible by k, return -1\n    if total_sum % k != 0:\n        return -1\n\n    # Calculate the target sum\n    target_sum = total_sum // k\n\n    # Calculate the number of operations required\n    operations = 0\n    for num in arr:\n        operations += abs(num - target_sum) // k\n\n    return operations\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 12 or month == 1 or month == 2) or (month == 3 and days < 20):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5) or (month == 6 and days < 20):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8) or (month == 9 and days < 20):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11) or (month == 12 and days < 20):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month and/or day\")\n"}
{"task_id": "MBPP/160", "completion": "\n    for x in range(1, n+1):\n        if n % x == 0:\n            y = n // x\n            if y < x:\n                break\n            if x <= a and y <= b:\n                return x, y\n    return -1, -1\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n"}
{"task_id": "MBPP/162", "completion": "\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n"}
{"task_id": "MBPP/163", "completion": "\n    # calculate the area of a regular polygon\n    area = (s ** 2) / (4 * tan(pi / l))\n    return area\n"}
{"task_id": "MBPP/164", "completion": "\n    sum_of_divisors = sum([i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0])\n    return sum_of_divisors * sum_of_divisors == n\n"}
{"task_id": "MBPP/165", "completion": "\n    count_list = [0]*26\n    for char in str1:\n        if 'a' <= char <= 'z':\n            count_list[ord(char) - ord('a')] += 1\n    return count_list\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n+1):\n            pell_numbers.append(2*pell_numbers[i-1] + pell_numbers[i-2])\n        return pell_numbers[n]\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    return s.count('std')\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub('[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            if lcm(i, j) > R:\n                break\n            if lcm(i, j) >= L:\n                return [i, j]\n    return \"No such numbers found\"\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 10 == 0:\n        return False\n    sum = 0\n    while x > 0:\n        sum += x % 10\n        x = x // 10\n    if sum % 10 == 0:\n        return False\n    return True\n\n"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    min_len = min(len(str1), len(str2))\n    result = \"\"\n    for i in range(min_len):\n        if str1[i] == str2[i]:\n            result += str1[i]\n        else:\n            break\n    return result\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return uppercase_letters, lowercase_letters, special_characters, numeric_values\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b - (D**0.5)) / (2*a)\n        root2 = (-b + (D**0.5)) / (2*a)\n\n        # return the roots\n        return root1, root2\n\n    else:\n        # if the discriminant is negative, the parabola has no real roots\n        return None\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n        else:\n            print(f\"Not found: {pattern}\")\n\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n:\n            if i*j*i*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # Create a boolean array \"visited\" and initialize all entries as false.\n    # A value at index i indicates that there exists an integer i in the array.\n    visited = [False] * (n + 1)\n\n    # Iterate through the given array and mark the presence of each number\n    # as true in the visited array.\n    for i in range(n):\n        if arr[i] >= 1 and arr[i] <= n:\n            visited[arr[i] - 1] = True\n\n    # Return the first index which is still unvisited\n    for i in range(n):\n        if not visited[i]:\n            return i + 1\n\n    # If all numbers are present\n    return n + 1\n"}
{"task_id": "MBPP/190", "completion": "\n    # Check if the points are integral\n    if x1.is_integer() and y1.is_integer() and x2.is_integer() and y2.is_integer():\n        return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    result = []\n    for tup in [test_tup1, test_tup2]:\n        for num in tup:\n            if isinstance(num, tuple):\n                result.append(num[0]**num[1])\n            else:\n                result.append(num)\n    return tuple(result)\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major axis of the ellipse\n    semi_major_axis = math.sqrt(a**2 / math.pi)\n\n    # Calculate the semi-minor axis of the ellipse\n    semi_minor_axis = math.sqrt(b**2 / math.pi)\n\n    # Calculate the hypotenuse of the triangle\n    hypotenuse = math.sqrt(semi_major_axis**2 + semi_minor_axis**2)\n\n    # Calculate the area of the triangle\n    area = 0.5 * semi_major_axis * semi_minor_axis\n\n    # Return the area of the largest triangle that can be inscribed in the ellipse\n    return area\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return (1 << (i - 1))\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return all(x == lst[0] for x in lst)\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([i for i in str1 if not i % 2 == 0])\n"}
{"task_id": "MBPP/203", "completion": "\n    x = bin(n1)[2:].zfill(len(bin(n1)[2:]))\n    y = bin(n2)[2:].zfill(len(bin(n2)[2:]))\n    return sum(el1 != el2 for el1, el2 in zip(x, y))\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n"}
{"task_id": "MBPP/206", "completion": "\n    return tuple(str(i) + str(j) for i, j in test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    longest_repeating_subseq = \"\"\n\n    # Create a table to store lengths of longest repeating subsequences\n    lrs_length = [[0]*n for _ in range(n)]\n\n    # Fill dp[][] in bottom up manner\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if (str[i] == str[j] and i+1 < j):\n                dp[i][j] = 1 + dp[i+1][j-1]\n                if dp[i][j] > len(longest_repeating_subseq):\n                    longest_repeating_subseq = str[i:j+1]\n            else:\n                dp[i][j] = 0\n\n    return longest_repeating_subseq\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^-?\\d+\\.\\d{1,2}$'\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapify(heap)\n    hq.heappush(heap, a)\n    return hq.heappop(heap)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile('^[a-z0-9]*$')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/211", "completion": "\n    def count_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    count = 0\n    for i in range(n+1, 2**n):\n        if count_bits(i) == count_bits(i^(2**(i-n))):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n+1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Convert the numbers to binary\n    A_bin = bin(A)[2:]\n    B_bin = bin(B)[2:]\n\n    # Calculate the length of the binary representation\n    len_A = len(A_bin)\n    len_B = len(B_bin)\n\n    # Calculate the difference in length\n    diff_len = abs(len_A - len_B)\n\n    # Calculate the number of operations\n    operations = diff_len + sum(int(a) != int(b) for a, b in zip(A_bin, B_bin))\n\n    return operations\n"}
{"task_id": "MBPP/219", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/220", "completion": "\n    # Define the special characters\n    special_chars = [' ', ',', '.']\n\n    # Replace the maximum n occurrences of the special characters\n    for char in special_chars:\n        text = re.sub(char, ':', text, n)\n\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return False\n    return True\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    majority_element = -1\n\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n        else:\n            if (count > n / 2):\n                majority_element = x\n            count = 0\n\n    if (count > n / 2):\n        majority_element = x\n\n    if (majority_element != -1):\n        return majority_element\n    else:\n        return -1\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if bin(i) == bin(i).zfill(n.bit_length()):\n            return False\n    return True\n"}
{"task_id": "MBPP/229", "completion": "\n    # Split the array into positive and negative parts\n    pos = [x for x in arr if x >= 0]\n    neg = [x for x in arr if x < 0]\n\n    # Combine the two parts\n    result = neg + pos\n\n    # If the length of the result is not equal to n, return None\n    if len(result) != n:\n        return None\n\n    return result\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n"}
{"task_id": "MBPP/231", "completion": "\n    # Create a 2D array to store the maximum sum of each sub-triangle\n    max_sum_tri = [[0 for x in range(n)] for y in range(n)]\n\n    # Fill the max_sum_tri array in bottom-up manner\n    for i in range(n):\n        max_sum_tri[n-1][i] = tri[n-1][i]\n\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            max_sum_tri[i][j] = max(max_sum_tri[i+1][j], max_sum_tri[i+1][j+1]) + tri[i][j]\n\n    return max_sum_tri[0][0]\n"}
{"task_id": "MBPP/232", "completion": "\n    if n > len(list1):\n        return \"n is larger than the list\"\n    else:\n        return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    return n | (n & 0xAAAAAAAA)\n"}
{"task_id": "MBPP/236", "completion": "\n    # The maximum number of triangles that can be formed is N/2\n    return N//2\n"}
{"task_id": "MBPP/237", "completion": "\n    # Count the occurrences of each record\n    count_dict = Counter(test_list)\n\n    # Find the maximum count\n    max_count = max(count_dict.values())\n\n    # Find the records with the maximum count\n    result = [key for key, value in count_dict.items() if value == max_count]\n\n    return result\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * get_total_number_of_sequences(m, n - 1)\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(n)] for _ in range(m)]\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n"}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in lst:\n        if i[0] in count_dict:\n            count_dict[i[0]] += 1\n        else:\n            count_dict[i[0]] = 1\n\n    # Sort the list based on the count of the first element\n    lst.sort(key=lambda x: count_dict[x[0]])\n\n    return lst\n\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if root * root != N:\n        return -1\n    return (root + 1) ** 2\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize maximum sum as negative infinity\n    max_sum = -float('inf')\n\n    # Initialize dp array\n    dp = [0]*n\n    dp[0] = arr[0]\n\n    # Fill dp array\n    for i in range(1, n):\n        dp[i] = max(arr[i], dp[i-1] + arr[i])\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    # Check if the number is positive\n    if number < 0:\n        return \"Error: Number must be positive\"\n\n    # Initialize guess\n    guess = number / 2.0\n\n    # Babylonian method\n    for i in range(10):\n        guess = (guess + number / guess) / 2.0\n\n    return guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    return L[0][n - 1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    return [element, *list]\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for n in numbers:\n        r = abs(n)\n        theta = cmath.phase(n)\n        result.append((r, theta))\n    return result\n\nnumbers = [1+2j, 2+3j, 3+4j]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[ae]\\w*\\b', text)\n    return words\n"}
{"task_id": "MBPP/255", "completion": "\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\n    result = list(combinations_with_replacement(colors, n))\n    return result\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    # Your code here\n    a, b = b, a\n    return a, b\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    return tuple(sorted(test_tup1 + test_tup2, reverse=True))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        for i in range(4, n + 1):\n            if all(i % p != 0 for p in primes):\n                primes.append(i)\n        return primes[n - 1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    try:\n        return tuple(el1/el2 for el1, el2 in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n"}
{"task_id": "MBPP/262", "completion": "\n    return [list1[:L], list1[L:]]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n"}
{"task_id": "MBPP/264", "completion": "\n    # Calculate the age in dog's years\n    dog_age_in_dog_years = h_age * 7\n    return dog_age_in_dog_years\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"}
{"task_id": "MBPP/268", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum_even_binomial_coeff = 0\n\n    # Loop through even index binomial coefficients\n    for i in range(0, n+1, 2):\n        # Calculate binomial coefficient\n        binomial_coeff = math.comb(n, i)\n\n        # Add to sum\n        sum_even_binomial_coeff += binomial_coeff\n\n    return sum_even_binomial_coeff\n"}
{"task_id": "MBPP/275", "completion": "\n    # Calculate the position of the last removed element\n    pos = (n - m) % n\n    return pos\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n + (n-1) + (n-2)\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return [a - b for a, b in zip(nums1, nums2)]\n"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for digit in n:\n        if n.count(digit) > digit:\n            return False\n    return True\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/286", "completion": "\n    # Calculate the sum of the first k elements\n    sum_k_elements = sum(a[:k])\n    current_sum = sum_k_elements\n    max_sum = sum_k_elements\n\n    # Subtract the first k elements and add the next element\n    for i in range(k, n):\n        current_sum = current_sum - a[i - k] + a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for i in arr:\n        if pow(i, P-2, P) == 1:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/289", "completion": "\n    # Initialize the count of odd days\n    odd_days = 0\n\n    # Loop through each month in the year\n    for month in range(1, 13):\n        # Loop through each day in the month\n        for day in range(1, 32):\n            # Check if the day is odd\n            if day % 2 != 0:\n                odd_days += 1\n\n        # If the month has 28 or 29 days, add 1 to the count\n        if month in [4, 6, 9, 11] and day == 30:\n            odd_days += 1\n\n        # If the month has 30 days, add 1 to the count\n        if month == 2 and day == 29:\n            odd_days += 1\n\n    return odd_days\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length_list = max(list1, key=len)\n    return max_length_list\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] * (k - 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        return n / m\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the aggregate values\n    aggregate_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for tup in stdata:\n        # Calculate the aggregate value for each tuple\n        aggregate_value = sum(tup)\n\n        # Add the aggregate value to the dictionary\n        aggregate_dict[tup] = aggregate_value\n\n    # Find the maximum aggregate value\n    max_aggregate_value = max(aggregate_dict.values())\n\n    # Find the tuple with the maximum aggregate value\n    max_aggregate_tuple = [k for k, v in aggregate_dict.items() if v == max_aggregate_value]\n\n    return max_aggregate_tuple\n"}
{"task_id": "MBPP/300", "completion": "\n    def count_seq(n):\n        if n == 0:\n            return 1\n        else:\n            return 2 * count_seq(n - 1)\n\n    return count_seq(2 * n)\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + (max(d.values(), key=dict_depth) if d else 0)\n    else:\n        return 0\n"}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return -1\n    else:\n        msb_position = 0\n        while ((n & 1) == 0) and (n != 0):\n            n >>= 1\n            msb_position += 1\n        return msb_position\n"}
{"task_id": "MBPP/303", "completion": "\n    # Your code here\n    a.sort()\n    b = a.copy()\n    b.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            count += 1\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Calculate the new index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Return the element at the new index\n    return arr[new_index]\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n    return max(dp)\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[:m] + tuplex[m:n] + tuplex[n:]\n"}
{"task_id": "MBPP/308", "completion": "\n    nums1.sort()\n    nums2.sort()\n    nums1.reverse()\n    nums2.reverse()\n\n    max_product = float('-inf')\n\n    for i in range(N):\n        max_product = max(max_product, nums1[i]*nums2[i])\n\n    return max_product\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    if n & (n + 1) == 0:\n        return n + 1\n    else:\n        return n\n"}
{"task_id": "MBPP/312", "completion": "\n    # volume = (1/3) * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp2 = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = dp[i-1][j] + grid[i][j]\n            if j > 0:\n                dp2[i][j] = max(dp2[i-1][j-1] + grid[i][j], dp[i-1][j] + grid[i][j])\n            else:\n                dp2[i][j] = dp[i-1][j] + grid[i][j]\n\n    max_sum = float('-inf')\n    for j in range(n):\n        max_sum = max(max_sum, dp2[m-1][j])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if even_words:\n        return max(even_words, key=len)\n    else:\n        return None\n"}
{"task_id": "MBPP/316", "completion": "\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # Split the string into a list of integers\n    sides = list(map(int, s.split(' ')))\n\n    # Calculate the volume of the cuboid\n    volume = sides[0] * sides[1] * sides[2]\n\n    return volume\n"}
{"task_id": "MBPP/319", "completion": "\n    return re.findall(r'\\b\\w{5}\\b', text)\n\ntext = \"This is a test string. This is only a test.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_squares - sum_of_numbers**2\n"}
{"task_id": "MBPP/321", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n"}
{"task_id": "MBPP/323", "completion": "\n    if n == 1:\n        if arr[cur] < 0:\n            return arr\n        else:\n            arr[cur], arr[cur + 1] = arr[cur + 1], arr[cur]\n            return arr\n    else:\n        if arr[cur] < 0:\n            right_rotate(arr, n - 1, cur + 1, cur + 1)\n        else:\n            right_rotate(arr, n - 1, cur + 1, cur)\n        return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n"}
{"task_id": "MBPP/325", "completion": "\n    # Initialize the dp array\n    dp = [0] + [float('inf')] * n\n\n    # Loop through the dp array\n    for i in range(1, n + 1):\n        # Loop through the possible values of i\n        for j in range(1, i + 1):\n            # Update the dp[i] with the minimum value\n            dp[i] = min(dp[i], dp[i - j] + 1)\n\n    return dp[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_counts = defaultdict(int)\n    for word in test_list:\n        word_counts[word.lower()] += 1\n\n    max_count = max(word_counts.values())\n    most_occurred_words = [word for word, count in word_counts.items() if count == max_count]\n\n    return most_occurred_words\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return \"The triangle is isosceles\"\n    else:\n        return \"The triangle is not isosceles\"\n"}
{"task_id": "MBPP/328", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/329", "completion": "\n    return list.count(-1)\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/331", "completion": "\n    # Convert the number to binary and count the number of unset bits\n    return bin(n).count('0')\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return \"The month {} has 31 days.\".format(monthname1)\n    elif monthname1 in ['April', 'June', 'September', 'November']:\n        return \"The month {} has 30 days.\".format(monthname1)\n    elif monthname1 == 'February':\n        return \"The month {} has 28 days.\".format(monthname1)\n    else:\n        return \"Invalid month name.\"\n"}
{"task_id": "MBPP/337", "completion": "\n    word_boundary = r'\\b'\n    word_pattern = r'\\w+'\n    match_word = r'\\b' + word_pattern + r'\\b'\n    matches = re.findall(word_boundary + match_word, text)\n    return matches\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    # Check if x and y are both greater than 0\n    if x > 0 and y > 0:\n        # Check if x is greater than y\n        if x > y:\n            # Iterate from y to x\n            for i in range(y, x + 1):\n                # Check if i is a divisor of x\n                if x % i == 0:\n                    return i\n        else:\n            # Iterate from x to y\n            for i in range(x, y + 1):\n                # Check if i is a divisor of y\n                if y % i == 0:\n                    return i\n    else:\n        return \"x and y must be greater than 0\"\n"}
{"task_id": "MBPP/340", "completion": "\n    # First, we will filter out the non-positive numbers from the list.\n    # Then, we will sort the list in ascending order and sum the first three numbers.\n    lst = sorted([i for i in lst if i > 0])\n    if len(lst) < 3:\n        return \"The list does not contain at least three positive numbers.\"\n    else:\n        return sum(lst[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(list(s)))\n"}
{"task_id": "MBPP/342", "completion": "\n    heap = []\n    for i, arr in enumerate(list):\n        heappush(heap, Node(arr[0], i, 0))\n        arr.pop(0)\n\n    start, end = 0, float('inf')\n    min_range = float('inf')\n\n    while heap:\n        node = heappop(heap)\n        if node.index < len(list[node.list_num]) - 1:\n            next_value = list[node.list_num][node.index + 1]\n            heappush(heap, Node(next_value, node.list_num, node.index + 1))\n            list[node.list_num].pop(node.index + 1)\n        else:\n            if node.value - heap[0].value < min_range:\n                min_range = node.value - heap[0].value\n                start, end = heap[0].value, node.value\n\n    return [start, end]\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters\n"}
{"task_id": "MBPP/344", "completion": "\n    def count_Odd_Factors(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                if i % 2 != 0:\n                    count += 1\n        return count\n\n    return sum(count_Odd_Factors(i) for i in range(n, m + 1))\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n % k == 0:\n        return n\n    else:\n        return n + (k - n % k)\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # calculate the number of squares in a rectangle\n    squares = m * n\n\n    return squares\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0:\n        return 1\n    if r == 0:\n        return 0\n    if dp[n][r] != -1:\n        return dp[n][r]\n    dp[n][r] = bin_coff(n-1, r-1) + bin_coff(n-1, r)\n    return dp[n][r]\n\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i not in ['0', '1']:\n            return False\n    return True\n"}
{"task_id": "MBPP/350", "completion": "\n    if len(set(s)) == 1:\n        return ''\n    else:\n        return s\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return \"Element not found\"\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n"}
{"task_id": "MBPP/353", "completion": "\n    if n < 0 or n >= len(list1):\n        return \"Invalid column number\"\n    else:\n        return [i[:n] + i[n+1:] for i in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 1:\n        return a\n    else:\n        return a + (n - 1) * d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n\n    # The formula for the area of a circle is \u03c0r^2\n    # We can solve for r by using the formula: r = sqrt(\u03c0 * r^2)\n    # We can solve for the number of rectangles by using the formula: 2 * \u03c0 * r\n\n    # Calculate the radius of the circle\n    r = math.sqrt(math.pi * radius**2)\n\n    # Calculate the number of rectangles\n    rectangles = 2 * math.pi * r\n\n    return int(rectangles)\n"}
{"task_id": "MBPP/356", "completion": "\n    # calculate the third angle\n    c = 180 - (a + b)\n\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n"}
{"task_id": "MBPP/358", "completion": "\n    return [(lambda x, y: x % y)(nums1[i], nums2[i]) for i in range(len(nums1))]\n\n"}
{"task_id": "MBPP/359", "completion": "\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    # check if discriminant is greater than 0\n    if D > 0:\n        # calculate the roots\n        root1 = (-b + D**0.5) / (2*a)\n        root2 = (-b - D**0.5) / (2*a)\n        return root1, root2\n    elif D == 0:\n        # if discriminant is 0, then it's a linear equation\n        root = -b / (2*a)\n        return root, root\n    else:\n        # if discriminant is less than 0, then it's a quadratic equation with complex roots\n        import cmath\n        root1 = cmath.sqrt(-D) / (2*a)\n        root2 = cmath.sqrt(-D) / (2*a)\n        return root1, root2\n"}
{"task_id": "MBPP/360", "completion": "\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + 1\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i != []]\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    return count.most_common(1)\n"}
{"task_id": "MBPP/363", "completion": "\n    result = []\n    for i in test_list:\n        result.append(i + K)\n    return result\n"}
{"task_id": "MBPP/364", "completion": "\n    flips = 0\n    for i in range(len(ch) - 1):\n        if ch[i] == ch[i + 1]:\n            flips += 1\n    return flips\n\n"}
{"task_id": "MBPP/365", "completion": "\n    return len(str(n))\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, current_product)\n    return max_product\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [test_tup] * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] != left_element:\n        return left_element\n    elif A[-1] != right_element:\n        return right_element\n\n    for i in range(len(A) - 1):\n        if A[i+1] - A[i] > 1:\n            return A[i] + 1\n\n    return -1\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(char + p)\n    return perms\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n/m)*m\n"}
{"task_id": "MBPP/376", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for item in test_tup:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Create a new tuple with the elements that occur only once\n    new_tup = ()\n    for item in test_tup:\n        if count_dict[item] == 1:\n            new_tup += (item,)\n\n    return new_tup\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        first = test_list[0]\n        test_list = test_list[1:] + [first]\n        return test_list\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0]*colnum for _ in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    def is_rotation(A, B):\n        return A == B[::-1]\n\n    def binary_search(A, target):\n        start, end = 0, len(A) - 1\n        while start <= end:\n            mid = (start + end) // 2\n            if A[mid] == target:\n                return mid\n            elif A[mid] >= A[start]:\n                if target >= A[start] and target < A[mid]:\n                    end = mid - 1\n                else:\n                    start = mid + 1\n            else:\n                if target <= A[end] and target > A[mid]:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n        return -1\n\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if is_rotation(A, A[1:] + A[:1]):\n        return 1\n    for i in range(n):\n        if binary_search(A, A[i]) != -1:\n            return i\n    return -1\n"}
{"task_id": "MBPP/383", "completion": "\n    # Convert the number to binary and toggle odd bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * get_perrin(n - 1) + 1\n\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 0\n    else:\n        return len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    if n < 1:\n        return \"Input should be a positive integer\"\n    else:\n        return n.bit_length()\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas = [2, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n"}
{"task_id": "MBPP/391", "completion": "\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    def f(n):\n        if n == 1:\n            return 1\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\n    return f(n)\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char\n\n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.fullmatch(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return [sum_of_digits(num) for num in nums]\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    result = ()\n    for t1, t2 in zip(test_tup1, test_tup2):\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result += (add_nested_tuples(t1, t2),)\n        else:\n            result += (t1 + t2,)\n    return result\n"}
{"task_id": "MBPP/402", "completion": "\n    # Calculate n!/((n-r)!*r!) mod p\n    numerator = factorial(n)\n    denominator = (factorial(n-r) * factorial(r)) % p\n    result = (numerator % p) / (denominator % p)\n    return result\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Find the first pair of digits that are in descending order\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    # If no such pair is found, the number is already the largest possible\n    if i == -1:\n        return n\n    # Find the second digit in the pair that is larger than the first digit\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    # Swap the first and second digits\n    digits[i], digits[j-1] = digits[j-1], digits[i]\n    # Rearrange the digits in descending order\n    digits[i+1:] = sorted(digits[i+1:], reverse=True)\n    # Return the number as an integer\n    return int(''.join(map(str, digits)))\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2 or k == 0:\n        return []\n\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n\n    return heapq.nsmallest(k, pairs, key=lambda x: x[0] + x[1])\n"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r\"(_|-)+\", \" \", word).title().replace(\" \", \"\")\n"}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[n-1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product = max(max_product, min_so_far * arr[i])\n            min_product = min(min_product, max_so_far * arr[i])\n        else:\n            max_so_far = max(arr[i], max_so_far * arr[i])\n            min_so_far = min(arr[i], min_so_far * arr[i])\n\n        max_product = max(max_product, max_so_far)\n        min_product = min(min_product, min_so_far)\n\n    return max_product\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        max_sum = -1\n        for i in range(1, n):\n            sum_ = breakSum(n - i) + i\n            if sum_ > max_sum:\n                max_sum = sum_\n        return max_sum\n"}
{"task_id": "MBPP/417", "completion": "\n    common_first_element = []\n    for tup in Input:\n        common_first_element.append(tup[0])\n    return common_first_element\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = -1\n    max_sublist = None\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n                max_sublist = sublist\n    return max_sublist\n\n"}
{"task_id": "MBPP/419", "completion": "\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    if gold[m][n] != -1:\n        return gold[m][n]\n    right = get_maxgold(gold, m, n-1)\n    down = get_maxgold(gold, m-1, n)\n    left = get_maxgold(gold, m, n-1)\n    diagonal = get_maxgold(gold, m-1, n-1)\n    gold[m][n] = max(right, down, left, diagonal) + gold[m][n]\n    return gold[m][n]\n"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(s[-1] for s in test_tuple)\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n"}
{"task_id": "MBPP/427", "completion": "\n    match = re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n\n        for i in range(gap,n):\n\n            temp = my_list[i]\n\n            j = i\n            while  j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples are not of equal length\"\n\n    result = []\n    for t1, t2 in zip(test_tup1, test_tup2):\n        result.append(t1 & t2)\n\n    return tuple(result)\n\n"}
{"task_id": "MBPP/430", "completion": "\n    # calculate the discriminant\n    d = b**2 - 4*a*c\n\n    # check if the discriminant is positive\n    if d >= 0:\n        x1 = (-b - d**0.5) / (2*a)\n        x2 = (-b + d**0.5) / (2*a)\n        return x1, x2\n    else:\n        return \"The parabola has no real directrix.\"\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    # calculate the median\n    median = (area * 2) / (base1 + base2)\n    return median\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'ab+'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join(ch for ch in str1 if ch % 2 == 0)\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n"}
{"task_id": "MBPP/440", "completion": "\n    adverb_pattern = re.compile(r'\\badv\\b')\n    adverb_positions = [(m.start(0), m.end(0)) for m in re.finditer(adverb_pattern, text)]\n    return adverb_positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    return [t[K:] for t in test_list]\n"}
{"task_id": "MBPP/445", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of equal length\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n"}
{"task_id": "MBPP/446", "completion": "\n    # Create a Counter object from the tuple\n    tup_counter = Counter(tup)\n\n    # Create a Counter object from the list\n    lst_counter = Counter(lst)\n\n    # Return the count of each element in the list\n    return {key: lst_counter[key] - tup_counter[key] for key in lst_counter if key in tup_counter}\n"}
{"task_id": "MBPP/447", "completion": "\n    return [lambda x: x**3](nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the distance between the points\n    def distance(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    # Check if the triangle is valid\n    def is_valid(x1, y1, x2, y2, x3, y3):\n        # Calculate the distance between the points\n        d1 = distance(x1, y1, x2, y2)\n        d2 = distance(x1, y1, x3, y3)\n        d3 = distance(x2, y2, x3, y3)\n\n        # Check if any of the distances is equal to the other two\n        if d1 == d2 or d1 == d3 or d2 == d3:\n            return False\n\n        # Check if the triangle is valid\n        if d1 < d2 + d3 or d2 < d1 + d3 or d3 < d1 + d2:\n            return True\n        else:\n            return False\n\n    return is_valid(x1, y1, x2, y2, x3, y3)\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i and (n // i) % 2 == 0:\n                sum += n // i\n    return sum\n"}
{"task_id": "MBPP/454", "completion": "\n    word_list = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return word_list\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remaining = list1[:i] + list1[i+1:]\n            for c in combinations_list(remaining):\n                result.append([m] + c)\n        return result\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return \"0\"\n    octNum = \"\"\n    while deciNum != 0:\n        octNum = str(deciNum % 8) + octNum\n        deciNum = deciNum // 8\n    return octNum\n"}
{"task_id": "MBPP/468", "completion": "\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            product = 1\n            for k in sub_arr:\n                product *= k\n            max_product = max(max_product, product)\n    return max_product\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n\n    # Initialize the dp table\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    # Initialize the first row and first column\n    for i in range(n):\n        dp[0][i] = 0\n        dp[i][0] = 0\n\n    # Fill up the dp table\n    for i in range(1, k+1):\n        max_so_far = dp[i-1][0] - price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], max_so_far + price[j])\n            max_so_far = max(max_so_far, dp[i-1][j] - price[j])\n\n    return dp[k][n-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return tuple(a + b for a, b in test_tup)\n"}
{"task_id": "MBPP/471", "completion": "\n    result = 1\n    for i in range(lens):\n        result = (result * arr[i]) % n\n    return result\n"}
{"task_id": "MBPP/472", "completion": "\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False\n"}
{"task_id": "MBPP/473", "completion": "\n    return tuple(set(test_list1) & set(test_list2))\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n"}
{"task_id": "MBPP/476", "completion": "\n    return max(nums) + min(nums)\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    n = str(n)\n    return n[0]\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (max_count < count[ord(i)]):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z]+[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"Hello World123\""}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    i = 0\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    result = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result.append(t1)\n    for t2 in test_list2:\n        if t2 not in test_list1:\n            result.append(t2)\n    return result\n"}
{"task_id": "MBPP/485", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    max_palindrome = -1\n    for num in arr:\n        if is_palindrome(num) and num > max_palindrome:\n            max_palindrome = num\n\n    return max_palindrome\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n or r < 0:\n        return 0\n    else:\n        return fact(n) / (fact(r) * fact(n - r))\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    # The formula to calculate the area of a pentagon is:\n    # Area = (3 * sqrt(5) * (s^2)) / 2\n    # where s is the side of the pentagon\n\n    side = a / (2 * math.sqrt(5))\n    area = (3 * math.sqrt(5) * (side ** 2)) / 2\n    return area\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    def is_symmetric(lst):\n        return lst == lst[::-1]\n\n    return [lst for lst in test_list if is_symmetric(lst)]\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    dx = endx - startx\n    dy = endy - starty\n    distance = math.sqrt(dx**2 + dy**2)\n\n    # Calculate the number of hexagons in the radius\n    num_hexagons = int(distance / (2 * radius))\n\n    # Calculate the coordinates of the hexagons\n    hexagons = []\n    for i in range(num_hexagons):\n        x = startx + dx * (i / num_hexagons)\n        y = starty + dy * (1 - (i % 2) / 2) * (1 / math.sqrt(3))\n        hexagons.append([(x, y)])\n\n    return hexagons\n"}
{"task_id": "MBPP/494", "completion": "\n    binary_str = ''.join(str(i) for i in test_tup)\n    return int(binary_str, 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    if n > len(nums):\n        return \"Invalid input\"\n\n    # Using heapify to convert list into a heap\n    hq.heapify(nums)\n\n    # Pop smallest elements from heap\n    smallest_nums = []\n    for _ in range(n):\n        smallest_nums.append(hq.heappop(nums))\n\n    return smallest_nums\n"}
{"task_id": "MBPP/497", "completion": "\n    # surface area of cone = 1/3 * pi * r^2 * h\n    return 1/3 * math.pi * r**2 * h\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    return gcd\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n"}
{"task_id": "MBPP/503", "completion": "\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Split the array into two parts: one with non-zero elements, and one with zeroes.\n    # Then concatenate the two parts.\n    return [i for i in A if i != 0] + [i for i in A if i == 0]\n"}
{"task_id": "MBPP/506", "completion": "\n    # Calculate the factorial of n\n    fact_n = 1\n    for i in range(1, n+1):\n        fact_n *= i\n\n    # Calculate the factorial of k\n    fact_k = 1\n    for i in range(1, k+1):\n        fact_k *= i\n\n    # Calculate the factorial of n-k\n    fact_n_k = 1\n    for i in range(1, n-k+1):\n        fact_n_k *= i\n\n    # Calculate the permutation coefficient\n    perm_coef = fact_n / (fact_k * fact_n_k)\n\n    return perm_coef\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n"}
{"task_id": "MBPP/510", "completion": "\n    def count_subsequences(arr, n, k):\n        if n == 0:\n            return 0\n        else:\n            count = 0\n            if arr[n - 1] < k:\n                count = 1 + count_subsequences(arr, n - 1, k // arr[n - 1])\n            return count + count_subsequences(arr, n - 1, k)\n\n    return count_subsequences(arr, len(arr), k)\n\n"}
