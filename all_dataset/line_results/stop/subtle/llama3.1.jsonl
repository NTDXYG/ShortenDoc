{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over the characters in the input string\n    for char in paren_string:\n        # If the character is an opening parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a closing parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've found a complete group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, skip it\n\n    # Sort the groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n    pass"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    # Calculate the absolute difference between each number and the median\n    absolute_diffs = [abs(num - median) for num in numbers]\n    # Sort the absolute differences\n    absolute_diffs.sort()\n    # Calculate the median of the absolute differences\n    mad = absolute_diffs[len(absolute_diffs) // 2] if len(absolute_diffs) % 2 else (absolute_diffs[len(absolute_diffs) // 2 - 1] + absolute_diffs[len(absolute_diffs) // 2]) / 2\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Split the input string into groups\n    groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting level for each group\n    max_nesting_levels = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize the current nesting level and the maximum nesting level for the current group\n        current_nesting_level = 0\n        max_nesting_level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current nesting level\n            if char == '(':\n                current_nesting_level += 1\n                # Update the maximum nesting level for the current group\n                max_nesting_level = max(max_nesting_level, current_nesting_level)\n            # If the character is a closing parenthesis, decrement the current nesting level\n            elif char == ')':\n                current_nesting_level -= 1\n\n        # Append the maximum nesting level for the current group to the list\n        max_nesting_levels.append(max_nesting_level)\n\n    # Return the list of maximum nesting levels in descending order\n    return sorted(max_nesting_levels, reverse=True)  # Changed here\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = sum(num for num in numbers if num >= 0)\n    product_of_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            product_of_numbers *= num\n        else:\n            return sum_of_numbers, 1\n    return sum_of_numbers, product_of_numbers"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return ''\n\n    # Find longest prefix of string that is a palindrome\n    prefix = ''\n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            prefix = string[:i+1]\n\n    # Append start string reverse string suffix\n    return prefix + prefix[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if a[i] != b[i] else '0' for i in range(len(a)))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # min() function return smallest item in iterable\n    # key=len means we want to compare the length of the strings\n    # min() function return the smallest item in iterable\n    # if multiple items are smallest, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one\n    # if input list is empty, return None\n    # if input list is not empty, return the shortest string\n    # if multiple strings have the same length, return the first one"}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    return a * b // gcd(a, b)  # Use integer division to get an integer result\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert string to set to remove duplicates and count the number of elements in the set\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    result.sort(reverse=True)\n    return result\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Define a dictionary to map string numerals to integers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Split the input string into a list of string numerals\n    num_list = numbers.split()\n    # Use a list comprehension to convert each string numeral to an integer\n    num_list = [num_dict[num] for num in num_list]\n    # Sort the list of integers in descending order\n    num_list.sort(reverse=True)\n    # Use a list comprehension to convert each integer back to a string numeral\n    num_list = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n    # Join the sorted list of string numerals into a string with spaces in between\n    sorted_str = ' '.join(num_list)\n    return sorted_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in sorted(numbers, reverse=True)]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.lower() if char.islower() else char for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.upper() if char.isupper() else char for char in string])\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    # find largest non zero coefficient\n    max_coeff = max([coeff for coeff in xs if coeff != 0])\n    # find index of largest non zero coefficient\n    max_index = [i for i, coeff in enumerate(xs) if coeff == max_coeff][0]\n    # find zero point\n    return -max_coeff / xs[max_index + 1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0], reverse=True)[i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 != 0 else sorted([l[i] for i in range(len(l)) if i % 2 == 0], reverse=True)[j] for i, j in enumerate(range(len(l)))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        if b % 2 == 0:\n            return None\n        if is_prime(b):\n            return b\n    return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    # sort the list\n    l.sort()\n    # iterate over the list\n    for i in range(len(l) - 2):\n        # initialize two pointers\n        left, right = i + 1, len(l) - 1\n        # iterate until the two pointers meet\n        while left < right:\n            # calculate the sum of the three elements\n            total = l[i] + l[left] + l[right]\n            # if the sum is ten, return True\n            if total == 10:\n                return True\n            # if the sum is less than ten, move the left pointer\n            elif total < 10:\n                left += 1\n            # if the sum is greater than ten, move the right pointer\n            else:\n                right -= 1\n    # if no three elements sum to ten, return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    # Iterate over the list\n    for num in l:\n        # Check if the complement of the current number is in the set\n        if num in seen:\n            return True\n        # Add the current number to the set\n        seen.add(-num)\n    # If we have iterated over the entire list and haven't found a pair that sums to one, return False\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Invalid base. Base should be between 2 and 10.\")\n    if x < 0:\n        raise ValueError(\"Input number should be non-negative.\")\n    if x == 0:\n        return 0\n    result = 0\n    power = 0\n    while x > 0:\n        result += (x % 10) * (base ** power)\n        x //= 10\n        power += 1\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n <= 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib4_sequence = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib4_sequence.append(fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4])\n        return str(fib4_sequence[n])  # Convert to string and return\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text.casefold()[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # filter out consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = False\n        if l[i] > l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs[1:], 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s if c in 'aeiou' and c.islower())\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # sum of ASCII values of lower case letters in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into two parts: apples and oranges\n    apples, oranges = s.split(\", \")\n    \n    # Extract the numbers from the strings\n    apples = int(apples.split(\" \")[0])\n    oranges = int(oranges.split(\" \")[0])\n    \n    # Calculate the total number of fruits in the basket\n    total_fruits = n + 1 - apples - oranges\n    \n    return total_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [node for node in arr if node % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values)\n    return [arr.index(smallest_odd_value), smallest_odd_value]  # return index of smallest odd value\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the frequency of each number in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate over the list to find the smallest integer greater than zero with frequency greater than or equal to its value\n    for num in lst:\n        if num > 0 and freq_dict[num] >= num:\n            return num\n\n    # If no such value exists, return -1\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    lst.append(max_val)\n    lst.append(min_val)\n    return lst\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if three sides form valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate area using Heron's formula\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    # check if list is palindrome\n    if q != q[::-1]:\n        return False\n    # check if sum of elements less than or equal maximum possible weight\n    if sum(q) > w:\n        return False\n    # check if sum of elements even number\n    if sum(q) % 2 != 0:\n        return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    # Create a copy of the array\n    arr_copy = arr.copy()\n    # Sort the array\n    arr_copy.sort()\n    # Initialize the count of changes\n    changes = 0\n    # Iterate over the array\n    for i in range(n // 2):\n        # If the current element is not equal to the corresponding element from the end\n        if arr_copy[i] != arr_copy[n - i - 1]:\n            # Increment the count of changes\n            changes += 1\n    # Return the count of changes\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Calculate the total number of characters in each list\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    # If the total number of characters in the first list is greater, return the first list\n    if total1 >= total2:\n        return lst1\n    # Otherwise, return the second list\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)  # all factors are prime\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    # Check if x is a simple power of n\n    if n ** int(x ** (1. / int(math.log(x, n)))) == x:\n        # If x is a simple power of n, return True and the smallest power\n        return (True, int(x ** (1. / int(math.log(x, n)))))\n    else:\n        # If x is not a simple power of n, return False and None\n        return (False, None)  # Changed here\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the hexadecimal digits that are not prime\n    non_prime_hex_digits = '01A4CE68'\n    \n    # Initialize a counter for non-prime hexadecimal digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is in the non-prime hexadecimal digits\n        if char in non_prime_hex_digits:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the count of non-prime hexadecimal digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]  # convert decimal to binary and remove '0b' prefix\n    return \"db\" + binary + \"bd\"  # add 'db' at beginning and 'bd' at end\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade boundaries\n    grade_boundaries = {\n        'A+': 4.0,\n        'A': 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-': 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+': 1.0,\n        'D': 0.7,\n        'D-': 0.0,\n        'E': 0.0\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over the GPAs\n    for gpa in grades:\n        # Initialize a variable to store the letter grade\n        letter_grade = None\n\n        # Iterate over the grade boundaries in descending order\n        for letter, boundary in sorted(grade_boundaries.items(), reverse=True):\n            # If the GPA is greater than or equal to the boundary, assign the letter grade\n            if gpa >= boundary:\n                letter_grade = letter\n                break\n\n        # Append the letter grade to the list\n        letter_grades.append(letter"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n    # Calculate the length of the string\n    length = len(string)\n    # Check if the length is a prime number\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**n:\n            if i >= 10**(n-1) and i < 10**(n-1)*10:\n                count += 1\n            elif i >= 10**(n-1)*10 and i < 10**n:\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert N to hexadecimal\n    hex_N = hex(N)[2:]\n    \n    # Initialize sum of digits\n    sum_digits = 0\n    \n    # Iterate over each character in the hexadecimal string\n    for digit in hex_N:\n        # Convert the character to an integer and add it to the sum\n        sum_digits += int(digit, 16)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)  # sum odd elements at even indices\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the given array\n    array_copy = array.copy()\n\n    # Check if the array is empty\n    if not array_copy:\n        return array_copy\n\n    # Check if the sum of the first and last index values is odd or even\n    if (array_copy[0] + array_copy[-1]) % 2 == 0:\n        # Sort the array in descending order\n        array_copy.sort(reverse=True)\n    else:\n        # Sort the array in ascending order\n        array_copy.sort()\n\n    # Remove duplicate values from the array\n    array_copy = list(set(array_copy))\n\n    # Sort the array in ascending order\n    array_copy.sort()\n\n    return array_copy\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + 2 * 2) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + 2 * 2) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return second last element in sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\" and words[i + len(words) - 1] == \"boredom\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (x + y == abs(z) or x + abs(z) == y or y + abs(z) == x or abs(x + y) == z or abs(x + z) == y or abs(y + z) == x) and all(isinstance(i, int) for i in [x, y, z])  # check if all numbers are integers and return True if one of the conditions is met, False otherwise"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n            if char.lower() in 'aeiou':\n                index = ord(char.lower()) - ord('a')\n                encoded_message += chr(ord('a') + (index + 3) % 6 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    if not prime_numbers:\n        return 0\n    return min(prime_numbers, key=sum_digits)  # return the smallest prime number with the smallest sum of its digits"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1] if primes else []  # return list in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract unit digits from a and b\n    a_unit = a % 10\n    b_unit = b % 10\n    \n    # Multiply unit digits\n    product = a_unit * b_unit\n    \n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n"}
