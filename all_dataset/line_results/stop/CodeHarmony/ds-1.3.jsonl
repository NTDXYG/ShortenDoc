{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        \"sarcastic\": [\"sarcastic\", \"sarcasticly\", \"sarcastically\"],\n        \"neutral\": [\"neutral\", \"neutrally\", \"neutrally\"],\n        \"happy\": [\"happy\", \"happily\", \"happily\"],\n        \"angry\": [\"angry\", \"angrily\", \"angrily\"],\n    }\n\n    # Initialize score\n    score = 0\n\n    # Check each category\n    for category, words in categories.items():\n        for word in words:\n            if word in text.lower():\n                score += 1\n\n    # Classify text based on score\n    if score > 0:\n        if score == len(categories):\n            return \"perfectly balanced\"\n        elif score == len(categories) * 2:\n            return \"perfectly happy\"\n        elif score == len(categories) * 3:\n            return \"perfectly sarcastic\"\n        elif score == len(categories) * 4:\n            return \"perfectly angry\"\n        else:\n            return \"neutral\"\n    else:\n        return \"unsure\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = [\"Guitar\", \"Piano\", \"Flute\", \"Violin\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input is not a valid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return n % 5 == 0 and sum_of_digits % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except ValueError:\n        raise ValueError(\"Provided json_str not valid JSON string.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_obj = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date_obj + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    # Check if text is not more than 10,000 characters\n    if len(text) > 10000:\n        return \"Error: Text is too long\"\n\n    # Remove extra whitespace and leading/trailing whitespace\n    text = text.strip()\n\n    # Split text into words and join them back together with a single space in between\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lower case\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return word1 in text or word2 in text\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        if 'expandtab' in line:\n            settings['expandtab'] = int(line.split('=')[1])\n        if 'shiftwidth' in line:\n            settings['shiftwidth'] = int(line.split('=')[1])\n        if 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse each list\n    list1.reverse()\n    list2.reverse()\n\n    # Combine lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z*z\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get('name', None)\n\n"}
{"task_id": "valid/23", "completion": "\n    def convert(item):\n        if isinstance(item, dict):\n            return {k: convert(v) for k, v in item.items()}\n        elif isinstance(item, list):\n            return [convert(i) for i in item]\n        else:\n            return item\n\n    return convert(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    else:\n        return next_palindrome(num) if num % 10 != 9 else prev_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        return False\n\n    return key not in data\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    def button_action(button):\n        print(f\"Button {button} clicked\")\n\n    root = tk.Tk()\n    root.title(\"Buttons Table\")\n\n    for i in range(len(buttons)):\n        row = i // num_columns\n        col = i % num_columns\n        button = tk.Button(root, text=buttons[i], command=lambda i=i: button_action(buttons[i]))\n        button.grid(row=row, column=col)\n\n    root.mainloop()\n\n\n_make_button_table([\"Button 1\", \"Button 2\", \"Button 3\", \"Button 4\", \"Button 5\", \"Button 6\", \"Button 7\", \"Button 8\", \"Button 9\", \"Button 10\"], 3)\n"}
{"task_id": "valid/32", "completion": "\n    alphabet_order = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] != alphabet_order[i]:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in re.findall(r'\\d+', ts)]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    return [word.upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    if not isinstance(arr, list):\n        return \"Error: Input is not a list\"\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            return \"Error: List contains non-numerical value\"\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    # Parse JSON data\n    data = json.loads(json_data)\n\n    # Extract neighborhood names and sort them\n    neighborhoods = [item['name'] for item in data]\n    neighborhoods.sort()\n\n    return neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize minimum absolute sum\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Traverse the array\n    for i in range(n - 1):\n        # Update minimum sum\n        min_sum = min(min_sum, abs(arr[i] + arr[i + 1]))\n\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if votes list is not empty\n    if not votes:\n        return \"Error: No votes provided.\"\n\n    # Check if votes list contains at least 100 elements\n    if len(votes) < 100:\n        return \"Error: Not enough votes.\"\n\n    # Create a dictionary to store the votes\n    votes_dict = {}\n\n    # Iterate over the votes list\n    for vote in votes:\n        # Check if the vote is a tuple of length 2\n        if len(vote) != 2:\n            return \"Error: Invalid vote format.\"\n\n        # Check if the first element is a string of length 10\n        if not isinstance(vote[0], str) or len(vote[0]) != 10:\n            return \"Error: Invalid candidate name.\"\n\n        # Check if the second element is a positive integer\n        if not isinstance(vote[1], int) or vote[1] <= 0:\n            return \"Error: Invalid number of votes.\"\n\n        # If the vote is valid, add it to the dictionary\n        if vote[0] in votes_dict:\n            votes_dict[vote[0]] += vote[1]\n        else:\n            votes_dict[vote[0]] = vote[1]\n\n    # Calculate the total votes\n    total_votes = sum(votes_dict.values())\n\n    # Calculate the percentage votes\n    for candidate in votes_dict:\n        votes_dict[candidate] = round(votes_dict[candidate] / total_votes *"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, '%d-%b-%Y')\n        return date_object.strftime('%B %d, %Y')\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MMM-YYYY format.\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'xlsx', 'png', 'jpg', 'jpeg', 'gif']\n\n    if newname.split('.')[-1] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    new_lst = []\n    for i in lst:\n        if isinstance(i, tuple):\n            new_lst.append(tuple(remove_uneven(i)))\n        elif isinstance(i, str) and i.isnumeric() and int(i) % 2 == 0:\n            new_lst.append(i)\n    return tuple(new_lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + [(generation, accs)]\n    # return histogram_data\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^\\w{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 2:\n            unique_languages.add(parts[0])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    return list(count_dict.values())\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from .views import home, video_list, video_detail, video_create, video_update, video_delete\n\n    urlpatterns = [\n        path('', home, name='home'),\n        path('videos/', video_list, name='video_list'),\n        path('videos/<int:pk>/', video_detail, name='video_detail'),\n        path('videos/new/', video_create, name='video_create'),\n        path('videos/<int:pk>/edit/', video_update, name='video_update'),\n        path('videos/<int:pk>/delete/', video_delete, name='video_delete'),\n    ]\n\n    return urlpatterns\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" World!\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += sum(int(value) for value in dictionary.values() if value.isdigit())\n    return total_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n\n    def api_advisor_view(request):\n        if request_method == 'GET':\n            return 'GET request to api_advisor_view'\n        else:\n            return 'Unsupported method for api_advisor_view'\n\n    def api_advisor_view_post(request):\n        if request_method == 'POST':\n            return 'POST request to api_advisor_view_post'\n        else:\n            return 'Unsupported method for api_advisor_view_post'\n\n    return api_advisor_view, api_advisor_view_post\n"}
{"task_id": "valid/57", "completion": "\n    if a < 1 or b < 1:\n        raise ValueError(\"Both numbers must be positive integers\")\n\n    if a == b:\n        return a\n    elif a > b:\n        return gcd_recursive(a-b, b)\n    else:\n        return gcd_recursive(a, b-a)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory = file_path.split('/')[0]\n        if directory not in config_files:\n            config_files[directory] = []\n        config_files[directory].append(file_path)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \" World!\"\n    return f\"{string} {phrase}\"\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # remove special characters\n        string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        # capitalize the string\n        string = string.title()\n        result.append(string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return [i for i, letter in enumerate(string) if letter == char]\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    bold_texts = []\n    current_tag = \"\"\n    in_tag = False\n\n    for char in html_code:\n        if char == \"<\":\n            in_tag = True\n            current_tag = \"\"\n        elif char == \">\":\n            in_tag = False\n            if current_tag == start_tag:\n                bold_texts.append(current_tag)\n        elif in_tag:\n            current_tag += char\n\n    return bold_texts\n\n"}
{"task_id": "valid/73", "completion": "\n    # define the items and their prices\n    items = {\n        \"Coke\": 10,\n        \"Sprite\": 15,\n        \"Diet Coke\": 20,\n        \"Diet Sprite\": 25,\n    }\n\n    # initialise the change\n    change = 0\n\n    # check if the item is in the stock\n    if item in items.keys():\n        # check if the money inserted is enough\n        if money_inserted >= items[item]:\n            # calculate the change\n            change = money_inserted - items[item]\n            print(f\"You bought {item} and your change is {change}\")\n        else:\n            print(f\"Sorry, you don't have enough money. Your change is {money_inserted}\")\n    else:\n        print(f\"Sorry, we don't have {item} in our stock\")\n\n    return change\n"}
{"task_id": "valid/74", "completion": "\n    # Merge the two lists\n    merged_list = list1 + list2\n\n    # Remove duplicates\n    unique_list = list(set(merged_list))\n\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices_list = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices_list\n"}
{"task_id": "valid/78", "completion": "\n    # Assign value\n    value = \"Hello, World!\"\n\n    # Validate value\n    if isinstance(value, str):\n        print(\"Value is a string.\")\n    else:\n        print(\"Value is not a string.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Randomly rearrange the list of characters\n    random.shuffle(word_list)\n    # Convert the list of characters back to a string\n    random_word = ''.join(word_list)\n    return random_word\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i + 1]:\n            arr.pop(i)\n        else:\n            i += 1\n    return arr\n"}
{"task_id": "valid/82", "completion": "\n    return re.findall(r'\\b\\w+\\b', text)\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    if not divisible_numbers:\n        print(\"No numbers divisible by both 3 and 7\")\n    else:\n        avg = sum(divisible_numbers) / len(divisible_numbers)\n        max_min_values = (max(divisible_numbers), min(divisible_numbers))\n        num_occurrences = {n: divisible_numbers.count(n) for n in divisible_numbers}\n        print(f\"Average: {avg}\")\n        print(f\"Maximum: {max_min_values[0]}, Minimum: {max_min_values[1]}\")\n        print(\"Number occurrences:\")\n        for k, v in num_occurrences.items():\n            print(f\"{k}: {v}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return max(word_freq, key=word_freq.get)\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_numbers = sum(numbers)\n    return average, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n    try:\n        min_val = min(time_series)\n        max_val = max(time_series)\n    except TypeError:\n        raise ValueError(\"Time series should only contain numerical values\")\n    return min_val, max_val\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return any(item in list2 for item in list1)\n\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == target:\n                return True\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd, sum_odd / count_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n - 1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n    description = f\"This bot is designed to manage a play music server. It can provide information about its features, web app for managing personal playlists, and help information for each command.\\n\\n\"\n    description += \"Features:\\n\"\n    for key, value in mapping.items():\n        description += f\"{key}: {value}\\n\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return abs(dec_to_ternary(n))\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        n, r = divmod(n, 3)\n        ternary = str(r) + ternary\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(name.split('.')[-1] for name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 13:\n        return \"Child\"\n    elif 13 <= age < 18:\n        return \"Teenager\"\n    elif 18 <= age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    if not isinstance(s, str):\n        return \"Invalid input. Please provide a string.\"\n\n    if len(s) == 0:\n        return \"String is empty.\"\n\n    if s.isalpha():\n        return s.lower()\n\n    if s.isdigit():\n        return \"Digits found in the string.\"\n\n    if s.islower():\n        return s.upper()\n\n    if s.istitle():\n        return s.lower()\n\n    if s.isupper():\n        return s.lower()\n\n    if s.startswith(\"I\"):\n        return s.replace(\"I\", \"a\")\n\n    if s.endswith(\"!\"):\n        return s.replace(\"!\", \".\")\n\n    if s.find(\" \") != -1:\n        return s.replace(\" \", \"\")\n\n    if s.find(\".\") != -1:\n        return s.replace(\".\", \"\")\n\n    if s.find(\",\") != -1:\n        return s.replace(\",\", \"\")\n\n    if s.find(\"?\") != -1:\n        return s.replace(\"?\", \"\")\n\n    if s.find(\";\") != -1:\n        return s.replace(\";\", \"\")\n\n    if s.find(\":\") != -1:\n        return s.replace(\":\", \"\")\n\n    if s.find(\".\") != -1:\n        return s.replace(\".\", \"\")\n\n    if s.find(\"_\") != -1:\n        return s.replace(\"_\", \"\")\n\n    if s.find(\"-\") != -1:\n        return s.replace(\"-\", \"\")\n\n    if s.find(\"(\") != -1:\n        return s.replace(\"(\", \"\")\n\n    if s.find(\")\") != -1:\n        return s.replace(\")\", \"\")\n\n    if s.find(\"{\") !="}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    checked_nums = set()\n\n    for num in arr:\n        if -num in checked_nums:\n            return True\n        checked_nums.add(num)\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    def get_version_number(version):\n        return int(version.split('_')[1].replace('000', ''))\n\n    def get_latest_version(dependency):\n        return max(dependency, key=get_version_number)\n\n    return [get_latest_version(dependency) for dependency in dependencies]\n\n"}
{"task_id": "valid/107", "completion": "\n    # Define the categories\n    categories = {\n        \"injury\": [],\n        \"death\": [],\n        \"life-threatening\": [],\n        \"other\": []\n    }\n\n    # Loop through the causes\n    for cause in causes:\n        action, result = cause.split(\" \")\n\n        if \"injury\" in action:\n            categories[\"injury\"].append(cause)\n        elif \"death\" in action:\n            categories[\"death\"].append(cause)\n        elif \"life-threatening\" in action:\n            categories[\"life-threatening\"].append(cause)\n        else:\n            categories[\"other\"].append(cause)\n\n    return categories\n\n"}
{"task_id": "valid/108", "completion": "\n    # Your code here\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return [char for char in text if ord(char) > 127]\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(string, translator)\n\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n\n"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        min_value = min(grid[i])\n        print(min_value)\n\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please provide a positive integer value.\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            if count > 0:\n                return count\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    else:\n        first_char = s[0]\n        if first_char.lower() in 'aeiou':\n            return remove_vowels_recursive(s[1:])\n        else:\n            return first_char + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    def help_message(options):\n        help_message = \"Usage: python [OPTIONS]\\n\\n\"\n        help_message += \"Options and arguments:\\n\"\n        for option in options:\n            help_message += f\"  {option[0]}        {option[1]}\\n\"\n        return help_message\n\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) >= vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence.count(subsequence)\n    return count\n\nsequence_of_characters = \"Please find number occurrences this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate number of electrons based on certain energy values\n    def calculate_electrons(grid_energies, ados, dope, dos_grid_size):\n        # Implement your code here\n        pass\n\n    # Adjust number of electrons based on doping levels\n    def adjust_electrons(electrons, ados, dope, dos_grid_size):\n        # Implement your code here\n        pass\n\n    # Main function\n    def simulate_electron_behavior(grid_energies, ados, dope, dos_grid_size):\n        electrons = calculate_electrons(grid_energies, ados, dope, dos_grid_size)\n        electrons = adjust_electrons(electrons, ados, dope, dos_grid_size)\n        return electrons\n\n    return simulate_electron_behavior\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(len(lst)):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    return \", \".join(sorted(fruit_list))\n"}
{"task_id": "valid/133", "completion": "\n    return [[]] if not lst else [*[x for i, x in enumerate(lst) if (i % 2 == 0)]] + [*[x for i, x in enumerate(lst) if (i % 2 != 0)]]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=200, null=True, blank=True),\n            ),\n        ]\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    length = len(df)\n    forecast_period = math.ceil(length * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start and end index for the current page\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # Return the items for the current page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    result = ''\n    carry = 0\n    n_len = len(n_str)\n    for i in range(n_len-1, -1, -1):\n        n_digit = int(n_str[i])\n        product = n_digit * 2 + carry\n        result = str(product % 10) + result\n        carry = product // 10\n    if carry != 0:\n        result = str(carry) + result\n    return result.strip()\n\n"}
{"task_id": "valid/141", "completion": "\n    # Initialize the ROS node\n    rospy.init_node('reflex_control')\n\n    # Create a publisher to control the robotic arm\n    pub = rospy.Publisher('/arm_controller/command', String, queue_size=10)\n\n    # Get the preset coordinates\n    preset_coordinates = presets.get(preset_name)\n\n    # Check if the preset exists\n    if preset_coordinates is not None:\n        # Create a message to control the robotic arm\n        msg = '{0},{1},{2}'.format(preset_coordinates[0], preset_coordinates[1], preset_coordinates[2])\n\n        # Publish the message\n        pub.publish(msg)\n    else:\n        print(\"Preset not found\")\n\n    # Keep the node alive\n    rospy.spin()\n"}
{"task_id": "valid/142", "completion": "\n    # Find common elements\n    common_elements = [value for value in list1 if value in list2]\n\n    # Calculate product\n    product = 1\n    for element in common_elements:\n        product *= element\n\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    class QuizSystem:\n        def __init__(self, allow_multiple_answer, zoom_level):\n            self.allow_multiple_answer = allow_multiple_answer\n            self.zoom_level = zoom_level\n\n        def start_quiz(self):\n            if self.allow_multiple_answer:\n                print(\"Quiz is started with multiple answer capability\")\n            else:\n                print(\"Quiz is started with single answer capability\")\n\n        def set_zoom_level(self, zoom_level):\n            self.zoom_level = zoom_level\n            print(f\"Zoom level is set to {self.zoom_level}\")\n\n    # Testing\n    quiz_system = QuizSystem(True, 10)\n    quiz_system.start_quiz()\n    quiz_system.set_zoom_level(15)\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            no_vowels_sentence += char\n    return no_vowels_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n\n    def is_alpha(s):\n        return s.isalpha()\n\n    def merge_objects(a, b):\n        result = {}\n        for key in sorted(set(a.keys()).union(b.keys())):\n            if is_alpha(key):\n                if key in a and key in b:\n                    result[key] = a[key] + b[key]\n                elif key in a:\n                    result[key] = a[key]\n                else:\n                    result[key] = b[key]\n        return result\n\n    def merge_nested_objects(a, b):\n        result = {}\n        for key in sorted(set(a.keys()).union(b.keys())):\n            if is_alpha(key):\n                if key in a and key in b:\n                    result[key] = merge_objects(a[key], b[key])\n                elif key in a:\n                    result[key] = merge_objects({}, a[key])\n                else:\n                    result[key] = merge_objects({}, b[key])\n        return result\n\n    if isinstance(a, dict) and isinstance(b, dict):\n        return merge_nested_objects(a, b)\n    else:\n        raise ValueError(\"Inputs should be dictionaries\")"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d, key=lambda k: d[k])\n    except ValueError:\n        print(\"The dictionary is empty.\")\n    except TypeError:\n        print(\"The input is not a dictionary.\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(x)) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
