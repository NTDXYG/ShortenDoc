{"task_id": "valid/0", "completion": "\n    # Define the categories and their corresponding keywords\n    categories = {\n        'sports': ['football', 'basketball', 'soccer', 'tennis'],\n        'politics': ['government', 'election', 'policy', 'law'],\n        'entertainment': ['movie', 'music', 'celebrity', 'award']\n    }\n\n    # Initialize the category with the highest score\n    best_category = None\n    best_score = 0\n\n    # Tokenize the text into words\n    words = text.split()\n\n    # Iterate over each category\n    for category, keywords in categories.items():\n        # Initialize the score for the current category\n        score = 0\n\n        # Iterate over each keyword in the category\n        for keyword in keywords:\n            # Check if the keyword is in the text\n            if keyword in words:\n                # Increment the score if the keyword is found\n                score += 1\n\n        # Update the best category if the current category has a higher score\n        if score > best_score:\n            best_category = category\n            best_score = score\n\n    # Return the best category\n    return best_category\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0:\n        return True\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif n == base:\n        return 1\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    # Replace multiple whitespace characters with a single space\n    text = ' '.join(text.split())\n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = re.compile(r'\\b(' + re.escape(word1) + r')\\b|\\b(' + re.escape(word2) + r')\\b')\n    return bool(pattern.search(text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(row) for row in array]\n"}
{"task_id": "valid/16", "completion": "\n    # Split the comment into lines\n    lines = comment.split('\\n')\n    \n    # Initialize an empty dictionary to store the settings\n    settings = {}\n    \n    # Iterate over each line\n    for line in lines:\n        # Remove leading and trailing whitespaces\n        line = line.strip()\n        \n        # Check if the line starts with a setting\n        if line.startswith('set'):\n            # Split the line into parts\n            parts = line.split()\n            \n            # Check if the line contains a setting\n            if len(parts) > 1:\n                # Extract the setting name and value\n                setting_name = parts[1]\n                setting_value = parts[2]\n                \n                # Store the setting in the dictionary\n                settings[setting_name] = setting_value\n    \n    # Return the dictionary of settings\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse elements in list1\n    reversed_list1 = list1[::-1]\n    \n    # Reverse elements in list2\n    reversed_list2 = list2[::-1]\n    \n    # Combine elements from both lists\n    combined_list = reversed_list1 + reversed_list2\n    \n    # Sort elements in combined list in ascending order\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z ** 2\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    elif isinstance(struct, set):\n        return set(struct_to_dict(item) for item in struct)\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string to easily reverse it\n    num_str = str(num)\n    \n    # Initialize the closest palindrome and its distance\n    closest_palindrome = num\n    closest_distance = abs(num - int(str(num)[::-1]))\n    \n    # Iterate over all numbers from num to num + 1\n    for i in range(num, num + 1):\n        # Convert the number to string to easily reverse it\n        str_i = str(i)\n        \n        # Check if the number is a palindrome\n        if str_i == str_i[::-1]:\n            # Calculate the distance between the number and the closest palindrome\n            distance = abs(i - int(str_i[::-1]))\n            \n            # Update the closest palindrome and its distance if the current number is closer\n            if distance < closest_distance:\n                closest_palindrome = i\n                closest_distance = distance\n                \n    return closest_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    try:\n        num = float(num)\n        if num < 0:\n            return \"Error: Square root of negative number is not a real number.\"\n        else:\n            return round(num ** 0.5, 2)\n    except ValueError:\n        return \"Error: Invalid input. Please enter a number.\"\n"}
{"task_id": "valid/26", "completion": "\n    # Get number rows and columns\n    rows = len(matrix)\n    cols = len(matrix[0])\n    \n    # Check if matrix square\n    is_square = rows == cols\n    \n    # Calculate sum diagonal elements\n    sum_diagonal = sum(matrix[i][i] for i in range(rows))\n    \n    return rows, cols, sum_diagonal, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    return key not in json_data or json_data[key] != value\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table buttons\n    table_buttons = []\n    \n    # Iterate over the buttons list\n    for i, button in enumerate(buttons):\n        # For each button, create a new table button\n        table_button = {\n            'id': f'button_{i}',\n            'text': button,\n            'action': f'button_{i}_action'  # This will be used to trigger the action when the button is clicked\n        }\n        \n        # Add the table button to the list\n        table_buttons.append(table_button)\n    \n    # Calculate the number of rows needed to display the buttons\n    num_rows = -(-len(table_buttons) // num_columns)  # This is equivalent to math.ceil(len(table_buttons) / num_columns)\n    \n    # Initialize an empty list to store the table rows\n    table_rows = []\n    \n    # Iterate over the range of the number of rows\n    for i in range(num_rows):\n        # For each row, create a new table row\n        table_row = {\n            'id': f'row_{i}',\n            'cells': []\n        }\n        \n        # Iterate over the range of the number of columns\n        for j in range(num_columns):\n            # Calculate the index of the button in the list\n            index = i * num_columns + j\n            \n            # If the index is within the bounds of the list, add the button to the table row\n            if index < len(table_buttons):\n                table_row['cells'].append(table_buttons[index])\n        \n        # Add the table row to the list\n        table_rows.append(table_row)\n    \n    # Return the table rows\n    return table_rows\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] in s and alphabet[i + 1] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize sum to 0\n    total_sum = 0\n    # Initialize current number to 0\n    current_num = 0\n    # Iterate over each character in the string\n    for char in ts:\n        # If the character is a digit, add it to the current number\n        if char.isdigit():\n            current_num = current_num * 10 + int(char)\n        # If the character is not a digit and the current number is not 0\n        elif current_num != 0:\n            # Add the current number to the total sum\n            total_sum += current_num\n            # Reset the current number to 0\n            current_num = 0\n    # If the string ends with a number, add it to the total sum\n    if current_num != 0:\n        total_sum += current_num\n    # Return the total sum\n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Validate array\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array must only contain numerical values\")\n    \n    # Compute addition of all elements in array\n    result = sum(arr)\n    \n    return result\n"}
{"task_id": "valid/37", "completion": "\n    # First, we load the JSON data into a Python list of dictionaries\n    neighborhoods = json.loads(json_data)\n\n    # Then, we extract the names of the neighborhoods from the list of dictionaries\n    neighborhood_names = [neighborhood['name'] for neighborhood in neighborhoods]\n\n    # Finally, we sort the list of neighborhood names in alphabetical order\n    sorted_neighborhoods = sorted(neighborhood_names)\n\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        # Calculate the absolute difference between the current element and the next element\n        diff = abs(arr[i] + arr[i + 1])\n        # Update the minimum sum if the current difference is smaller\n        min_sum = min(min_sum, diff)\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if total number of votes is at least 100\n    if sum(votes, key=lambda x: x[1])[1] < 100:\n        raise ValueError(\"Total number of votes must be at least 100.\")\n\n    # Create dictionary to store candidate names and their vote counts\n    election_results = {}\n\n    # Iterate over each vote in the list\n    for candidate, votes in votes:\n        # Check if candidate name is a string consisting only uppercase letters with maximum length 10 characters\n        if not isinstance(candidate, str) or not candidate.isupper() or len(candidate) > 10:\n            raise ValueError(\"Candidate name must be a string consisting only uppercase letters with maximum length 10 characters.\")\n\n        # Check if number of votes is a positive integer not exceeding 1000\n        if not isinstance(votes, int) or votes <= 0 or votes > 1000:\n            raise ValueError(\"Number of votes must be a positive integer not exceeding 1000.\")\n\n        # Add candidate to the dictionary or update their vote count if they already exist\n        if candidate in election_results:\n            election_results[candidate] += votes\n        else:\n            election_results[candidate] = votes\n\n    # Calculate the total number of votes\n    total_votes = sum(election_results.values())\n\n    # Calculate the percentage of votes for each candidate\n    for candidate in election_results:\n        election_results[candidate] = (election_results[candidate] / total_votes) * 100\n\n    # Round the percentage of votes to two decimal places\n    for candidate in election_results:\n        election_results[candidate] = round(election_results[candidate], 2)\n\n    return election_results\n"}
{"task_id": "valid/41", "completion": "\n    # Define a dictionary to map month abbreviations to their full names\n    month_map = {\n        'Jan': 'January', 'Feb': 'February', 'Mar': 'March', 'Apr': 'April',\n        'May': 'May', 'Jun': 'June', 'Jul': 'July', 'Aug': 'August',\n        'Sep': 'September', 'Oct': 'October', 'Nov': 'November', 'Dec': 'December'\n    }\n\n    # Attempt to parse the date string in both DD-MM-YYYY and DD-MMM-YYYY formats\n    for date_format in ['%d-%m-%Y', '%d-%b-%Y']:\n        try:\n            # Attempt to parse the date string\n            date = datetime.strptime(date_string, date_format)\n            # If the date is valid, return it in the standardized format\n            return date.strftime('%B %d, %Y')\n        except ValueError:\n            # If the date string does not match the current format, continue to the next format\n            continue\n\n    # If the date string does not match either format, raise a ValueError\n    raise ValueError(\"Invalid date string\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # Define allowed file types\n    allowed_types = {\n        'txt': ['txt'],\n        'doc': ['doc', 'docx'],\n        'pdf': ['pdf'],\n        'jpg': ['jpg', 'jpeg'],\n        'png': ['png'],\n        'mp3': ['mp3'],\n        'mp4': ['mp4']\n    }\n\n    # Get file extension from new file name\n    new_extension = newname.split('.')[-1]\n\n    # Check if new file name has valid extension\n    if new_extension in allowed_types.get(allowed_type, []):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def remove_uneven(tup):\n        if isinstance(tup, list):\n            return [remove_uneven(i) for i in tup if is_even(i) or (isinstance(i, str) and is_numeric(i))]\n        elif isinstance(tup, tuple):\n            return tuple(remove_uneven(i) for i in tup if is_even(i) or (isinstance(i, str) and is_numeric(i)))\n        else:\n            return tup\n\n    return remove_uneven(lst)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    # Add accuracy data to histogram\n    for i, acc in enumerate(accs):\n        histogram_data[generation][i] = acc\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language, _, _ = classifier.split(\" :: \")\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n"}
{"task_id": "valid/50", "completion": "\n    # Define a regular expression pattern to match the URL\n    pattern = re.compile(r'^/video/(\\d+)/$')\n\n    # Check if the URL matches the pattern\n    match = pattern.match(url)\n\n    # If the URL matches, return the view function associated with the URL\n    if match:\n        # Extract the video ID from the URL\n        video_id = match.group(1)\n\n        # Return the view function associated with the URL\n        return video_video_detail, video_id\n    else:\n        # If the URL does not match, return None\n        return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world!\"\n    concatenated_string = string + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price_\"):\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2[:] = [value for value in list2 if value not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request.method == request_method:\n                return func(request, *args, **kwargs)\n            else:\n                return \"Method not allowed\"\n        return wrapper\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        # If the directory path is not in the config_files dictionary, add it\n        if dir_path not in config_files:\n            config_files[dir_path] = []\n        # Add the file name to the list of files in the directory path\n        config_files[dir_path].append(file_name)\n    return config_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Calculate time difference by subtracting start time from end time\n    timeDifference = timeEnd - timeStart\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    # Base case: If the start index is greater than the end index, the target is not in the array.\n    if start > end:\n        return False\n\n    # Calculate the middle index of the array.\n    mid = (start + end) // 2\n\n    # If the middle element is equal to the target, return True.\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half of the array.\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half of the array.\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color not in colors:\n        raise ValueError(\"Invalid color\")\n    return colors[(colors.index(color) + 1) % len(colors)]\n\n"}
{"task_id": "valid/64", "completion": "\n    # Iterate over the list and increment each value by 1\n    for i in range(len(list)):\n        # Increment the value at the current index by 1\n        list[i] += 1\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        root = int(num ** 0.5)\n        if root * root == num:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \"Hello, my name is {} and I am {} years old.\"\n    concatenated_string = phrase.format(name, age)\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        cleaned_string = re.sub('[^A-Za-z0-9\\s]', '', string)\n        # Capitalize the cleaned string\n        capitalized_string = cleaned_string.title()\n        # Add the capitalized string to the result list\n        result.append(capitalized_string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return [i for i, x in enumerate(string) if x == char]\n"}
{"task_id": "valid/72", "completion": "\n    # Initialize an empty list to store the bold text\n    bold_text = []\n    \n    # Initialize a flag to track if we are currently inside a bold tag\n    inside_bold = False\n    \n    # Initialize an empty string to build the current bold text\n    current_bold = \"\"\n    \n    # Iterate over each character in the HTML code\n    for char in html_code:\n        # If we encounter an opening bold tag, set the flag to True\n        if char == \"<\" and html_code[html_code.index(char)+1:html_code.index(char)+6] == \"b>\":\n            inside_bold = True\n        # If we encounter a closing bold tag, set the flag to False and add the current bold text to the list\n        elif char == \"<\" and html_code[html_code.index(char)+1:html_code.index(char)+6] == \"/b>\":\n            inside_bold = False\n            bold_text.append(current_bold)\n            current_bold = \"\"\n        # If we are inside a bold tag, add the character to the current bold text\n        elif inside_bold:\n            current_bold += char\n        # If we are not inside a bold tag, reset the current bold text\n        else:\n            current_bold = \"\"\n    \n    # Return the list of bold text\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"1\": {\"name\": \"Soda\", \"price\": 1.00},\n        \"2\": {\"name\": \"Chips\", \"price\": 0.50},\n        \"3\": {\"name\": \"Candy\", \"price\": 0.25},\n    }\n\n    # Check if the item is in the inventory\n    if item not in items:\n        return \"Invalid item. Please select a valid item.\"\n\n    # Get the price of the item\n    price = items[item][\"price\"]\n\n    # Check if the user has enough money\n    if money_inserted < price:\n        return \"Insufficient funds. Please insert more money.\"\n\n    # Calculate the change\n    change = money_inserted - price\n\n    # Update the stock\n    items[item][\"stock\"] -= 1\n\n    # Return the change and a message\n    return f\"Thank you for your purchase! Your change is ${change:.2f}.\"\n"}
{"task_id": "valid/74", "completion": "\n    # Combine the two lists into one\n    combined_list = list1 + list2\n    \n    # Convert the combined list to a set to remove duplicates\n    # Sets in Python are unordered collections of unique elements\n    unique_set = set(combined_list)\n    \n    # Convert the set back to a list and return it\n    return list(unique_set)\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning a value to a variable\n    value = 10\n\n    # Validating the assigned value\n    if value == 10:\n        print(\"Value is 10\")\n    else:\n        print(\"Value is not 10\")\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == merged_arr[-1]:\n            merged_arr[-1] = arr[i]\n        else:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text using regular expression\n    tokens = re.findall(r'\\w+|[^\\w\\s]', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    occurrences = {num: numbers.count(num) for num in set(numbers) if num % 3 == 0 and num % 7 == 0}\n    return average, max_value, min_value, occurrences\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        word = word.lower()\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    highest_frequency_words = [word for word, freq in frequency.items() if freq == max_frequency]\n    return highest_frequency_words\n"}
{"task_id": "valid/85", "completion": "\n    return round(math.e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    return average, sum(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n\n    min_value = min(time_series)\n    max_value = max(time_series)\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for entry in encyclopedia:\n        related_articles_count[entry] = 0\n        for other_entry in encyclopedia:\n            if entry != other_entry:\n                related_articles_count[entry] += 1\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n\n"}
{"task_id": "valid/97", "completion": "\n    description = \"Discord bot for managing music server.\\n\"\n    description += \"Features:\\n\"\n    description += \"  - Play music on server\\n\"\n    description += \"  - Manage personal playlists\\n\"\n    description += \"  - Server settings\\n\"\n    description += \"  - Web app for managing playlists and server settings\\n\"\n    description += \"Commands:\\n\"\n    description += \"  - `play <song_name>`: Play a song on the server\\n\"\n    description += \"  - `playlist`: Manage personal playlists\\n\"\n    description += \"  - `settings`: View and edit server settings\\n\"\n    description += \"  - `help`: Get help information for each command\\n\"\n    description += \"  - `web`: Open web app for managing playlists and server settings\\n\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    result = ''\n    while n:\n        n, remainder = divmod(abs(n), 3)\n        result = str(remainder) + result\n    if n < 0:\n        result = '-' + result\n    return result\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Child\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define a dictionary to map numerical grades to letter grades\n    grade_map = {\n        90: 'A',\n        80: 'B',\n        70: 'C',\n        60: 'D',\n        0: 'F'\n    }\n\n    # Use ternary operator to determine letter grade\n    letter_grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n\n    # Calculate GPA\n    gpa = (numerical_grade / 100) * 4\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price'] * item['quantity']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    # Initialize an empty dictionary to store the count of vowels in each palindrome string\n    vowel_count_dict = {}\n    \n    # Iterate over each palindrome string in the input tuple\n    for palindrome in palindrome_tuples:\n        # Initialize a counter for vowels in the current palindrome string\n        vowel_count = 0\n        \n        # Iterate over each character in the palindrome string\n        for char in palindrome:\n            # Check if the character is a vowel\n            if char.lower() in 'aeiou':\n                # If the character is a vowel, increment the vowel count\n                vowel_count += 1\n        \n        # Store the vowel count in the dictionary with the palindrome string as the key\n        vowel_count_dict[palindrome] = vowel_count\n    \n    # Return the dictionary with the count of vowels in each palindrome string\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Remove all non-alphanumeric characters from the string\n    s = ''.join(e for e in s if e.isalnum() or e.isspace())\n    \n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Remove all duplicate characters from the string\n    s = ''.join(dict.fromkeys(s))\n    \n    return s\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if num * -1 in num_set:\n            return True\n        num_set.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version = dependency\n        # Extract the numerical identifier from the version number\n        version_number = int(version[3:-9])\n        # If the package is not in the dictionary or the current version is newer than the stored version, update the dictionary\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the categorized causes of death\n    categorized_causes = {}\n\n    # Iterate over each cause of death in the list\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \", 1)\n\n        # If the action is not already in the dictionary, add it with an empty list\n        if action not in categorized_causes:\n            categorized_causes[action] = []\n\n        # Add the cause to the list of causes for the action\n        categorized_causes[action].append(result)\n\n    # Return the dictionary of categorized causes\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    # Remove spaces from the input name and convert it to lowercase\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Import string module to use its punctuation constants\n    import string\n    \n    # Use str.translate() method to remove punctuation marks\n    # str.maketrans() method returns a translation table that can be used with str.translate()\n    # string.punctuation contains all punctuation marks\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif current_num == n:\n        return \"Thank you\"\n    elif current_num % 2 == 0:\n        return print_thank_you(n, current_num + 1) + \"\\nThank you\"\n    else:\n        return print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    return len(str(num)) == len(set(str(num)))\n\n"}
{"task_id": "valid/116", "completion": "\n    # Base case: if string is empty, return it\n    if not s:\n        return s\n\n    # If the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0] in 'aeiouAEIOU':\n        return remove_vowels_recursive(s[1:])\n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])  # <--- changed here\n"}
{"task_id": "valid/117", "completion": "\n    # Initialize empty string to store help message\n    help_message = \"\"\n\n    # Iterate over each option in the list\n    for option in options:\n        # Extract option name and description from the tuple\n        name, description = option\n\n        # Append option name and description to the help message\n        help_message += f\"  {name}  {description}\\n\"\n\n    # Return the generated help message\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    return Val.count(1)\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Check if divisor is zero\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    # Initialize quotient to zero\n    q = 0\n    \n    # Loop until dividend is less than divisor\n    while h >= t:\n        # Subtract divisor from dividend\n        h -= t\n        # Increment quotient\n        q += 1\n    \n    # Return quotient\n    return q\n"}
{"task_id": "valid/124", "completion": "\n    return sum([i for i in input_list if i % 2 != 0])\n"}
{"task_id": "valid/125", "completion": "\n    # Convert string to lowercase\n    string = string.lower()\n    # Initialize counter\n    count = 0\n    # Iterate over each character in string\n    for char in string:\n        # Check if character is alphabet and not vowel\n        if char.isalpha() and char not in \"aeiou\":\n            # Increment counter\n            count += 1\n    # Return count\n    return count\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize number of electrons\n    num_electrons = 0\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        num_electrons += ados[energy] * (1 + dope * (energy - dos_grid_size / 2))\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    max_diff = 0\n    for i in range(1, n):\n        max_diff = max(max_diff, abs(arr[i] - arr[i - 1]))\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for elem in lst:\n        sublists += [sublist + [elem] for sublist in sublists]\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n    from {app_name}.models import {model_name}\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('{app_name}', '{model_name}_0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=255),\n            ),\n        ]\n    \"\"\"\n    return migration_operation\n"}
{"task_id": "valid/136", "completion": "\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find common elements between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the sum of common elements\n    common_elements_sum = sum(common_elements)\n    \n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # Calculate the forecast period by taking 1% of the dataset length and rounding up to the nearest integer\n    forecast_period = math.ceil(dataset_length * 0.01)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index of the page\n    start_index = (page_number - 1) * items_per_page\n    \n    # Calculate the end index of the page\n    end_index = start_index + items_per_page\n    \n    # Slice the list to get the items for the current page\n    paginated_items = items[start_index:end_index]\n    \n    return paginated_items\n\n"}
{"task_id": "valid/140", "completion": "\n    n = [int(x) for x in n_str]\n    n = n[::-1]\n    carry = 0\n    for i in range(len(n)):\n        n[i] *= 2\n        if n[i] > 9:\n            n[i] -= 10\n            carry += 1\n        else:\n            carry = 0\n    if carry > 0:\n        n.append(carry)\n    n = n[::-1]\n    return ''.join([str(x) for x in n])\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.0, 0.5),\n        \"down\": (0.0, 0.0, -0.5),\n        \"left\": (-0.5, 0.0, 0.0),\n        \"right\": (0.5, 0.0, 0.0),\n        \"forward\": (0.0, 0.5, 0.0),\n        \"backward\": (0.0, -0.5, 0.0)\n    }\n\n    return presets.get(preset_name, None)\n"}
{"task_id": "valid/142", "completion": "\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find common elements between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Initialize product variable to 1\n    product = 1\n    \n    # Iterate over common elements and multiply them together\n    for element in common_elements:\n        product *= element\n    \n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        # If multiple answers are allowed, the quiz system will display all possible answers\n        # and allow the user to select one or more answers.\n        return \"Multiple answers are allowed. User can select one or more answers.\"\n    else:\n        # If multiple answers are not allowed, the quiz system will display only one possible answer\n        # and allow the user to select that answer.\n        return \"Single answer is allowed. User can select only one answer.\"\n\n    # The zoom level of the quiz system is not relevant to the behavior of the quiz system.\n    # However, it could be used to determine the size of the quiz questions or the layout of the quiz page.\n    # For example, if the zoom level is high, the quiz questions could be displayed in a larger font size.\n    # But this is not relevant to the behavior of the quiz system, so it is not included in the return statement.\n\n    # Return the result of the quiz system behavior\n    return \"Quiz system behavior determined.\"  # This line is not necessary and can be removed\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    result = {}\n    for key in a:\n        if key.isalpha():\n            result[key] = a[key]\n    for key in b:\n        if key.isalpha():\n            if key in result:\n                if isinstance(result[key], dict) and isinstance(b[key], dict):\n                    result[key] = merge_objects(result[key], b[key])\n                else:\n                    result[key] = b[key]\n            else:\n                result[key] = b[key]\n    return result\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        # Check if input is a dictionary\n        if not isinstance(d, dict):\n            raise ValueError(\"Input must be a dictionary\")\n\n        # Initialize max_value with negative infinity\n        max_value = float('-inf')\n\n        # Iterate over dictionary items\n        for key, value in d.items():\n            # Check if value is a dictionary\n            if isinstance(value, dict):\n                # Recursively find max value in nested dictionary\n                max_value = max(max_value, find_max_in_dict(value))\n            else:\n                # Update max_value if current value is greater\n                max_value = max(max_value, value)\n\n        # Return max_value\n        return max_value\n\n    except ValueError as e:\n        # Handle ValueError exception\n        print(f\"Error: {e}\")\n        return None\n\n    except Exception as e:\n        # Handle any other exceptions\n        print(f\"An error occurred: {e}\")\n        return None\n\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*'\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0 and x % 11 == 0 and x % 13 == 0 and x % 17 == 0 and x % 19 == 0 and x % 23 == 0 and x % 29 == 0 and x % 31 == 0 and x % 37 == 0 and x % 41 == 0 and x % 43 == 0 and x % 47 == 0 and x % 53 == 0 and x % 59 == 0 and x % 61 == 0 and x % 67 == 0 and x % 71 == 0 and x % 73 == 0 and x % 79 == 0 and x % 83 == 0 and x % 89 == 0 and x % 97 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
