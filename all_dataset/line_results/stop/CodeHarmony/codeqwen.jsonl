{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = ['Sports', 'Politics', 'Technology', 'Entertainment', 'Health']\n    \n    # Define rules for each category\n    rules = {\n        'Sports': ['football', 'basketball', 'cricket', 'tennis', 'soccer'],\n        'Politics': ['election', 'president', 'parliament', 'government', 'democracy'],\n        'Technology': ['computer', 'mobile', 'internet', 'software', 'hardware'],\n        'Entertainment': ['movie', 'music', 'tv', 'game', 'comedy'],\n        'Health': ['disease', 'medicine', 'vaccine', 'hospital', 'pharmacy']\n    }\n    \n    # Classify text\n    for category, keywords in rules.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n    \n    # If no category is matched, return 'Other'\n    return 'Other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError as e:\n        raise ValueError(f\"Invalid JSON string: {e}\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0:\n        return True\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif base < 2 or n < 2:\n        return \"Invalid input\"\n    else:\n        for i in range(1, n):\n            if (base ** i) % n == 1:\n                return i\n        return \"No discrete logarithm found\"\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Invalid JSON string: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set from the string to remove duplicates\n    unique_chars = set(string)\n    \n    # Compare the length of the set with the length of the string\n    return len(unique_chars) == len(string)\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers\n    text = ''.join(e for e in text if e.isalpha())\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b' + re.escape(word1) + r'\\b|\\b' + re.escape(word2) + r'\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('#'):\n            line = line[1:].strip()\n            if 'tabstop' in line:\n                settings['tabstop'] = int(line.split('=')[1].strip())\n            elif 'expandtab' in line:\n                settings['expandtab'] = line.split('=')[1].strip() == 'true'\n            elif 'shiftwidth' in line:\n                settings['shiftwidth'] = int(line.split('=')[1].strip())\n            elif 'softtabstop' in line:\n                settings['softtabstop'] = int(line.split('=')[1].strip())\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse both lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine both lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return num-1 if str(num-1) == str(num-1)[::-1] else num+1\n"}
{"task_id": "valid/25", "completion": "\n    if num < 0:\n        return \"Invalid input, please enter a positive number.\"\n    else:\n        return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Check if matrix is square\n    is_square = len(matrix) == len(matrix[0])\n    \n    # Calculate number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Calculate sum of diagonal elements\n    sum_diag = sum(matrix[i][i] for i in range(min(num_rows, num_cols)))\n    \n    return num_rows, num_cols, sum_diag, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    return key not in json_data or json_data[key] != value\n\n"}
{"task_id": "valid/31", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/32", "completion": "\n    alphabet_order = \"abcdefghijklmnopqrstuvwxyz\"\n    s = s.lower()\n    for i in range(len(alphabet_order)):\n        if alphabet_order[i] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n"}
{"task_id": "valid/34", "completion": "\n    # Your code here\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Validate array contains only numerical values\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            return \"Error: Array contains non-numerical values.\"\n    \n    # Compute and return the sum of array elements\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods.sort(key=lambda x: x['name'])\n    return [neighborhood['name'] for neighborhood in neighborhoods]\n\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize result as maximum possible\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Iterate through all array elements\n    for i in range(n):\n        # If the current element is greater than or equal to the sum of the two smallest elements\n        if (arr[i] >= arr[0] + arr[1]):\n            # The sum of the two smallest elements plus the current element is the sum of the pair\n            min_sum = min(min_sum, arr[i] + arr[0])\n            break\n\n        # If the current element is less than the sum of the two smallest elements\n        else:\n            # The sum of the two smallest elements plus the current element is the sum of the pair\n            min_sum = min(min_sum, arr[i] + arr[1])\n\n    # Return the minimum sum of the pair\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    if len(votes) < 100:\n        return \"Error: Total number of votes must be at least 100.\"\n\n    candidate_votes = {}\n    for vote in votes:\n        candidate, votes_count = vote\n        if not candidate.isupper() or len(candidate) > 10 or votes_count < 1 or votes_count > 1000:\n            return \"Error: Invalid vote format.\"\n\n        if candidate in candidate_votes:\n            candidate_votes[candidate] += votes_count\n        else:\n            candidate_votes[candidate] = votes_count\n\n    total_votes = sum(candidate_votes.values())\n    results = {}\n    for candidate, votes_count in candidate_votes.items():\n        percentage = round((votes_count / total_votes) * 100, 2)\n        results[candidate] = {\"votes\": votes_count, \"percentage\": percentage}\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Check if the date string matches the DD-MM-YYYY format\n        date_obj = datetime.strptime(date_string, \"%d-%m-%Y\")\n    except ValueError:\n        try:\n            # Check if the date string matches the DD-MMM-YYYY format\n            date_obj = datetime.strptime(date_string, \"%d-%b-%Y\")\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n    # Check if the date is valid\n    if date_obj.day > 31 or (date_obj.month == 2 and date_obj.day > 29) or (date_obj.month in [4, 6, 9, 11] and date_obj.day > 30):\n        raise ValueError(\"Invalid date. Please provide a valid date.\")\n\n    # Return the date in the standardized format\n    return date_obj.strftime(\"%B %d, %Y\")\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = allowed_type.split(',')\n    old_extension = oldname.split('.')[-1]\n    new_extension = newname.split('.')[-1]\n    if old_extension in allowed_extensions and new_extension in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, tuple):\n            result.append(remove_uneven(i))\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                result.append(i)\n        elif isinstance(i, int) or isinstance(i, float):\n            if i % 2 == 0:\n                result.append(i)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = 2\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            unique_languages.add(parts[1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over each sub-array in the input array\n    for sub_arr in arr:\n        # Iterate over each number in the sub-array\n        for num in sub_arr:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # Otherwise, add the number to the dictionary with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create a new array to store the count of each number\n    count_arr = []\n\n    # Iterate over each number in the input array\n    for num in arr:\n        # Append the count of the number to the output array\n        count_arr.append(count_dict[num])\n\n    # Return the output array\n    return count_arr\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$'),\n        re.compile(r'^videos/(?P<video_id>\\d+)/$'),\n    ]\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            return match.groupdict()\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dict_item in list_of_dicts:\n        for key, value in dict_item.items():\n            if key.startswith(\"price_\"):\n                total_price += value\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        list2.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'system_configs': [],\n        'database_configs': [],\n        'network_configs': [],\n        'other_configs': []\n    }\n\n    for file_path in file_paths:\n        if 'etc/system' in file_path:\n            categorized_files['system_configs'].append(file_path)\n        elif 'etc/database' in file_path:\n            categorized_files['database_configs'].append(file_path)\n        elif 'etc/network' in file_path:\n            categorized_files['network_configs'].append(file_path)\n        else:\n            categorized_files['other_configs'].append(file_path)\n\n    return categorized_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    return colors[(colors.index(color) + 1) % len(colors)]\n"}
{"task_id": "valid/64", "completion": "\n    # Create a new list with each element incremented by 1\n    new_list = [i + 1 for i in list]\n    return new_list\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        if num ** 0.5 == int(num ** 0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    return f\"My name is {name} and I am {age} years old.\"\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        if re.match(\"^[a-zA-Z0-9 ]+$\", string):\n            result.append(string.capitalize())\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b'>:\n            start = i\n            i += 4\n            while i < len(html_code) and html_code[i:i+5] != '</b'>:\n                i += 1\n            if i < len(html_code):\n                bold_text.append(html_code[start+4:i])\n                i += 5\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"coffee\": 2.50,\n        \"tea\": 1.75,\n        \"chocolate\": 3.00,\n        \"water\": 1.00\n    }\n\n    # Check if the item is available\n    if item not in items:\n        return \"Item not available\"\n\n    # Check if the user inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n\n    # Calculate the change\n    change = money_inserted - items[item]\n\n    # Return the change and update the stock\n    return f\"Here is your {item} and your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning a value to a variable\n    value = 10\n    \n    # Validating the value\n    if isinstance(value, int):\n        print(\"The value is an integer.\")\n    else:\n        print(\"The value is not an integer.\")\n        \n    # Returning the value\n    return value\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text using regular expression\n    tokens = re.findall(r'\\b\\w+\\b', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7 found.\"\n\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n\n    number_counts = {}\n    for num in divisible_numbers:\n        if num in number_counts:\n            number_counts[num] += 1\n        else:\n            number_counts[num] = 1\n\n    return {\n        \"average\": average,\n        \"max_value\": max_value,\n        \"min_value\": min_value,\n        \"number_counts\": number_counts\n    }\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty.\")\n    \n    min_value = max_value = time_series[0]\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains non-numerical values.\")\n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    encyclopedia = {\n        \"Python\": [\"Introduction to Python\", \"Advanced Python Techniques\", \"Python Libraries\"],\n        \"JavaScript\": [\"Introduction to JavaScript\", \"DOM Manipulation\", \"Asynchronous JavaScript\"],\n        \"Java\": [\"Introduction to Java\", \"Object-Oriented Programming\", \"Java Collections\"]\n    }\n    related_articles_count = {}\n    for entry, articles in encyclopedia.items():\n        related_articles_count[entry] = len(articles)\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n            sum_odd += lst[i]\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return \"-\" + dec_to_ternary(-n)\n    elif n == 0:\n        return \"0\"\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price'] * item['quantity']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(1 for char in palindrome if char in vowels)\n        vowel_count_dict[palindrome] = vowel_count\n\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Your implementation here\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in unique_elements:\n            # If it does, return True\n            return True\n        # Add the current number to the set\n        unique_elements.add(num)\n\n    # If no pair sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for package, version in dependencies:\n        if package not in latest_versions or version > latest_versions[package]:\n            latest_versions[package] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categories = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in categories:\n            categories[action] = []\n        categories[action].append(result)\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    # Your code here\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n\n\nnum_list = [1, 2, 3, 4, 5]\nexp = 2"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n"}
{"task_id": "valid/113", "completion": "\n    if current_num == 0:\n        if not isinstance(n, int) or n <= 0:\n            raise ValueError(\"Input must be a positive integer\")\n        return print_thank_you(n, current_num + 1)\n    elif current_num <= n:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n        return print_thank_you(n, current_num + 1)\n    else:\n        return\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n    return count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = set(str(num, base))\n    return len(digits) == 1\n\n\ncheck_repdigit_base10 = partial(check_repdigit, base=10)\ncheck_repdigit_base2 = partial(check_repdigit, base=2)\ncheck_repdigit_base8 = partial(check_repdigit, base=8)\ncheck_repdigit_base16 = partial(check_repdigit, base=16)\ncheck_repdigit_base36 = partial(check_repdigit, base=36)\ncheck_repdigit_base62 = partial(check_repdigit, base=62)\ncheck_repdigit_base64 = partial(check_repdigit, base=64)\ncheck_repdigit_base85 = partial(check_repdigit, base=85)\ncheck_repdigit_base91 = partial(check_repdigit, base=91)\ncheck_repdigit_base93 = partial(check_repdigit, base=93)\ncheck_repdigit_base94 = partial(check_repdigit, base=94)\ncheck_repdigit_base95 = partial(check_repdigit, base=95)\ncheck_repdigit_base96 = partial(check_repdigit, base=96)\ncheck_repdigit"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if not s:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [OPTIONS]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option.ljust(20)} {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for val in Val:\n        if val in count_dict:\n            count_dict[val] += 1\n        else:\n            count_dict[val] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    inverted_bitset = \"\"\n    for bit in sample_bitset:\n        if bit == \"1\":\n            inverted_bitset += \"0\"\n        else:\n            inverted_bitset += \"1\"\n    return inverted_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subseq_len = len(subsequence)\n    for i in range(len(sequence)):\n        if sequence[i:i+subseq_len] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate number of electrons based on energy values\n    total_electrons = 0\n    for energy, ado in zip(grid_energies, ados):\n        total_electrons += ado\n\n    # Adjust number of electrons based on doping levels\n    if dope > 0:\n        total_electrons += dope\n    elif dope < 0:\n        total_electrons -= abs(dope)\n\n    # Calculate number of electrons per unit cell\n    electrons_per_unit_cell = total_electrons / dos_grid_size\n\n    return electrons_per_unit_cell\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    for i in range(0, len(arr) - 1, 2):\n        arr[i], arr[i + 1] = arr[i + 1], arr[i]\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, 'previous_migration_number'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    # Find common elements\n    common_elements = set(list1) & set(list2)\n    # Calculate sum of common elements\n    common_elements_sum = sum(common_elements)\n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    # Your code here\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda k: k[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        doubled_digit = int(digit) * 2 + carry\n        result.append(str(doubled_digit % 10))\n        carry = doubled_digit // 10\n    if carry:\n        result.append(str(carry))\n    return ''.join(reversed(result))\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"pick\": (0.1, 0.2, 0.3),\n        \"place\": (-0.1, -0.2, -0.3)\n    }\n    return presets.get(preset_name, None)\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        if zoom_level == 1:\n            return \"User can select multiple answers for each question.\"\n        elif zoom_level == 2:\n            return \"User can select multiple answers for each question and can see the correct answer after submission.\"\n        else:\n            return \"User can select multiple answers for each question and can see the correct answer after submission with additional features.\"\n    else:\n        if zoom_level == 1:\n            return \"User can only select one answer for each question.\"\n        elif zoom_level == 2:\n            return \"User can only select one answer for each question and can see the correct answer after submission.\"\n        else:\n            return \"User can only select one answer for each question and can see the correct answer after submission with additional features.\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except ValueError:\n        return \"Error: Dictionary is empty or contains non-numeric values.\"\n    except TypeError:\n        return \"Error: Input is not a dictionary.\"\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 4 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
