{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = []\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n            else:\n                raise ValueError('Unbalanced parentheses')\n    if stack:\n        raise ValueError('Unbalanced parentheses')\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(level, max_level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    return sum(numbers), prod(numbers)\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    max_value = float('-inf')\n    for number in numbers:\n        max_value = max(max_value, number)\n        result.append(max_value)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    # Find longest palindrome postfix\n    postfix = string\n    while not is_palindrome(postfix):\n        postfix = postfix[:-1]\n\n    # Append prefix reverse string\n    return string + postfix[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_len:\n            return s\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split(' ')\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    return string.count(substring)\n"}
{"task_id": "HumanEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=lambda x: number_dict[x]))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_diff = float(\"inf\")\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join([char.swapcase() for char in string])\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    return -xs[-2] / xs[-1]\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))\n"}
{"task_id": "HumanEval/37", "completion": "\n    even = [l[i] for i in range(0, len(l), 2)]\n    even.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even.pop(0)\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i-1)"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    return fib[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return xs[1:] if len(xs) > 1 else []\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Write your code here\n    pass\n"}
{"task_id": "HumanEval/68", "completion": "\n    pass\n"}
{"task_id": "HumanEval/69", "completion": "\n    # your code here\n    from collections import Counter\n    counter = Counter(lst)\n    for key, value in counter.items():\n        if value >= key:\n            return key\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a+1) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    return x**int(n) == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**0.5**0.5%1==0"}
{"task_id": "HumanEval/78", "completion": "\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum([1 for i in num if i in primes])\n"}
{"task_id": "HumanEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    return len(string) in primes(len(string))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    return 9 * starts_one_ends(n - 1) + 9 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # your code here\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    return ' '.join(sorted(word) for word in s.split())\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, el in enumerate(row):\n            if el == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    # your code here\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            encrypted += alphabet[index + 4]\n        else:\n            encrypted += letter\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    return sum(1 for word in S.split() if word.startswith('I'))\n\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            encoded_message += chr(ord(letter) + 2)\n        else:\n            encoded_message += letter.swapcase()\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            if key.islower() != key.isupper():\n                return False\n        return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')\n"}
{"task_id": "HumanEval/99", "completion": "\n    return int(round(float(value)))\n"}
{"task_id": "HumanEval/100", "completion": "\n    return [n + 2*i for i in range(n)]\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', '').split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m + 1)) / (m - n + 1))\n        return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if len(set(str(i))) == len(str(i))])\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    # Sort the array\n    arr.sort()\n    # Reverse the array\n    arr.reverse()\n    # Replace each digit by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    arr = [str(i) for i in arr]\n    arr = [i.replace('1', 'One') for i in arr]\n    arr = [i.replace('2', 'Two') for i in arr]\n    arr = [i.replace('3', 'Three') for i in arr]\n    arr = [i.replace('4', 'Four') for i in arr]\n    arr = [i.replace('5', 'Five') for i in arr]\n    arr = [i.replace('6', 'Six') for i in arr]\n    arr = [i.replace('7', 'Seven') for i in arr]\n    arr = [i.replace('8', 'Eight') for i in arr]\n    arr = [i.replace('9', 'Nine') for i in arr]\n    return arr\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    return sum(1 for x in arr if sum(int(d) for d in str(abs(x))) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i:] + arr[:i] == sorted(arr):\n                return True\n        return False\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    # TODO: implement function here\n    pass\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    else:\n        test = test.split()\n        test_dict = {}\n        for i in test:\n            if i in test_dict:\n                test_dict[i] += 1\n            else:\n                test_dict[i] = 1\n        max_count = max(test_dict.values())\n        return {k: v for k, v in test_dict.items() if v == max_count}\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    return (s.replace(c,''),s.replace(c,'') == s.replace(c,'')[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [\"the number odd elements {}n str{}ng {} 1nput.\".format(len([i for i in lst[j] if int(i) % 2 == 1]), j+1, len([i for i in lst[j] if int(i) % 2 == 1])) for j in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    curr_sum = 0\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum > 0:\n            curr_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    # TODO: implement this function\n    # return math.inf\n    # return 0\n    # return 1\n    # return 2\n    # return 3\n    # return 4\n    # return 5\n    # return 6\n    # return 7\n    # return 8\n    # return 9\n    # return 10\n    # return 11\n    # return 12\n    # return 13\n    # return 14\n    # return 15\n    # return 16\n    # return 17\n    # return 18\n    # return 19\n    # return 20\n    # return 21\n    # return 22\n    # return 23\n    # return 24\n    # return 25\n    # return 26\n    # return 27\n    # return 28\n    # return 29\n    # return 30\n    # return 31\n    # return 32\n    # return 33\n    #"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    # your code here\n    def check_parens(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    return 'Yes' if check_parens(''.join(lst)) else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum([i for i in lst[::2] if i % 2 != 0])\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(x for x in arr[:k] if x < 100)\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([i for i in collatz if i % 2 != 0])\n"}
{"task_id": "HumanEval/124", "completion": "\n    # your code here\n    try:\n        date = datetime.strptime(date, '%m-%d-%Y')\n        if date.day < 1 or date.day > 31:\n            return False\n        if date.month in [4, 6, 9, 11] and date.day > 30:\n            return False\n        if date.month == 2 and date.day > 29:\n            return False\n        if date.month < 1 or date.month > 12:\n            return False\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [chr(i) for i in range(97, 123, 2)]\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    if start1 > end2 or start2 > end1:\n        return \"NO\"\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    intersection_length = intersection_end - intersection_start + 1\n\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i == 0:\n            return 0\n    return sum(arr) * prod\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    from collections import deque\n    from heapq import heappop, heappush\n    from functools import lru_cache\n\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    visited = [[False] * N for _ in range(N)]\n    heap = []\n    heappush(heap, (0, 0, 0, grid[0][0]))  # (distance, steps, x, y, value)\n    visited[0][0] = True\n    path = []\n\n    while heap:\n        dist, steps, x, y, value = heappop(heap)\n        path.append(value)\n\n        if steps == k:\n            return path\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1, 3, 2, 8, 14]\n    if n == 5:\n        return [1, 3, 2, 8, 14, 26]\n    if n == 6:\n        return [1, 3, 2, 8, 14, 26, 48]\n    if n == 7:\n        return [1, 3, 2, 8, 14, 26, 48, 90]\n    if n == 8:\n        return [1, 3, 2, 8, 14, 26, 48, 90, 165]\n    if n == 9:\n        return [1, 3, 2, 8, 14, 26, 48, 90, 165, 302]\n    if n == 10:\n        return [1, 3, 2, 8, 14, 26, 48, 90, 165, 302, 554]\n"}
{"task_id": "HumanEval/131", "completion": "\n    return eval('*'.join([str(i) for i in range(1, n+1) if i % 2])) if any(i % 2 for i in range(1, n+1)) else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0 and string.count('[') > 1 and string.count(']') > 1\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([int(math.ceil(i))**2 for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt == \"\":\n        return False\n    else:\n        return txt[-1].isalpha() and txt[-1] not in \"aeiouAEIOU\"\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    if len(arr) == 0:\n        return -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    if not lst:\n        return (None, None)\n    if len(lst) == 1:\n        if lst[0] < 0:\n            return (lst[0], None)\n        elif lst[0] > 0:\n            return (None, lst[0])\n        else:\n            return (None, None)\n    else:\n        neg = [i for i in lst if i < 0]\n        pos = [i for i in lst if i > 0]\n        if not neg:\n            return (None, min(pos))\n        elif not pos:\n            return (max(neg), None)\n        else:\n            return (max(neg), min(pos))\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    else:\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n        if a > b:\n            return a\n        else:\n            return b\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 4 == 0"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"___\", \"-\")\n    text = text.replace(\"__\", \"-\")\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum([i**2 if (i%3==0) else i**3 if (i%4==0) else i for i in lst])\n"}
{"task_id": "HumanEval/143", "completion": "\n    # your code here\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return (x_num * n_num) % x_den == 0 and (x_num * n_den) % x_den == 0\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    return len([num for num in nums if num > 10 and num % 2 == 1 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1])\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        return tuple(planets[planets.index(planet1)+1:planets.index(planet2)])\n    except ValueError:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    return sorted([i for i in lst if len(i) % 2 == 0], key=lambda x: (len(x), x))\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return y\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return y\n    return x\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum([i**2 for i in lst if i > 0 and i%2 == 1])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a,b in zip(game,guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    return '.'.join([class_name, max(extensions, key=lambda x: sum([ord(i) - 96 for i in x if i.islower()]) - sum([ord(i) - 64 for i in x if i.isupper()]))])\n"}
{"task_id": "HumanEval/154", "completion": "\n    return b in a + a\n"}
{"task_id": "HumanEval/155", "completion": "\n    num = abs(num)\n    even = 0\n    odd = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = ''\n    for value, symbol in mini_roman_dict.items():\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique:\n            max_unique = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    pass\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
