{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += (1.5 * float(item))\n        else:\n            total_cost += (1.5 * item)\n        if item > 5:\n            total_cost += 10.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        total_cost *= 1.0\n    return \"{:.2f}\".format(round(total_cost, 2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in calculate_shipping_cost\n            total_cost += (1.5 * float(item))\nValueError: could not convert string to float: 'c'\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        if item > 5:\n            total_cost += 10.0\n        else:\n            total_cost += 5.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 150, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in calculate_shipping_cost\n            item = float(item)\nValueError: could not convert string to float: 'Book'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    def shift_char(c, key):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            ciphered_char = chr((ord(c) - ascii_offset + key) % 26 + ascii_offset)\n            return ciphered_char\n        else:\n            return c\n\n    def shift_word(word, key):\n        return ''.join(shift_char(c, key) for c in word)\n\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n\n    return [shift_word(word, key) for word in words]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:  # moving right\n            if col == cols - 1:  # end of row\n                row += 1\n            elif row == 0:  # start of next row\n                col += 1\n            else:  # moving diagonally downwards\n                row += 1\n                col += 1\n        else:  # moving downwards\n            if row == rows - 1:  # end of column\n                col += 1\n            elif col == 0:  # start of next column\n                row += 1\n            else:  # moving diagonally right\n                col += 1\n                row += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 15, in zigzag_traversal\n        result.append(matrix[row][col])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] in (0, -1):\n        return grid\n    elif grid[x][y] == 1", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37\n    elif grid[x][y] == 1\n    elif grid[x][y] == 1\n                        ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # Define starting point\r\n    x, y = 0, 0\r\n\r\n    # Define direction\r\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\r\n\r\n    # Iterate over the sequence\r\n    for i in code_sequence:\r\n        x, y = x + directions[i][0], y + directions[i][1]\r\n\r\n    # Check if we are back at the starting point\r\n    if (x, y) == (0, 0):\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\n<jupyter_output>\n<empty_output>\n<jupyter_text>\nTesting the function\n<jupyter_code>", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 36\n<jupyter_output>\n    <jupyter_output>\n    ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    words = string.split(string)\n    word_freq = {}\n    for word in words:\n        word_freq[word] = word_freq.get(word, 0) + 1\n    return word_freq\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_sounds = animal_string.split()\r\n    for sound in animal_sounds:\r\n        if sound[0] in animals:\r\n            animals[sound[0]] += 1\r\n    result = []\r\n    for animal in animals:\r\n        if animals[animal] > 0:\r\n            result.append(animals[animal])\r\n    return result\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, those {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    # Find element with maximum occurrence\n    max_occurrence = max(set(flux_values), key=flux_values.count)\n\n    # Find sum all elements array\n    sum_all_elements = sum(flux_values)\n\n    # Multiply sum all elements with most occurred number\n    result = sum_all_elements * max_occurrence\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n\n    return rarest_elems[0]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.isalpha():\n            new_name += char\n    return new_name\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard[1] *= -1\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        dragon_hp -= wizards[0][1]\n        wizards = wizards[1:]\n        if not wizards:\n            return 'The dragon won!'\n        if dragon_hp <= 0:\n            return wizards[0][0]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 141, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in wizard_battle\n        wizard[1] *= -1\nTypeError: 'tuple' object does not support item assignment\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n    \n    i = 1\n    while True:\n        if sum_of_digits(i) == 7:\n            if n == 1:\n                return i\n            else:\n                n -= 1\n        i += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    def is_vampire(i, j, matrix):\n        for x, y in [(i, j), (i, j-1), (i, j+1), (i-1, j), (i+1, j)]:\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] == 2:\n                return True\n        return False\n\n    def is_human(i, j, matrix):\n        return matrix[i][j] == 1\n\n    def is_safe(i, j, matrix):\n        return not is_vampire(i, j, matrix) and not is_human(i, j, matrix)\n\n    def is_vampire_row_or_col(i, j, matrix):\n        for x, y in [(i, j), (i, j-1), (i, j+1), (i-1, j), (i+1, j)]:\n            if 0 <= x <", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33\n            if 0 <= x <\n    if 0 <= x <\n               ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(','.join(map(str, range(1, i + 1))))\n        result.append(','.join(map(str, range(i, 0, -1))))\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    for word in words:\n        if not is_word_in_row(grid, word) and not is_word_in_col(grid, word):\n            return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in crossword_validator\n        if not is_word_in_row(grid, word) and not is_word_in_col(grid, word):\n  File \"<string>\", line 33, in is_word_in_col\n        for i in range(len(transposed)):\nTypeError: object of type 'zip' has no len()\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v * light_years_per_year\n    return distance\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 124, in <module>\n  File \"<string>\", line 122, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_number(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += str(prime_number(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    # Define the mapping from English to alien language\n    mapping = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', \n        'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', \n        'x': '[', 'y': ']', 'z': '|'\n    }\n\n    # Translate the word\n    translated_word = ''.join(mapping.get(c.lower(), c) for c in english_word)\n\n    return translated_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    import re\r\n    words = re.findall(r'\\b\\w+\\b', text)\r\n    word_count = words.count(word)\r\n    if word_count == 0:\r\n        return (0, \"\")\r\n    else:\r\n        sentences = re.split(r'\\.', text)\r\n        max_sentence = max(sentences, key=lambda s: s.count(word))\r\n        return (word_count, max_sentence)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    rows, cols = len(maze), len(maze[0])\n    directions = []\n    dx = [0, 1, 0, -1]\n    dy = [1, 0, -1, 0]\n\n    def dfs(x, y, path):\n        if (x, y) == end:\n            return path\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0:\n                path.append(i % 2 * 'up' + (i // 2", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35\n                path.append(i % 2 * 'up' + (i // 2\n    path.append(i % 2 * 'up' + (i // 2\n                               ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25 + 750\n    else:\n        return (income - 45000) * 0.30 + 1750\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    return [s for s in substrings if is_palindrome(s)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 54, in <module>\n  File \"<string>\", line 52, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 39, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    new_playlist = playlist.copy()\n    for i in range(len(new_playlist)):\n        if \"Rock\" not in new_playlist[i]:\n            j = random.randint(0, len(new_playlist) - 1)\n            while j == i:\n                j = random.randint(0, len(new_playlist) - 1)\n            new_playlist[i], new_playlist[j] = new_playlist[j], new_playlist[i]\n    return new_playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0]*(n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for stone in magic_stones:\n            if i >= stone:\n                dp[i] += dp[i-stone]\n    return dp[n]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    if m > n:\n        return \"Invalid input\"\n\n    transformation_percentages = []\n    for i in range(1, n + 1):\n        if i == m:\n            transformation_percentages.append(100)\n        elif i < m:\n            transformation_percentages.append(0)\n        else:\n            if i - m == 1:\n                transformation_percentages.append(10)\n            else:\n                transformation_percentages.append(transformation_percentages[-1] - 10)\n\n    return transformation_", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 45, in werewolf_transformation\n    return transformation_\nNameError: name 'transformation_' is not defined\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\n        return False\n    local_part, domain = email.split(\"@\")\n    if \".\" not in domain:\n        return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 133, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 19, in validate_email_structure\n    local_part, domain = email.split(\"@\")\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    # calculate the indefinite integral of the polynomial\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i] = xs[i] / (i + 1)\n    return integral_coefficients\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            new_s += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_s += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_s += char\n    return new_s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    return [(s * n)[i:i+n] for i in range(0, len(s) * n, n)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # sort potions by power level and alphabetically\n    potions.sort(key=lambda x: (int(x.split()[1]), x))\n\n    # iterate over potions\n    for potion in potions:\n        # check if potion's power level is less than target\n        if int(potion.split()[1]) < target:\n            target -= int(potion.split()[1])\n        else:\n            return [potion]\n\n   ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in potion_mixing\n    potions.sort(key=lambda x: (int(x.split()[1]), x))\n  File \"<string>\", line 22, in <lambda>\n    potions.sort(key=lambda x: (int(x.split()[1]), x))\nValueError: invalid literal for int() with base 10: 'Potion'\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 41\n        for j in range(1, n\n    for j in range(1, n\n                  ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    def find_second_most_valuable_item(items):\r\n        if len(items) < 2:\r\n            return -1\r\n        items.sort(reverse=True)\r\n        return items[1]\r\n\r\n    legendary_item_found = False\r\n    second_most_valuable_item = find_second_most_valuable_item(player_input)\r\n\r\n    for item in player_input:\r\n        if item == 5:\r\n            legendary_item_found = True\r\n\r\n    return (legendary_item_found, second_most_valuable_item)\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 36\n<jupyter>\n    <jupyter>\n    ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < (distance / speed) * spaceship_weight:\n        return 'Insufficient fuel'\n    else:\n        fuel -= (distance / speed) * spaceship_weight\n        fuel -= (distance / speed) * spaceship_weight * planet_gravity * 0.1\n        return round(fuel, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight > w:\n            return False\n        elif total_weight > e:\n            return False\n        else:\n            return True\n    \n    # Test cases\n    print(fairy_tale_transport([5, 10, 15], 5, 20)) # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10)) # False\n    print(fairy_tale_transport([1, 2, 3], 1, 5)) # True\n    print(fairy_tale_transport([5, 10, 15], 15, 15)) # True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n\n    def find_castle(arr):\n        max_hills = 0\n        current_hills = 1\n\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                current_hills += 1\n            else:\n                max_hills = max(max_hills, current_hills)\n                current_hills = 1\n\n        max_hills = max(max_hills, current_hills)\n        return max_hills\n\n    return find_castle(arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            for word in test_case:\n                if 'Take cannoli.' in word.lower():\n                    secret_messages.append(word.replace('Take cannoli.', ''))\n                else:\n                    secret_messages.append(word)\n        return secret_messages\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n\nhidden_message()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 38, in <module>\nhidden_message()\nTypeError: hidden_message() missing 1 required positional argument: 'test_cases'\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n\n    return {k: v for k, v in inventory.items() if v > 0}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', \n                       'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', \n                       'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', \n                      ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', \n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', \n                      ^\nSyntaxError: '{' was never closed\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i%len(list_of_alphabets)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n\n    # sort the orders in ascending order\n    orders.sort()\n\n    # initialize the result\n    result = 0\n\n    # iterate over the orders\n    for order in orders:\n        # if the order is larger than the oven's capacity, skip it\n        if order > n:\n            continue\n\n        # if the order is smaller than the oven's capacity, bake it\n        result += 1\n\n        # if the result is larger than the maximum number of bat", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            transformed += char.lower()[1]\n        elif char.lower() in consonants:\n            transformed += char.lower()[1]\n        elif char.isalpha():\n            if i % 2 == 0:\n                transformed += char.lower()\n            else:\n                transformed += char.upper()\n        else:\n            transformed += char\n\n    return transformed\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 150, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in magical_transformation\n            transformed += char.lower()[1]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_coordinates.append((i, j))\n    return star_coordinates\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return new_c\n\n    return ''.join(shift_char(c, shift) for c, shift in zip(message, (shift + i for i in range(len(message)))))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', \n                       'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', \n                       'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', \n                       'v': '...-', '", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23\n                       'v': '...-', '\n    'v': '...-', '\n                 ^\nSyntaxError: unterminated string literal (detected at line 23)\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        result = ''\n        for char in dish:\n            result += spell[ord(char) % len(spell)]\n        return result\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_menu[transform_dish(dish, magic_spell)] = price\n    return transformed_menu\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_phrase = ''\n\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                new_word += '@'\n            else:\n                new_word += char\n        if word[0] in vowels:\n            new_word = new_word[0].upper() + new_word[1:] + 'xy'\n        else:\n            new_word = new_word[0].upper() + new_word", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return ingredient_list\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n\n    # Initialize happy ants count\n    happy_ants_count = 0\n\n    # Iterate over sugar locations\n    for sugar_location in sugar_locations:\n        # If sugar location is in ant's path, increment happy ants count\n        if sugar_location in ant_positions:\n            happy_ants_count += 1\n\n    # Return happy ants count\n    return happy_ants_count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    \n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    if s[i].isupper():\n                        result += vowels[(vowels.index(s[i].lower())+1)%5].upper()\n                    else:\n                        result += vowels[(vowels.index(s[i].lower())+1)%5]\n                else:\n                    result += s[i]\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\r\n        if p < 1:\r\n            return []\r\n        else:\r\n            if p % 2 == 0:\r\n                return [p] + create_pyramid(p-2)\r\n            else:\r\n                return [p] + create_pyramid(p-3)\r\n\r\n    return create_pyramid(p)\n<jupyter_output>\n<empty_output>\n<jupyter_text>\nTesting the function:\n<jupyter_code>", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 29\n<jupyter_output>\n    <jupyter_output>\n    ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_divisible_primes(start, end, divisor):\n        primes = [i for i in range(start, end + 1) if is_prime(i) and i % divisor == 0]\n        return primes\n\n    return get_divisible_primes(start, end, divisor)\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, details in menu.items():\n        if food in order:\n            remove = set(order[food].get('remove', []))\n            add = set(order[food].get('add', []))\n            new_ingredients = set(details) - remove | add\n            new_menu[food] = list(new_ingredients)\n        else:\n            new_menu[food] = details\n\n    return new_menu\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n\n    pairs.sort(key=lambda x: (x[0], x[1]))\n\n    return pairs\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        for meal in meals[customer]:\n            total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in meal_calculator\n        for meal in meals[customer]:\nKeyError: 'Alice'\n", "passed": false}
{"task_id": "EvoEval/68", "completion": "\n\n    def can_be_sorted(arr):\n        if not arr:\n            return True\n\n        rotations = 0\n        swaps = 0\n\n        for i in range(len(arr)):\n            if i < len(arr) - 1 and arr[i] > arr[i + 1]:\n                rotations += 1\n            if swaps > 0 and arr[i] < arr[i - 1]:\n                return False\n            if arr[i] > arr[0]:\n                swaps += 1\n\n        return rotations <= 1 and swaps <= 1\n\n    return can_be_sorted(arr)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n\n    def is_possible(cards, magicNumber):\n        for i in range(len(cards)):\n            for j in range(i + 1, len(cards)):\n                if cards[i] * cards[j] == magicNumber:\n                    return (i, j)\n        return \"No magic today\"\n\n    return is_possible(cards, magicNumber)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted = \"\"\n    count_vowels = 0\n\n    for char in s:\n        if char.lower() in vowels:\n            count_vowels += 1\n        if char.isalpha():\n            char_encrypted = chr((ord(char.lower()) - 97 + n) % 26 + 97) if char.islower() else chr((ord(char.lower()) - 65 + n) % 26 + 65)\n            encrypted += char_encrypted\n        else:\n            encrypted += char\n\n    return (encrypted, count_vowels)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for s in lst:\n        name = s[:-2]\n        count = sum(c.isdigit() for c in s[-2:])\n        result.append(f\"Once upon time, kingdom far away, lived magical creature with name '{name}' who was known for telling {count} tales day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    def solve(self, grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 1:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) + 1\n                else:\n                    dp[i][j] = 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    return ''.join([cipher.get(c, c) for c in s])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \".,;: !?\\\"\\'\"\n\n    result = \"\"\n    for i, c in enumerate(input_str):\n        if c in vowels:\n            result += vowels[(vowels.index(c)+1)%len(vowels)]\n        elif c in consonants:\n            result += consonants[(consonants.index(c)+1)%len(consonants)]\n        elif c in digits:\n            result += str((int(c)+1)%1", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35\n            result += str((int(c)+1)%1\n    result += str((int(c)+1)%1\n                 ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n\n    pyramid = []\n    for i in range(max(lst)):\n        row = []\n        for j in lst:\n            row.append('#' * j)\n        pyramid.append(''.join(row))\n    return pyramid\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_points(sequence, k):\n        points = []\n        for num in sequence:\n            point = 0\n            while num != 1:\n                num = num // k\n                point += 1\n            points.append(point)\n        return sorted(points, reverse=True)\n\n    return magical_sequence_points(sequence, k)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days <= 0 or len(prices) < days:\r\n        return 0\r\n\r\n    min_price = prices[0]\r\n    max_profit = 0\r\n\r\n    for i in range(days):\r\n        min_price = min(min_price, prices[i])\r\n        max_profit = max(max_profit, prices[i] - min_price)\r\n\r\n    return max_profit\r\n\r", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n\n    def move(row, col, direction):\n        if direction == 'up':\n            return (row - 1, col)\n        elif direction == 'down':\n            return (row + 1, col)\n        elif direction == 'left':\n            return (row, col - 1)\n        elif direction == 'right':\n            return (row, col + 1)\n\n    def is_valid(row, col,", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 43\n    def is_valid(row, col,\n    def is_valid(row, col,\n                ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n\n    alien_dict_set = set(alien_dictionary)\n    for word in word_list:\n        for i in range(len(word) - 1):\n            if word[i] not in alien_dict_set or word[i+1] not in alien_dict_set or word[i+1] < word[i]:\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"A", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 34\n        \"A\n    \"A\n    ^\nSyntaxError: unterminated string literal (detected at line 34)\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n\n    def dfs(tree, path, result):\n        if not tree:\n            return\n        if not tree.get('left') and not tree.get('right'):\n            result.append(path + [tree.keys()[0]])\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], result)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], result)\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], result)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]],", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 38\n            dfs(tree['right'], path + [tree.keys()[0]],\n    dfs(tree['right'], path + [tree.keys()[0]],\n       ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    def is_valid(x, y, grid):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n    \n    def bfs(start, grid):\n        moves = [(0, 1), (1, 0)]\n        queue = [(start, 0)]\n        visited = {start}\n        \n        while queue:\n            curr, step = queue.pop(0)\n            if curr == princess:\n                return step\n            for move in moves:\n               ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37\nimport numpy as np\n    import numpy as np\nIndentationError: expected an indented block after 'for' statement on line 34\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    def sort_key(movie):\n        return (-movies_dict[movie][0], movies_dict[movie][1])\n\n    return sorted(movies_dict, key=sort_key)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n\n    def spiral_coords(matrix):\n        if not matrix:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        res = []\n        dx, dy = [0, 1, 0, -1], [1, 0, -1, 0]\n        x, y, c = 0, -1, 0\n        for _ in range(rows * cols):\n            for i in range(4):\n                nx, ny = x + dx[i], y + dy[i]\n                if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] != ' ':\n                    res.append(matrix[nx][ny])\n                    matrix[nx][ny] = ' '\n                    x, y = nx, ny\n                    c += 1\n                    break\n                dx[i], dy[i] = -dy[i], dx[i]\n        return ''.join(res)\n\n    return spiral_coords(arr)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n\n    def calculate_population_density(population, size):\n        if population and size:\n            return round(population / size, 2)\n        else:\n            return None\n\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] and data[1]:\n            result[planet] = calculate_population_density(data[0], data[1])\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_target(a, b):\n        return a == b\n\n    def is_odd(a):\n        return a % 2 != 0\n\n    def is_in_range(a, b, c):\n        return b <= a <= c\n\n    def is_in_array(a, arr):\n        return a in arr\n\n    def remove_aliens(a, arr):\n        return [i for i in arr if not is_target(i, a)]\n\n    def remove_adjacent(a, arr):\n        return [i for i in arr if not is_adjacent(i", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 44\n        return [i for i in arr if not is_adjacent(i\n    return [i for i in arr if not is_adjacent(i\n                                             ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(c) for c in s]\n\n    def get_combinations(digits):\n        if len(digits) == 1:\n            return digits\n        else:\n            combinations = []\n            for i in range(len(digits)):\n                for j in range(len(digits)):\n                    if i != j:\n                        new_digits = digits[:]\n                        new_digits[i], new_digits[j] = new_digits[j], new_digits[i]\n                        combinations.append(new_digits)\n            return combinations\n\n    s1_digits = get_digits(s1)\n    s2_digits = get_digits(s2)\n\n    combinations_s1 = get_combinations(s1_digits)\n    combinations_s2 = get_combinations(s2_digits)\n\n    product = 0\n    for combination_s1 in combinations_s1:\n        for combination_s2 in combinations_s2:\n            product += sum(combination_s1) + sum(combination_s2)\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action in spaceship_data:\n        if action[0] == 'Launch':\n            if status == \"On Ground\":\n                status = \"In Space\"\n            else:\n                return 'Invalid Action Sequence'\n        elif action[0] == 'Move':\n            if status == \"In Space\":\n                return 'Invalid Action Sequence'\n            else:\n                status = \"On Ground\"\n        elif action[0] == 'Land':\n            if status != \"In Space\":\n                return 'Invalid Action Sequence'\n            else:\n                status = \"On Ground\"\n    return status\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n):\n            if i == 0 and j == 0:\n                layer += alphabet[j]\n            elif i == 0:\n                layer += alphabet[j] + alphabet[j]\n            elif i == n - 1:\n                layer += alphabet[j] * 2\n            else:\n                layer += alphabet[j] + alphabet[j+1:j+1]\n        result.append(layer.center(2*n-1))\n    return '\\n'.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n_values[i % len(n_values)]) for i, c in enumerate(message))\n\n    return shift_message(message, n_values)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n    return sorted(strings, key=len)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n\n    def is_square(matrix):\n        return all(len(row) == len(matrix) for row in matrix)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    return abs(sum(m[i][i] for i in range(len(m))) - sum(m[i][len(m)-i-1] for i in range(len(m))))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        lst[i] = abs(lst[i])\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            product_digits = get_product_digits(i)\n            if lst[i] == product_digits:\n                magic_indices.append(i)\n    magic_indices.sort()\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    alien_continent = {\"Xenomorph\", \"Predator\", \"Klingon\"}[alien]\n    continents = [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]\n    continents.remove(alien_continent)\n\n    result = [human for human in continents if humans.get(human, \"\") == alien_continent]\n    result.sort(key=continents.index)\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in alien_invasion\n    alien_continent = {\"Xenomorph\", \"Predator\", \"Klingon\"}[alien]\nTypeError: 'set' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [b]\n    for _ in range(n - 1):\n        next_num = sequence[-1] + sequence[-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[-1] = 'prime'\n    return sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 37, in nature_sequence_generator\n        next_num = sequence[-1] + sequence[-2]\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n\n    def play_round(n, music):\n        eliminated = []\n        for i in range(1, n+1):\n            if i % music == 0:\n                eliminated.append(i)\n            else:\n                n -= 1\n        return n, eliminated\n\n    players_left = list(range(1, n+1))\n    for round in rounds:\n        players_left, _ = play_round(len(players_left), round)\n    return players_left\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in musical_chairs\n        players_left, _ = play_round(len(players_left), round)\nTypeError: object of type 'int' has no len()\n", "passed": false}
