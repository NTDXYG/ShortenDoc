{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    is_string = False\n    for item in items:\n        if isinstance(item, str):\n            is_string = True\n            item = 1.0\n        total_cost += 5.0\n        if item > 5.0:\n            total_cost += 10.0\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    if is_string:\n        total_cost *= 1.5\n    return f\"{total_cost:.2f}\"", "result": "passed", "passed": true}
{"task_id": "EvoEval/1", "completion": "\n    total_weight = 0\n    for item in items:\n        if isinstance(item, str):\n            total_weight += 1\n        else:\n            total_weight += item\n    \n    base_cost = total_weight * 5.0\n    if total_weight > 5:\n        base_cost += 10.0\n    \n    if location == 'National':\n        base_cost *= 1.5\n    elif location == 'International':\n        base_cost *= 2.5\n    \n    return round(base_cost, 2)", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    # TODO: Implement this function\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    return sum(1 for candle in candles if candle == max_height)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    for i in range(rows + cols - 1):\n        if i % 2 == 0:\n            row, col = min(i, rows - 1), max(0, i - rows + 1)\n            while row >= 0 and col < cols:\n                result.append(matrix[row][col])\n                row -= 1\n                col += 1\n        else:\n            row, col = max(0, i - cols + 1), min(i, cols - 1)\n            while col >= 0 and row < rows:\n                result.append(matrix[row][col])\n                row += 1\n                col -= 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    # Check if position is out of grid\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n\n    # Check if cell clicked already revealed\n    if grid[position[0]][position[1]] != -1:\n        return grid\n\n    # Check if cell clicked is mine\n    if grid[position[0]][position[1]] == 1:\n       ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 46\nimport numpy as np\n    import numpy as np\nIndentationError: expected an indented block after 'if' statement on line 43\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # TODO: implement function\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n    # ...\n   ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 229, in <module>\n  File \"<string>\", line 227, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    # Find the index of the painter\n    painter_index = canvas.find('P')\n    \n    # If there is no painter, return the canvas as is\n    if painter_index == -1:\n        return canvas\n    \n    # If there is more than one painter, return 'Invalid canvas'\n    if canvas.count('P') > 1:\n        return 'Invalid canvas'\n    \n    # Find the index of the first wall\n    wall_index = canvas.find('#')\n    \n    # If there is no wall, return the canvas as is\n    if wall_index == -1:\n        return canvas\n    \n    # If the painter is on the wall, return 'Invalid canvas'\n    if painter_index == wall_index:\n        return 'Invalid canvas'\n    \n    # Find the index of the last wall\n    last_wall_index = canvas.rfind('#')\n    \n    # If the painter is on the last wall, return 'Invalid canvas'\n    if painter_index == last_wall_index:\n        return 'Invalid canvas'\n    \n    # Find the index of the first empty space after the painter\n    empty_space_index = canvas.find('-', painter_index + 1)\n    \n    # If there is no empty space after the painter, return the canvas as is\n    if empty_space_index == -1:\n        return canvas\n    \n    # Find the index of the last empty space before the last wall\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 176, in <module>\n  File \"<string>\", line 174, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    word_frequency = {}\n    words = string.lower().split()\n    for word in words:\n        word = ''.join(e for e in word if e.isalnum())\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    return word_frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_count = 0\r\n    animal_list = []\r\n    animal_string = animal_string.replace(' ', '')\r\n    for animal in animal_string:\r\n        if animal in animal_dict:\r\n            animal_dict[animal] += 1\r\n            animal_count += 1\r\n            if animal_count == 5:\r\n                break\r\n    for animal, count in animal_dict.items():\r\n        animal_list.append(count)\r\n    return animal_list", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, those {fruits[0]} {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, those {', '.join(fruits[:-1])} {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    pass", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n\n    # Find the minimum count\n    min_count = min(count_dict.values())\n\n    # Find the rarest element(s)\n    rarest_elems = [elem for elem, count in count_dict.items() if count == min_count]\n\n    # Return the first rarest element\n    return rarest_elems[0]", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index+1].upper()\n                else:\n                    alias += vowels[index+1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index+1].upper()\n                else:\n                    alias += consonants[index+1]\n    return alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # TODO: implement this function\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a + b\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return 10 * magical_seven(n - 1) + 3\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in vampires_in_matrix\n                if i > 0 and m[i-1][j] == 2:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    # TODO: implement function\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 121, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    symbol_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    return ''.join(symbol_map[char] for char in english_word.lower())\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    word_count = 0\r\n    max_sentence = \"\"\r\n    max_count = 0\r\n    for sentence in sentences:\r\n        count = sentence.count(word)\r\n        if count > max_count:\r\n            max_count = count\r\n            max_sentence = sentence\r\n        word_count += count\r\n    return word_count, max_sentence\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    \n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    \n    # Check if start or end are walls\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    \n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    \n    # Perform breadth-first search\n    while queue:\n        (current, path) = queue.pop(0)\n        visited.add(current)\n        \n        # Check if", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 71, in <module>\n  File \"<string>\", line 69, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 59, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 2500 + 15000 + (taxable_income - 80000) * 0.3\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    pass", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/30", "completion": "\n    # TODO: implement this function\n    pass", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    # create 2D array to store number unique paths to each cell\n    paths = [[0 for _ in range(n)] for _ in range(m)]\n    # initialize first row and column to 1\n    for i in range(m):\n        paths[i][0] = 1\n    for j in range(n):\n        paths[0][j] = 1\n    # fill in rest of 2D array\n    for i in range(1, m):\n        for j in range(1, n):\n            paths[i][j] = paths[i - 1][j] + paths[i][j - 1]\n    return paths[m - 1][n - 1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # TODO: implement function\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # TODO: implement function\n    # return 0\n    # return 1\n    # return 2\n    # return 3\n    # return 4\n    # return 5\n    # return 6\n    # return 7\n    # return 8\n    # return 9\n    # return 10\n    # return 11\n    # return 12\n    # return 13\n    # return 14\n    # return 15\n    # return 16\n    # return 17\n    # return 18\n    # return 19\n    # return 20\n    # return 21\n    # return 22\n    # return 23\n    # return 24\n    # return 25\n    # return 26\n    # return 27\n    # return 28\n    # return 29\n    # return 30\n    # return 31\n    # return 32\n    # return 33\n    # return 34\n    # return 35\n    # return 36\n    # return 37\n    # return 38", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 178, in <module>\n  File \"<string>\", line 176, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n + 1):\n        if i == m:\n            transformation.append(min(100, transformation[-1] * 2))\n        elif i > m:\n            transformation.append(max(0, transformation[-1] - 10))\n        else:\n            transformation.append(min(100, transformation[-1] + 10))\n    return transformation\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email or email[0] == \"@\" or email[-1] == \"@\" or email.count(\"@\") > 1 or email.count(\".\") > 1 or email.index(\"@\") == len(email) - 1 or email.index(\"@\") == 0:\r\n        return False\r\n    else:\r\n        return True\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    return [f\"*{''.join([i]*n)}*\" for i in s] + [\"*\"*len(s*n)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions.sort(key=lambda x: (-int(x[2]), x[0]))\n    target = int(target)\n    result = []\n    for potion in potions:\n        if int(potion[2]) <= target:\n            target -= int(potion[2])\n            result.append(\" \".join(potion))\n        if target == 0:\n            break\n    if target != 0:\n        return []\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in potion_mixing\n    potions.sort(key=lambda x: (-int(x[2]), x[0]))\n  File \"<string>\", line 22, in <lambda>\n    potions.sort(key=lambda x: (-int(x[2]), x[0]))\nValueError: invalid literal for int() with base 10: 'Potion'\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # TODO: implement this function\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    # Create a dictionary to store the count of each rarity\n    rarity_count = {i: 0 for i in range(1, 6)}\n    \n    # Count the occurrences of each rarity in the player_input list\n    for rarity in player_input:\n        rarity_count[rarity] += 1\n    \n    # Check if there is a legendary item (rarity 5)\n    if rarity_count[5] > 0:\n        # If there is a legendary item, find the second most valuable item\n        for rarity in range(4, 0, -1):\n            if rarity_count[rarity] > 0:\n                return (True, rarity)\n        return (True, -1)\n    else:\n        return (False, None)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    if duration > fuel:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1\n        remaining_fuel = fuel - (duration * fuel_consumption)\n        return round(remaining_fuel, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\r\n    if total_weight <= w + e:\r\n        return True\r\n    else:\r\n        return False\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/45", "completion": "\n    # create a list to store the number of hills the prince can see from each hill\n    num_hills = []\n    \n    # iterate through each hill in the array\n    for i in range(len(arr)):\n        # initialize the count of hills the prince can see from this hill\n        count = 0\n        \n        # iterate through the hills to the left of this hill\n        for j in range(i-1, -1, -1):\n            # if the hill to the left is shorter or equal in height, increment the count\n            if arr[j] <= arr[i]:\n                count += 1\n            # if the hill to the left is taller, stop counting\n            else:\n                break\n        \n        # iterate through the hills to the right of this hill\n        for j in range(i+1, len(arr)):\n            # if the hill to the right is shorter or equal in height, increment the count\n            if arr[j] <= arr[i]:\n                count += 1\n            # if the hill to the right is taller, stop counting\n            else:\n                break\n        \n        # add the count to the list\n        num_hills.append(count)\n    \n    # return the maximum count from the list", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    def get_message(test_case):\n        message = ''\n        for word in test_case:\n            message += word[0].lower()\n        return message if message.isalpha() else 'Take cannoli.'\n\n    return [get_message(test_case) for test_case in test_cases]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        '01': 'A', '1000': 'B', '", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33\n        '01': 'A', '1000': 'B', '\n    '01': 'A', '1000': 'B', '\n                            ^\nSyntaxError: unterminated string literal (detected at line 33)\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n    'Y': '-.--', 'Z': '--..', ' ': '  '}\n    result = \"\"\n    for char in text:\n        if char.upper()", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 29\n        if char.upper()\n    if char.upper()\n                   ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    return ''.join(list_of_alphabets[i % len(list_of_alphabets)] for i in range(len(string)))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    # Sort orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize variables\n    max_orders = 0\n    current_batch = 0\n    \n    # Iterate through orders\n    for order in orders:\n        # Check if current batch can fulfill order\n        if current_batch + order <= n:\n            current_batch += order\n            max_orders += 1\n        # Check if next batch can fulfill order\n        elif current_batch + order <= 2 * n and current_batch < n:\n            current_batch = order\n            max_orders += 1\n        # If neither batch can fulfill order, break loop\n        else:\n            break\n    \n    return max_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 162, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels) - 1).upper()\n            else:\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels) - 1)\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants) - 1).upper()\n            else:\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants) - 1)\n        else:\n            transformed += char\n        if i % 2 == 0 and char == '?':\n            transformed = transformed[:-1] + '!'\n        elif i % 2 == 1 and char == '?':\n            transformed = transformed[:-1] + '!'\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    # create empty string to store encrypted message\n    encrypted_message = ''\n    # create variable to store current shift\n    current_shift = shift\n    # loop through each character in message\n    for char in message:\n        # check if character is a letter\n        if char.isalpha():\n            # check if character is upper case\n            if char.isupper():\n                # shift character by current shift\n                shifted_char = chr((ord(char) - 65 + current_shift) % 26 + 65)\n            # check if character is lower case\n            elif char.islower():\n                # shift character by current shift\n                shifted_char = chr((ord(char) - 97 + current_shift) % 26 + 97)\n            # add shifted character to encrypted message\n            encrypted_message += shifted_char\n            # increase current shift by one\n            current_shift += 1\n        # check if character is not a letter\n        else:\n            # add character to encrypted message\n            encrypted_message += char\n    # return encrypted message\n    return encrypted_message\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', \n    'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', \n    'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', \n    'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char == \" \":\n            morse_code += \" \"\n        else:\n            morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for letter in dish:\n            new_name += magic_spell[(magic_spell.index(letter) + 1) % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 135, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in magical_cafe\n            new_name += magic_spell[(magic_spell.index(letter) + 1) % len(magic_spell)]\nValueError: substring not found\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translation += vowels[vowels.index(char) + 1]\n        elif char in consonants:\n            translation += consonants[consonants.index(char) + 1]\n        else:\n            translation += '@'\n    translation = translation[0].upper() + translation[1:]\n    translation = translation.replace(' ', '@')\n    if translation[0] in vowels:\n        translation += 'xy'\n    else:\n        translation += 'yz'\n    return translation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c == ' ':\n            result.append(' ')\n        elif i % 2 == 0:\n            result.append(c.swapcase())\n        else:\n            if c.lower() in vowels:\n                result.append(vowels[(vowels.index(c.lower()) + 1) % len(vowels)].swapcase())\n            else:\n                result.append(consonants[(consonants.index(c.lower()) - 1) % len(consonants)].swapcase())\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    # Check if start and end are positive integers\n    if not (isinstance(start, int) and isinstance(end, int) and start > 0 and end > 0):\n        raise ValueError(\"Start and end must be positive integers\")\n\n    # Check if divisor is a positive integer\n    if not (isinstance(divisor, int) and divisor > 0):\n        raise ValueError(\"Divisor must be a positive integer\")\n\n    # Check if start is less than or equal to end\n    if start > end:\n        raise ValueError(\"Start must be less than or equal to end\")\n\n    # Check if divisor is a prime number\n    if not is_prime(divisor):\n        raise ValueError(\"Divisor must be a prime number\")\n\n    # Generate list of prime numbers in range [start, end]\n    primes = [num for num in range(start, end + 1) if is_prime(num)]\n\n    # Filter list of prime numbers divisible by divisor\n    result = [num for num in primes if num % divisor == 0]\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in magical_sequence\n    if not is_prime(divisor):\nNameError: name 'is_prime' is not defined\n", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    # Your code here\n    if not order:\n        return menu\n    for food in order:\n        if \"remove\" in order[food]:\n            for ingredient in order[food][\"remove\"]:\n                if ingredient in menu[food]:\n                    menu[food].remove(ingredient)\n        if \"add\" in order[food]:\n            for ingredient in order[food][\"add\"]:\n                if ingredient not in menu[food]:\n                    menu[food].append(ingredient)\n    return menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs)\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            result[customer] = 0\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n\n    sorted_arr = sorted(arr)\n    rotated_arr = arr[1:] + arr[:1]\n    if rotated_arr == sorted_arr:\n        return True\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            swapped_arr = arr[:i] + arr[j:j+1] + arr[i+1:j] + arr[i:i+1] + arr[j+1:]\n            if swapped_arr == sorted_arr:\n                return True\n\n    return False\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    # create a set of cards\n    card_set = set(cards)\n    # iterate over the cards\n    for i in range(len(cards)):\n        # check if the product of the current card and any other card equals the magic number\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                # return the indices of the two cards\n                return (i, j)\n    # if no two cards multiply to the magic number, return \"No magic today\"\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    result = ''\n    for i in s:\n        if i.isalpha():\n            if i.lower() in vowels:\n                count += 1\n            if i.isupper():\n                result += chr((ord(i) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(i) - 97 + n) % 26 + 97)\n        else:\n            result += i\n    return result, count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i in lst:\n        fairy_tales.append(\"Once upon time, kingdom far away, lived magical creature with name '{}' who was known for telling {} tales day\".format(i, sum(c.isdigit() for c in i)))\n    return fairy_tales\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n    # your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 184, in <module>\n  File \"<string>\", line 182, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    # your code here\n    if not s:\n        return ''\n    else:\n        return ''.join([cipher.get(c, c) for c in s])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for char in input_str:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            result.append(vowels[(index + 1) % len(vowels)])\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            result.append(consonants[(index + 1) % len(consonants)])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        elif char in string.punctuation:\n            if char == '?' and input_str.index(char) % 2 == 0:\n                result.append('!')\n            elif char == '?' and input_str.index(char) % 2 == 1:\n                result.append('?')\n            else:\n                result.append(char)\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in magical_string_transformer\n        elif char in string.punctuation:\nNameError: name 'string' is not defined\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * sum(lst[:i+1]))\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        p = 0\n        while n % k == 0:\n            p += n // k\n            n //= k\n        return p\n\n    return sorted([points(n, k) for n in sequence], reverse=True)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n-i-1])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(len(prices)):\r\n        for j in range(i + 1, min(i + days, len(prices))):\r\n            profit = prices[j] - prices[i]\r\n            if profit > max_profit:\r\n                max_profit = profit\r\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    # TODO: implement this function\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac = {\n        \"Aries\": (\"March 21\", \"April 19\", \"Fire\"),\n        \"Taurus\": (\"April 20\", \"May 20\", \"Earth\"),\n        \"Gemini\": (\"May 21\", \"June 20\", \"Air\"),\n        \"Cancer\": (\"June 21\", \"July 22\", \"Water\"),\n        \"Leo\": (\"July 23\", \"August 22\", \"Fire\"),\n        \"Virgo\": (\"August 23\", \"September 22\", \"Earth\"),\n        \"Lib", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 42\n        \"Lib\n    \"Lib\n    ^\nSyntaxError: unterminated string literal (detected at line 42)\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        else:\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n        path.pop()\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Check if the starting point is a monster\n    if grid[0][0] == 1:\n        return -1\n    \n    # Initialize the number of moves to 0\n    moves = 0\n    \n    # Initialize the current position to the starting point\n    current_position = (0, 0)\n    \n    # While the current position is not the princess's position\n    while current_position != coord:\n        # Check if the current position is a monster\n        if grid[current_position[0]][current_position[1]] == 1:\n            return -1\n        \n        # Check if the princess's position is out of bounds\n        if coord[0] >= len(grid) or coord[1] >= len(grid[0]):\n            return -1\n        \n        # Check if the current position is at the bottom row", "result": "timed out", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            result[planet] = round(data[0] / data[1], 2)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/89", "completion": "\n    # create a copy of the list of aliens\n    aliens_copy = aliens.copy()\n\n    # find the index of the alien at the position aimed by the ray gun\n    index = aliens_copy.index(ray)\n\n    # remove the alien at the position aimed by the ray gun\n    aliens_copy.pop(index)\n\n    # remove the alien to the left of the position aimed by the ray gun\n    if index > 0:\n        aliens_copy.pop(index - 1)\n\n    # remove the alien to the right of the position aimed by the ray gun\n    if index < len(aliens_copy) - 1:\n        aliens_copy.pop(index)\n\n    return aliens_copy\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.append(int(s[i]) * int(s[j]))\n        return combinations\n\n    return sum(get_combinations(s1)) + sum(get_combinations(s2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    # TODO: implement this function\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(spell.split(), key=len)) for spell in strings]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in get_magic_indices\n        if value % i == 0 and product_digits(value) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        return sorted([name for name, continent in humans.items() if continent in [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i - 1] + sequence[i - 2] + i\n        if is_prime(next_num):\n            sequence.append('prime')\n        else:\n            sequence.append(next_num)\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 36, in nature_sequence_generator\n        next_num = sequence[i - 1] + sequence[i - 2] + i\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    # TODO: implement function\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
