{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    location_factor = {\"Local\": 1.0, \"National\": 1.5, \"International\": 2.5}[location]\n    total_cost = base_cost * location_factor\n    for item in items:\n        if isinstance(item, str):\n            total_cost += base_cost * location_factor * 1.5\n        else:\n            total_cost += base_cost * location_factor * (1 if item <= 5 else 2)\n    return \"{:.2f}\".format(total_cost)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in calculate_shipping_cost\n    location_factor = {\"Local\": 1.0, \"National\": 1.5, \"International\": 2.5}[location]\nKeyError: 2\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    location_key = location if location in location_factor else \"Other\"\n    total_cost = 0\n    for item in items:\n        if type(item) == str:\n            item = 1\n        total_cost += 5.0\n        if item > 5.0:\n            total_cost += 10.0\n    total_cost *= location_factor[location_key]\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in calculate_shipping_cost\n    total_cost *= location_factor[location_key]\nKeyError: 'Other'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n\n    return encrypted_words\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int) -> List[str]:\n        if index == len(s):\n            return ['']\n        result = []\n        for next_string in helper(s, index + 1):\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if ord(c) - ord('a') + 1 == int(s[index]):\n                    result.append(c + next_string)\n        return result\n    return helper(input_string, 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    count = 1\n    max_height = candles[0]\n    for candle in candles[1:]:\n        if candle > max_height:\n            count += 1\n            max_height = candle\n    return count\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = len(matrix), len(matrix[0])\n    row_index, col_index = 0, 0\n    going_down = True\n\n    while len(result) < row * col:\n        result.append(matrix[row_index][col_index])\n        if going_down:\n            if col_index < col - 1:\n                col_index += 1\n            else:\n                going_down = False\n                row_index += 1\n            if row_index < row and col_index < col:\n                continue\n        if not going_down:\n            if col_index > 0:\n                col_index -= 1\n            else:\n                going_down = True\n                row_index += 1\n            if row_index < row and col_index < col:\n                continue\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n\n    if not (0 <= x < rows and 0", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37\n    if not (0 <= x < rows and 0\n    if not (0 <= x < rows and 0\n           ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\r\n\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    canvas_list = list(canvas)\n    painter_pos = [i for i, x in enumerate(canvas_list) if x == 'P']\n    if len(painter_pos) > 1 or len(painter_pos) == 0:\n        return 'Invalid canvas'\n    else:\n        painter_pos = painter_pos[0]\n        canvas_list[painter_pos] = '*'\n        while True:\n            if painter_pos > 0 and canvas_list[painter_pos-1] == '-':\n                canvas_list[painter_pos-1] = '*'\n                painter_pos -= 1\n            elif painter_pos < len(canvas_list)-1 and canvas_list[painter_pos+1] == '-':\n                canvas_list[painter_pos+1] = '*'\n                painter_pos += 1\n            else:\n                break\n    return ''.join(canvas_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.lower()\n    string = string.translate(str.maketrans('', '', st.punctuation))\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = animal_string.split()\r\n    animal_counts = []\r\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\r\n\r\n    for sound in animal_sounds:\r\n        animal = sound[0]\r\n        if animal_dict[animal] < 2:\r\n            animal_counts.append(sound.count('|'))\r\n            animal_dict[animal] += 1\r\n        if sum(animal_dict.values()) == 5:\r\n            break\r\n\r\n    return animal_counts\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 30, in count_animals\n        if animal_dict[animal] < 2:\r\nKeyError: 'K'\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    fruit_str = \", \".join(fruits)\n    return f\"Oh, those {fruit_str} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    rarest_elements = [k for k, v in count_dict.items() if v == min(count_dict.values())]\n    return rarest_elements[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n    return alias.upper() if name.isupper() else alias\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n\n    if sorted(value_counts.values()) == [1, 4]:\n        score = 4\n    elif sorted(value_counts.values()) == [2, 3]:\n        score = 6\n    elif sorted(value_counts.values()) == [1, 1, 3]:\n        score = 3\n    elif sorted(value_counts.values()) == [1, 1, 1, 2]:\n        score = 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return sum(fib_seq)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(magical_seven(n-1)) + '0' + str(7 * int(str(magical_seven(n-1))[0]) ))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    vampires = []\n    humans = []\n\n    # find vampires and humans positions\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    # check if humans are in same row or column as vampires\n    danger_humans = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                danger_humans += 1\n                break\n\n    return danger_humans\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n\n    result = []\n    for i in range(1, n + 1):\n        result.append(\",\".join(str(j) for j in range(1, i + 1)))\n\n    for i in range(n - 1, 0, -1):\n        result.append(\",\".join(str(j) for j in range(1, i)))\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def check_all_directions(word):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    if check_word(word, row, col, direction):\n                        return True\n        return False\n\n    return all(check_all_directions(word) for word in words)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/22", "completion": "\n    # calculate distance traveled in km\n    distance = t * v\n    # convert to light years\n    distance_in_light_years = distance / 9.461e12\n    return distance_in_light_years\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 127, in <module>\n  File \"<string>\", line 125, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in prime_cipher\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n  File \"<string>\", line 25, in <genexpr>\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '&', 'h': '#',\n        'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':',\n        'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[',\n        'y': ']', 'z': '|'\n    }\n\n    return \"\".join(alien_dict[ch] for ch in english_word)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    # split text into sentences\n    sentences = text.split('. ')\n    # count frequency of word in each sentence\n    freq_count = {sentence: sentence.split().count(word) for sentence in sentences}\n    # find sentence with max frequency\n    max_freq_sentence = max(freq_count, key=freq_count.get)\n    # return frequency and sentence\n    return (freq_count[max_freq_sentence], max_freq_sentence) if freq_count[max_freq_sentence] > 0 else (0, \"\")\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # define directions\n    directions = [\"up\", \"right\", \"down\", \"left\"]\n    # define start and end points\n    start_point = start\n    end_point = end\n    # define maze size\n    maze_size = len(maze)\n    # define path\n    path = []\n    # check if start and end points are the same\n    if start_point == end_point:\n        return path\n    # define current point\n    current_point = start_point\n    # define current direction\n    current_direction = 1\n    # define previous point\n    previous_point = None\n    # define previous direction\n    previous_direction = None\n    # define visited points\n    visited_points = []\n    # define current path\n    current_", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 73, in <module>\n  File \"<string>\", line 71, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 44, in pathfinder\n    current_\nNameError: name 'current_' is not defined\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 160000:\n        return (taxable_income - 125000) * 0.25 + 2500\n    else:\n        return (taxable_income - 160000) * 0.30 + 6000\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n    return sorted(list(palindromes))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Breadth-first search (BFS)\n    queue = [(start, [start])]\n    visited = set()\n\n    while queue:\n        (x, y), path = queue.pop(0)\n        if (x, y) == end:\n            return path\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0\n    if 0 <= nx < len(maze) and 0 <= ny < len(maze[0\n                                                 ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    # Initialize a matrix to store the number of paths to reach each cell\n    paths = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # There is only one way to reach a cell in the first column (going down)\n    for i in range(m+1):\n        paths[i][0] = 1\n\n    # There is only one way to reach a cell in the first row (going right)\n    for j in range(n+1):\n        paths[0][j] = 1\n\n    # For each cell in the grid, calculate the number of paths to reach it\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            paths[i][j] = paths[i-1][j] + paths[i][j-1]\n\n    return paths[m][n]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    # Initialize the new playlist\n    new_playlist = playlist[:]\n\n    # Iterate over the playlist\n    for i in range(len(playlist)):\n        # If the song title contains \"Rock\", skip the swap operation\n        if \"Rock\" in playlist[i]:\n            continue\n\n        # Calculate the swap index\n        swap_index = (seed % len(playlist))\n\n        # Swap the songs\n        new_playlist[i], new_playlist[swap_index] = new_playlist[swap_index], new_playlist[i]\n\n        # Update the seed\n       ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\r\n    dp[0] = 1\r\n    for i in range(1, n + 1):\r\n        dp[i] += dp[i - 1]\r\n        for magic_stone in magic_stones:\r\n            if i >= magic_stone:\r\n                dp[i] += dp[i - magic_stone]\r\n    return dp[n]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation[i] = min(100, transformation[i - 1] + 10)\n    transformation[m - 1] = min(100, transformation[m - 1] * 2)\n    if m < n:\n        for i in range(m, n):\n            transformation[i] = max(0, transformation[i - 1] - 10)\n    return transformation\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1:\r\n        return False\r\n    if email[0] == \"@\" or email[-1] == \".\" or email.index(\"@\") == 0 or email.index(\".\") == len(email) - 1:\r\n        return False\r\n    return True\r\n\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transform_vowels = \"eioua\"\n    transform_consonants = \"cdfghjklmnpqrstvwxyzb\"\n    result = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if char.isupper():\n                result += transform_vowels[index].upper()\n            else:\n                result += transform_vowels[index]\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            if char.isupper():\n                result += transform_consonants[index].upper()\n            else:\n                result += transform_consonants[index]\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    for emoticon, emoji in emoticons_dict.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    # create a list to store the ASCII art\n    art = []\n\n    # create the top and bottom of the frame\n    frame = \"*\" + s * n + \"*\"\n    art.append(frame)\n\n    # create the sides of the frame\n    for _ in range(n):\n        side = \"*\" + s + \"*\"\n        art.append(side)\n\n    # add the bottom of the frame\n    art.append(frame)\n\n    return art\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0], int(potion.split()[1])) for potion in potions]\n    potions.sort(key=lambda x: (x[1], x[0]))\n    left, right = 0, len(potions) - 1\n    while left < right:\n        curr_sum = potions[left][1] + potions[right][1]\n        if curr_sum == target:\n            return [potions[left", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 27\n            return [potions[left\n    return [potions[left\n                   ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to reach each cell to infinity\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    # The energy required to reach the safe cell (0,0) is 0\n    min_energy[0][0] = arr[0][0]\n\n    # Iterate over the cells in the array\n    for i in range(len(arr)):\n        for j", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 41\n        for j\n    for j\n         ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    max_rarity = max(player_input)\r\n    if max_rarity == 5:\r\n        player_input.remove(5)\r\n        if len(player_input) == 0:\r\n            return (True, -1)\r\n        else:\r\n            return (True, max(player_input))\r\n    else:\r\n        return (False, None)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 141, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in find_legendary_item\n    max_rarity = max(player_input)\r\nValueError: max() arg is an empty sequence\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    # calculate duration of trip\n    duration = distance / speed\n\n    # check if spaceship has enough fuel to reach planet\n    if fuel < duration:\n        return 'Insufficient fuel'\n\n    # calculate fuel consumption\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n\n    # calculate remaining fuel\n    remaining_fuel = fuel - fuel_consumption\n\n    # return remaining fuel rounded to 2 decimal points\n    return round(remaining_fuel, 2)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e * 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n\n    count = 0\n    for i in range(1, n-1):\n        count += min(left_max[i], right_max[i]) - arr[i]\n\n    return count+n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    # Your code here\n    result = []\n    for test in test_cases:\n        message = \"\"\n        for word in test:\n            for char in word:\n                if char.isalpha():\n                    message += char\n                    break\n        if message == \"\":\n            result.append(\"Take cannoli.\")\n        else:\n            result.append(message.lower())\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient in recipe:\n        if ingredient not in available or recipe[ingredient] > available[ingredient]:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n            if inventory[item] <= 0:\n                del inventory[item]\n        else:\n            if quantity > 0:\n                inventory[item] = quantity\n    return inventory\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P':", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22\n    morse_code = {\n    morse_code = {\n                 ^\nSyntaxError: '{' was never closed\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    total_orders = sum(orders)\n    return total_orders // (n * m)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            transformed_s += '!' if i % 2 == 0 else '?'\n        else:\n            transformed_s += char\n\n    return transformed_s\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift_count = 1\n    for char in message:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            new_char = chr((ord(char) - ascii_offset + shift_count) % 26 + ascii_offset)\n            result += new_char\n            shift_count += 1\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',\n        'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',\n        'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22\n        'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '\n    'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '\n                                                                                 ^\nSyntaxError: unterminated string literal (detected at line 22)\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        spell_index = 0\n        while len(transformed_dish) < len(dish):\n            transformed_dish += magic_spell[spell_index]\n            spell_index = (spell_index + 1) % len(magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alienspeak = ''\n    for word in earth_phrase.split():\n        for char in word:\n            if char in vowels:\n                alienspeak += vowels[(vowels.index(char)+1)%5]\n            else:\n                alienspeak += consonants[(consonants.index(char)+1)%26]\n        alienspeak += '@' if word != earth_phrase.split()[-1] else ''\n    alienspeak = alienspeak.lower()\n    for word in earth_phrase.split():\n        if word[0] in vowels:\n            alienspeak = alienspeak.replace(word[0], word[0].upper(), 1) + 'xy'\n        else:\n            alienspeak = alienspeak.replace(word[0", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 40\n            alienspeak = alienspeak.replace(word[0\n    alienspeak = alienspeak.replace(word[0\n                                        ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    # sorting dictionary by values in descending order and then by keys in ascending order\n    return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize a list to keep track of the ants' positions\n    ants_positions = [0] * path_length\n\n    # Mark the sugar locations on the path\n    for sugar_location in sugar_locations:\n        ants_positions[sugar_location] = 1\n\n    # Move the ants and mark the sugar locations they pass\n    for ant_position, direction in ant_positions:\n        while 0 <= ant_position < path_length:\n            if ants_positions[ant_position] == 1:\n                ants_positions[ant_position] = 0\n                break\n            ant_position = ant_position + 1 if direction == \"right\" else ant_position - 1", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    \n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                char = char.swapcase()\n                if char in vowels:\n                    char = vowels[(vowels.index(char) + 1) % 5]\n                else:\n                    char = consonants[(consonants.index(char) - 1) % 21]\n            else:\n                char = char.swapcase()\n                if char in vowels:\n                    char = vowels[(vowels.index(char) - 1) % 5]\n                else:\n                    char = consonants[(consonants.index(char) + 1) % 21]\n        transformed_string += char\n    \n    return transformed_string\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in transform_string\n                    char = consonants[(consonants.index(char) + 1) % 21]\nValueError: substring not found\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\r\n    while p > 0:\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n        pyramid.append(p)\r\n    return pyramid[:-1]\r\n\r", "result": "passed", "passed": true}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    magical_numbers = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            magical_numbers.append(i)\n\n    return magical_numbers\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    else:\n        for food in order:\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    menu[food].append(ingredient)\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in menu[food]:\n                        menu[food].remove(ingredient)\n    return menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def are_anagrams(n1, n2):\n        return sorted(str(n1)) == sorted(str(n2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagrams = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagrams.append((primes[i], primes[j]))\n\n    return anagrams\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        meals = meals.get(customer, [])\n        total_calories = sum(meal['calories'] for meal in meals)\n        result[customer] = total_calories\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in meal_calculator\n        meals = meals.get(customer, [])\nAttributeError: 'list' object has no attribute 'get'\n", "passed": false}
{"task_id": "EvoEval/68", "completion": "\n    # Sorcerer can use 'Swap' spell to bring the smallest element to the first position.\n    # Then he can use 'Rotate' spell to bring the second smallest element to the second position.\n    # This way, he can bring all elements to their correct position.\n    # If the array is already sorted, he can use 'Swap' spell to bring the smallest element to the first position.\n    # Then he can use 'Rotate' spell to bring the second smallest element to the second position.\n    # This way, he can bring all elements to their correct position.\n    # If the array is already sorted, he can use 'Swap' spell to bring the smallest element to the first position.\n    # Then he can use 'Rot", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\r\n        return False\r\n    for i in range(len(path) - 1):\r\n        if path[i+1] not in planets[path[i]]:\r\n            return False\r\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiouAEIOU'\n    encrypted_s = ''\n    count_vowels = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_s += encrypted_char\n            if encrypted_char in vowels:\n                count_vowels += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, count_vowels)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    return [f\"Once upon time, kingdom far away, lived magical creature with name '{i}' who was known for telling {sum(c.isdigit() for c in i)} tales day\" for i in lst]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\r\n    trips = 0\r\n    rows = len(grid)\r\n    cols = len(grid[0])\r\n    chests = sum(sum(row) for row in grid)\r\n\r\n    # While there are still chests to collect\r\n    while chests > 0:\r\n        # Calculate the number of trips needed to collect all chests in the current row\r\n        trips += math.ceil(chests / bag_capacity)\r\n\r\n        # Remove the chests from the current row\r\n        chests -= min(chests, bag_capacity)\r\n\r\n       ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \".,;: \"\n    transformed_str = \"\"\n\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            transformed_str += chr((ord(input_str[i]) - 97 + 1) % 26 + 97) if input_str[i].islower() else chr((ord(input_str[i]) - 65 + 1) % 26 + 65)\n        elif input_str[i] in conson", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 31\n        elif input_str[i] in conson\n    elif input_str[i] in conson\n                               ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * lst[i])\n    return pyramid\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    sequence.sort(reverse=True)\n    points = [0] * len(sequence)\n\n    for i in range(len(sequence)):\n        while sequence[i] % k == 0:\n            sequence[i] /= k\n            for j in range(len(sequence)):\n                if sequence[j] % sequence[i] == 0:\n                    points[j] += 1\n\n    return points\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days == 0:\r\n        return 0\r\n\r\n    max_profit = 0\r\n    min_price = prices[0]\r\n\r\n    for i in range(1, days + 1):\r\n        max_profit = max(max_profit, prices[i] - min_price)\r\n        min_price = min(min_price, prices[i])\r\n\r\n    return max_profit\n\nPYTHON SOLUTION:\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 38\nPYTHON SOLUTION:\n    PYTHON SOLUTION:\n           ^^^^^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    # define the directions\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    # find the start position\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start = (i", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 38\n                start = (i\n    start = (i\n            ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    for i in range(1, len(word_list)):\n        j = 0\n        while j < len(word_list[i-1]) and j < len(word_list[i]):\n            if alien_dict[word_list[i-1][j]] > alien_dict[word_list[i][j]]:\n                return \"INCORRECT\"\n            elif alien_dict[word_list[i-1][j]] < alien_dict[word_list[i][j]]:\n                break\n            j += 1\n        if j == len(word_list[i]) and j == len(word_list[i-", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 28\n        if j == len(word_list[i]) and j == len(word_list[i-\n    if j == len(word_list[i]) and j == len(word_list[i-\n                                                    ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n   ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [node]]\n        return sum([dfs(v, path + [k]) for k, v in node.items()], [])\n\n    return dfs(tree, [])\n\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')]*cols for _ in range(rows)]\n    dp[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j]+1)\n            if j > ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 31\n            if j > \n    if j > \n           ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    result = ''\n    while arr:\n        # read top row\n        result += ''.join(arr.pop(0))\n        # read right column\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        # read bottom row\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        # read left column\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if len(data) == 2 and data[0] is not None and data[1] is not None and data[0] >= 0 and data[1] > 0:\n            result[planet] = round(data[0] / data[1], 2)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    # Initialize an empty list to store the remaining aliens' positions\n    remaining_aliens = []\n\n    # Iterate over the aliens' positions\n    for alien in aliens:\n        # If the alien's position is not equal to the ray gun's aimed position,\n        # and it's not adjacent to the ray gun's aimed position,\n        # add it to the list of remaining aliens' positions\n        if alien != ray and abs(alien - ray) != 1:\n            remaining_aliens.append(alien)\n\n    # Return the list of remaining aliens' positions\n    return remaining_aliens\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # convert string to integer\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # initialize result\n    result = 0\n\n    # convert numbers to list of digits\n    digits1 = [int(d) for d in str(num1)]\n    digits2 = [int(d) for d in str(num2)]\n\n    # iterate over all combinations of digits\n    for d1 in digits1:\n        for d2 in digits2:\n            # add product of digits to result\n            result += d1 * d2\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action in spaceship_data:\n        if action[0] == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action[0] == 'Move' and status == 'In Space':\n            continue\n        elif action[0] == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    # Initialize variables\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    \n    # For each layer\n    for i in range(n):\n        # Calculate width of the layer\n        width = 2 * i + 1\n        # Calculate the number of characters in the layer\n        num_chars = width * width\n        # Calculate the number of characters in the alphabet that we need to use\n        num_alphabet_chars = num_chars // len(alphabet)\n        # Calculate the remaining characters that we need to use\n        remaining_chars = num_chars % len(alphabet)\n        # Calculate the characters that we need to use\n        chars = alphabet[:num_alphabet_chars] * width\n        # If there are remaining characters, add them to the end of the characters\n        if remaining_chars > 0:\n            chars += alphabet[:remaining_chars]\n        # Add", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the result\n    result = ''\n\n    # Iterate over the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet to use\n            alpha = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position\n            pos = (alpha.index(char) + n_values[i % len(n_values)]) % 26\n\n            # Add the new character to the result\n            result += alpha[pos]\n        else:\n            # Add the character to the result as is\n            result += char\n\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(), key=lambda word: (len(word), spell.index(word))))\n        for spell in strings\n    ]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    # Check if matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate sum of diagonals\n    sum_first_diagonal = sum(m[i][i] for i in range(len(m)))\n    sum_second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return absolute difference\n    return abs(sum_first_diagonal - sum_second_diagonal)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_digits(n):\n        if n < 0:\n            n = -n\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] == i or lst[i] == -i:\n            magic_indices.append(i)\n        elif lst[i] % i == 0 and product_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return sorted(magic_indices)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    order = {\"Asia\": 1, \"Africa\": 2, \"Europe\": 3, \"North America\": 4, \"South America\": 5}\n    result = []\n    for name, place in humans.items():\n        if place in order:\n            result.append((name, order[place]))\n        else:\n            return []\n    result.sort(key=lambda x: x[1])\n    return [name for name, _ in result]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n+1))\n    current_position = 0\n    for round in rounds:\n        current_position += music * round\n        while current_position >= len(players):\n            current_position -= len(players)\n        players.pop(current_position)\n    return players\n\n", "result": "passed", "passed": true}
