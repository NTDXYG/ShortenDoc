{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    factor = 1\n    for item in items:\n        if isinstance(item, str):\n            factor = 1.5\n            item = 1\n        if item > 5:\n            total_cost += 10\n        total_cost += 5 * item\n    if location == 'National':\n        factor = 1.5\n    elif location == 'International':\n        factor = 2.5\n    return str(round(total_cost * factor, 2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        weight = float(item) if isinstance(item, (int, float)) else 1\n        cost = 5.0 + (10.0 if weight > 5 else 0)\n        total_cost += cost\n    \n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    \n    return round(total_cost, 2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(char) for char in key)\n        result = []\n        for char in word:\n            if char.isalpha():\n                shift = key % 26\n                if char.islower():\n                    result.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a')))\n                else:\n                    result.append(chr((ord(char) - ord('A') + shift) % 26 + ord('A')))\n            else:\n                result.append(char)\n        return ''.join(result)\n\n    return [caesar_cipher(word, key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    \n    lit_candles = 1\n    max_height = candles[0]\n    \n    for height in candles[1:]:\n        if height > max_height:\n            lit_candles += 1\n            max_height = height\n            \n    return lit_candles\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row > 0 and col < len(matrix[0]) - 1:\n                row -= 1\n                col += 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37\n    if grid[x][\n    if grid[x][\n              ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    result = []\r\n    count = {}\r\n    for animal in animal_string.split():\r\n        if animal[0] in animals and len(result) < 5:\r\n            if animal[0] not in count or count[animal[0]] < 2:\r\n                result.append(animal.count('|'))\r\n                count[animal[0]] = count.get(animal[0], 0) + 1\r\n    return result\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, those {fruits[0]} {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, those {fruits[0]} {fruits[1]} {fruits[2]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_occurrence = Counter(flux_values).most_common(1)[0][1]\n    sum_flux = sum(flux_values)\n    return sum_flux * max_occurrence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    rarest_elem = min(count_dict, key=count_dict.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # 1 is the sum of first two numbers\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    num = 7\n    while True:\n        if sum_of_digits(num) == 7 and num % 7 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                for v in vampires:\n                    if i == v[0] or j == v[1]:\n                        danger += 1\n    return danger\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n\n    return pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9461000000\n    return t * v / light_year\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 121, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in prime_cipher\n            result += str(primes[ord(char) - ord('a')])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_dict[letter]\n    return translated_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    max_frequency = 0\r\n    max_sentence = \"\"\r\n    for sentence in sentences:\r\n        words = sentence.split()\r\n        frequency = words.count(word)\r\n        if frequency > max_frequency:\r\n            max_frequency = frequency\r\n            max_sentence = sentence\r\n    return max_frequency, max_sentence if max_frequency > 0 else (0, \"\")\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 51, in <module>\n  File \"<string>\", line 49, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 39, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n\n    if taxable_income > 25000:\n        tax += (taxable_income - 25000) * 0.15\n        taxable_income = 25000\n\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.1\n\n    return tax\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\r\n    ways = [0] * (n + 1)\r\n    # Base case: There is one way to reach the first step\r\n    ways[1] = 1\r\n    # Iterate over each step from 2 to n\r\n    for step in range(2, n + 1):\r\n        # Iterate over each magic stone\r\n        for stone in magic_stones:\r\n            # If the magic stone can be used to reach the current step\r\n            if step - stone >= 0:\r\n                # Add the number of ways to reach the previous step to the current step\r\n                ways[step] += ways[step - stone]\r\n    # Return the number of ways to reach the top step\r\n    return ways[n]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0]\n    for i in range(1, n):\n        if i < m:\n            transformation_percentages.append(transformation_percentages[-1] + 10)\n        elif i == m:\n            transformation_percentages.append(min(transformation_percentages[-1] * 2, 100))\n        else:\n            transformation_percentages.append(transformation_percentages[-1] - 10)\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1 or email[0] == \"@\" or email[-1] == \"@\" or email.index(\"@\") == email.rindex(\"@\"):\r\n        return False\r\n    else:\r\n        return True\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_map = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    consonant_map = {c: (consonants[(consonants.index(c) + 1) % len(consonants)]) for c in consonants}\n    result = ''\n\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowel_map[char.lower()].upper()\n            else:\n                result += vowel_map[char.lower()]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonant_map[char.lower()].upper()\n            else:\n                result += consonant_map[char.lower()]\n        else:\n            result += char\n\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons_dict.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    return \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n * len(s)) + \"*\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    legendary_item = False\r\n    second_most_valuable = None\r\n    rarity_count = [0] * 6\r\n    for rarity in player_input:\r\n        rarity_count[rarity] += 1\r\n        if rarity == 5:\r\n            legendary_item = True\r\n    if legendary_item:\r\n        second_most_valuable = max(range(1, 5), key=lambda x: rarity_count[x])\r\n    return legendary_item, second_most_valuable\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate fuel consumption\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    # Calculate duration of trip\n    duration = distance / speed\n    # Check if fuel is sufficient for trip\n    if fuel >= duration:\n        # Calculate remaining fuel\n        remaining_fuel = fuel - duration\n        # Return remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel'\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e * len(q) // 2\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = \"\"\n        for word in test_case:\n            secret_message += word[0].lower()\n        result.append(secret_message)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    return all(recipe.get(ingredient, 0) <= available.get(ingredient, 0) for ingredient in recipe)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24\n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-\n    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-\n                                                                     ^\nSyntaxError: unterminated string literal (detected at line 24)\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    result = ''\n    for i, char in enumerate(string):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_list.append((i, j))\n    return star_list\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', \n        'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', \n        'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', \n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19\n    morse_code_dict = {\n    morse_code_dict = {\n                      ^\nSyntaxError: '{' was never closed\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split(' '):\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                if letter == 'z':\n                    new_word += 'b'\n                else:\n                    new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            else:\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 154, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 44, in interstellar_translator\n        translated_phrase += new\nNameError: name 'new' is not defined\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n\n    # Initialize variables\n    happy_ants_count = 0\n    sugar_collected = [False] * path_length\n\n    # Mark sugar locations\n    for loc in sugar_locations:\n        sugar_collected[loc] = True\n\n    # Iterate through ant positions\n    for ant in ant_positions:\n        ant_pos, ant_dir = ant\n\n        # Check if ant is at a sugar location\n        if sugar_collected[ant_pos]:\n            happy_ants_count += 1\n\n        # Move ant in the specified direction\n        if ant_dir == \"right\":\n            ant_pos += 1\n        else:\n            ant_pos -= 1\n\n        # Check if", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    next_vowel = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a'}\n    prev_consonant = {c: consonants[(i - 1) % 21] for i, c in enumerate(consonants + consonants)}\n    \n    result = []\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 1:\n                char = char.swapcase()\n            if char.lower() in vowels:\n                char = next_vowel[char.lower()].upper() if char.isupper() else next_vowel[char.lower()]\n            else:\n                char = prev_consonant[char.lower()].upper() if char.isupper() else prev_consonant[char.lower()]\n        result.append(char)\n    \n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\r\n    while pyramid[-1] > 0:\r\n        if pyramid[-1] % 2 == 0:\r\n            pyramid.append(pyramid[-1] - 2)\r\n        else:\r\n            pyramid.append(pyramid[-1] - 3)\r\n    return pyramid[:-1]  # remove the last element which is 0 or negative number\r\n\r", "result": "passed", "passed": true}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n\n    return False\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 44, in <module>\n  File \"<string>\", line 42, in check\n        _check_product(*inp, candidate(*inp), exp)\n  File \"<string>\", line 33, in _check_product\n        assert isinstance(solution, tuple)\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\r\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_s += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, vowel_count)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        result.append(f\"Once upon time, kingdom far away, lived magical creature with name '{i}' who was known for telling {count} tales day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Your code here\r\n    def dfs(i, j, bag_capacity, grid, visited):\r\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or visited[i][j] or grid[i][j] == 0:\r\n            return 0\r\n        visited[i][j] = True\r\n        if bag_capacity == 0:\r\n            return 1\r\n        return dfs(i+1, j, bag_capacity-1, grid, visited) + dfs(i-1, j, bag_capacity-1, grid, visited) + dfs(i, j+1, bag_capacity-1, grid,", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 40\n        return dfs(i+1, j, bag_capacity-1, grid, visited) + dfs(i-1, j, bag_capacity-1, grid, visited) + dfs(i, j+1, bag_capacity-1, grid,\n    return dfs(i+1, j, bag_capacity-1, grid, visited) + dfs(i-1, j, bag_capacity-1, grid, visited) + dfs(i, j+1, bag_capacity-1, grid,\n                                                                                                        ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    # Your code here\n    if not s:\n        return ''\n    else:\n        return ''.join([cipher.get(i, i) for i in s])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    \n    pyramid = []\n    total_sum = sum(lst)\n    \n    for i in range(len(lst)):\n        level = '#' * lst[i]\n        pyramid.append(level)\n    \n    return pyramid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20\n        result.append(\n    result.append(\n                 ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(days):\r\n        for j in range(i+1, days):\r\n            if prices[j] > prices[i]:\r\n                max_profit = max(max_profit, prices[j] - prices[i])\r\n    return max_profit\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35\n    zodiac_signs = {\n    zodiac_signs = {\n                   ^\nSyntaxError: '{' was never closed\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    return sorted(movies_dict, key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 135, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in sort_movies_by_ratings_and_release_date\n    return sorted(movies_dict, key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\n  File \"<string>\", line 24, in <lambda>\n    return sorted(movies_dict, key=lambda x: (-movies_dict[x][0], -movies_dict[x][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    \n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            result[planet] = round(features[0] / features[1], 2)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/89", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Convert strings to lists of digits\n    digits1 = list(map(int, s1))\n    digits2 = list(map(int, s2))\n\n    # Generate all unique combinations of digits from both lists\n    combinations = [(d1, d2) for d1 in digits1 for d2 in digits2]\n\n    # Calculate the sum of all unique combinations\n    product = sum(d1 + d2 for d1, d2 in combinations)\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_digits(n):\n        n = abs(n)\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if lst[i] % i == 0 and product_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]:\n        for human, home in humans.items():\n            if home == continent and human not in encountered:\n                encountered.append(human)\n    return encountered\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/98", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
