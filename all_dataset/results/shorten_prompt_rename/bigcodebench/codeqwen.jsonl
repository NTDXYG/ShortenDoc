{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download all files from specific directory on ftp server using wget a subprocess. args: ftp_server (str): ftp server address. default is 'ftp.dlptest.com'. ftp_user (str): the ftp server username. default is 'dlpuser'. ftp_password (str): the ftp server password. default is 'kytx9g7z3rgxwbeu'. ftp_dir (str): the directory path on the ftp server from which files need downloaded. default is '/ftp/test'. returns: list[str]: a list filenames were attempted to be downloaded from the ftp server. raises: exception: - if there is a failure in connecting to the ftp server. outputs the message \"failed to connect to ftp server {ftp_server}: {str(e)}\" - if there is a failure in logging into the ftp server. outputs the message \"failed to log into ftp server {ftp_server} with user {ftp_user}: {str(e)}\" - if there is a failure in changing to the specified directory. outputs the message \"failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\" requirements: - subprocess - ftplib - example: >>> task_func() ['file1.txt', 'file2.jpg',]\n    \"\"\"\n    attempted_downloads = []\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(user=ftp_user, passwd=ftp_password)\n        ftp.cwd(ftp_dir)\n        files = ftp.nlst()\n        for file in files:\n            try:\n                ftp.retrbinary('RETR ' + file, open(file, 'wb').write)\n                attempted_downloads.append(file)\n            except Exception as e:\n                print(f\"failed to download file {file} from ftp server {ftp_server}: {str(e)}\")\n        ftp.quit()\n    except Exception as e:\n        print(f\"failed to connect to ftp server {ftp_server}: {str(e)}\")\n    return attempted_downloads\n"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute list shell commands read from a csv file save outputs separate files. each command's output written a unique file in the specified output directory. if a command fails, the error message along with the exit code is appended to the respective output file. parameters: - commands_file_path (str): path to the csv file containing shell commands in the first column. the file should not have headers. - output_dir_path (str): path where the outputs of the commands will saved. if the directory does not exist, will be created. requirements: - subprocess - csv - os raises: - filenotfounderror: if the commands_file_path does not exist. returns: - list of str: a list of paths to the output files created in the output directory, each named as 'command_x_output.txt', where x is the command index. if a command execution fails, the output file will contain a descriptive error message and the exit code. example: >>> task_func(\"commands.csv\", \"/path/to/output_directory\") ['/path/to/output_directory/command_1_output.txt', '/path/to/output_directory/command_2_output.txt', ...]\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"The file {commands_file_path} does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    output_file_paths = []\n\n    with open(commands_file_path, 'r') as file:\n        reader = csv.reader(file)\n        for index, row in enumerate(reader):\n            command = row[0]\n            output_file_path = os.path.join(output_dir_path, f\"command_{index+1}_output.txt\")\n            try:\n                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(result.stdout)\n            except subprocess.CalledProcessError as e:\n                with open(output_file_path, 'w') as output_file:\n                    output_file.write(f\"Error: {e.stderr}\\nExit code: {e.returncode}\")\n            output_file_paths.append(output_file_path)\n\n    return output_file_paths\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if process based on its name. if it is not running, start it using process name as a command. if it is running, the process restart by executing the process name as a command. parameters: - process_name (str): the name the process to check and manage. this should be executable as a command. returns: - str: a message indicating the action taken: - \"process not found. starting <process_name>.\" - \"process found. restarting <process_name>.\" requirements: - subprocess - psutil - time example: >>> task_func('notepad') \"process not found. starting notepad.\" >>> task_func('notepad') \"process found. restarting notepad.\"\n    \"\"\"\n    processes = [p for p in psutil.process_iter(['name']) if process_name in p.info['name']]\n    if not processes:\n        subprocess.Popen([process_name])\n        return f\"process not found. starting {process_name}.\"\n    else:\n        for proc in processes:\n            proc.terminate()\n            time.sleep(1)\n            if proc.is_running():\n                proc.kill()\n        subprocess.Popen([process_name])\n        return f\"process found. restarting {process_name}.\"\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including subdirectories) located the specified directory and returns the path to the created zip file. parameters: directory (str): the directory path containing the files to zipped. returns: str: the path to the generated zip file. returns none if the directory does not contain files. raises: filenotfounderror: if the specified directory does not exist requirements: - os - glob - zipfile notes: - the zip name always 'files.zip' example: >>> path = task_func('/path/to/files') >>> isinstance(path, str) true\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    files = glob.glob(os.path.join(directory, '*'))\n    if not files:\n        return None\n\n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for file in files:\n            zipf.write(file, os.path.basename(file))\n\n    return zip_path\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing urls plot it. parameters: - text (str): text analyze. returns: wordcloud object: the generated word cloud. raises: valueerror(\"no words available to generate a word cloud after removing urls.\"): if no words available to generate a word cloud after removing urls. requirements: - re - wordcloud.wordcloud - matplotlib.pyplot example: >>> print(task_func('visit https://www.python.org for more info. python great. i love python.').words_) {'python': 1.0, 'visit': 0.5, 'info': 0.5, 'great': 0.5, 'love': 0.5} >>> print(task_func('check out this link: http://www.example.com. machine learning is fascinating.').words_) {'check': 1.0, 'link': 1.0, 'machine': 1.0, 'learning': 1.0, 'fascinating': 1.0}\n    \"\"\"\n    # remove urls\n    text = re.sub(r'http\\S+|www.\\S+', '', text, flags=re.MULTILINE)\n    # generate word cloud\n    wordcloud = WordCloud().generate(text)\n    # plot word cloud\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()\n    return wordcloud\n\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train a random forest classifier perform the classification of the rows in a dataframe with respect to the column of interest the bar plot of feature importance of each column in the dataframe the xlabel of the bar plot should be 'feature', the ylabel 'features' and the title 'visualizing features'. - sort the feature importances in descending order. - use the feature importances on the x-axis and the feature names on the y-axis. parameters: - df (pandas.dataframe) : dataframe containing the data to classify. - target_column (str) : name of the target column. returns: - sklearn.model.randomforestclassifier : random forest classifier trained on the data. - matplotlib.axes.axes: the axes of data. requirements: - pandas - sklearn.ensemble - seaborn - matplotlib.pyplot example >>> import pandas as pd >>> data = pd.dataframe({\"x\" : [-1, 3, 5, -4, 7, 2], \"label\": [0, 1, 1, 0, 1, 1]}) >>> model, ax = task_func(data, \"label\") >>> print(data.head()) x -1 >>> print(model) randomforestclassifier(random_state=42)\n    \"\"\"\n    # Train the random forest classifier\n    model = RandomForestClassifier(random_state=42)\n    model.fit(df.drop(target_column, axis=1), df[target_column])\n\n    # Get the feature importances\n    feature_importances = model.feature_importances_\n\n    # Create a dataframe with the feature names and their importances\n    feature_importance_df = pd.DataFrame({\"feature\": df.drop(target_column, axis=1).columns, \"importance\": feature_importances})\n\n    # Sort the dataframe by importance in descending order\n    feature_importance_df = feature_importance_df.sort_values(\"importance\", ascending=False)\n\n    # Plot the feature importances\n    sns.barplot(x=\"importance\", y=\"feature\", data=feature_importance_df, ax=ax)\n    ax.set_xlabel(\"feature\")\n    ax.set_ylabel(\"features\")\n    ax.set_title(\"visualizing features\")\n\n    return model, ax\n\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates flask application with configured user authentication using flask-login. defines routes for login, logout, a protected page. user authentication managed with a simple user class and a login form using flask-wtf. the application uses dynamic configuration for security and template rendering. parameters: secret_key (str): a secret key for the application to use for session management. template_folder (str): the path to the directory containing flask templates. requirements: - flask - flask_login - flask_wtf - wtforms - wtforms.validators - werkzeug.security returns: flask: a flask application instance configured for user authentication. examples: >>> app = task_func('mysecretkey', 'templates') >>> 'login' [rule.endpoint for rule in app.url_map.iter_rules()] true >>> app.config['secret_key'] == 'mysecretkey' true\n    \"\"\"\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n\n    class User(UserMixin):\n        def __init__(self, username, password):\n            self.id = username\n            self.password = generate_password_hash(password)\n\n        def check_password(self, password):\n            return check_password_hash(self.password, password)\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User(user_id, 'password')\n\n    @app.route('/')\n    def index():\n        return 'Hello, World!'\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = User(form.username.data, form.password.data)\n            if user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('index'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return 'You are logged in as ' + current_user.id\n\n    return app\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outliers from specified column a dataset based on z-score. standardizes the column, calculates z-scores, and removes data points where the z-score exceeds a threshold. the function also visualizes the data before and after outlier removal. parameters: data (ndarray): the dataset. column (int): the index of the column to analyze for outliers. outlier_z_score (float): the z-score threshold to identify outliers. returns: tuple: a tuple containing the original data, the data without outliers, and the indices of the outliers. requirements: - numpy - matplotlib.pyplot - scipy.stats - sklearn.preprocessing.standardscaler notes: the function plots two scatter plots: 'data with outliers' shows the original data including outliers, while 'data without outliers' displays the data after removing outliers based on the provided z-score threshold. this visual comparison helps illustrate the impact of outlier removal on the dataset. examples: >>> data = np.array([[14, 25], [1, 22], [7, 8], [100, 200]]) >>> column = 1 >>> len(task_func(data, column, 3.0)) 3 >>> isinstance(task_func(data, column, 3.0)[0], np.ndarray) true >>> isinstance(task_func(data, column, 3.0)[1], np.ndarray) true >>> isinstance(task_func(data, column, 3.0)[2], tuple) true\n    \"\"\"\n    # Extract the specified column\n    column_data = data[:, column]\n    \n    # Standardize the column data\n    scaler = StandardScaler()\n    scaled_column_data = scaler.fit_transform(column_data.reshape(-1, 1)).flatten()\n    \n    # Calculate z-scores\n    z_scores = stats.zscore(scaled_column_data)\n    \n    # Identify outliers\n    outliers = np.where(np.abs(z_scores) > outlier_z_score)\n    \n    # Remove outliers\n    data_without_outliers = np.delete(data, outliers, axis=0)\n    \n    # Visualize data before and after outlier removal\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.scatter(range(len(column_data)), column_data, color='blue', label='Data with Outliers')\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    \n    plt.subplot(1, 2, 2)\n    plt.scatter(range(len(column_data) - len(outliers[0])), data_without_outliers[:, column], color='red', label='Data without Outliers')\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel(column)\n    \n    plt.legend()\n    plt.show()\n    \n    return data, data_without_outliers, outliers\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform k-means clustering on dataset generate a scatter plot visualizing clusters and their centroids. parameters: data (pd.dataframe): the dataset to clustered, where and columns features. n_clusters (int): the number clusters to form. must be greater than 1. defaults to 3. returns: tuple: - np.ndarray: array of cluster labels assigned to each sample. - plt.axes: an axes object with the scatter plot showing the clusters and centroids. raises: valueerror: if 'data' not a pd.dataframe. valueerror: if 'n_clusters' is not an integer greater than 1. requirements: - numpy - pandas - matplotlib - sklearn example: >>> np.random.seed(42) >>> data = pd.dataframe(np.random.rand(100, 2), columns=['feature1', 'feature2']) >>> _, ax = task_func(data, 3) >>> ax.get_title() 'k-means clustering'\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n    \n    # Perform k-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    cluster_labels = kmeans.fit_predict(data)\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data['feature1'], data['feature2'], c=cluster_labels, cmap='viridis')\n    ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='x', label='Centroids')\n    ax.set_title('k-means Clustering')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    ax.legend()\n    \n    return cluster_labels, ax\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform principal component analysis (pca) on dataset record result. also, generates a scatter plot the transformed data. parameters: data (dataframe): the dataset. n_components (int): the number of principal components calculate. default 2. returns: dataframe: the transformed data with principal components. axes: the matplotlib axes object containing the scatter plot. raises: valueerror: if n_components is not a positive integer. requirements: - numpy - pandas - matplotlib.pyplot - sklearn.decomposition example: >>> data = pd.dataframe([[14, 25], [1, 22], [7, 8]], columns=['column1', 'column2']) >>> transformed_data, plot = task_func(data)\n    \"\"\"\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('PCA Scatter Plot')\n    \n    return pd.DataFrame(transformed_data), ax\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws a seaborn pair plot the iris dataset using arial font. this function sets the global font to arial for better readability and visual appeal. generates a pair plot from the iris dataset, where each subplot represents the relationship between two features, colored by species. the plot includes the title 'iris dataset pair plot' and labels for each feature on the axes. parameters: none returns: plt.figure: a matplotlib figure object containing the seaborn pair plot of the iris dataset. the plot has 'iris dataset pair plot' as its title. each subplot's axes labeled with the corresponding feature names, such as 'sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', and 'petal width (cm)'. requirements: - matplotlib.pyplot - pandas - seaborn - sklearn.datasets example: >>> fig = task_func() >>> type(fig) <class 'matplotlib.figure.figure'>\n    \"\"\"\n    # Load the iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target\n\n    # Set the global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Create the pair plot\n    pair_plot = sns.pairplot(df, hue='species')\n\n    # Set the title of the plot\n    pair_plot.fig.suptitle('iris dataset pair plot')\n\n    # Show the plot\n    plt.show()\n\n    return pair_plot.fig\n"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates time series data for days with reproducibility by. plot a for readability. parameters: seed (int, optional): seed random number generator reproducibility. defaults to 42. returns: matplotlib.ax.axes: of time series. the plot will have 'date' as the x-axis, 'value' as the y-axis label, 'random time series' as the title. raiseserror if an issue generating data plot requirements: - matplotlib.pyplot - pandas - random - datetime: >>> ax = task_func() >>> ax.get_title() 'random time series' >>> ax.get_xlabel() 'date' >>> ax.get_ylabel() 'value'\n    \"\"\"\n    random.seed(seed)\n    plt.figure(figsize=(10, 6))\n    dates = pd.date_range(start=\"2023-01-01\", periods=100, freq=\"D\")\n    values = [random.randint(1, 100) for _ in range(100)]\n    df = pd.DataFrame({\"date\": dates, \"value\": values})\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace=True)\n    ax = df.plot(kind=\"line\", legend=False)\n    ax.set_title(\"random time series\")\n    ax.set_xlabel(\"date\")\n    ax.set_ylabel(\"value\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    return ax\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw correlation heatmap the boston housing dataset using seaborn, with option save to specified file. parameters: seed (int, optional): random seed for reproducibility. defaults to 42. the font should be the family of sans-serif arial. returns: matplotlib.axes.axes: the axes object containing the heatmap plot. raises: valueerror: if an error occurs in generating or saving the plot. requirements: - matplotlib - os - pandas - seaborn - numpy example: >>> ax = task_func() >>> type(ax) <class 'matplotlib.axes._axes.axes'>\n    \"\"\"\n    try:\n        # Load the Boston Housing dataset\n        df = pd.read_csv(data_url, sep=\"\\s+\", header=None, names=[\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"])\n        \n        # Set the font to Arial\n        plt.rcParams['font.family'] = 'Arial'\n        \n        # Generate the correlation matrix\n        corr = df.corr()\n        \n        # Create a heatmap using seaborn\n        ax = sns.heatmap(corr, annot=True, cmap=\"coolwarm\", fmt=\".2f\", linewidths=.5)\n        \n        # Set the title of the plot\n        ax.set_title(\"Correlation Heatmap of Boston Housing Dataset\")\n        \n        # Show the plot\n        plt.show()\n        \n        return ax\n    except Exception as e:\n        raise ValueError(f\"An error occurred while generating or saving the plot: {e}\")\n"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes time series 'value' dataframe into trend, seasonality, residuals. parameters: df (dataframe): the dataframe with columns 'group', 'date', and 'value'. freq (str, optional): frequency of the time series data. defaults 'd' (daily). decomposition_model (str, optional): type of decomposition model. 'additive' or'multiplicative'. defaults to'multiplicative'. returns: tuple: a tuple containing the decomposition result (decomposeresult object) and the matplotlib axes object. raises: valueerror: if 'df' not a dataframe, lacks required columns, or contains invalid data. valueerror: if 'freq' is not a valid frequency string. valueerror: if 'decomposition_model' is not 'additive' or'multiplicative'. requirements: - pandas - matplotlib.pyplot - statsmodels.tsa.seasonal example: >>> df = pd.dataframe({... \"group\": [\"a\"] * 14... \"date\": pd.to_datetime([\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"2022-01-04\",... \"2022-01-05\", \"2022-01-06\", \"2022-01-07\", \"2022-01-08\",... \"2022-01-09\", \"2022-01-10\", \"2022-01-11\", \"2022-01-12\",... \"2022-01-13\", \"2022-01-14\"]),... \"value\": [10, 12, 13, 15, 17, 16, 14, 13, 12, 15, 17, 18, 20, 19],... }) >>> result, ax = task_func(df, freq='d', decomposition_model='multiplicative') >>> plt.show() # this will display the plot with title 'time series decomposition' and y-axis 'value'\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame\")\n    if not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"'df' must contain columns 'group', 'date', and 'value'\")\n    if not isinstance(freq, str):\n        raise ValueError(\"'freq' must be a string\")\n    if not isinstance(decomposition_model, str):\n        raise ValueError(\"'decomposition_model' must be a string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"'decomposition_model' must be 'additive' or 'multiplicative'\")\n    \n    # Perform the decomposition\n    decomposeresult = seasonal_decompose(df['value'], model=decomposition_model, freq=freq)\n    \n    # Plot the decomposition\n    ax = decomposeresult.plot()\n    ax.set_title('Time Series Decomposition')\n    ax.set_ylabel('Value')\n    \n    return decomposeresult, ax\n"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate pandas series of random dates within a specified date range, including start_date end_date, with an optional seed for reproducibility. function creates a series of dates randomly selected between the specified start and end dates, inclusive. it allows specifying a seed for the random number generator ensure reproducible results, making it suitable for simulations or tests requiring consistency. parameters: - start_date (datetime.datetime, optional): the start of the date range. defaults to january 1, 2020. - end_date (datetime.datetime, optional): the end of the date range. defaults to december 31, 2020. - seed (int, optional): seed for the random number generator to ensure reproducibility. default 42. returns: - pandas.series: a series object containing random dates within the specified range, with each date being a datetime.datetime object. the series length matches the number of days in the specified range. raises: - valueerror: if'start_date' or 'end_date' is not a datetime.datetime instance, or if'start_date' is later than 'end_date'. note: the start_date and end_date inclusive, meaning both dates are considered as potential values in the generated series. the default seed value is 42, that results are reproducible by default unless a different seed is specified by the user. requirements: - pandas - datetime - random example: >>> dates = task_func(seed=123) >>> print(dates.head()) # prints the first 5 dates from the series 0 2020-01-27 1 2020-05-17 2 2020-02-14 3 2020-07-27 4 2020-05-16 dtype: datetime64[ns]\n    \"\"\"\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"start_date and end_date must be datetime.datetime instances.\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier than end_date.\")\n    \n    random_seed(seed)\n    total_days = (end_date - start_date).days + 1\n    random_days = [randint(0, total_days - 1) for _ in range(total_days)]\n    random_dates = [start_date + timedelta(days=day) for day in random_days]\n    \n    return pd.Series(random_dates)\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify list by adding element '12', concatenate a number csv files from a directory into a single dataframe. the number of files concatenated determined by the sum of the numbers in the list. parameters: my_list (list): the input list, is modified in place. file_dir (str, optional): the directory search for csv files. defaults to './data_files/'. file_ext (str, optional): the file extension of the files to concatenate. defaults to '.csv'. returns: dataframe: a pandas dataframe concatenating data from the selected csv files. raises: typeerror: if 'my_list' is not a list. filenotfounderror: if no files found in the specified directory. requirements: - pandas - os - glob example: >>> create_dummy_csv() >>> my_list = [1, 2, 3] >>> df = task_func(my_list) >>> print(df.head()) a b 0 0 3 1 1 4 2 2 5 3 0 3 4 1 4 >>> teardown_dummy()\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n\n    my_list.append('12')\n\n    file_paths = glob.glob(os.path.join(file_dir, '*' + file_ext))\n    if not file_paths:\n        raise FileNotFoundError(\"No files found in the specified directory\")\n\n    df_list = []\n    for i in range(sum(my_list)):\n        df = pd.read_csv(file_paths[i])\n        df_list.append(df)\n\n    return pd.concat(df_list, ignore_index=True)\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list' by appending number 12, then generates list random integers based on the sum of elements 'my_list', limited by 'size'. measures the time taken for this process and plots a histogram of the generated random numbers. the size of the random numbers list determined by the sum of the numbers in 'my_list', with an upper limit set by 'size'. the random integers are within the range 1 100, inclusive. parameters: - my_list (list): the input list containing numeric elements. - size (int): maximum size limit for the generated list of random numbers. default is 100. - seed (int): seed value for random number generator for reproducibility. default is 100. returns: - tuple: a tuple containing the time taken to generate the list (in seconds, as a float) and the matplotlib axes object for the histogram. the histogram's x-axis is labeled 'number', representing the range of random integers, and the y-axis is labeled 'frequency', representing the frequency of each integer in the generated list. raises: - typeerror: if 'my_list' is not a list. - valueerror: if 'my_list' contains elements that are not numeric (int or float). the histogram plots the distribution of the random numbers generated, with the number range (1-100) on the x-axis and the count (frequency) of each number on the y-axis. requirements: - random - time - matplotlib.pyplot example: >>> my_list = [2, 3, 5] >>> time_taken, ax = task_func(my_list) >>> print(type(time_taken)) # example output: <class 'float'> <class 'float'> >>> ax.get_title() # returns 'histogram of random numbers' 'histogram of random numbers'\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"my_list must be a list\")\n    if not all(isinstance(i, (int, float)) for i in my_list):\n        raise ValueError(\"my_list must contain only numeric elements (int or float)\")\n    \n    my_list.append(12)\n    random_seed(seed)\n    start_time = time.time()\n    random_numbers = [randint(1, 100) for _ in range(sum(my_list)) if sum(my_list) <= size]\n    end_time = time.time()\n    \n    time_taken = end_time - start_time\n    \n    fig, ax = plt.subplots()\n    ax.hist(random_numbers, bins=range(1, 101), align='left', rwidth=0.8)\n    ax.set_title('histogram of random numbers')\n    ax.set_xlabel('number')\n    ax.set_ylabel('frequency')\n    \n    return time_taken, ax\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape first table from web page extract data into a pandas dataframe. this function scrapes the first table found on the specified web page url and extracts the data into a dataframe, where each row in the dataframe corresponds to a table row (<tr>) from the web page, and each column represents the data contained within table data elements (<td>) row. the dataframe's columns named after the table's header row (<th> elements), if present. if the table lacks headers, the dataframe's columns remain unnamed. parameters: - url (str): the url of the webpage to scrape. defaults to 'http://example.com'. returns: - pd.dataframe: a dataframe containing the scraped table data, with rows corresponding to table rows and columns named after the table headers, if available. raises: - connectionerror: if issue connecting to the url. - requests.httperror: if the http request to the url fails. - valueerror: if no table data is found on the page or if the page content cannot be parsed. note: assumes the webpage contains at least one table and attempts to parse the first table encountered. requirements: - pandas - requests - bs4 example: >>> df = task_func('https://en.wikipedia.org/wiki/list_of_countries_by_gdp_(nominal)') >>> print(df) 0 0 1 largest economies in the world by gdp (nominal...\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        print (\"HTTP Error:\",errh)\n        raise\n    except requests.exceptions.ConnectionError as errc:\n        print (\"Error Connecting:\",errc)\n        raise\n    except requests.exceptions.Timeout as errt:\n        print (\"Timeout Error:\",errt)\n        raise\n    except requests.exceptions.RequestException as err:\n        print (\"Something went wrong\",err)\n        raise\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table')\n    if table is None:\n        raise ValueError('No table data found on the page')\n\n    headers = [header.text for header in table.find_all('th')]\n    rows = table.find_all('tr')\n    data = []\n    for row in rows:\n        row_data = [cell.text for cell in row.find_all('td')]\n        if row_data:\n            data.append(row_data)\n\n    df = pd.DataFrame(data, columns=headers)\n    return df\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw histograms numeric columns dataframe and return the plots. each histogram represents the distribution of values in one numeric column, with the column name as the plot title, 'value' as the x-axis label, and 'frequency' as the y-axis label. parameters: - df (dataframe): the dataframe containing the data. returns: - list: a list of matplotlib axes objects, each representing a histogram for a numeric column. raises: - valueerror: if the input is not a non-empty dataframe or if no numeric columns in the dataframe. requirements: - pandas - numpy - matplotlib.pyplot example: >>> df = pd.dataframe({'a': np.random.normal(0, 1, 100), 'b': np.random.exponential(1, 100)}) >>> axes = task_func(df) >>> for ax in axes: ... plt.show()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty dataframe.\")\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    if not numeric_columns.any():\n        raise ValueError(\"No numeric columns in the dataframe.\")\n    \n    fig, axes = plt.subplots(len(numeric_columns), figsize=(10, 5 * len(numeric_columns)))\n    axes = axes.flatten() if len(numeric_columns) > 1 else [axes]\n    \n    for i, col in enumerate(numeric_columns):\n        axes[i].hist(df[col], bins=30, color='skyblue', edgecolor='black')\n        axes[i].set_title(f'{col} Distribution')\n        axes[i].set_xlabel('Value')\n        axes[i].set_ylabel('Frequency')\n    \n    plt.tight_layout()\n    return axes\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans specified ip address range checks if a specified port open on each ip. function returns a dictionary with ip addresses as keys and a boolean indicating the port's status (true if open, false otherwise). parameters: ip_range (str): the ip address range scan, cidr notation. port (int): the port number to check on each ip in the range. returns: dict: a dictionary mapping ip addresses to their port status (true if open). examples: >>> result = task_func('192.168.0.0/24', 80) >>> isinstance(result, dict) true >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items()) true requirements: - socket - ipaddress.ipv4network - threading.thread\n    \"\"\"\n    ip_network = IPv4Network(ip_range)\n    results = {}\n\n    def scan_ip(ip):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        try:\n            result = sock.connect_ex((ip, port))\n            results[ip] = result == 0\n        except Exception as e:\n            results[ip] = False\n        finally:\n            sock.close()\n\n    threads = []\n    for ip in ip_network:\n        t = Thread(target=scan_ip, args=(str(ip),))\n        t.start()\n        threads.append(t)\n\n    for t in threads:\n        t.join()\n\n    return results\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information such as message type, timestamp, and message itself from a log file and stores the data a csv format. this utility ideal for converting plain text logs into a more s tructured format can be easily analyzed. the log is the format 'type: [timestamp (yyyy-mm-dd hh:mm:ss)] - message'. parameters: log_file (str): the file path the log file that needs to be parsed. returns: str: the file path to the newly created csv file contains the structured log data. requirements: - re - pandas - datetime raises: valueerror: if the timestamp in log entry is invalid or if no valid log entries found. example: >>> output_path = task_func('server.log') >>> print(output_path) log_data.csv\n    \"\"\"\n    # Regular expression to match log entry\n    log_entry_pattern = r'(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)'\n    \n    # List to store log data\n    log_data = []\n    \n    # Open the log file and read its content\n    with open(log_file, 'r') as file:\n        for line in file:\n            # Match log entry pattern\n            match = re.match(log_entry_pattern, line)\n            if match:\n                # Extract log data\n                log_type = match.group(1)\n                timestamp = match.group(2)\n                message = match.group(3)\n                \n                # Convert timestamp to datetime object\n                try:\n                    timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')\n                except ValueError:\n                    raise ValueError(f'Invalid timestamp in log entry: {line}')\n                \n                # Append log data to list\n                log_data.append([log_type, timestamp, message])\n            else:\n                raise ValueError(f'No valid log entry found in: {line}')\n    \n    # Create DataFrame from log data\n    df = pd.DataFrame(log_data, columns=['Type', 'Timestamp', 'Message'])\n    \n    # Set Timestamp column as datetime index\n    df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n    df.set_index('Timestamp', inplace=True)\n    \n    # Create output file path\n    output_path = log_file.replace('.log', '.csv')\n    \n    # Save DataFrame to CSV file\n    df.to_csv(output_path)\n    \n    return output_path\n\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes visualizes the distribution word lengths text. the function generates a histogram subplot, facilitates the understanding of how word lengths vary within the provided text. parameters: text (str): the text string from which word lengths will be calculated. rwidth (float, optional): specifies the relative bar width in the histogram. defaults 0.8. returns: matplotlib.axes.axes: axes object containing the histogram of word lengths. requirements: - re - matplotlib - numpy note: if no words in the input text, or all words are filtered out, the histogram will be empty as no bins will be created. example: >>> import matplotlib >>> ax = task_func('hello world, this is a test sentence.') >>> isinstance(ax, matplotlib.axes.axes) true\n    \"\"\"\n    # Extract words from the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Calculate word lengths\n    word_lengths = [len(word) for word in words]\n    \n    # Create histogram\n    ax = plt.subplot()\n    ax.hist(word_lengths, bins=np.arange(min(word_lengths), max(word_lengths)+2), rwidth=rwidth)\n    \n    # Set labels and title\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word Length Distribution')\n    \n    # Show plot\n    plt.show()\n    \n    return ax\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Extracts articles whose titles contain specific case-insensitive keywords (\"like\" or \"what\") from dataframe analyzes frequency each word the content of these articles, excluding punctuation. parameters: df (dataframe): dataframe containing columns 'title' and 'content' with article data. returns: dict: a dictionary with keys as words and values as their corresponding frequency, excluding punctuation marks. requirements: - re - nltk - string raises: valueerror: if the dataframe is empty or does not contain the necessary columns 'title' and 'content'. example: >>> import pandas as pd >>> data = {'title': ['what is happening', 'nothing special'], 'content': ['like what see?', 'just normal text.']} >>> df = pd.dataframe(data) >>> task_func(df) {'like': 1, 'what': 1, 'you': 1, 'see': 1}\n    \"\"\"\n    if df.empty or 'title' not in df.columns or 'content' not in df.columns:\n        raise ValueError(\"Dataframe is empty or does not contain the necessary columns 'title' and 'content'.\")\n\n    keywords = ['like', 'what']\n    word_frequency = {}\n\n    for index, row in df.iterrows():\n        if any(keyword in row['title'].lower() for keyword in keywords):\n            words = re.findall(r'\\b\\w+\\b', row['content'].lower())\n            for word in words:\n                if word not in word_frequency:\n                    word_frequency[word] = 1\n                else:\n                    word_frequency[word] += 1\n\n    return word_frequency\n\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares and transforms text data from specified column in a dataframe by removing stopwords, numbers, and punctuation, and subsequently applying a vectorization process to convert text into a numeric format suitable for analysis. parameters: dataframe (dataframe): a pandas dataframe containing text data. text_column (str): the name of the column from which text will be processed. returns: dataframe: returns a dataframe with each word (after preprocessing) as a column and their count as rows. requirements: - pandas - re - sklearn example: >>> df = pd.dataframe({'text': ['this is a test.', 'python is cool!', 'nltk and sklearn are useful for text analysis.']}) >>> result = task_func(df, 'text') >>> print(result.to_string(index=false)) analysis cool nltk python sklearn test text useful 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 1\n    \"\"\"\n    # Preprocessing\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'\\d', '', x))  # Remove numbers\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'[^\\w\\s]', '', x))  # Remove punctuation\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: x.lower())  # Convert to lowercase\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))  # Remove stopwords\n\n    # Vectorization\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(dataframe[text_column])\n\n    # Converting to dataframe\n    vectorized_df = pd.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names())\n\n    return vectorized_df\n\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create a geopandas dataframe for a list cities with randomly generated coordinates based on specified ranges. parameters: dic (dict): dictionary with 'lon' 'lat' keys, each a tuple (min, max) for coordinate range. default: {'lon': (-180, 180), 'lat': (-90, 90)} cities (list): list of city names. default: ['new york', 'london', 'beijing', 'tokyo', 'sydney'] returns: geodataframe: a geopandas dataframe containing 'city' and 'coordinates' (point objects). raises: valueerror: if 'lon' or 'lat' keys missing dictionary, or if their values are not tuples. requirements: - numpy - geopandas - shapely.geometry example: >>> dic = {'lon': (-180, 180), 'lat': (-90, 90)} >>> gdf = task_func(dic)\n    \"\"\"\n    if 'lon' not in dic or 'lat' not in dic or not isinstance(dic['lon'], tuple) or not isinstance(dic['lat'], tuple):\n        raise ValueError(\"'lon' and 'lat' keys must be present in the dictionary with values as tuples.\")\n    \n    lon_range, lat_range = dic['lon'], dic['lat']\n    \n    data = {'city': cities,\n            'coordinates': [Point(np.random.uniform(lon_range[0], lon_range[1]), np.random.uniform(lat_range[0], lat_range[1])) for _ in range(len(cities))]}\n    \n    gdf = gpd.GeoDataFrame(data, geometry='coordinates')\n    \n    return gdf\n"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Generate weather report for specified cities at a given utc datetime. parameters: - utc_datetime (datetime): the utc datetime for which the weather report be generated, with tzinfo set to utc. - cities (list of str): cities for which the weather report is generated. default: ['new york', 'london', 'beijing', 'tokyo', 'sydney'] - weather_conditions (list of str): possible weather conditions to choose from for the report. default: ['sunny', 'cloudy', 'rainy', 'snowy', 'stormy'] - timezones (dict): a mapping of city names to their respective timezones. default provided for the default cities. - seed (int): the seed value for random number generation to ensure reproducibility. default: 42 returns: - pandas.dataframe: a dataframe containing the weather report. columns include: - 'city': the name of the city. - 'local time': the local time of the weather report for the city, formatted as 'yyyy-mm-dd hh:mm:ss zzz' (zzz is the timezone abbreviation). - 'weather condition': the weather condition the city at the given local time. raises: - valueerror: if utc_datetime is not a datetime object or if of the other parameters not in the expected format. requirements: - pandas - pytz - datetime - random example: >>> utc_time = datetime(2023, 1, 1, 12, 0, 0, tzinfo=pytz.utc) >>> report = task_func(utc_time) >>> print(report) city local time weather condition 0 new york 2023-01-01 07:00:00 est sunny 1 london 2023-01-01 12:00:00 gmt sunny 2 beijing 2023-01-01 20:00:00 cst rainy 3 tokyo 2023-01-01 21:00:00 jst cloudy 4 sydney 2023-01-01 23:00:00 aedt cloudy\n    \"\"\"\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object.\")\n    if not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list of strings.\")\n    if not all(isinstance(condition, str) for condition in weather_conditions):\n        raise ValueError(\"weather_conditions must be a list of strings.\")\n    if not isinstance(timezones, dict):\n        raise ValueError(\"timezones must be a dictionary.\")\n    if not all(isinstance(city, str) and isinstance(tz, str) for city, tz in timezones.items()):\n        raise ValueError(\"timezones must be a dictionary with city names as keys and timezone strings as values.\")\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an integer.\")\n\n    set_seed(seed)\n    weather_report = []\n    for city in cities:\n        local_time = utc_datetime.astimezone(pytz.timezone(timezones[city]))\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        weather_report.append({\n            'city': city,\n            'local time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'weather condition': weather_condition\n        })\n    return pd.DataFrame(weather_report)\n"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate draw a random sequence of \"elements\" number of steps. steps either -1 or 1, and the sequence plotted as a random walk. returns the descriptive statistics of the random walk and the plot of the random walk. the descriptive statistics include count, mean, standard deviation, minimum, 5th percentile, 25th percentile, median, 75th percentile, 95th percentile and maximum. parameters: elements (int): the number of steps the random walk. seed (int): the seed for the random number generator. default is 0. returns: dict: a dictionary containing the descriptive statistics of the random walk. matplotlib.axes.axes: the axes object with the plotted random walk. requirements: - numpy - matplotlib.pyplot - pandas raises: valueerror: if elements is not a positive integer. example: >>> stats, ax = task_func(1000) >>> print(stats) {'count': 1000.0, 'mean': 18.18, 'std': 9.516415405086212, 'min': -5.0, '5%': 1.0, '25%': 11.0, '50%': 20.0, '75%': 26.0, '95%': 31.0, 'max': 36.0}\n    \"\"\"\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    np.random.seed(seed)\n    random_walk = np.cumsum(np.random.randint(-1, 2, elements))\n\n    stats = pd.Series(random_walk).describe().to_dict()\n\n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title(\"Random Walk\")\n    ax.set_xlabel(\"Step\")\n    ax.set_ylabel(\"Position\")\n\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and a zip file from url, extract its contents to specified directory, and return the list of extracted files. parameters: url (str): the url of the zip file to download. destination_directory (str): the directory where the contents of the zip file will extracted. headers (dict, optional): headers to be included the request. defaults to {'accept': 'application/octet-stream'}. returns: list: a list of filenames of the extracted files. requirements: - requests - os - zipfile example: >>> extracted_files = task_func(\"https://example.com/data.zip\", \"/path/to/destination\") >>> print(extracted_files) ['file1.txt', 'file2.csv']\n    \"\"\"\n    # Send a GET request to the URL\n    response = requests.get(url, headers=headers)\n    \n    # Check if the request was successful\n    if response.status_code == 200:\n        # Get the filename from the URL\n        filename = os.path.basename(url)\n        \n        # Save the response content to a file\n        with open(filename, 'wb') as file:\n            file.write(response.content)\n        \n        # Extract the zip file\n        with zipfile.ZipFile(filename, 'r') as zip_ref:\n            zip_ref.extractall(destination_directory)\n        \n        # Remove the zip file\n        os.remove(filename)\n        \n        # Get the list of extracted files\n        extracted_files = [os.path.join(destination_directory, file) for file in zip_ref.namelist()]\n        \n        return extracted_files\n    else:\n        print(f\"Failed to download the file. Status code: {response.status_code}\")\n        return []\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate random rgb image and view it. parameters: - seed (int, optional): random seed for reproducibility. default 42. - image_size (tuple, optional): size of generated image (height, width, channels). default is (100, 100, 3). - range_low (int, optional): lower bound of the random range. default is 0. - range_high (int, optional): upper bound of the random range. default is 255. returns: - ax (matplotlib.axes.axes): axes object of the plot. - image (numpy.ndarray): the numpy array of the generated image. raises: - valueerror: if range_low is not less than range_high. requirements: - random - numpy - opencv - matplotlib.pyplot example: >>> ax, image = task_func()\n    \"\"\"\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n    \n    random.seed(seed)\n    np.random.seed(seed)\n    \n    image = np.random.randint(range_low, range_high, image_size, dtype=np.uint8)\n    \n    fig, ax = plt.subplots()\n    ax.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    ax.axis('off')\n    plt.show()\n    \n    return ax, image\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates an mxn matrix from a list l, normalizes it based on sound pressure level (spl) a specified audio file, generates a spectrogram from the matrix. parameters: l (list): a list of numbers form the matrix. m (int): the number of rows the matrix. n (int): the number of columns in the matrix. audio_file (str): the path to the audio file for spl calculation. returns: numpy.ndarray: the normalized mxn matrix. matplotlib.figure.figure: the figure object for the generated spectrogram. raises: filenotfounderror: if the specified audio file does not exist. notes: the spectrogram generated based on the amplitude of the normalized matrix, with the sound pressure level (spl) calculated from the audio file. the spl is calculated using the formula: spl = 20 * log10(sqrt(mean(data^2))) where 'data' is the audio data read from the file. the spectrogram is displayed with a logarithmic scale for frequency and a linear scale for time, with the spl used to adjust the amplitude displayed in the spectrogram. requirements: - numpy - os - soundfile - librosa - matplotlib examples: >>> matrix = task_func([i for i in range(100)], 10, 10, 'audio.wav') # requires 'audio.wav' to exist >>> matrix.shape (10, 10) >>> isinstance(matrix, np.ndarray) true\n    \"\"\"\n    # Read audio file\n    try:\n        data, sr = sf.read(audio_file)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The specified audio file does not exist.\")\n\n    # Calculate sound pressure level (spl)\n    spl = 20 * np.log10(np.sqrt(np.mean(data**2)))\n\n    # Create matrix\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize matrix based on sound pressure level\n    matrix_normalized = matrix / spl\n\n    # Generate spectrogram\n    fig, ax = plt.subplots()\n    ax.specgram(matrix_normalized, Fs=sr)\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Frequency (Hz)')\n    ax.set_title('Spectrogram of Normalized Matrix')\n    plt.show()\n\n    return matrix_normalized, fig\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    Given list tuples, extract numeric values, basic statistics, generate a histogram with overlaid probability density function (pdf). parameters: original (list of tuples): input list where each tuple's second element a numeric value. returns: np.array: a numpy array of extracted numeric values. dict: basic statistics for the array including mean, standard deviation, minimum, and maximum. axes: a matplotlib axes object showing the histogram with overlaid pdf. the histogram is plotted with density set true, alpha as 0.6, and bins set to 'auto' for automatic bin selection. requirements: - numpy - matplotlib.pyplot - scipy.stats example: >>> original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> arr, stats, ax = task_func(original) >>> print(arr) [1 2 3 4] >>> print(stats) {'mean': 2.5,'std': 1.118033988749895,'min': 1,'max': 4}\n    \"\"\"\n    # Extract numeric values\n    arr = np.array([t[1] for t in original])\n    \n    # Basic statistics\n    stats = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr)\n    }\n    \n    # Histogram with overlaid pdf\n    n, bins, patches = plt.hist(arr, density=True, alpha=0.6, bins='auto')\n    plt.xlabel('Value')\n    plt.ylabel('Probability Density')\n    plt.title('Histogram with Overlaid PDF')\n    \n    # Calculate and plot pdf\n    y = stats.norm.pdf(bins, np.mean(arr), np.std(arr))\n    plt.plot(bins, y, 'r--')\n    \n    # Show plot\n    plt.show()\n    \n    return arr, stats, plt.gca()\n\n"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array from \"original\" list, normalize the array, draw the original and normalized arrays. the function will plot the original and normalized arrays using matplotlib. parameters: original (list): the original list with tuples to be unzipped into a numpy array. returns: np.array: a numpy array for the original data. np.array: normalized array. matplotlib.axes.axes: axes object with the plotted data. requirements: - numpy - matplotlib.pyplot - sklearn.preprocessing example: >>> original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> arr, norm_arr, ax = task_func(original) >>> print(arr) [1 2 3 4] >>> print(norm_arr) [0.18257419 0.36514837 0.54772256 0.73029674]\n    \"\"\"\n    # Create numeric array from \"original\" list\n    arr = np.array([x[1] for x in original])\n    \n    # Normalize the array\n    norm_arr = preprocessing.normalize([arr])[0]\n    \n    # Plot the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(arr, label='Original')\n    ax.plot(norm_arr, label='Normalized')\n    ax.legend()\n    \n    return arr, norm_arr, ax\n\n"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    Given a dictionary \"data\", this function performs the following: 1. adds a new key \"a\" with value the dictionary. 2. generates a signal based on the values \"data\". 3. runs a fast fourier transform (fft) on the signal. 4. plots the fft the signal. parameters: data (dict): the input data as a dictionary. returns: tuple: a tuple containing: - ndarray: the fft of the signal. - axes: the plot of the fft. requirements: - numpy - scipy.fftpack - matplotlib example: >>> data = {'key1': 1, 'key2': 2, 'key3': 3} >>> fft, ax = task_func(data)\n    \"\"\"\n    data['a'] = data\n    signal = np.zeros(len(data))\n    for key, value in data.items():\n        signal += value * np.sin(2 * np.pi * float(key) * np.arange(len(data)) / sample_rate)\n    fft_result = fftpack.fft(signal)\n    fig, ax = plt.subplots()\n    ax.plot(np.abs(fft_result))\n    ax.set_title('FFT of the signal')\n    ax.set_xlabel('Frequency')\n    ax.set_ylabel('Magnitude')\n    plt.show()\n    return fft_result, ax\n\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates http post request handler for processing incoming data. the data expected json format with a key 'data'. the handler responds with a 200 success message if the data is valid, or an error message otherwise. the type the response can be retrieved as 'content-type' and the length of the response as 'content-length'. two types of error messages: 'content-type header is not application/json' and 'no data key in request'. returns: function: a class handles http post requests and validates incoming data. requirements: - cgi - http.server - json notes: if the 'content-type' header is not 'application/json', indicating the client sent a request with an unsupported format. this condition sends a 400 bad request response to the client with the message \"content-type header is not application/json\". if the json object does not contain the 'data' key, leading to a 400 bad request response with the message \"no data key in request\". if the request body does not contain valid json, resulting in a 400 bad request response with the message \"invalid json\". examples: >>> handler = task_func() >>> isinstance(handler, type) true >>> issubclass(handler, http.server.basehttprequesthandler) true\n    \"\"\"\n    class JsonDataHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_type, _ = cgi.parse_header(self.headers['Content-Type'])\n            if content_type != 'application/json':\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode('utf-8'))\n                return\n\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            try:\n                data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode('utf-8'))\n                return\n\n            if 'data' not in data:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode('utf-8'))\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode('utf-8'))\n\n    return JsonDataHandler\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates http post request handler processes incoming email data sends an email. the email data must be json object with 'subject', 'message', and 'to' keys. the type the response can be retrieved as 'content-type' and the length of the response as 'content-length'. parameters: smtp_server (str): smtp server address. smtp_port (int): smtp server port. smtp_username (str): smtp username. smtp_password (str): smtp password. returns: function: a class that handles http post requests and sends emails based on the provided data. requirements: - cgi - http.server - smtplib - email.mime.text.mimetext - json raises: jsondecodeerror: if the email data not valid json. this results a 400 bad request response. valueerror: if the 'subject', 'message', or 'to' keys missing from the email data, leading a 400 bad request response. smtplib.smtpauthenticationerror: if is an authentication issue with the smtp server. this is communicated to the client with a 535 authentication failed response. examples: >>> handler = task_func('smtp.example.com', 587, 'user@example.com', 'password') >>> isinstance(handler, type) true >>> issubclass(handler, http.server.basehttprequesthandler) true\n    \"\"\"\n    class EmailRequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            email_data = json.loads(post_data)\n\n            if not all(key in email_data for key in ['subject', 'message', 'to']):\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            msg = MIMEText(email_data['message'])\n            msg['Subject'] = email_data['subject']\n            msg['From'] = smtp_username\n            msg['To'] = email_data['to']\n\n            try:\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                server.sendmail(smtp_username, email_data['to'], msg.as_string())\n                server.quit()\n                self.send_response(200)\n                self.end_headers()\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.end_headers()\n\n    return EmailRequestHandler\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count number words in .txt files within a specified directory, export the counts a json file, return the total number of words. parameters: filename (str): the name of the output json file. directory (str): the directory where .txt files located. returns: int: total number of words in .txt files requirements: - collections.counter - os - json example: >>> with open(\"./testdir/single_file.txt\",\"r\") as f: print f.read() hello world hello >>> count = task_func('single_file.txt', './testdir/') >>> print(count) 3\n    \"\"\"\n    word_counts = Counter()\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".txt\"):\n                with open(os.path.join(root, file), \"r\") as f:\n                    text = f.read()\n                    word_counts.update(text.split())\n    with open(filename, \"w\") as f:\n        json.dump(dict(word_counts), f)\n    return sum(word_counts.values())\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Process pandas dataframe by 'value' into separate columns, calculates the pearson correlation coefficient between these columns, visualizes the correlation matrix using a heatmap. parameters: df (dataframe): a pandas dataframe with two columns: 'date' and 'value'. the 'date' column contains dates, and the 'value' column contains lists of numbers. plot (bool): optional; if true, displays a heatmap of the correlation matrix and returns it. returns: dataframe: a pandas dataframe containing the correlation coefficients among the lists in the 'value' column. axes (optional): a matplotlib axes object containing the heatmap plot, if 'plot' true. note: - this function use \"correlation heatmap\" as the title of the heatmap plot raises: - if the dataframe is empty or have 'value', this function will raise value. requirements: - pandas - seaborn - matplotlib.pyplot example: >>> df = pd.dataframe([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['date', 'value']) >>> corr_df = task_func(df) >>> print(corr_df[0][0]) 1.0\n    \"\"\"\n    # Convert 'value' column to a list of lists\n    df['value'] = df['value'].apply(lambda x: [float(i) for i in x])\n    \n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in df['value'] for item in sublist]\n    \n    # Create a new dataframe with the flattened list\n    flat_df = pd.DataFrame(flat_list, columns=['Value'])\n    \n    # Calculate the correlation matrix\n    corr_matrix = flat_df.corr()\n    \n    # Visualize the correlation matrix using a heatmap\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        plt.show()\n    \n    return corr_matrix\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create a report on students' grades different subjects and then calculate the average grade for each student and subject. parameters: additional_fields (list string, optional): the additional list of student subjects not duplicate with the constants (default = []) returns: dataframe: a pandas dataframe with the columns being subjects, each student's grades, and their average grades. the dataframe also includes the average grade per subject. note: - this function does not take any input parameters and generates a report based on predefined constants and additional fields from input (if any). - this function use 'average' as the row name for the average grade for each subject. - this function use 'average grade' as the column name for the average grade for each student - grade of each subject between 0 to 100. requirements: - pandas - random - statistics.mean example: >>> random.seed(0) >>> report = task_func(['computer science', 'geography']) >>> print(report.columns) index(['physics', 'math', 'chemistry', 'biology', 'english', 'history', 'computer science', 'geography', 'average grade'], dtype='object')\n    \"\"\"\n    # Generate random grades for each student and subject\n    grades = {student: {field: random.randint(0, 100) for field in FIELDS + additional_fields} for student in STUDENTS}\n    \n    # Create a pandas dataframe from the grades\n    df = pd.DataFrame(grades)\n    \n    # Calculate the average grade for each student and subject\n    df['average grade'] = df.mean(axis=1)\n    \n    # Calculate the average grade for each subject\n    df = df.append(df.mean(axis=0), ignore_index=True)\n    df.columns = ['average grade'] if df.shape[1] == 1 else FIELDS + additional_fields + ['average grade']\n    df.index = ['average'] if df.shape[0] == 1 else STUDENTS + ['average']\n    \n    return df\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates csv file containing simulated data for 100 people, including name, age, height, weight. also calculates and appends average age, height, and weight at the end the file. parameters: filename (str): the name of the csv file be created. returns: str: the path of the created csv file. requirements: - os - csv - random - statistics.mean example: >>> random.seed(0) >>> filename = 'people_report.csv' >>> path = task_func(filename) >>> os.path.exists(path) true\n    \"\"\"\n    # Generate random data for 100 people\n    people_data = []\n    for i in range(PEOPLE_COUNT):\n        name = f'Person_{i+1}'\n        age = random.randint(18, 60)\n        height = round(random.uniform(150, 200), 2)\n        weight = round(random.uniform(50, 100), 2)\n        people_data.append([name, age, height, weight])\n\n    # Calculate averages\n    average_age = mean([person[1] for person in people_data])\n    average_height = mean([person[2] for person in people_data])\n    average_weight = mean([person[3] for person in people_data])\n\n    # Append averages to data\n    people_data.append(['Average', average_age, average_height, average_weight])\n\n    # Write data to csv file\n    with open(filename, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(COLUMNS)\n        writer.writerows(people_data)\n\n    return os.path.abspath(filename)\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files directory based on first text that not enclosed in square brackets. move the files subdirectories named after this text. if no matching text is found, the file is not moved. parameters: directory (str): the directory path. returns: tuple: - str: the directory path with organized files. - dict: a dictionary where keys are the created subdirectories and values are lists files moved to them. requirements: - re - os - shutil - datetime example: >>> import tempfile >>> temp_dir = tempfile.mkdtemp() >>> create_test_directory(temp_dir, {\"file1.txt\": \"subdir1[content]\", \"file2.txt\": \"subdir1[content]\", \"file3.txt\": \"subdir2[content]\"}) >>> dir, files = task_func(temp_dir) >>> files['subdir2'][0].startswith('file3_') true\n    \"\"\"\n    files = {}\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            match = re.search(r'^(?P<text>[^[\\]]+)', file)\n            if match:\n                text = match.group('text')\n                if text not in files:\n                    files[text] = []\n                files[text].append(file)\n                new_dir = os.path.join(directory, text)\n                if not os.path.exists(new_dir):\n                    os.makedirs(new_dir)\n                shutil.move(os.path.join(directory, file), os.path.join(new_dir, file))\n    return directory, files\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from list files as subprocesses at same time. parameters: - file_list (list of str): list of files. returns: list: the exit codes of the subprocesses. requirements: - subprocess - time - threading example: >>> task_func([\"task_func_data/file1.bat\", \"task_func_data/file2.bat\"]) [0, 0]\n    \"\"\"\n    processes = []\n    for file in file_list:\n        process = subprocess.Popen(file, shell=True)\n        processes.append(process)\n    \n    exit_codes = []\n    for process in processes:\n        exit_codes.append(process.wait())\n    \n    return exit_codes\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find all.bat files given directory, returning their file names and exit codes. parameters: directory_path (str): path the directory to search for.bat files. returns: list of tuples: a list where each tuple contains the file name and its exit code. the exit code none if the file could not executed. requirements: - subprocess - os - sys - glob example: >>> task_func(\"path/to/directory\") [(\"file1.bat\", 0), (\"file2.bat\", 1)]\n    \"\"\"\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n    results = []\n    for bat_file in bat_files:\n        try:\n            process = subprocess.Popen(bat_file, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            output, error = process.communicate()\n            exit_code = process.returncode\n            results.append((os.path.basename(bat_file), exit_code))\n        except Exception as e:\n            results.append((os.path.basename(bat_file), None))\n    return results\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    This function takes pandas dataframe and a column name as input and generates two subplots in one matplotlib figure: the first subplot is a histogram (with a kernel density estimate for numerical data), and the second is a box plot, representing the distribution of the values in the specified column. parameters: df (dataframe): input dataframe with numerical or categorical data. col (str): the name of the column to plotted. this column should exist in the dataframe and contain numerical or categorical data. returns: matplotlib.figure.figure: a matplotlib figure object containing the histogram and box plot. requirements: - pandas - seaborn - matplotlib.pyplot raises: - the input df must be dataframe, not be empty, and must contain the specified column, if is not, the function will raise valueerror. example: >>> df = pd.dataframe({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}) >>> fig = task_func(df, 'value') >>> type(fig) <class 'matplotlib.figure.figure'> >>> plt.close() >>> df = pd.dataframe({'category': ['a', 'b', 'a', 'b', 'a', 'b', 'a', 'b', 'a', 'b']}) >>> fig = task_func(df, 'category') >>> type(fig) <class 'matplotlib.figure.figure'> >>> len(fig.axes) 2 >>> plt.close()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n    if col not in df.columns:\n        raise ValueError(\"Column '{}' not found in the DataFrame.\".format(col))\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Histogram\n    sns.histplot(df[col], kde=True, ax=axs[0])\n    axs[0].set_title('Histogram with KDE')\n\n    # Boxplot\n    sns.boxplot(df[col], ax=axs[1])\n    axs[1].set_title('Boxplot')\n\n    plt.tight_layout()\n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run python script as a process with predefined arguments. by default, waits for the process complete. if wait false, the function returns none. parameters: script_path (str): the path the python script to run. wait (bool): whether to wait for the script to complete. default is true. *args: the arguments to be passed to the script. returns: int: the return code of the subprocess. if 'wait' is false, returns none. requirements: - subprocess - os - sys - time raise: - valueerror: if the script does not exist. - subprocess.calledprocesserror: if the script raises an exception. example: >>> import tempfile >>> script_path = tempfile.namedtemporaryfile(suffix='.py').name >>> with open(script_path, 'w') as f: ... _ = f.write('import sys;sys.exit(0);') >>> task_func(script_path, true, 'arg1', 'arg2') 0 >>> task_func(script_path, false, 'arg1', 'arg2') # should return none\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"Script {script_path} does not exist\")\n\n    try:\n        process = subprocess.Popen([sys.executable, script_path] + list(args), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            output, error = process.communicate()\n            if process.returncode != 0:\n                raise subprocess.CalledProcessError(process.returncode, f\"Script {script_path} raised an exception: {error.decode('utf-8')}\")\n            return process.returncode\n        else:\n            return None\n    except subprocess.CalledProcessError as e:\n        raise e\n\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from excel spreadsheet (.xlsx), calculate the mean standard deviation of each column, and draw a bar chart. the bar chart will returned as a matplotlib figure object. parameters: - file_location (str): the path to the excel file. - sheet_name (str): the name of the sheet to load data from. returns: - dict: a dictionary with mean and standard deviation of each column. - matplotlib.figure.figure: the figure object containing the bar chart. the figure titled 'mean and standard deviation', the x-axis is labeled 'columns', and the y-axis is labeled 'values'. raises: - filenotfounderror: if the excel file does not exist at the specified path. - valueerror: if the specified sheet does not exist in the workbook. requirements: - pandas - numpy - matplotlib.pyplot - os - openpyxl example: >>> file_path='test.xlsx' >>> create_dummy_excel(file_path) >>> result, fig = task_func(file_path, 'testsheet') >>> os.remove(file_path) >>> fig.axes[0].get_title() 'mean and standard deviation'\n    \"\"\"\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"The file {file_location} does not exist.\")\n    \n    try:\n        data = pd.read_excel(file_location, sheet_name=sheet_name)\n    except ValueError:\n        raise ValueError(f\"The sheet {sheet_name} does not exist in the workbook.\")\n    \n    mean_std_dict = {}\n    for column in data.columns:\n        mean_std_dict[column] = (data[column].mean(), data[column].std())\n    \n    fig, ax = plt.subplots()\n    ax.bar(mean_std_dict.keys(), [v[0] for v in mean_std_dict.values()], yerr=[v[1] for v in mean_std_dict.values()])\n    ax.set_title('mean and standard deviation')\n    ax.set_xlabel('columns')\n    ax.set_ylabel('values')\n    \n    return mean_std_dict, fig\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return bar chart of the number of activities performed on each day of the week based on the provided list of activities. if the activities not datetime objects, raise a typeerror. parameters: - activities (list of datetime objects): a list of datetime objects representing when each activity occurred. returns: - matplotlib.axes.axes: axes object representing the bar chart, with the x-axis labeled 'day of the week', the y-axis labeled 'number of activities', the title 'weekly activity'. requirements: - datetime - collections - matplotlib.pyplot raises: - typeerror: if the activities are not datetime objects. example: >>> ax = task_func([datetime(2023, 10, 25), datetime(2023, 10, 26)]) >>> type(ax) <class 'matplotlib.axes._axes.axes'>\n    \"\"\"\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects.\")\n\n    weekly_activities = defaultdict(int)\n    for activity in activities:\n        weekly_activities[activity.strftime(\"%A\")] += 1\n\n    days_of_week = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\n    activity_counts = [weekly_activities[day] for day in days_of_week]\n\n    fig, ax = plt.subplots()\n    ax.bar(days_of_week, activity_counts)\n    ax.set_xlabel(\"Day of the Week\")\n    ax.set_ylabel(\"Number of Activities\")\n    ax.set_title(\"Weekly Activity\")\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves random file from source directory the specified destination directory. parameters: - src_dir (str): the path of the source directory from a file will randomly selected moved. - dest_dir (str): the path of the destination directory where the file will be moved. - seed (int, optional): the seed for the random number generator. defaults to 100. returns: str: the name of the file moved. format: 'filename.extension' (e.g., 'file1.txt'). requirements: - os - shutil - random examples: >>> import tempfile >>> src_dir = tempfile.mkdtemp() >>> dest_dir = tempfile.mkdtemp() >>> open(os.path.join(src_dir, 'file1.txt'), 'w').close() >>> open(os.path.join(src_dir, 'file2.txt'), 'w').close() >>> task_func(src_dir, dest_dir, seed=1) 'file2.txt'\n    \"\"\"\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    if not files:\n        return None\n    file_to_move = random.choice(files)\n    src_file_path = os.path.join(src_dir, file_to_move)\n    dest_file_path = os.path.join(dest_dir, file_to_move)\n    shutil.move(src_file_path, dest_file_path)\n    return file_to_move\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes all excel (.xlsx) files in the specified directory by prefixing them with a double backslash. parameters: - directory_path (str): the path the directory containing the excel files. default './xlsx_files/'. returns: - int: the number excel files processed. requirements: - libraries: re, openpyxl, glob - excel files in the specified directory. example: >>> import tempfile >>> temp_dir = tempfile.mkdtemp() >>> workbook = workbook() >>> sheet = workbook.active >>> sheet.append(['this is a \"test\" string.']) >>> workbook.save(temp_dir + '/test.xlsx') >>> task_func(temp_dir) 1\n    \"\"\"\n    excel_files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n    processed_files = 0\n    for file in excel_files:\n        workbook = load_workbook(file)\n        for sheet in workbook.worksheets:\n            for row in sheet.iter_rows():\n                for cell in row:\n                    if isinstance(cell.value, str):\n                        cell.value = re.sub(r'\"', r'\\\\\"', cell.value)\n        workbook.save(file)\n        processed_files += 1\n    return processed_files\n\n"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram of a sine wave cosine wave with a given frequency and return the plot. parameters: frequency (float): the frequency of the wave. must a non-negative float. sample_size (int, optional): a positive integer integer denoting the number of samples be taken for the wave. default 10000. returns: matplotlib.figure.figure: the figure object containing the plot. matplotlib.axes.axes: the axes object of the plot. requirements: - numpy for data generation - matplotlib.pyplot for plotting - math for mathematical constants raises: - valueerror: if the frequency is negative. - valueerror: if the sample size is non-positive. example: >>> fig, ax = task_func(1, 2500) >>> type(fig) <class 'matplotlib.figure.figure'> >>> type(ax) <class 'matplotlib.axes._axes.axes'>\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be a non-negative float.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be a positive integer.\")\n\n    x = np.linspace(0, 2 * math.pi, sample_size)\n    y_sine = np.sin(frequency * x)\n    y_cosine = np.cos(frequency * x)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y_sine, label=\"Sine Wave\")\n    ax.plot(x, y_cosine, label=\"Cosine Wave\")\n    ax.set_xlabel(\"Time (s)\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.set_title(\"Sine and Cosine Waves\")\n    ax.legend()\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes flask-mail instance for sending emails using generated flask application with the specified app_name. parameters: app_name (string): the flask application name returns: tuple: a tuple containing the flask-mail instance the app's mail configurations. note: - the details of the email server retrieved from environment variables. - if the variables do not exist, use defaults: - 'mail_server': 'localhost' - 'mail_port': 25 - 'mail_use_tls': false (boolean) - 'mail_username': none - 'mail_password': none requirements: - flask - os - flask_mail example: >>> mail, configs = task_func(\"test\") >>> print(mail.__getattribute__(\"app\").name) test\n    \"\"\"\n    app = Flask(app_name)\n    mail = Mail(app)\n    configs = {\n        \"mail_server\": os.environ.get(\"MAIL_SERVER\", \"localhost\"),\n        \"mail_port\": int(os.environ.get(\"MAIL_PORT\", 25)),\n        \"mail_use_tls\": os.environ.get(\"MAIL_USE_TLS\", False),\n        \"mail_username\": os.environ.get(\"MAIL_USERNAME\"),\n        \"mail_password\": os.environ.get(\"MAIL_PASSWORD\"),\n    }\n    app.config.update(configs)\n    return mail, configs\n"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate mean, median, standard deviation the data from specific column an excel file. parameters: - excel_file_path (str): the path to the directory containing the excel file. - file_name (str): the name of the excel file. - column_name (str): the name of the column to analyze. returns: - dict: a dictionary with the mean, median, and standard deviation. raises: - filenotfounderror: if the excel file does not exist at the specified path. - valueerror: if the specified column not found in the excel file. requirements: - pandas - numpy - os example: >>> data_dir, file_name = './data/', 'excel_file1.xls' >>> create_dummy_file(data_dir, file_name) >>> stats = task_func(data_dir, file_name, 'sales') >>> os.remove(data_dir + file_name) >>> os.rmdir(data_dir) >>> print(stats) {'mean': 200.0, 'median': 200.0, 'std_dev': 70.71067811865476}\n    \"\"\"\n    # Check if the file exists\n    if not os.path.exists(excel_file_path + file_name):\n        raise FileNotFoundError(f\"The file {file_name} does not exist at the specified path.\")\n    \n    # Load the excel file\n    df = pd.read_excel(excel_file_path + file_name)\n    \n    # Check if the column exists\n    if column_name not in df.columns:\n        raise ValueError(f\"The specified column {column_name} not found in the excel file.\")\n    \n    # Calculate statistics\n    mean = np.mean(df[column_name])\n    median = np.median(df[column_name])\n    std_dev = np.std(df[column_name])\n    \n    return {'mean': mean, 'median': median, 'std_dev': std_dev}\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains simple neural network on given input data target labels. function: - splits the data into a training set (75%) and a test set (25%), assuming the input dimension always 2. - constructs a sequential model with one dense hidden layer and a sigmoid activation function. - compiles the model using binary cross-entropy loss and sgd optimizer with a specified learning rate. - fits the model to the training data (without verbose output), also evaluating it on the test set as validation data. - plots the model's training and validation loss over epochs and returns the plot's axes object for further customization. parameters: x (np.ndarray): input features for the model, where each feature set has input dimension of 2. y (np.ndarray): target labels for the model. returns: - sequential: the trained keras sequential model. - matplotlib.axes.axes: the axes object of the plot. the plot visualizes the model's training and validation loss over epochs, with the x-axis representing epochs and the y-axis representing loss. the legend distinguishes between 'train' and 'test' losses. notes: - the input dimension of x must always 2. - the title is'model loss' - the x-axis label is 'epoch' - the y-axis label is 'loss' requirements: - keras.layers.dense - keras.optimizers.sgd - keras.models.sequential - sklearn.model_selection.train_test_split - matplotlib.pyplot examples: >>> x = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> y = np.array([[0], [1], [1], [0]]) >>> model, ax = task_func(x, y) >>> isinstance(model, sequential) true >>> isinstance(ax, plt.axes) true\n    \"\"\"\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Construct the sequential model\n    model = Sequential()\n    model.add(Dense(1, input_dim=2, activation='sigmoid'))\n\n    # Compile the model\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.1), metrics=['accuracy'])\n\n    # Fit the model\n    history = model.fit(X_train, Y_train, epochs=100, batch_size=1, verbose=0, validation_data=(X_test, Y_test))\n\n    # Plot the training and validation loss\n    plt.plot(history.history['loss'], label='train')\n    plt.plot(history.history['val_loss'], label='test')\n    plt.title('model loss')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend()\n\n    return model, plt.gca()\n"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide input data into training test sets (70% training, 30% test), create keras sequential model with one hidden layer using a sigmoid activation function, compile the model with binary cross-entropy loss and an sgd optimizer specifying a learning rate, fit the model the training data in a non-verbose mode, and plot the roc curve for the model on the test set, including the auc score in the plot legend. parameters: x (np.ndarray): the input data. the input dimension is always 2. y (np.ndarray): the target data. returns: - keras.models.sequential: the trained keras model. - matplotlib.axes._axes.axes: the matplotlib axes object for the precision-recall curve plot. notes: - the title the axes should 'roc curve' - the x label is 'false positive rate' - the y label is 'true positive rate' requirements: - tensorflow.keras - sklearn.metrics.roc_curve - sklearn.metrics.auc - sklearn.model_selection.train_test_split - matplotlib example: >>> x = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> y = np.array([[0], [1], [1], [1]]) >>> model, ax = task_func(x, y) >>> isinstance(model, keras.models.sequential) true\n    \"\"\"\n    # Split the data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a keras sequential model\n    model = keras.models.Sequential([\n        keras.layers.Dense(1, activation='sigmoid', input_shape=(2,))\n    ])\n\n    # Compile the model\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.01), metrics=['accuracy'])\n\n    # Fit the model\n    model.fit(X_train, Y_train, epochs=100, verbose=0)\n\n    # Predict probabilities for the test set\n    Y_pred_proba = model.predict(X_test)\n\n    # Compute the false positive rate, true positive rate, and thresholds\n    fpr, tpr, thresholds = roc_curve(Y_test, Y_pred_proba)\n\n    # Compute the AUC score\n    auc_score = auc(fpr, tpr)\n\n    # Plot the ROC curve\n    plt.figure()\n    plt.plot(fpr, tpr, label=f'ROC curve (area = {auc_score:.2f})')\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model, plt.gca()\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads an rgb image, applies k-means clustering to segment image into 'n_clusters' regions, saves each region as separate image. the function returns numpy arrays of the original and segmented images. parameters: - image_path (str): the path to the rgb image file. default is 'image.jpg'. the image is expected to be in rgb format as a 3d array (height x width x channels), with channels in the order of rgb. - n_clusters (int): the number of clusters for k-means clustering. default is 3. a minimum of 1 cluster is allowed, although clustering with a single cluster will simply return the original image as the segmented image. - random_seed (int): the seed for the random number generator in k-means clustering. default is 42. returns: - tuple: a tuple containing two numpy arrays. the first array represents the original rgb image, and the second array represents the segmented image, with each pixel's color replaced by the centroid of the cluster it belongs to. raises: - filenotfounderror: if the image file does not exist at the specified path. - valueerror: if 'n_clusters' is not a positive integer. requirements: - opencv: for reading the image file and converting bgr to rgb. - numpy: for array manipulations. - os: for checking the existence of the image file. - sklearn.cluster: for applying k-means clustering. example: >>> create_dummy_image('image.jpg') >>> original_img_array, segmented_img_array = task_func('image.jpg', 3) >>> os.remove('image.jpg') >>> print(original_img_array.shape) # example output (10, 10, 3) >>> print(segmented_img_array.shape) # example output for n_clusters > 1 (10, 10, 3) note: - this function assumes the input image is in rgb format. - the segmented image array will have the same shape as the original image but with pixel colors replaced by their corresponding cluster centroid colors, effectively segmenting the image into regions based on color similarity. - clustering with a single cluster is allowed and will return the original image as both the original and segmented images, since all pixels will be assigned to the same cluster.\n    \"\"\"\n    # Check if the image file exists\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"The image file '{image_path}' does not exist.\")\n    \n    # Validate the number of clusters\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"'n_clusters' must be a positive integer.\")\n    \n    # Read the image in BGR format\n    bgr_image = cv2.imread(image_path)\n    \n    # Convert BGR to RGB\n    rgb_image = cv2.cvtColor(bgr_image, cv2.COLOR_BGR2RGB)\n    \n    # Reshape the image to a 2D array of pixels\n    pixels = rgb_image.reshape((-1, 3))\n    \n    # Apply k-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(pixels)\n    \n    # Assign each pixel to its cluster\n    segmented_pixels = kmeans.predict(pixels).reshape(rgb_image.shape[:2])\n    \n    # Replace each pixel's color with the centroid of its cluster\n    segmented_image = kmeans.cluster_centers_[segmented_pixels]\n    \n    return rgb_image, segmented_image\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate product matrix 'p' a 3d tensor 't', flatten the result, apply kmeans clustering the flattened data, and visualize it. parameters: p (numpy.ndarray): the input matrix. t (numpy.ndarray): the input tensor with shape (3, 3, 3). n_clusters (int): the number of clusters for kmeans clustering. default is 3. random_state (int): the random state for kmeans clustering. default is 0. n_init (int): number of time the k-means algorithm will be run with different centroid seeds. default is 10. returns: cluster_result (numpy.ndarray): the result of kmeans clustering. ax (matplotlib.axes.axes): the visualization of the kmeans clustering, with the title 'kmeans clustering visualization'. requirements: - numpy - sklearn - matplotlib example: >>> p = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1], [9, 6, 4], [2, 1, 1]]) >>> t = np.random.rand(3, 3, 3) >>> cluster_result, ax = task_func(p, t, n_clusters=3, random_state=0, n_init=10) >>> type(cluster_result) <class 'numpy.ndarray'> >>> type(ax) <class 'matplotlib.axes._axes.axes'>\n    \"\"\"\n    # Calculate product matrix 'p'\n    p = np.dot(P, T)\n    # Flatten the result\n    p_flat = p.flatten()\n    # Apply kmeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(p_flat.reshape(-1, 1))\n    # Visualize the kmeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(range(len(p_flat)), p_flat, c=cluster_result, cmap='viridis')\n    ax.set_title('kmeans clustering visualization')\n    plt.show()\n    return cluster_result, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate the voronoi diagram for number points 2d plot it. note: this function will raise errors when input is invalid, for example wrong type or shape. jittering is applied prior plotting. parameters: - points (np.ndarray): a numpy ndarray of shape (n_points, 2) with the coordinates of the points. - seed (int): random seed for reproducibility. defaults to 0. returns: tuple (vor, ax): a tuple containing: - vor (voronoi): a voronoi object representing the voronoi diagram of the points. - ax (axes): the axes of the plotted voronoi diagram. requirements: - numpy - scipy - matplotlib.pyplot example: >>> points = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> vor, ax = task_func(points) >>> type(vor) <class 'ipy.spatial.qhull.voronoi'> >>> type(ax) <class'matplotlib.axes._axes.axes'>\n    \"\"\"\n    # Check if points is a numpy array of shape (n_points, 2)\n    if not isinstance(points, np.ndarray) or points.shape[1] != 2:\n        raise ValueError(\"points must be a numpy ndarray of shape (n_points, 2)\")\n\n    # Apply jittering to the points\n    np.random.seed(seed)\n    jittered_points = points + np.random.randn(points.shape[0], points.shape[1]) * 0.01\n\n    # Calculate the voronoi diagram\n    vor = Voronoi(jittered_points)\n\n    # Plot the voronoi diagram\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax, show_points=True, show_vertices=False)\n\n    # Plot the original points\n    ax.plot(points[:, 0], points[:, 1], 'ro')\n\n    # Set the aspect ratio to equal\n    ax.set_aspect('equal')\n\n    # Show the plot\n    plt.show()\n\n    return vor, ax\n\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files with a specified extension from a source directory a destination directory. this function searches for files source directory match the given extension. if a file with the same name already exists in the destination directory, it not moved. parameters: - src_dir (str): the source directory path. - dest_dir (str): the destination directory path. - ext (str): the file extension to search for (without the leading dot). returns: - list: a list the full paths of files that were successfully moved. if a file was not moved because it already exists in the destination directory, it will not included in this list. raises: filenotfounderror: if either the source or destination directory does not exist requirements: - os - shutil - glob examples: >>> test_src_dir = './test_src' >>> test_dest_dir = './test_dest' >>> test_ext = 'txt' >>> os.makedirs(test_src_dir, exist_ok=true) >>> os.makedirs(test_dest_dir, exist_ok=true) >>> moved_files = task_func(test_src_dir, test_dest_dir, test_ext) >>> len(moved_files) > 0 # check if any files were moved true >>> 'test_file.txt' in [os.path.basename(path) for path in moved_files] # assuming test_file.txt exists in test_src_dir true >>> os.listdir(test_dest_dir) # verify that files were moved, and no duplicates exist in the destination ['test_file.txt']\n    \"\"\"\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory '{src_dir}' does not exist.\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory '{dest_dir}' does not exist.\")\n\n    src_files = glob.glob(os.path.join(src_dir, f'*.{ext}'))\n    moved_files = []\n\n    for src_file in src_files:\n        file_name = os.path.basename(src_file)\n        dest_file = os.path.join(dest_dir, file_name)\n\n        if not os.path.exists(dest_file):\n            shutil.move(src_file, dest_file)\n            moved_files.append(dest_file)\n\n    return moved_files\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load json string into a dictionary, normalize dictionary by doubling the numerical values, then create a pandas dataframe from the dictionary. this function processes a json string by converting into a dictionary, normalizes the data by doubling the numerical values, and then constructs a pandas dataframe from this dictionary. note: the function designed handle simple flat dictionaries, with values either single numerical values, lists numerical values, or strings that can be interpreted as numbers. it doubles the values of numerical data types within the dictionary, including those within lists and those in strings (which are extracted using regex), but the function does not process nested dictionaries. finally, it returns the dataframe with numerical values stored as floats and other types left as-is, or empty dataframe if the input json string is empty or does not contain any valid data structures for dataframe conversion. parameters: json_str (str): the json string. returns: dataframe: a pandas dataframe created from the dictionary. requirements: - pandas - json - re example: >>> json_str = '{\"a\": [1, 2, 3], \"b\": 4.9, \"c\": \"5\"}' >>> df = task_func(json_str) >>> type(df) <class 'pandas.core.frame.dataframe'> >>> print(df) a b c 0 2 9.8 10 1 4 9.8 10 2 6 9.8 10\n    \"\"\"\n    # Load json string into a dictionary\n    data = json.loads(json_str)\n    \n    # Normalize the dictionary by doubling the numerical values\n    normalized_data = {}\n    for key, value in data.items():\n        if isinstance(value, (int, float)):\n            normalized_data[key] = value * 2\n        elif isinstance(value, list):\n            normalized_data[key] = [item * 2 if isinstance(item, (int, float)) else item for item in value]\n        elif isinstance(value, str):\n            match = re.search(r'^-?\\d+(?:\\.\\d+)?$', value)\n            if match:\n                normalized_data[key] = float(value) * 2\n            else:\n                normalized_data[key] = value\n        else:\n            normalized_data[key] = value\n    \n    # Create a pandas dataframe from the normalized dictionary\n    df = pd.DataFrame([normalized_data])\n    \n    return df\n\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes a given bash script returns the cpu and memory usage the script's process. this function checks whether the script path exists, executes it a subprocess and uses psutil monitor the script's process for cpu and memory usage. note: - cpu usage a cumulative measure of the script process's cpu demand over the execution period, not an average across cores. - memory usage is reported as the sum of rss memory increments. the function aggregates these metrics until the script completes or the specified timeout is reached. it handles cases where the process becomes a zombie or is not found, and ensures the subprocess is terminated if it runs beyond the timeout. parameters: script_path (str): the path to the bash script to executed. path must exist. timeout (int, optional): maximum time (in seconds) the function should wait for the script to complete. defaults to 10 seconds. returns: dict: a dictionary containing: - 'cpu usage': the accumulated cpu usage in percentage. - 'memory usage': the accumulated memory usage in bytes. requirements: - subprocess - psutil - time - os examples: >>> resources = task_func('/path/to/script.sh') >>> resources {'cpu usage': 5.2, 'memory usage': 2048}\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"The script path {script_path} does not exist.\")\n\n    start_time = time.time()\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=os.setsid)\n\n    cpu_usage = 0\n    memory_usage = 0\n\n    while process.poll() is None and time.time() - start_time < timeout:\n        time.sleep(1)\n        cpu_usage += psutil.Process(process.pid).cpu_percent(interval=1)\n        memory_usage += psutil.Process(process.pid).memory_info().rss\n\n    if process.poll() is None:\n        os.killpg(os.getpgid(process.pid), signal.SIGKILL)\n        process.wait()\n\n    return {'cpu usage': cpu_usage, 'memory usage': memory_usage}\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create dataframe with a given (n) columns: \"x\" and \"y\" with random values, and \"category\" with categories from given categories list. each category at least once if n is greater than or equal to number of categories, otherwise is randomly sampled without replacement from categories. finally, draw a scatter plot of \"x\" vs \"y colored by \"category\". parameters: - n (int, optional): number of rows for the dataframe. defaults to 100. - categories (list, optional): list of categories. defaults to ['a', 'b', 'c', 'd', 'e']. - seed (int, optional): random seed for reproducibility. defaults to 42. returns: tuple: a tuple containing: - dataframe: the dataframe. - axes: the axes of the scatter plot. requirements: - numpy - pandas - matplotlib.pyplot: >>> df, ax = task_func() >>> df.head() x y category 0 0.239562 0.385098 c 1 0.144895 0.851137 d 2 0.489453 0.316922 c 3 0.985650 0.169493 e 4 0.242055 0.556801 >>> type(ax) < 'plotlib.axes._axes.axes'>\n    \"\"\"\n    np.random.seed(seed)\n    data = {\n        \"x\": np.random.rand(N),\n        \"y\": np.random.rand(N),\n        \"category\": np.random.choice(CATEGORIES, size=N, replace=N >= len(CATEGORIES))\n    }\n    df = pd.DataFrame(data)\n    ax = df.plot.scatter(x=\"x\", y=\"y\", c=\"category\", cmap=\"viridis\")\n    plt.show()\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate a time series from a given epoch start time end time with a specified step trend. time series plotted with timestamps on the x-axis ('time') and values on the y-axis ('value'). the values generated from a normal distribution, and a linear trend is added based on the provided trend value. parameters: - start_time (int): the start epoch time milliseconds. - end_time (int): the end epoch time in milliseconds. must be greater than start_time. - step (int): the step in milliseconds between each data point. must be agreater than 0. - trend (float): the trend value to be added to the time series. acts as a multiplier for the index, adding a linear trend to the randomly generated values. - seed (int, optional): seed for reproducibility. default is 42. returns: - ax (matplotlib.pyplot.axes): the axes object the generated plot, with the x-axis labeled 'time' and y-axis labeled 'value'. requirements: - datetime.datetime - pandas - numpy example: >>> ax = task_func(0, 10000, 100, 0.001) >>> type(ax) <class 'matplotlib.axes._axes.axes'> >>> ax.get_xticklabels() [text(-20.0, 0, '1970-01-01 10:00:08.000000'), text(0.0, 0, '1970-01-01 10:00:00.000000'), text(20.0, 0, '1970-01-01 10:00:02.000000'), text(40.0, 0, '1970-01-01 10:00:04.000000'), text(60.0, 0, '1970-01-01 10:00:06.000000'), text(80.0, 0, '1970-01-01 10:00:08.000000'), text(100.0, 0, ''), text(120.0, 0, '')]\n    \"\"\"\n    np.random.seed(seed)\n    time_series = pd.DataFrame({\n        'time': pd.date_range(start=datetime.utcfromtimestamp(start_time / 1000), end=datetime.utcfromtimestamp(end_time / 1000), freq=f'{step}ms'),\n        'value': np.random.normal(size=len(pd.date_range(start=datetime.utcfromtimestamp(start_time / 1000), end=datetime.utcfromtimestamp(end_time / 1000), freq=f'{step}ms')))\n    })\n    time_series['value'] += trend * time_series.index\n    return time_series\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Generate sales data for five products from given epoch time up current time. this function checks input validity, for each day between the date the given epoch time to the date of the current time, generates random sales data for each of the 5 products. parameters: - epoch_milliseconds (int): start epoch time milliseconds. must be before current system time. - random_seed (int): seed for reproducibility of random sales data. defaults to 0. - products (list of str): product list to choose from. must contain 5 unique strings. defaults to ['product1', 'product2', 'product3', 'product4', 'product5']. returns: - pd.dataframe: a dataframe containing sales data with columns 'product' (string), 'date' (datetime), 'sales' (integer). sales quantity is randomly sampled from range [10, 50]. requirements: - pandas - datetime.datetime - random example: >>> sales_data = task_func(1236472051807, random_seed=42) >>> type(sales_data) <class 'pandas.core.frame.dataframe'> >>> sales_data.head() product date sales 0 product4 2009-03-08 11:27:31.807 50 1 product5 2009-03-08 11:27:31.807 17 2 product1 2009-03-08 11:27:31.807 11 3 product3 2009-03-08 11:27:31.807 27 4 product2 2009-03-08 11:27:31.807 25\n    \"\"\"\n    if not isinstance(epoch_milliseconds, int):\n        raise ValueError(\"epoch_milliseconds must be an integer\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"random_seed must be an integer\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"products must be a list of 5 unique strings\")\n    if not all(isinstance(product, str) for product in products):\n        raise ValueError(\"products must be a list of strings\")\n    if not all(product.islower() for product in products):\n        raise ValueError(\"products must be all lowercase strings\")\n    if not all(product.isalpha() for product in products):\n        raise ValueError(\"products must be all alphabetic strings\")\n    if not all(product.isalnum() for product in products):\n        raise ValueError(\"products must be all alphanumeric strings\")\n    if not all(product.isidentifier() for product in products):\n        raise ValueError(\"products must be all valid python identifiers\")\n    if not all(product.isprintable() for product in products):\n        raise ValueError(\"products must be all printable strings\")\n    if not all(product.isspace() for product in products):\n        raise ValueError(\"products must be all whitespace strings\")\n    if not all(product.isupper() for product in products):\n        raise ValueError(\"products must be all uppercase strings\")\n    if not all(product.istitle() for product in products):\n        raise ValueError(\"products must be all title case strings\")\n    if not all(product.isnumeric() for product in products):\n        raise ValueError(\"products must be all numeric strings\")\n    if not all(product.isdecimal() for product in products):\n        raise ValueError(\"products must be all decimal strings\")\n    if not all(product.isdigit() for product in products):\n        raise ValueError(\"products must be all digit strings\")\n    if not all(product.isalpha() for product in products):\n        raise ValueError(\"products must be all alphabetic strings\")\n    if not all(product.isalnum"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert json strings excel file, empty json arrays. this function takes json string into an excel file with specified filename. if the json string represents an empty array, the function creates an excel file with no data rows. parameters: - json_str (str, bytes, bytearray): the json content as a string, bytes, or bytearray. - filename (str): the name of the excel file to created. - sheet_name (str, optional): the name of the sheet the excel file. default is \"sheet1\". returns: - str: the absolute path of the created excel file. raises: - valueerror: if json_str is not valid json. - typeerror: if json_str is not a string, bytes, or bytearray. - exception: for errors related to file writing. requirements: - xlwt: for writing to excel files. - xlrd - os: for file path operations. - pandas: for data manipulation. example: >>> json_str = '[{\"name\": \"john\", \"age\": 30}, {\"name\": \"jane\", \"age\": 28}]' >>> true if task_func(json_str, 'data.xls').endswith('data.xls') else false # true >>> os.remove('data.xls')\n    \"\"\"\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be a string, bytes, or bytearray\")\n    try:\n        data = pd.read_json(json_str)\n    except ValueError:\n        raise ValueError(\"json_str is not valid json\")\n    if data.empty:\n        workbook = xlwt.Workbook()\n        worksheet = workbook.add_sheet(sheet_name)\n        workbook.save(filename)\n        return os.path.abspath(filename)\n    else:\n        data.to_excel(filename, sheet_name=sheet_name, index=False)\n        return os.path.abspath(filename)\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates graph daily activity durations for a specified number of days past using randomly generated data for activities. this function randomly generates acitivity durations from 0 to 120 for each activity from [\"running\", \"swimming\", \"cycling\", \"yoga\", \"weight training\"]. parameters: days_in_past (int, optional): the number of days in the past for to generate the graph. defaults to 7 days. must in the past. random_seed (int, optional): seed for random number generation to ensure reproducibility. defaults to 0. returns: tuple containing - ax (matplotlib.pyplot.axes): dataframe used for plotting. - df (pd.dataframe): seaborn lineplot with date on the x-axis, duration on the y-axis, activity as hue. requirements: - datetime.datetime - datetime.timedelta - pandas - random - seaborn example: >>> ax, df = task_func(7, random_seed=42) >>> type(ax) <class 'matplotlib.axes._axes.axes'> a sample row from the returned dataframe might look like: date activity duration yyyy-mm-dd running 45\n    \"\"\"\n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n\n    # Generate a list of dates for the specified number of days in the past\n    dates = [datetime.now() - timedelta(days=i) for i in range(days_in_past)]\n\n    # Generate a list of activities\n    activities = [\"running\", \"swimming\", \"cycling\", \"yoga\", \"weight training\"]\n\n    # Generate a list of random durations for each activity for each date\n    durations = [[random.randint(0, 120) for _ in range(len(dates))] for _ in range(len(activities))]\n\n    # Create a dataframe with the dates, activities, and durations\n    df = pd.DataFrame({\n        \"date\": dates * len(activities),\n        \"activity\": activities * len(dates),\n        \"duration\": [item for sublist in durations for item in sublist]\n    })\n\n    # Create a seaborn lineplot with date on the x-axis, duration on the y-axis, activity as hue\n    ax = sns.lineplot(x=\"date\", y=\"duration\", hue=\"activity\", data=df)\n\n    # Set the x-axis label to \"Date\"\n    ax.set_xlabel(\"Date\")\n\n    # Set the y-axis label to \"Duration\"\n    ax.set_ylabel(\"Duration\")\n\n    # Set the title of the plot to \"Daily Activity Durations\"\n    ax.set_title(\"Daily Activity Durations\")\n\n    # Rotate the x-axis labels to 45 degrees for better readability\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n\n    # Return the ax and df\n    return ax, df\n\n"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create dataframe stock prices for a specified number of days past using random data. parameters: - days_in_past (int, optional): the number of days in the past for we want stock data. must positive. defaults 7. - stock_names (list of str, optional): the list of stock names for which we want data. must not be empty. defaults to [\"aapl\", \"googl\", \"msft\", \"amzn\", \"fb\"]. - random_seed (int, optional): the seed for random number generation to ensure reproducibility. defaults to 0. returns: dataframe: a pandas dataframe containing random stock prices for the specified number of days. prices floats in [0.0,1.0). requirements: - datetime.datetime - pandas - numpy example: >>> df = task_func(5, random_seed=42) >>> type(df) <class 'pandas.core.frame.dataframe'> >>> print(df.head(1)) aapl googl msft amzn fb 2024-03-30 37.454012 95.071431 73.199394 59.865848 15.601864\n    \"\"\"\n    np.random.seed(random_seed)\n    dates = pd.date_range(end=datetime.now(), periods=days_in_past)\n    data = np.random.rand(days_in_past, len(stock_names))\n    df = pd.DataFrame(data, index=dates, columns=stock_names)\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two csv files and create difference report. this function compares two csv files line by line and provides a detailed report the differences. it represents each difference with a line number, a status indicator, and the content of line. parameters: file_path1 (str): the file path of the first csv file. file_path2 (str): the file path of the second csv file. delimiter (str, optional): delimiter character used the csv files. default is ','. quotechar (str, optional): quote character used in the csv files. default is '\"'. returns: dataframe: a pandas dataframe with the differences. the dataframe contains the following columns: - 'line number': the line number in the file where the difference occurs. - 'status': a character indicating the type of difference: - ' ': no change (line is the same in both files). - '-': line present in the first file but not in the second. - '+': line present in the second file but not in the first. - 'content': the actual text content of the line from either file. raises: filenotfounderror: if either of the files cannot found. valueerror: if either of the files is empty. exception: for other io related errors. requirements: - pandas: for data manipulation and analysis. - csv: for reading csv files. - difflib: for performing the difference operation. - os example: >>> create_dummy_test_files() >>> df = task_func('file1.csv', 'file2.csv') >>> os.remove('file1.csv') >>> os.remove('file2.csv') >>> df.head() line number status content 0 1 ('name', 'age') 1 2 - ('alice', '30') 2 3 + ('alice', '31') 3 4 ('bob', '25')\n    \"\"\"\n    # Read the csv files\n    try:\n        with open(file_path1, 'r', newline='', encoding='utf-8') as file1:\n            reader1 = csv.reader(file1, delimiter=delimiter, quotechar=quotechar)\n            lines1 = list(reader1)\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File {file_path1} not found.\")\n    except ValueError:\n        raise ValueError(f\"File {file_path1} is empty.\")\n    except Exception as e:\n        raise e\n\n    try:\n        with open(file_path2, 'r', newline='', encoding='utf-8') as file2:\n            reader2 = csv.reader(file2, delimiter=delimiter, quotechar=quotechar)\n            lines2 = list(reader2)\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File {file_path2} not found.\")\n    except ValueError:\n        raise ValueError(f\"File {file_path2} is empty.\")\n    except Exception as e:\n        raise e\n\n    # Compare the lines\n    diffs = []\n    for i in range(max(len(lines1), len(lines2))):\n        line1 = lines1[i] if i < len(lines1) else []\n        line2 = lines2[i] if i < len(lines2) else []\n        diff = list(ndiff(line1, line2))\n        if diff:\n            diffs.append((i + 1, diff))\n\n    # Create the dataframe\n    data = []\n    for line_number, diff in diffs:\n        status = ' '\n        content = []\n        for change in diff:\n            if change.startswith('-'):\n                status = '-'\n                content.append(change[2:])\n            elif change.startswith('+'):\n                status = '+'\n                content.append(change[2:])\n            else:\n                content.append(change)\n        data.append([line_number, status, ','.join(content)])"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze list of employee data and calculate statistics for a given column. if data list is empty, the sum will 0 and mean, min, and max values will be nan. the function also visualizes the data with a pie chart, using the age column as labels. parameters: column (str): the column analyze. valid values are 'age','salary', and 'experience'. if invalid, the function will raise keyerror. data (list of lists): the employee data, where each list represents [age, salary, experience]. returns: tuple: a tuple containing: - dict: a dictionary with the'sum','mean','min', and'max' of the column. - axes object: the pie chart visualizing the column data. requirements: - pandas - numpy - matplotlib.pyplot example: >>> data = [[25, 50000, 2], [30, 75000, 5], [35, 100000, 7], [40, 125000, 10], [45, 150000, 12]] >>> stats, ax = task_func('salary', data) >>> stats {'sum': 500000,'mean': 100000.0,'min': 50000,'max': 150000} >>> type(ax) <class 'plotlib.axes._axes.axes'>\n    \"\"\"\n    if column not in ['age', 'salary', 'experience']:\n        raise KeyError(\"Invalid column. Valid columns are 'age', 'salary', and 'experience'.\")\n\n    df = pd.DataFrame(data, columns=['age', 'salary', 'experience'])\n    stats = df[column].describe().to_dict()\n\n    ax = df[column].value_counts().plot(kind='pie', autopct='%1.1f%%')\n    ax.set_title(f'Distribution of {column}')\n    ax.set_ylabel('')\n\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze list fitness data, calculate sum, the mean, the minimum, the maximum of a certain column and draw a line chart. additionally, validate the numeric values for steps, calories burned, and distance walked are non-negative. parameters: column (str): the column to analyze from the data. the allowed columns are: 'date', 'steps', 'calories burned', 'distance walked'. data (list of list): a list where each inner list contains a datetime object representing the date, followed by numeric values for steps, calories burned, and distance walked that order. each numeric value must non-negative. must not be empty. returns: tuple: a tuple containing: - dict: a dictionary with the sum, mean, min, max of the column. - matplotlib.axes.axes: the axes object of the plotted line chart. the line chart will have date on its x-axis, the column value on its y-axis, and title line chart of (column). requirements: - pandas - numpy - matplotlib.pyplot raises: - keyerror: if the specified column is not valid. - valueerror: if the data list is empty or if any of the numeric values for steps, calories burned, and distance walked are negative. example: >>> data = [[datetime(2022, 1, 1), 5000, 200, 3.5], ... [datetime(2022, 1, 2), 5500, 220, 4.0], ... [datetime(2022, 1, 3), 6000, 240, 4.5]] >>> stats, ax = task_func('steps', data) >>> type(ax) <class 'matplotlib.axes._axes.axes'> >>> print(stats) {'sum': 16500, 'mean': 5500.0, 'min': 5000, 'max': 6000}\n    \"\"\"\n    if column not in ['date', 'steps', 'calories burned', 'distance walked']:\n        raise KeyError(f\"Invalid column: {column}\")\n    if not data:\n        raise ValueError(\"Data list is empty\")\n    for row in data:\n        if len(row) != 4:\n            raise ValueError(\"Each row must contain 4 elements: date, steps, calories burned, distance walked\")\n        if not all(isinstance(x, (int, float)) for x in row[1:]):\n            raise ValueError(\"All numeric values must be non-negative\")\n        if row[1] < 0 or row[2] < 0 or row[3] < 0:\n            raise ValueError(\"All numeric values must be non-negative\")\n    df = pd.DataFrame(data, columns=['date', 'steps', 'calories burned', 'distance walked'])\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    ax = df[column].plot(kind='line', title=f'Line chart of {column}')\n    plt.show()\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read list dictionaries from a json file, calculate mean median for each key (ignoring non-numeric or missing values), and convert the results into a pandas dataframe. parameters: - input_file (str, optional): the input json file name. defaults 'data.json'. the file should contain a list of dictionaries. if a key missing a dictionary, is treated as nan for that record. non-numeric values are ignored for the calculation of mean and median. if all values for a key are non-numeric or missing, the statistics for that key will nan. returns: - df (pd.dataframe): a dataframe indexed and sorted by the variable names (keys) from the input data, containing columns 'mean' and 'median'. requirements: - numpy - collections - json - pandas example: >>> df = task_func('data_1.json') a mean median b mean median c mean median\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Initialize a dictionary to store mean and median values\n    stats = defaultdict(lambda: {\"mean\": np.nan, \"median\": np.nan})\n\n    # Calculate mean and median for each key\n    for record in data:\n        for key, value in record.items():\n            if isinstance(value, (int, float)):\n                stats[key][\"mean\"] = (\n                    stats[key][\"mean\"] * stats[key][\"count\"] + value\n                ) / (stats[key][\"count\"] + 1)\n                stats[key][\"median\"] = np.nanmedian([stats[key][\"median\"], value])\n                stats[key][\"count\"] += 1\n\n    # Convert the dictionary to a pandas dataframe\n    df = pd.DataFrame(stats).T\n    df.index.name = \"variable\"\n\n    return df\n\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows from csv file using csv library, convert duplicated rows into a pandas dataframe, plot using matplotlib. parameters: - file_path (str): the path the csv file. returns: - dict: a dictionary with duplicate rows as keys and their counts as values. - axes: a matplotlib axes object with the bar chart duplicate rows. requirements: - csv - collections.counter - pandas - matplotlib.pyplot example: >>> duplicates, ax = task_func(\"sample_data.csv\") >>> duplicates {('alice', '25', 'new york'): 3, ('bob', '30', 'london'): 2} >>> type(ax) <class 'matplotlib.axes._axes.axes'> note: ensure the csv file is proper format and has a .csv extension. other file formats will raise a valueerror.\n    \"\"\"\n    # Read the csv file\n    with open(file_path, 'r') as file:\n        reader = csv.reader(file)\n        headers = next(reader)\n        data = [row for row in reader]\n\n    # Count the occurrences of each row\n    row_counts = Counter(tuple(row) for row in data)\n\n    # Identify duplicate rows\n    duplicates = {row: count for row, count in row_counts.items() if count > 1}\n\n    # Convert duplicates to a pandas dataframe\n    df = pd.DataFrame(list(duplicates.keys()), columns=headers)\n\n    # Plot the duplicate rows\n    ax = df.plot(kind='bar', figsize=(10, 5))\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Duplicate Rows in CSV File')\n\n    return duplicates, ax\n\n"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate dataframe record age distribution for the duplicate names. this function takes a dataframe with 'name' and 'age' columns. if age provided as floats, they will rounded down to the nearest integer. age must not be negative, otherwise the function raises valueerror. then, the function identifies duplicate names and records the age distribution. returns a counter object with the age distribution and a histogram plot showing the distribution of ages for duplicate names, with age on the x-axis and count on the y-axis. bins calculated based on the minimum and maximum ages found among the duplicates, adjusted by.5 to ensure integer ages fall within bins. parameters: df: pd.dataframe - a dataframe with columns 'name' and 'age'. must not be empty. if empty, the function raises valueerror. returns: counter: age distribution among duplicate names. plt.axes or none: histogram plot displaying age distribution, or none if are no duplicates. requirements: - pandas - numpy - collections.counter - seaborn - matplotlib.pyplot raises: - valueerror: if the dataframe is empty or if age is negative. example: >>> df = pd.dataframe({'name': ['alice', 'bob', 'alice'], 'age': [25, 26, 25]}) >>> duplicates_counter, ax = task_func(df) >>> duplicates_counter counter({25: 2}) >>> type(ax) < 'plotlib.axes._axes.axes'>\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"Dataframe is empty\")\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n    df['age'] = df['age'].apply(lambda x: int(x))\n    duplicates = df[df.duplicated('name', keep=False)]\n    if duplicates.empty:\n        return None, None\n    duplicates_counter = Counter(duplicates['age'])\n    min_age = duplicates['age'].min()\n    max_age = duplicates['age'].max()\n    bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n    ax = sns.histplot(data=duplicates, x='age', bins=bins, kde=False)\n    ax.set_title('Age Distribution among Duplicate Names')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    return duplicates_counter, ax\n\n"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify count duplicate values dataframe's 'value' column. this function also plots a histogram for all values in 'value' column and overlays a normal distribution curve on the histogram. parameters: df (pd.dataframe): dataframe containing a numeric 'value' column. if empty, the function will return empty counter and empty plot. bins (int, optional): number bins for the histogram. defaults to 4. returns: tuple: a tuple containing: - counter: a counter object with the count of each duplicate value. - axes: a matplotlib.axes.axes object that represents the plot of the histogram with the 'value' column data. if applicable, a normal distribution curve fitted to the data overlaid. the histogram's bars green with 60% opacity, and the normal distribution curve is black with a linewidth of 2. the plot is titled \"distribution\", with \"value\" as the x-axis label and \"frequency\" as the y-axis label. requirements: - collections.counter - numpy - scipy.stats.norm - matplotlib.pyplot example: >>> df = pd.dataframe({'value': [1, 2, 2, 3, 3, 4, 3, 2, 1, 4, 4, 4, 2, 2, 3, 1, 1, 1, 3, 2]}) >>> counter, ax = task_func(df) >>> ax <axes: title={'center': 'distribution'}, xlabel='value', ylabel='frequency'> >>> counter counter({2: 6, 1: 5, 3: 5, 4: 4})\n    \"\"\"\n    if df.empty:\n        return Counter(), None\n\n    value_counts = df['value'].value_counts()\n    duplicates = value_counts[value_counts > 1]\n\n    fig, ax = plt.subplots()\n    ax.hist(df['value'], bins=bins, color='g', alpha=0.6)\n\n    if not duplicates.empty:\n        mean, std = norm.fit(df['value'])\n        xmin, xmax = ax.get_xlim()\n        x = np.linspace(xmin, xmax, 100)\n        p = norm.pdf(x, mean, std)\n        ax.plot(x, p, 'k', linewidth=2)\n\n    ax.set_title('distribution')\n    ax.set_xlabel('value')\n    ax.set_ylabel('frequency')\n\n    return duplicates, ax\n\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Generate pandas dataframe with random values based on lists 'a' 'b', and plot as a bar chart. list 'a' sets dataframe's row indices, while the length list 'b' determines the number of columns using predefined names from the 'columns = ['a', 'b', 'c', 'd', 'e']' list. parameters: - a (list): a list used to define the number of rows the dataframe. - b (list): another list used to define the number of columns in the dataframe. the actual column names predefined. returns: - matplotlib.axes.axes: the axes object of the plotted bar chart. requirements: - numpy - pandas - matplotlib data structure: - uses pandas dataframe to structure the data. example: >>> ax = task_func([1, 2, 3], ['a', 'b', 'c', 'd', 'e'])\n    \"\"\"\n    # Generate dataframe\n    data = np.random.rand(len(a), len(b))\n    df = pd.DataFrame(data, index=a, columns=b)\n\n    # Plot bar chart\n    ax = df.plot(kind='bar')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    This function plots bar chart monthly data values for a single year, with '' on x-axis 'value' on the y-axis. parameters: data (str): the data string in the format 'yyyy-mm-value'. returns: axes object: a matplotlib.axes.axes object representing the plot, with the title formatted as'monthly data for yyyy', x label as'month', and y label as 'value'. requirements: - pandas - datetime - matplotlib.pyplot example: >>> data = '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-05-250,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650' >>> ax = task_func(data)\n    \"\"\"\n    # Convert the data string into a pandas DataFrame\n    df = pd.DataFrame([x.split(',') for x in data.split(' ')], columns=['date', 'value'])\n    df['date'] = pd.to_datetime(df['date'])\n    df['month'] = df['date'].dt.strftime('%b')\n    df['year'] = df['date'].dt.year\n\n    # Plot the data\n    ax = df.groupby(['year', 'month'])['value'].sum().unstack().plot(kind='bar', figsize=(10, 6))\n    ax.set_title(f'Monthly data for {df[\"year\"].iloc[0]}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    This function histogram visualize of values provided a string format, with 'value' on the x-axis, 'frequency' on the y-axis 'histogram of values' as the title. parameters: data (str): the data string in the format 'value-value-value-...'. returns: ax (matplotlib.axes._axes.axes): the axes object of the created histogram. requirements: - pandas - numpy - matplotlib.pyplot notes: - the histogram bins as np.arange(data.min(), data.max()+2) 0.5 example: >>> data = '1-2-3-4-5-6-7-8-9-10' >>> ax = task_func(data)\n    \"\"\"\n    # Convert the string data into a numpy array of integers\n    values = np.array([int(value) for value in data.split('-')])\n    \n    # Create the histogram\n    ax = plt.hist(values, bins=np.arange(values.min(), values.max()+2) - 0.5, edgecolor='black')\n    \n    # Set the title and labels\n    plt.title('Histogram of Values')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    # Show the plot\n    plt.show()\n    \n    return ax\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine wave a specified length adjusts a curve using curve_fit from scipy.optimize. parameters: - array_length (int): length of the sine wave. defaults to 100. - noise_level (float): level of noise added to the sine wave. defaults to 0.2. returns: -: a plot showing the noisy sine wave and its curve. requirements: - numpy - scipy.optimize - matplotlib.pyplot example: >>> ax = task_func(100, 0.2)\n    \"\"\"\n    x = np.linspace(0, 2 * np.pi, array_length)\n    y = np.sin(x) + np.random.normal(0, noise_level, array_length)\n\n    def sine_func(x, a, b, c):\n        return a * np.sin(b * x + c)\n\n    popt, pcov = curve_fit(sine_func, x, y)\n\n    plt.plot(x, y, 'b-', label='Noisy Sine Wave')\n    plt.plot(x, sine_func(x, *popt), 'r--', label='Fitted Curve')\n    plt.legend()\n    plt.show()\n\n    return plt\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads csv file, normalizes text it to ascii, counts the words, returns the 10 most common words along with their frequencies as a matplotlib bar plot and a list tuples. parameters: csv_file (str): the path to the csv file. returns: tuple: a tuple containing matplotlib.axes.axes object for the bar plot and a list of the 10 most common words with their frequencies. raises: filenotfounderror: if the csv file cannot found at the specified path. ioerror: if error in reading the file. requirements: - unicodedata - csv - collections - matplotlib.pyplot example: >>> create_dummy_csv_file('dummy.csv') >>> ax, most_common_words = task_func('dummy.csv') >>> os.remove('dummy.csv') >>> type(ax) <class 'matplotlib.axes._axes.axes'> >>> type(most_common_words) <class 'list'> note: the function assumes the csv file contains text data and that the file is properly formatted.\n    \"\"\"\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            text = ' '.join([row[0] for row in reader])\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The file cannot be found at the specified path.\")\n    except IOError:\n        raise IOError(\"Error in reading the file.\")\n\n    # Normalize text to ASCII\n    normalized_text = ''.join(c for c in unicodedata.normalize('NFKD', text) if unicodedata.category(c) != 'Mn')\n\n    # Count words\n    word_counts = Counter(normalized_text.split())\n\n    # Get the 10 most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar([word for word, freq in most_common_words], [freq for word, freq in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('10 Most Common Words')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return ax, most_common_words\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list normally distributed random numbers plot their histogram and probability density function (pdf). parameters: - size (int): number of random numbers generate. default 1000. requirements: - numpy - scipy.stats - matplotlib.pyplot returns: - matplotlib.figure.figure: a figure object containing the histogram and pdf plot. example: >>> import matplotlib >>> fig = task_func(size=500) >>> isinstance(fig, matplotlib.figure.figure) # check if the output is a matplotlib figure object true >>> len(fig.axes[0].lines) == 1 # ensure is one line plot on the axes for the pdf true >>> len(fig.axes[0].patches) > 10 # check if there histogram bars (patches) present true\n    \"\"\"\n    # Generate random numbers\n    data = np.random.randn(size)\n\n    # Calculate the histogram\n    hist, bin_edges = np.histogram(data, bins=30, density=True)\n\n    # Calculate the probability density function\n    pdf = stats.norm.pdf(bin_edges[:-1], np.mean(data), np.std(data))\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot the histogram\n    ax.hist(data, bins=30, density=True, alpha=0.5, label='Histogram')\n\n    # Plot the pdf\n    ax.plot(bin_edges[:-1], pdf, color='red', label='PDF')\n\n    # Set labels and title\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    ax.set_title('Normal Distribution Histogram and PDF')\n\n    # Add legend\n    ax.legend()\n\n    # Show the plot\n    plt.show()\n\n    return fig\n\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates an rsa public and private key pair and saves private key file after encrypting it with a password using aes encryption. returns the public key and the filename of the encrypted private key, along with encryption details for testing. the name of the output file a in the format of \"private_key_<number>.txt\", where <number> is a the hex representation of the 8 randomly generated bytes. returns: rsa.publickey: the rsa public key. str: the filename where the encrypted private key is stored. bytes: the encryption password, for testing decryption. bytes: the encryption nonce, for testing decryption. requirements: - rsa - os - crypto.cipher.aes - crypto.random.get_random_bytes - base64.b64encode - base54.b64decode examples: >>> pub_key, filename, password, nonce = task_func() >>> isinstance(pub_key, rsa.publickey) true >>> isinstance(filename, str) true >>> isinstance(password, bytes) true >>> isinstance(nonce, bytes) true\n    \"\"\"\n    # Generate RSA key pair\n    (pub_key, priv_key) = rsa.newkeys(2048)\n\n    # Generate random password and nonce\n    password = get_random_bytes(8)\n    nonce = get_random_bytes(16)\n\n    # Encrypt private key with AES\n    cipher = AES.new(password, AES.MODE_GCM, nonce)\n    encrypted_priv_key = cipher.encrypt(priv_key.save_pkcs1())\n\n    # Save encrypted private key to file\n    filename = f\"private_key_{nonce.hex()}.txt\"\n    with open(filename, \"wb\") as f:\n        f.write(encrypted_priv_key)\n\n    return pub_key, filename, password, nonce\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates rsa public and private keys, encrypts a file using aes encryption, and encrypts the aes key with the public rsa key. the encrypted file and the encrypted aes key saved separate new files. this method demonstrates a hybrid encryption approach. parameters: file_path (str): the path to the file to encrypted. returns: rsa.publickey: the rsa public key. str: the filename the encrypted file. str: the filename of the file containing the encrypted aes key. requirements: - rsa - os - cryptography.hazmat.backends.default_backend - cryptography.hazmat.primitives.ciphers.cipher - cryptography.hazmat.primitives.ciphers.algorithms - cryptography.hazmat.primitives.ciphers.modes - cryptography.hazmat.primitives - base64.b64encode examples: >>> pub_key, encrypted_file, encrypted_key_file = task_func('my_file.txt') >>> isinstance(pub_key, rsa.publickey) true >>> encrypted_file.endswith('.encrypted') true >>> encrypted_key_file.endswith('.encrypted') true\n    \"\"\"\n    # Generate RSA keys\n    (pub_key, priv_key) = rsa.newkeys(2048)\n\n    # Read the file\n    with open(file_path, 'rb') as file:\n        data = file.read()\n\n    # Generate AES key\n    aes_key = os.urandom(32)\n\n    # Create AES cipher\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(os.urandom(16)), backend=default_backend())\n\n    # Encrypt the data\n    encryptor = cipher.encryptor()\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(data) + padder.finalize()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt the AES key with RSA\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n\n    # Save the encrypted file\n    encrypted_file_path = file_path + '.encrypted'\n    with open(encrypted_file_path, 'wb') as file:\n        file.write(encrypted_data)\n\n    # Save the encrypted AES key\n    encrypted_key_file_path = file_path + '.encrypted_key'\n    with open(encrypted_key_file_path, 'wb') as file:\n        file.write(encrypted_aes_key)\n\n    return pub_key, encrypted_file_path, encrypted_key_file_path\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Extracts the text href attributes all anchor tags from given url's html content, and returns this data a pandas dataframe along with the time of data extraction. parameters: url (str): the url from fetch the html content. returns: pandas.dataframe: a dataframe with columns 'text', 'href', and 'fetch_time'. each row corresponds to anchor tag in the html, with 'text' and 'href' containing the text and the hyperlink reference of the anchor tag, respectively. 'fetch_time' contains the timestamp of when the data was fetched in the format 'yyyy-mm-dd hh:mm:ss'. raises: valueerror: if the provided url invalid or empty. urlerror: if is an issue with network connectivity or the server. requirements: - urllib.request - pyquery - datime - pandas - urllib.error example: >>> df = task_func('https://en.wikibooks.org/wiki/main_page') note: the function requires internet connectivity to fetch html content.\n    \"\"\"\n    if not url:\n        raise ValueError(\"Invalid or empty URL\")\n    try:\n        response = urllib.request.urlopen(url)\n        html_content = response.read()\n    except (urllib.error.URLError, ValueError) as e:\n        raise e\n    doc = pq(html_content)\n    anchor_tags = doc('a')\n    data = []\n    for tag in anchor_tags:\n        text = tag.text\n        href = tag.get('href')\n        data.append((text, href))\n    df = pd.DataFrame(data, columns=['text', 'href'])\n    df['fetch_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    return df\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for specified number of hours and save in csv file with coloumns 'time', 'temperature', 'humidity' and 'pressure'. parameters: - hours (int): the number of hours for sensor data is generated. - output_dir (str, optional): the output file path returns: - hours (int): number of hours to generate data for. requirements: - datetime - os - random - csv example: >>> file_path = task_func(1) # generate data for 1 hour >>> os.path.exists(file_path) # check if the file was actually created true >>> isinstance(file_path, str) # validate that the return type is a string true >>> 'sensor_data.csv' in file_path # ensure the filename is correct true\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['time', 'temperature', 'humidity', 'pressure'])\n\n        for hour in range(hours):\n            for minute in range(60):\n                timestamp = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)\n                temperature = randint(20, 30)\n                humidity = randint(40, 60)\n                pressure = randint(950, 1050)\n                writer.writerow([timestamp.strftime('%Y-%m-%d %H:%M:%S'), temperature, humidity, pressure])\n\n    return file_path\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data for different vehicle types over specified number hours, saves data to a csv file with coloumns 'time', 'car', 'bus', 'truck', 'bike', and plots the data in a line chart with 'time' on x-axis and 'vehicle count' on y-axis. parameters: - hours (int): number of hours to generate data for. - output_dir (str, optional): the output file path returns: - tuple: path to the csv file and the matplotlib axes object of the line plot. requirements: - pandas - os - csv - matplotlib.pyplot - random - datetime example: >>> import matplotlib >>> file_path, ax = task_func(2) # generate data for 2 hours >>> isinstance(file_path, str) true >>> 'traffic_data.csv' in file_path true >>> isinstance(ax, matplotlib.axes.axes) true\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate data\n    data = []\n    for hour in range(hours):\n        time = datetime.strptime(f'2022-01-01 {hour:02d}:00:00', '%Y-%m-%d %H:%M:%S')\n        vehicle_counts = {vehicle: randint(0, 100) for vehicle in VEHICLE_TYPES}\n        data.append([time] + list(vehicle_counts.values()))\n\n    # Save data to csv\n    file_path = os.path.join(output_dir, 'traffic_data.csv')\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['time'] + VEHICLE_TYPES)\n        writer.writerows(data)\n\n    # Plot data\n    df = pd.read_csv(file_path)\n    df['time'] = pd.to_datetime(df['time'])\n    df.set_index('time', inplace=True)\n    ax = df.plot(kind='line')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return file_path, ax\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for specified number of hours, save a csv file with colomns 'time' 'condition' and back up the file to a backup directory. parameters: - hours (int): the number of hours for weather data is to generated. - output_dir (str, optional): the output file path returns: - str: the path of the generated csv file. requirements: - datetime - os - random - csv - shutil example: >>> 'weather_data.csv' in task_func(24) true >>> 'weather_data.csv' in task_func(10) true\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        time = datetime.now() + timedelta(hours=i)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time, condition])\n\n    # Save weather data to csv file\n    file_path = os.path.join(output_dir, 'weather_data.csv')\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['time', 'condition'])\n        writer.writerows(weather_data)\n\n    # Backup the file to a backup directory\n    backup_dir = os.path.join(output_dir, 'backup')\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    backup_file_path = os.path.join(backup_dir, 'weather_data_backup.csv')\n    shutil.copy(file_path, backup_file_path)\n\n    return file_path\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Generate visualize pandas dataframe results of football matches for multiple teams 'team' with random goals 'goals' and penalties 'penalty cost'. penalties converted into fines according penalty costs. parameters: goals (int): the maximum number of goals a team can score a match. penalties (int): the maximum number of penalties a team can receive in a match. returns: pd.dataframe: a dataframe containing match results. list: a list containing two seaborn plot objects (axes) for goals and penalty costs. requirements: - pandas - seaborn - matplotlib.pyplot - random example: >>> df, plots = task_func(5, 3)\n    \"\"\"\n    # Generate match results\n    match_results = []\n    for team in TEAMS:\n        goals_scored = randint(0, goals)\n        penalties_received = randint(0, penalties)\n        penalty_fines = penalties_received * PENALTY_COST\n        total_score = goals_scored - penalty_fines\n        match_results.append([team, goals_scored, penalties_received, penalty_fines, total_score])\n\n    # Create dataframe\n    df = pd.DataFrame(match_results, columns=['Team', 'Goals Scored', 'Penalties Received', 'Penalty Fines', 'Total Score'])\n\n    # Visualize results\n    plots = []\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot goals scored\n    sns.barplot(x='Team', y='Goals Scored', data=df, ax=axs[0])\n    axs[0].set_title('Goals Scored by Teams')\n\n    # Plot penalty fines\n    sns.barplot(x='Team', y='Penalty Fines', data=df, ax=axs[1])\n    axs[1].set_title('Penalty Fines by Teams')\n\n    plots.append(axs[0])\n    plots.append(axs[1])\n\n    plt.tight_layout()\n    plt.show()\n\n    return df, plots\n"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create pandas dataframe with random integer values between 0 9 for a given number of rows. count non-zero values in each column and visualize this information using a bar plot. parameters: rows (int): the number of rows in the dataframe. returns: tuple: a tuple containing the following elements: - dataframe: the generated dataframe with random integer values. - axes: the matplotlib axes object containing the bar plot. requirements: - numpy - pandas - matplotlib.pyplot example: >>> df, ax = task_func(10) >>> print(ax.title.get_text()) # should return 'non-zero value counts' non-zero value counts\n    \"\"\"\n    # Generate random dataframe\n    data = np.random.randint(0, 10, size=(rows, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Count non-zero values in each column\n    non_zero_counts = df.apply(lambda x: (x != 0).sum())\n\n    # Plot non-zero value counts\n    ax = non_zero_counts.plot(kind='bar')\n    ax.set_title('Non-zero value counts')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Count')\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Generate a pandas dataframe displays the grades of a randomly selected group of students in multiple courses. calculate the average grade in each course, the number of students with a passing grade (>= 60), visualize this information using a bar plot with title 'course-wise average and passing grade counts'. parameters: num_students (int): the number of students in the sample. returns: tuple[pd.dataframe, plt.axes]: a tuple containing the generated dataframe and the bar plot's axes object. requirements: - pandas - numpy - matplotlib.pyplot - random - typing example: >>> df, ax = task_func(50) >>> ax.get_title() 'course-wise average and passing grade counts'\n    \"\"\"\n    # Generate random grades for each student in each course\n    courses = ['Math', 'Science', 'English', 'History']\n    grades = {course: sample(range(50, 101), num_students) for course in courses}\n    df = pd.DataFrame(grades)\n\n    # Calculate average grade and count of students with passing grades\n    average_grades = df.mean()\n    passing_grades_count = (df >= 60).sum()\n\n    # Visualize the information\n    fig, ax = plt.subplots()\n    ax.bar(average_grades.index, average_grades.values, label='Average Grade')\n    ax.bar(passing_grades_count.index, passing_grades_count.values, bottom=average_grades.values, label='Passing Grades Count')\n    ax.set_title('course-wise average and passing grade counts')\n    ax.set_xlabel('Course')\n    ax.set_ylabel('Grade')\n    ax.legend()\n\n    return df, ax\n"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit an exponential decay function indices the array where the first column matches the target value. parameters: - array (np.ndarray): numpy array where the first column will searched for the target value. - target_value (float or int): the value in the first column to filter the data for fitting. returns: - tuple: containing the optimized parameters the fitting function (popt) the matplotlib axes object. requirements: - numpy - scipy.optimize - matplotlib.pyplot example: >>> import numpy as np >>> array = np.array([[1, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) >>> target = 1 >>> params, ax = task_func(array, target) >>> len(params) 3\n    \"\"\"\n    # Filter the array for the target value\n    filtered_array = array[array[:, 0] == target_value]\n\n    # Define the exponential decay function\n    def exponential_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Initial guess for the parameters\n    initial_guess = [1, 1, 1]\n\n    # Perform the curve fitting\n    popt, pcov = optimize.curve_fit(exponential_decay, filtered_array[:, 1], filtered_array[:, 2], p0=initial_guess)\n\n    # Create a plot\n    fig, ax = plt.subplots()\n    ax.scatter(filtered_array[:, 1], filtered_array[:, 2], label='Data points')\n    ax.plot(filtered_array[:, 1], exponential_decay(filtered_array[:, 1], *popt), 'r', label='Fitted curve')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.legend()\n    plt.show()\n\n    return popt, ax\n\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from text documents using non-negative matrix factorization (nmf). this function first preprocesses the input texts by removing non-alphanumeric characters (excluding spaces), converting all characters to lowercase, removing stopwords. it then vectorizes the processed texts using tf-idf and applies nmf to extract the specified number of topics. each topic represented as a list of its most significant words based on the nmf. parameters: - texts (list of str): the input text documents from which to extract topics. - num_topics (int): the number of topics to extract. returns: - list of list of str: a list where each element is a list of words representing a topic. requirements: - re - nltk - sklearn.decomposition - sklearn.feature_extraction.text example: >>> texts = [... \"data science involves the study of data.\",... \"machine learning provides systems the ability to learn from data.\",... \"python is a programming language used data science.\"... ] >>> topics = task_func(texts, 2) >>> print(topics) [['data','science'], ['systems', 'provides']] note: the exact output may vary depending on the tf-idf vectorization and nmf.\n    \"\"\"\n    # Preprocess texts\n    processed_texts = [ALPHANUMERIC.sub(' ', text.lower()).split() for text in texts]\n    processed_texts = [' '.join(text) for text in processed_texts]\n    processed_texts = [text for text in processed_texts if text not in STOPWORDS]\n\n    # Vectorize texts\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf_matrix = nmf.fit_transform(tfidf_matrix)\n\n    # Extract topics\n    feature_names = vectorizer.get_feature_names_out()\n    topics = []\n    for topic_idx, topic in enumerate(nmf.components_):\n        top_words = [feature_names[i] for i in topic.argsort()[:-5 - 1:-1]]\n        topics.append(top_words)\n\n    return topics\n\n"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from a list texts using the gensim word2vec model nltk.corpus.stopwords. the texts first cleaned by removing all non-alphanumeric characters except space, lowercased, and stop words are removed. parameters: texts (list): a list of strings. stopwords (list, optional): a list of stopwords to be removed. if not provided, nltk's stopwords will be used. returns: word2vec: a trained word2vec model. requirements: - re - nltk - gensim example: >>> texts = [\"hello, world!\", \"machine learning is great\", \"python is my favorite programming language\"] >>> model = task_func(texts) >>> vector = model.wv['python']\n    \"\"\"\n    if stopwords is None:\n        stopwords = nltk.corpus.stopwords.words('english')\n    cleaned_texts = []\n    for text in texts:\n        text = text.lower()\n        text = re.sub(ALPHANUMERIC, ' ', text)\n        words = text.split()\n        words = [word for word in words if word not in stopwords]\n        cleaned_texts.append(words)\n    model = Word2Vec(cleaned_texts, min_count=1)\n    return model\n\n"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes json files in directory. the function reads each json file alphabetically into a dataframe and inserts a \"source\" column that specifies the filename. the files are then moved to a \"processed\" subdirectory. the path may not exist initially. parameters: - path (str): the path of the directory containing the json files. returns: - df (pandas.dataframe): a dataframe containing the data from all processed files. requirements: - pandas - json - os - shutil example: >>> os.mkdir('data') >>> with open('data/a.json', 'w') as f:... f.write('[{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}]')... 36 >>> with open('data/b.json', 'w') as f:... f.write('[{\"a\": 5, \"b\": 6}, {\"a\": 7, \"b\": 8}]')... 36 >>> df = task_func('data') >>> print(df) a b source 0 5 b.json 1 7 8 b.json 0 1 2 a.json 1 3 4 a.json >>> shutil.rmtree('data')\n    \"\"\"\n    if not os.path.exists(path):\n        os.mkdir(path)\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.mkdir(processed_path)\n    df = pd.DataFrame()\n    for filename in sorted(os.listdir(path)):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n                df_temp = pd.DataFrame(data)\n                df_temp['source'] = filename\n                df = pd.concat([df, df_temp], ignore_index=True)\n            shutil.move(os.path.join(path, filename), os.path.join(processed_path, filename))\n    return df\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create delete csv file \"task_func_data/output.txt\" with sensor data for temperature and humidity. data generated randomly, written append mode, and the file is deleted after use. returns: - returns the path the csv file \"task_func_data/output.txt\" before deletion. requirements: - os - csv - random - datatime example: >>> task_func()\n    \"\"\"\n    # Create a directory if it doesn't exist\n    os.makedirs(\"task_func_data\", exist_ok=True)\n\n    # Generate sensor data\n    sensor_data = []\n    for _ in range(10):  # Generate 10 data points\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        temperature = random.uniform(20, 30)  # Random temperature between 20 and 30\n        humidity = random.uniform(40, 60)  # Random humidity between 40 and 60\n        sensor_data.append((timestamp, temperature, humidity))\n\n    # Write sensor data to CSV file\n    file_path = \"task_func_data/output.txt\"\n    with open(file_path, mode='a', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow([\"Timestamp\", \"Temperature\", \"Humidity\"])\n        writer.writerows(sensor_data)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data from given url and save scraped data a csv file. parameters: - url (str): the url to scrape data from. returns: - csv_file_path (str): the path the csv file where the scraped data saved. requirements: - urllib - bs4 - csv - os example: >>> task_func('http://www.example.com/') 'scraped_data.csv'\n    \"\"\"\n    # Check if the csv file already exists\n    if os.path.exists(CSV_FILE_PATH):\n        os.remove(CSV_FILE_PATH)\n\n    # Send a request to the url\n    response = urllib.request.urlopen(url)\n\n    # Parse the response with BeautifulSoup\n    soup = BeautifulSoup(response, 'html.parser')\n\n    # Find all the data you want to scrape\n    data = soup.find_all('div', {'class': 'data'})\n\n    # Open the csv file in write mode\n    with open(CSV_FILE_PATH, 'w', newline='', encoding='utf-8') as csvfile:\n        # Create a csv writer\n        csv_writer = csv.writer(csvfile)\n\n        # Write the header\n        csv_writer.writerow(['Data'])\n\n        # Write the data\n        for item in data:\n            csv_writer.writerow([item.text.strip()])\n\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train linear regression model return model score the test set. the provided dataframe used as training data, where target_column is used as target training the model. before training the provided data is split into a training and a test set using test_size and random_state parameters. parameters: data (dataframe): the input data for training. target_column (str): the column to predict. random_state (int): the seed for the train-test split. defaults to 0 test_size (float): fractional size of test set. defaults to 0.2 returns: float: the model's score. raises: valueerror: if data is not a dataframe. valueerror: if data is empty. valueerror: if target_column ist not a column of data. valueerror: if data contains values that not numeric. valueerror: if random_state is not integer. valueerror: if test_size is not between 0 and 1. requirements: - pandas - sklearn.model_selection.train_test_split - sklearn.linear_model.linearregression - numpy example: >>> rng = np.random.default_rng(seed=42) >>> data = pd.dataframe({ ... 'x1': rng.random(100), ... 'x2': rng.random(100), ... 'y': rng.random(100) ... }) >>> result = task_func(data, 'y', random_state=2, test_size=0.3) >>> result -0.25486317198996633 >>> data = pd.dataframe({ ... 'x1': rng.random(500), ... }) >>> data['y'] = data['x1'] * 2 + 1 >>> result = task_func(data, 'y', random_state=9, test_size=0.1) >>> result 1.0\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame\")\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column {target_column} must be a column of data\")\n    if not all(isinstance(x, (int, float)) for x in data[target_column]):\n        raise ValueError(\"data must contain only numeric values\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    score = model.score(X_test, y_test)\n\n    return score\n"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates random dataframe with 100 records. each record consists id (ranging from 1 to 100), name (randomly selected from provided lists of latin and other names), date of birth (randomly generated dates between the specified years), and email (constructed using the name, year of birth, and provided email domain). improperly encoded latin characters names are corrected during the process. parameters: - start_year (int): the starting year for the range of birth years. defaults to 1980. - end_year (int): the ending year for the range of birth years. defaults to 2000. - email_domain (str): the domain to used for email addresses. defaults to 'example.com'. - latin_names (list of str): a list of latin names to be used in the generation. defaults to: latin_names=['sopet\u00f3n', 'm\u00e9ndez', 'g\u00f3mez', 'p\u00e9rez', 'mu\u00f1oz'] - other_names (list of str): a list of other names to be used in the generation. defaults to: other_names=['smith', 'johnson', 'williams', 'brown', 'jones'] - rng_seed (int): the seed for the rng. returns: - dataframe: a pandas dataframe containing the generated user data. the dataframe has columns: 'id', 'name', 'date of birth', and 'email'. requirements: - pandas - numpy - codecs - re - datetime examples: >>> df = task_func(rng_seed=1) >>> print(df) id name date of birth email 0 1 brown 1992-09-10 brown1992@example.com 1 2 smith 1996-02-13 smith1996@example.com 2 3 jones 1986-10-19 jones1986@example.com 3 4 g\u00f3mez 2000-12-11 g\u00f3mez2000@example.com 4 5 g\u00f3mez 1984-08-24 g\u00f3mez1984@example.com .. ... ... ... ... 95 96 johnson 1990-09-17 johnson1990@example.com 96 97 brown 1992-10-14 brown1992@example.com 97 98 mu\u00f1oz 1998-05-04 mu\u00f1oz1998@example.com 98 99 mu\u00f1oz 1982-01-01 mu\u00f1oz1982@example.com 99 100 jones 1990-03-28 jones1990@example.com <blankline> [100 rows x 4 columns] >>> df = task_func(start_year=0, end_year=1200, email_domain='test.at', rng_seed=3) >>> print(df) id name date of birth email 0 1 sopet\u00f3n 0952-09-01 00:00:00 sopet\u00f3n952@test.at 1 2 brown 0875-10-10 00:00:00 brown875@test.at 2 3 sopet\u00f3n 0605-08-15 00:00:00 sopet\u00f3n605@test.at 3 4 g\u00f3mez 0337-11-23 00:00:00 g\u00f3mez337@test.at 4 5 g\u00f3mez 0641-04-27 00:00:00 g\u00f3mez641@test.at .. ... ... ... ... 95 96 brown 0044-05-17 00:00:00 brown44@test.at 96 97 williams 0530-01-21 00:00:00 williams530@test.at 97 98 johnson 1005-12-15 00:00:00 johnson1005@test.at 98 99 m\u00e9ndez 1134-07-19 00:00:00 m\u00e9ndez1134@test.at 99 100 johnson 0696-08-22 00:00:00 johnson696@test.at <blankline> [100 rows x 4 columns]\n    \"\"\"\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    # Create a list of names\n    names = latin_names + other_names\n    \n    # Create a list of birth years\n    birth_years = np.random.randint(start_year, end_year, 100)\n    \n    # Create a list of emails\n    emails = [f\"{name.lower().replace(' ', '')}\" + str(year) + \"@\" + email_domain for name, year in zip(names, birth_years)]\n    \n    # Create a list of dates of birth\n    dates_of_birth = [datetime.datetime(year, np.random.randint(1, 13), np.random.randint(1, 29)) for year in birth_years]\n    \n    # Create a dataframe\n    df = pd.DataFrame({\n        'id': np.arange(1, 101),\n        'name': names,\n        'date of birth': dates_of_birth,\n        'email': emails\n    })\n    \n    # Correct improperly encoded latin characters in names\n    df['name'] = df['name'].apply(lambda x: re.sub(r'[^\\x00-\\x7F]+', '', x))\n    \n    return df\n"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read list dictionaries from a json file, calculate mean median for each key, and write the results to a csv file. parameters: - input_file (str): the input json file name. - output_file (str): the output csv file name. returns: - dict: a dictionary where each key a field from the input json and each value is another dictionary with the mean and median of field. requirements: - numpy - collections - json - csv example: >>> task_func('data.json', 'stats.csv')\n    \"\"\"\n    # Read the json file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Initialize a dictionary to store the mean and median for each key\n    stats = defaultdict(lambda: {'mean': 0, 'median': 0})\n\n    # Calculate mean and median for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                stats[key]['mean'] += value\n                stats[key]['median'] = sorted([stats[key]['median'], value])[len(stats[key]) // 2]\n\n    # Calculate the mean for each key\n    for key in stats:\n        stats[key]['mean'] /= len(data)\n\n    # Write the results to a csv file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Key', 'Mean', 'Median'])\n        for key, value in stats.items():\n            writer.writerow([key, value['mean'], value['median']])\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from a dictionary by checking if file exists, if has content, copies it to a target directory. parameters: - kwargs (dict): a dictionary where keys full file paths and values are the file content. - target_dir (str, optional): the directory where the files will copied to. defaults to 'non_none_files'. returns: - copied_files (list): a list full file paths were copied. requirements: - os - pathlib.path - shutil example: >>> files = {'/path/to/file1.txt': 'hello', '/path/to/file2.txt': none, '/path/to/file3.txt': 'world'} >>> task_func(files) >>> files = {'/path/to/file4.txt': 'another', '/path/to/file5.txt': 'example'} >>> task_func(files, target_dir=\"another_directory\")\n    \"\"\"\n    copied_files = []\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    for file_path, content in kwargs.items():\n        if content is not None and content != \"\":\n            file_name = Path(file_path).name\n            copied_file_path = os.path.join(target_dir, file_name)\n            with open(file_path, 'r') as file:\n                shutil.copyfileobj(file, open(copied_file_path, 'w'))\n            copied_files.append(copied_file_path)\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes csv files in directory based on a pattern and creates new files with names while preserving, you've laid out a foundation with your. parameters: - directory (str): path the directory containing the csv files to processed. - pattern (str, optional): a regular expression the filenames should match. returns: - new_files (list): a list of strings, each string the filename of a new csv file created by the function. requirements: - os - pathlib - csv example: >>> task_func(\"/mnt/data/test_data\") ['shan.csv','sh.csv']\n    \"\"\"\n    new_files = []\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            with open(os.path.join(directory, file), 'r') as f:\n                reader = csv.reader(f)\n                data = [row for row in reader]\n            new_filename = re.sub(r'-\\d+\\.csv$', '.csv', file)\n            with open(os.path.join(directory, new_filename), 'w', newline='') as f:\n                writer = csv.writer(f)\n                writer.writerows(data)\n            new_files.append(new_filename)\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip files whose name matches a certain pattern by splitting the filename the last \"-\" occurs using the prefix the filename as the directory. parameters: - directory (str): the directory where the zip files located. - pattern (str): regex pattern to match zip files. returns: - list: a list of directories where the files were extracted. requirements: - os - re - zipfile example: >>> task_func('/tmp/my_data') ('/tmp/backup/backup_27010101', [])\n    \"\"\"\n    directories = []\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            prefix = match.group(1)\n            zip_file_path = os.path.join(directory, filename)\n            extract_directory = os.path.join(directory, prefix)\n            if not os.path.exists(extract_directory):\n                os.makedirs(extract_directory)\n            with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_directory)\n            directories.append(extract_directory)\n    return directories\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files that match a particular pattern delete the original files. parameters: - pattern (str): the pattern match files. returns: - archive_file (str): the archive file path. requirements: - subprocess - os - example: >>> task_func('*.txt') note: this function will return the archive file path.\n    \"\"\"\n    # Get all files matching the pattern\n    files = glob.glob(pattern)\n    \n    # If no files match, return None\n    if not files:\n        return None\n    \n    # Create a timestamped archive file name\n    timestamp = subprocess.check_output(['date', '+%Y%m%d%H%M%S']).decode('utf-8').strip()\n    archive_file = os.path.join(ARCHIVE_DIR, f'archive_{timestamp}.tar.gz')\n    \n    # Create the archive\n    subprocess.run(['tar', '-czf', archive_file] + files)\n    \n    # Delete the original files\n    for file in files:\n        os.remove(file)\n    \n    return archive_file\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count the total number of goals penalties from a csv file and update with the given goals and penalties. parameters: - goals (dict): a dictionary where keys team names and values are numbers of goals scored. - penalties (dict): a dictionary where keys are team names and values are numbers of penalties incurred. returns: - count (counter.collections): a counter object with total counts of goals and penalties. requirements: - csv - os - collections.counter example: >>> goals = {'team a': 3, 'team b': 2, 'team c': 1, 'team d': 0, 'team e': 2} >>> penalties = {'team a': 1, 'team b': 0, 'team c': 2, 'team d': 3, 'team e': 1} >>> counts = task_func(goals, penalties) >>> print(counts) counter({'goals': 8, 'penalties': 7})\n    \"\"\"\n    count = Counter()\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            team = row['team']\n            count['goals'] += int(row['goals'])\n            count['penalties'] += int(row['penalties'])\n            if team in goals:\n                count['goals'] += goals[team]\n            if team in penalties:\n                count['penalties'] += penalties[team]\n    return count\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from the source directory to the target directory based on a specified pattern. this function iterates through all files in the source directory, if a file's name matches the specified pattern, it is moved to the target directory. parameters: - source_dir (str): the path to the source directory. - target_dir (str): the path to the target directory. - file_pattern (str, optional): the regular expression pattern filenames must match in order to moved. default is r'\\b[a-za-z0-9]+\\.(txt|doc|docx)\\b', which matches filenames that consist of alphanumeric characters and have extensions txt, doc, or docx. returns: - moved_files_count (int): the number of files that were successfully moved from the source directory to the target directory. requirements: - re - os - shutil example: >>> task_func('/path/to/source', '/path/to/target') 3 this example would move 3 files from '/path/to/source' to '/path/to/target' if their filenames match the default pattern.\n    \"\"\"\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            source_file = os.path.join(source_dir, filename)\n            target_file = os.path.join(target_dir, filename)\n            shutil.move(source_file, target_file)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calculate similarity values between two texts based on the cosine similarity the levenshtein ratio. the texts are first cleaned by removing all non-alphanumeric characters except spaces and converted lowercase. cosine similarity computed based on term frequency each text. the levenshtein ratio is computed using the 'ratio' function from the 'python-levenshtein' library, measures the similarity two strings as number between 0 and 1. parameters: - text1 (str): the first string to compare. - text2 (str): the second string to compare. returns: - tuple: a tuple containing the cosine similarity and levenshtein ratio as floats. - cosine similarity (float): the cosine similarity ranges from 0 to 1, where 1 means identical term frequency, and 0 indicates no common terms. - levenshtein_ratio (float): the levenshtein ratio also ranges from 0 to 1, where 1 means the strings are identical, and 0 means they are completely different. requirements: - re - numpy - collections - levenshtein example: >>> task_func(\"hello, world!\", \"hello world\") (0.9999999999999998, 0.9565217391304348)\n    \"\"\"\n    # Clean and convert to lowercase\n    text1 = ALPHANUMERIC.sub(' ', text1).lower()\n    text2 = ALPHANUMERIC.sub(' ', text2).lower()\n\n    # Tokenize and count term frequency\n    tokens1 = text1.split()\n    tokens2 = text2.split()\n    counter1 = Counter(tokens1)\n    counter2 = Counter(tokens2)\n\n    # Calculate cosine similarity\n    intersection = set(counter1.keys()) & set(counter2.keys())\n    cosine_similarity = sum(counter1[key] * counter2[key] for key in intersection) / (np.sqrt(sum(counter1[key]**2 for key in counter1)) * np.sqrt(sum(counter2[key]**2 for key in counter2)))\n\n    # Calculate Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    return cosine_similarity, levenshtein_ratio\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate all permutations given list of numbers calculate sum of the factorials of each number each permutation. if empty list, the function returns empty lists. parameters: numbers (list of int): a list of integers permute and calculate factorial. returns: list of int: a list containing the sums of the factorials of each number each permutation. list of list of int: a list containing all permutations of numbers. raises: typeerror: if numbers is not a list of integers. valueerror: if. requirements: - functools.reduce - itertools.permutations - math.factorial example: >>> fac, perm = task_func([1, 2, 3]) >>> print(fac) [9, 9, 9, 9, 9, 9] >>> print(perm) [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)] >>> fac, perm = task_func([0, 4]) >>> print(fac) [25, 25] >>> print(perm) [(0, 4), (4, 0)]\n    \"\"\"\n    if not all(isinstance(i, int) for i in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n    if not all(i >= 0 for i in numbers):\n        raise ValueError(\"All elements in the list must be non-negative.\")\n    \n    factorial_sums = []\n    permutations_list = list(permutations(numbers))\n    \n    for perm in permutations_list:\n        factorial_sum = reduce(lambda x, y: x + math.factorial(y), perm, 0)\n        factorial_sums.append(factorial_sum)\n    \n    return factorial_sums, permutations_list\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (source_dir) another (dest_dir) based on specified file extensions (extensions). also warnings for files that could not transferred due to any issues. parameters: - source_dir (str): the source directory path from where files will be transferred. - dest_dir (str): the destination directory path to where files will be transferred. - extensions (list): file extensions to consider for transferring. example: ['.txt', '.csv', '.xlsx'] returns: - transferred_files (list): a list containing the names of files that were successfully transferred. requirements: - - os - glob - shutil - example: >>> task_func('/path/to/source', '/path/to/destination', ['.txt', '.csv']) ['file1.txt', 'file2.csv'] >>> task_func('/path/to/source', '/path/to/destination', ['.jpg']) []\n    \"\"\"\n    transferred_files = []\n    for ext in EXTENSIONS:\n        files = glob.glob(os.path.join(SOURCE_DIR, f'*{ext}'))\n        for file in files:\n            try:\n                shutil.move(file, DEST_DIR)\n                transferred_files.append(os.path.basename(file))\n            except Exception as e:\n                warnings.warn(f'Could not transfer file {file}: {e}')\n    return transferred_files\n"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    This function takes list of tuples containing elements and their respective counts and weights. it normalizes the counts using z-score normalization and the weights using min-max scaling. finally, it returns a pandas dataframe with the items, normalized counts, and normalized weights. parameters: data (list of tuples): a list where each tuple contains an element (any type), its count (int), and its weight (float). example: [('a', 100, 0.5), ('b', 200, 0.6)] returns: dataframe: a pandas dataframe with three columns: 'item', 'normalized count', and 'normalized weight'. each row corresponds to an entry from the input data. requirements: - pandas - numpy - scipy.stats.zscore - sklearn.preprocessing.minmaxscaler example: >>> data = [('a', 100, 0.5), ('b', 200, 0.6), ('c', 150, 0.7)] >>> report = task_func(data) >>> print(report) item normalized count normalized weight 0 a -1.224745 0.0 1 b 1.224745 0.5 2 c 0.000000 1.0 >>> data = [('andrew', 5743, 0.925), ('elizabeth', 4655, 1.0875), ('susan', 4716, 0.65), ('christopher', 2100, 0.05),('timothy', 3943, 0.175)] >>> report = task_func(data) >>> print(report) item normalized count normalized weight 0 andrew 1.248851 0.843373 1 elizabeth 0.349969 1.000000 2 susan 0.400366 0.578313 3 christopher -1.760916 0.000000 4 timothy -0.238270 0.482\n    \"\"\"\n    # Extracting counts and weights\n    counts = [item[1] for item in data]\n    weights = [item[2] for item in data]\n    \n    # Normalizing counts using z-score\n    normalized_counts = zscore(counts)\n    \n    # Normalizing weights using min-max scaling\n    scaler = MinMaxScaler()\n    normalized_weights = scaler.fit_transform(np.array(weights).reshape(-1, 1)).flatten()\n    \n    # Creating a dataframe\n    df = pd.DataFrame({\n        'item': [item[0] for item in data],\n        'normalized count': normalized_counts,\n        'normalized weight': normalized_weights\n    })\n    \n    return df\n"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calculate mean of numerical values in each position across tuples in a list. non-numeric values are ignored, and means are computed only from available data. that means that missing data in some of the tuples is simply ignored. a dataframe with one columns named 'mean value' which contains the mean values for all tuple positions. the index is according to this scheme: 'position i' where i is the current position. if an empty list is passed, then an empty dataframe is returned. parameters: data_list (list of tuples): a list containing tuples of mixed data types (string, int, float, etc.). defaults to [('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)] returns: dataframe: a pandas dataframe with the mean values of the numerical data at each position. requirements: - pandas - numpy - itertools example: >>> df = task_func() >>> print(df) mean value position 0 nan position 1 3.0 position 2 4.3 >>> data = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)] >>> df = task_func() >>> print(df) mean value position 0 nan position 1 3.0 position 2 4.3\n    \"\"\"\n    # Extract numerical values from tuples\n    numerical_values = [list(filter(lambda x: isinstance(x, (int, float)), tup)) for tup in data_list]\n    \n    # Calculate mean for each position\n    means = [np.mean(pos) if pos else np.nan for pos in zip(*numerical_values)]\n    \n    # Create dataframe\n    df = pd.DataFrame({'mean value': means})\n    df.index = ['position {}'.format(i) for i in range(len(means))]\n    \n    return df\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform chi-square test of independence of variables in a contingency table. this function takes a dataframe containing categorical data and column names, then constructs a contingency table from two categorical columns and performs a chi-square test of independence. it returns the p-value of the test, which indicates the probability of observing the data if the null hypothesis (independence of the variables) is true. parameters: data (pd.dataframe): a dataframe containing the categorical variables. col1 (str): the name of the first categorical column in 'data'. col2 (str): the name of the second categorical column in 'data'. returns: float: the p-value of the chi-square test of independence. raises: valueerror: if 'data' is empty, if 'col1' or 'col2' are not in 'data', if one or both of the columns do not have multiple categories, or if some categories have less than 5 observations (violating the chi-square test). typeerror: if one or both of the columns contain non-categorical data. requirements: numpy pandas scipy.stats.chi2_contingency examples: >>> data = pd.dataframe({... 'var1': ['a'] * 40 + ['b'] * 60, 'var2': ['x'] * 25 + ['y'] * 25 + ['x'] * 25 + ['y'] * 25... }) >>> task_func(data, 'var1', 'var2') 0.066192579719 >>> np.random.seed(42) >>> data = pd.dataframe({... 'a': np.random.choice(['a', 'b'], size=100),... 'b': np.random.choice(['x', 'y'], size=100)... }) >>> task_func(data, 'a', 'b') 1.0\n    \"\"\"\n    if data.empty:\n        raise ValueError(\"The dataframe is empty.\")\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both of the column names are not in the dataframe.\")\n    if data[col1].nunique() < 2 or data[col2].nunique() < 2:\n        raise ValueError(\"One or both of the columns do not have multiple categories.\")\n    if not all(data[col1].apply(lambda x: isinstance(x, str))) or not all(data[col2].apply(lambda x: isinstance(x, str))):\n        raise TypeError(\"One or both of the columns contain non-categorical data.\")\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    if any(contingency_table.sum(axis=1) < 5) or any(contingency_table.sum(axis=0) < 5):\n        raise ValueError(\"Some categories have less than 5 observations, violating the chi-square test.\")\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    return p\n\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate a number dice rolls, calculate the frequency of each result, return both the frequency array and a histogram of the results. note: the dice rolls have 6 possible outcomes. the title of the histogram \"histogram of dice rolls\". the x-axis is labeled \"dice value\" and the y-axis is labeled \"frequency\". parameters: rolls (int): the number of dice rolls. returns: tuple: a tuple containing: - np.array: a numpy array with the frequency of each outcome. - matplotlib.axes: axes object representing the histogram. requirements: - numpy - matplotlib.pyplot - random examples: >>> import random >>> random.seed(0) >>> outcomes, ax = task_func(10000) >>> print(outcomes) [1656 1690 1696 1657 1632 1669] >>> plt.show() >>> random.seed(10) >>> outcomes, ax = task_func(100) >>> print(outcomes) [15 21 17 22 16 9] >>> plt.show()\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    \n    # Simulate dice rolls\n    results = [random.choice(NUMBERS) for _ in range(rolls)]\n    \n    # Calculate frequency of each outcome\n    frequency = np.bincount(results, minlength=len(NUMBERS))\n    \n    # Plot histogram\n    ax = plt.subplot()\n    ax.hist(results, bins=NUMBERS, align='left', rwidth=0.8, color='skyblue')\n    ax.set_title('Histogram of Dice Rolls')\n    ax.set_xlabel('Dice Value')\n    ax.set_ylabel('Frequency')\n    \n    plt.show()\n    \n    return frequency, ax\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from source directory a target directory. function identifies files by the '_processed' suffix filename. parameters: source_dir (str): the directory containing the files to archived. target_dir (str): the directory where the archive will be saved. archive_name (str): the name the archive file. default 'archive.zip'. returns: str: the path to the created archive. requirements: - os - re - shutil - zipfile example: >>> task_func('./data/', './data_processed/') './data_processed/archive.zip' >>> task_func('./data/', './data_processed/','my_archive.zip') './data_processed/my_archive.zip'\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise FileNotFoundError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    processed_files = [f for f in os.listdir(source_dir) if re.search(r'_processed$', f)]\n    if not processed_files:\n        raise FileNotFoundError(\"No processed files found in the source directory.\")\n\n    archive_path = os.path.join(target_dir, archive_name)\n    with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for file in processed_files:\n            file_path = os.path.join(source_dir, file)\n            zipf.write(file_path, os.path.basename(file_path))\n\n    return archive_path\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts the stock closing prices for the next 7 days using simple linear regression and plots the data. parameters: df (dataframe): the input dataframe with columns 'date' and 'closing_price'. 'date' should be in datetime format. returns: tuple: a tuple containing: - list: a list with predicted prices for the next 7 days. - axes: the matplotlib axes object containing the plot. requirements: - pandas - numpy - matplotlib.pyplot - sklearn.linear_model.regression: the function uses a constant time step of 24*60*60 seconds to generate future timestamps. example: >>> df = pd.dataframe({... 'date': pd.date_range(start='1/1/2021', end='1/7/2021'),... 'closing_price': [100, 101, 102, 103, 104, 105, 106]... }) >>> pred_prices, plot = task_func(df) >>> print(pred_prices) [107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0]\n    \"\"\"\n    # Convert 'date' column to datetime\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Sort the dataframe by date\n    df.sort_values(by='date', inplace=True)\n    \n    # Extract features and target\n    X = df['date'].values.reshape(-1, 1)\n    y = df['closing_price'].values\n    \n    # Fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future timestamps for the next 7 days\n    future_dates = pd.date_range(start=df['date'].iloc[-1], periods=8, freq='D')[1:]\n    future_dates = future_dates.values.reshape(-1, 1)\n    \n    # Predict the closing prices for the next 7 days\n    pred_prices = model.predict(future_dates)\n    \n    # Plot the data\n    plt.figure(figsize=(10, 5))\n    plt.plot(df['date'], df['closing_price'], label='Actual Prices')\n    plt.plot(future_dates, pred_prices, label='Predicted Prices')\n    plt.xlabel('Date')\n    plt.ylabel('Closing Price')\n    plt.title('Stock Prices Prediction')\n    plt.legend()\n    plt.show()\n    \n    return pred_prices, plt.gca()\n"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies outliers the 'closing_price' data using the z-score method. parameters: df (pandas.dataframe): the input dataframe must contain a column named 'closing_price' with numerical values. z_threshold (float, optional): the z-score threshold for identifying outliers. default is 2. returns: tuple: a tuple containing the following elements: - pandas.dataframe: a dataframe containing the outliers in the 'closing_price' column. - matplotlib.axes._axes.axes: the plot object displaying the outliers, x-axis label '', y-axis label 'closing price', and title 'outliers in prices'. requirements: - numpy - matplotlib.pyplot - scipy.stats.zscore: z-score threshold for identifying outliers is via the 'z_threshold' parameter. examples: >>> import pandas as pd >>> df1 = pd.dataframe({... 'closing_price': [100, 101, 102, 103, 104, 150]... }) >>> outliers1, plot1 = task_func(df1) >>> df2 = pd.dataframe({... 'closing_price': [10, 20, 30, 40, 50, 100]... }) >>> outliers2, plot2 = task_func(df2, z_threshold=1.5\n    \"\"\"\n    # Calculate z-scores for the 'closing_price' column\n    df['z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers based on the z-score\n    outliers = df[df['z_score'].abs() > z_threshold]\n    \n    # Plotting the outliers\n    plt.figure(figsize=(10, 6))\n    plt.scatter(df.index, df['closing_price'], label='All Prices')\n    plt.scatter(outliers.index, outliers['closing_price'], color='red', label='Outliers')\n    plt.xlabel('')\n    plt.ylabel('closing price')\n    plt.title('outliers in prices')\n    plt.legend()\n    plt.show()\n    \n    return outliers, plt\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize distribution stock closing prices using both box plot a histogram within a single figure. this function designed help understand the spread, central tendency, and the distribution shape of stock closing prices. note: the tile of the box plot is set to 'box plot of closing prices' and the title of the histogram is set to 'histogram of closing prices'. requirements: - pandas - matplotlib.pyplot - seaborn parameters: df (dataframe): a pandas dataframe containing at least one column named 'closing_price' with stock closing prices. returns: tuple: a tuple containing two matplotlib.axes._axes.axes objects: the first for the boxplot and the second for the histogram. example: >>> df = pd.dataframe({ ... 'closing_price': [100, 101, 102, 103, 104, 150] ... }) >>> boxplot_ax, histplot_ax = task_func(df) >>> print(boxplot_ax.get_title()) box plot of closing prices >>> print(histplot_ax.get_title()) histogram of closing prices\n    \"\"\"\n    # Create a figure and a set of subplots\n    fig, (boxplot_ax, histplot_ax) = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot the boxplot\n    sns.boxplot(x='closing_price', data=df, ax=boxplot_ax)\n    boxplot_ax.set_title('box plot of closing prices')\n\n    # Plot the histogram\n    sns.histplot(x='closing_price', data=df, ax=histplot_ax)\n    histplot_ax.set_title('histogram of closing prices')\n\n    # Display the plot\n    plt.show()\n\n    return boxplot_ax, histplot_ax\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts share closing prices for the next 7 days using the arima model plots the forecast. parameters: df (pd.dataframe): the input dataframe with columns 'date' and 'closing_price'. 'date' should datetime dtype and 'closing_price' should be float. returns: tuple[list[float], axes]: tuple containing: - a list with forecasted prices for the next 7 days. - a matplotlib axes object containing the subplot. requirements: - pandas - numpy - matplotlib.pyplot - statsmodels.tsa.arima.model.arima example: >>> df = pd.dataframe({ ... 'date': pd.date_range(start='1/1/2021', end='1/7/2021'), ... 'closing_price': [100, 101, 102, 103, 104, 105, 106] ... }) >>> forecast, ax = task_func(df) >>> print(forecast) [106.99999813460752, 107.99999998338443, 108.99999547091295, 109.99999867405204, 110.99999292499156, 111.99999573455818, 112.9999903188028]\n    \"\"\"\n    # Convert 'date' column to datetime\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Set 'date' as the index\n    df.set_index('date', inplace=True)\n    \n    # Fit the ARIMA model\n    model = ARIMA(df['closing_price'], order=(5,1,0))\n    model_fit = model.fit()\n    \n    # Forecast the next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot the original data and the forecast\n    ax = df['closing_price'].plot(label='Historical Prices')\n    forecast.plot(ax=ax, label='Forecasted Prices')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    \n    return forecast.tolist(), ax\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing all possible two-letter combinations lowercase english alphabets. the dictionary values represent the frequency of these two-letter combinations the given word. if a combination does not appear in the word, its value will 0. requirements: - collections.counter - itertools - string parameters: - word (str): the input string containing alphabetic characters. returns: - dict: a dictionary with keys as two-letter alphabet combinations values as their counts in the word. requirements: - the function uses the collections.counter library count the occurrences of two-letter combinations. - the function uses the itertools.permutations method to generate all two-letter combinations of alphabets. - the function uses the string library to get a string of lowercase alphabets. example: >>> list(task_func('abcdef').items())[:5] [('ab', 1), ('ac', 0), ('ad', 0), ('ae', 0), ('af', 0)]\n    \"\"\"\n    alphabet = string.ascii_lowercase\n    two_letter_combinations = list(itertools.permutations(alphabet, 2))\n    two_letter_combinations = [''.join(combination) for combination in two_letter_combinations]\n    counter = Counter(word)\n    result = {combination: counter[combination] for combination in two_letter_combinations}\n    return result\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create and visualize sales report for different categories over a period time. parameters: - start_date (str): start date for the report 'yyyy-mm-dd' format. default '2016-01-01'. - periods (int): the number of periods for the report. default is 13. - freq (str): the frequency of dates generated. default is 'wom-2fri' (weekofmonth-2nd friday). - categories (list): list of categories to include in the report. default is ['electronics', 'fashion', 'home & kitchen', 'automotive', 'sports']. returns: - returns a dataframe containing the sales data with the following columns: 'date', 'category', 'sales'. - returns the matplotlib axes object for the plot. requirements: - pandas - matplotlib.pyplot - numpy example: >>> df, ax = task_func(start_date='2020-01-01', periods=5, freq='w-mon', categories=['electronics', 'fashion']) >>> df date category sales 0 2020-01-06 electronics 272 1 2020-01-06 fashion 147 2 2020-01-13 electronics 217 3 2020-01-13 fashion 292 4 2020-01-20 electronics 423 5 2020-01-20 fashion 351 6 2020-01-27 electronics 295 7 2020-01-27 fashion 459 8 2020-02-03 electronics 109 9 2020-02-03 fashion 311\n    \"\"\"\n    # Generate dates\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate sales data\n    np.random.seed(0)\n    sales_data = np.random.randint(100, 500, (periods, len(categories)))\n    \n    # Create DataFrame\n    sales_df = pd.DataFrame(sales_data, index=dates, columns=categories)\n    sales_df = sales_df.stack().reset_index()\n    sales_df.columns = ['date', 'category', 'sales']\n    \n    # Plotting\n    fig, ax = plt.subplots(figsize=(10, 6))\n    sales_df.plot(x='date', y='sales', hue='category', ax=ax)\n    ax.set_title('Sales Report by Category')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    plt.legend(title='Category')\n    plt.show()\n    \n    return sales_df, ax\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates a time series sales data starting from a specified date, use linear regression forecast future sales based on the provided or generated sales data. parameters: - start_date (str): the start date for the sales data yyyy-mm-dd format. default '2016-01-01'. - periods (int): the number of periods for which the sales data is available. default is 13. - freq (str): the frequency of the sales data, e.g., 'wom-2fri' for the second friday of each month. default is 'wom-2fri'. - sales_data (array-like, optional): array containing actual sales data. if not provided, random data will be generated. returns: - a numpy array containing the forecasted future sales for the same number of periods as the input data. requirements: - numpy - pandas - sklearn.linear_model.linearregression examples: >>> np.random.seed(42) # for consistent random data generation in examples >>> task_func('2016-01-01', 13, 'wom-2fri') array([313.65384615, 318.56043956, 323.46703297, 328.37362637, 333.28021978, 338.18681319, 343.09340659, 348. , 352.90659341, 357.81318681, 362.71978022, 367.62637363, 372.53296703]) >>> task_func('2020-01-01', 5, 'm', [200, 300, 400, 500, 600]) array([238.9, 226. , 213.1, 200.2, 187.3])\n    \"\"\"\n    if sales_data is None:\n        np.random.seed(42)\n        sales_data = np.random.randint(100, 1000, periods)\n    \n    # Create a DataFrame with the sales data\n    df = pd.DataFrame({'Date': pd.date_range(start=start_date, periods=periods, freq=freq), 'Sales': sales_data})\n    \n    # Convert the 'Date' column to a numeric value for modeling\n    df['Date'] = pd.to_numeric(df['Date'])\n    \n    # Split the data into features (X) and target (y)\n    X = df[['Date']]\n    y = df['Sales']\n    \n    # Create and fit the linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future dates for forecasting\n    future_dates = pd.date_range(start=df['Date'].max(), periods=periods, freq=freq)\n    future_dates_numeric = pd.to_numeric(future_dates)\n    \n    # Make predictions for future sales\n    future_sales = model.predict(future_dates_numeric.reshape(-1, 1))\n    \n    return future_sales\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    Randomly assigns specified number of tasks employees with a due date of current day returns a dataframe with these assignments. parameters: - task_list (list of str): list of tasks to assigned. - n_tasks (int): number of tasks to be assigned. this number should not be negative, but can be larger than the number of tasks the task_list. - employees (list of str, optional): list of employee names to whom tasks can be assigned. if not provided, defaults to: ['john doe', 'jane smith', 'james brown', 'mary johnson', 'robert davis']. - seed (int, optional): seed for the random number generator to ensure reproducibility. defaults to none (not set). returns: - pd.dataframe: contains columns 'task name', 'assigned to', and 'due date', with each row representing assigned task. raises: - valueerror: if n_tasks is negative. note: - task names sanitized by replacing spaces with underscores. - due dates are set to the current system date. requirements: - pandas - random - datetime examples: >>> df = task_func(['clean office', 'prepare report', 'client meeting'], 2, seed=42) >>> df task name assigned to due date 0 client_meeting john doe 2024-04-13 1 clean_office james brown 2024-04-13 >>> type(df) <class 'pandas.core.frame.dataframe'>\n    \"\"\"\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    assigned_tasks = []\n    for _ in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        assigned_tasks.append({\"task name\": task.replace(\" \", \"_\"), \"assigned to\": employee, \"due date\": due_date})\n\n    return pd.DataFrame(assigned_tasks)\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces given words with underscores, plots the frequency each unique word. parameters: - mystrings (list of str): list of words/phrases where spaces replaced with underscores. - text (str): the text in modifications word frequencies are calculated. must not be empty. returns: - matplotlib.axes.axes: the axes object of the plot. raises: - valueerror: if the input text empty. requirements: - numpy - matplotlib - re - collections notes: - all operations are case-insensitive. - the frequency plot displays each unique word on the x-axis in the order they appear after modification with its corresponding frequency on the y-axis. examples: >>> ax = task_func(['lorem ipsum', 'consectetur adipiscing'], 'lorem ipsum dolor sit amet lorem ipsum') >>> type(ax) <'matplotlib.axes._axes.axes'>\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    # Replace spaces with underscores\n    modified_text = re.sub(r'\\s+', '_', text)\n\n    # Split the text into words\n    words = modified_text.split()\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Create a bar plot of word frequencies\n    fig, ax = plt.subplots()\n    ax.bar(word_counts.keys(), word_counts.values())\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word Frequency')\n\n    # Display the plot\n    plt.show()\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from source directory and save as a zip file saved a target directory. parameters: - source_directory (str): the source directory containing the files to zipped. - target_directory (str): the destination directory of the zip file to be created. if it does not exist, the function will create it. - zip_name (str): the name of the zip file to create (without extension; '.zip' will be added automatically). returns: - str: the full path to the created zip file the format \"/path/to/target_directory/zip_name.zip\". raises: - oserror: if the source_directory does not exist. requirements: - os - glob - pathlib - zipfile note: - the valid extensions are: ['.txt', '.docx', '.xlsx', '.csv']. example: >>> path = task_func('/path/to/source_directory', '/path/to/target_directory', 'zipped_files') >>> type(path) <class 'str'> >>> path '/path/to/target_directory/zipped_files.zip'\n    \"\"\"\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory '{source_directory}' does not exist.\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    zip_file_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n    with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for ext in ['.txt', '.docx', '.xlsx', '.csv']:\n            for file in glob.glob(os.path.join(source_directory, f\"*{ext}\")):\n                zipf.write(file, os.path.relpath(file, source_directory))\n\n    return zip_file_path\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files with extensions (.txt,.docx,.xlsx,.csv) from a source directory to csv files a target directory. parameters: - source_directory (str): path to the directory containing the files to converted. - target_directory (str): path to the target directory where the converted csv files will be saved. if it does not exist, the function will create it. returns: - int: the number successfully converted to csv. raises: - filenotfounderror: if the source directory does not exist. requirements: - - pathlib - pandas - python-docx - openpyxl notes: - each file's captured and stored in a csv with a 'text' column and no. - this function will overwrite existing files in the target directory if they have the same names as the converted files. example: >>> task_func('/users/test/documents', '/users/test/documents/csv_files') 4 >>> task_func('/path/to/source', '/path/to/target') 2\n    \"\"\"\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    converted_count = 0\n\n    for file_path in Path(source_directory).glob('*.*'):\n        if file_path.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n            file_name = file_path.name\n            target_file_path = os.path.join(target_directory, file_name.replace(file_path.suffix, '.csv'))\n\n            if os.path.exists(target_file_path):\n                os.remove(target_file_path)\n\n            if file_path.suffix == '.txt':\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    text = file.read()\n            elif file_path.suffix == '.docx':\n                doc = docx.Document(file_path)\n                text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            elif file_path.suffix == '.xlsx':\n                df = pd.read_excel(file_path)\n                text = '\\n'.join(df.to_string(index=False).split('\\n'))\n            elif file_path.suffix == '.csv':\n                df = pd.read_csv(file_path)\n                text = '\\n'.join(df.to_string(index=False).split('\\n'))\n\n            with open(target_file_path, 'w', encoding='utf-8') as file:\n                file.write(text)\n\n            converted_count += 1\n\n    return converted_count\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes minmax-normalized cumulative sum for each numeric column the given dataframe. parameters: - df (pandas.dataframe): the input dataframe containing numerical values. returns: - pd.dataframe: dataframe where each column contains the normalized cumulative sum the respective column in the input dataframe, retaining the original column names. raises: - typeerror: if the dataframe contains non-numeric data types. - valueerror: if the dataframe empty or contains nan values. requirements: - pandas - numpy - sklearn example: >>> input_df = pd.dataframe({'a': [1, 2, 3], 'b': [3, 2, 1]}) >>> output_df = task_func(input_df) >>> type(output_df) <class 'pandas.core.frame.dataframe'> >>> output_df a b 0 0.0 0.000000 1 0.4 0.666667 2 1.0 1.000000\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"Dataframe is empty\")\n    if df.isnull().values.any():\n        raise ValueError(\"Dataframe contains NaN values\")\n    if not all(df.dtypes[i] in [np.number] for i in range(len(df.dtypes))):\n        raise TypeError(\"Dataframe contains non-numeric data types\")\n    scaler = MinMaxScaler()\n    for col in df.columns:\n        df[col] = scaler.fit_transform(df[col].values.reshape(-1, 1))\n    return df.cumsum()\n\n"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes given directory, listing each file it contains along with its size, creation time, last modification time without recursing into subdirectories. parameters: - directory_path (str): path the directory to be analyzed. if it empty, this function returns empty list. returns: - list tuples: each tuple contains (file name, file size bytes, creation time in iso format, modification time in iso format). raises: - valueerror: if the provided directory does not exist. requirements: - os - pathlib - datetime notes: - the function assumes the directory exists and contains only files (no subdirectories processed). - times are reported in system time, utc. - the creation and modification times are platform dependent; on some systems, the creation time might not be available and might be replaced by the last metadata change time. examples: >>> result = task_func('/path/to/directory') >>> print(result) [('example.txt', 1024, '2023-04-01t14:30:00z', '2023-04-02t15:00:00z'), ...] >>> result = task_func('/path/to/empty_directory') >>> print(result) []\n    \"\"\"\n    if not os.path.exists(directory_path):\n        raise ValueError(f\"The provided directory '{directory_path}' does not exist.\")\n\n    directory = Path(directory_path)\n    file_list = []\n\n    for file in directory.iterdir():\n        if file.is_file():\n            file_size = file.stat().st_size\n            creation_time = file.stat().st_ctime\n            modification_time = file.stat().st_mtime\n\n            creation_time_iso = datetime.fromtimestamp(creation_time, tz=timezone.utc).isoformat()\n            modification_time_iso = datetime.fromtimestamp(modification_time, tz=timezone.utc).isoformat()\n\n            file_list.append((file.name, file_size, creation_time_iso, modification_time_iso))\n\n    return file_list\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates population report dataframe csv file based on provided json data. parameters: - json_data (str): nested json string containing country names (str) as keys and populations (int) as values. the parent key expected \"countries\". example format: '{\"countries\": {\"country a\": 331002651, \"country b\": 67886011}}'. - output_dir (str): directory path where the csv report will be saved. defaults to the current directory. the function will create if it does not exist. - file_name (str): name the csv report. defaults to \"country_population_report.csv\". returns: - str: the file path of the generated csv report. - pd.dataframe: the country-population data loaded from the input json, with columns: \"country\", \"population\". raises: - valueerror: if the json data is malformed, empty, contains non-string country names, non-numeric or negative populations. - ioerror: if the file cannot be written to the specified directory. requirements: - json - os - pandas - math notes: - output dataframe has no extra index column. - if this function encounters a float population is otherwise valid, it will round it down to the nearest integer. example: >>> json_str = '{\"countries\": {\"country a\": 331002651, \"country b\": 67886011}}' >>> csv_file_path, df = task_func(json_str) >>> print(csv_file_path) ./country_population_report.csv >>> df country population 0 country a 331002651 1 country b 67886011\n    \"\"\"\n    # check if json data is valid\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid json data\")\n\n    # check if json data is empty\n    if not data or \"countries\" not in data:\n        raise ValueError(\"Json data is empty or does not contain 'countries' key\")\n\n    # check if countries are valid\n    countries = data[\"countries\"]\n    if not isinstance(countries, dict):\n        raise ValueError(\"Countries data is not a dictionary\")\n\n    for country, population in countries.items():\n        if not isinstance(country, str):\n            raise ValueError(\"Country name is not a string\")\n        if not isinstance(population, (int, float)) or population < 0:\n            raise ValueError(\"Population is not a non-negative integer or float\")\n\n    # create output directory if it does not exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # create dataframe\n    df = pd.DataFrame(list(countries.items()), columns=[\"country\", \"population\"])\n\n    # round down population to nearest integer\n    df[\"population\"] = df[\"population\"].apply(math.floor)\n\n    # save dataframe to csv\n    csv_file_path = os.path.join(output_dir, file_name)\n    df.to_csv(csv_file_path, index=False)\n\n    return csv_file_path, df\n\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates each item (files directories) in given directory against specified conditions. parameters: - dir_path (str): path to the directory to be evaluated. must exist. - predicates (list of strings): names of conditions to check for. must contain valid conditions. invalid conditions ignored. supported conditions: 1. 'is_file': whether the item is a file 2. 'is_dir': whether the item is a directory 3. 'has_special_chars': whether the item name contains a character is not a letter, digit, or underscore, ignoring file extensions 4. 'has_numbers': whether the item name contains a number returns: - dict: a dictionary with directory items as keys and the results of condition checks as values. raises: - valueerror: if no valid predicates are provided. - filenotfounderror: if the specified directory does not exist or is not a directory. note: - this function evaluates file/directory names, rather than their full path. - predicates are deduplicated. requirements: - os - re - pathlib examples: >>> task_func('/path/to/dir', ['is_file', 'has_numbers']) {'file.txt': {'is_file': true, 'has_numbers': false}, 'file2.txt': {'is_file': true, 'has_numbers': true}} >>> task_func('/path/to/dir', ['is_dir', 'has_special_chars']) {'my_folder': {'is_dir': true, 'has_special_chars': false}, 'a_@folder': {'is_dir': true, 'has_special_chars': true}}\n    \"\"\"\n    if not predicates:\n        raise ValueError(\"No valid predicates provided\")\n    if not os.path.exists(dir_path) or not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"{dir_path} does not exist or is not a directory\")\n    \n    results = {}\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n        item_results = {}\n        for predicate in predicates:\n            if predicate == 'is_file':\n                item_results['is_file'] = os.path.isfile(item_path)\n            elif predicate == 'is_dir':\n                item_results['is_dir'] = os.path.isdir(item_path)\n            elif predicate == 'has_special_chars':\n                item_results['has_special_chars'] = bool(re.search(r'[^a-zA-Z0-9_]', item))\n            elif predicate == 'has_numbers':\n                item_results['has_numbers'] = bool(re.search(r'\\d', item))\n        results[item] = item_results\n    \n    return results\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert hexadecimal string to various encodings. this function takes a hexadecimal string as input performs several encoding operations. initially, decodes the hexadecimal string to bytes and converts these bytes into a utf-8 string. this utf-8 string subsequently encoded into different formats: hexadecimal, base64, utf-8, utf-16, utf-32, ascii (if possible), url encoding, and rot13. note that if ascii not possible, returns 'not representable ascii'. parameters: - hex_string (str): the input string in hexadecimal format. returns: - dict: a dictionary containing the input string encoded in various formats. the dictionary's keys are the encoding types ('hex', 'base64', 'utf-8', 'utf-16', 'utf-32', 'ascii', 'url', 'rot13'), and the values are the corresponding encoded strings. if the string cannot represented in ascii, the 'ascii' key maps to 'not representable in ascii'. requirements: - binascii - base64 - urllib - codecs example: >>> task_func(\"4a4b4c\") {'hex': '4a4b4c', 'base64': 'sktm', 'utf-8': 'jkl', 'utf-16': 'jkl', 'utf-32': 'jkl', 'ascii': 'jkl', 'url': 'jkl', 'rot13': 'wxy'} >>> task_func(\"68656c6c6f\") {'hex': '68656c6c6f', 'base64': 'agvsbg8=', 'utf-8': 'hello', 'utf-16': 'hello', 'utf-32': 'hello', 'ascii': 'hello', 'url': 'hello', 'rot13': 'uryyb'}\n    \"\"\"\n    byte_string = binascii.unhexlify(hex_string)\n    utf8_string = byte_string.decode('utf-8')\n    base64_string = base64.b64encode(byte_string).decode('utf-8')\n    utf16_string = utf8_string.encode('utf-16').decode('utf-16')\n    utf32_string = utf8_string.encode('utf-32').decode('utf-32')\n    ascii_string = utf8_string.encode('ascii', 'ignore').decode('utf-8')\n    url_string = urllib.parse.quote(utf8_string)\n    rot13_string = codecs.encode(utf8_string, 'rot_13')\n    return {\n        'hex': hex_string,\n        'base64': base64_string,\n        'utf-8': utf8_string,\n        'utf-16': utf16_string,\n        'utf-32': utf32_string,\n        'ascii': ascii_string if ascii_string == utf8_string else 'not representable ascii',\n        'url': url_string,\n        'rot13': rot13_string\n    }\n\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads a tar.gz file from a specified url, validates its md5 checksum against a predefined expected value. if the checksum matches, extracts the contents of the tar.gz file. otherwise, it deletes the downloaded file. parameters: url (str): the url from which to download the tar.gz file. returns: bool: true if the file is successfully downloaded, its md5 checksum matches the expected value and is extracted. returns false if the checksum does not match the expected value or if the download fails. requirements: - urllib.request - hashlib - tarfile - example: >>> task_func('http://example.com/files.tar.gz') true\n    \"\"\"\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n\n        # Calculate the md5 checksum of the downloaded file\n        with open(TARGET_TAR_FILE, 'rb') as f:\n            md5_checksum = hashlib.md5(f.read()).hexdigest()\n\n        # Validate the md5 checksum\n        if md5_checksum == EXPECTED_MD5_CHECKSUM:\n            # Extract the contents of the tar.gz file\n            with tarfile.open(TARGET_TAR_FILE, 'r:gz') as tar:\n                tar.extractall()\n            return True\n        else:\n            # Delete the downloaded file if the checksum does not match\n            os.remove(TARGET_TAR_FILE)\n            return False\n    except Exception as e:\n        # Handle any exceptions that may occur during the download or extraction process\n        print(f\"An error occurred: {e}\")\n        return False\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download a csv file from a given url, save a specified path, and count occurrences each value a particular column. the function handles various scenarios including missing columns and file download errors. parameters: url (str): the url of the csv file to downloaded. must be a valid and accessible url. column_name (str): the name of the column in the csv file whose values to be counted. the function will raise a valueerror if this column not found. csv_file_path (str): the file path where the downloaded csv file will be saved. if a file already exists at this path, it will be overwritten. returns: dict: a dictionary mapping the values from the specified column to their corresponding occurrence counts. raises: valueerror: if the specified column_name does not exist in the csv file, the function will delete the downloaded file and raise a valueerror with a message stating \"the provided column_name '{column_name}' does not exist in the csv file.\" requirements: - urllib - os - csv - collections example: >>> task_func('http://example.com/data.csv', 'category', 'downloaded_data.csv') {'cat1': 5, 'cat2': 3, 'cat3': 8} # this is a hypothetical output; the actual output will depend on the csv data. notes: - the downloaded csv file is deleted after its contents have been processed. - the function only counts values in the specified column and ignores other data.\n    \"\"\"\n    try:\n        urllib.request.urlretrieve(url, csv_file_path)\n    except Exception as e:\n        os.remove(csv_file_path)\n        raise ValueError(f\"Error downloading file: {e}\")\n\n    try:\n        with open(csv_file_path, 'r') as file:\n            reader = csv.DictReader(file)\n            if column_name not in reader.fieldnames:\n                os.remove(csv_file_path)\n                raise ValueError(f\"The provided column_name '{column_name}' does not exist in the csv file.\")\n\n            column_values = [row[column_name] for row in reader]\n            value_counts = collections.Counter(column_values)\n            os.remove(csv_file_path)\n            return dict(value_counts)\n    except Exception as e:\n        os.remove(csv_file_path)\n        raise ValueError(f\"Error processing csv file: {e}\")\n\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches parses xml file from url, converts into a pandas dataframe. parameters: url (str): url of the csv file downloaded. must be a valid and accessible url. returns: pandas.dataframe a dataframe constructed from the parsed xml data. each row of the dataframe corresponds to an 'item' element in the xml file, with elements of 'item' becoming columns in the dataframe. raises: valueerror this error is raised in several scenarios: 1. if the url is invalid or the xml file cannot be fetched from the url. 2. if the xml file has invalid syntax. 3. if the xml structure does not conform to the expected format. requirements: - urllib - lxml - pandas examples: # example with a valid xml structure >>> df = task_func('http://example.com/sample_data.xml') >>> print(df) name 0 john 25 jane 30 # example with an invalid xml structure >>> df = task_func('http://example.com/invalid_structure.xml') valueerror: xml structure does not match expected format.\n    \"\"\"\n    try:\n        # Fetch the XML file from the URL\n        response = urllib.request.urlopen(url)\n        xml_data = response.read()\n    except Exception as e:\n        raise ValueError(f\"Error fetching XML file from URL: {e}\")\n\n    try:\n        # Parse the XML data\n        root = etree.fromstring(xml_data)\n    except Exception as e:\n        raise ValueError(f\"Error parsing XML data: {e}\")\n\n    # Extract data from XML and store it in a dictionary\n    data = {}\n    for item in root.findall('item'):\n        item_data = {}\n        for child in item:\n            item_data[child.tag] = child.text\n        data[item.tag] = item_data\n\n    # Convert the dictionary to a pandas dataframe\n    df = pd.DataFrame(data)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads text file from a specified url, processes text count the frequency each word, then plots a bar chart showing the ten most frequently occurring words. parameters: url (str): the url from which the text file is to downloaded. the url should point directly to a text file. returns: tuple: a tuple containing two elements: - counter: a counter object from the collections module, containing word frequencies in the text. - axes: a matplotlib axes object represents the plotted bar chart of the ten most common words. note: - the function assumes the url points to a plain text file and may not handle binary files or non-text content correctly. - words are identified using a basic regular expression and are case-sensitive. - the function does not remove common stopwords; all words are counted as is. - requires internet access to download the file from the url. example: >>> word_freq, ax = task_func('http://www.example.com/data.txt') >>> print(word_freq.most_common(5)) [('the', 102), ('of', 76), ('and', 64), ('to', 52), ('in', 41)] requirements: - urllib - re - collections - matplotlib\n    \"\"\"\n    # Download the text file from the url\n    with urllib.request.urlopen(url) as response:\n        text = response.read().decode('utf-8')\n\n    # Use a regular expression to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count the frequency of each word\n    word_freq = Counter(words)\n\n    # Get the ten most common words\n    most_common_words = word_freq.most_common(10)\n\n    # Create a bar chart of the ten most common words\n    fig, ax = plt.subplots()\n    ax.bar([word for word, freq in most_common_words], [freq for word, freq in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Ten Most Common Words')\n    plt.show()\n\n    return word_freq, ax\n\n"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Download extracts a zip file from a specified url a given directory. parameters: - url (str): the url from to download the zip file. it should be a valid and accessible url. - download_path (str): the directory path where the zip file will be downloaded and extracted. defaults to \"mnt/data/downloads/\". returns: - str: path to the directory containing the extracted contents. if an error occurs, a descriptive message returned. the message starts with \"error: \". if the specific descrption is either \"the url does not point to a zip file.\", or \"the downloaded file is not a valid zip file.\", or \"unable to download the file from the provided url.\". raises: - network issues or invalid url: returns \"error: unable to download the file from the provided url.\" if are issues reaching the url or downloading the file. - incorrect file type: returns \"error: the url does not point to a zip file.\" if the downloaded file's content type is not 'application/zip'. - corrupt zip file: returns \"error: the downloaded file is not a valid zip file.\" if the downloaded file is a zip file but is corrupt or cannot be extracted. - general exceptions: catches and reports any other exceptions (like runtime errors) that occur during the process with a specific error message, formatted as \"error: [exception message]\". requirements: - requests - os - zipfile example: >>> task_func('https://example.com/file.zip')'mnt/data/downloads/file'\n    \"\"\"\n    try:\n        # download the zip file\n        response = requests.get(url)\n        if response.status_code != 200:\n            return \"error: unable to download the file from the provided url.\"\n        \n        # check if the content type is 'application/zip'\n        if 'application/zip' not in response.headers['content-type']:\n            return \"error: the url does not point to a zip file.\"\n        \n        # save the zip file\n        zip_file_path = os.path.join(download_path, url.split('/')[-1])\n        with open(zip_file_path, 'wb') as f:\n            f.write(response.content)\n        \n        # extract the zip file\n        try:\n            with ZipFile(zip_file_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"error: the downloaded file is not a valid zip file.\"\n        \n        # remove the zip file\n        os.remove(zip_file_path)\n        \n        # return the path to the extracted directory\n        return os.path.join(download_path, url.split('/')[-1].split('.')[0])\n    except Exception as e:\n        return f\"error: {str(e)}\"\n\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Extracts and converts data from html table based on given 'table_id' on a webpage into a pandas dataframe. if the table is present but contains no (i.e., no <tr> tags), the function returns empty dataframe. parameters: - url (str): the url of the webpage from which to extract the table. - table_id (str): the 'id' attribute of the html table to be extracted. returns: - df (pd.dataframe): a dataframe containing the data extracted from the specified html table. if the table is found but has no rows (<tr> elements), an empty dataframe is returned. raises: - requests.exceptions.httperror: if the http request fails (e.g., due to connection issues or a non-successful status code like 404 or 500). valueerror: if no table with the specified 'table_id' is found on the webpage. the error message will be \"table with the specified id not found.\" requirements: - requests - bs4.beautifulsoup - pandas - io notes: - the function raises an httperror for http requests, which includes scenarios like network or non-2xx responses. - a valueerror is raised when the html table with the specified id is not present in the webpage's content, indicating either an incorrect id or the absence of the table. - if the located table has no rows, indicated by the absence of <tr> tags, an empty dataframe is returned. this is useful for handling tables that are structurally present in the html but are devoid of data. example: >>> task_func('https://example.com/data.html', 'table1') dataframe: 0 alice 25 1 bob 30 example of valueerror: >>> task_func('https://example.com/data.html', 'nonexistent_table') valueerror: table with the specified id not found. example of empty table: >>> task_func('https://example.com/.html', 'empty_table') dataframe: empty dataframe columns: [] index: []\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        print(f\"HTTP Error: {errh}\")\n        return pd.DataFrame()\n    except requests.exceptions.ConnectionError as errc:\n        print(f\"Error Connecting: {errc}\")\n        return pd.DataFrame()\n    except requests.exceptions.Timeout as errt:\n        print(f\"Timeout Error: {errt}\")\n        return pd.DataFrame()\n    except requests.exceptions.RequestException as err:\n        print(f\"Something went wrong: {err}\")\n        return pd.DataFrame()\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n\n    if table is None:\n        raise ValueError(\"table with the specified id not found.\")\n\n    table_str = str(table)\n    df = pd.read_html(StringIO(table_str))[0]\n\n    if df.empty:\n        return pd.DataFrame()\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Downloads extracts zip file from a specified url. parameters: url (str): the url the zip file to download. filename (str): the filename under the downloaded zip file will be saved. returns: tuple: a tuple containing a status message and a list of filenames in the unzipped directory, or empty list if extraction fails. note: the status message will contain \"error\" when: - network-related exceptions raised if the download fails. - file-related exceptions are raised if an issue with file handling or extraction. requirements: - requests - pathlib.path - zipfile example: >>> task_func('http://example.com/myfile.zip', 'myfile.zip') ('download and extraction successful', ['file1.txt', 'file2.txt'])\n    \"\"\"\n    try:\n        # Download the zip file\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n\n        # Save the zip file\n        zip_path = DOWNLOAD_DIR / filename\n        with open(zip_path, 'wb') as file:\n            file.write(response.content)\n\n        # Extract the zip file\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Get the list of files in the unzipped directory\n        unzipped_files = [str(file) for file in ZIP_DIR.iterdir()]\n\n        return ('download and extraction successful', unzipped_files)\n\n    except requests.exceptions.RequestException as e:\n        return ('error', f'network-related exception: {e}')\n    except (FileNotFoundError, PermissionError, zipfile.BadZipFile) as e:\n        return ('error', f'file-related exception: {e}')\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    This function scrapes webpage for all hyperlinks and saves them as absolute urls to a csv file. parameters: - url (str): the relative url the webpage to scrape. - base_url (str, optional): the base url of the website to prepend to relative links. defaults to 'https://www.example.com'. - csv_file (str, optional): the filename for the csv file where the links will saved. defaults to'scraped_data.csv'. returns: - int: the number of links scraped from the webpage. requirements: - requests - urllib.parse.urljoin - bs4.beautifulsoup - csv: >>> task_func('/mywebpage') 5 >>> task_func('/anotherpage', base_url='https://www.different.com', csv_file='other_links.csv') 8\n    \"\"\"\n    response = requests.get(urljoin(base_url, url))\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    links = soup.find_all(\"a\")\n    with open(csv_file, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Link\"])\n        for link in links:\n            writer.writerow([urljoin(base_url, link.get(\"href\"))])\n    return len(links)\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    This function parses html table data from a specified url or local file stores into sqlite database. the function handles different scenarios for fetching, processing, and storing data. parameters: - webpage_url (str): the url of the webpage or a local file path prefixed with \"file://\". - database_name (str): the name of the sqlite database file where the data stored. defaults to \"my_database.db\". returns: - int: the number of rows the parsed html table. raises: - requests.exception: this exception is raised if there is a network issue in accessing the url. this includes scenarios like connection errors, timeouts, and http errors. - sqlite3.databaseerror: this exception is raised in case of issues connecting to, or writing to, the sqlite database. this includes issues like invalid database names, write permissions, or sql execution errors. notes: - the function is designed to replace the table \"my_table\" in the specified sqlite database with new data each time it is called. - if the html content does not contain a table or if the table is empty, the function will return 0, indicating no rows were parsed and stored. - this function relies on the'requests', 'lxml', 'pandas', 'ite3' libraries for its operations. requirements: - requests - lxml - pandas - sqlite3 example: >>> num_rows = task_func(\"http://example.com/tabledata\") >>> print(f\"number of rows parsed: {num_rows}\") number of rows parsed: 5\n    \"\"\"\n    # fetch the webpage content\n    try:\n        response = requests.get(webpage_url)\n        response.raise_for_status()  # raise an exception for 4xx or 5xx status codes\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching webpage: {e}\")\n        return 0\n\n    # parse the html content\n    try:\n        tree = html.fromstring(response.content)\n    except Exception as e:\n        print(f\"Error parsing HTML: {e}\")\n        return 0\n\n    # find the table\n    table = tree.xpath(\"//table[@id='my_table']\")\n    if not table:\n        print(\"No table found with id 'my_table'\")\n        return 0\n\n    # convert the table to a pandas dataframe\n    df = pd.read_html(html.tostring(table[0]))[0]\n\n    # store the dataframe to sqlite\n    try:\n        conn = sqlite3.connect(database_name)\n        df.to_sql(\"my_table\", conn, if_exists=\"replace\", index=False)\n        conn.commit()\n        conn.close()\n    except sqlite3.DatabaseError as e:\n        print(f\"Error storing data to SQLite: {e}\")\n        return 0\n\n    return len(df)\n\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens image file, extracts text using ocr, converts the text encoding, with fallback image comment processing. raises: - valueerror: unicodedecodeerror orror occurs during conversion parameters: - filename (str): the path to the image file. defaults to a global variable 'image_path'. - from_encoding (str): the original encoding the extracted text or comment. default 'cp1251'. - to_encoding (str): the target encoding for the converted text or comment. default 'utf8'. returns: - comment (str): the text extracted from the image or the image comment, converted to the target encoding. if ocr and comment processing both fail, returns an empty string. raises: - valueerror: if incorrect encodings provided for the text or comment. requirements: - codecs - pil - pytesseract example: # assuming 'image.png' contains the text '\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' russian (encoded in cp1251), # and this text is successfully extracted by the ocr. >>> text = task_func('image.png', 'cp1251', 'utf8') >>> print(text) '\u043f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' # this output is the utf-8 encoded version of the extracted text.\n    \"\"\"\n    try:\n        image = Image.open(filename)\n        text = pytesseract.image_to_string(image, lang='rus')\n        return text.encode(from_encoding).decode(to_encoding)\n    except Exception as e:\n        print(f\"OCR processing failed: {e}\")\n        try:\n            with codecs.open(filename, \"r\", encoding=from_encoding) as f:\n                comment = f.read()\n            return comment.encode(from_encoding).decode(to_encoding)\n        except Exception as e:\n            print(f\"Image comment processing failed: {e}\")\n            return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from specified rest api url processes for json parsing. process involves decoding and re-encoding the data, handling different encoding scenarios. note: - the function initiates an http get request to the specified url with a 5-second timeout. it retrieves the response content in raw bytes. parameters: - url (str): the url the rest api. default 'http://api.example.com/data'. - from_encoding (str, optional): the original encoding of the data. if none, encoding is auto-detected. default is none. - to_encoding (str): the target encoding format for the data. default is 'utf8'. returns: - dict: the json-parsed data after re-encoding. returns an empty dictionary if the content is empty. raises: - valueerror: \"unable to detect encoding for non-empty content\", if it fails to detect the encoding for non-empty response content. requirements: - json - requests - chardet example: >>> data = task_func('http://api.example.com/data') >>> print(data) {'key': 'value'} # example of expected output notes: - the function sets a timeout of 5 seconds for the api request. - it handles cases with empty content and undetectable encoding by returning an empty dictionary or raising an exception, respectively. - the decoding and re-encoding steps ensure compatibility with various data formats and the final json parsing.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()  # Raise an HTTPError for bad status codes\n        content = response.content\n        if not content:\n            return {}  # Return an empty dictionary for empty content\n\n        if from_encoding is None:\n            detected_encoding = chardet.detect(content)[\"encoding\"]\n            if detected_encoding is None:\n                raise ValueError(\"unable to detect encoding for non-empty content\")\n            from_encoding = detected_encoding\n\n        decoded_content = content.decode(from_encoding)\n        reencoded_content = decoded_content.encode(to_encoding)\n\n        return json.loads(reencoded_content)\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return {}\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads a csv file and processes its date-related data. the function performs several key tasks such as checking for the file's existence, validating the presence of a specified date column, converting date values to datetime objects, filtering rows based on the current date, and sorting the resulting data. the function handles special cases, like an empty csv file, by returning an empty dataframe and raises exceptions for specific error scenarios like missing files or columns. parameters: - csv_file_path (str): the path to the csv file. filenotfounderror is raised if the path is invalid. - column_name (str): the name of the column containing date values. valueerror is raised if this column is missing in the csv file. - date_format (str, optional): the format of the date values in the specified column. defaults to '%y-%m-%d'. returns: - pandas - os - datetime.datetime - pandas.errors.emptydataerror raises: - filenotfounderror: if the specified csv file is not found at the given path. - valueerror: if the specified column is not present in the csv file. requirements: - pandas - os - datetime example: >>> task_func('path/to/csvfile.csv', 'datecolumn') date value 0 2023-12-10 100 1 2023-12-11 150\n    \"\"\"\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(f\"The file {csv_file_path} does not exist.\")\n\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n\n    if column_name not in df.columns:\n        raise ValueError(f\"The column {column_name} is not present in the csv file.\")\n\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    today = datetime.now()\n    df = df[df[column_name] <= today]\n    df = df.sort_values(by=column_name)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    This function secures client socket using ssl/tls and sends back the sha256 hash a file requested by the client. parameters: - client_socket (socket.socket): the client socket that will wrapped with ssl/tls for secure communication. - cert_file (str): the file path to the ssl certificate to be used for the secure connection. - key_file (str): the file path to the ssl key corresponding to the certificate. - buffer_size (int, optional): the size of the buffer used to receive data from the client. defaults to 1024 bytes. returns: - str: the sha256 hash of the requested file. if the requested file does not exist, returns 'file not found'. case of exception during processing, an error message returned. requirements: - ssl - os - hashlib note: - this function assumes that the client requests a file by sending its path. - the function does not handle the opening or closing of the client_socket itself. - error handling is basic and might need to be expanded based on specific use cases. example: >>> # server setup >>> server_socket = socket.socket(socket.af_inet, socket.sock_stream) >>> server_socket.bind(('localhost', 443)) >>> server_socket.listen(5) >>> cert_file = \"path/to/certificate.crt\" >>> key_file = \"path/to/private.key\" >>> # accept client connection >>> client_socket, addr = server_socket.accept() >>> # use task_func function to handle the client request >>> file_hash = task_func(client_socket, cert_file, key_file) >>> print(\"sent file hash:\", file_hash) >>> server_socket.close()\n    \"\"\"\n    try:\n        # wrap the client socket with ssl/tls\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n        context.load_cert_chain(cert_file, key_file)\n        secure_client_socket = context.wrap_socket(client_socket, server_side=True)\n\n        # receive the file path requested by the client\n        file_path = secure_client_socket.recv(buffer_size).decode()\n\n        # check if the file exists\n        if not os.path.isfile(file_path):\n            secure_client_socket.send(\"file not found\".encode())\n            return \"file not found\"\n\n        # open the file in binary read mode\n        with open(file_path, \"rb\") as file:\n            # read the file in chunks\n            while True:\n                data = file.read(buffer_size)\n                if not data:\n                    break\n                # send the chunk of data to the client\n                secure_client_socket.send(data)\n\n        # calculate the sha256 hash of the file\n        with open(file_path, \"rb\") as file:\n            file_hash = hashlib.sha256(file.read()).hexdigest()\n\n        # send the sha256 hash back to the client\n        secure_client_socket.send(file_hash.encode())\n\n        return file_hash\n\n    except Exception as e:\n        # send an error message back to the client\n        secure_client_socket.send(str(e).encode())\n        return str(e)\n\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run non-blocking echo server appends server's current time received data sends back to the client, while handling exceptional conditions for each socket. parameters: - server_address (str): the address for the server to listen on. default 'localhost'. - server_port (int): the port for the server to listen on. default is 12345. - buffer_size (int): the buffer size for data reception. default is 1024 bytes. - run_duration (int): the duration (in seconds) for the server will run. default is 5 seconds. returns: - str: a status message indicating the server's operation and run duration. requirements: - socket - select - queue - datetime example: >>> print(task_func()) 'server started on localhost:12345. ran for 5 seconds.'\n    \"\"\"\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((server_address, server_port))\n    server_socket.listen(5)\n    server_socket.setblocking(False)\n\n    inputs = [server_socket]\n    outputs = []\n    message_queues = {}\n\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    while datetime.now() < end_time:\n        readable, writable, exceptional = select.select(inputs, outputs, inputs)\n\n        for s in readable:\n            if s is server_socket:\n                connection, client_address = s.accept()\n                connection.setblocking(False)\n                inputs.append(connection)\n                message_queues[connection] = queue.Queue()\n            else:\n                data = s.recv(buffer_size)\n                if data:\n                    message_queues[s].put(data)\n                    if s not in outputs:\n                        outputs.append(s)\n                else:\n                    if s in outputs:\n                        outputs.remove(s)\n                    inputs.remove(s)\n                    s.close()\n                    del message_queues[s]\n\n        for s in writable:\n            try:\n                next_msg = message_queues[s].get_nowait()\n            except queue.Empty:\n                outputs.remove(s)\n            else:\n                s.send(next_msg)\n                s.send(str(datetime.now()).encode())\n\n        for s in exceptional:\n            inputs.remove(s)\n            if s in outputs:\n                outputs.remove(s)\n            s.close()\n            del message_queues[s]\n\n    server_socket.close()\n    return f\"server started on {server_address}:{server_port}. ran for {run_duration} seconds.\"\n\n"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive message from a client socket send it as email via an smtp server. parameters: client_socket (socket.socket): the client socket from which the message received. returns: - none note: - requires a working internet connection and access an smtp server. - the function asks for the sender's email, recipient's email, and sender's email password for authentication. requirements: - smtplib - email.message.emailmessage - getpass example: >>> import socket >>> server_socket = socket.socket(socket.af_inet, socket.sock_stream) >>> server_socket.bind((server_address, server_port)) >>> server_socket.listen(5) >>> client_socket, addr = server_socket.accept() >>> task_func(client_socket)\n    \"\"\"\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    sender_email = input(\"Enter your email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    password = getpass.getpass(\"Enter your email password: \")\n\n    msg = EmailMessage()\n    msg.set_content(message)\n    msg['Subject'] = 'Socket Message'\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(sender_email, password)\n        server.send_message(msg)\n\n    print(\"Email sent successfully!\")\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes a csv file containing text data and generates a histogram of ten most common words. this function reads a csv file, which is expected to contain a single column of text data. it then splits the text into words and creates a histogram of the frequency of the top ten most common words, excluding a predefined set of stopwords. the resulting histogram can be either displayed on the screen or saved to a file. the csv file should have a single column with the header 'text'. each row under this column should contain a text string. if the csv file does not have a header, the first column is assumed to be the text data. parameters: - file_path (str): the path to the input csv file. - save_path (str, optional): the path where the histogram plot will be saved. if not provided, the plot is displayed on the screen. returns: - matplotlib.axes.axes: the axes object of the plot if save_path is not provided. useful for further customization or display in notebooks. - none: if save_path is provided, the plot is saved to the specified path, and the function returns none. raises: - filenotfounderror: if the specified file_path does not exist. it raises a filenotfounderror with a message indicating the file path that was not found. - exception: for any other errors that occur during the function execution. in this case, the error is printed to the console, and none is returned. requirements: - pandas - scikit-learn - matplotlib notes: - the function uses pandas for data manipulation, sklearn's countvectorizer for text vectorization, and matplotlib for plotting. - a predefined list of stopwords is used to filter out common but insignificant words from the histogram. examples: >>> ax = task_func('text_data.csv') >>> print(ax) axes(0.125,0.11;0.775x0.77) >>> result = task_func('text_data.csv', 'output_plot.png') >>> print(result) none\n    \"\"\"\n    try:\n        # Read the csv file\n        data = pd.read_csv(file_path, header=None)\n        text_data = data[0]\n\n        # Vectorize the text data\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        X = vectorizer.fit_transform(text_data)\n\n        # Get the feature names (words)\n        feature_names = vectorizer.get_feature_names_out()\n\n        # Get the word counts\n        word_counts = X.sum(axis=0)\n\n        # Get the top ten most common words\n        top_ten_words = feature_names[word_counts.argsort()[::-1][:10]]\n        top_ten_counts = word_counts[word_counts.argsort()[::-1][:10]]\n\n        # Create a histogram\n        plt.figure(figsize=(10, 6))\n        plt.bar(top_ten_words, top_ten_counts)\n        plt.xlabel('Words')\n        plt.ylabel('Frequency')\n        plt.title('Top Ten Most Common Words')\n        plt.xticks(rotation=45)\n\n        # Save the plot if save_path is provided\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            return plt.gca()\n    except FileNotFoundError:\n        print(f\"File not found: {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create dataframe with combinations animals foods in a 'animal:food' format. parameters: - animals (list of str, optional): a list of animal names. if not provided, defaults a predefined list of common animals including 'dog', 'cat', 'elephant', 'tiger', 'lion', 'zebra', 'giraffe', 'bear', 'monkey', 'kangaroo'. - foods (list of str, optional): a list of food names. if not provided, defaults to a predefined list of common foods including 'meat', 'fish', 'grass', 'fruits', 'insects', 'seeds', 'leaves'. returns: - df (pandas.dataframe): a dataframe where each row represents a unique animal from the 'animals' list and each column represents a food item from the 'foods' list. each cell contains a string in the format 'animal:food'. handling of special cases: - if both 'animals' and 'foods' lists empty or not provided, the function returns empty dataframe. - if either 'animals' or 'foods' list empty or not provided, the function uses its predefined list for the missing parameter. requirements: - pandas - numpy - itertools example: >>> animal_food_pairs = task_func(['dog', 'cat'], ['meat', 'fish']) >>> print(animal_food_pairs) meat fish 0 dog:meat dog:fish 1 cat:meat cat:fish note: - the function generates all possible combinations of the provided 'animals' and 'foods' using itertools.product. - the resulting pairs are shuffled randomly to ensure variety in the dataframe layout.\n    \"\"\"\n    if animals is None:\n        animals = ['dog', 'cat', 'elephant', 'tiger', 'lion', 'zebra', 'giraffe', 'bear', 'monkey', 'kangaroo']\n    if foods is None:\n        foods = ['meat', 'fish', 'grass', 'fruits', 'insects', 'seeds', 'leaves']\n\n    if not animals or not foods:\n        return pd.DataFrame()\n\n    animal_food_pairs = list(itertools.product(animals, foods))\n    np.random.shuffle(animal_food_pairs)\n\n    df = pd.DataFrame(animal_food_pairs, columns=['animal', 'food'])\n    df['animal:food'] = df['animal'] + ':' + df['food']\n\n    return df[['animal:food']]\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference seconds between each consecutive pair timestamps in a given list, after converting them a specified timezone. parameters: - time_strings (list of str): a list of timestamp strings in the format 'dd/mm/yy hh:mm:ss.fff'. - timezone (str): the timezone to the timestamp strings should converted. this should be a valid timezone string, e.g., 'america/new_york'. returns: - float: the mean (average) time difference in seconds between each consecutive pair of timestamps. if less than two timestamps in the list, the function returns 0.0. requirements: - datetime - pytz - numpy notes: - the function first converts each timestamp in the list to the specified timezone. - it calculates the absolute time difference in seconds between each consecutive pair of timestamps. - if the list contains less than two timestamps, the function returns 0.0, as there are no pairs to compare. - if there are no time differences (e.g., in case of a single timestamp after timezone conversion), it also returns 0.0. - the function uses numpy's mean function to calculate the average time difference. example: >>> time_strings = ['30/03/09 16:31:32.123', '30/03/09 16:32:33.123', '30/03/09 16:33:34.123'] >>> mean_diff = task_func(time_strings, 'america/new_york') >>> print(mean_diff) 61.0\n    \"\"\"\n    if len(time_strings) < 2:\n        return 0.0\n\n    timezone = pytz.timezone(timezone)\n    time_objects = [datetime.strptime(time_string, '%d/%m/%y %H:%M:%S.%f').replace(tzinfo=pytz.utc).astimezone(timezone) for time_string in time_strings]\n    time_differences = [time_objects[i+1] - time_objects[i] for i in range(len(time_objects)-1)]\n    time_differences_in_seconds = [diff.total_seconds() for diff in time_differences]\n\n    return np.mean(time_differences_in_seconds) if time_differences_in_seconds else 0.0\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes frequency of words in given text after lowercasing, removing punctuation, splitting into words, plots the top 10 most common words. parameters: - text (str): the input text analyzed. returns: - list: a list of tuples containing the 10 most common words and their counts. - axes: the matplotlib axes object of the bar chart. requirements: - re - collections.counter - matplotlib.pyplot example: >>> common_words, ax = task_func(\"this is a sample text. this text contains sample words like 'text', 'sample', and 'words'.\") >>> print(common_words) [('sample', 3), ('text', 3), ('this', 2), ('words', 2), ('is', 1), ('a', 1), ('contains', 1), ('like', 1), ('and', 1)]\n    \"\"\"\n    # Lowercase the text\n    text = text.lower()\n    \n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Get the top 10 most common words\n    top_10_common_words = word_counts.most_common(10)\n    \n    # Plot the top 10 most common words\n    plt.bar([word for word, count in top_10_common_words], [count for word, count in top_10_common_words])\n    plt.xlabel('Words')\n    plt.ylabel('Frequency')\n    plt.title('Top 10 Most Common Words')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n    \n    return top_10_common_words, plt.gca()\n"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts url from a given string retrieves title the web page from url. if no valid url found, or the url does not result a successful web page fetch, returns an appropriate error message. parameters: mystring (str): the string from extract the url. returns: str: the title of the webpage at the extracted url if successful, otherwise one of the following error messages: - \"no valid url found in the provided string.\" - \"unable to fetch the content of the url: {url}\" - \"no title tag found in the webpage.\" requirements: - re - urllib.parse.urlparse - bs4.beautifulsoup - requests example: >>> task_func('check this out: https://www.google.com') 'google' >>> task_func('no url here') 'no valid url found in the provided string.' >>> task_func('check this broken link: https://www.thisdoesnotexist12345.com') 'unable to fetch the content of the url: https://www.thisdoesnotexist12345.com'\n    \"\"\"\n    url = re.search(r'https?://\\S+', myString)\n    if url:\n        url = url.group()\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            return f\"unable to fetch the content of the url: {url}\"\n        soup = BeautifulSoup(response.text, 'html.parser')\n        title = soup.title.string\n        if title:\n            return title\n        else:\n            return \"no title tag found in the webpage.\"\n    else:\n        return \"no valid url found in the provided string.\"\n\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses json string to find a url associated with a specified key, downloads file from the url, and saves it with a timestamped filename. the filename format is '{unknown_key}_{timestamp}.txt', where 'timestamp' is formatted as '%y%m%d%h%m%s%f' to include the date and time down to microseconds. the file is saved in the specified directory or in the current working directory by default. parameters: - json_data (str): the json data as a string, expected to contain a key directly linked to a url. - unknown_key (str): the key used to extract the url from the json data. - save_dir (str, optional): the directory to save the downloaded file. if not specified, the file is saved in the current working directory. defaults to none. returns: str: the absolute path of the downloaded file, reflecting where it has been saved. requirements: - json - requests - os - datetime.datetime example: >>> json_str = '{\"unknown\": \"https://example.com/file.txt\"}' >>> file_path = task_func(json_str, 'unknown') >>> print(f\"downloaded file saved at: {file_path}\")\n    \"\"\"\n    # parse json data\n    data = json.loads(json_data)\n    \n    # extract url from json data\n    url = data[unknown_key]\n    \n    # create timestamped filename\n    timestamp = datetime.now().strftime('%y%m%d%h%m%s%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    \n    # set save directory\n    if save_dir:\n        save_path = os.path.join(save_dir, filename)\n    else:\n        save_path = os.path.join(os.getcwd(), filename)\n    \n    # download file from url\n    response = requests.get(url)\n    \n    # save file\n    with open(save_path, 'wb') as file:\n        file.write(response.content)\n    \n    return save_path\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from given url or local file saves them to a specified file in json format. parameters: - url (str): url of the webpage to scrape or the local file path prefixed with 'file://'. - output_path (str): the path where the extracted phone numbers should saved in json format. returns: - list: a list of strings, each representing a found phone number. requirements: - bs4 - requests - re - json example: >>> task_func('file:///path/to/local/file.txt', 'output.json') ['+1 (234) 56701', '+ 1234 5678']\n    \"\"\"\n    if url.startswith('file://'):\n        with open(url[7:], 'r') as file:\n            html_content = file.read()\n    else:\n        response = requests.get(url)\n        html_content = response.text\n\n    soup = bs4.BeautifulSoup(html_content, 'html.parser')\n    phone_numbers = re.findall(r'\\+?\\d[\\d -]{8,12}\\d', soup.text)\n\n    with open(output_path, 'w') as file:\n        json.dump(phone_numbers, file)\n\n    return phone_numbers\n"}
