{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    factor = {\"Local\": 1, \"National\": 1.5, \"International\": 2.5}\n    total_cost = base_cost * factor.get(location, 1)\n    for item in items:\n        if isinstance(item, str):\n            total_cost *= factor[\"International\"]\n            item = 1.0\n        if item > 5.0:\n            total_cost += 10.0\n        total_cost += item * 10.0\n    return \"{:.2f}\".format(total_cost)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    factor = {\"Local\": 1.0, \"National\": 1.5, \"International\": 2.5}\n    total_cost = base_cost * factor.get(location, 1.0)\n    for item in items:\n        if isinstance(item, str):\n            item = 1.0\n        if item > 5.0:\n            total_cost += 10.0\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    def encrypt(word: str, key: int) -> str:\n        return ''.join(chr((ord(c) - 97 + key) % 26 + 97) if 'a' <= c <= 'z' else c for c in word)\n\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n\n    return [encrypt(word.lower(), key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    if not input_string:\n        return ['']\n    result = []\n    for i in range(1, len(input_string)):\n        left = input_string[:i]\n        right = input_string[i:]\n        if left[0] == '0':\n            continue\n        left_chars = [chr(int(c) + 96) for c in left]\n        for right_str in foo(right):\n            for c in right_str:\n                result.append(''.join(left_chars) + c)\n    if input_string[0] == '0':\n        return result\n    if int(input_string) <= 26:\n        result.append(chr(int(input_string) + 96) + '')\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in magical_alphabet\n        for right_str in foo(right):\nNameError: name 'foo' is not defined\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    count = 1\n    max_height = candles[0]\n    for candle in candles[1:]:\n        if candle > max_height:\n            count += 1\n            max_height = candle\n    return count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    rows = len(matrix)\n    cols = max(len(row) for row in matrix)\n    res = []\n    for line in range(rows + cols - 1):\n        if line % 2 == 0:\n            for i in range(max(0, line - cols + 1), min(line + 1, rows)):\n                j = line - i\n                res.append(matrix[i][j])\n        else:\n            for i in range(max(0, line - cols + 1), min(line + 1, rows)):\n                j = line - i\n                res.append(matrix[i][cols - 1 - j])\n    return res\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 134, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in zigzag_traversal\n                res.append(matrix[i][cols - 1 - j])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    # Your code here\n    x, y = position\n    n, m = len(grid), len(grid[0])\n    if not (0 <= x < n and 0 <= y < m):\n        return grid\n    if grid[x][y] != -1:\n        return grid\n    grid[x][y] = 0\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == -1:\n                grid[nx][ny] = 0\n    return grid\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    # split the canvas into a list of characters\n    canvas_list = list(canvas)\n    painter_count = 0\n    asterisk_count = 0\n\n    # iterate over the canvas\n    for i in range(len(canvas_list)):\n        # if the character is 'P', increment the painter count\n        if canvas_list[i] == 'P':\n            painter_count += 1\n            # if there is already a '*' at this position, return 'Invalid canvas'\n            if i > 0 and canvas_list[i-1] == '*':\n                return 'Invalid canvas'\n        # if the character is '-', replace it with '*' and increment the asterisk count\n        elif canvas_list[i] == '-':\n            canvas_list[i] = '*'\n            asterisk_count += 1\n\n    # if there is more than one painter or the number of painted spaces is not even, return 'Invalid canvas'\n    if painter_count != 1 or asterisk_count % 2 != 0:\n        return 'Invalid canvas'\n\n    # join the list of characters back into a string and return it\n    return ''.join(canvas_list)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 162, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.translate(str.maketrans('', '', st.punctuation)).lower()\n    words = string.split()\n    return {word: words.count(word) for word in words}\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = animal_string.split()\n    animal_counts = {}\n    for sound in animal_sounds:\n        animal = sound[0]\n        if animal not in 'CDb':\n            continue\n        if animal in animal_counts:\n            continue\n        if len(animal_counts) == 5:\n            break\n        count = sound[1:].count('|')\n        animal_counts[animal] = count\n    return list(animal_counts.values())\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        fruit_str = \", \".join(fruits[:-1])\n        fruit_str += f\" and {fruits[-1]}\"\n        return f\"Oh, are those {fruit_str} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    c = Counter(flux_values)\n    most_common = c.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    rarest_elems = [k for k, v in count_dict.items() if v == min(count_dict.values())]\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            index = vowels.index(char)\n            alias += vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            alias += consonants[(index+1)%26]\n        else:\n            alias += char\n    return alias.upper() if name.isupper() else alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    for value, count in value_counts.items():\n        if count == 2:\n            score += int(value) * 2\n        elif count == 3:\n            score += int(value) * 3 * 2\n        elif count == 4:\n            score += int(value) * 4 * 2\n        elif count == 5:\n            score += int(value) * 5 * 2\n    return score\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return sum(fib_seq)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(foo(n - 1)) + str(7 - sum(map(int, str(foo(n - 1))))))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 131, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 19, in magical_seven\n        return int(str(foo(n - 1)) + str(7 - sum(map(int, str(foo(n - 1))))))\nNameError: name 'foo' is not defined\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    # Initialize count to 0\n    count = 0\n\n    # Iterate over the rows\n    for i in range(len(m)):\n        # Iterate over the columns\n        for j in range(len(m[i])):\n            # If the cell is a human\n            if m[i][j] == 1:\n                # Check the cells above, below, left, and right\n                for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                    # If the cell is a vampire, increment the count\n                    if 0 <= x < len(m) and 0 <= y < len(m[i]) and m[x][y] == 2:\n                        count += 1\n                        break\n    return count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in vampires_in_matrix\n                    if 0 <= x < len(m) and 0 <= y < len(m[i]) and m[x][y] == 2:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n+1):\n            result.append(','.join(str(j) for j in range(1, i+1)))\n        for i in range(n-1, 0, -1):\n            result.append(','.join(str(j) for j in range(1, i+1)))\n        return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, grid, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def check_directions(word, grid):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                for direction in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    if check_word(word, grid, row, col, direction):\n                        return True\n        return False\n\n    for word in words:\n        if not check_directions(word, grid):\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/22", "completion": "\n    return (t * v) / 9.461e12\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 122, in <module>\n  File \"<string>\", line 120, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in prime_cipher\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n  File \"<string>\", line 25, in <genexpr>\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '&',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    return ''.join(alien_dict[ch] for ch in english_word)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n    # Initialize the max frequency and the sentence with the max frequency\n    max_freq = 0\n    max_sentence = \"\"\n    # Initialize the frequency of the word\n    word_freq = 0\n    # Loop through each sentence\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n        # Count the frequency of the word in the sentence\n        freq = words.count(word)\n        # If the frequency is greater than the max frequency, update the max frequency and the sentence with the max frequency\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n        # Add the frequency to the total frequency of the word\n        word_freq += freq\n    # Return the total frequency of the word and the sentence with the max frequency\n    return (word_freq, max_sentence if max_freq > 0 else \"\")\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 41, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 170000:\n        return ((taxable_income - 125000) * 0.25) + 2250\n    else:\n        return ((taxable_income - 170000) * 0.3) + 7000 + 5750\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    palindromes = set()\n    length = len(s)\n\n    for i in range(length):\n        for j in range(i+1, length+1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                palindromes.add(substring)\n\n    return sorted(list(palindromes))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 54, in <module>\n  File \"<string>\", line 52, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 39, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of paths to reach each cell\n    paths = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # Initialize the number of paths to reach the first cell to 1\n    paths[0][1] = 1\n\n    # Iterate over each cell in the grid\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            # The number of paths to reach a cell is the sum of the paths to the cell above and to the left\n            paths[i][j] = paths[i-1][j] + paths[i][j-1]\n\n    # Return the number of paths to reach the bottom-right cell\n    return paths[m][n]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    new_playlist = [None] * playlist_length\n    swapped = [False] * playlist_length\n    for i in range(playlist_length):\n        while True:\n            swap_index = random.randint(0, playlist_length - 1)\n            if not swapped[swap_index] and \"Rock\" not in playlist[swap_index]:\n                swapped[swap_index] = True\n                new_playlist[i] = playlist[swap_index]\n                break\n    return new_playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n\n    # There's only one way to reach the 0th step\n    ways[0] = 1\n\n    # For each magic stone\n    for magic_stone in magic_stones:\n        # For each step from the magic stone's power to the top\n        for i in range(magic_stone, n + 1):\n            # Add the number of ways to reach the current step to the number of ways to reach the step minus the magic stone's power\n            ways[i] += ways[i - magic_stone]\n\n    # Return the number of ways to reach the top\n    return ways[n]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation[i] = transformation[i - 1] + 10\n    if m > 0:\n        transformation[m - 1] = 100\n    if m < n:\n        for i in range(m, n - 1):\n            transformation[i + 1] = transformation[i] - 10\n            if transformation[i + 1] < 0:\n                transformation[i + 1] = 0\n    return transformation\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1:\n        return False\n    if email[0] == \"@\" or email[-1] == \"@\" or email[-1] == \".\":\n        return False\n    return True\r\n\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    integral = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral[i + 1] = xs[i] / (i + 1)\n    return integral\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    upper_vowels = vowels.upper()\n    upper_consonants = consonants.upper()\n    result = \"\"\n    for char in s:\n        if char in vowels:\n            index = vowels.index(char)\n            result += vowels[(index+1)%5]\n        elif char in upper_vowels:\n            index = upper_vowels.index(char)\n            result += upper_vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            result += consonants[(index+1)%21]\n        elif char in upper_consonants:\n            index = upper_consonants.index(char)\n            result += upper_consonants[(index+1)%21]\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    result = []\n    for i in range(n):\n        result.append('*' + s * n + '*')\n    result.append('*' * (n * len(s) + 2))\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0] + ' ' + potion.split()[1], int(potion.split()[2])) for potion in potions]\n    potions.sort(key=lambda x: (x[1], x[0]))\n    left, right = 0, len(potions) - 1\n    while left < right:\n        curr_sum = potions[left][1] + potions[right][1]\n        if curr_sum == target:\n            return [potions[left][0], potions[right][0]]\n        elif curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # \u52a8\u6001\u89c4\u5212\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    legendary_acquired = False\n    second_most_valuable = None\n    highest_rarity = 0\n    second_highest_rarity = 0\n\n    for item in player_input:\n        if item == 5:\n            legendary_acquired = True\n        if item > highest_rarity:\n            second_highest_rarity = highest_rarity\n            highest_rarity = item\n        elif item > second_highest_rarity and item < highest_rarity:\n            second_highest_rarity = item\n\n    if legendary_acquired:\n        if second_highest_rarity == 0:\n            return (True, -1)\n        else:\n            return (True, second_highest_rarity)\n    else:\n        return (False, None)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # calculate the total fuel consumption\n    total_fuel_consumption = duration * (spaceship_weight * planet_gravity * 0.1)\n\n    # check if the spaceship has enough fuel to reach the planet\n    if fuel >= duration:\n        # calculate the remaining fuel\n        remaining_fuel = round(fuel - total_fuel_consumption, 2)\n        return remaining_fuel\n    else:\n        return 'Insufficient fuel'\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    unicorn_weight = w * 1\n    dragon_griffin_weight = e * 2\n    if total_weight <= unicorn_weight + dragon_griffin_weight:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left = [0]*n\n    right = [0]*n\n    stack = []\n    for i in range(n):\n        while stack and arr[i] > arr[stack[-1]]:\n            stack.pop()\n        left[i] = i - (stack[-1] if stack else -1)\n        stack.append(i)\n    stack = []\n    for i in range(n-1, -1, -1):\n        while stack and arr[i] >= arr[stack[-1]]:\n            stack.pop()\n        right[i] = (stack[-1] if stack else n) - i\n        stack.append(i)\n    return max(left[i] + right[i] - 1 for i in range(n))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    def decode(word):\n        return ''.join(ch for ch in word if ch.isalpha())\n\n    def secret_message(test_case):\n        return ''.join(decode(word[0]) for word in test_case)\n\n    return [secret_message(test_case) if 'cannoli' not in test_case else 'Take the cannoli.' for test_case in test_cases]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for key in recipe:\n        if key not in available or recipe[key] > available[key]:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E',\n        '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J',\n        '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O',\n        '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T',\n        '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y',\n        '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7',\n        '11100': '8', '11110': '9', '11111': '0'\n    }\n\n    words = msg.split('/')\n    decoded_msg = ''\n\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += ' '\n\n    return decoded_msg.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 167, in <module>\n  File \"<string>\", line 164, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 49, in morse_decoder\n            decoded_msg += morse_code[letter]\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n\n    return ' '.join(''.join(morse_code[i.upper()] for i in word) for word in text.split(' '))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = []\n    for i in range(len(string)):\n        result.append(list_of_alphabets[i % len(list_of_alphabets)])\n    return ''.join(result)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    count = 0\n    for order in orders:\n        if order <= n * m:\n            count += 1\n        else:\n            break\n    return count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            transformed_s += '!' if i % 2 == 0 else '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    shifted_alphabet_upper = shifted_alphabet.upper()\n    result = ''\n    current_shift = shift\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += shifted_alphabet[alphabet.index(char)]\n            else:\n                result += shifted_alphabet_upper[alphabet.upper().index(char)]\n            current_shift += 1\n            if current_shift == len(alphabet):\n                current_shift = 0\n        else:\n            result += char\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..'\n    }\n\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += '/ '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        spell_index = 0\n        for letter in dish:\n            new_dish += magic_spell[spell_index]\n            spell_index = (spell_index + 1) % len(magic_spell)\n        new_menu[new_dish] = price\n    return new_menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    next_vowel = \"eioua\"\n    next_consonant = \"cdfghjklmnpqrstvwxyzb\"\n    translated = \"\"\n    for char in earth_phrase:\n        if char == \" \":\n            translated += \"@\"\n        elif char in vowels:\n            translated += next_vowel[vowels.index(char)]\n            if earth_phrase[earth_phrase.index(char)-1] in vowels:\n                translated += \"xy\"\n            else:\n                translated += \"yz\"\n        else:\n            translated += next_consonant[consonants.index(char)]\n            if earth_phrase[earth_phrase.index(char)-1] in vowels:\n                translated += \"xy\"\n            else:\n                translated += \"yz\"\n    return translated.title()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    sugar_locations = set(sugar_locations)\n    ants = []\n    happy_ants = 0\n\n    # Add ants to the list\n    for ant_position, direction in ant_positions:\n        ants.append((ant_position, direction))\n\n    # March the ants\n    for i in range(len(ants)):\n        ant_position, direction = ants[i]\n\n        # March the ant until it hits a sugar or the end of the path\n        while True:\n            if direction == \"right\":\n                ant_position += 1\n                if ant_position == path_length:\n                    break\n            else:\n                ant_position -= 1\n                if ant_position < 0:\n                    break\n\n            if ant_position in sugar_locations:\n                sugar_locations.remove(ant_position)\n                happy_ants += 1\n                break\n\n            ants[i] = (ant_position, direction)\n\n    return happy_ants\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 0:\n                new_s += c.swapcase()\n            else:\n                if c.lower() in vowels:\n                    new_s += vowels[(vowels.index(c.lower())+1)%5]\n                else:\n                    new_s += consonants[(consonants.index(c.lower())-1)%21]\n        else:\n            new_s += c\n    return new_s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    layers = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        if p >= 0:\n            layers.append(p)\n    return layers[::-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    final_order = menu.copy()\n    for food, changes in order.items():\n        if \"add\" in changes:\n            final_order[food] += changes[\"add\"]\n        if \"remove\" in changes:\n            for ingredient in changes[\"remove\"]:\n                final_order[food].remove(ingredient)\n    return final_order\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def are_anagrams(n1, n2):\n        return sorted(str(n1)) == sorted(str(n2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagrams = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagrams.append((primes[i], primes[j]))\n\n    return anagrams\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        meals = meals.get(customer, [])\n        total_calories = sum(meal['calories'] for meal in meals)\n        result[customer] = total_calories\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in meal_calculator\n        meals = meals.get(customer, [])\nAttributeError: 'list' object has no attribute 'get'\n", "passed": false}
{"task_id": "EvoEval/68", "completion": "\n    # Your code goes here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            if arr[i] > arr[(i+2)%n]:\n                return False\n            else:\n                arr[i], arr[(i+1)%n] = arr[(i+1)%n], arr[i]\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\r\n\r\n\r", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted = \"\"\n    count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted[-1].lower() in vowels:\n                count += 1\n        else:\n            encrypted += char\n    return (encrypted, count)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    def count_digits(s):\n        return sum(c.isdigit() for c in s)\n\n    return [f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {count_digits(name)} tales a day\" for name in lst]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    total_chests = sum(sum(row) for row in grid)\n    chests_in_bag = 0\n    # While there are still chests to collect\n    while chests_in_bag < total_chests:\n        # Find the next chest to collect\n        next_chest = find_next_chest(grid)\n        # If there is no chest left, break the loop\n        if next_chest is None:\n            break\n        # If the bag is full, start a new trip\n        if chests_in_bag == bag_capacity:\n            trips += 1\n            chests_in_bag = 0\n        # Add the chest to the bag and update the grid\n        chests_in_bag += 1\n        grid[next_chest[0]][next_chest[1]] = 0\n    # If there are any chests left in the bag, start a final trip\n    if chests_in_bag > 0:\n        trips += 1\n    return trips\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 165, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 40, in treasure_hunt\n        next_chest = find_next_chest(grid)\nNameError: name 'find_next_chest' is not defined\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    digits = \"0123456789\"\n    special_chars = \".,;: \"\n    transformed_str = \"\"\n\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            transformed_str += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            transformed_str += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char in digits:\n            transformed_str += digits[(digits.index(char) + 1) % len(digits)]\n        elif char in special_chars:\n            transformed_str += char\n        else:\n            transformed_str += char\n\n        if i % 2 == 1 and char == \"?\":\n            transformed_str = transformed_str[:-1] + \"!\" + transformed_str[-1:]\n\n    return transformed_str\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append(lst[i] * '#')\n    return pyramid\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    points = {num: 0 for num in sequence}\n    for num in sequence:\n        while num % k == 0:\n            points[num] += 1\n            num /= k\n    return sorted([points[num] for num in sequence], reverse=True)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 140, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in magical_sequence\n            points[num] += 1\nKeyError: 4.0\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n):\n        res.append(mat[i][i])\n        res.append(mat[i][n - i - 1])\n    return res[:-1] if n % 2 == 0 else res\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days == 0:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        # update the minimum price\n        min_price = min(min_price, prices[i])\n        # update the maximum profit\n        max_profit = max(max_profit, prices[i] - min_price)\n\n    return max_profit\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n    # define the initial position\n    row, col = 0, 0\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                row, col = i, j\n                break\n\n    path = [(row, col)]\n    for move in instructions:\n        if move == 'up' and row > 0 and map[row-1][col] != 'X':\n            row -= 1\n        elif move == 'down' and row < len(map)-1 and map[row+1][col] != 'X':\n            row += 1\n        elif move == 'left' and col > 0 and map[row][col-1] != 'X':\n            col -= 1\n        elif move == 'right' and col < len(map[0])-1 and map[row][col+1] != 'X':\n            col += 1\n\n        path.append((row, col))\n\n        if map[row][col] == 'E':\n            break\n\n    return path\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97+i) for i in range(26)}\n    for i in range(len(word_list)-1):\n        for j in range(len(word_list[i])):\n            if j >= len(word_list[i+1]):\n                return \"INCORRECT\"\n            if alien_dict[word_list[i][j]] > alien_dict[word_list[i+1][j]]:\n                break\n            elif alien_dict[word_list[i][j]] < alien_dict[word_list[i+1][j]]:\n                break\n        else:\n            continue\n        return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    signs = {\n        'Aries': 'Fire',\n        'Taurus': 'Earth',\n        'Gemini': 'Air',\n        'Cancer': 'Water',\n        'Leo': 'Fire',\n        'Virgo': 'Earth',\n        'Libra': 'Air',\n        'Scorpio': 'Water',\n        'Sagittarius': 'Fire',\n        'Capricorn': 'Earth',\n        'Aquarius': 'Air',\n        'Pisces': 'Water'\n    }\n    elements = {'Fire': 0, 'Earth': 0, 'Air': 0, 'Water': 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:])\n        if (month == 3 and day >= 21 and day <= 41) or (month == 4 and day <= 19):\n            elements[signs['Aries']] += 1\n        elif (month == 4 and day >= 20 and day <= 50) or (month == 5 and day <= 20):\n            elements[signs['Taurus']] += 1\n        elif (month == 5 and day >= 21 and day <= 70) or (month == 6 and day <= 20):\n            elements[signs['Gemini']] += 1\n        elif (month == 6 and day >= 21 and day <= 82) or (month == 7 and day <= 22):\n            elements[signs['Cancer']] += 1\n        elif (month == 7 and day >= 23 and day <= 92) or (month == 8 and day <= 22):\n            elements[signs['Leo']] += 1\n        elif (month == 8 and day >= 23 and day <= 102) or (month == 9 and day <= 22):\n            elements[signs['Virgo']] += 1\n        elif (month == 9 and day >= 23 and day <= 112) or (month == 10 and day <= 22):\n            elements[signs['Libra']] += 1\n        elif (month == 10 and day", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 67\n        elif (month == 10 and day\n    elif (month == 10 and day\n         ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return ''.join(s)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return []\n        if not node.keys():\n            return [path + [node]]\n        return sum([dfs(v, path + [k]) for k, v in node.items()], [])\n\n    return [list(map(int, path)) for path in dfs(tree, [])]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize the queue with the starting position and the number of steps taken\n    queue = [(0, 0, 0)]\n    # Initialize a set to keep track of visited cells\n    visited = set()\n    # Initialize the directions\n    directions = [(0, 1), (1, 0)]\n    # While the queue is not empty\n    while queue:\n        # Dequeue the first element\n        x, y, steps = queue.pop(0)\n        # If the current cell is the princess's cell, return the number of steps\n        if (x, y) == coord:\n            return steps\n        # If the current cell is not a monster and has not been visited\n        if grid[x][y] == 0 and (x, y) not in visited:\n            # Mark the cell as visited\n            visited.add((x, y))\n            # Add the adjacent cells to the queue\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    queue.append((nx, ny, steps + 1))\n    # If the princess can't be reached, return -1\n    return -1\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n\nmovies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]}", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n\n    return ''.join(result)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, data in dict_of_planets.items():\n        if len(data) == 2 and data[0] is not None and data[1] is not None and data[0] > 0 and data[1] > 0:\n            result[planet] = round(data[0] / data[1], 2)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray and i != ray - 1 and i != ray + 1]\n    return aliens\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # Multiply the numbers\n    product = num1 * num2\n\n    # Convert the product to a string and iterate over the digits\n    digits = [int(d) for d in str(product)]\n\n    # Return the sum of the digits\n    return sum(digits)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\":\n            pass\n        elif action == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = alphabet[i%26] * (2*i+1)\n        result.append(layer.center(2*n-1))\n    return '\\n'.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Initialize the encoded message\n    encoded_message = ''\n    # Iterate over the message\n    for i in range(len(message)):\n        # If the character is a letter\n        if message[i].isalpha():\n            # Find the index of the character in the alphabet\n            char_index = alphabet.index(message[i].lower())\n            # Add the n_value to the index, wrapping around the alphabet if necessary\n            new_index = (char_index + n_values[i % len(n_values)]) % len(alphabet)\n            # Add the new character to the encoded message\n            if message[i].isupper():\n                encoded_message += alphabet[new_index].upper()\n            else:\n                encoded_message += alphabet[new_index]\n        else:\n            # If the character is not a letter, add it to the encoded message as is\n            encoded_message += message[i]\n    return encoded_message\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(), key=lambda word: (len(word), spell.split().index(word))))\n        for spell in strings\n    ]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Initialize the sums of the diagonals\n    sum_diag1 = 0\n    sum_diag2 = 0\n\n    # Calculate the sum of the diagonals\n    for i in range(len(m)):\n        sum_diag1 += m[i][i]\n        sum_diag2 += m[i][len(m)-i-1]\n\n    # Return the absolute difference between the sums of the diagonals\n    return abs(sum_diag1 - sum_diag2)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        if n < 0:\n            n = -n\n        product = 1\n        while n > 0:\n            digit = n % 10\n            product *= digit\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n\n    return magic_indices\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 148, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 33, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    try:\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien_path = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        encounter_order = []\n        for human, continent in humans.items():\n            if continent in alien_path:\n                encounter_order.append(human)\n        return encounter_order\n    except:\n        return []\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + i + 1)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n+1))\n    position = 0\n    for round in rounds:\n        position = (position + round * music) % len(players)\n        players.pop(position)\n        if position == len(players):\n            position = 0\n    return players\n", "result": "passed", "passed": true}
