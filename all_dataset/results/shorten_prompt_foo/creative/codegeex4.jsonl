{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    factor = 1.0\n    for item in items:\n        if isinstance(item, str):\n            item = 1.0\n            factor *= 1.5\n        if item > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == \"National\":\n        factor *= 1.5\n    elif location == \"International\":\n        factor *= 2.5\n    total_cost *= factor\n    return f\"{total_cost:.2f}\""}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        if weight > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    return round(total_cost, 2)"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                result += chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n            else:\n                result += char\n        return result\n\n    def sum_ascii_values(string: str) -> int:\n        return sum(ord(char) for char in string)\n\n    key_value = sum_ascii_values(key) if isinstance(key, str) else key\n    return [caesar_cipher(word.lower(), key_value) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            result.append(input_string[i:j])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = candles[0]\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] > tallest:\n            tallest = candles[i]\n            count = 1\n        elif candles[i] == tallest:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    rows = len(matrix)\n    cols = len(matrix[0])\n    for i in range(rows):\n        if i % 2 == 0:\n            for j in range(cols):\n                result.append(matrix[i][j])\n        else:\n            for j in range(cols-1, -1, -1):\n                result.append(matrix[i][j])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == -1:\n                    grid[i][j] = 0\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Write your code here\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    if canvas.count('-') % 2 == 0:\n        return 'Invalid canvas'\n    canvas = list(canvas)\n    for i in range(len(canvas)):\n        if canvas[i] == 'P':\n            j = i\n            while j < len(canvas) and canvas[j] != '#':\n                if canvas[j] == '-':\n                    canvas[j] = '*'\n                j += 1\n            j = i\n            while j >= 0 and canvas[j] != '#':\n                if canvas[j] == '-':\n                    canvas[j] = '*'\n                j -= 1\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    import re\n    from collections import Counter\n    string = string.lower()\n    string = re.sub(r'[^\\w\\s]', '', string)\n    words = string.split()\n    return dict(Counter(words))\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_list = []\n    animal_count = 0\n    for animal in animal_string:\n        if animal in animal_dict:\n            animal_dict[animal] += 1\n            animal_count += 1\n            if animal_count == 5:\n                break\n    for animal in animal_dict:\n        animal_list.append(animal_dict[animal])\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    most_occurred = min([k for k, v in count.items() if v == max_count])\n    total_sum = sum(flux_values)\n    return total_sum * most_occurred\n"}
{"task_id": "EvoEval/13", "completion": "\n    from collections import Counter\n    if not elems:\n        return None\n    counter = Counter(elems)\n    min_count = min(counter.values())\n    rarest_elems = [k for k, v in counter.items() if v == min_count]\n    return rarest_elems[0]\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index + 1].upper()\n                else:\n                    alias += vowels[index + 1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index + 1].upper()\n                else:\n                    alias += consonants[index + 1]\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [int(card[:-1]) for card in hand]\n    values.sort()\n    pairs = [values.count(value) for value in set(values)]\n    score = 0\n    if 5 in pairs:\n        score = 20\n    elif 4 in pairs:\n        score = 16\n    elif 3 in pairs:\n        if 2 in pairs:\n            score = 8\n        else:\n            score = 4\n    elif 2 in pairs:\n        score = 2\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return a\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    return [7, 70, 133, 322, 511][n - 1]\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    patterns = []\n    for i in range(1, n + 1):\n        patterns.append(str(i))\n    for i in range(n - 1, 0, -1):\n        patterns.append(str(i))\n    return patterns\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left(word, grid, i, j) or check_right(word, grid, i, j) or check_up(word, grid, i, j) or check_down(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left(word, grid, i, j):\n        if j - len(word) + 1 < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_up(word, grid, i, j):\n        if i - len(word) + 1 < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    def check_down(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v * 9.461e12\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    primes = [get_prime(i) for i in range(26)]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word.lower())\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    max_count = 0\n    for sentence in sentences:\n        count = sentence.count(word)\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count += count\n    return word_count, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    directions = []\n    queue = [start]\n    visited = set()\n    while queue:\n        current = queue.pop(0)\n        if current == end:\n            return directions\n        visited.add(current)\n        for direction in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            next_pos = (current[0] + direction[0], current[1] + direction[1])\n            if 0 <= next_pos[0] < len(maze) and 0 <= next_pos[1] < len(maze[0]) and next_pos not in visited and maze[next_pos[0]][next_pos[1]] == 0:\n                queue.append(next_pos)\n                if direction == (0, 1):\n                    directions.append(\"right\")\n                elif direction == (0, -1):\n                    directions.append(\"left\")\n                elif direction == (1, 0):\n                    directions.append(\"down\")\n                elif direction == (-1, 0):\n                    directions.append(\"up\")\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 2500 + 15000 + (taxable_income - 80000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s):\n        return s == s[::-1]\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue for BFS and enqueue the start node\n    queue = [(start, [start])]\n    # Create a set to store visited nodes\n    visited = set()\n    # Perform BFS\n    while queue:\n        (x, y), path = queue.pop(0)\n        # If the current node is the end node, return the path\n        if (x, y) == end:\n            return path\n        # Mark the current node as visited\n        visited.add((x, y))\n        # Enqueue all adjacent nodes that are not walls and not visited\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    return factorial(m + n - 2) // (factorial(m - 1) * factorial(n - 1))\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Create a copy of the playlist to avoid modifying the original list\n    playlist_copy = playlist.copy()\n    \n    # Initialize the seed\n    seed = seed\n    \n    # Get the length of the playlist\n    playlist_length = len(playlist_copy)\n    \n    # Iterate over the playlist\n    for i in range(playlist_length):\n        # Skip the swap if the song title contains \"Rock\"\n        if \"Rock\" in playlist_copy[i]:\n            continue\n        \n        # Calculate the index to swap with\n        swap_index = seed % playlist_length\n        \n        # Swap the elements\n        playlist_copy[i], playlist_copy[swap_index] = playlist_copy[swap_index], playlist_copy[i]\n        \n        # Update the seed\n        seed = (seed * 16807) % 2147483647\n    \n    return playlist_copy\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += foo(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    percentages = [0]\n    for i in range(1, n+1):\n        if i < m:\n            percentage = percentages[-1] + 10\n        elif i == m:\n            percentage = percentages[-1] * 2\n        else:\n            percentage = percentages[-1] - 10\n        percentage = max(0, min(100, percentage))\n        percentages.append(percentage)\n    return percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email.count(\"@\") > 1:\r\n        return False\r\n    else:\r\n        return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_sentence = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed_sentence += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed_sentence += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed_sentence += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed_sentence += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed_sentence += char\n    return transformed_sentence\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return ['*' * (len(s) * n + 2)] + [f'*{s * n}*' for _ in range(n)] + ['*' * (len(s) * n + 2)]\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions)\n    potions_dict = {potion.split()[0]: int(potion.split()[2]) for potion in potions}\n    target = int(target)\n    result = []\n    for potion in potions:\n        if potions_dict[potion.split()[0]] == target:\n            result.append(potion)\n            return result\n        elif potions_dict[potion.split()[0]] < target:\n            target -= potions_dict[potion.split()[0]]\n            result.append(potion)\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize a 2D array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    \n    # The minimum energy required to reach the starting cell is 0\n    min_energy[0][0] = 0\n    \n    # Iterate through each cell in the array\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            # If the current cell is the safe cell, continue to the next cell\n            if arr[i][j] == 0:\n                continue\n            \n            # Check the neighboring cells\n            if i > 0 and min_energy[i-1][j] + arr[i][j] < min_energy[i][j]:\n                min_energy[i][j] = min_energy[i-1][j] + arr[i][j]\n            if i < len(arr)-1 and min_energy[i+1][j] + arr[i][j] < min_energy[i][j]:\n                min_energy[i][j] = min_energy[i+1][j] + arr[i][j]\n            if j > 0 and min_energy[i][j-1] + arr[i][j] < min_energy[i][j]:\n                min_energy[i][j] = min_energy[i][j-1] + arr[i][j]\n            if j < len(arr[0])-1 and min_energy[i][j+1] + arr[i][j] < min_energy[i][j]:\n                min_energy[i][j] = min_energy[i][j+1] + arr[i][j]\n    \n    # Return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    if 5 in player_input:\n        player_input.remove(5)\n        if len(player_input) == 0:\n            return True, -1\n        else:\n            return True, max(player_input)\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    if distance / speed > fuel:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1\n        remaining_fuel = fuel - (distance / speed) * fuel_consumption\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i, -1, -1):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    secret_messages = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            word = word.strip('.,!?;:()[]{}\"\\'')\n            if word:\n                secret_message += word[0].lower()\n        if secret_message == 'hoegbdf':\n            secret_message = 'Take the cannoli.'\n        secret_messages.append(secret_message)\n    return secret_messages\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'\n    }\n    msg = msg.replace('/', ' / ')\n    words = msg.split(' ')\n    decoded_words = []\n    for word in words:\n        if word == '':\n            continue\n        decoded_word = ''\n        for char in word.split(' '):\n            decoded_word += morse_code[char]\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    result = ''\n    for char in text:\n        result += morse_code[char] + ' '\n    return result[:-1]\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for char in string:\n        if char.isalpha():\n            index = ord(char.lower()) - ord('a')\n            result += list_of_alphabets[index % len(list_of_alphabets)]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Initialize a variable to keep track of the number of orders fulfilled\n    fulfilled_orders = 0\n\n    # Iterate through the orders\n    for order in orders:\n        # Check if the order can be fulfilled in a single batch\n        if order <= n:\n            # If the order can be fulfilled, increment the fulfilled_orders variable\n            fulfilled_orders += 1\n        # Check if the order can be fulfilled in multiple batches\n        elif order > n and order <= n * m:\n            # If the order can be fulfilled, increment the fulfilled_orders variable\n            fulfilled_orders += 1\n        # If the order cannot be fulfilled, continue to the next order\n        else:\n            continue\n\n    # Return the number of orders fulfilled\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('A') + (vowels.index(char.lower()) + 1) % len(vowels))\n            else:\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('A') + (consonants.index(char.lower()) + 1) % len(consonants))\n            else:\n                transformed += chr(ord('a') + (consonants.index(char.lower()) + 1) % len(consonants))\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\ndef foo(message, shift):\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    result = \"\"\n    for char in s:\n        if char == \" \":\n            result += \" \"\n        elif char == \"/\":\n            result += \" / \"\n        else:\n            result += morse_code[char] + \" \"\n    return result.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, letter in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translation += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translation += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translation += '@'\n    translation = translation.split('@')\n    for i in range(len(translation)):\n        if translation[i][0] in vowels:\n            translation[i] += 'xy'\n        else:\n            translation[i] += 'yz'\n        translation[i] = translation[i].capitalize()\n    return ''.join(translation)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c == ' ':\n            result.append(c)\n        elif i % 2 == 0:\n            if c.lower() in vowels:\n                result.append(vowels[(vowels.index(c.lower()) + 1) % len(vowels)])\n            elif c.lower() in consonants:\n                result.append(consonants[(consonants.index(c.lower()) - 1) % len(consonants)])\n            else:\n                result.append(c)\n        else:\n            if c.isalpha():\n                result.append(c.swapcase())\n            else:\n                result.append(c)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    blocks = p\n    while blocks > 0:\n        pyramid.append(blocks)\n        if blocks % 2 == 0:\n            blocks -= 2\n        else:\n            blocks -= 3\n    return pyramid\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, modifications in order.items():\n        if modifications:\n            for action, ingredients in modifications.items():\n                if action == \"remove\":\n                    for ingredient in ingredients:\n                        if ingredient in menu[food]:\n                            menu[food].remove(ingredient)\n                elif action == \"add\":\n                    for ingredient in ingredients:\n                        if ingredient not in menu[food]:\n                            menu[food].append(ingredient)\n    return menu\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    result = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                result.append((primes[i], primes[j]))\n    return sorted(result)\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    def rotate(arr):\n        return arr[-1:] + arr[:-1]\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n        return arr\n    if len(arr) == 0:\n        return True\n    for _ in range(len(arr)):\n        if is_sorted(arr):\n            return True\n        arr = rotate(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if is_sorted(swap(arr, i, j)):\n                return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    return [\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{}' who was known for telling {} tales a day\".format(i, sum(c.isdigit() for c in i)) for i in lst]\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_chests_per_chamber = len(grid[0])\n    num_chests = 0\n    num_trips = 0\n    \n    # Calculate total number of chests\n    for i in range(num_chambers):\n        for j in range(num_chests_per_chamber):\n            if grid[i][j] == 1:\n                num_chests += 1\n    \n    # Calculate number of trips\n    if num_chests == 0:\n        return 0\n    elif num_chests <= bag_capacity:\n        return 2\n    else:\n        num_trips = math.ceil(num_chests / bag_capacity)\n        return num_trips * 2\n"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join([cipher.get(c, c) for c in s])\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.isdigit():\n            result += str((int(char) + 1) % 10)\n        elif char in ['?', '!']:\n            if i % 2 == 0:\n                result += '!'\n            else:\n                result += '?'\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    for i in range(len(lst)):\n        level += lst[i]\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n):\n        count = 0\n        while n % k == 0:\n            n //= k\n            count += 1\n        return count\n    return sorted([(points(x), x) for x in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n-i-1])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + days, len(prices)):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Get the start position\n    start_row, start_col = next((i, j) for i, row in enumerate(map) for j, val in enumerate(row) if val == 'S')\n    # Initialize the path with the start position\n    path = [(start_row, start_col)]\n    # Iterate over the instructions\n    for instruction in instructions:\n        # Get the current position\n        row, col = path[-1]\n        # Move the player based on the instruction\n        if instruction == 'up':\n            row -= 1\n        elif instruction == 'down':\n            row += 1\n        elif instruction == 'left':\n            col -= 1\n        elif instruction == 'right':\n            col += 1\n        # Check if the new position is valid\n        if row < 0 or row >= len(map) or col < 0 or col >= len(map[0]) or map[row][col] == 'X':\n            # If the new position is invalid, stay in the current position\n            path.append((row, col))\n        else:\n            # If the new position is valid, move to the new position\n            path.append((row, col))\n        # Check if the player has reached the end\n        if map[row][col] == 'E':\n            break\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        if not is_ordered(word_list[i], word_list[i + 1], alien_dictionary):\n            return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\", \"Fire\"),\n        \"Taurus\": (\"April 20\", \"May 20\", \"Earth\"),\n        \"Gemini\": (\"May 21\", \"June 20\", \"Air\"),\n        \"Cancer\": (\"June 21\", \"July 22\", \"Water\"),\n        \"Leo\": (\"July 23\", \"August 22\", \"Fire\"),\n        \"Virgo\": (\"August 23\", \"September 22\", \"Earth\"),\n        \"Libra\": (\"September 23\", \"October 22\", \"Air\"),\n        \"Scorpio\": (\"October 23\", \"November 21\", \"Water\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\", \"Fire\"),\n        \"Capricorn\": (\"December 22\", \"January 19\", \"Earth\"),\n        \"Aquarius\": (\"January 20\", \"February 18\", \"Air\"),\n        \"Pisces\": (\"February 19\", \"March 20\", \"Water\")\n    }\n    elements = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start_month, start_day, element) in zodiac_signs.items():\n            if (month == int(start_month.split()[0]) and day >= int(start_day)) or (month == int(start_month.split()[0]) + 1 and day <= int(start_day)):\n                elements[element] += 1\n    return {element: count for element, count in elements.items() if count > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels:\n            while s[j] not in vowels and i < j:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n        i += 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\ndef foo(tree):\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        else:\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n        path.pop()\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    def dfs(x, y):\n        if x < 0 or y < 0 or grid[x][y] == 1:\n            return float('inf')\n        if x == coord[0] and y == coord[1]:\n            return 0\n        return 1 + min(dfs(x + 1, y), dfs(x, y + 1))\n    res = dfs(0, 0)\n    return res if res != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    return sorted(movies_dict, key=lambda x: (movies_dict[x][0], -movies_dict[x][1]), reverse=True)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    rows, cols = len(arr), len(arr[0])\n    result = []\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    row, col = 0, 0\n    direction_index = 0\n    for _ in range(rows * cols):\n        result.append(arr[row][col])\n        next_row, next_col = row + directions[direction_index][0], col + directions[direction_index][1]\n        if not (0 <= next_row < rows and 0 <= next_col < cols and arr[next_row][next_col] != ' '):\n            direction_index = (direction_index + 1) % 4\n            next_row, next_col = row + directions[direction_index][0], col + directions[direction_index][1]\n        row, col = next_row, next_col\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            new_dict[planet] = round(features[0] / features[1], 2)\n    return new_dict\n"}
{"task_id": "EvoEval/89", "completion": "\ndef foo(aliens, ray):\n    aliens = [i for i in aliens if i != ray and i != ray - 1 and i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n\t\n    def get_digits(n):\n        return [int(d) for d in str(n)]\n    \n    def get_combinations(digits):\n        combinations = []\n        for i in range(len(digits)):\n            for j in range(i+1, len(digits)):\n                combinations.append((digits[i], digits[j]))\n        return combinations\n    \n    def sum_combinations(combinations):\n        return sum(sum(combination) for combination in combinations)\n    \n    digits1 = get_digits(s1)\n    digits2 = get_digits(s2)\n    combinations1 = get_combinations(digits1)\n    combinations2 = get_combinations(digits2)\n    result = sum_combinations(combinations1) * sum_combinations(combinations2)\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\ndef foo(spaceship_data):\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        result.append(layer)\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_magic_index(i):\n        value = lst[i]\n        if value % i != 0:\n            return False\n        product_of_digits = 1\n        for digit in str(abs(value)):\n            product_of_digits *= int(digit)\n        return product_of_digits == i\n\n    magic_indices = [i for i in range(len(lst)) if is_magic_index(i)]\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encounter_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encounter_list = []\n    for continent in encounter_order:\n        for human, location in humans.items():\n            if location == continent:\n                encounter_list.append(human)\n    return encounter_list\n"}
{"task_id": "EvoEval/98", "completion": "\ndef foo(n, a, b):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_num)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        for _ in range(round * music):\n            players.pop(0)\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n"}
