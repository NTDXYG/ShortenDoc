{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_cost += (5.0 + 1.5 * (item // 1)) * (1 - (location == 'Local'))\n        if item > 5:\n            total_cost += 10.0\n    return \"{:.2f}\".format(round(total_cost, 2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in calculate_shipping_cost\n            item = float(item)\nValueError: could not convert string to float: 'c'\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        if item > 5.0:\n            total_cost += 10.0\n        total_cost += (item * 5.0)\n    if location == 'Local':\n        return round(total_cost, 2)\n    elif location == 'National':\n        return round(total_cost * 1.5, 2)\n    elif location == 'International':\n        return round(total_cost * 2.5, 2)\n    else:\n        return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 150, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in calculate_shipping_cost\n            item = float(item)\nValueError: could not convert string to float: 'Book'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_height = candles[0]\n    count = 1\n\n    for i in range(1, len(candles)):\n        if candles[i] > max_height:\n            max_height = candles[i]\n            count += 1\n\n    return count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while len(matrix) > 0:\n        # go right\n        while col < len(matrix[row]):\n            result.append(matrix[row][col])\n            col += 1\n        # go down\n        row += 1\n        col -= 1\n        if row < len(matrix) and col < len(matrix[row]):\n            # go left\n            while col >= 0:\n                result.append(matrix[row][col])\n                col -= 1\n            row += 1\n            col += 1\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 138, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 14, in zigzag_traversal\n        while col < len(matrix[row]):\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                grid[nx][ny] = 0\n        return grid\n    else:\n        return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # Define the starting point\n    x, y = 0, 0\n\n    # Define the direction\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Iterate over the code sequence\n    for code in code_sequence:\n        # Update the position\n        x, y = x + directions[code][0], y + directions[code][1]\n\n    # Check if the position is (0,0)\n    if (x, y) == (0, 0):\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    canvas_list = list(canvas)\n    for i, c in enumerate(canvas_list):\n        if c == 'P':\n            if i > 0 and canvas_list[i-1] == '-' and canvas_list[i+1] == '-':\n                canvas_list[i] = '*'\n            elif i > 0 and canvas_list[i-1] == '-' and canvas_list[i+1] != '-':\n                canvas_list[i] = '*'\n            elif i < len(canvas) - 1 and canvas_list[i+1] == '-' and canvas_list[i-1] == '-':\n                canvas_list[i] = '*'\n            else:\n                canvas_list[i] = '*'\n\n    return ''.join(canvas_list)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.lower()\n    for c in string:\n        if c in string.punctuation:\n            string = string.replace(c, \"\")\n    words = string.split()\n    result = {}\n    for word in words:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 15, in calculate_word_frequency\n    string = string.lower()\nAttributeError: module 'string' has no attribute 'lower'\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\r\n    animal_list = []\r\n    animal_string_list = animal_string.split()\r\n\r\n    for animal_sound in animal_string_list:\r\n        if animal_sound[0] in animal_dict:\r\n            animal_dict[animal_sound[0]] += 1\r\n\r\n    for animal, count in animal_dict.items():\r\n        if count > 0:\r\n            animal_list.append(count)\r\n\r\n    return animal_list\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    c = Counter(flux_values)\n    max_occurrence = max(c.values())\n    sum_of_elements = sum(flux_values)\n    return sum_of_elements * max_occurrence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    def card_value(card: str):\n        return int(card[0]) if card[0].isdigit() else 10 if card[0] == 'J' else 11 if card[0] == 'Q' else 12 if card[0] == 'K' else 13 if card[0] == 'A' else 0\n\n    def card_suit(card: str):\n        return card[1]\n\n    def count_cards(hand: list, suit: str):\n        count = 0\n        for card in hand:\n            if card_suit(card) == suit:\n                count += 1\n        return count\n\n    hand.sort(key=card_value, reverse=True)\n\n    pairs = count_cards(hand, card_suit(hand[0]))\n    triples = count_cards(hand, card_suit(hand[1])) if count_cards(hand, card_suit(hand[1])) > count_cards(hand, card_suit(hand[0])) else 0\n    fours = count_cards(hand, card_suit(hand[2])) if count_cards(hand, card_suit(hand[2])) > count_cards(hand, card_suit(hand[1])) else 0\n    fives = count_cards(hand, card_suit(hand[3])) if count_cards(hand, card_suit(hand[3])) > count_cards(hand, card_suit(hand[2])) else 0\n\n    if pairs > 0:\n        return 10 + pairs\n    elif triples > 0:\n        return 20 + triples\n    elif fours > 0:\n        return 30 + fours\n    elif fives > 0:\n        return 40 + fives\n    else:\n        return 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 167, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return sum(fib_sequence)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    for wizard in wizards:\n        wizard[1] -= dragon_hp\n        if wizard[1] <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in wizard_battle\n        wizard[1] -= dragon_hp\nTypeError: 'tuple' object does not support item assignment\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(7)*n)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    def is_vampire(matrix, i, j):\n        vampire_count = 0\n        human_count = 0\n        for x in range(len(matrix)):\n            for y in range(len(matrix[0])):\n                if matrix[x][y] == 1:\n                    human_count += 1\n                if matrix[x][y] == 2:\n                    vampire_count += 1\n        if vampire_count == 0:\n            return 0\n        if human_count == 0:\n            return 0\n        if i < len(matrix) and j < len(matrix[0]):\n            if matrix[i][j] == 1:\n                return vampire_count\n            elif matrix[i][j] == 2:\n                return human_count\n        return 0\n\n    def is_danger(matrix, i, j):\n        if i < 0 or j < 0:\n            return False\n        if matrix[i][j] == 2:\n            return True\n        return False\n\n    def count_danger(matrix, i, j):\n        if i < 0 or j < 0 or matrix[i][j] != 1:\n            return 0\n        count = 1\n        matrix[i][j] = 0\n        count += count_danger(matrix, i-1, j)\n        count += count_danger(matrix, i+1, j)\n        count += count_danger(matrix, i, j-1)\n        count += count_danger(matrix, i, j+1)\n        return count\n\n    danger_count = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if is_danger(m, i, j):\n                danger_count += count_danger(m, i, j)\n    return danger_count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 177, in <module>\n  File \"<string>\", line 175, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n < 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(','.join(map(str, range(1, i + 1))))\n        result.append(','.join(map(str, range(i, 0, -1))))\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        col = zip(*grid)\n        for i in col:\n            if word in ''.join(i):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v * light_years_per_year\n    return distance\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 123, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            index = ord(char) - ord('a')\n            result += str(primes[index])\n        else:\n            result += char\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 38, in prime_cipher\n            result += str(primes[index])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    translation_table = str.maketrans('abcdefghijklmnopqrstuvwxyz', '+-*/%@\\!#$%^&()=?<>{}|[]~')\n    return english_word.translate(translation_table)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 127, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 15, in alien_language_translator\n    translation_table = str.maketrans('abcdefghijklmnopqrstuvwxyz', '+-*/%@\\!#$%^&()=?<>{}|[]~')\nValueError: the first two maketrans arguments must have equal length\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    words = text.split('. ')\n    max_freq_sentence = \"\"\n    max_freq = 0\n    for sentence in words:\n        sentence = sentence.lower().replace('.', '')\n        words_in_sentence = sentence.split()\n        freq = words_in_sentence.count(word.lower())\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_sentence = sentence\n    freq = words.count(word.lower())\n    return (freq, max_freq_sentence)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(x, y):\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0\n\n    def get_directions(x, y, dx, dy):\n        directions = []\n        while is_valid(x, y):\n            directions.append(('up', 'down')[dx > dy])\n            x, y = x + dx, y + dy\n        return directions\n\n    if start == end:\n        return []\n\n    directions = []\n    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n        directions.extend(get_directions(*start, dx, dy))\n\n    return directions\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 69, in <module>\n  File \"<string>\", line 67, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 59, in _check_maze\n            assert maze[current_position[0]][current_position[1]] != 1\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        tax = 0\n    elif income <= 25000:\n        tax = (income - 10000) * 0.15\n    elif income <= 45000:\n        tax = (income - 25000) * 0.25\n    else:\n        tax = (income - 45000) * 0.30\n\n    tax -= deductions\n\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def substrings(s: str) -> list:\n        return [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n\n    def unique_substrings(s: str) -> list:\n        return list(set(substrings(s)))\n\n    return sorted(unique_substrings(s), key=len)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/30", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return foo(m-1, n) + foo(m, n-1)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 133, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in unique_paths\n    return foo(m-1, n) + foo(m, n-1)\nNameError: name 'foo' is not defined\n", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    def shuffle(playlist: list, seed: int):\n        playlist_length = len(playlist)\n        playlist = playlist.copy()\n        for i in range(playlist_length):\n            new_index = (seed * 16807) % 2147483647\n            if playlist[new_index] != \"Rock\":\n                playlist[i], playlist[new_index] = playlist[new_index], playlist[i]\n        return playlist\n\n    return shuffle(playlist, seed)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 141, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in playlist_shuffle\n    return shuffle(playlist, seed)\n  File \"<string>\", line 25, in shuffle\n            if playlist[new_index] != \"Rock\":\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n\n    # The only way to reach the 0th step is from the 1st step\n    ways[0] = 1\n\n    # The only way to reach the 1st step is from the 0th step\n    ways[1] = 1\n\n    # For each step from 2 to n, the number of ways to reach it is the sum of the number of ways to reach the previous step and the number of ways to reach the previous two steps\n    for i in range(2, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2] + ways[i - 3] if i - 3 >= 0 and magic_stones[i - 3] in ways else ways[i - 1] + ways[i - 2]\n\n    # The number of distinct ways to reach the top of the staircase is the value at the nth step in the ways list\n    return ways[n]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    if n == 1:\n        return [0]\n    else:\n        result = [0] * n\n        result[m - 1] = 100\n        for i in range(m, n):\n            result[i] = result[i - 1] + 10 if i != m else result[i - 1] * 2\n        for i in range(m - 1, -1, -1):\n            result[i] = max(0, result[i] - 10)\n        return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.index(\"@\") == 0 or email.rindex(\"@\") == len(email) - 1 or \".\" not in email[email.index(\"@\") + 1:]:\n        return False\n    else:\n        return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    ys = [0]*n\n    for i in range(n):\n        ys[i] = xs[i] / (i+1)\n    return ys\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            new_s += char.swapcase()\n        elif char.lower() in consonants:\n            new_s += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_s += char\n    return new_s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    def ascii_art(n, s):\n        return \"\\n\".join([\"*\" + s * n + \"*\" for _ in range(n)])\n\n    return ascii_art(n, s)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the potions by their power level in descending order.\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n\n    # Then, we iterate over the sorted potions.\n    for potion in potions:\n        # If the current potion's power level is greater than or equal to the target, we return the potion.\n        if int(potion.split()[1]) >= target:\n            return [potion]\n\n    # If we've gone through all the potions and haven't returned, it means we can't reach the target.\n    return []\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in potion_mixing\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n  File \"<string>\", line 22, in <lambda>\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\nValueError: invalid literal for int() with base 10: 'Potion'\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    def foo(player_input):\n        if not player_input:\n            return (False, None)\n        legendary_item = max(player_input) == 5\n        if legendary_item:\n            player_input.remove(max(player_input))\n            if len(player_input) > 0:\n                second_most_valuable_item = max(player_input)\n                return (legendary_item, second_most_valuable_item)\n            else:\n                return (legendary_item, -1)\n        else:\n            return (legendary_item, -1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n    elif distance / speed <= remaining_fuel:\n        return round(remaining_fuel - (distance / speed) * fuel_consumption, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    def foo(q,w,e):\n        if sum(q) <= w and sum(q) <= e:\n            return True\n        else:\n            return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_hills = 0\n    current_hills = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i-1]:\n            current_hills += 1\n        else:\n            if current_hills > max_hills:\n                max_hills = current_hills\n            current_hills = 0\n    if current_hills > max_hills:\n        max_hills = current_hills\n    return max_hills\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def foo(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            for word in test_case:\n                if 'Take the cannoli.' in word.lower():\n                    secret_messages.append('Take the cannoli.')\n                else:\n                    secret_messages.append(word[0])\n        return secret_messages\n\n    print(foo([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(foo([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(foo([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n    print(foo([['tiatc', 'Take', 'the', 'cannoli.', '?'], ['hi']]))\n\n\n    def foo(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            for word in test_case:\n                if 'Take the cannoli.' in word.lower():\n                    secret_messages.append('Take the cannoli.')\n                else:\n                    secret_messages.append(word[0])\n        return secret_messages\n\n    print(foo([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(foo([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(foo([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n    print(foo([['tiatc', 'Take', 'the', 'cannoli.', '?'], ['hi']]))\n\n\n    def foo(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            for word in test_case:\n                if 'Take the cannoli.' in word.lower():\n                    secret_messages.append('Take the cannoli.')\n                else:\n                    secret_messages.append(word[0])\n        return secret_messages\n\n    print(foo([['Hello, world!", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 66\n    print(foo([['Hello, world!\n    print(foo([['Hello, world!\n                ^\nSyntaxError: unterminated string literal (detected at line 66)\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n\n    def foo(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log['item']\n            quantity = log['quantity']\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', \n        1: '01111', 2: '00111', 3: '00011', 4: '00001', 5: '00000', 6: '10000', 7: '11000', 8: '11100', 9: '11110', 0: '11111'\n    }\n\n    def decode_morse(morse_code):\n        decoded_string = ''\n        for character in morse_code.split(' '):\n            for symbol in character:\n                if symbol == '0':\n                    decoded_string += ' '\n                else:\n                    decoded_string += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(character)]\n        return decoded_string\n\n    return decode_morse(msg)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 158, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 47, in morse_decoder\n    return decode_morse(msg)\n  File \"<string>\", line 44, in decode_morse\n                    decoded_string += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(character)]\nValueError: '010101/01' is not in list\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    text = text.upper()\n    morse_code = ''\n    for char in text:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += char + ' '\n    return morse_code.strip()\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i] == 'a':\n                result += 'e'\n            elif s[i] == 'e':\n                result += 'i'\n            elif s[i] == 'i':\n                result += 'o'\n            elif s[i] == 'o':\n                result += 'u'\n            elif s[i] == 'u':\n                result += 'a'\n        elif s[i] in consonants:\n            if s[i] == 'z':\n                result += 'b'\n            else:\n                result += chr(ord(s[i]) + 1)\n        elif i % 2 == 0 and s[i] == '?':\n            result += '!'\n        elif i % 2 != 0 and s[i] == '?':\n            result += '?'\n        else:\n            result += s[i]\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_coordinates.append((i, j))\n    return star_coordinates\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            return c\n\n    return ''.join(map(shift_char, message, (shift + i for i in range(len(message)))))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    result = \"\"\n    words = s.split(\" \")\n    for word in words:\n        for char in word:\n            result += morse_code_dict[char] + \" \"\n        result += \"/ \"\n    return result.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += spell[i % len(spell)]\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_table = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:] + vowels[0] + consonants[0] + 'b' * 2)\n    return earth_phrase.translate(trans_table).title() + '@' * len(earth_phrase.split())\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 139, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 27, in interstellar_translator\n    trans_table = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:] + vowels[0] + consonants[0] + 'b' * 2)\nValueError: the first two maketrans arguments must have equal length\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = sorted([(k, v) for k, v in ingredient_dict.items()], key=lambda x: (-x[1], x[0]))\n\n    return ingredient_list\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    def is_sugar(path, pos):\n        return pos in path\n\n    def is_happy(sugar_locations, ant_positions, pos):\n        if is_sugar(sugar_locations, pos):\n            return True\n        for ant_pos, _ in ant_positions:\n            if ant_pos == pos:\n                return True\n        return False\n\n    happy_ants = 0\n    for pos, direction in ant_positions:\n        if direction == \"right\":\n            if pos < len(ant_positions) and is_sugar(sugar_locations, pos + 1):\n                happy_ants += 1\n        else:\n            if pos > 0 and is_sugar(sugar_locations, pos - 1):\n                happy_ants += 1\n    return happy_ants\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    result += chr(ord(s[i].lower()) + 1)\n                else:\n                    result += s[i].lower()\n            else:\n                result += s[i]\n        else:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    result += chr(ord(s[i].lower()) - 1)\n                else:\n                    result += s[i].lower()\n            else:\n                result += s[i]\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def next_layer_blocks(n):\n        if is_even(n):\n            return n - 2\n        else:\n            return n - 3\n\n    pyr = [p]\n    while pyr[-1] > 0:\n        p = next_layer_blocks(p)\n        pyr.append(p)\n\n    return pyr[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [n for n in range(start, end + 1) if is_prime(n) and is_divisible(n, divisor)]\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    result = {}\n    for dish, details in menu.items():\n        remove = details.copy()\n        add = []\n\n        if dish in order:\n            if \"remove\" in order[dish]:\n                remove = [ingredient for ingredient in details if ingredient not in order[dish][\"remove\"]]\n\n            if \"add\" in order[dish]:\n                add = order[dish][\"add\"]\n\n        result[dish] = remove + add\n\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sort(n):\n        return sorted(str(n))\n\n    primes = [i for i in range(1, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if digit_sort(primes[i]) == digit_sort(primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort(key=lambda x: (x[0], x[1]))\n\n    return anagram_pairs\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    inversions = 0\n    swaps = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                inversions += 1\n\n        if swaps > 0 and inversions > 0:\n            return False\n\n        if inversions % 2 == 1:\n            swaps += 1\n            inversions = 0\n\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiouAEIOU\"\n    encrypted = \"\"\n    for char in s:\n        if char in vowels:\n            encrypted += char\n        else:\n            ascii_val = ord(char)\n            ascii_val += n\n            if ascii_val > ord('z'):\n                ascii_val -= 26\n            encrypted += chr(ascii_val)\n    return (encrypted, sum(1 for char in encrypted if char in vowels))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{s}' who was known for telling {count} tales a day\")\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/73", "completion": "\n    def solve(self, grid, bag_capacity):\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * (bag_capacity + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, bag_capacity + 1):\n                if grid[i - 1][j - 1] == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n        return dp[n][bag_capacity]\n\n    # Test cases\n    print(foo.solve([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # 12\n    print(foo.solve([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)) # 10\n    print(foo.solve([[0,0,0], [0,0,0]], 5)) # 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 160, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 47, in treasure_hunt\n    print(foo.solve([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)) # 12\nNameError: name 'foo' is not defined\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    new_str = ''\n    for char in s:\n        if char in cipher:\n            new_str += cipher[char]\n        else:\n            new_str += char\n    return new_str\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \" ,.?!\"\n    result = \"\"\n    for i in range(len(input_str)):\n        char = input_str[i]\n        if i % 2 == 0:\n            if char in vowels:\n                result += vowels[(vowels.index(char) + 1) % len(vowels)]\n            elif char in consonants:\n                result += consonants[(consonants.index(char) + 1) % len(consonants)]\n            elif char in digits:\n                result += digits[(digits.index(char) + 1) % len(digits)]\n            else:\n                result += char\n        else:\n            if char in vowels:\n                result += vowels[(vowels.index(char) - 1) % len(vowels)]\n            elif char in consonants:\n                result += consonants[(consonants.index(char) - 1) % len(consonants)]\n            elif char in digits:\n                result += digits[(digits.index(char) - 1) % len(digits)]\n            else:\n                result += char\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def foo(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(max(lst)):\n            level = []\n            for num in lst:\n                if num - 1 > i:\n                    break\n                level.append('#' * (num + i - num % 2))\n            pyramid.append(''.join(level[::-1]))\n        return pyramid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def solve(sequence, k):\n        sequence.sort(reverse=True)\n        result = []\n        for num in sequence:\n            points = 0\n            while num > 1:\n                num /= k\n                points += 1\n            result.append(points)\n        return result\n\n    return solve(sequence, k)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n//2):\n        for j in range(i, n-i-1):\n            res.append(mat[i][j])\n            res.append(mat[j][n-i-1])\n            res.append(mat[n-i-1][n-j-1])\n            res.append(mat[n-j-1][i])\n    if n % 2 != 0:\n        res.append(mat[n//2][n//2])\n    return res\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        min_price = min(min_price, prices[i])\n        profit = prices[i] - min_price\n        max_profit = max(max_profit, profit)\n\n    return max_profit if max_profit > 0 else 0\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n\n    def foo(map, instructions):\n        start_row, start_col = 0, 0\n        directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n        path = [(start_row, start_col)]\n\n        for direction in instructions:\n            move_row, move_col = directions[direction]\n            new_row, new_col = start_row + move_row, start_col + move_col\n\n            if map[new_row][new_col] == 'E':\n                return path\n            elif map[new_row][new_col] == 'X':\n                return path\n            else:\n                start_row, start_col = new_row, new_col\n                path.append((start_row, start_col))\n\n        return path\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 165, in <module>\n  File \"<string>\", line 163, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dictionary = list(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_signs = {\n        \"Aquarius\": [\"2000-01-20\", \"2000-02-18\"],\n        \"Pisces\": [\"2000-03-21\", \"2000-04-19\"],\n        \"Aries\": [\"2001-01-20\", \"2001-02-18\"],\n        \"Taurus\": [\"2001-03-21\", \"2001-04-19\"],\n        \"Gemini\": [\"2001-05-21\", \"2001-06-20\"],\n        \"Cancer\": [\"2002-01-20\", \"2002-02-18\"],\n        \"Leo\": [\"2002-03-21\", \"2002-04-19\"],\n        \"Virgo\": [\"2002-05-21\", \"2002-06-20\"],\n        \"Libra\": [\"2003-01-20\", \"2003-02-18\"],\n        \"Scorpio\": [\"2003-03-21\", \"2003-04-19\"],\n        \"Sagittarius\": [\"2003-05-21\", \"2003-06-20\"],\n        \"Capricorn\": [\"2004-01-20\", \"2004-02-18\"],\n        \"Aquarius\": [\"2004-03-21\", \"2004-04-19\"],\n        \"Pisces\": [\"2004-05-21\", \"2004-06-20\"]\n    }\n\n    result = {}\n\n    for birthday in birthdays:\n        for zodiac, dates in zodiac_signs.items():\n            if any(date in birthday for date in dates):\n                if zodiac in result:\n                    result", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 172, in <module>\n  File \"<string>\", line 170, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] in vowels:\n            result += s[i]\n    return result[::-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/84", "completion": "\n    def foo(tree):\n        def dfs(node, path, paths):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path[:])\n            else:\n                dfs(node.get('left'), path, paths)\n                dfs(node.get('right'), path, paths)\n            path.pop()\n\n        paths = []\n        dfs(tree, [], paths)\n        return [str(node['value']) for path in paths for node in path]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(self, coord, grid):\n        start = tuple(coord)\n        end = tuple(map(sum, zip((0,0), coord)))\n        moves = 0\n        visited = set()\n        queue = collections.deque([(start, moves)])\n        while queue:\n            current, moves = queue.popleft()\n            if current == end:\n                return moves\n            for direction in ((0,1), (1,0)):\n                next_pos = (current[0]+direction[0], current[1]+direction[1])\n                if 0<=next_pos[0]<len(grid) and 0<=next_pos[1]<len(grid[0]) and grid[next_pos[0]][next_pos[1]]==0 and next_pos not in visited:\n                    queue.append((next_pos, moves+1))\n                    visited.add(next_pos)\n        return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    def spiral(arr):\n        if not arr or not arr[0]:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    return spiral(arr)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    def foo(dict_of_planets):\n        result = {}\n        for planet, data in dict_of_planets.items():\n            if data[0] is not None and data[1] is not None:\n                population_density = round(data[0] / data[1], 2)\n                result[planet] = population_density\n        return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    def destroy_aliens(aliens, pos):\n        aliens[:] = [x for x in aliens if x != pos and (x % 2 != 0 or x == pos)]\n        return aliens\n\n    aliens = destroy_aliens(aliens, pos)\n    aliens = destroy_aliens(aliens, pos + 1)\n    aliens = destroy_aliens(aliens, pos - 1)\n\n    return aliens\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in space_invaders\n    aliens = destroy_aliens(aliens, pos)\nNameError: name 'pos' is not defined\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def digit_combinations(n):\n        if n == 0:\n            return [(0, 0)]\n        else:\n            result = []\n            for i in range(1, n + 1):\n                for combination in digit_combinations(n - i):\n                    if n % i == 0:\n                        result.append((i, combination[0] + i * combination[1], combination[0], combination[1]))\n                    else:\n                        result.append((i, combination[0] + i * combination[1], combination[0] + i, combination[1]))\n            return result\n\n    num1 = int(s1)\n    num2 = int(s2)\n    for i in range(len(s1) * len(s2)):\n        for combination in digit_combinations(len(s1) + len(s2) - i - 2):\n            if combination[0] * combination[2] == num1 and combination[1] * combination[3] == num2:\n                return combination[0] * combination[2] + combination[1] * combination[3]\n\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 32, in magical_multiply\n            if combination[0] * combination[2] == num1 and combination[1] * combination[3] == num2:\nIndexError: tuple index out of range\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    def validate_action(action, status):\n        if action == 'Launch' and status != 'On Ground':\n            return False\n        if action == 'Move' and status != 'In Space':\n            return False\n        if action == 'Land' and status != 'In Space':\n            return False\n        return True\n\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if not validate_action(action, status):\n            return 'Invalid Action Sequence'\n        if action == 'Launch':\n            status = 'In Space'\n        elif action == 'Move':\n            status = 'In Space'\n        else:\n            status = 'On Ground'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        row = 'A' * (2 * n - 1)\n        if i < n:\n            row = row[:n] + alphabet[i] + row[n + i :]\n        else:\n            row = row[:n] + alphabet[25 - (i - n)] + row[n + i :]\n        result.append(row)\n    return '\\n'.join(result)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n        else:\n            return c\n\n    def shift_string(s, n):\n        return ''.join(shift_char(c, n[i % len(n)]) for i, c in enumerate(s))\n\n    return shift_string(message, n_values)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(words):\n        return sorted(words, key=len)\n\n    return [''.join(sort_words(word.split())) for word in strings]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    def is_square(matrix):\n        return all(len(row) == len(matrix) for row in matrix)\n\n    return abs(sum(m[i][i] for i in range(len(m))) - sum(m[i][len(m)-i-1] for i in range(len(m))))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 134, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 16, in matrixMystery\n    if not is_square(m):\nUnboundLocalError: cannot access local variable 'is_square' where it is not associated with a value\n", "passed": false}
{"task_id": "EvoEval/96", "completion": "\n    def digit_product(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] >= 0 and i % 2 == 0 and lst[i] % 2 == 0 and digit_product(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def foo(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien_continent = {'Asia': 'Asia', 'Africa': 'Africa', 'North America': 'North America', 'South America': 'South America', 'Europe': 'Europe'}\n        if alien not in alien_continent:\n            return []\n        alien_encounter = sorted([name for name, continent in humans.items() if continent == alien_continent[alien]])\n        return alien_encounter\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 151, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 36, in nature_sequence_generator\n        next_num = sequence[i-1] + sequence[i-2]\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                players.pop(0)\n        if players:\n            players = players[1:] + [players[0]]\n    return players\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
