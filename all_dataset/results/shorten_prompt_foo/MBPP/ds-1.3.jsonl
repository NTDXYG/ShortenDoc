{"task_id": "MBPP/11", "completion": "\n    if s.count(ch) == 0:\n        return s\n    else:\n        return s.replace(ch, '', 1)\n\n"}
{"task_id": "MBPP/12", "completion": "\n    M_sorted = sorted(M, key=sum)\n    return M_sorted\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)\n"}
{"task_id": "MBPP/14", "completion": "\n    return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split('(?=[a-z])', text)\n\ntext = \"HelloWorld\""}
{"task_id": "MBPP/16", "completion": "\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    matches = pattern.findall(text)\n    return matches\n\ntext = \"Hello_world, this is a test_string with sequences lowercase letters joined with underscore.\""}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    chars_in_string = [0]*NO_OF_CHARS\n\n    for char in string:\n        chars_in_string[ord(char)] = 1\n\n    result = \"\"\n    for char in string:\n        if chars_in_string[ord(char)] == 0:\n            result += char\n\n    return result\n\n"}
{"task_id": "MBPP/19", "completion": "\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return \"Number is negative\"\n    elif x > 0:\n        return \"Number is positive\"\n    else:\n        return \"Number is zero\"\n\n"}
{"task_id": "MBPP/21", "completion": "\n    return [n * i for i in range(1, m + 1)]\n\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for sublist in list1:\n        max_sum += max(sublist)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    return int(binary, 2)\n\n"}
{"task_id": "MBPP/25", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the product of non-repeated elements\n    product = 1\n    for key, value in freq.items():\n        if value == 1:\n            product *= key\n\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(i) == K for i in test_list)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return []\n"}
{"task_id": "MBPP/28", "completion": "\n    if n == k or k == 0:\n        return 1\n    else:\n        return foo(n-1, k-1) + foo(n-1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    # Initialize result\n    result = -1\n\n    # Traverse the array\n    for i in range(0, arr_size):\n        # Count occurrences of current element\n        count = 0\n        for j in range(0, arr_size):\n            if (arr[i] == arr[j]):\n                count += 1\n\n        # If count is odd, update result\n        if (count & 1):\n            result = arr[i]\n            break\n\n    return result\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = collections.Counter(nums)\n\n    # Create a heap using the count_dict.items()\n    heap = [(-count, num) for num, count in count_dict.items()]\n\n    # Convert the list to a heap\n    heapq.heapify(heap)\n\n    # Pop the top k elements from the heap\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return '0'\n    binary = ''\n    while N > 0:\n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary\n\n"}
{"task_id": "MBPP/34", "completion": "\n    total_sum = sum(ar)\n    expected_sum = N * (N + 1) / 2\n    return expected_sum - total_sum\n\n"}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return None\n    else:\n        return n * n\n\n"}
{"task_id": "MBPP/36", "completion": "\n    if N == 0:\n        return p\n    elif N == 1:\n        return q\n    else:\n        return foo(q, p + q, N - 1)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    ints = []\n    strs = []\n    for i in mixed_list:\n        if isinstance(i, int):\n            ints.append(i)\n        elif isinstance(i, str):\n            strs.append(i)\n    ints.sort()\n    strs.sort()\n    return ints + strs\n\n"}
{"task_id": "MBPP/38", "completion": "\n    result = []\n    for i in list1:\n        if i % 2 == 0 and i % 2 != 0:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Count the number of characters that appear more than once\n    more_than_once = sum(1 for c in count if count[c] > 1)\n\n    # If more than one character appears more than once, return False\n    if more_than_once > 1:\n        return False\n\n    # If more than one character appears once, return True\n    if more_than_once == 1:\n        return True\n\n    # If no character appears more than once, return True\n    return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the sum of repeated elements\n    sum_repeated = 0\n    for key, value in freq.items():\n        if value > 1:\n            sum_repeated += key * value\n\n    return sum_repeated\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'[a-z]+'\n    return re.findall(pattern, text)\n\ntext = \"Hello, how are you today?\""}
{"task_id": "MBPP/44", "completion": "\n    return re.match(r'^\\w+', text)\n"}
{"task_id": "MBPP/45", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    if len(set(data)) != len(data):\n        return True\n    return False\n\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = A % 10\n    last_digit_B = B % 10\n\n    return factorial(last_digit_A) * factorial(last_digit_B)\n\n"}
{"task_id": "MBPP/48", "completion": "\n    return n ^ 0x55555555\n\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for sublist in nums:\n        if N >= len(sublist):\n            result.append(sublist)\n        else:\n            result.append(sublist[:N])\n    return result\n"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y and y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[-1] == str[-2]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n < 0:\n        return False\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return False\n    if n == 5:\n        return False\n    if n == 6:\n        return False\n    if n == 7:\n        return False\n    if n == 8:\n        return False\n    if n == 9:\n        return False\n    if n == 10:\n        return False\n    if n == 11:\n        return False\n    if n == 12:\n        return False\n    if n == 13:\n        return False\n    if n == 14:\n        return False\n    if n == 15:\n        return False\n    if n == 16:\n        return False\n    if n == 17:\n        return False\n    if n == 18:\n        return False\n    if n == 19:\n        return False\n    if n == 20:\n        return False\n    if n == 21:\n        return False\n    if n == 22:\n        return False\n    if n == 23:\n        return False\n    if n == 24:\n        return False\n    if n == 25:\n        return False\n    if n == 26:\n        return False\n    if n == 27:\n        return False\n    if n == 28:\n        return False\n    if n == 29:\n        return False\n    if n == 30:\n        return False\n    if n == 31:\n        return False\n    if n == 32:\n        return False\n    if n == 33:\n        return False\n    if n == 34:\n        return False\n    if n == 35:\n        return False\n    if n == 36:\n        return False\n    if n == 37:\n        return False\n    if n == 38:\n        return False\n    if n == 39:\n        return False\n    if n == 40:\n        return False\n    if n == 41:\n        return False\n    if n == "}
{"task_id": "MBPP/57", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize result\n    res = ''\n\n    # Traverse the array\n    for i in range(n):\n        # If current digit is '0' and there is a digit on the left,\n        # then we can't include this digit in the result,\n        # so we return \"0\"\n        if i > 0 and arr[i] == '0' and arr[i - 1] != '0':\n            return '0'\n\n        # Append the digit to the result\n        res += arr[i]\n\n    # Return the result\n    return res\n\n"}
{"task_id": "MBPP/58", "completion": "\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (7 * n - 5) // 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return 1\n\n    max_length = 1\n    curr_length = 1\n\n    for i in range(1, n):\n        if arr[i] == arr[i-1] + 1:\n            curr_length += 1\n            max_length = max(max_length, curr_length)\n        else:\n            curr_length = 1\n\n    return max_length\n\n"}
{"task_id": "MBPP/61", "completion": "\n    dp = defaultdict(int)\n    dp[0] = 1\n    sum_ = 0\n    count = 0\n    for c in s:\n        if c.isdigit():\n            sum_ += int(c)\n        if sum_ in dp:\n            count += dp[sum_]\n        dp[sum_] += 1\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if not test_list:\n        return 0\n\n    min_val = test_list[0]\n    max_diff = 0\n\n    for num in test_list:\n        if num < min_val:\n            min_val = num\n        elif num - min_val > max_diff:\n            max_diff = num - min_val\n\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + foo(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 4\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    if s in l:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/70", "completion": "\n    return all(len(t) == k for t in Input)\n"}
{"task_id": "MBPP/71", "completion": "\n    nums.sort()\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        j = i*i\n        if j == n:\n            return True\n        elif j > n:\n            return False\n        i += 1\n    return False\n"}
{"task_id": "MBPP/73", "completion": "\n    pattern = re.compile(r'[,;:\\n]')\n    return pattern.split(text)\n\ntext = \"This,is;a;test;string;with,multiple,delimiters\""}
{"task_id": "MBPP/74", "completion": "\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    return m * n\n\n"}
{"task_id": "MBPP/77", "completion": "\n    def sum_even_digits(n):\n        return sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n\n    return sum_even_digits(n) - sum_even_digits(n-1)\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n - 3) * (n - 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return zip(test_tup1, test_tup2)\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    return sum(ord(c) for c in strr)\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return foo(n - foo(n - 1)) + foo(n - foo(n - 2))\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (7 * n - 5) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return ct.deepcopy(dict1 | dict2 | dict3)\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "MBPP/89", "completion": "\n    return N - (N % 10)\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(len(word) for word in list1)\n"}
{"task_id": "MBPP/91", "completion": "\n    return sub_str in str1\n"}
{"task_id": "MBPP/92", "completion": "\n    if n < 0:\n        return False\n    else:\n        return n % 2 == 0\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a + b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return [(i, x) for i, x in enumerate(test_list)]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                min_length = min(min_length, len(lst[i]))\n            else:\n                min_length = min(min_length, len(lst[j]))\n    return min_length\n\n"}
{"task_id": "MBPP/96", "completion": "\n    return n * 2\n\n"}
{"task_id": "MBPP/97", "completion": "\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    return numbers[0] * len(numbers) / sum(numbers)\n\n\nnumbers = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n"}
{"task_id": "MBPP/100", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    return next_palindrome(num)\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if n < k:\n        return -1\n    return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    return re.sub(r'_+', ' ', word).title()\n\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return foo(m, n-m)\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return sum(1 for i in lst if i is True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + test_tup\n"}
{"task_id": "MBPP/107", "completion": "\n    return len([i for i in L if i in R])\n\n"}
{"task_id": "MBPP/108", "completion": "\n    # Create a heap queue and add the first number\n    heap = [num1]\n\n    # Add the second number\n    heapq.heappush(heap, num2)\n\n    # Add the third number\n    heapq.heappush(heap, num3)\n\n    # Continue to pop the smallest number from the heap and push the next number\n    while len(heap) > 1:\n        smallest = heapq.heappop(heap)\n        yield smallest\n        heapq.heappush(heap, next(numbers))\n\n\nnumbers = iter([4, 5, 1, 2, 3])\nfor num in foo(4, 5, 1):\n    print(num)\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[i+1] == '0':\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/110", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        if test_list[i] >= strt_val and test_list[i] <= stop_val:\n            result.append(test_list[i])\n    return result\n"}
{"task_id": "MBPP/111", "completion": "\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    common_elements = set(flat_list)\n    return common_elements\n\n"}
{"task_id": "MBPP/112", "completion": "\n    import math\n    radius = diameter / 2\n    foo = math.pi * radius**2 * height\n    return foo\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    # Create a Counter object\n    counter = Counter(test_list)\n\n    # Get the frequency of each tuple\n    freq_dict = dict(counter)\n\n    return freq_dict\n"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return [int(i) for i in nums]\n\n"}
{"task_id": "MBPP/117", "completion": "\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            test_list[i] = None\n    return test_list\n\n\ntest_list = [1, 2, 3, '4', 'five', 6.0, 7, 8, 9.0]"}
{"task_id": "MBPP/118", "completion": "\n    return string.split(' ')\n"}
{"task_id": "MBPP/119", "completion": "\n    res = []\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            res.append(arr[i])\n    return sorted(res)\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, list1[i][0]*list1[j][1])\n    return max_product\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n                    print(f\"Triplet is {A[i]}, {A[j]}, {A[k]}\")\n    if count == 0:\n        print(\"No such triplet found\")\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(A)\nsum = 10\ncount = 0\nfoo(A, n, sum, count)\n"}
{"task_id": "MBPP/122", "completion": "\n    if n > MAX:\n        raise ValueError(\"n is too large\")\n\n    # Initialize the first smart number\n    smart_number = 1\n\n    # Loop through the numbers\n    for i in range(1, n+1):\n        # Check if the number is smart\n        if is_smart(smart_number):\n            # If it is, increment the counter\n            counter += 1\n\n        # If the counter is equal to n, return the number\n        if counter == n:\n            return smart_number\n\n        # Move to the next number\n        smart_number += 1\n\n    # If we've gone through all the numbers, return None\n    return None\n"}
{"task_id": "MBPP/123", "completion": "\n\n        Return the sum of the divisors of a number.\n        \"\"\"\n        result = 1\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n / i == i:\n                    result += i\n                else:\n                    result += i\n                result += n // i\n        return result\n\n    result = 0\n    for i in range(2, limit + 1):\n        if sum_divisors(i) > i and sum_divisors(sum_divisors(i)) == i:\n            result += i\n    return result\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a)\n\n"}
{"task_id": "MBPP/125", "completion": "\n    # Convert string to list of integers\n    string = list(map(int, string))\n\n    # Initialize variables\n    max_diff = 0\n    count_ones = 0\n\n    # Iterate over the string\n    for i in range(len(string)):\n        # If the current number is 1, increment the count\n        if string[i] == 1:\n            count_ones += 1\n        else:\n            # If the current number is 0, update the max_diff\n            max_diff = max(max_diff, count_ones)\n            count_ones = 0\n\n    # Update max_diff with the last substring\n    max_diff = max(max_diff, count_ones)\n\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n\n        Find greatest common divisor of two numbers.\n        \"\"\"\n        while(y):\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        \"\"\"\n        Find least common multiple of two numbers.\n        \"\"\"\n        lcm = (x*y)//gcd(x,y)\n        return lcm\n\n    return lcm(a, b)\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n    n = len(my_matrix)\n    total_sum = sum(sum(row) for row in my_matrix)\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diag_sums = [my_matrix[i][i] for i in range(n)]\n    anti_diag_sums = [my_matrix[i][n-i-1] for i in range(n)]\n\n    if (total_sum != row_sums[0] or total_sum != col_sums[0] or\n            total_sum != diag_sums[0] or total_sum != anti_diag_sums[0]):\n        return \"Not a magic square\"\n\n    if (total_sum != n*n and n*n != row_sums[0] and n*n != col_sums[0] and\n            n*n != diag_sums[0] and n*n != anti_diag_sums[0]):\n        return \"Not a magic square\"\n\n    return \"Magic square\"\n\n"}
{"task_id": "MBPP/130", "completion": "\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq_item = max(freq_dict, key=freq_dict.get)\n\n    return max_freq_item\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return str(tup1)\n\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    for _ in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1] - 1)\n    return arr[-1] % 2 == 0\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n * (26 * n - 1)\n\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 100:\n        return units * 0.5\n    elif units <= 200:\n        return 100 * 0.5 + (units - 100) * 0.75\n    else:\n        return 100 * 0.5 + 100 * 0.75 + (units - 200) * 1\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for tup in test_list:\n        for i in tup:\n            if tup.count(i) == 1:\n                result.append(i)\n    return result\n\ntest_list = [(1, 2, 2, 3), (1, 1, 2, 2, 3, 3), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"}
{"task_id": "MBPP/141", "completion": "\n    def flip(nums, k):\n        for i in range(k//2):\n            nums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n    max_index = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                flip(nums, j)\n                flip(nums, j+1)\n                if j > max_index:\n                    max_index = j\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_square(n):\n        return n ** 0.5 == int(n ** 0.5)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_perfect_square(n):\n        return n ** 0.5 == int(n ** 0.5)\n\n    def is_fibonacci(n):\n        x = 0\n        y = 1\n        while y < n:\n            z = x + y\n            x = y\n            y = z\n        return y == n\n\n    def is_square_free(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_prime_power(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_square_free_prime(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_square_free_power(n):\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n   "}
{"task_id": "MBPP/144", "completion": "\n    sum_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum_diff += abs(arr[i] - arr[j])\n    return sum_diff\n\n"}
{"task_id": "MBPP/145", "completion": "\n    if n == 1:\n        return 0\n\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n\n    for i in range(1, n):\n        if arr[i] - min_element > max_difference:\n            max_difference = arr[i] - min_element\n\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    return max_difference\n\n"}
{"task_id": "MBPP/146", "completion": "\n    return [ord(c) for c in str1]\n\n"}
{"task_id": "MBPP/147", "completion": "\n    if m == 0:\n        return tri[0][0]\n    else:\n        return max(foo(tri, m - 1, n - 1), foo(tri, m - 1, n)) + tri[m][n]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(x))\n\n"}
{"task_id": "MBPP/149", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [1]*n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == i - j:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n\n    return max_length\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if a == b and b == c:\n        return \"Infinite sequence\"\n    else:\n        return \"Not an infinite sequence\"\n\n"}
{"task_id": "MBPP/151", "completion": "\n    if __builtins__.isinstance(p, int) and __builtins__.isinstance(q, int):\n        if p < 0 or q < 0:\n            return False\n        elif p == 0 or q == 0:\n            return p == q\n        else:\n            while q != 0:\n                p, q = q, p % q\n            return p == 1\n    else:\n        return False\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = foo(x[:mid])\n    right = foo(x[mid:])\n    return merge(left, right)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    import numpy as np\n\n    # check if a, b, c are all numbers\n    if not all(isinstance(i, (int, float)) for i in [a, b, c]):\n        raise ValueError(\"All inputs must be numbers\")\n\n    # check if a, b, c are all positive\n    if not all(i > 0 for i in [a, b, c]):\n        raise ValueError(\"All inputs must be positive\")\n\n    # check if a, b, c can form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"The inputs can't form a triangle\")\n\n    # calculate the vertex parab\n    vertex_parab = a * b * c * (a + b + c) * (a**2 + b**2 + c**2 + a*b + b*c + c*a)\n\n    return vertex_parab\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            result.append(nums[i][j])\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    return n ^ 0xAAAAAAAA\n"}
{"task_id": "MBPP/156", "completion": "\n    # Convert the tuple of string values to a tuple of integer values.\n    int_tuple = tuple(int(i) for i in tuple_str)\n    return int_tuple\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Calculate the number of operations required to make all elements equal\n    operations = sum(abs(arr[i] - (n - i) * k) for i in range(n))\n    return operations\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['January', 'February', 'March']:\n        if days >= 20:\n            print('Winter')\n        else:\n            print('Spring')\n    elif month in ['April', 'May', 'June']:\n        if days >= 15:\n            print('Spring')\n        else:\n            print('Summer')\n    elif month in ['July', 'August', 'September']:\n        if days >= 10:\n            print('Summer')\n        else:\n            print('Fall')\n    elif month in ['October', 'November', 'December']:\n        if days >= 15:\n            print('Fall')\n        else:\n            print('Winter')\n    else:\n        print('Invalid month')\n"}
{"task_id": "MBPP/160", "completion": "\n    for x in range(1, n+1):\n        if (a*x) % b == n:\n            return x, (n - (a*x)) // b\n    return -1, -1\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    sum = 0\n    for x in range(n, 0, -2):\n        sum += x\n    return sum\n\n"}
{"task_id": "MBPP/163", "completion": "\n    if s <= 0 or l <= 0:\n        return \"Invalid input\"\n    else:\n        return (l * s) / (4 * tan(pi / s))\n"}
{"task_id": "MBPP/164", "completion": "\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/167", "completion": "\n    if n and not n & (n - 1):\n        return n\n    else:\n        return foo(n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    return a[x]\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n+1):\n            pell_numbers.append(2*pell_numbers[i-1] + pell_numbers[i-2])\n        return pell_numbers[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    return s.count('std')\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub('[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    for char in str1:\n        if char in \"([{\":\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == \")\" and stack[-1] != \"(\":\n                return False\n            if char == \"]\" and stack[-1] != \"[\":\n                return False\n            if char == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_min = L[0]\n    lcm_max = R[0]\n\n    for i in range(1, len(L)):\n        lcm_min = lcm(lcm_min, L[i])\n        lcm_max = lcm(lcm_max, R[i])\n\n    return lcm_min, lcm_max\n\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    elif x == 42:"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n\n    return 6371 * c\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n\n    min_len = min(len(str1), len(str2))\n\n    for i in range(min_len):\n        if str1[i] != str2[i]:\n            return str1[:i]\n\n    return str1[:min_len]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    characters = re.findall(r'[^A-Za-z0-9]', string)\n    values = re.findall(r'[0-9]', string)\n\n    return uppercase, lowercase, characters, values\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the discriminant\n    d = b**2 - 3*a*c\n\n    # check if the discriminant is positive\n    if d >= 0:\n        # calculate the roots\n        root1 = (-b - d**0.5) / (2*a)\n        root2 = (-b + d**0.5) / (2*a)\n        return root1, root2\n    else:\n        return \"No real roots\"\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n        else:\n            print(f\"Not found: {pattern}\")\n\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    for i in range(0, int(n ** 0.5) + 1):\n        for j in range(i, int(n ** 0.5) + 1):\n            if i * j == n:\n                return True\n    return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    # First, we will convert the array to a set.\n    # This will remove any duplicates and also sort the array.\n    arr = sorted(set(arr))\n\n    # Then, we will iterate over the array and check if the current number is\n    # greater than 0 and less than or equal to n. If it is, we return it.\n    # If it isn't, we increment the index.\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[i] <= n:\n            return arr[i]\n        else:\n            n += 1\n\n    # If we've gone through the entire array and haven't returned,\n    # it means that the smallest positive number greater than n\n    # is the first missing positive number.\n    return n\n"}
{"task_id": "MBPP/190", "completion": "\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n\n"}
{"task_id": "MBPP/195", "completion": "\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    return (test_tup1[0]**test_tup1[1]), (test_tup2[0]**test_tup2[1])\n"}
{"task_id": "MBPP/198", "completion": "\n    if a <= 0 or b <= 0:\n        return None\n\n    # Calculate the semi-major axis\n    h = math.sqrt(a**2 - b**2)\n\n    # Calculate the semi-minor axis\n    k = math.sqrt(a**2 - h**2)\n\n    # Calculate the area of the triangle\n    area = 0.5 * a * k\n\n    # Calculate the perimeter of the triangle\n    perimeter = a + b + h + k\n\n    return area, perimeter\n"}
{"task_id": "MBPP/199", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return 1 << (n - 1).bit_length()\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_val = max(list1)\n    max_pos = [i for i, x in enumerate(list1) if x == max_val]\n    return max_pos\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return all(lst[0] == x for x in lst)\n\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join(ch for ch in str1 if (ord(ch) - ord('0')) % 2 == 1)\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x = bin(n1)[2:].zfill(32)\n    y = bin(n2)[2:].zfill(32)\n    return sum(el1 != el2 for el1, el2 in zip(x, y))\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n"}
{"task_id": "MBPP/206", "completion": "\n    return tuple(str(a) + str(b) for a, b in test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    count = [[0 for x in range(n + 1)] for y in range(n + 1)]\n    for i in range(n + 1):\n        count[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j]:\n                count[i][j] = count[i + 1][j] + count[i][j - 1] + 1 - count[i + 1][j - 1]\n            else:\n                count[i][j] = count[i + 1][j] + count[i][j - 1] - count[i + 1][j - 1]\n    return count[0][n - 1]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = re.compile(r'^\\d+\\.\\d{0,2}$')\n    if pattern.match(str(num)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heappush(heap, a)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(\"^[a-z0-9]*$\")\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if binary.count('1') == 1:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n+1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return test_tup1 + test_tup2\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    result = []\n    for i in range(len(alist)):\n        if i % 2 == 0:\n            result.append(alist[i])\n    return result\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Convert the numbers to strings to handle leading zeros\n    A = str(A)\n    B = str(B)\n\n    # If the lengths of the strings are not equal, return the difference\n    if len(A) != len(B):\n        return abs(len(A) - len(B))\n\n    # If the strings are equal, find the number of operations required to make them equal\n    # by comparing the characters in the strings\n    operations = 0\n    for i in range(len(A)):\n        if A[i] != B[i]:\n            operations += 1\n\n    return operations\n"}
{"task_id": "MBPP/219", "completion": "\n    # Check if the tuple is not empty\n    if not test_tup:\n        return []\n\n    # Extract the first k elements\n    first_k_elements = test_tup[:K]\n\n    # Sort the first k elements\n    first_k_elements.sort()\n\n    # Extract the maximum and minimum elements\n    max_element = first_k_elements[-1]\n    min_element = first_k_elements[0]\n\n    # Return the maximum and minimum elements\n    return max_element, min_element\n\n"}
{"task_id": "MBPP/220", "completion": "\n    text = re.sub(r'[ ,:]', ':', text)\n    return text[:n]\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return False\n    return True\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return foo(arr, low, mid - 1)\n    return foo(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if not (n & (1 << i)):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    # Initialize two pointers, one for the start of the array and the other for the end\n    start = 0\n    end = n - 1\n\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # If the start element is negative\n        if arr[start] < 0:\n            # Swap the start and end elements\n            arr[start], arr[end] = arr[end], arr[start]\n            # Decrement the end pointer\n            end -= 1\n        else:\n            # Increment the start pointer\n            start += 1\n\n    return arr\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n"}
{"task_id": "MBPP/231", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return max(foo(tri, n-1) + tri[n-1], tri[n-1])\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    r_squared = r**2\n    h_squared = h**2\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    return n & ~1\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # If N is not a multiple of 3, return -1\n    if N % 3 != 0:\n        return -1\n\n    # Calculate the number of 3s in the binary representation of N\n    count_3s = bin(N).count('3')\n\n    # If the number of 3s is less than K, return -1\n    if count_3s < K:\n        return -1\n\n    # Calculate the number of 3s in the binary representation of N - 2*K\n    count_3s_minus_2K = bin(N - 2**K).count('3')\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K, return -1\n    if count_3s_minus_2K < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N is less than K, return -1\n    if count_3s < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K, return -1\n    if count_3s_minus_2K < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K, return -1\n    if count_3s_minus_2K < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K, return -1\n    if count_3s_minus_2K < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K, return -1\n    if count_3s_minus_2K < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K, return -1\n    if count_3s_minus_2K < K:\n        return -1\n\n    # If the number of 3s in the binary representation of N - 2*K is less than K"}
{"task_id": "MBPP/237", "completion": "\n    # Count occurrences\n    count_dict = Counter(test_list)\n\n    # Check if all values occur the same number of times\n    for value, count in count_dict.items():\n        if count != len(test_list) / len(count_dict):\n            return False\n\n    return True\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        return m * (m - 1) * (m - 2) // 6\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [[[i*j*k for k in range(o)] for j in range(n)] for i in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n"}
{"task_id": "MBPP/243", "completion": "\n    lst.sort(key=lambda x: (lst.count(x[0]), x))\n    return lst\n"}
{"task_id": "MBPP/244", "completion": "\n    if N <= 0:\n        return None\n\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 0.5) ** 2\n    else:\n        return (int(root + 0.5) + 1) ** 2\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return max(arr)\n\n    # Initialize maximum sum\n    max_sum = -1\n\n    # Initialize maximum sum ending at index i\n    max_ending_here = 0\n\n    # Initialize maximum sum ending at index i-1\n    max_ending_prev = 0\n\n    # Traverse the given array.\n    for i in range(0, n):\n\n        # Update max_ending_prev and max_ending_here\n        max_ending_prev = max_ending_here\n        max_ending_here = max(arr[i], max_ending_prev + arr[i])\n\n        # Update maximum sum\n        max_sum = max(max_sum, max_ending_prev)\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    guess = number / 2.0\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2.0\n    return guess\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    return L[0][n-1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n - 1\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    return [element, *list]\n\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        result.append((r, theta))\n    return result\n\nnumbers = [1+2j, 3+4j, 5+6j]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\b[ae]\\w*\\b', text, re.I)\n\ntext = \"The quick brown fox jumps over the lazy dog\""}
{"task_id": "MBPP/255", "completion": "\n    return [list(x) for x in combinations_with_replacement(l, n)]\n\nl = [1, 2, 3, 4, 5]\nn = 3\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a nonnegative number\")\n    count = 0\n    for i in range(n):\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/257", "completion": "\n    return b, a\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return list(filter(lambda x: x % 2 != 0, array_nums))\n"}
{"task_id": "MBPP/259", "completion": "\n    return max(test_tup1), max(test_tup2)\n\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    primes = [2]\n    a, b = 2, 2\n\n    for _ in range(n):\n        a, b = b, a + b\n        is_prime = True\n        for p in primes:\n            if p * p > b:\n                break\n            if b % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(b)\n\n    return primes[-1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n    if len(test_tup1) != 2 or len(test_tup2) != 2:\n        raise ValueError(\"Both inputs must be tuples of length 2.\")\n    if not all(isinstance(i, (int, float)) for i in test_tup1) or not all(isinstance(i, (int, float)) for i in test_tup2):\n        raise TypeError(\"Both elements of the tuples must be numbers.\")\n\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n\n"}
{"task_id": "MBPP/262", "completion": "\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age < 0:\n        return \"Age can't be negative\"\n    elif h_age == 0:\n        return 0\n    elif h_age == 1:\n        return 14\n    elif h_age == 2:\n        return 22\n    else:\n        return 22 + (h_age - 2) * 4\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    return sum(i**2 for i in range(1, n+1))\n\n"}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return None\n    i = 1\n    while True:\n        if i % 5 == 0 and i % 2 == 0:\n            n -= 1\n            if n == 0:\n                return i\n        i += 1\n\n"}
{"task_id": "MBPP/269", "completion": "\n    if k.isalpha():\n        return ord(k)\n    else:\n        return \"Not a letter\"\n\n"}
{"task_id": "MBPP/270", "completion": "\n    return sum(arr[i] for i in range(0, n, 2))\n"}
{"task_id": "MBPP/271", "completion": "\n    return sum(i**5 for i in range(2, 2*n+1, 2))\n"}
{"task_id": "MBPP/272", "completion": "\n    return [t[-1] for t in test_list]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum_even_coeff = 0\n\n    # Loop through the range of n\n    for i in range(n):\n        # Calculate binomial coefficient\n        binomial_coeff = math.comb(n, i)\n\n        # If index is even, add to sum\n        if i % 2 == 0:\n            sum_even_coeff += binomial_coeff\n\n    return sum_even_coeff\n"}
{"task_id": "MBPP/275", "completion": "\n    # Calculate the number of elements in the array\n    num_elements = m - n + 1\n\n    # Calculate the last removed element's position\n    last_removed_pos = num_elements % (2 * m)\n\n    # If the last removed element is in the first half of the array\n    if last_removed_pos < m:\n        return last_removed_pos\n\n    # If the last removed element is in the second half of the array\n    else:\n        return last_removed_pos - num_elements\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * r * r * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v == n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    return test_tup.index(1)\n\n\ntest_tup = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5)"}
{"task_id": "MBPP/279", "completion": "\n    return n * (7 * n - 5) // 2\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    for i in range(10):\n        if str(n).count(str(i)) > i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'a.*b[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/286", "completion": "\n    # Calculate the length of the original array\n    original_length = len(a)\n\n    # Calculate the length of the repeated array\n    repeated_length = original_length * n\n\n    # Calculate the length of the subarray\n    subarray_length = original_length + n\n\n    # If the length of the repeated array is less than the length of the subarray, return -1\n    if repeated_length < subarray_length:\n        return -1\n\n    # If the length of the repeated array is equal to the length of the subarray, return 0\n    if repeated_length == subarray_length:\n        return 0\n\n    # If the length of the repeated array is greater than the length of the subarray, return the difference\n    return repeated_length - subarray_length\n"}
{"task_id": "MBPP/287", "completion": "\n    return sum(i**2 for i in range(2, 2*n+1, 2))\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for i in range(N):\n        if arr[i] % P == 1:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 1\n            else:\n                return 2\n        else:\n            return 1\n    else:\n        return 2\n\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length = -1\n    max_list = []\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = k\n    dp[1] = k * k\n\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        return n / m\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"}
{"task_id": "MBPP/295", "completion": "\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/296", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(foo(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the aggregate for each student\n    student_aggregate = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for student, marks in stdata:\n        # Calculate the aggregate for the current student\n        aggregate = sum(marks) / len(marks)\n\n        # Add the aggregate to the dictionary\n        student_aggregate[student] = aggregate\n\n    # Return the dictionary\n    return student_aggregate\n"}
{"task_id": "MBPP/300", "completion": "\n\n        Calculate the sum of first n bits.\n        \"\"\"\n        return n * (n + 1) // 2\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if bit_sum(i) == bit_sum(n - j - 1):\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + max(foo(v) for v in d.values())\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return -1\n    else:\n        return n.bit_length() - 1\n\n"}
{"task_id": "MBPP/303", "completion": "\n    count_a = a.count('1')\n    count_b = a.count('0')\n    if count_a != count_b:\n        return False\n    return True\n"}
{"task_id": "MBPP/304", "completion": "\n    # Rotate the array\n    rotated_arr = arr[rotations:] + arr[:rotations]\n    # Find the element at the given index\n    return rotated_arr[index]\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match(r'^p', word)]\n\nwords = ['python', 'perl', 'java', 'php', 'ruby', 'csharp', 'go', 'javascript']"}
{"task_id": "MBPP/306", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(a[i], dp[i-1] + a[i])\n    return max(dp)\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result\n    result = []\n\n    # Iterate over the first N elements in both lists\n    for i in range(N):\n        # If the current element in nums1 is greater than the current element in nums2,\n        # append the product of the two numbers to the result\n        if nums1[i] > nums2[i]:\n            result.append(nums1[i] * nums2[i])\n        else:\n            result.append(nums2[i] * nums1[i])\n\n    return result\n"}
{"task_id": "MBPP/309", "completion": "\n    return a + b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    return n | (n-1)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r * r * h\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or not grid[0] or n <= 0:\n        return 0\n\n    dp = [0] * n\n    dp2 = [0] * n\n    dp[0] = grid[0][0]\n    dp2[0] = grid[0][0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp2[i-1]) + grid[0][i]\n        dp2[i] = dp[i-1] + grid[1][i] if i < n-1 else dp[i-1] + grid[1][i]\n\n    return max(dp[-1], dp2[-1])\n\n"}
{"task_id": "MBPP/315", "completion": "\n    return max(len(word) for word in str.split())\n"}
{"task_id": "MBPP/316", "completion": "\n    for i in range(len(A)-1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    s.sort()\n    return max(s[0]*s[1]*s[2], s[0]*s[1]*s[3], s[0]*s[2]*s[3], s[1]*s[2]*s[3])\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = re.compile(r'\\b\\w{5}\\b')\n    return pattern.findall(text)\n\ntext = \"Hello, this is a test. Testing, testing, testing.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_squares - sum_of_numbers ** 2\n\n"}
{"task_id": "MBPP/321", "completion": "\n    if s < 0:\n        return \"Invalid input\"\n    elif s == 0:\n        return 0\n    else:\n        return s + foo(s-1)\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n"}
{"task_id": "MBPP/323", "completion": "\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0:\n            i += 1\n        elif arr[j] > 0:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n\n"}
{"task_id": "MBPP/325", "completion": "\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 2\n    if n == 9:\n        return 3\n    if n == 10:\n        return 4\n    if n == 11:\n        return 1\n    if n == 12:\n        return 2\n    if n == 13:\n        return 3\n    if n == 14:\n        return 4\n    if n == 15:\n        return 2\n    if n == 16:\n        return 3\n    if n == 17:\n        return 4\n    if n == 18:\n        return 3\n    if n == 19:\n        return 4\n    if n == 20:\n        return 2\n    if n == 21:\n        return 3\n    if n == 22:\n        return 4\n    if n == 23:\n        return 3\n    if n == 24:\n        return 4\n    if n == 25:\n        return 2\n    if n == 26:\n        return 3\n    if n == 27:\n        return 4\n    if n == 28:\n        return 3\n    if n == 29:\n        return 4\n    if n == 30:\n        return 2\n    if n == 31:\n        return 3\n    if n == 32:\n        return 4\n    if n == 33:\n        return 3\n    if n == 34:\n        return 4\n    if n == 35:\n        return 2\n    if n == 36:\n        return 3\n    if n == 37:\n        return 4\n    if n == 38:\n        return 3\n    if n"}
{"task_id": "MBPP/326", "completion": "\n    word_counts = defaultdict(int)\n    for word in test_list:\n        word_counts[word.lower()] += 1\n\n    max_count = max(word_counts.values())\n    return [word for word, count in word_counts.items() if count == max_count]\n\ntest_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        print(\"The triangle is isosceles.\")\n    else:\n        print(\"The triangle is not isosceles.\")\n\n"}
{"task_id": "MBPP/328", "completion": "\n    return list1[n:] + list1[:m]\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r\"\\b\\w{3,5}\\b\"\n    return re.findall(pattern, text)\n\ntext = \"This is a test string. This is only a test.\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    return freq_dict\n\n"}
{"task_id": "MBPP/333", "completion": "\n    return [i for i in sub_li if isinstance(i, int)]\n\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return sum(a + i*d for i in range(1, n+1))\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    return re.findall(r'\\b\\w+[.,;:!\\?]+\\b', text)\n\ntext = \"Hello, world. It's a beautiful day. I love programming.\""}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    # Find the maximum divisor\n    divisor = max(x, y)\n\n    # Check if the divisor is a divisor of both x and y\n    while divisor > 0:\n        if x % divisor == 0 and y % divisor == 0:\n            return divisor\n        divisor -= 1\n\n    return None\n\n"}
{"task_id": "MBPP/340", "completion": "\n    # Filter out non-positive numbers\n    lst = [x for x in lst if x > 0]\n\n    # Sort the list\n    lst.sort()\n\n    # Return the sum of the three lowest numbers\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_range = float('inf')\n    max_range = float('-inf')\n\n    heap = []\n    for i, num in enumerate(list):\n        heappush(heap, Node(num, i, len(heap)))\n\n    while heap:\n        node = heappop(heap)\n        min_range = min(min_range, node.value)\n        max_range = max(max_range, node.value)\n\n        if len(heap) == 0:\n            break\n\n        next_node = heap[0]\n        if next_node.value < node.value:\n            heappush(heap, next_node)\n            heappop(heap)\n\n    return max_range - min_range + 1 if min_range != float('inf') and max_range != float('-inf') else 0\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    string = sum(c.isalpha() for c in s)\n    return digits, string\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                count += 1\n                break\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n < k:\n        return n\n    else:\n        return foo(n-k, k) + n//k\n\n"}
{"task_id": "MBPP/347", "completion": "\n    return m * n\n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0:\n        return 1\n    elif n < 0 or r < 0:\n        return 0\n    else:\n        return foo(n-1, r) + foo(n-1, r-1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    if isinstance(string, str):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/350", "completion": "\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                return s[:i] + s[j+1:]\n    return s\n\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n    return 2 * math.pi * radius\n\n"}
{"task_id": "MBPP/356", "completion": "\n    c = 180 - a - b\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n"}
{"task_id": "MBPP/359", "completion": "\n    if a == 0:\n        return False\n    else:\n        d = (b**2) - (4*a*c)\n        if d < 0:\n            return False\n        else:\n            x1 = (-b - sqrt(d)) / (2*a)\n            x2 = (-b + sqrt(d)) / (2*a)\n            return x1 == x2\n"}
{"task_id": "MBPP/360", "completion": "\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * foo(n - 1) + 1\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    c = Counter(nums)\n    return c.most_common(1)[0]\n"}
{"task_id": "MBPP/363", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        result.append(tuple(test_list[i] + [K] * len(test_list[i])))\n    return result\n\n"}
{"task_id": "MBPP/364", "completion": "\n    count = 0\n    for i in range(len(ch)):\n        if i % 2 == 0:\n            if ch[i] == '0':\n                count += 1\n        else:\n            if ch[i] == '1':\n                count += 1\n    return count\n"}
{"task_id": "MBPP/365", "completion": "\n    return len(str(n))\n\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, current_product)\n\n    return max_product\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    lheight = get_height(root.left)\n    rheight = get_height(root.right)\n\n    if abs(lheight - rheight) > 1:\n        return False\n\n    return foo(root.left) and foo(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return (test_tup[0] * N, test_tup[1] * N, test_tup[2] * N)\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] > left_element:\n        return left_element\n    if A[-1] < right_element:\n        return right_element\n\n    for i in range(len(A)):\n        if A[i] < left_element:\n            return left_element\n        if A[i] > right_element:\n            return right_element\n\n    return -1\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return nums\n\nnums = [3, 2, 1, 5, 4, 7, 6]"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining = str[0:i] + str[i+1:]\n        for p in foo(remaining):\n            perms.append(char + p)\n    return perms\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n"}
{"task_id": "MBPP/376", "completion": "\n    result = []\n    for i in test_tup:\n        if i not in result:\n            result.append(i)\n        else:\n            result[-1] = 'CUSTOM_VALUE'\n    return tuple(result)\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if not test_list:\n        return test_list\n    else:\n        return test_list[-1:] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[i*colnum+j for j in range(colnum)] for i in range(rownum)]\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    def rotate(A):\n        return [A.pop()] + A\n\n    def find_rotation(A, start, end):\n        if start > end:\n            return -1\n        mid = (start + end) // 2\n        if A[mid] > A[start]:\n            return find_rotation(A, mid + 1, end)\n        elif A[mid] < A[start]:\n            return find_rotation(A, start, mid - 1)\n        else:\n            return mid\n\n    n = len(A)\n    return find_rotation(A, 0, n - 1)\n\n"}
{"task_id": "MBPP/383", "completion": "\n    return n ^ 0x55555555\n\n"}
{"task_id": "MBPP/384", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return 1 + foo(n-1, arr)\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + foo(n-1)\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return 0\n    else:\n        return len(stack)\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    return n.bit_length()\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for d1 in l1:\n        for d2 in l2:\n            for d3 in l3:\n                result.append({**d1, **d2, **d3})\n    return result\n\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char\n\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    result = []\n    for num in nums:\n        sum_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_digits)\n    return result\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n\n\ntest_list = [(1, 2), (2, 3), (1, 2), (3, 4), (1, 2), (3, 4), (1, 2), (3, 4)]"}
{"task_id": "MBPP/401", "completion": "\n    return tuple(a+b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/402", "completion": "\n    return (n * pow(r, p, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    return a + b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/407", "completion": "\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Find the first pair of digits that are in descending order\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            # If we find such a pair, swap them\n            digits[i - 1], digits[i] = digits[i], digits[i - 1]\n            # Rearrange the digits after the first pair\n            return int(''.join(map(str, digits[:i] + sorted(digits[i:], reverse=True))))\n\n    # If no such pair was found, the number is already the largest\n    return n\n\n"}
{"task_id": "MBPP/408", "completion": "\n    result = []\n    for i in nums1:\n        for j in nums2:\n            result.append((i, j))\n    return result[:k]\n"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    snake_case = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', word)\n    camel_case = re.sub(r'(_)', ' ', snake_case).title()\n    return camel_case\n"}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n < len(list1):\n        return list1[n]\n    else:\n        return None\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_so_far, min_so_far = min_so_far, max_so_far\n\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        min_so_far = min(arr[i], min_so_far * arr[i])\n\n        max_product = max(max_product, max_so_far)\n        min_product = min(min_product, min_so_far)\n\n    return max_product\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(n - 1, foo(n - 1) + foo(n - 2) + foo(n - 3))\n"}
{"task_id": "MBPP/417", "completion": "\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] != common_element:\n            return common_element\n    return common_element\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = -1\n    max_sublist = None\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    total_sum = 0\n    for i in list1:\n        total_sum += i\n    total_sum *= len(list1)\n    print(total_sum)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n\n"}
{"task_id": "MBPP/422", "completion": "\n    return [i**3 for i in range(1, n+1)]\n"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    if gold[m][n] != -1:\n        return gold[m][n]\n    right = foo(gold, m, n-1)\n    down = foo(gold, m-1, n)\n    left = foo(gold, m, n+1)\n    up = foo(gold, m+1, n)\n    gold[m][n] = gold[m][n] + max(right, down, left, up)\n    return gold[m][n]\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n    match = pattern.match(dt)\n    if match:\n        return match.group(3) + \"-\" + match.group(1) + \"-\" + match.group(2)\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n\n        for i in range(gap, n):\n\n            temp = my_list[i]\n\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    tup1_elm = [x for x in test_tup1]\n    tup2_elm = [x for x in test_tup2]\n    return tup1_elm, tup2_elm\n"}
{"task_id": "MBPP/430", "completion": "\n    import math\n    x = (b**2 - 3*a*c) / (9*a)\n    return x\n"}
{"task_id": "MBPP/431", "completion": "\n    return any(item in list2 for item in list1)\n"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2 * height\n\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i >= number:\n            return True\n    return False\n"}
{"task_id": "MBPP/434", "completion": "\n    return re.findall(r'a+b', text)\n\ntext = \"abababababab\""}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join(ch for ch in str1 if ch % 2 == 0)\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = r\"\\badv\\b\"\n    matches = re.finditer(pattern, text)\n    return [match.start() for match in matches]\n\ntext = \"I am running fast and I am eating healthy.\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l**2\n"}
{"task_id": "MBPP/442", "completion": "\n    return [num for num in nums if num > 0]\n\nnums = array('i', [1, -2, 3, -4, 5])"}
{"task_id": "MBPP/443", "completion": "\n    max_neg = -float('inf')\n    for i in list1:\n        if i < max_neg:\n            max_neg = i\n    return max_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    return trimmed_list\n\n\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]\nK = 2"}
{"task_id": "MBPP/445", "completion": "\n    return tuple(a*b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/446", "completion": "\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return tup_count, lst_count\n"}
{"task_id": "MBPP/447", "completion": "\n    return [num ** 3 for num in nums]\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0:\n        return 0\n    else:\n        return n + foo(n - 1)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    if (x1 == x2 and y1 == y2 and x2 == x3 and y2 == y3):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/450", "completion": "\n    return [s[i:i+l] for s in str for i in range(len(s)-l+1)]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(' ', '', text1)\n\ntext1 = \"This is a test string\""}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + foo(n-1)\n"}
{"task_id": "MBPP/454", "completion": "\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n\ntext = \"I am a zebra\""}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum2 == 2:\n        return \"28 or 29 days\"\n    else:\n        return \"Invalid month number\"\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = float('inf')\n    min_lst = None\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n            min_lst = l\n    return min_lst\n\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n"}
{"task_id": "MBPP/461", "completion": "\n    return sum(1 for c in str if c.isupper())\n\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remaining = list1[:i] + list1[i+1:]\n            for subset in foo(remaining):\n                result.append([m] + subset)\n        return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return len(set(values)) == 1\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return foo(arr, low, mid - 1, n)\n\n    else:\n        return foo(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 1:\n        return arr[0]\n\n    max_product = [0]*n\n    min_product = [0]*n\n    result = [0]*n\n\n    max_product[0] = arr[0]\n    min_product[0] = arr[0]\n    result[0] = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product[i] = max(arr[i], max_product[i-1]*arr[i])\n            min_product[i] = min(arr[i], min_product[i-1]*arr[i])\n        else:\n            max_product[i] = max(arr[i], min_product[i-1]*arr[i])\n            min_product[i] = min(arr[i], max_product[i-1]*arr[i])\n\n        result[i] = max(result[i-1], max_product[i])\n\n    return result[-1]\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n\n    profit = 0\n    for i in range(k):\n        min_price = price[i]\n        max_profit_for_i = 0\n        for j in range(i, n):\n            min_price = min(min_price, price[j])\n            max_profit_for_i = max(max_profit_for_i, price[j] - min_price)\n        profit += max_profit_for_i\n\n    return profit\n\n"}
{"task_id": "MBPP/470", "completion": "\n    result = []\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            result.append(test_tup[i] + test_tup[j])\n    return tuple(result)\n\n"}
{"task_id": "MBPP/471", "completion": "\n    result = [0]*lens\n    carry = 0\n    for i in range(lens-1, -1, -1):\n        temp = arr[i] + carry\n        result[i] = temp % n\n        carry = temp // n\n    if carry != 0:\n        return [carry] + result\n    return result\n\n"}
{"task_id": "MBPP/472", "completion": "\n    for i in l:\n        if isinstance(i, (int, float)):\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return list(set1 & set2)\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n\n"}
{"task_id": "MBPP/476", "completion": "\n    if not nums:\n        return 0\n\n    nums.sort()\n    return sum(nums[:2])\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return 1 + foo(n // 10)\n\n"}
{"task_id": "MBPP/480", "completion": "\n    str1 = str1.lower()\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    max_count = 0\n    max_char = ''\n    for i in count:\n        if count[i] > max_count:\n            max_count = count[i]\n            max_char = i\n    return max_char\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum < 0:\n        return False\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n\n    include = foo(set, n-1, sum-set[n-1])\n    exclude = foo(set, n-1, sum)\n\n    return include or exclude\n\n"}
{"task_id": "MBPP/482", "completion": "\n    return re.findall(r'[A-Z]+[a-z]+', text)\n\ntext = \"Hello World, Python is fun!\""}
{"task_id": "MBPP/483", "completion": "\n    i = 1\n    while True:\n        if i % x == 0:\n            return i\n        i += 1\n\n"}
{"task_id": "MBPP/484", "completion": "\n    result = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result.append(t1)\n    for t2 in test_list2:\n        if t2 not in test_list1:\n            result.append(t2)\n    return result\n\n"}
{"task_id": "MBPP/485", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def generate_palindromes(n):\n        return [i for i in range(n, 0, -1) if is_palindrome(i)]\n\n    return max(generate_palindromes(n))\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if n < 0 or r < 0 or r > n:\n        return 0\n    else:\n        return binomial_coefficient(n, r) / binomial_coefficient(n, n - r)\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (3 * math.sqrt(5 * (5 + 2 * math.sqrt(5)))) / 2 * a**2\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    low = 0\n    high = len(item_list) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        guess = item_list[mid]\n\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n"}
{"task_id": "MBPP/493", "completion": "\n    dx = endx - startx\n    dy = endy - starty\n    distance = math.sqrt(dx * dx + dy * dy)\n    if distance > radius:\n        raise ValueError(\"The distance between start and end points is greater than the radius\")\n    angle = math.atan2(dy, dx)\n    x = startx + radius * math.cos(angle)\n    y = starty + radius * math.sin(angle)\n    hexagons = []\n    for i in range(6):\n        angle = (i * 2 * math.pi) / 6\n        x1 = x + radius * math.cos(angle)\n        y1 = y + radius * math.sin(angle)\n        hexagons.append((x1, y1))\n    return hexagons\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(test_tup, 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    # Remove lowercase substrings\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1\n"}
{"task_id": "MBPP/496", "completion": "\n    if n > len(nums):\n        return \"Invalid input\"\n\n    # Convert list to heap\n    hq = []\n    for i in nums:\n        hq.append(-i)\n    hq = list(set(hq))\n\n    # Remove the smallest n elements\n    for i in range(n):\n        hq.remove(min(hq))\n\n    # Convert back to list\n    result = [-i for i in hq]\n\n    return result\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n"}
{"task_id": "MBPP/498", "completion": "\n    if x < 0 or y < 0:\n        raise ValueError(\"x and y must be positive\")\n    if x > y:\n        raise ValueError(\"x must be less than or equal to y\")\n    return [i for i in range(x, y + 1) if i % 2 == 0]\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    if x % y == 0:\n        return y\n    else:\n        return foo(y, x % y)\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return sum(nums)\n"}
{"task_id": "MBPP/504", "completion": "\n    return sum(i**3 for i in range(1, n+1))\n"}
{"task_id": "MBPP/505", "completion": "\n    # Count the number of non-zero elements\n    count = sum(1 for x in A if x != 0)\n\n    # Fill the rest of the array with zeros\n    A[:count] = [0]*count\n\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    if n < k:\n        raise ValueError(\"n must be greater than or equal to k\")\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if l1 == l2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            if product < k:\n                count += 1\n    return count\n"}
