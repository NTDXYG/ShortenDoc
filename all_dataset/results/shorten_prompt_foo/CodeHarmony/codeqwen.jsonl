{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = ['sports', 'politics', 'technology', 'entertainment']\n\n    # Define rules for each category\n    rules = {\n        'sports': ['football', 'basketball', 'cricket', 'tennis'],\n        'politics': ['election', 'president', 'parliament', 'government'],\n        'technology': ['programming', 'coding', 'algorithm', 'data'],\n        'entertainment': ['movie', 'music', 'tv', 'comedy']\n    }\n\n    # Classify text\n    for category in categories:\n        for rule in rules[category]:\n            if rule in text.lower():\n                return category\n\n    # If text does not match any rule, return 'other'\n    return 'other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/6", "completion": "\n    if base < 2:\n        raise ValueError(\"Base must be greater than 1\")\n    if n < 2:\n        raise ValueError(\"Number must be greater than 1\")\n    if n == 2:\n        return 1\n    if base == 2:\n        return bin(n)[2:].count('1')\n    if base == 10:\n        return len(str(n)) - 1\n    if base == 16:\n        return len(hex(n)[2:]) - 1\n    if base == 8:\n        return len(oct(n)[2:]) - 1\n    if base == 3:\n        return bin(n)[2:].count('11')\n    if base == 4:\n        return bin(n)[2:].count('100')\n    if base == 5:\n        return bin(n)[2:].count('101')\n    if base == 6:\n        return bin(n)[2:].count('110')\n    if base == 7:\n        return bin(n)[2:].count('111')\n    if base == 9:\n        return bin(n)[2:].count('1001')\n    if base == 11:\n        return bin(n)[2:].count('1010')\n    if base == 12:\n        return bin(n)[2:].count('1011')\n    if base == 13:\n        return bin(n)[2:].count('1100')\n    if base == 14:\n        return bin(n)[2:].count('1101')\n    if base == 15:\n        return bin(n)[2:].count('1110')\n    if base == 16:\n        return bin(n)[2:].count('1111')\n    if base == 17:\n        return bin(n)[2:].count('10000')\n    if base == 18:\n        return bin(n)[2:].count('10001')\n    if base == 19:\n        return bin(n)[2:].count('10010')\n    if base == 20:\n        return bin(n)[2:].count('10011')\n    if"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string: {}\".format(e))\n\n    pprint.pprint(json_obj)\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set from the string to remove duplicates\n    unique_chars = set(string)\n    \n    # If the length of the set is the same as the length of the string, all characters are unique\n    if len(unique_chars) == len(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Normalize the text by converting it to lowercase\n    text = text.lower()\n\n    # Remove punctuation from the text\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers from the text\n    text = ''.join(e for e in text if e.isalpha())\n\n    # Remove extra spaces from the text\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(?:' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    sum_layers = []\n    for layer in array:\n        sum_layer = sum(layer)\n        sum_layers.append(sum_layer)\n    return sum_layers\n"}
{"task_id": "valid/16", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + foo(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse each list\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    lower = upper = num\n    while not is_palindrome(lower):\n        lower -= 1\n    while not is_palindrome(upper):\n        upper += 1\n    return lower if abs(num - lower) < abs(num - upper) else upper\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    return key not in json_data or json_data[key] != value\n"}
{"task_id": "valid/31", "completion": "\n    # Create a table with the specified number of columns\n    table = [['' for _ in range(num_columns)] for _ in range(len(buttons) // num_columns + 1)]\n\n    # Populate the table with the buttons\n    for i, button in enumerate(buttons):\n        row = i // num_columns\n        col = i % num_columns\n        table[row][col] = button\n\n    # Return the table as a string\n    return '\\n'.join(' | '.join(row) for row in table)\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet)):\n        if alphabet[i] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # your code here\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if array is empty\n    if not arr:\n        return 0\n    \n    # Initialize sum\n    total = 0\n    \n    # Iterate over array\n    for num in arr:\n        # Check if element is a number\n        if isinstance(num, (int, float)):\n            total += num\n        else:\n            raise ValueError(\"Array contains non-numerical value\")\n    \n    return total\n"}
{"task_id": "valid/37", "completion": "\n    # load the JSON data\n    data = json.loads(json_data)\n\n    # extract the neighborhood names\n    neighborhood_names = [neighborhood[\"name\"] for neighborhood in data]\n\n    # sort the neighborhood names in alphabetical order\n    neighborhood_names.sort()\n\n    return neighborhood_names\n\n"}
{"task_id": "valid/38", "completion": "\n    # Task 1: Find the sum of all elements in the array\n    sum_arr = sum(arr)\n    print(\"Sum of all elements in the array:\", sum_arr)\n\n    # Task 2: Find the product of all elements in the array\n    product_arr = 1\n    for i in arr:\n        product_arr *= i\n    print(\"Product of all elements in the array:\", product_arr)\n\n    # Task 3: Find the maximum element in the array\n    max_arr = max(arr)\n    print(\"Maximum element in the array:\", max_arr)\n\n    # Task 4: Find the minimum element in the array\n    min_arr = min(arr)\n    print(\"Minimum element in the array:\", min_arr)\n\n    # Task 5: Find the average of all elements in the array\n    avg_arr = sum_arr / n\n    print(\"Average of all elements in the array:\", avg_arr)\n\n    # Task 6: Find the median of all elements in the array\n    arr.sort()\n    if n % 2 == 0:\n        median_arr = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median_arr = arr[n//2]\n    print(\"Median of all elements in the array:\", median_arr)\n\n    # Task 7: Find the mode of all elements in the array\n    from collections import Counter\n    count = Counter(arr)\n    max_count = max(list(count.values()))\n    mode_arr = [num for num, freq in count.items() if freq == max_count]\n    print(\"Mode of all elements in the array:\", mode_arr)\n\n    # Task 8: Find the range of all elements in the array\n    range_arr = max_arr - min_arr\n    print(\"Range of all elements in the array:\", range_arr)\n\n    # Task 9: Find the standard deviation of all elements in the array\n    import math\n    avg_arr = sum_arr / n\n    variance_arr = sum((x - avg_arr) ** 2 for x in arr) / n\n    "}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if total number of votes is at least 100\n    if sum(votes) < 100:\n        return \"Total number of votes must be at least 100.\"\n\n    # Create a dictionary to store the vote counts\n    vote_counts = {}\n\n    # Iterate through the list of votes\n    for vote in votes:\n        # Check if candidate name is a string consisting of only uppercase letters with a maximum length of 10 characters\n        if not isinstance(vote[0], str) or not vote[0].isupper() or len(vote[0]) > 10:\n            return \"Candidate name must be a string consisting of only uppercase letters with a maximum length of 10 characters.\"\n\n        # Check if number of votes is a positive integer not exceeding 1000\n        if not isinstance(vote[1], int) or vote[1] < 1 or vote[1] > 1000:\n            return \"Number of votes must be a positive integer not exceeding 1000.\"\n\n        # Add the vote count to the dictionary\n        if vote[0] in vote_counts:\n            vote_counts[vote[0]] += vote[1]\n        else:\n            vote_counts[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes each candidate received\n    total_votes = sum(vote_counts.values())\n    percentages = {candidate: round((vote_counts[candidate] / total_votes) * 100, 2) for candidate in vote_counts}\n\n    # Return the dictionary of vote counts and percentages\n    return vote_counts, percentages\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_obj = datetime.strptime(date_string, '%d-%b-%Y')\n        return date_obj.strftime('%B %d, %Y')\n    except ValueError:\n        try:\n            date_obj = datetime.strptime(date_string, '%d-%m-%Y')\n            return date_obj.strftime('%B %d, %Y')\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MMM-YYYY or DD-MM-YYYY.\")\n"}
{"task_id": "valid/42", "completion": "\n    # Check if the new file name has a valid extension\n    if not newname.endswith(allowed_type):\n        print(\"Invalid file extension. Please use a file with a valid extension.\")\n        return False\n    \n    # Rename the file\n    try:\n        os.rename(oldname, newname)\n        print(\"File renamed successfully.\")\n        return True\n    except FileNotFoundError:\n        print(\"File not found. Please check the old file name.\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, tuple):\n            result.append(foo(i))\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                result.append(i)\n        elif isinstance(i, (int, float)) and i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.add_scalar('acc', accs, generation)\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    count = 0\n    languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            languages.add(parts[1])\n    return len(languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for sublist in arr:\n        for num in sublist:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return result\n"}
{"task_id": "valid/50", "completion": "\n    # Your task is to implement a function that takes a URL as input and returns the corresponding view function name based on the URL pattern matching.\n    # The URL patterns are defined as follows:\n    # 1. The first pattern matches URLs starting with '/videos/' followed by a video ID (a sequence of digits) and ends with '/'. The view function associated with this pattern is 'video_detail'.\n    # 2. The second pattern matches any URL that does not match the first pattern. The view function associated with this pattern is 'video_list'.\n    # Your function should return the name of the view function associated with the given URL.\n    # Example:\n    # >>> foo('/videos/123/')\n    # 'video_detail'\n    # >>> foo('/about/')\n    # 'video_list'\n    pass\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    return \"Hello, World!\"\n"}
{"task_id": "valid/53", "completion": "\n    # Your code here\n"}
{"task_id": "valid/54", "completion": "\n    total = 0\n    for dict_list in list_of_dicts:\n        for dict_item in dict_list:\n            for key in dict_item:\n                if key.startswith('price_'):\n                    total += dict_item[key]\n    return total\n"}
{"task_id": "valid/55", "completion": "\n    # Find the intersection between the two lists\n    intersection = [value for value in list1 if value in list2]\n    # Remove common elements from the second list\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both arguments must be positive integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both arguments must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return foo(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    # Check if the length of the list is equal to the length of the set of the list\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return foo(array, target, mid + 1, end)\n    else:\n        return foo(array, target, start, mid - 1)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    # Create an empty list to store the results\n    result = []\n\n    # Iterate over the list\n    for item in list:\n        # Check if the item is a string\n        if isinstance(item, str):\n            # If it is, add it to the result list\n            result.append(item)\n\n    # Return the result list\n    return result\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\ntarget = \"banana\""}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, World!\"\n    return f\"{phrase}\"\n"}
{"task_id": "valid/70", "completion": "\n    def bar(strings):\n        result = []\n        for string in strings:\n            if re.match(\"^[a-zA-Z0-9\\s]*$\", string):\n                result.append(string.upper())\n        return result\n    return bar(strings)\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i\n            i += 4\n            while i < len(html_code) and html_code[i:i+5] != '</b>':\n                i += 1\n            if i < len(html_code):\n                bold_text.append(html_code[start+4:i])\n                i += 5\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the vending machine items and their prices\n    vending_machine = {\n        \"Chips\": 1.50,\n        \"Cookies\": 2.00,\n        \"Chocolate\": 1.25\n    }\n\n    # Check if the selected item is in the vending machine\n    if item in vending_machine:\n        # Calculate the change to return\n        change = money_inserted - vending_machine[item]\n        if change >= 0:\n            print(f\"Here is your {item} and your change is ${change:.2f}\")\n            # Update the stock of the item purchased\n            vending_machine[item] -= 1\n        else:\n            print(\"Insufficient funds. Please insert more money.\")\n    else:\n        print(\"Item not available. Please select a valid item.\")\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n    plt.stem(vector)\n    plt.show()\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    a = 10\n    \n    # Validate the variable\n    if isinstance(a, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n        \n    # Return the variable\n    return a\n"}
{"task_id": "valid/79", "completion": "\n    return ''.join(random.sample(word, len(word)))\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern\n    pattern = r'\\b\\w+\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    tokens = re.findall(pattern, text)\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    # Your code here\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = max(word_count.values())\n    for word, count in word_count.items():\n        if count == max_count:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if not numbers:\n        return 0, 0\n    return sum(numbers) / len(numbers), sum(numbers)\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty.\")\n    \n    min_val = max_val = time_series[0]\n    \n    for val in time_series:\n        if not isinstance(val, (int, float)):\n            raise ValueError(\"The time series contains non-numerical values.\")\n        \n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n    \n    return (min_val, max_val)\n"}
{"task_id": "valid/88", "completion": "\n    encyclopedia = {\n        \"Artificial Intelligence\": [\"Machine Learning\", \"Deep Learning\", \"Neural Networks\"],\n        \"Machine Learning\": [\"Supervised Learning\", \"Unsupervised Learning\", \"Reinforcement Learning\"],\n        \"Deep Learning\": [\"Convolutional Neural Networks\", \"Recurrent Neural Networks\", \"Generative Adversarial Networks\"],\n        \"Neural Networks\": [\"Perceptron\", \"Multi-Layer Perceptron\", \"Hidden Layer\"]\n    }\n    \n    # Create a dictionary to store the number of related articles for each entry\n    related_articles = {}\n    \n    # Iterate through each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Count the number of related articles for each entry\n        related_articles[entry] = len(encyclopedia[entry])\n    \n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n"}
{"task_id": "valid/92", "completion": "\n    # Initialize the row and column pointers\n    row, col = 0, len(matrix[0]) - 1\n\n    # Traverse the matrix from top-right corner\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n\n    # If the target is not found, return False\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    total = 0\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return total / count\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return abs(foo(-n))\n    elif n == 0:\n        return \"0\"\n    else:\n        return foo(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Implement ternary operator to determine letter grade\n    letter_grade = \"A\" if numerical_grade >= 90 else \"B\" if numerical_grade >= 80 else \"C\" if numerical_grade >= 70 else \"D\" if numerical_grade >= 60 else \"F\"\n\n    # Calculate GPA\n    if letter_grade == \"A\":\n        gpa = 4.0\n    elif letter_grade == \"B\":\n        gpa = 3.0\n    elif letter_grade == \"C\":\n        gpa = 2.0\n    elif letter_grade == \"D\":\n        gpa = 1.0\n    else:\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total_price = 0\n    for item in listing:\n        total_price += item['price']\n    return total_price\n    "}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(1 for char in palindrome if char in vowels)\n        palindrome_dict[palindrome] = vowel_count\n    return palindrome_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Your code here\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store the elements of the array\n    num_set = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in num_set:\n            # If it does, return True\n            return True\n        # If it doesn't, add the current number to the set\n        num_set.add(num)\n\n    # If no pair of numbers sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for package, version in dependencies:\n        if package not in latest_versions or version > latest_versions[package]:\n            latest_versions[package] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/108", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/109", "completion": "\n    for char in text:\n        if ord(char) > 127:\n            return True\n    return False\n"}
{"task_id": "valid/110", "completion": "\n    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuation:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    return min_values\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    if current_num == 0:\n        current_num = 2\n    if current_num <= n:\n        print(\"Thank you\")\n        foo(n, current_num + 2)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    return all(digit == num % base for digit in range(base))\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return foo(s[1:])\n    else:\n        return s[0] + foo(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: app_name [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option}: {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    # Create a dictionary to store the counts\n    counts = {}\n    \n    # Iterate over the list and count the occurrences of each value\n    for value in Val:\n        if value in counts:\n            counts[value] += 1\n        else:\n            counts[value] = 1\n    \n    # Print the counts in a table\n    print(\"Value\\tCount\")\n    for value, count in counts.items():\n        print(f\"{value}\\t{count}\")\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence) - len(subsequence) + 1):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd = 0\n    for num in input_list:\n        if num % 2 != 0:\n            sum_odd += num\n    return sum_odd\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n    return count\n"}
{"task_id": "valid/126", "completion": "\n    # calculate the number of electrons based on energy values\n    n_electrons = 0\n    for energy in grid_energies:\n        if energy < 0:\n            n_electrons += 1\n        else:\n            n_electrons -= 1\n    \n    # adjust the number of electrons based on doping levels\n    if dope > 0:\n        n_electrons += dope\n    elif dope < 0:\n        n_electrons -= abs(dope)\n    \n    # calculate the density of states based on the number of electrons\n    dos = [0] * dos_grid_size\n    for i in range(dos_grid_size):\n        dos[i] = n_electrons / dos_grid_size\n    \n    return n_electrons, dos\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    result = []\n    while arr:\n        result.append(arr.pop(0))\n        if arr:\n            result.append(arr.pop())\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = dict(color_list)\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    new_lst = []\n    for i in lst:\n        if i not in new_lst:\n            new_lst.append(i)\n        if len(new_lst) == 3:\n            break\n    return new_lst\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    if len(lst) == 0:\n        return [[]]\n    else:\n        sublists = foo(lst[1:])\n        return sublists + [lst[:1] + sublist for sublist in sublists]\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    # calculate the forecast period\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    # Sort the array of dictionaries by the value of the attribute\n    array.sort(key=lambda x: x[attr])\n    return array\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = list(n_str)\n    carry = 0\n    for i in range(len(n) - 1, -1, -1):\n        d = int(n[i]) * 2 + carry\n        n[i] = str(d % 10)\n        carry = d // 10\n    if carry:\n        n.insert(0, str(carry))\n    return ''.join(n)\n"}
{"task_id": "valid/141", "completion": "\n    import rospy\n    from reflex_control.srv import SetPreset, SetPresetRequest\n    rospy.init_node('reflex_control_node')\n    set_preset_client = rospy.ServiceProxy('set_preset', SetPreset)\n    request = SetPresetRequest()\n    request.preset_name = preset_name\n    response = set_preset_client(request)\n    return response.success\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [element for element in list1 if element in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n\n        if allow_multiple_answer is True, users can select multiple answers for a question.\n        \"\"\"\n    else:\n        \"\"\"\n        if allow_multiple_answer is False, users can only select one answer for a question.\n        \"\"\"\n    if zoom_level == 1:\n        \"\"\"\n        if zoom_level is 1, the quiz system will display the questions and answers in a simple format.\n        \"\"\"\n    elif zoom_level == 2:\n        \"\"\"\n        if zoom_level is 2, the quiz system will display the questions and answers in a more detailed format.\n        \"\"\"\n    else:\n        \"\"\"\n        if zoom_level is not 1 or 2, the quiz system will display the questions and answers in a default format.\n        \"\"\"\n    \"\"\"\n    The function foo takes two parameters: allow_multiple_answer (a boolean indicating whether users can select multiple answers for a question) and zoom_level (an integer indicating the level of detail to be displayed in the quiz system). The function then uses these parameters to determine the behavior of the quiz system.\n    \"\"\"\n    pass\n    \"\"\"\n    The function foo is currently empty, but it can be extended to include additional functionality based on the values of allow_multiple_answer and zoom_level.\n    \"\"\"\n    pass\n    \"\"\"\n    The function foo is currently empty, but it can be extended to include additional functionality based on the values of allow_multiple_answer and zoom_level.\n    \"\"\"\n    pass\n    \"\"\"\n    The function foo is currently empty, but it can be extended to include additional functionality based on the values of allow_multiple_answer and zoom_level.\n    \"\"\"\n    pass\n    \"\"\"\n    The function foo is currently empty, but it can be extended to include additional functionality based on the values of allow_multiple_answer and zoom_level.\n    \"\"\"\n    pass\n    \"\"\"\n    The function foo is currently empty, but it can be extended to include additional functionality based on the values of allow_multiple_answer and zoom_level.\n    \"\"\"\n    pass\n    \"\"\"\n    The function foo is currently empty, but it can be extended to include additional functionality based on the values of allow_multiple_answer and zoom_level"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    modified_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            modified_sentence += char\n    return modified_sentence\n"}
{"task_id": "valid/146", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/147", "completion": "\n    # Your code here\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    def is_pythagorean(a, b, c):\n        return a**2 + b**2 == c**2\n\n    def is_right_angled(a, b, c):\n        return gcd(a, b) == 1 and gcd(b, c) == 1 and gcd(a, c) == 1\n\n    def is_isosceles(a, b, c):\n        return a == b or b == c or a == c\n\n    def is_equilateral(a, b, c):\n        return a == b == c\n\n    def is_scalene(a, b, c):\n        return a != b and b != c and a != c\n\n    def is_acute(a, b, c):\n        return a**2 + b**2 > c**2\n\n    def is_obtuse(a, b, c):\n        return a**2 + b**2 < c**2\n\n    def is_isosceles_right_angled(a, b, c):\n        return is_isosceles(a, b, c) and is_right_angled(a, b, c)\n\n    def is_scalene_right_angled(a, b, c):\n        return is_scalene(a, b, c) and is_right_angled(a, b, c)\n\n    def is_isosceles_obtuse(a, b, c):\n        return is_isosceles(a, b, c) and is_obtuse(a, b, c)\n\n    def is_scalene_obtuse(a, b, c):\n        return is_scalene(a, b, c) and is_obtuse(a, b, c)\n\n    def is_isosceles_acute(a, b, c):\n        return is_isosceles(a, b, c) and is_acute(a, b, c)\n\n    def is_scalene_acute(a, b, c):\n        return is_scalene(a, b, c) and is_acute(a, b, c)\n\n    def is_isosceles_acute_right_angled("}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
