{"task_id": "valid/0", "completion": "\n    if text.startswith(\"Hello\"):\n        return \"Greeting\"\n    elif text.startswith(\"Good\"):\n        return \"Salutation\"\n    elif text.startswith(\"Excuse\"):\n        return \"Excuse\"\n    elif text.startswith(\"Thank\"):\n        return \"Thank\"\n    else:\n        return \"Other\"\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        print(\"Invalid JSON string\")\n        return None\n\njson_string = '[{\"name\": \"Alice\", \"age\": 25}, {\"name\": \"Bob\", \"age\": 30}]'"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return n % 5 == 0 and sum_of_digits(n) % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n < base:\n        return 0\n    else:\n        return 1 + foo(n // base, base)\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        data = json.loads(json_str)\n        pprint.pprint(data)\n    except ValueError:\n        print(\"Provided json_str not valid JSON string.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    # Your code here\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date_obj = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date_obj + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    # Convert to lower case\n    text = text.lower()\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return re.search(r'('+word1+'|'+word2+')', text) is not None\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n"}
{"task_id": "valid/16", "completion": "\n    comment = comment.strip()\n    if not comment.startswith(':') or not comment.endswith(':'):\n        raise ValueError('Comment does not start or end with a colon.')\n\n    lines = comment[1:-1].split(':')\n    values = [line.strip() for line in lines]\n\n    if len(values) != 4:\n        raise ValueError('Comment does not contain exactly four values.')\n\n    tabstop, expandtab, shiftwidth, softtabstop = map(int, values)\n\n    return {'tabstop': tabstop, 'expandtab': expandtab, 'shiftwidth': shiftwidth, 'softtabstop': softtabstop}\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + foo(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    result = sorted(list1 + list2)\n    return result\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z*z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    def convert_to_dict(struct):\n        if isinstance(struct, dict):\n            return {k: convert_to_dict(v) for k, v in struct.items()}\n        elif isinstance(struct, list):\n            return [convert_to_dict(v) for v in struct]\n        else:\n            return struct\n\n    return convert_to_dict(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def previous_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if num == 0 or num == 1:\n        return num\n\n    if is_palindrome(num):\n        return num\n\n    if num % 10 != 0:\n        num = previous_palindrome(num)\n    else:\n        num = previous_palindrome(num // 10)\n        if (num % 100) != 0:\n            num = previous_palindrome(num // 100)\n            if (num % 1000) != 0:\n                num = previous_palindrome(num // 1000)\n                if (num % 10000) != 0:\n                    num = previous_palindrome(num // 10000)\n                    if (num % 100000) != 0:\n                        num = previous_palindrome(num // 100000)\n                        if (num % 1000000) != 0:\n                            num = previous_palindrome(num // 1000000)\n                            if (num % 10000000) != 0:\n                                num = previous_palindrome(num // 10000000)\n                                if (num % 100000000) != 0:\n                                    num = previous_palindrome(num // 100000000)\n                                    if (num % 1000000000) != 0:\n                                        num = previous_palindrome(num // 1000000000)\n                                        if (num % 10000000000)"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if matrix else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n\n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha() or c.isspace())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        return False\n\n    return key not in data\n"}
{"task_id": "valid/31", "completion": "\n    def button_action(button):\n        print(f\"Button {button} clicked\")\n\n    def create_table(buttons, num_columns):\n        table = []\n        for i in range(num_columns):\n            table.append([])\n        for i in range(len(buttons)):\n            for j in range(num_columns):\n                table[j].append(buttons[i])\n        return table\n\n    return create_table(buttons, num_columns)\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s)):\n        if s[i] != alphabet[i]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    nums = re.findall(r'\\d+', ts)\n    return sum(map(int, nums))\n"}
{"task_id": "valid/35", "completion": "\n    return [word.upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not all(isinstance(i, (int, float)) for i in arr):\n        return \"Error: Array should only contain numerical values\"\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    # parse the JSON data\n    data = json.loads(json_data)\n\n    # extract the neighborhood names\n    neighborhoods = [neighborhood['name'] for neighborhood in data]\n\n    # sort the neighborhoods\n    sorted_neighborhoods = sorted(neighborhoods)\n\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # 1. Create a list of n random numbers between 1 and 100.\n    import random\n    arr = [random.randint(1, 100) for _ in range(n)]\n    print(\"List of n random numbers: \", arr)\n\n    # 2. Find the sum of the list.\n    sum_arr = sum(arr)\n    print(\"Sum of the list: \", sum_arr)\n\n    # 3. Find the average of the list.\n    avg_arr = sum_arr / n\n    print(\"Average of the list: \", avg_arr)\n\n    # 4. Find the maximum number in the list.\n    max_arr = max(arr)\n    print(\"Maximum number in the list: \", max_arr)\n\n    # 5. Find the minimum number in the list.\n    min_arr = min(arr)\n    print(\"Minimum number in the list: \", min_arr)\n\n    # 6. Find the number of even numbers in the list.\n    count_even = len([num for num in arr if num % 2 == 0])\n    print(\"Number of even numbers in the list: \", count_even)\n\n    # 7. Find the number of odd numbers in the list.\n    count_odd = len([num for num in arr if num % 2 != 0])\n    print(\"Number of odd numbers in the list: \", count_odd)\n\n    # 8. Find the number of prime numbers in the list.\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count_prime = len([num for num in arr if is_prime(num)])\n    print(\"Number of prime numbers in the list: \", count_prime)\n\n    # 9. Find the number of composite numbers in the list.\n    count_composite = len([num for num in arr if not is_prime(num)])\n    print(\"Number of composite numbers in the list: \", count_composite)\n\n    # 1"}
{"task_id": "valid/39", "completion": "\n\n        Check if the string is balanced.\n        \"\"\"\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    if not is_balanced(p):\n        return False\n\n    stack = []\n    for ch in p:\n        if ch == '(' or ch == ')':\n            stack.append(ch)\n        elif ch == '+' or '-' or '*' or '/':\n            if len(stack) < 2 or stack[-1] not in '+-*/' or stack[-2] in '+-*/':\n                return False\n            stack.append(ch)\n        else:\n            return False\n\n    return True\n\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the total number of votes is less than 100\n    if sum(votes[i][1] for i in range(len(votes))) < 100:\n        return \"Error: Total number of votes must be at least 100.\"\n\n    # Create a dictionary to store the vote counts\n    vote_counts = {}\n\n    # Count the votes\n    for vote in votes:\n        if vote[0] in vote_counts:\n            vote_counts[vote[0]] += vote[1]\n        else:\n            vote_counts[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes\n    for candidate in vote_counts:\n        vote_counts[candidate] = round(vote_counts[candidate] / sum(vote_counts.values()) * 100, 2)\n\n    # Sort the votes by vote count in descending order\n    vote_counts = dict(sorted(vote_counts.items(), key=lambda item: item[1], reverse=True))\n\n    return vote_counts\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, '%d-%m-%Y')\n        return date_object.strftime('%B %d, %Y')\n    except ValueError:\n        return \"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\"\n"}
{"task_id": "valid/42", "completion": "\n\n        Check if the file name has a valid file extension based on the allowed_type list.\n        \"\"\"\n        return file_name.split('.')[-1] in allowed_type\n\n    def is_file_exist(newname):\n        \"\"\"\n        Check if the new file name already exist.\n        \"\"\"\n        return os.path.exists(newname)\n\n    if not is_allowed_extension(newname):\n        print(f\"The new file name {newname} has an invalid file extension. Please choose a valid file extension.\")\n        return\n\n    if is_file_exist(newname):\n        print(f\"The file {newname} already exist. Please choose a different name.\")\n        return\n\n    os.rename(oldname, newname)\n    print(f\"The file {oldname} has been renamed to {newname} successfully.\")\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def is_string_numeric_and_even(n):\n        return isinstance(n, str) and is_numeric(int(n)) and is_even(int(n))\n\n    def remove_uneven_elements(lst):\n        return [i for i in lst if is_numeric(i) and not is_even(int(i))]\n\n    def remove_uneven_elements_nested(lst):\n        new_lst = []\n        for i in lst:\n            if isinstance(i, tuple):\n                new_lst.append(remove_uneven_elements_nested(i))\n            else:\n                new_lst.append(i)\n        return new_lst\n\n    return remove_uneven_elements_nested(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + [(generation, accs)]\n    # return histogram_data\n\n    # The commented-out line is the one that adds the accuracy data to the histogram.\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as input and return the histogram data with the accuracy values added.\n\n    # The function should take the accuracy data and generation number as"}
{"task_id": "valid/47", "completion": "\n    if len(re.findall(r'^[a-zA-Z0-9]{5}$', string)) > 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 2:\n            unique_languages.add(parts[0])\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return list(result.values())\n\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('', views.index, name='index'),\n        path('<int:video_id>/', views.video_detail, name='video_detail'),\n    ]\n\n    if re.match(r'^https?://', url):\n        return url\n    else:\n        return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n"}
{"task_id": "valid/52", "completion": "\n    return \"Hello, World!\"\n"}
{"task_id": "valid/53", "completion": "\n    return s[::-1]\n"}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += dictionary[key]\n    return total_sum\n"}
{"task_id": "valid/55", "completion": "\n    return [i for i in list1 if i in list2]\n\n"}
{"task_id": "valid/56", "completion": "\n    def api_advisor_view(request):\n        if request_method == 'GET':\n            return api_advisor_view_get(request)\n        elif request_method == 'POST':\n            return api_advisor_view_post(request)\n        else:\n            return \"Invalid request method\"\n\n    def api_advisor_view_get(request):\n        # handle GET request\n        pass\n\n    def api_advisor_view_post(request):\n        # handle POST request\n        pass\n\n    return api_advisor_view\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both arguments must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both arguments must be positive integers.\")\n\n    if a == b:\n        return a\n    elif a > b:\n        return foo(a-b, b)\n    else:\n        return foo(a, b-a)\n\n"}
{"task_id": "valid/58", "completion": "\n\n        This function returns the type of the file based on its extension.\n        \"\"\"\n        file_name, file_extension = os.path.splitext(file_path)\n        if file_extension == '.txt':\n            return 'text'\n        elif file_extension == '.json':\n            return 'json'\n        elif file_extension == '.yaml' or file_extension == '.yml':\n            return 'yaml'\n        elif file_extension == '.ini':\n            return 'ini'\n        else:\n            return 'unknown'\n\n    file_types = defaultdict(list)\n\n    for file_path in file_paths:\n        file_type = get_file_type(file_path)\n        file_types[file_type].append(file_path)\n\n    return file_types\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    if timeStart > timeEnd:\n        return timeStart - timeEnd\n    else:\n        return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return foo(array, target, start, mid - 1)\n    else:\n        return foo(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == len(colors) - 1:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i for i in list if i % 2 == 0]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}\nfoo(fruits)\n"}
{"task_id": "valid/69", "completion": "\n    return f\"Hello, {name}!\"\n\n\nname = input(\"Enter your name: \")"}
{"task_id": "valid/70", "completion": "\n    def is_special(s):\n        return not s.isalnum() and not s.isspace()\n\n    result = []\n    for s in strings:\n        if is_special(s):\n            continue\n        result.append(s.capitalize())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return string.index(char)\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    result = []\n    current_word = \"\"\n    in_bold = False\n\n    for char in html_code:\n        if char == '<':\n            in_bold = False\n            current_word = \"\"\n        elif char == '>':\n            if in_bold:\n                result.append(current_word)\n            in_bold = False\n            current_word = \"\"\n        elif in_bold:\n            current_word += char\n\n    return result\n\n"}
{"task_id": "valid/73", "completion": "\n    # Define the list of items and their prices\n    items = {\n        \"item1\": 1.00,\n        \"item2\": 0.75,\n        \"item3\": 0.50,\n        \"item4\": 0.25,\n    }\n\n    # Calculate the total cost of the items\n    total_cost = sum(items[item] for item in items if items[item] <= money_inserted)\n\n    # Calculate the change to be returned\n    change = money_inserted - total_cost\n\n    # Update the stock of the item purchased\n    items[item] -= 1\n\n    return change, items\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n\n    def stem_plot(vector):\n        plt.stem(range(len(vector)), vector)\n        plt.show()\n\n    def non_zero_entries(vector):\n        return [i for i, x in enumerate(vector) if x != 0]\n\n    stem_plot(vector)\n    return non_zero_entries(vector)\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    x = 5\n\n    # Validate the variable\n    if x == 5:\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    return ''.join(random.sample(word, len(word)))\n"}
{"task_id": "valid/80", "completion": "\n    def is_int(n):\n        return isinstance(n, int)\n\n    def is_float(n):\n        return isinstance(n, float)\n\n    def is_str(n):\n        return isinstance(n, str)\n\n    def is_list(n):\n        return isinstance(n, list)\n\n    def is_dict(n):\n        return isinstance(n, dict)\n\n    def is_tuple(n):\n        return isinstance(n, tuple)\n\n    def is_set(n):\n        return isinstance(n, set)\n\n    def is_bool(n):\n        return isinstance(n, bool)\n\n    def is_none(n):\n        return n is None\n\n    def is_function(n):\n        return callable(n)\n\n    def is_class(n):\n        return isinstance(n, type)\n\n    def is_instance(n):\n        return isinstance(n, type)\n\n    def is_union(n):\n        return isinstance(n, type)\n\n    def is_type(n):\n        return isinstance(n, type)\n\n    def is_module(n):\n        return isinstance(n, type)\n\n    def is_dataframe(n):\n        return isinstance(n, pd.DataFrame)\n\n    def is_series(n):\n        return isinstance(n, pd.Series)\n\n    def is_pandas_object(n):\n        return isinstance(n, (pd.DataFrame, pd.Series))\n\n    def is_numpy_array(n):\n        return isinstance(n, np.ndarray)\n\n    def is_pandas_object(n):\n        return isinstance(n, (pd.DataFrame, pd.Series, np.ndarray))\n\n    if is_int(element):\n        return \"int\"\n    elif is_float(element):\n        return \"float\"\n    elif is_str(element):\n        return \"str\"\n    elif is_list(element):\n        return \"list\"\n    elif is_dict(element):\n        return"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i < len(arr)-1 and arr[i] == arr[i+1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    return re.findall(r'\\b\\w+\\b', text)\n\ntext = \"Hello, this is a test text. It contains several words.\""}
{"task_id": "valid/83", "completion": "\n    divisible_by_3_and_7 = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    avg = sum(divisible_by_3_and_7) / len(divisible_by_3_and_7)\n    max_val = max(divisible_by_3_and_7)\n    min_val = min(divisible_by_3_and_7)\n    num_occurrences = {n: divisible_by_3_and_7.count(n) for n in set(divisible_by_3_and_7)}\n\n    print(f\"Average: {avg}\")\n    print(f\"Max: {max_val}\")\n    print(f\"Min: {min_val}\")\n    print(\"Number of occurrences:\")\n    for k, v in num_occurrences.items():\n        print(f\"{k}: {v}\")\n\n"}
{"task_id": "valid/84", "completion": "\n    # Convert the sentence to lower case\n    sentence = sentence.lower()\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Count the frequency of each word\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    max_freq_word = max(word_freq, key=word_freq.get)\n\n    return max_freq_word\n"}
{"task_id": "valid/85", "completion": "\n    e = 2.0\n    for i in range(1, 10000):\n        e = 1 + (1 / (i * (2 * i + 1)))\n    return round(e, decimal_places)\n"}
{"task_id": "valid/86", "completion": "\n    def average(numbers):\n        return sum(numbers) / len(numbers)\n\n    return average(numbers)\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    try:\n        return min(time_series), max(time_series)\n    except TypeError:\n        raise ValueError(\"Time series contains non-numerical values\")\n"}
{"task_id": "valid/88", "completion": "\n    # Initialize a dictionary to store the number of related articles for each entry\n    related_articles_count = {}\n\n    # Iterate over each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Count the number of related articles for the current entry\n        related_articles_count[entry] = count_related_articles(entry)\n\n    # Return the dictionary of related articles counts\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return any(item in list2 for item in list1)\n\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    m = len(matrix)\n    n = len(matrix[0])\n\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == target:\n                return (i, j)\n\n    return None\n"}
{"task_id": "valid/93", "completion": "\n    sum = 0\n    count = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum += i\n            count += 1\n    return sum / count\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n - 1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\nfoo_partial = partial(foo, [1, 2, 3, 4, 5])\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n    pass\n\n"}
{"task_id": "valid/98", "completion": "\n    def to_ternary(n):\n        if n < 0:\n            return '-' + to_ternary(abs(n))\n        if n < 3:\n            return str(n)\n        else:\n            return to_ternary(n // 3) + str(n % 3)\n\n    return to_ternary(n)\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(name.split('.')[-1] for name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Minor\"\n    elif age < 21:\n        return \"Young adult\"\n    elif age < 50:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade < 0 or numerical_grade > 100:\n        return \"Invalid numerical grade\"\n\n    letter_grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n\n    gpa = numerical_grade / 10\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total_price = 0\n    for item in listing:\n        total_price += item['price']\n    return total_price\n"}
{"task_id": "valid/103", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    palindrome_dict = {}\n    for word in palindrome_tuples:\n        count = 0\n        for char in word:\n            if char.lower() in vowels:\n                count += 1\n        palindrome_dict[word] = count\n    return palindrome_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    if s.isupper():\n        return s.lower()\n    elif s.islower():\n        return s.upper()\n    elif s.istitle():\n        return s.capitalize()\n    else:\n        return \"Invalid string\"\n"}
{"task_id": "valid/105", "completion": "\n    if not arr:\n        return False\n\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    def get_latest_version(package_name, versions):\n        latest_version = None\n        for version in versions:\n            if version[0] == package_name:\n                if latest_version is None or version[1] > latest_version[1]:\n                    latest_version = version\n        return latest_version\n\n    def get_latest_versions(dependencies):\n        latest_versions = {}\n        for dependency in dependencies:\n            latest_versions[dependency[0]] = get_latest_version(dependency[0], dependency[1])\n        return latest_versions\n\n    return get_latest_versions(dependencies)\n\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the causes of death\n    causes_dict = {}\n\n    # Loop through the list of causes\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" result\")\n\n        # If the action is already in the dictionary, append the result to the list of results\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        # If the action is not in the dictionary, create a new list with the result\n        else:\n            causes_dict[action] = [result]\n\n    return causes_dict\n\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    return string.punctuation.replace(string.punctuation, \"\")\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(\"TypeError: One of the elements in the list is not a number.\")\n            continue\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        print(min(grid[i]))\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    if n == 0:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n\n    return foo(n - 1, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            return count\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\nfoo_partial = partial(foo, base=10)\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    else:\n        first, *rest = s\n        if first in vowels:\n            return first + foo(rest)\n        else:\n            return first + \"*\" + foo(rest)\n"}
{"task_id": "valid/117", "completion": "\n    def help_message(option_list):\n        help_string = \"Usage: [options]\\n\\n\"\n        for option in option_list:\n            help_string += \"{0}: {1}\\n\".format(option[0], option[1])\n        return help_string\n\n    print(help_message(options))\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize dictionary\n    count_dict = {}\n\n    # Loop through the list\n    for i in Val:\n        # If the value is in the dictionary, increment its count\n        if i in count_dict:\n            count_dict[i] += 1\n        # If the value is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[i] = 1\n\n    # Return the dictionary\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) <= vowels\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence) - len(subsequence) + 1):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    # Your code here\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    count = 0\n    for char in string.lower():\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate the number of electrons based on the given energy values\n    num_electrons = calculate_electrons(grid_energies, ados, dope, dos_grid_size)\n\n    # adjust the number of electrons based on the doping levels\n    num_electrons = adjust_electrons(num_electrons, ados, dope)\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return arr\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_lst = []\n    for i in range(3):\n        for j in range(len(lst)):\n            if lst[j] not in unique_lst:\n                unique_lst.append(lst[j])\n    return unique_lst\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    if len(lst) == 0:\n        return [[]]\n    else:\n        sublists = foo(lst[1:])\n        for sublist in sublists:\n            return sublists + [sublist + [lst[0]]]\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.RunSQL(\n                \"ALTER TABLE history_committee_member ADD COLUMN new_field text;\"\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    return sum(set(list1).intersection(set(list2)))\n"}
{"task_id": "valid/137", "completion": "\n    # calculate the length of the dataset\n    n = len(df)\n\n    # calculate the forecast period\n    forecast_period = math.ceil(n * 0.01)\n\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # calculate the start and end index for the current page\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    # check if the end index is out of range\n    if end_index > len(items):\n        end_index = len(items)\n\n    # return the items for the current page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    def multiply(a, b):\n        result = 0\n        for _ in range(b):\n            result += a\n        return result\n\n    result = ''\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        temp = int(n_str[i]) * 2 + carry\n        result = str(temp % 10) + result\n        carry = temp // 10\n\n    if carry != 0:\n        result = str(carry) + result\n\n    return result.lstrip('0')\n\n"}
{"task_id": "valid/141", "completion": "\n    # Initialize the node\n    rospy.init_node(preset_name)\n\n    # Create a publisher to control the robotic arm\n    pub = rospy.Publisher('/arm_controller/command', String, queue_size=10)\n\n    # Create a service to get the current position of the robotic arm\n    srv = rospy.Service('get_current_position', GetPosition, get_current_position)\n\n    # Main loop\n    while not rospy.is_shutdown():\n        # Get the current position of the robotic arm\n        current_position = get_current_position()\n\n        # Check if the current position is in a preset position\n        if current_position in presets:\n            # Get the preset position\n            preset_position = presets[current_position]\n\n            # Publish the preset position to the robotic arm\n            pub.publish(str(preset_position))\n\n        # Sleep for a short period\n        rospy.sleep(0.1)\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for value in common_elements:\n        product *= value\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer and zoom_level:\n        return \"Both are set\"\n    elif allow_multiple_answer:\n        return \"Only allow_multiple_answer is set\"\n    elif zoom_level:\n        return \"Only zoom_level is set\"\n    else:\n        return \"Neither is set\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return s.isalpha()\n\n    def merge_dicts(dict1, dict2):\n        result = dict1.copy()\n        result.update(dict2)\n        return result\n\n    def sort_dict(d):\n        return {k: v for k, v in sorted(d.items(), key=lambda item: item[0])}\n\n    def filter_keys(d):\n        return {k: v for k, v in d.items() if is_alpha(k)}\n\n    def merge_nested(d):\n        for k, v in d.items():\n            if isinstance(v, dict):\n                d[k] = merge_nested(v)\n        return d\n\n    merged = merge_dicts(a, b)\n    merged = merge_nested(merged)\n    merged = sort_dict(merged)\n    merged = filter_keys(merged)\n\n    return merged\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_val = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                max_val = max(max_val, foo(value))\n            else:\n                max_val = max(max_val, value)\n        return max_val\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return \"Invalid input\"\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 4\n    if x == 4:\n        return 5\n    if x == 5:\n        return 6\n    if x == 6:\n        return 7\n    if x == 7:\n        return 8\n    if x == 8:\n        return 9\n    if x == 9:\n        return 10\n    if x == 10:\n        return 11\n    if x == 11:\n        return 12\n    if x == 12:\n        return 13\n    if x == 13:\n        return 14\n    if x == 14:\n        return 15\n    if x == 15:\n        return 16\n    if x == 16:\n        return 17\n    if x == 17:\n        return 18\n    if x == 18:\n        return 19\n    if x == 19:\n        return 20\n    if x == 20:\n        return 21\n    if x == 21:\n        return 22\n    if x == 22:\n        return 23\n    if x == 23:\n        return 24\n    if x == 24:\n        return 25\n    if x == 25:\n        return 26\n    if x == 26:\n        return 27\n    if x == 27:\n        return 28\n    if x == 28:\n        return 29\n    if x == 29:\n        return 30\n    if x == 30:\n        return 31\n    if x == 31:\n        return 32\n    if x == 32:\n        return 33\n    if x == 33:\n        return 34\n    if x == 34:\n        return 35\n    if x == 35:\n        return 36\n    if x == 36:\n        return 37"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
