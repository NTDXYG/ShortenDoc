{"task_id": "valid/0", "completion": "\n    # Predefined categories\n    categories = ['category1', 'category2', 'category3']\n\n    # Rules for classifying text\n    rules = {\n        'category1': ['rule1', 'rule2'],\n        'category2': ['rule3', 'rule4'],\n        'category3': ['rule5', 'rule6']\n    }\n\n    # Classify text based on rules\n    for category in categories:\n        for rule in rules[category]:\n            if rule in text:\n                return category\n\n    # If no rules match, return 'uncategorized'\n    return 'uncategorized'\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = ['guitar', 'piano', 'drum', 'trumpet', 'violin', 'cello', 'flute', 'saxophone', 'trombone', 'tuba']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    else:\n        sum_of_digits = sum(int(digit) for digit in str(n))\n        return sum_of_digits % 3 == 0\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON: {}\".format(e))\n\n\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\",}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"country\": \"USA\"}')\nfoo('{\"name\": \"John\", \"age\": 30, \""}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{{0}}}'.format(key), str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date_object = date_object + timedelta(days=days)\n    return new_date_object.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Lowercase the text\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Tokenize the text\n    words = text.split()\n\n    # Remove stop words\n    stop_words = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"to\", \"with\", \"for\", \"of\", \"and\", \"is\", \"was\", \"that\", \"it\", \"this\", \"by\", \"as\", \"but\", \"or\", \"so\", \"if\", \"about\", \"are\", \"from\", \"into\", \"like\", \"over\", \"to\", \"under\", \"and\", \"or\", \"not\", \"we\", \"you\", \"i\", \"me\", \"my\", \"he\", \"she\", \"their\", \"they\", \"we\", \"us\", \"no\", \"than\", \"then\", \"now\", \"than\", \"so\", \"but\", \"that\", \"because\", \"as\", \"until\", \"while\", \"of\", \"at\", \"by\", \"for\", \"with\", \"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \"before\", \"after\", \"above\", \"below\", \"to\", \"from\", \"up\", \"down\", \"in\", \"out\", \"on\", \"off\", \"over\", \"under\", \"again\", \"further\", \"then\", \"once\", \"here\", \"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\", \"more\", \"most\", \"other\", \"some\", \"such\", \"no\", \"nor\", \"not\", \"only\", \"own\", \"same\", \"so\", \"than\", \"that\", \"the\", \"their\", \"then\", \"there\", \"these\", \"they\", \"this\", \"those\", \"am\", \"is\", \"are\", \"was\", \"were\", \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"having\", \"do\", \"does\", \"did\", \"doing\", \"a\", \"an\", \"the\", \"and\", \"but\", \"or\", \"nor\", \"for\", \"yet"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    sum_layers = []\n    for layer in array:\n        sum_layers.append(sum(sum(row) for row in layer))\n    return sum_layers\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('vim:'):\n            parts = line.split(' ')\n            for part in parts:\n                if '=' in part:\n                    key, value = part.split('=')\n                    if key in ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']:\n                        settings[key] = value\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + foo(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    list3 = list1 + list2\n    list3.sort()\n    return list3\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return struct\n    elif isinstance(struct, list):\n        return [foo(i) for i in struct]\n    elif hasattr(struct, '_asdict'):\n        return foo(struct._asdict())\n    else:\n        return str(struct)\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num_str = str(num)\n    len_num = len(num_str)\n\n    if is_palindrome(num):\n        if num_str[0] in '0123456789':\n            num_str = str(int(num_str) + 1)\n        else:\n            num_str = str(int(num_str) - 1)\n        len_num = len(num_str)\n\n    half = len_num // 2\n    left_half = int(num_str[:half])\n    right_half = int(num_str[len_num - half:])\n\n    if len_num % 2 == 0:\n        left_half = int(str(left_half) + str(left_half)[::-1])\n    else:\n        left_half = int(str(left_half) + str(left_half)[::-1][1:])\n\n    if left_half >= num:\n        right_half_min = str(int(str(right_half)[0]) - 1) + str(right_half)[1:]\n        left_half_min = int(str(left_half)[:half] + str(left_half)[len_num - half + 1:])\n    else:\n        right_half_min = str(right_half)\n        left_half_min = left_half\n\n    left_half_min = int(str(left_half_min) + str(right_half_min)[::-1])\n\n    if left_half_min >= num:\n        return left_half_min\n    else:\n        return left_half\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    if key in json_data:\n        return json_data[key] != value\n    else:\n        return True\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the HTML code\n    html_code = []\n\n    # Add the start of the HTML table\n    html_code.append('<table>')\n\n    # Calculate the number of rows based on the number of buttons and columns\n    num_rows = -(-len(buttons) // num_columns)  # equivalent to math.ceil(len(buttons) / num_columns)\n\n    # Loop through the rows\n    for i in range(num_rows):\n        # Add the start of the row\n        html_code.append('<tr>')\n\n        # Loop through the columns\n        for j in range(num_columns):\n            # Calculate the index of the button\n            button_index = i * num_columns + j\n\n            # If there is a button at this index, add it to the row\n            if button_index < len(buttons):\n                # Add the button to the row\n                html_code.append(f'<td><button onclick=\"{buttons[button_index]}\">Button {button_index + 1}</button></td>')\n\n        # Add the end of the row\n        html_code.append('</tr>')\n\n    # Add the end of the HTML table\n    html_code.append('</table>')\n\n    # Join the HTML code into a single string and return it\n    return '\\n'.join(html_code)\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet)):\n        if alphabet[i] not in s:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    if not all(isinstance(i, (int, float)) for i in arr):\n        return \"Array should only contain numerical values\"\n    else:\n        return sum(arr)\n\n"}
{"task_id": "valid/37", "completion": "\n    data = json.loads(json_data)\n    neighborhoods = [neighborhood['name'] for neighborhood in data['neighborhoods']]\n    return sorted(neighborhoods)\n"}
{"task_id": "valid/38", "completion": "\n    # Task 1:\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Task 2:\n    # Find the sum of all elements in the array\n    sum_arr = sum(arr)\n\n    # Task 3:\n    # Find the average of all elements in the array\n    avg_arr = sum_arr / n\n\n    # Task 4:\n    # Find the minimum and maximum elements in the array\n    min_arr = min(arr)\n    max_arr = max(arr)\n\n    # Task 5:\n    # Find the median of the array\n    if n % 2 == 0:\n        median_arr = (arr[n//2] + arr[n//2 - 1]) / 2\n    else:\n        median_arr = arr[n//2]\n\n    # Task 6:\n    # Find the range of the array\n    range_arr = max_arr - min_arr\n\n    # Return the results\n    return sum_arr, avg_arr, min_arr, max_arr, median_arr, range_arr\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    total_votes = 0\n    results = {}\n\n    for vote in votes:\n        candidate, count = vote\n        if count < 0 or count > 1000:\n            raise ValueError(\"Invalid vote count\")\n        total_votes += count\n        results[candidate] = count\n\n    if total_votes < 100:\n        raise ValueError(\"Total votes must be at least 100\")\n\n    for candidate, count in results.items():\n        percentage = (count / total_votes) * 100\n        results[candidate] = (count, round(percentage, 2))\n\n    return results\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if \"-\" in date_string:\n            if date_string.count(\"-\") == 2:\n                day, month, year = map(int, date_string.split(\"-\"))\n            else:\n                raise ValueError\n        elif \"/\" in date_string:\n            if date_string.count(\"/\") == 2:\n                day, month, year = map(int, date_string.split(\"/\"))\n            else:\n                raise ValueError\n        else:\n            raise ValueError\n\n        date = datetime(year, month, day)\n\n    except ValueError:\n        print(\"Invalid date format. Please use DD-MM-YYYY or DD/MM/YYYY.\")\n        return\n\n    print(date.strftime(\"%B %d, %Y\"))\n\n\nfoo(\"31-04-2022\")\nfoo(\"30-02-2000\")\nfoo(\"01-01-2018\")\nfoo(\"31-11-2022\")\nfoo(\"30-02-2022\")\nfoo(\"32-01-2018\")\nfoo(\"01/01/2018\")\nfoo(\"31-11-2022\")\nfoo(\"30-02-2022\")\nfoo(\"32-01-2018\")\nfoo(\"31-04-2022/05-2022\")\nfoo(\"01-JAN-2018\")\nfoo(\"31-DEC-2022\")\nfoo(\"30-FEB-2000\")\nfoo(\"01/01/2018\")\nfoo(\"31-11/2022\")\nfoo(\"30-02/2022\")\nfoo(\"32-01/2018\")\nfoo(\"01-JAN/2018\")\nfoo(\"31-DEC/2022\")\nfoo(\"30-FEB/2000\")\nfoo(\"01-01-2018/2019\")\nfoo(\"31-"}
{"task_id": "valid/42", "completion": "\n    allowed_types = ['.txt', '.doc', '.pdf', '.jpeg']\n    if os.path.splitext(oldname)[1] not in allowed_types:\n        print(\"Invalid file type\")\n        return False\n    if os.path.splitext(newname)[1] not in allowed_types:\n        print(\"Invalid file type\")\n        return False\n    os.rename(oldname, newname)\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            if n.isdigit():\n                return int(n) % 2 == 0\n            else:\n                return False\n        else:\n            return n % 2 == 0\n\n    def process(lst):\n        if isinstance(lst, tuple):\n            return tuple(process(item) for item in lst if process(item) is not None)\n        elif isinstance(lst, list):\n            return [process(item) for item in lst if process(item) is not None]\n        else:\n            return lst if is_even(lst) else None\n\n    return process(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data[generation] = accs\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'\\w{5}', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language, version = classifier.split(\" :: \")\n            language = language.split(\" \")[-1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    from collections import Counter\n    c = Counter(arr)\n    return [c[i] for i in arr]\n\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('videos/', views.videos_list),\n        path('videos/<int:id>', views.videos_detail),\n    ]\n\n    return urlpatterns\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    return \"Hello, world!\"\n\n"}
{"task_id": "valid/53", "completion": "\n    # Your code here\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace('\"', \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"_\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"\\\\\", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\t\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\f\", \"\")\n    s = s.replace(\"\\v\", \"\")\n    s = s.replace(\"\\b\", \"\")\n    s = s.replace(\"\\a\", \"\")\n    s = s.replace(\"\\e\", \"\")\n    s = s.replace(\"\\t\", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\f\", \"\")\n    s = s.replace(\"\\v\", \"\")"}
{"task_id": "valid/54", "completion": "\n    total = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith('price'):\n                total += dict[key]\n    return total\n\n"}
{"task_id": "valid/55", "completion": "\n    return [i for i in list1 if i in list2]\n\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return foo(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    from collections import defaultdict\n\n    file_dict = defaultdict(list)\n\n    for file_path in file_paths:\n        dir_path, file_name = os.path.split(file_path)\n        file_dict[dir_path].append(file_name)\n\n    return file_dict\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return foo(array, target, start, mid - 1)\n    else:\n        return foo(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    # Initialize an empty list to store the results\n    result = []\n\n    # Iterate over the input list\n    for i in list:\n        # If the current element is not in the result list, add it\n        if i not in result:\n            result.append(i)\n\n    # Return the result list\n    return result\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}\nfoo(fruits)\n\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, World!\"\n    return f\"{phrase}\"\n\n"}
{"task_id": "valid/70", "completion": "\n    def bar(strings):\n        result = []\n        for string in strings:\n            if re.match(\"^[A-Za-z0-9 ]*$\", string):\n                result.append(string.upper())\n        return result\n    return bar\n"}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<html><body><b>Hello, World</b>. This is a <b>test</b>.</body></html>\""}
{"task_id": "valid/73", "completion": "\n    stock = {\n        \"coke\": 10,\n        \"pepsi\": 10,\n        \"chips\": 10,\n        \"candy\": 10,\n        \"water\": 10,\n    }\n\n    prices = {\n        \"coke\": 1.0,\n        \"pepsi\": 1.0,\n        \"chips\": 0.5,\n        \"candy\": 0.65,\n        \"water\": 0.65,\n    }\n\n    if item not in stock or stock[item] == 0:\n        return \"Out of stock\"\n\n    if money_inserted < prices[item]:\n        return \"Not enough money\"\n\n    change = money_inserted - prices[item]\n    stock[item] -= 1\n\n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n    # Design function assigns a specific value a variable\n    x = 10\n    y = 20\n    z = 30\n\n    # Validates it\n    if x < y and y < z:\n        print(\"x is less than y and y is less than z\")\n\nfoo()\n"}
{"task_id": "valid/79", "completion": "\n    word = list(word)\n    random.shuffle(word)\n    return \"\".join(word)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return []\n\n    result = []\n    current_element = arr[0]\n    count = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] == current_element:\n            count += 1\n        else:\n            result.append((current_element, count))\n            current_element = arr[i]\n            count = 1\n\n    result.append((current_element, count))\n\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    return re.findall(r'\\b\\w+\\b', text)\n\n"}
{"task_id": "valid/83", "completion": "\n    div_by_3_7 = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    avg = sum(div_by_3_7) / len(div_by_3_7)\n    min_val = min(div_by_3_7)\n    max_val = max(div_by_3_7)\n    unique_nums = set(div_by_3_7)\n    occurrences = {num: div_by_3_7.count(num) for num in unique_nums}\n\n    print(f\"Average: {avg}\")\n    print(f\"Min: {min_val}\")\n    print(f\"Max: {max_val}\")\n    print(\"Occurrences:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n\n\nfoo([21, 21, 21, 21, 42, 42, 42, 108, 108, 108, 108, 144, 144, 144, 144])\nfoo([21, 21, 21, 21, 42, 42, 42, 108, 108, 108, 108, 144, 144, 144, 144, 162])\nfoo([21, 21, 21, 21, 42, 42, 42, 108, 108, 108, 108, 144, 144, 144, 144, 162, 162])\nfoo([21, 21, 21, 21, 42, 42, 42, 108, 108, 108, 108, 144, 144, 144, 144, 1"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n    max_count = max(word_counts.values())\n    for word, count in word_counts.items():\n        if count == max_count:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(100000):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    avg_numbers = sum_numbers / len(numbers)\n    return avg_numbers, sum_numbers\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(i, (int, float)) for i in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    # Initialize a dictionary to store the number of related articles for each entry\n    related_articles = {}\n\n    # Iterate over each entry in the encyclopedia\n    for entry, articles in encyclopedia.items():\n        # Count the number of related articles for the current entry\n        related_articles[entry] = len(articles)\n\n    return related_articles\n\n"}
{"task_id": "valid/89", "completion": "\n    max_val = max(lst)\n    max_index = lst.index(max_val)\n    return max_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def dict_to_xml(d, root):\n        for key, value in d.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n\n    root = Element('data')\n    dict_to_xml(dictionary, root)\n    return tostring(root, encoding='unicode')\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix:\n        return False\n\n    def search_rec(left, up, right, down):\n        # if out of boundary\n        if left > right or up > down:\n            return False\n        # if target is out of boundary\n        elif target < matrix[up][left] or target > matrix[down][right]:\n            return False\n\n        mid = left + (right - left) // 2\n\n        # Locate the row where the target can be found\n        row = up\n        while row <= down and matrix[row][mid] <= target:\n            if matrix[row][mid] == target:\n                return True\n            row += 1\n\n        return search_rec(left, row, mid - 1, down) or search_rec(mid + 1, up, right, row - 1)\n\n    return search_rec(0, 0, len(matrix[0]) - 1, len(matrix) - 1)\n\n\nmatrix = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]]\ntarget = 5"}
{"task_id": "valid/93", "completion": "\n    sum = 0\n    count = 0\n    for i in lst:\n        if i & 1:  # bitwise operation to check if number is odd\n            sum += i\n            count += 1\n    return sum / count\n\n"}
{"task_id": "valid/94", "completion": "\n    lst.sort(reverse=True)\n    if n <= len(lst):\n        return lst[n-1]\n    else:\n        return None\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n\n"}
{"task_id": "valid/97", "completion": "\n    return mapping\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return foo(abs(n))\n    if n == 0:\n        return '0'\n    else:\n        return foo(n // 3) + str(n % 3)\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"minor\"\n    elif 18 <= age < 21:\n        return \"junior\"\n    elif 21 <= age < 35:\n        return \"young adult\"\n    elif 35 <= age < 50:\n        return \"adult\"\n    elif 50 <= age < 65:\n        return \"middle-aged\"\n    else:\n        return \"senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade > 100 or numerical_grade < 0:\n        return \"Invalid numerical grade\"\n\n    letter_grade = \"A\" if numerical_grade >= 90 else \\\n                   \"B\" if numerical_grade >= 80 else \\\n                   \"C\" if numerical_grade >= 70 else \\\n                   \"D\" if numerical_grade >= 60 else \"F\"\n\n    gpa = 4.0 if letter_grade == \"A\" else \\\n          3.0 if letter_grade == \"B\" else \\\n          2.0 if letter_grade == \"C\" else \\\n          1.0 if letter_grade == \"D\" else 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(letter in vowels for letter in palindrome)\n        palindrome_dict[palindrome] = vowel_count\n\n    return palindrome_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            result += \"*\"\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    result = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[0]\n        version_number = int(version_number)\n        if package_name in result:\n            if version_number > result[package_name][1]:\n                result[package_name] = (package_name, version_number)\n        else:\n            result[package_name] = (package_name, version_number)\n    return list(result.values())\n\n\ndependencies = [('package1', '0001_auto_20200101_1200'),\n                ('package1', '0002_auto_20200101_1300'),\n                ('package2', '0001_auto_20200101_1400'),\n                ('package1', '0003_auto_20200101_1500')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        else:\n            causes_dict[action] = [result]\n    return causes_dict\n\n\ncauses = [\"running water died\", \"fighting trees broke\", \"fishing nets snagged\", \"flying cars crashed\", \"driving trucks hit\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    import string as st\n    return ''.join(ch for ch in string if ch not in st.punctuation)\n\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be of type list and int respectively.\")\n\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    return min_values\n\n\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n        foo(n-1, current_num+1)\n    else:\n        foo(n, current_num+1)\n\n\nfoo(10)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    first_digit = num_str[0]\n    return all(digit == first_digit for digit in num_str)\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if s == \"\":\n        return s\n    else:\n        if s[0] in vowels:\n            return foo(s[1:])\n        else:\n            return s[0] + foo(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    options_help = \"Options:\\n\"\n    for option in options:\n        options_help += f\"  {option[0]}: {option[1]}\\n\"\n    return options_help\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n\n\nVal = [1, 2, 2, 3, 4, 2, 2, 5, 6, 7, 2, 8, 9, 10]"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    s = s.lower()\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\nsequence_of_characters = \"Please find the number of occurrences of this string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    return h // t\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd = sum(i for i in input_list if i % 2 != 0)\n    return sum_odd\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the number of electrons to 0\n    num_electrons = 0\n\n    # Calculate the number of electrons based on the grid energies\n    for i in range(len(grid_energies)):\n        num_electrons += grid_energies[i] * ados[i]\n\n    # Adjust the number of electrons based on doping levels\n    num_electrons *= (1 + dope)\n\n    # Ensure the number of electrons is within the allowed range\n    if num_electrons > dos_grid_size:\n        num_electrons = dos_grid_size\n    elif num_electrons < 0:\n        num_electrons = 0\n\n    return num_electrons\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    result = []\n    while arr:\n        result.append(arr.pop(0))\n        if arr:\n            result.append(arr.pop())\n    return result\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = dict(color_list)\n    return color_dict\n\n\ncolor_list = [('red', 1), ('blue', 2), ('green', 3)]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    brackets = {'(': ')', '[': ']', '{': '}'}\n    for char in string:\n        if char in brackets:\n            stack.append(char)\n        elif len(stack) == 0 or brackets[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    result = []\n    for i in lst:\n        if i not in result:\n            result.append(i)\n        if len(result) == 3:\n            break\n    return result\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sub = lst[i:j]\n            sublists.append(sub)\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    return bool(re.search(r'\\d\\.\\d', string))\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    return sum(set(list1) & set(list2))\n\n"}
{"task_id": "valid/137", "completion": "\n    # calculate the length of the dataset\n    length = len(df)\n\n    # calculate the forecast period\n    forecast_period = math.ceil(length * 0.01)\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    n_str = n_str[::-1]\n    carry = 0\n    result = []\n    for i, digit in enumerate(n_str):\n        temp = int(digit)*2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n\n"}
{"task_id": "valid/141", "completion": "\n    import rospy\n    from std_msgs.msg import String\n    from sensor_msgs.msg import JointState\n    from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal\n    from actionlib import SimpleActionClient\n\n    # Initialize the node\n    rospy.init_node('reflex_control')\n\n    # Initialize the action client\n    client = SimpleActionClient('/reflex_controller/follow_joint_trajectory', FollowJointTrajectoryAction)\n\n    # Wait for the action server to become available\n    client.wait_for_server()\n\n    # Define the presets\n    presets = {\n        'preset1': (0.0, 0.0, 0.0),\n        'preset2': (1.0, 1.0, 1.0),\n        'preset3': (2.0, 2.0, 2.0),\n        # Add more presets as needed\n    }\n\n    # Get the preset position\n    preset_position = presets[preset_name]\n\n    # Create a FollowJointTrajectoryGoal\n    goal = FollowJointTrajectoryGoal()\n    goal.trajectory.joint_names = ['joint1', 'joint2', 'joint3']\n    point = JointTrajectoryPoint()\n    point.positions = list(preset_position)\n    point.time_from_start = rospy.Duration(1.0)\n    goal.trajectory.points.append(point)\n\n    # Send the goal\n    client.send_goal(goal)\n\n    # Wait for the action to finish\n    client.wait_for_result()\n\n    # Print the result\n    result = client.get_result()\n    if result.error_code == result.SUCCESSFUL:\n        print('Goal reached successfully')\n    else:\n        print('Failed to reach goal: {}'.format(result.error_string))\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        return \"multiple\"\n    else:\n        return \"single\"\n\n    if zoom_level > 10:\n        return \"high\"\n    else:\n        return \"low\"\n\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in sentence if char not in vowels])\n\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return all(c.isalpha() for c in s)\n\n    def merge(a, b, path=None):\n        if path is None:\n            path = []\n        result = {}\n        for k in set(list(a.keys()) + list(b.keys())):\n            if k in a and k in b:\n                if isinstance(a[k], dict) and isinstance(b[k], dict):\n                    result[k] = merge(a[k], b[k], path + [k])\n                elif a[k] == b[k]:\n                    result[k] = a[k]\n                else:\n                    result[k] = b[k]\n            elif k in a:\n                result[k] = a[k]\n            else:\n                result[k] = b[k]\n        return result\n\n    def sort_dict(d):\n        return {k: v for k, v in sorted(d.items()) if is_alpha(k)}\n\n    merged = merge(a, b)\n    return sort_dict(merged)\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_val = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                max_val = max(max_val, foo(value))\n            else:\n                max_val = max(max_val, value)\n        return max_val\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    if x < 1:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 2\n    if x == 4:\n        return 2\n    if x == 5:\n        return 3\n    if x == 6:\n        return 3\n    if x == 7:\n        return 4\n    if x == 8:\n        return 4\n    if x == 9:\n        return 5\n    if x == 10:\n        return 5\n    if x == 11:\n        return 6\n    if x == 12:\n        return 6\n    if x == 13:\n        return 7\n    if x == 14:\n        return 7\n    if x == 15:\n        return 8\n    if x == 16:\n        return 8\n    if x == 17:\n        return 9\n    if x == 18:\n        return 9\n    if x == 19:\n        return 10\n    if x == 20:\n        return 10\n    if x == 21:\n        return 11\n    if x == 22:\n        return 11\n    if x == 23:\n        return 12\n    if x == 24:\n        return 12\n    if x == 25:\n        return 13\n    if x == 26:\n        return 13\n    if x == 27:\n        return 14\n    if x == 28:\n        return 14\n    if x == 29:\n        return 15\n    if x == 30:\n        return 15\n    if x == 31:\n        return 16\n    if x == 32:\n        return 16\n    if x == 33:\n        return 17\n    if x == 34:\n        return 17\n    if x == 35:\n        return 18\n    if x == 36:\n        return 18\n    if x == 37:\n        return 19\n    if x == 38:\n       "}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
