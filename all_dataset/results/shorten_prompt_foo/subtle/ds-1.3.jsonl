{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) <= threshold:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if stack:\n                start = i + 1\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i])\n    result.sort()\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        mad = abs(median1 - median2)\n    else:\n        median = numbers[length // 2]\n        mad = abs(median - median)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return numbers[:-1] + [delimeter] + [delimeter] + numbers[-1:]\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(paren_string: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in paren_string:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    paren_strings = paren_string.split()\n    depths = [get_max_depth(paren_string) for paren_string in paren_strings]\n    return sorted(depths, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        result.append(min_val)\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    xor_result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return xor_result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return strings[0]\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        a, b = b, a\n    for i in range(a, 0, -1):\n        if a % i == 0 and b % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return sorted(list(set(result)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n    return ' '.join(str(num) for num in numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    return (numbers[-1], numbers[-2])\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value > 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return -1\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    result = []\n    for factor in sorted(set(factors), reverse=True):\n        count = factors.count(factor)\n        result.extend([factor]*count)\n    return result\n"}
{"task_id": "EvoEval/26", "completion": "\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    result = []\n    for num in reversed(numbers):\n        if counts[num] > 1:\n            result.append(num)\n\n    return result[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n\n    max_coeff_index = len(xs) - 1\n    while xs[max_coeff_index] == 0:\n        max_coeff_index -= 1\n\n    for x in range(-100, 100):  # arbitrary range\n        if round(poly(xs, x), 2) == 0:\n            return x\n\n    raise ValueError(\"No solution found\")\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(len(l)) if i % 3 != 0]\n    l_prime.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(l, reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(num: int, digit: int) -> int:\n        return str(num).count(str(digit))\n\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += count_digit(i, 8)\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    l_prime = l.copy()\n    for i in range(0, len(l), 2):\n        l_prime[i] = sorted(l[i::2], reverse=True)\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 3\n    else:\n        a, b = 0, 3\n        for _ in range(n - 2):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] + l[i + 1] + l[i + 2] == 10:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n\n    # For each car, consider the two cars on each side\n    for i in range(n):\n        # If the left car is moving to the right and the right car is moving to the left,\n        # then there is a collision\n        if i % 2 == 0:\n            collisions += 1\n\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    l.sort()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2:\n        raise ValueError(\"Base must be greater than or equal to 2\")\n    if x < base:\n        return x\n    else:\n        return foo(x // base, base) + (x % base) * base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        sequence = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3] + sequence[i-4])\n        return str(sequence[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    else:\n        return sum(l) / len(l)\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not text:\n        return True\n\n    text = text.replace(' ', '')\n\n    if not case_sensitive:\n        text = text.lower()\n\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n+q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return encode_shift(s, -shift)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    else:\n        for i in range(len(s0)):\n            if s0[i] != s1[i]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1.extend(l2)\n    l1 = list(set(l1))\n    l1.sort(reverse=True)\n    return l1\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n < m:\n        return 0\n    else:\n        return m + foo(n - m, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" :\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0 or stack[-1] != \"[\":\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    xs.sort(reverse=True)\n    return [xs[i] * x ** i for i in range(len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        memo = [0] * (n + 1)\n        memo[0] = 0\n        memo[1] = 0\n        memo[2] = 1\n\n        for i in range(3, n + 1):\n            memo[i] = memo[i - 3] + memo[i - 2] - memo[i - 1]\n\n        return memo[n]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    return (str(x)[-shift:] + str(x)[:-shift]) if shift <= len(str(x)) else str(x)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.replace(\"apples\", \"\")\n    s = s.replace(\"oranges\", \"\")\n    s = s.replace(\"mangoes\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\" \", \"\")\n    apples = int(s.split(\" \")[0])\n    oranges = int(s.split(\" \")[1])\n    total_fruits = apples + oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [(i, val) for i, val in enumerate(arr) if val % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values, key=lambda x: (x[1], x[0]))\n    return [smallest_odd_value[0], smallest_odd_value[1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n\n    def foo(lst):\n        count = Counter(lst)\n        for i in range(1, max(count)+1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n\n    print(foo([4, 1, 2, 2, 3, 1]))  # 1\n    print(foo([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # 1\n    print(foo([5, 5, 4, 4, 4]))  # -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def foo(lst):\n        if not lst:\n            return []\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop())\n            if lst:\n                result.append(lst.pop(0))\n        return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def foo(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\n    print(foo(3, 4, 5))\n    print(foo(1, 2, 10))\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def foo(q,w):\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        elif q == q[::-1]:\n            return True\n        else:\n            return False\n\n    print(foo([1, 2], 5)) # False\n    print(foo([3, 2, 3], 1)) # False\n    print(foo([3, 2, 3], 9)) # True\n    print(foo([3], 5)) # False\n\nThe function foo(q, w) is defined to check if the object q will fly, which means if the sum of its elements is an even number and is less than or equal to the maximum possible weight w. The function also checks if the object q is balanced, which means it is a palindromic list. If the object q will fly and is balanced, the function returns True, otherwise it returns False.\n\nThe function foo(q, w) is tested with the given examples. The function should return the expected results.\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_changes(arr, i, j):\n        changes = 0\n        while i < j:\n            if arr[i] != arr[j]:\n                changes += 1\n            i += 1\n            j -= 1\n        return changes\n\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += count_changes(arr, i + 1, n - i - 2)\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def foo(lst1, lst2):\n        count1 = sum(len(i) for i in lst1)\n        count2 = sum(len(i) for i in lst2)\n        if count1 > count2:\n            return lst1\n        elif count1 < count2:\n            return lst2\n        else:\n            return lst2\n\n    print(foo([], []))\n    print(foo(['hi', 'admin'], ['hI', 'Hi']))\n    print(foo(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\n    print(foo(['hi', 'admin'], ['hI', 'hi', 'hi']))\n    print(foo(['4'], ['1', '2', '3', '4', '5']))\n\nfoo()\n\nThe function foo() is defined to take two lists of strings as input. It calculates the total number of characters in each list using the built-in sum() function and len() function. If the total number of characters in the first list is greater than the second list, it returns the first list. If the total number of characters in the first list is less than the second list, it returns the second list. If the two lists have the same number of characters, it returns the second list.\n\nThe function is then called with some test cases to demonstrate its correctness.\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n        if count > 4:\n            return False\n    return count == 4\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_simple_power(x, n):\n        if x == 1:\n            return True, 0\n        if x < 1 or n < 1:\n            return False, None\n        i = 0\n        while x % n == 0:\n            x /= n\n            i += 1\n        if x == 1:\n            return True, i\n        else:\n            return False, None\n\n    return is_simple_power(x, n)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def foo(a):\n        if a < 0:\n            return False\n        n = a ** (1. / 3.)\n        return n.is_integer()\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            if hex_digits[digit] in primes:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(0, len(s) - 3, 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return ['E' if grade < 0.0 else ('D-' if grade < 0.0 else ('D' if grade < 0.7 else ('C-' if grade < 1.3 else ('C' if grade < 1.7 else ('B-' if grade < 2.3 else ('B' if grade < 2.7 else ('A-' if grade < 3.3 else ('A' if grade < 3.7 else 'B+'))))))))\n\n    return [grade_equation(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 90\n    else:\n        return 9 * (10 ** (n - 2)) + 9 * (10 ** (n - 1))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def hex_sum(n):\n        return hex(n)[2:]\n\n    return hex_sum(sum(int(digit) for digit in str(N)))\n"}
{"task_id": "EvoEval/85", "completion": "\n    for i in range(0, len(lst), 2):\n        lst[i] = lst[i] * 2\n    return lst\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    new_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(new_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    res = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                res.append((i, j))\n    res.sort(key=lambda x: (-x[0], x[1]))\n    return res\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(shift_char, s))\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if not lst:\n        return None\n    max_val = second_max = float('-inf')\n    for i in lst:\n        if i > max_val:\n            second_max = max_val\n            max_val = i\n        elif i > second_max and i < max_val:\n            second_max = i\n    if second_max == float('-inf'):\n        return None\n    else:\n        return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '').replace('?', '').replace('!', '').split()\n    return sum(1 for word in S if word.lower() == 'i' and S[len(word) + 1:].lower().endswith('boredom'))\n"}
{"task_id": "EvoEval/92", "completion": "\n    def foo(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            return True\n        else:\n            return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index + 3 < len(vowels):\n                result += vowels[index + 3].upper()\n            else:\n                result += vowels[index + 3]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    keys = list(dict.keys())\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    primes.sort(reverse=True)\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    def sum_units(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum_units(a) + sum_units(b)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def foo(value):\n        num = int(value)\n        if num < int(value) + 0.5:\n            return num\n        else:\n            return num + 1\n\n    return foo\n\n"}
