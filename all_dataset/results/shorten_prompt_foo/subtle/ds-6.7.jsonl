{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if temp:\n                stack.append(temp)\n                temp = \"\"\n            stack.append(char)\n        else:\n            stack.append(char)\n            if len(stack) % 2 == 0:\n                temp = \"\".join(stack[-2:])\n                stack = stack[:-2]\n                result.append(temp)\n    result.sort()\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return (integer_part, decimal_part)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    mad = sum(abs(n - median) for n in numbers) / len(numbers)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if len(numbers) == 0:\n        return [delimeter]\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        results.append(max_count)\n    return sorted(results, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_numbers += number\n            product_numbers *= number\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # convert strings to binary\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # perform XOR operation\n    result = a ^ b\n\n    # convert result back to binary and reverse it\n    result = bin(result)[2:][::-1]\n\n    return result\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    max_len = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_len:\n            return s\n    return None\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return \" \".join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    note_lengths = []\n    for note in music_string:\n        if note == 'o':\n            note_lengths.append(4)\n        elif note == 'o|':\n            note_lengths.append(2)\n        elif note == '.|':\n            note_lengths.append(1)\n    note_lengths = list(set(note_lengths))\n    note_lengths.sort(reverse=True)\n    return note_lengths\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i+1], numbers[i])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    return sorted([(max_val - num) / range_val for num in numbers], reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n + 1):\n        while n % i == 0 and is_prime(i):\n            factors.append(i)\n            n //= i\n            if n == 1:\n                return factors\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.reverse()\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.lower() if string.isupper() else string.upper()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"Polynomial must have at least two coefficients\")\n\n    # The polynomial is of the form x^n + x^(n-2) + ... + x^2 + x^0\n    # The zero of the polynomial is the solution of the equation x^(n-1) + x^(n-3) + ... + x^2 = 0\n    # So we can solve this equation to find the zero of the polynomial\n    # We use the Newton-Raphson method to find the solution\n\n    def f(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def df(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    x = 0.0\n    while abs(f(x)) > 1e-6:\n        x = x - f(x) / df(x)\n\n    return x\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = l[:]\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime[i] = sorted(l[i] for i in range(len(l)) if i % 3 == 0, reverse=True)\n    return l_prime\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(l, reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(str(i).count('8') for i in range(n))\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    even_index_values.sort(reverse=True)\n    result = [l[i] if i % 2 else even_index_values.pop(0) for i in range(len(l))]\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return None\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return \"n must be between 1 and 5\"\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * 2 * 2 * 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    l.sort()\n    left = 0\n    right = len(l) - 1\n    while left < right:\n        sum = l[left] + l[right]\n        if sum == 1:\n            return True\n        elif sum < 1:\n            left += 1\n        else:\n            right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    return int(bin(x)[2:])\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n\n    foo_nums = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        foo_nums.append(foo_nums[i - 1] + foo_nums[i - 2] + foo_nums[i - 3] + foo_nums[i - 4])\n\n    return str(foo_nums[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        return sum(l) / len(l)\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] >= l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] <= l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1 + l2), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack.pop() != \"[\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [xs[0]]\n    else:\n        res = [xs[0]]\n        for i in range(1, n):\n            res.append(res[-1] * xs[i])\n        return res[::-1]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(n - 2):\n            a, b, c = b, c, a + b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return \">\"\n    return x[shift:] + x[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    apples, oranges = map(int, s.split()[::2])\n    total_fruits = int(s.split()[-1])\n    mangoes = total_fruits - n - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = [float('inf'), float('inf')]\n    for i, n in enumerate(arr):\n        if n % 2 == 1 and n < smallest_odd[1]:\n            smallest_odd = [i, n]\n    return smallest_odd if smallest_odd[1] != float('inf') else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(c.keys())+2):\n        if c[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(-1))\n        if len(lst) > 0:\n            result.append(lst.pop(0))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # check if the three sides can form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if sum(q) % 2 != 0:\n        return False\n    if q != q[::-1]:\n        return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/74", "completion": "\n    lst1_chars = sum([len(word) for word in lst1])\n    lst2_chars = sum([len(word) for word in lst2])\n    if lst1_chars > lst2_chars:\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, a) if is_prime(x)]\n    count = 0\n    for prime in primes:\n        while a % prime == 0:\n            a /= prime\n            count += 1\n            if count > 4:\n                return False\n    return count == 4\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return (x == 1, 0)\n    elif n == 0:\n        return (x == 0, 0)\n    else:\n        i = 0\n        while n ** i < x:\n            i += 1\n        return (n ** i == x, i if n ** i == x else None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    if a < 0:\n        return False\n    i = 0\n    while i**3 <= a:\n        if i**3 == a:\n            return True\n        i += 1\n    return False\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = set('014689ABCDEF')\n    prime_hex_digits = set('01468ABC')\n    return sum(1 for c in num if c in hex_digits.difference(prime_hex_digits))\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return f\"db{binary}bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', -0.6: 'E'}\n    grades.sort(reverse=True)\n    return [grade_dict.get(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces\n    string = string.replace(\" \", \"\")\n\n    # Check if string is a prime number\n    if len(string) > 1:\n        for i in range(2, int(len(string) ** 0.5) + 1):\n            if int(string) % i == 0:\n                return False\n        return True\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Your code here\n    return 2 * 9 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_hex = sum(int(digit, 16) for digit in hex_num)\n    # convert the sum to hexadecimal\n    result = hex(sum_hex)[2:]\n    return result\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    return lst[1::2][0]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    new_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(new_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        new_array = list(set(array))\n        if (new_array[0] + new_array[-1]) % 2 == 0:\n            new_array.sort(reverse=True)\n        else:\n            new_array.sort()\n        return new_array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset - 2 * 2) % 26 + 2 * 2 + ascii_offset)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.') + S.split('?') + S.split('boredom')\n    count = 0\n    for s in S:\n        if s.strip().startswith('I'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    return abs(x) + abs(y) == abs(z) or abs(x) + abs(z) == abs(y) or abs(y) + abs(z) == abs(x)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                new_message += char.upper()\n            else:\n                new_message += char.lower()\n        else:\n            new_message += char\n    for vowel in vowels:\n        new_message = new_message.replace(vowel, chr((ord(vowel) - 97 + 3) % 26 + 97))\n    return new_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        return sum(int(i) for i in str(min(primes)))\n    else:\n        return 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower_count = 0\n    upper_count = 0\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_count += 1\n            elif key.isupper():\n                upper_count += 1\n        else:\n            return False\n    return lower_count == len(dict) or upper_count == len(dict)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a%10) + (b%10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n"}
