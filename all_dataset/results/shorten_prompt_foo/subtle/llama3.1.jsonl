{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over the characters in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've found a complete group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, skip it\n\n    # Sort the groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Calculate the absolute differences between each number and the median\n    abs_diffs = [abs(num - median) for num in numbers]\n\n    # Sort the absolute differences\n    abs_diffs.sort()\n\n    # Calculate the median of the absolute differences\n    mad = abs_diffs[len(abs_diffs) // 2] if len(abs_diffs) % 2 else (abs_diffs[len(abs_diffs) // 2 - 1] + abs_diffs[len(abs_diffs) // 2]) / 2\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Split the input string into groups\n    groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting level for each group\n    max_nesting = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize the current nesting level and the maximum nesting level\n        curr_nesting = 0\n        max_nesting_level = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the current nesting level\n            if char == '(':\n                curr_nesting += 1\n                # Update the maximum nesting level if necessary\n                max_nesting_level = max(max_nesting_level, curr_nesting)\n            # If the character is a closing parenthesis, decrement the current nesting level\n            elif char == ')':\n                curr_nesting -= 1\n\n        # Append the maximum nesting level for the current group to the list\n        max_nesting.append(max_nesting_level)\n\n    # Return the list of maximum nesting levels in descending order\n    return sorted(max_nesting, reverse=True)  # Changed here\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_non_negative = 0\n    product_of_non_negative = 1\n    for num in numbers:\n        if num >= 0:\n            sum_of_non_negative += num\n            product_of_non_negative *= num\n    return sum_of_non_negative, product_of_non_negative\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        if num < min_val:\n            min_val = num\n        result.append(min_val)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return ''\n\n    # Find the longest prefix that is a palindrome\n    prefix = ''\n    for char in string:\n        if is_palindrome(prefix + char):\n            prefix += char\n        else:\n            break\n\n    # Append the start of the string reverse of a string suffix that comes after the palindromic prefix\n    suffix = string[len(prefix):]\n    return prefix + suffix[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return bin(int(a, 2) ^ int(b, 2))[2:][::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    min_len = min(len(s) for s in strings)\n    return next((s for s in strings if len(s) == min_len), None)  # type: ignore\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(map(str, range(1, n + 1)))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert the string to a set to remove duplicates and count the number of elements in the set\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Define a dictionary to map notes to their corresponding beat values\n    note_to_beat = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Split the input string into a list of notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beat values\n    beat_values = []\n    \n    # Iterate over each note in the list\n    for note in notes:\n        # Append the beat value of the current note to the list\n        beat_values.append(note_to_beat[note])\n    \n    # Sort the list of beat values in descending order\n    beat_values.sort(reverse=True)\n    \n    # Return the sorted list of beat values\n    return beat_values\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)  # count() method returns the number of occurrences of the substring in the string\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of strings\n    numbers = numbers.split()\n\n    # Create a dictionary to map string numerals to their integer values\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Use a list comprehension to convert the list of string numerals to a list of integers\n    numbers = [num_dict[num] for num in numbers]\n\n    # Sort the list of integers in descending order\n    numbers.sort(reverse=True)\n\n    # Use a list comprehension to convert the list of integers back to a list of string numerals\n    numbers = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in numbers]\n\n    # Join the list of string numerals into a single string with spaces in between\n    numbers = ' '.join(numbers)\n\n    return numbers\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    # Sort the list of numbers\n    numbers.sort()\n    # Find the minimum difference between adjacent numbers\n    min_diff = float('inf')\n    # Initialize the result\n    result = None\n    # Iterate over the sorted list of numbers\n    for i in range(1, len(numbers)):\n        # Calculate the difference between the current number and the previous number\n        diff = numbers[i] - numbers[i - 1]\n        # If the difference is smaller than the current minimum difference, update the minimum difference and the result\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i - 1])\n    # Return the result\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Apply linear transform to the list\n    transformed_list = [(num - min_val) / (max_val - min_val) for num in numbers]\n\n    # Sort the list in descending order\n    sorted_list = sorted(transformed_list, reverse=True)\n\n    return sorted_list\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list to store the unique numbers\n    unique_numbers = []\n    for num in numbers:\n        if count_dict[num] == 1:\n            unique_numbers.append(num)\n\n    # Reverse the list\n    unique_numbers.reverse()\n\n    return unique_numbers\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # <--- This is the line that does the actual work"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])  # [i for i in l if i > 0] is a list comprehension that filters out non-positive numbers, and sorted() sorts the list in ascending order. \n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    # find the largest non zero coefficient\n    max_coeff = max([coeff for coeff in xs if coeff != 0])\n    # find the index of the largest non zero coefficient\n    max_index = xs.index(max_coeff)\n    # find the derivative of the polynomial\n    derivative = [coeff * (max_index + 1) * math.pow(x, max_index) for coeff in xs]\n    # find the root of the derivative\n    root = -max_coeff / derivative[max_index]\n    return root\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0], reverse=True)[0] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(l, reverse=True)  # sorted() function sorts the list in ascending order by default, so we use reverse=True to sort in descending order\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)  # return the smallest element in the list\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 != 0 else sorted([l[j] for j in range(len(l)) if j % 2 == 0], reverse=True)[i // 2] for i in range(len(l))]  # <--- changed here\n"}
{"task_id": "EvoEval/38", "completion": "\n    # decode cyclic groups\n    groups = [group[1:] + group[0] for group in [s[(4 * i):min((4 * i + 4), len(s))] for i in range((len(s) + 4 - 1) // 4)]]\n    # join groups to get decoded string\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n % 2 == 0:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    return int(str(x), base)\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return str(d)  # return string representation of d"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    return sum(l) / len(l)  # <--- changed this line\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]  # <--- changed here\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # <--- changed here"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)  # <--- changed here\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    # Convert lists to sets to remove duplicates\n    set1 = set(l1)\n    set2 = set(l2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the union set back to a list\n    union_list = list(union_set)\n    # Sort the list in descending order\n    sorted_list = sorted(union_list, reverse=True)\n    return sorted_list\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # <--- changed here\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [sum([xs[i] * (x ** i) for i in range(len(xs))]) for x in range(20)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to use the islower() method to check for lowercase characters and the ord() function to get the ASCII value of each character. The sum() function is used to add up the ASCII values of the lowercase characters.  # Corrected the code to"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into two parts: the number of apples and the number of oranges\n    apples, oranges = s.split(', ')\n    \n    # Extract the numbers from the strings\n    apples = int(apples.split(' ')[0])\n    oranges = int(oranges.split(' ')[0])\n    \n    # Calculate the total number of fruits in the basket minus one\n    total_fruits = n - 1\n    \n    # Calculate the number of mango fruits in the basket\n    mangoes = total_fruits - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd_values = [i for i, x in enumerate(arr) if x % 2]\n    if not odd_values:\n        return []\n    smallest_odd = min(arr[i] for i in odd_values)\n    return [min(odd_values, key=lambda x: (arr[x], x)), smallest_odd]\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the frequency of each integer in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate over the list in ascending order\n    for num in sorted(lst):\n        # If the frequency of the current number is greater than or equal to the number itself, return the number\n        if freq_dict[num] >= num:\n            return num\n\n    # If no such number is found, return -1\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    lst.remove(max_val)\n    return [max_val] + sorted(lst, reverse=True) + sorted(lst)  # <--- Here is the problem\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 3 decimal points\n        return round(area, 3)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if n == 3:\n        if arr[0] == arr[2]:\n            return 1\n        else:\n            return 2\n    # Initialize a 2D array to store the minimum number of changes needed to make the subarray from index i to j palindromic\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            dp[i][i+1] = 0\n        else:\n            dp[i][i+1] = 1\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]"}
{"task_id": "EvoEval/74", "completion": "\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters in each list\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 < total_chars_lst2:\n        return lst2\n    else:\n        return lst2  # If the lists have the same number of characters, return the second list\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n\n    prime_factors = get_prime_factors(a)\n    return len(prime_factors) == 4 and all(is_prime(factor) for factor in prime_factors)\n"}
{"task_id": "EvoEval/76", "completion": "\n    # Initialize the power to 0\n    power = 0\n    # Loop until x is not a power of n\n    while x % n == 0:\n        # Increment the power\n        power += 1\n        # Divide x by n\n        x = x // n\n    # If x is 1, it is a power of n\n    if x == 1:\n        # Return True and the power\n        return True, power\n    # Otherwise, return False and None\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a == 0 or round(a ** (1. / 3)) ** 3 == a  # or return a ** (1. / 3) % 1 == 0\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Convert hexadecimal number to decimal\n    decimal_num = int(num, 16)\n    # Initialize counter for non-prime digits\n    non_prime_count = 0\n    # Loop through each digit in the decimal number\n    while decimal_num > 0:\n        # Get the last digit of the decimal number\n        digit = decimal_num % 10\n        # Check if the digit is not prime\n        if digit in [0, 1, 4, 6, 8, 9, 10, 12, 15]:\n            # If the digit is not prime, increment the counter\n            non_prime_count += 1\n        # Remove the last digit from the decimal number\n        decimal_num //= 10\n    # Return the count of non-prime digits\n    return non_prime_count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    return len(set(s[:4])) == 4 and all(s[i] != s[i-1] for i in range(1, len(s))) and len(s) >= 4\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade table\n    grade_table = {\n        'A+': (4.0, float('inf')),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (3.0, 3.3),\n        'B': (2.7, 3.0),\n        'B-': (2.3, 2.7),\n        'C+': (2.0, 2.3),\n        'C': (1.7, 2.0),\n        'C-': (1.3, 1.7),\n        'D+': (1.0, 1.3),\n        'D': (0.7, 1.0),\n        'D-': (0.0, 0.7),\n        'E': (0.0, 0.0)\n    }\n    \n    # Sort the grades in ascending order\n    sorted_grades = sorted(grades)\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over the sorted grades\n    for grade in sorted_grades:\n        # Initialize a flag to check if the grade is found\n        found = False\n        \n        # Iterate over the grade table\n        for letter, (lower, upper) in grade_table.items():\n            # Check if the grade is within the range\n            if lower <= grade <= upper:\n                # Append the letter grade to the list\n                letter_grades.append(letter)\n                # Set the flag to True\n                found = True\n                # Break the loop\n                break\n        \n        # If the grade is not found, append 'E' to the list\n        if not found:\n            letter_grades.append('E')\n    \n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    if string == \"\":\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Calculate the count of n-digit positive integers start with 1\n    count_start_with_1 = 9 * (10 ** (n - 2))\n    \n    # Calculate the count of n-digit positive integers end with 2\n    count_end_with_2 = 9 * (10 ** (n - 1))\n    \n    # Return the sum of the two counts\n    return count_start_with_1 + count_end_with_2\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the number to a string to easily iterate over its digits\n    str_N = str(N)\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]  # [2:] is used to remove the '0x' prefix\n"}
{"task_id": "EvoEval/85", "completion": "\n    return lst[1] if lst[1] % 2 != 0 else lst[3] if lst[3] % 2 != 0 else lst[5] if lst[5] % 2 != 0 else lst[7] if lst[7] % 2 != 0 else lst[9] if lst[9] % 2 != 0 else lst[11] if lst[11] % 2 != 0 else lst[13] if lst[13] % 2 != 0 else lst[15] if lst[15] % 2 != 0 else lst[17] if lst[17] % 2 != 0 else lst[19] if lst[19] % 2 != 0 else lst[21] if lst[21] % 2 != 0 else lst[23] if lst[23] % 2 != 0 else lst[25] if lst[25] % 2 != 0 else lst[27] if lst[27] % 2 != 0 else lst[29] if lst[29] % 2 != 0 else lst[31] if lst[31] % 2 != 0 else lst[33] if lst[33] % 2 != 0 else lst[35] if lst[35] % 2 != 0 else lst[37] if lst[37] % 2 != 0 else lst[39] if lst[39] % 2 != 0 else lst[41] if lst[41] % 2 != 0 else lst[43] if lst[43] % 2 != 0 else lst[45] if lst[45] % 2 != 0 else lst[47] if lst[47] % 2 != 0 else lst[49] if lst[49] % 2 != 0 else lst[51] if lst[51] % 2 != 0 else lst[53] if lst[53] % 2 != 0 else lst[55] if lst[55] % 2 != 0 else lst[57] if lst[57] % 2 != 0 else lst[59] if lst[59] % 2 != 0 else lst[61] if lst[61] % 2 != 0 else lst[63] if lst[63] % 2 != "}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(word, reverse=True) for word in s.split())  # <--- changed here\n"}
{"task_id": "EvoEval/87", "completion": "\n    # First, we need to find the maximum number of columns in the list\n    max_cols = max(len(row) for row in lst)\n    \n    # Then, we need to find all the coordinates where the value is x\n    coords = [(i, j) for i, row in enumerate(lst) for j in range(max_cols) if i < len(row) and row[j] == x]\n    \n    # Sort the coordinates by row in descending order\n    coords.sort(key=lambda x: x[0], reverse=True)\n    \n    # Sort the coordinates of each row by column in ascending order\n    for i in range(len(coords)):\n        coords[i] = (coords[i][0], sorted([j for j in range(max_cols) if (coords[i][0], j) in coords]).index(coords[i][1]))\n    \n    return coords\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array to avoid modifying the original array\n    array_copy = array.copy()\n    \n    # Check if the array is empty\n    if not array_copy:\n        return array_copy\n    \n    # Calculate the sum of the first and last index values\n    sum_first_last = array_copy[0] + array_copy[-1]\n    \n    # Sort the array in ascending or descending order based on the sum of the first and last index values\n    array_copy.sort(reverse=(sum_first_last % 2 == 0))\n    \n    # Remove any duplicate values from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order\n    array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[2::2] + alphabet[1::2]\n    return ''.join(shifted_alphabet[alphabet.index(c)] if c in alphabet else c for c in s)  # <--- This line is the key to the solution"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return the second last element in the sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    return S.count('I') - S.count('I ')\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Check if all inputs are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    # Calculate the sum of the absolute values of two numbers\n    sum_abs = abs(x) + abs(y)\n    # Check if one number is equal to the sum of the absolute values of the other two\n    if (sum_abs == abs(z)) or (sum_abs == abs(x)) or (abs(z) == abs(x) + abs(y)):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                result += chr(ord(vowels[index]) + 3)\n            else:\n                result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    min_prime = None\n    for num in lst:\n        if is_prime(num):\n            if min_prime is None or num < min_prime:\n                min_prime = num\n    return sum_of_digits(min_prime) if min_prime is not None else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the dictionary is empty or has less than 3 keys\n    if len(dict) < 3:\n        return False\n\n    # Check if all keys are strings in lower case or all keys are strings in upper case\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n\n    # Return True if all keys are in lower case or all keys are in upper case, else return False\n    return all_lower or all_upper  # Changed from 'and' to 'or' to match the problem description\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return sorted(primes, reverse=True)  # Return the list in descending order\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract the unit digit of the first number\n    unit_digit_a = a % 10\n    # Extract the unit digit of the second number\n    unit_digit_b = b % 10\n    # Return the sum of the unit digits\n    return unit_digit_a + unit_digit_b\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 != 0 and c in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))  # Convert the string to a float, round it, and then convert it back to an integer. The round function will round to the nearest integer, and if the number is equidistant from two integers, it will round towards zero. \n"}
