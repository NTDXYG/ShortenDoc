{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_string = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_string += char\n        elif char == ')':\n            stack.pop()\n            current_string += char\n            if not stack:\n                result.append(current_string)\n                current_string = ''\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return (int(number), number - int(number))\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sorted([abs(x - median) for x in numbers])[len(numbers) // 2]\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    return [delimeter] + [delimeter if i % 2 == 0 else numbers[i // 2] for i in range(len(numbers) * 2)]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_value = float('inf')\n    for number in numbers:\n        min_value = min(min_value, number)\n        result.append(min_value)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return str(int(a, 2) ^ int(b, 2))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    return sorted([int(i) for i in music_string.split()], reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers\")\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (max(numbers[i], numbers[i + 1]), min(numbers[i], numbers[i + 1]))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    return sorted([((x - min(numbers)) / (max(numbers) - min(numbers))) for x in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            count = 0\n            while n % i == 0:\n                n //= i\n                count += 1\n            factors.extend([i] * count)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(list(set(numbers)), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case not in ['lower', 'upper']:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if max(xs) == 0:\n        raise ValueError(\"largest non zero coefficient must be non zero\")\n    return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted(l[i], reverse=True)\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(l, reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 and '8' in str(i))\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = sorted([l[i] for i in range(0, len(l), 2)], reverse=True)\n    odd_indices = [l[i] for i in range(1, len(l), 2)]\n    return [even_indices[i // 2] if i % 2 == 0 else odd_indices[i // 2] for i in range(len(l))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return None\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 13\n    elif n == 5:\n        return 89\n    else:\n        return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    return int(str(x), base)\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        return min(l)\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1) and set(s0) == set(s1)"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return foo(n-1) + foo(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return False\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1 + l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [sum(x * y for x, y in zip(xs, xs[i:])) for i in range(len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return foo(n-3) + foo(n-2) - foo(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    return n + 1 - int(s.split()[0]) - int(s.split()[2])\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd_value = float('inf')\n    smallest_odd_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 1 and value < smallest_odd_value:\n            smallest_odd_value = value\n            smallest_odd_index = i\n    if smallest_odd_index == -1:\n        return []\n    return [smallest_odd_index, smallest_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in c.items():\n        if v >= k:\n            return k\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    for i in range(0, len(lst), 2):\n        result.append(lst.pop())\n    for i in range(0, len(lst), 2):\n        result.append(lst.pop(0))\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if sum(q) % 2 == 0:\n        if q == q[::-1]:\n            return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[3] or arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        elif arr[0] == arr[4] or arr[1] == arr[3]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        elif arr[0] == arr[5] and arr[1] == arr[4] or arr[1] == arr[4] and arr[2] == arr[3] or arr[0] == arr[5] and arr[2] == arr[3]:\n            return 1\n        elif arr[0] == arr[5] or arr[1] == arr[4] or arr[2] == arr[3]:\n            return 2\n        else:\n            return 3\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        elif arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] or arr[0] == arr[6] and arr[1] == arr[5] and arr[3] == arr[3] or arr[0] == arr[6"}
{"task_id": "EvoEval/74", "completion": "\n    return lst2 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst1\n"}
{"task_id": "EvoEval/75", "completion": "\n    return a in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    for i in range(1, x):\n        if x ** i == n:\n            return True, i\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a**0.5**3 == int(a**0.5**3)\n"}
{"task_id": "EvoEval/78", "completion": "\n\t"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    return sorted([grade_to_letter(g) for g in grades])\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(' ', '')\n    if len(string) < 2:\n        return True\n    for i in range(2, len(string)):\n        if string[i] == string[0]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return foo(n-1) + foo(n-2)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return lst[::2][::2]\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(s.split(), key=lambda x: x[::-1]))\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array\n    array_copy = array.copy()\n    \n    # Remove duplicates from the array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array\n    if (array_copy[0] + array_copy[-1]) % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[2:] + alphabet[:2]\n    return ''.join([rotated_alphabet[alphabet.index(c)] if c in alphabet else c for c in s])\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first, second = float('-inf'), float('-inf')\n    for num in lst:\n        if num > first:\n            first, second = num, first\n        elif num > second:\n            second = num\n    return second if second != float('-inf') else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    return S.count(\"I am experiencing boredom\")\n"}
{"task_id": "EvoEval/92", "completion": "\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return abs(x) + abs(y) == z or abs(x) + abs(z) == y or abs(y) + abs(z) == x\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += chr(ord(char) + 3)\n        else:\n            result += char.swapcase()\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    if len(dict) == 0:\n        return False\n    if all(isinstance(key, str) for key in dict.keys()):\n        if all(key.islower() for key in dict.keys()):\n            return True\n        elif all(key.isupper() for key in dict.keys()):\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a%10) + abs(b%10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c in 'AEIOU' and s.index(c) % 2 == 1)\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(float(value))\n"}
