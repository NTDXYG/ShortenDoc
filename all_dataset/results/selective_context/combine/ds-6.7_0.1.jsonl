{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i + 3])) != 3:\n                return False\n        return True\n\n    happy_a = is_happy(a)\n    happy_b = is_happy(b)\n\n    if not happy_a and not happy_b:\n        return None\n    elif happy_a and not happy_b:\n        return a\n    elif not happy_a and happy_b:\n        return b\n    else:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n        else:\n            return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n\n    \"\"\"\n    def round_andflip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        if num % 2 == 0:\n            num = num if num > 0 else num + 1\n        else:\n            num = num if num < 0 else num - 1\n        return str(num) + ' ' + string.swapcase()\n    \"\"\"\n    \"\"\"\n    def round_andflip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        if num % 2 == 0:\n            num = num if num > 0 else num + 1\n        else:\n            num = num if num < 0 else num - 1\n        return str(num) + ' ' + string.swapcase()\n    \"\"\"\n    \"\"\"\n    def round_andflip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        if num % 2 == 0:\n            num = num if num > 0 else num + 1\n        else:\n            num = num if num < 0 else num - 1\n        return str(num) + ' ' + string.swapcase()\n    \"\"\"\n    \"\"\"\n    def round_andflip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        if num % 2 == 0:\n            num = num if"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_sum = 0\n    for num in lst:\n        largest_prime = 0\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i) and i > largest_prime:\n                largest_prime = i\n        if largest_prime:\n            digit_sum = sum_of_digits(largest_prime)\n            if digit_sum > largest_sum:\n                largest_sum = digit_sum\n    return largest_sum\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            first_last_sum = round(numbers[0] + numbers[-1])\n            if first_last_sum % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n * (n + 1) / 2\n    else:\n        return (n * (n + 1) / 2) + 0.5\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    bracket_count = string.count(bracket)\n    bracket_pairs = string.split(bracket)\n    is_correct = all(len(pair) % 2 == 0 for pair in bracket_pairs)\n    return is_correct, bracket_count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\"\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return {}\n\n    planet1_position = planets[planet1]\n    planet2_position = planets[planet2]\n\n    if planet1_position > planet2_position:\n        planet1_position, planet2_position = planet2_position, planet1_position\n\n    return {planet: roman_numerals[position] for planet, position in planets.items() if planet1_position < position < planet2_position}\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grades = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 27: 'B+', 23: 'B', 20: 'B-', 17: 'C+', 13: 'C', 10: 'C-', 7: 'D+', 0: 'D'}\n    result = []\n    for student in name_grade_list:\n        name = student[0]\n        gpa = student[1]\n        name = name[0].upper() + name[1:].lower()\n        for grade in grades:\n            if gpa >= grade:\n                letter_grade = grades[grade]\n                break\n        result.append((name, letter_grade))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    def grade(gpa):\n        if gpa >= 4.0: return 'A+'\n        elif gpa >= 3.7: return 'A'\n        elif gpa >= 3.3: return 'A-'\n        elif gpa >= 3.0: return 'B+'\n        elif gpa >= 2.7: return 'B'\n        elif gpa >= 2.3: return 'B-'\n        elif gpa >= 1.7: return 'C+'\n        elif gpa >= 1.3: return 'C'\n        elif gpa >= 1.0: return 'C-'\n        elif gpa >= 0.7: return 'D+'\n        elif gpa >= 0.0: return 'D'\n        else: return 'D-'\n\n    return [{'name': student['name'], 'grade': grade(student['GPA'] + count_consonants(student['name']) == n)} for student in student_info]\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def can_exchange(arr, lst1):\n        arr_sum = sum(arr)\n        lst1_sum = sum(lst1)\n        return (arr_sum + lst1_sum) % 2 == 0\n\n    arr = [n for n in arr if sum_digits(n) > 0]\n    return \"YES\" if can_exchange(arr, lst1) else \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n, m+1) if is_prime(x)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        elif balance == 0:\n            zero_sum_points += 1\n            if zero_sum_points == 3:\n                return True\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    notes = [\"o\", \"o|\", \".|\", \"|\"]\n    word = word[::-1]\n    music_string = music_string[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            for j in range(i + 1, len(music_string)):\n                if music_string[j] in notes:\n                    result.append(notes.index(music_string[j]) + 1)\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fib_lst = [0, 0, 1]\n    for i in range(3, n + 3):\n        fib_lst.append(fib_lst[i - 1] + fib_lst[i - 2] + fib_lst[i - 3])\n    fibn = fib_lst[n]\n    freq = {i: lst.count(i) for i in lst if i > 0}\n    max_val = max(freq.keys(), key=(lambda k: freq[k]))\n    return max_val if freq[max_val] >= fibn else -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    negative_balance = False\n    for op in operations:\n        balance += op\n        if balance < 0:\n            negative_balance = True\n        elif op < 0:\n            max_withdrawal = max(max_withdrawal, op)\n        else:\n            min_deposit = min(min_deposit, op)\n    return max_withdrawal, min_deposit, negative_balance\n"}
{"task_id": "EvoEval/20", "completion": "\n    def letter_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 3.0:\n            return 'B+'\n        elif gpa >= 2.7:\n            return 'B'\n        elif gpa >= 2.3:\n            return 'B-'\n        elif gpa >= 2.0:\n            return 'C+'\n        elif gpa >= 1.7:\n            return 'C'\n        elif gpa >= 1.3:\n            return 'C-'\n        elif gpa >= 1.0:\n            return 'D+'\n        elif gpa >= 0.7:\n            return 'D'\n        else:\n            return 'E'\n\n    return [(name[::-1].swapcase(), letter_grade(gpa)) for name, gpa in zip(s, grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base < 2 or base > 20:\n        return []\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return [''.join(digits[i:] + ['0'] * i for i in range(len(digits)))[::-1] for _ in range(len(digits))]\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n) * brazilian_fact(n-1)\n\n    levels = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            levels.append(levels[-1] + 2)\n        else:\n            levels.append(levels[-1] + 2)\n\n    return [brazilian_fact(i) for i in levels]\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    if len(num_list) % 3 != 0:\n        return 'Not a happy string'\n\n    for i in range(0, len(num_list), 3):\n        if len(set(num_list[i:i+3])) != 3:\n            return 'Not a happy string'\n\n    num_list = [num_dict[num] for num in num_list]\n    num_list.sort()\n    return ' '.join([str(num) for num in num_list])\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not triples:\n        return (0, 1)\n    else:\n        sum_first = sum([triple[0] for triple in triples])\n        product_first = 1\n        for triple in triples:\n            product_first *= triple[0]\n        return (sum_first, product_first)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Mapping from numeral to its value\n    numeral_values = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n\n    result = ()\n    min_even_value = float('inf')\n\n    for i, value in enumerate(values):\n        # Split the string into numerals and sort them\n        numerals = value.split()\n        numerals.sort(key=lambda x: numeral_values[x])\n\n        # Find the smallest even numeral\n        for numeral in numerals:\n            if numeral_values[numeral] % 2 == 0 and numeral_values[numeral] <= min_even_value:\n                min_even_value = numeral_values[numeral]\n                result = (numeral, i)\n\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_prime = [num for num in lst1 if is_prime(num)]\n    lst2_non_prime = [num for num in lst2 if not is_prime(num)]\n\n    if len(lst1_prime) == len(lst1) and len(lst2_non_prime) == len(lst2):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    grades_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', -1.0: 'E'}\n    result = []\n    for gpa in grades:\n        if gpa in grades_dict.keys():\n            if s0 == s1[::-1]:\n                result.append(grades_dict[gpa])\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return y\n    elif n == 1:\n        return y\n    else:\n        return largest_prime_factor(n) or x\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Split the music_string into individual notes\n    notes = music_string.split()\n\n    # Split the numerator and denominator of the fraction\n    numerator, denominator = map(int, x.split('/'))\n\n    # Create a dictionary to map notes to their lengths\n    note_lengths = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Create a list to store the result\n    result = []\n\n    # Iterate over each note\n    for note in notes:\n        # Calculate the length of the note\n        length = sum(note_lengths[part] for part in note.split('|'))\n\n        # If the length of the note is a whole number, add True to the result\n        if length * numerator % denominator == 0:\n            result.append(True)\n        # Otherwise, add False to the result\n        else:\n            result.append(False)\n\n    # Return the result\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    primes = factorize(n)\n    unique_primes = set(primes)\n    result = 1\n    for prime in unique_primes:\n        result *= factorial(primes.count(prime))\n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    def calculate_depth(s: str) -> int:\n        count = 0\n        max_count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif c == ')':\n                count -= 1\n        return max_count\n\n    def circular_shift(n: int, shift: int) -> List[int]:\n        s = str(n)\n        shift %= len(s)\n        return list(map(int, s[-shift:] + s[:-shift]))\n\n    return [circular_shift(calculate_depth(s), shift)[0] for s in input]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_val = 0\n    s = s.lower()\n    if len(s) < 3:\n        return False\n    if int(''.join([str(roman_dict[i]) for i in s])) > 1000:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    for i in range(len(s) - 1):\n        if roman_dict[s[i]] < roman_dict[s[i + 1]]:\n            int_val -= roman_dict[s[i]]\n        else:\n            int_val += roman_dict[s[i]]\n    int_val += roman_dict[s[-1]]\n    return int_val\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    import hashlib\n    def md5(s):\n        return hashlib.md5(s.encode()).hexdigest()\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    result = []\n\n    for group in groups:\n        stack = []\n        max_depth = 0\n        current_depth = 0\n\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if not stack:\n                    result.append(md5('None'))\n                    break\n                stack.pop()\n                current_depth -= 1\n        else:\n            if stack:\n                result.append(md5('None'))\n            else:\n                result.append(md5(str(max_depth)))\n\n    return result\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n        if len(key) != 3:\n            return False\n        if len(set(key)) != 3:\n            return False\n        if not isinstance(dict[key], str):\n            return False\n        if len(dict[key]) != 5:\n            return False\n        if len(set(dict[key])) != 5:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    # Your code here\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        else:\n            cur_sum = 0\n    even_count = sum(1 for c in str(min_sum) if int(c) % 2 == 0)\n    odd_count = sum(1 for c in str(min_sum) if int(c) % 2 != 0)\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_palindes = [i for i in range(1, n+1) if i == int(str(i)[::-1]) and i % 2 == 0]\n    odd_palindes = [i for i in range(1, n+1) if i == int(str(i)[::-1]) and i % 2 != 0]\n    even_count, odd_count = False, False\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] in even_palindes:\n                even_count = True\n            if l[i] + l[j] in odd_palindes:\n                odd_count = True\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes * x + y\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_odd_ends(n):\n        return str(n)[0] in '13579' and str(n)[-1] in '13579'\n\n    def largest_prime_odd_ends(nums):\n        primes = [n for n in nums if is_prime(n) and is_odd_ends(n)]\n        return max(primes) if primes else None\n\n    return largest_prime_odd_ends(nums)\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    if shift > len(s):\n        s = s[::-1]\n    shifted = ''.join(chr((ord(c) - 65 + shift) % 26 + 65) for c in s)\n    for i in range(0, len(shifted), 2):\n        if shifted[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n    from fractions import Fraction\n\n    def is_whole_number(n):\n        return n.is_integer()\n\n    def is_valid_expression(expression):\n        # Remove the brackets\n        expression = expression.strip(\"<>\")\n        # Split the expression by commas\n        fractions = expression.split(\",\")\n        product = Fraction(1, 1)\n        for fraction in fractions:\n            # Calculate the product of the fractions\n            product *= Fraction(fraction)\n        # Check if the product is a whole number\n        return is_whole_number(product)\n\n    # Find all expressions in the string\n    expressions = re.findall(r\"<[^>]*>\", string)\n    # Check each expression\n    return all(is_valid_expression(expr) for expr in expressions)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 1]\n    if n == 4:\n        return [0, 0, 1, 2]\n\n    fib = [0, 0, 0, 1, 2]\n    for i in range(5, n):\n        fib.append(fib[i-1] + fib[i-3] + fib[i-4])\n\n    if (fib[0] + fib[-1]) % 2 == 0:\n        fib.sort(reverse=True)\n    else:\n        fib.sort()\n\n    return fib\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = []\n    roman_num = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            number -= key\n            roman_num += roman_numerals[key]\n            result.append(roman_num)\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in numbers if is_prime(n)]\n    return (sum(primes), 1 if not primes else eval('*'.join(map(str, primes))))\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive_list = [num for num in l if num > 0 and num % 2 == 0]\n    if even_positive_list:\n        return max(even_positive_list)\n    else:\n        return \"-\"\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = \"AEIOU\"\n    n = sum(1 for c in s[::2] if c in vowels)\n    return [f\"In the string, the number of uppercase vowels in even indices is {n}, and the number of odd digits is {sum(1 for c in lst[i] if c in '13579')}. \" for i in range(len(lst))]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_n_mod_p = 2**n % p\n    count = 0\n    for num in arr:\n        if sum(int(digit) for digit in str(num)) > two_n_mod_p:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1, 2):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    import re\n\n    def modify(x):\n        if isinstance(x, str):\n            if re.search(r'[a-zA-Z]', x):\n                return x.lower() if x.isupper() else x.upper()\n            else:\n                return x[::-1]\n        else:\n            return x\n\n    a, b = modify(a), modify(b)\n\n    if isinstance(a, str) or isinstance(b, str):\n        return b\n\n    try:\n        a, b = float(a), float(b)\n        return max(a, b, key=lambda x: str(x))\n    except ValueError:\n        return b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    smallest_even_val = float('inf')\n    smallest_even_idx = -1\n    product_signs = 1\n    sum_magn = 0\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_val:\n            smallest_even_val = num\n            smallest_even_idx = i\n\n    if smallest_even_idx == -1:\n        return ([], None)\n\n    plucked_node = [smallest_even_val, smallest_even_idx]\n\n    for i, num in enumerate(arr):\n        if i != smallest_even_idx:\n            sum_magn += abs(num)\n            product_signs *= -1 if num < 0 else 1\n\n    return (plucked_node, sum_magn if sum_magn != 0 else None)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    grade_dict = {4.0: \"F\", 3.7: \"F\", 3.3: \"E\", 3.0: \"D\", 2.7: \"D\", 2.3: \"C\", 2.0: \"C\", 1.7: \"B\", 1.3: \"B\", 1.0: \"A\", 0.7: \"A\", 0.4: \"B\", 0.0: \"B\"}\n    prime_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for grade in grades:\n        if grade_dict[grade]:\n            if grade_dict[grade][0] in prime_grades:\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    # Define the mapping from numbers to roman numerals\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n\n    # Initialize the result string\n    result = ''\n\n    # Convert the number to its roman numeral equivalent\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    # Return the md5 hash of the result string\n    return hashlib.md5(result.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [i for i in factors if i % 2 != 0]\n    if not odd_factors:\n        return 0\n    product = 1\n    for i in odd_factors:\n        product *= i\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def is_odd_digit(n):\n        return all(int(d) % 2 == 1 for d in str(n))\n\n    changes = 0\n    for i in range(len(arr)):\n        if not is_palindrome(arr):\n            changes += 1\n            arr[i] = arr[-i - 1]\n        if not is_odd_digit(arr[i]):\n            changes += 1\n            arr[i] = int(''.join([str(d) for d in arr[i] if int(d) % 2 == 1]))\n    return changes\n\n"}
{"task_id": "EvoEval/58", "completion": "\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else int(s, 2) if base == 2 else \"\"\n\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [str(odd_count(base_change(s, base))) for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    if not triples:\n        return []\n    triples.sort()\n    smallest_triple = triples[0]\n    arr.append(smallest_triple[0])\n    smallest_even = [num for num in arr if num % 2 == 0]\n    if not smallest_even:\n        return []\n    smallest_even.sort()\n    return [smallest_even[0], arr.index(smallest_even[0])]\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words.sort(key=str.lower)\n    result = []\n    while words:\n        result.append(words.pop(0))\n        if words:\n            result.append(words.pop(-1))\n    return \"-\".join(result)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    planets = {\n        'zero': 'Mercury',\n        'one': 'Venus',\n        'two': 'Earth',\n        'three': 'Mars',\n        'four': 'Jupiter',\n        'five': 'Saturn',\n        'six': 'Uranus',\n        'seven': 'Neptune'\n    }\n\n    reverse_planets = {v: k for k, v in planets.items()}\n\n    if planet1 not in planets.values() or planet2 not in planets.values() or any(i not in reverse_planets for i in order.split()):\n        return 'Invalid'\n\n    order = [reverse_planets[i] for i in order.split()]\n\n    planet1, planet2 = reverse_planets[planet1], reverse_planets[planet2]\n\n    start, end = sorted([planet1, planet2])\n\n    return ' '.join([order[int(i)] for i in order if start <= i <= end])\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    modulo_result = 2**n % p\n    primes = [i for i in range(2, modulo_result) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (2 ** n) % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Find the largest even number in the range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Find the largest triple sum\n    max_sum = -1\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k] + largest_even)\n\n    return max_sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_digits_product(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum += odd_digits_product(nums[i])\n    return min_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    happy_strings = []\n    for string in lst:\n        if len(string) % 3 == 0:\n            distinct_chars = len(set(string))\n            if distinct_chars == 3:\n                happy_strings.append(string)\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_fact(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_fact(n - 1)\n\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n\n    for i in range(len(numbers) - 1):\n        fact1 = special_fact(numbers[i])\n        fact2 = special_fact(numbers[i + 1])\n        diff = abs(fact1 - fact2)\n\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazil_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazil_fact(n - 1)\n\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    max_weight = brazil_fact(n)\n    total_weight = sum(w)\n\n    return total_weight <= max_weight and is_balanced(w)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_fact(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            result = 1\n            for i in range(1, n + 1):\n                result *= i\n                result *= factorial(i - 1)\n            return result\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(special_fact(numbers[i]) - special_fact(numbers[i + 1])) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [Fraction(fraction) * n == Fraction(int(n.numerator / n.denominator)) for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Check if it is possible to make lst1 all even by exchanging elements with lst2\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\n    lst2_even = [i for i in lst2 if i % 2 == 0]\n    if len(lst1_odd) > len(lst2_even):\n        possible_exchange = \"NO\"\n    else:\n        possible_exchange = \"YES\"\n\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        sum_check = \"SUM\"\n    else:\n        sum_check = \"NO_SUM\"\n\n    return f\"{sum_check} {possible_exchange}\"\r\n\r\n\r"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified = [sum_digits(n) if is_prime(n) else n for n in lst]\n    return sorted(modified) if sum(modified[0::len(modified)-1]) % 2 else sorted(modified, reverse=True)\n"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] < 0:\n            digits = [int(d) for d in str(arr[i]) if d.isdigit()]\n            if sum(digits) > 0:\n                sum += arr[i]\n        else:\n            if arr[i] % 2 != 0:\n                digits = [int(d) for d in str(arr[i]) if d.isdigit()]\n                if sum(digits) > 0:\n                    sum += arr[i]\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].isupper() else s[i].upper()\n        else:\n            s = s[::-1]\n            break\n    s = \"\".join(s)\n    count = sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n    return (s, count)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) < 3:\n        return s[::-1]\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return s[-1] + s[:-1]\n\n    def decode(s: str) -> str:\n        return s[1:] + s[0]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n    result = ''.join([i for i in decoded if i not in c])\n\n    return (result, is_palindrome(result))\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n < 2:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib = [0, 0, 1]\n            for i in range(3, n + 1):\n                fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n            return fib[n]\n\n    fibfib_sequence = [fibfib(i) for i in range(n)]\n    mean = sum(fibfib_sequence) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 0, 1] + [0] * (n - 2)\n    for i in range(3, n):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3]\n        if fib[i] % 2 == 0:\n            fib[i] = prod_odd_digits(fib[i])\n    return fib[n - 1]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive underscores with a single underscore\n    text = re.sub(r'_{2,}', '_', text)\n\n    # Check if the length of the new string is a prime number\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst = sorted(lst, key=lambda x: (count_ones(x), x))\n    unique_values = list(set(lst))\n    unique_values.sort()\n\n    if len(unique_values) < 2:\n        return None\n    else:\n        return unique_values[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands &= set(operand_list)\n    if not common_operands:\n        return None\n    common_operands = sorted(list(common_operands))\n    result = common_operands[0]\n    for i in range(1, len(common_operands)):\n        if operators[i - 1] == '+':\n            result += common_operands[i]\n        elif operators[i - 1] == '-':\n            result -= common_operands[i]\n        elif operators[i - 1] == '*':\n            result *= common_operands[i]\n        elif operators[i - 1] == '//':\n            result //= common_operands[i]\n        elif operators[i - 1] == '**':\n            result **= common_operands[i]\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    for i in text:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                text = text.replace(i, '')\n            else:\n                stack.pop()\n        elif i in 'aeiou':\n            if not stack:\n                text = text.replace(i, '')\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if hashlib.md5(string.encode()).hexdigest().find(hash_substring) != -1:\n            result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        if not key.islower() and not key.isupper():\n            return {}\n        count = sum(letter in vowels for letter in key)\n        result[key] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sorted_even_indices = sorted(l[::2])\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            if is_prime(l[i]):\n                result.append(x)\n            else:\n                result.append(y)\n        else:\n            result.append(l[i])\n    return result\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = list(set(a) & set(l1))\n    common.sort()\n    if len(common) < 3:\n        return (common, 0)\n    else:\n        tri = 0\n        for i in range(len(common) - 2):\n            for j in range(i + 1, len(common) - 1):\n                for k in range(j + 1, len(common)):\n                    if common[i] + common[j] + common[k] % 3 == 0:\n                        tri += 1\n        return (common, tri)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if len(string) in prime_numbers:\n        for i in range(len(string)-2, 0, -1):\n            if string[i] in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n                return string[i]\n    return ''\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    positive_count = sum(sum_digits(n) > 0 for n in arr)\n    return sorted(arr, key=lambda n: (-sum_digits(n), n) if positive_count % 2 else (sum_digits(n), n))\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(sorted(filtered_strings), key=len)\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        if -i in common_elements:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n == 0:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not (key.islower() or key.isalpha()):\n            return False\n        count = 0\n        for char in value:\n            if char == \"(\":\n                count += 1\n            elif char == \")\":\n                if count == 0:\n                    return False\n                count -= 1\n        if count != 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if not 1 <= x <= 10**6 or not 2 <= base <= 10:\n        raise ValueError(\"Invalid input\")\n    return len(str(convert_base(x, base)))\n\n"}
