{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                return False\n        return True\n\n    a, b = a.replace(',', '.'), b.replace(',', '.')\n    a, b = float(a), float(b)\n\n    if is_happy(a) and is_happy(b):\n        return str(max(a, b))\n    elif is_happy(a):\n        return str(a)\n    elif is_happy(b):\n        return str(b)\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append((numbers[i] ** n) % p)\n        else:\n            result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    def sort_parentheses(lst: List[str]) -> str:\n        # sort the list of strings\n        lst.sort(key=len)\n\n        # check if the strings are balanced\n        for s in lst:\n            count = 0\n            for char in s:\n                if char == '(':\n                    count += 1\n                elif char == ')':\n                    count -= 1\n                if count < 0:\n                    return 'No'\n        return 'Yes'\n\n    # test the function\n    print(sort_parentheses(['(three)(', '(five) '(one)' == 'No'))\n    print(sort_parentheses(['(three)(', '(five) '(one)' == 'Yes'))\n    print(sort_parentheses(['(three)(', '(five) '(one)' == 'No'))\n    print(sort_parentheses(['(three)(', '(five) '(one)' == 'Yes'))\n    print(sort_parentheses(['(three)(', '(five) '(one)' == 'No'))\n    print(sort_parentheses(['(three)(', '(five) '(one)' == 'Yes'))\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        i = n - 1\n        while i > 1:\n            if n % i == 0 and is_prime(i):\n                return i\n            i -= 1\n        return 0\n\n    return sum(map(str, [largest_prime_divisor(i) for i in lst]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n\n    first_num = round(numbers[0])\n    last_num = round(numbers[-1])\n\n    if (first_num + last_num) % 2 == 0:\n        return sorted(numbers, reverse=True)\n    else:\n        return sorted(numbers)\n"}
{"task_id": "EvoEval/6", "completion": "\n    def pile_median(n):\n        if n % 2 == 0:\n            return (n**2 + n) / 2\n        else:\n            return (n**2 - n) / 2\n\n    return pile_median(n)\n"}
{"task_id": "EvoEval/7", "completion": "\n    def square_cube(i: int):\n        if i % 3 == 0:\n            return i ** 2\n        elif i % 4 == 0:\n            return i ** 3\n        else:\n            return i\n\n    return sum(square_cube(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        elif char == '<':\n            stack.append(char)\n        elif char == '>':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return False, count\n    return stack == [], count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet_roman = [\"I\", \"V\", \"X\", \"L\", \"D\", \"M\", \"V\", \"X\"]\n    planet_position = {\"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"Mars\": 4, \"Jupiter\": 5, \"Saturn\": 6, \"Uranus\": 7, \"Neptune\": 8}\n\n    if planet1 not in planet_names or planet2 not in planet_names:\n        return {}\n\n    position1 = planet_position[planet1]\n    position2 = planet_position[planet2]\n\n    if position1 > position2:\n        position1, position2 = position2, position1\n\n    planets_between = [planet for planet in planet_names[position1+1:position2] if planet_position[planet] > position1]\n\n    return {planet: planet_roman[planet_position[planet]] for planet in planets_between}\n"}
{"task_id": "EvoEval/10", "completion": "\n    def convert_to_letter_grade(gpa):\n        if gpa >= 37:\n            return 'A+'\n        elif gpa >= 33:\n            return 'A'\n        elif gpa >= 30:\n            return 'A-'\n        elif gpa >= 27:\n            return 'B+'\n        elif gpa >= 20:\n            return 'B'\n        elif gpa >= 17:\n            return 'B-'\n        elif gpa >= 10:\n            return 'C'\n        elif gpa >= 7:\n            return 'C-'\n        else:\n            return 'D'\n\n    def convert_to_proper_case(name):\n        return name.title()\n\n    return [(convert_to_proper_case(name), convert_to_letter_grade(gpa)) for name, gpa in name_grade_list]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def grade_from_consonants(consonants):\n        if consonants == 4:\n            return 'A+'\n        elif consonants == 3:\n            return 'A'\n        elif consonants == 2:\n            return 'A-'\n        elif consonants == 1:\n            return 'B+'\n        elif consonants == 0:\n            return 'B'\n        else:\n            return 'B-'\n\n    return [{'name': student['name'], 'grade': grade_from_consonants(count_consonants(student['name']))} for student in student_info if count_consonants(student['name']) != n]\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        n = abs(n)\n        return sum(int(digit) for digit in str(n))\n\n    filtered = [num for num in arr if sum_digits(num) > 0]\n    lst1 = [num for num in lst1 if sum_digits(num) > 0]\n\n    if sum_digits(sum(filtered)) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -\n    avg = round(sum(primes) / len(primes))\n    return \"0b\" + bin(avg)[2:]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance == 0:\n            return True\n        if balance < 0:\n            return False\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = 'aeiouAEIOU'\n    music_notes = music_string.split()\n    word_list = list(word)\n    word_list.reverse()\n    vowel_pos = []\n    for i in range(1, len(word_list) - 1):\n        if word_list[i] in vowels and word_list[i - 1] not in vowels and word_list[i + 1] not in vowels:\n            vowel_pos.append(i)\n    if not vowel_pos:\n        return []\n    result = []\n    for pos in vowel_pos:\n        if pos == 0:\n            result.append(music_notes.index('o') + 1)\n        elif pos == len(word_list) - 1:\n            result.append(music_notes.index('o') - 1)\n        else:\n            if word_list[pos - 1] not in vowels and word_list[pos + 1] not in vowels:\n                result.append(music_notes.index(music_notes[music_notes.index('o') + 1]) - 1)\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(3, n + 1):\n                a, b, c = b, c, a + b + c\n            return c\n\n    fib_n = fibfib(n)\n    max_val = -1\n    max_freq = 0\n    for num in lst:\n        freq = lst.count(num)\n        if freq >= fib_n and num > max_val:\n            max_val = num\n            max_freq = freq\n    return max_val\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                min_sum = min(min_sum, nums[i] + nums[j] + nums[k])\n\n    return min_sum if min_sum != float('inf') else 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance_fall_zero = False\n\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            balance_fall_zero = True\n        if operation < 0 and (largest_withdrawal is None or operation > largest_withdrawal):\n            largest_withdrawal = operation\n        if operation > 0 and (smallest_deposit is None or operation < smallest_deposit):\n            smallest_deposit = operation\n\n    return (largest_withdrawal, smallest_deposit, balance_fall_zero)\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(s):\n        return s.swapcase()\n\n    def assign_grade(gpa):\n        if gpa > 37:\n            return 'A+'\n        elif gpa > 30:\n            return 'A'\n        elif gpa > 27:\n            return 'B+'\n        elif gpa > 0:\n            return 'B'\n        else:\n            return 'C'\n\n    result = []\n    for name, gpas in zip(s, grades):\n        result.append((reverse_case(name), assign_grade(gpas[0])))\n\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    x_base = base_change(x, base)\n    prefixes = [x_base[i:] for i in range(len(x_base))]\n    return sorted(prefixes, key=len)\n"}
{"task_id": "EvoEval/22", "completion": "\n\n    def binaryplanet_distance(planet1, planet2):\n        planets = {\n            \"Mercury\": 1,\n            \"Venus\": 2,\n            \"Earth\": 3,\n            \"Mars\": 4,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8\n        }\n\n        if planet1 not in planets or planet2 not in planets:\n            return \"\"\n\n        planet1_index = planets[planet1]\n        planet2_index = planets[planet2]\n\n        if planet1_index < planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n\n        distance = planet2_index - planet1_index\n\n        binary_distance = bin(distance)[2:]\n\n        return \"bd\" + binary_distance\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazil_n(n):\n        if n % 2 == 0:\n            return n * factorial(n)\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(brazil_n(i))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        chars = [c for c in s if c != ' ']\n        for i in range(len(chars) - 2):\n            if len(set(chars[i:i+3])) != 3:\n                return False\n        return True\n\n    def sort_string(s: str) -> str:\n        return ' '.join(sorted(s.split(' ')))\n\n    if is_happy(numbers):\n        return sort_string(numbers)\n    else:\n        return 'Not a happy string'\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i for i in range(1, n + 1)]\n    valid_triples = [(a[i], a[j]) for i in range(n) for j in range(i + 1, n) if a[i] + a[j] % 3 == 0]\n    sum_valid_triples = sum(x[0] for x in valid_triples)\n    product_valid_triples = 1\n    if valid_triples:\n        product_valid_triples = reduce(lambda x, y: x * y, (x[0] for x in valid_triples))\n    return (sum_valid_triples, product_valid_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1 = [i for i in lst1 if is_prime(i)]\n    lst2 = [i for i in lst2 if is_prime(i)]\n\n    if len(lst1) == 0 or len(lst2) == 0:\n        return y\n\n    return x\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    def grade(gpa: float, s0: str, s1: str) -> str:\n        if gpa >= 3.7 and s0[0] == s1[0]:\n            return 'A+'\n        elif gpa >= 3.3 and gpa < 3.7 and s0[0] == s1[0]:\n            return 'A'\n        elif gpa >= 27 and s0[0] == s1[0]:\n            return 'B+'\n        elif gpa >= 23 and s0[0] == s1[0]:\n            return 'B'\n        elif gpa >= 20 and s0[0] == s1[0]:\n            return 'B-'\n        elif gpa >= 17 and s0[0] == s1[0]:\n            return 'C+'\n        elif gpa >= 10 and s0[0] == s1[0]:\n            return 'C'\n        elif gpa >= 7 and s0[0] == s1[0]:\n            return 'C-'\n        elif gpa >= 0 and s0[0] == s1[0]:\n            return 'D'\n        else:\n            return 'E'\n\n    return [grade(gpa, s0, s1) for gpa in grades if grade(gpa, s0, s1) != 'E']\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return largest_prime_factor(n)\n    else:\n        return x\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    beats = music_string.split('. ')\n    result = []\n    for beat in beats:\n        if 'o' in beat:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = factorize(n)\n    special_factorial = 1\n    for factor in factors:\n        special_factorial *= factor\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n        return max_depth\n\n    def circular_shift(n: int, shift: int) -> int:\n        digits = [int(d) for d in str(n)]\n        shift %= len(digits)\n        return int(''.join(map(str, digits[-shift:] + digits[:-shift])))\n\n    depths = [get_depth(s) for s in input]\n    total = sum(depths)\n    result = [int(d) for d in str(total)]\n    result = circular_shift(result, shift)\n    return [int(d) for d in str(result)]\n"}
{"task_id": "EvoEval/33", "completion": "\n    def is_happy(s):\n        if len(s) != 3 or not s.isdigit() or int(s) > 1000:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    def to_int(s):\n        roman_values = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n        int_val = roman_values[s[-1]]\n        for i in range(len(s) - 2, -1, -1):\n            if roman_values[s[i]] < roman_values[s[i + 1]]:\n                int_val -= roman_values[s[i]]\n            else:\n                int_val += roman_values[s[i]]\n        return int_val\n\n    if is_happy(s):\n        return to_int(s)\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    def md5_string(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def md5_nested_string(s: str) -> str:\n        levels = s.split(' ')\n        result = []\n        for level in levels:\n            if '(' in level:\n                result.append(md5_string(level))\n            else:\n                result.append(level)\n        return ' '.join(result)\n\n    return [md5_string(md5_nested_string(s)) for s in paren_string.split(' ')]\n"}
{"task_id": "EvoEval/35", "completion": "\n    def check_string(s):\n        if len(s) != 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    for key in dict:\n        if not key.islower() or not check_string(dict[key]):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(n):\n        if arr[i] != i:\n            return False\n    return True\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    min_index = -1\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        for j in range(i, len(nums)):\n            if nums[j] % 2 != 0:\n                if nums[i] % 2 == 0:\n                    even_count -= 1\n            if nums[i] % 2 == 0:\n                if even_count == 0 and nums[j] < min_sum:\n                    min_sum = nums[j]\n                    min_index = i\n            else:\n                if nums[j] % 2 != 0 and nums[j] < min_sum:\n                    min_sum = nums[j]\n                    min_index = i\n    return (min_index, min_sum)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def count_pals(l, n):\n        even_pals = [i for i in l if i % 2 == 0 and is_palindrome(i)]\n        odd_pals = [i for i in l if i % 2 != 0 and is_palindrome(i)]\n        return len(even_pals), len(odd_pals)\n\n    even, odd = count_pals(l, n)\n    return even > 0 and odd > 0\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def count_changes(arr):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes\r\n\r\n    if is_palindrome(arr):\r\n        return x\r\n    else:\r\n        return count_changes(arr) + x\r\n\r\n\r"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime(n):\n        largest = None\n        while n % 2 == 0:\n            largest = 2\n            n >>= 1\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                largest = i\n                n = n / i\n        if n > 2:\n            largest = n\n        return largest\n\n    primes = [num for num in nums if is_prime(num) and num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579']\n    if not primes:\n        return None\n    return largest_prime(max(primes))\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s.upper()\n    shift %= len(s)\n    shifted = s[shift:] + s[:shift]\n    count = 0\n    for i, c in enumerate(shifted):\n        if i % 2 == 0 and c in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    def check_fraction(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator > 0 and denominator > 0\n\n    def check_expression(expression: str) -> bool:\n        stack = []\n        for char in expression:\n            if char == '<':\n                stack.append(char)\n            elif char == '>':\n                if not stack or stack[-1] != '<':\n                    return False\n                stack.pop()\n        return not stack\n\n    expressions = expression.split(',')\n    for expression in expressions:\n        if not check_expression(f'<{expression}>'):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    def fib4(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 0\n        elif n == 3:\n            return 2\n        else:\n            return fib4(n - 1) + fib4(n - 2) + fib4(n - 3)\n\n    sequence = [fib4(i) for i in range(n)]\n    return sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    def int_to_roman(num: int) -> str:\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n    def all_prefixes(num: int) -> List[str]:\n        prefixes = []\n        for i in range(1, num + 1):\n            prefixes.append(int_to_roman(i))\n        return prefixes\n\n    return all_prefixes(number)\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_num += num\n            product_num *= num\n\n    return sum_num, product_num\n"}
{"task_id": "EvoEval/46", "completion": "\n    # filter out the negative largest even number\n    l = [i for i in l if i > 0 and i % 2 == 0]\n    # if there are no positive even numbers in the list, return -1\n    if not l:\n        return -1\n    # return the maximum number\n    return max(l)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    result = []\n    for i, string in enumerate(lst):\n        n = sum(s[i] in vowels for i in range(0, len(s), 2))\n        m = sum(int(c) % 2 for c in string)\n        result.append(f\"In the string, the number of upperc vow in even indices is '{n}', and the number odd digits is '{m}'.\")\n    return result\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def get_digits(n):\n        if n < 0:\n            return -1 * (abs(n) // p) - (abs(n) % p)\n        else:\n            return n // p + (n % p)\n\n    result = 0\n    for num in arr:\n        if get_digits(num) > 0:\n            result += 1\n    return result\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    word = word.upper()\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    def convert_to_num(s):\n        if '.' in s:\n            return float(s)\n        elif s.isalpha():\n            return s.lower() if s.isupper() else s.upper()\n        else:\n            return None\n\n    a = convert_to_num(a)\n    b = convert_to_num(b)\n\n    if a is None or b is None:\n        return b if a is None else a\n    elif a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        smallest_even = None\n        smallest_index = None\n        remaining_sum = 0\n        remaining_product = 1\n\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n                smallest_even = num\n                smallest_index = i\n\n        if smallest_even is not None:\n            remaining_sum = sum(x for x in arr if x != smallest_even)\n            remaining_product *= -1 if smallest_index % 2 == 0 else 1\n\n        return [smallest_even, smallest_index], remaining_sum * remaining_product\n\n    # Test cases\n    print(pluck_and_prod([42]))\n    print(pluck_and_prod([12]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n"}
{"task_id": "EvoEval/53", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    grade_map = {4.0: 'F', 3.0: 'E', 2.0: 'D', 1.0: 'C', 0.0: 'B', -1.0: 'A'}\n    prime_grades = ['D', 'B']\n    count = 0\n    for grade in grades:\n        if is_prime(grade_map.get(grade, 0)) in prime_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]) and is_prime(nums[j]):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"}\r\n    ints = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\r\n    roman_numeral_reversed = \"\"\r\n    i = 0\r\n    while number > 0:\r\n        for value in ints:\r\n            while number >= value:\r\n                number -= value\r\n                roman_numeral_reversed += roman_numerals[value]\r\n    return roman_numeral_reversed\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def odd_prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                if is_prime(i) and i % 2 != 0:\n                    factors.append(i)\n        if n > 1 and is_prime(n) and n % 2 != 0:\n            factors.append(n)\n        return factors\n\n    factors = odd_prime_factors(n)\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def is_odd_digit(arr):\n        return all(int(i) % 2 != 0 for i in str(arr))\n\n    if not is_palindrome(arr):\n        return \"Array is not palindrome\"\n    elif not is_odd_digit(arr):\n        return \"Array is not an array containing only odd digits\"\n    else:\n        odd_digit_arr = [int(i) for i in str(arr)]\n        odd_digit_arr.sort()\n        return sum(odd_digit_arr)\n"}
{"task_id": "EvoEval/58", "completion": "\n    from collections import Counter\n    cnt = Counter(lst)\n    max_fre = -1\n    for i in cnt:\n        if cnt[i] > max_fre:\n            max_fre = i\n    if max_fre == -1:\n        return (-1, False)\n    elif a == max_fre + max_fre:\n        return (max_fre, True)\n    else:\n        return (max_fre, False)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    def convert_to_base(n, base):\n        if n < base:\n            return str(n)\n        else:\n            return convert_to_base(n // base, base) + str(n % base)\n\n    def replace_odd_digits(s, base):\n        return ''.join(convert_to_base(int(c), base) for c in s)\n\n    return [replace_odd_digits(s, base) for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    def smallest_even_triple(arr, n):\n        arr.sort()\n        for i in range(n-2):\n            if arr[i] % 2 == 0:\n                return [arr[i], i, i+1]\n        return []\n\n    print(smallest_even_triple([3, 7, 13, 21], 4))\n    print(smallest_even_triple([4, 2, 1], 3))\n    print(smallest_even_triple([42], 5))\n    print(smallest_even_triple([], 0))\n    print(smallest_even_triple([10, 20, 30, 40, 50], 5))\n"}
{"task_id": "EvoEval/61", "completion": "\n    def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str, ...]]) -> Optional[Tuple[str, ...]]:\n        planet_chains = {planet1: [planet1]}\n\n        for chain in chains:\n            if chain[0] == planet1 and chain[-1] not in planet_chains:\n                planet_chains[chain[-1]] = [planet for planet in chain if planet not in planet_chains]\n\n        for planet in planet_chains:\n            if planet == planet2:\n                return tuple(planet_chains[planet])\n\n        return None\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.lower() for word in words]\n    words = sorted(words)\n    result = []\n    for word in words:\n        if word.isalpha():\n            if len(result) > 0:\n                if result[-1].isalpha():\n                    if result[-1][-1] == '-' and word[0] == '_':\n                        result[-1] = result[-1][:-1] + word[0]\n                    elif result[-1][-1] == '_' and word[0] == '-':\n                        result[-1] = result[-1][:-1] + word[0]\n                    else:\n                        result.append(word)\n                else:\n                    result.append(word)\n            else:\n                result.append(word)\n        else:\n            result.append(word)\n    return '-'.join(result)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def sort_planets(planet1: str, order: str) -> str:\n        planets = {\n            \"Mercury\": 0,\n            \"Venus\": 1,\n            \"Earth\": 2,\n            \"Mars\": 3,\n            \"Jupiter\": 4,\n            \"Saturn\": 5,\n            \"Uranus\": 6,\n            \"Neptune\": 7\n        }\n\n        order_list = list(map(int, order.split()))\n        valid_planets = [v for v in planets.values() if v in order_list]\n\n        if len(valid_planets) != len(order_list):\n            return 'Invalid'\n\n        sorted_planets = sorted(valid_planets, key=lambda x: planets[planet1], reverse=True)\n        return ' '.join(str(planets[p]) for p in sorted_planets)\n\n    print(sort_planets(\"Jupiter\", \"Zero One Two Three Four Five Six\"))\n    print(sort_planets(\"Earth\", \"Zero One Two Three Four Five\"))\n    print(sort_planets(\"Mars\", \"Zero One Two Three Four Five\"))\n    print(sort_planets(\"Uranus\", \"Zero One Two Three Four Five\"))\n    print(sort_planets(\"Neptune\", \"Zero One Two Three Four Five\"))\n    print(sort_planets(\"Pluto\", \"Zero One Two Three Four Five\"))\n    print(sort_planets(\"Earth\", \"Zero One Two Three Four Five Six\"))\n    print(sort_planets(\"Earth\", \"Zero One Two Three Four Five Seven\"))\n    print(sort_planets(\"Earth\", \"Zero One Two Three Four Five Seven Eight\"))\n\nThe function sort_planets takes two parameters, planet1 and order. The order is a string of space-separated numbers representing the order of the planets. The function first checks if the order string contains any number outside the range 0-7. If it does, the function returns 'Invalid'. If not, it sorts the planets according to the order string and returns a string of the planet names.\n\nThe function is tested with the examples provided in the problem statement.\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = 2 ** n % p\n    if not is_prime(result):\n        return []\n\n    primes = [i for i in range(2, result) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1 if p % 2 == 0 else 2\n    else:\n        return p - (2 ** n % p)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def find_max_even(x, y):\n        for i in range(y, x - 1, -1):\n            if i % 2 == 0:\n                return i\n        return -1\n\n    def find_largest_triple(a, n):\n        a.sort()\n        for i in range(n - 1, 1, -1):\n            if a[i] % 3 == 0 and a[i - 1] % 3 == 0 and a[i - 2] % 3 == 0:\n                return a[i] + a[i - 1] + a[i - 2]\n        return -1\n\n    max_even = find_max_even(x, y)\n    if max_even == -1:\n        a = [i * i - i + j for j in range(n)]\n    else:\n        a = [i * i - i + max_even for i in range(max_even, max_even + n)]\n    return find_largest_triple(a, n)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff and diff > threshold:\n            min_diff = diff\n    return min_diff if min_diff != float('inf') else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        product = 1\n        for digit in str(num):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    return min(minOddDigitsProduct(num) for num in nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        return len(set(s[i] + s[i+1] + s[i+2] for i in range(len(s)-2))) == 1\n\n    lst = [s for s in lst if is_happy(s)]\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n\n    def closest_special_factorial(numbers):\n        numbers.sort()\n        min_diff = float('inf')\n        result = None\n        for i in range(len(numbers)):\n            for j in range(i + 1, len(numbers)):\n                sum_fact = special_factorial(numbers[i]) + special_factorial(numbers[j])\n                diff = abs(sum_fact - special_factorial(numbers[i] * numbers[j]))\n                if diff < min_diff:\n                    min_diff = diff\n                    result = (numbers[i], numbers[j])\n        return result\n\n    return closest_special_factorial(numbers)\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazil_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazil_fact(n - 1)\n\n    max_weight = brazil_fact(n)\n    sum_weights = sum(w)\n\n    if sum_weights <= max_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if factorial(numbers[i]) + factorial(numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> Fraction:\n        numerator, denominator = map(int, fraction.split('/'))\n        return Fraction(numerator, denominator)\n\n    fractions = [simplify(fraction) for fraction in fractions]\n    n = simplify(n)\n\n    return [fraction * n == Fraction(1, 1) for fraction in fractions]\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def sum_of_even_numbers(lst):\n        return sum(n for n in lst if is_even(n))\n\n    lst1_even_sum = sum_of_even_numbers(lst1)\n    lst2_even_sum = sum_of_even_numbers(lst2)\n\n    if lst1_even_sum + lst2_even_sum > x:\n        return \"NO\"\n\n    if lst1_even_sum + lst2_even_sum == x:\n        return \"YES SUM\"\n\n    if lst1_even_sum + lst2_even_sum < x:\n        return \"NO\"\n\n    return \"NO\"\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        if not input_dict:\n            return {}\n        output_dict = {}\n        for key, value in input_dict.items():\n            try:\n                num = float(value)\n                if num.is_integer():\n                    num = int(num)\n                else:\n                    num = round(num)\n                output_dict[key] = num\n            except (ValueError, TypeError):\n                continue\n        return output_dict\n\n    print(transform_dict({\"a\":\"10\",15.3:\"11\"}))\n    print(transform_dict({\"a\":\" 8\",15.5:\"11\"}))\n    print(transform_dict({\"a\":\"10\",153:\"11\"}))\n    print(transform_dict({\"a\":\"10\",15.5}))\n    print(transform_dict({\"a\":\"10\",153}))\n    print(transform_dict({\"a\":\"10\",15.5:\"11\"}))\n\nThe function `transform_dict` takes a dictionary as an input and checks each value. If the value is a number, it is converted to a float. If the number is an integer, it is converted to an integer. If the number is not an integer, it is rounded to the nearest integer. The function then returns a new dictionary with the transformed values. If the value is not a number, the function ignores it and continues with the next value.\n\nThe function is tested with the provided examples.\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified_lst = [sum_digits(n) if is_prime(n) else n for n in lst]\n    modified_lst.sort()\n\n    if sum(modified_lst[0], modified_lst[-1]) % 2 == 0:\n        return modified_lst\n    else:\n        return modified_lst[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def is_signed(n):\n        return n < 0\n\n    def get_digits(n):\n        n = abs(n)\n        return [int(d) for d in str(n)]\n\n    def sum_digits(n):\n        return sum(get_digits(n))\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_in_even_position(n):\n        return n % 2 == 0\n\n    def sum_odd_in_even_position_with_positive_sum_of_digits(arr):\n        return sum(n for n in arr if is_signed(n) and is_odd(n) and is_in_even_position(n) and sum_digits(n) > 0)\n\n    return sum_odd_in_even_position_with_positive_sum_of_digits(arr)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in vowels:\n                count += 1\n            if i % 2 == 0:\n                result += s[i].swapcase()\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    return result, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not s.isalpha():\n        return s[::-1]\n    else:\n        return s[::-1].swapcase()\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = ''.join([encoded[i:i+3][::-1] for i in range(0, len(encoded), 3)])\n    return (decoded, is_palindrome(decoded))\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> List[int]:\n        if n == 0:\n            return [0]\n        elif n == 1:\n            return [0, 1]\n        else:\n            fib_sequence = [0, 1]\n            for i in range(2, n):\n                fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + i - 2 + 3)\n            return fib_sequence\n\n    fib_sequence = fibfib(n)\n    mean = sum(fib_sequence) / len(fib_sequence)\n    return sum(abs(x - mean) for x in fib_sequence) / len(fib_sequence)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def odd_fibfib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for _ in range(n - 1):\n                a, b, c = b, c, a + b + c\n            return c\n\n    def odd_fibfib_helper(n: int, a: int, b: int, c: int):\n        if n == 0:\n            return a\n        elif n == 1:\n            return b\n        else:\n            if a % 2 == 0:\n                a = 0\n            if b % 2 == 0:\n                b = 0\n            if c % 2 == 0:\n                c = 0\n            return odd_fibfib_helper(n - 1, b, c, a + b + c)\n\n    return odd_fibfib_helper(n, 0, 0, 1)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"_{2,}\", \"_\", text)\n    text = text.replace(\"-\", \"\")\n    length = len(text)\n    if length > 1:\n        for i in range(2, length):\n            if length % i == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {}\n            for letter in string[:i]:\n                if letter not in histogram[prefix]:\n                    histogram[prefix][letter] = 0\n                histogram[prefix][letter] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    if len(lst) < 2:\n        return None\n\n    return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    from functools import reduce\n    from operator import add\n\n    common_operands = set(reduce(add, operand_lists))\n    if not common_operands:\n        return None\n\n    def evaluate_expression(expression, operator, operands):\n        if operator == '+':\n            return sum(operands)\n        elif operator == '-':\n            return reduce(lambda a, b: a - b, operands)\n        elif operator == '*':\n            return reduce(lambda a, b: a * b, operands)\n        elif operator == '//':\n            return reduce(lambda a, b: a // b, operands)\n        elif operator == '**':\n            return reduce(lambda a, b: a ** b, operands)\n\n    return evaluate_expression(common_operands, operators[0], [operand for operand in operand_lists if common_operands.issubset(set(operand))])\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = 'aeiou'\n    for char in text:\n        if char in vowels:\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                text = text.replace(char, '')\n            else:\n                stack.pop()\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.split(\",\")\n    words = [word.strip() for word in words]\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=len)\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    if not strings:\n        return None\n    result = []\n    for string in strings:\n        if string.strip() != hash_substring:\n            result.append(string)\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for key in dict:\n        if not isinstance(key, str) or not key.islower():\n            return {}\n        count = 0\n        for char in key:\n            if char in vowels:\n                count += 1\n        if count != 0:\n            result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(len(l)):\n        if i % 2 == 0 and is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    l.sort()\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i for i in l1]\n    common_elements = [i for i in a if a.count(i) > 1]\n    common_triples = [(a[i], a[j]) for i in range(len(a)) for j in range(i + 1, len(a)) if a[i] % 3 == 0 and a[j] % 3 == 0]\n    return common_elements, len(common_triples)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    string = string.lower()\n    length = len(string)\n    if length == 1:\n        return ''\n    if length % 2 == 0:\n        return ''\n    for i in range(length - 2, 0, -2):\n        if string[i] in vowels and string[i - 1] in consonants and string[i + 1] in consonants:\n            return string[i]\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_sum_digits(arr):\n        count = 0\n        for num in arr:\n            if num < 0:\n                count += -1 * (num // 10) - (num % 10)\n            else:\n                count += num // 10 + num % 10\n        return count\n\n    def sort_array(arr):\n        arr.sort()\n        return arr\n\n    count = count_sum_digits(arr)\n    if count % 2 != 0:\n        arr = sort_array(arr)\n    else:\n        arr = sort_array(arr)[::-1]\n    return arr\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    return sorted([s for s in strings if substring in s and len(s) % 2 == 0], key=len)\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = [i for i in l1 if i in l2]\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            if common_elements[i] + common_elements[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def fib(n):\n        fib_seq = [0, 0, 1]\n        for i in range(3, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + i*i - i + 1)\n        return fib_seq\n\n    def tri(fib_seq):\n        tri_count = 0\n        for i in range(len(fib_seq)):\n            for j in range(i+1, len(fib_seq)):\n                for k in range(j+1, len(fib_seq)):\n                    if fib_seq[i] + fib_seq[j] + fib_seq[k] % 3 == 0:\n                        tri_count += 1\n        return tri_count\n\n    fib_seq = fib(n)\n    return tri(fib_seq)\n"}
{"task_id": "EvoEval/98", "completion": "\n    def check_dict_bracketing(dict):\n        for key, value in dict.items():\n            if not (value.isalpha() and value.count(\"(\") == value.count(\")\")):\n                return False\n        return True\n\n    # Test cases\n    print(check_dict_bracketing({\"a\":\"()(())\"})) # True\n    print(check_dict_bracketing({\"a\":\"()A\"})) # False\n    print(check_dict_bracketing({\"a\":\"(\",\")(\"})) # False\n    print(check_dict_bracketing({\"Name()Age(())\"})) # False\n    print(check_dict_bracketing({\"STATE\":\"()\", \"ZIP(())\"})) # True\n\ncheck_dict_bracketing()\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return len_base_conversion(x // base, base) + str(x % base)\n\n"}
