{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        for i in range(3):\n            if s[i] in s[i+1:3]:\n                return False\n        return True\n\n    happy_a = is_happy(a)\n    happy_b = is_happy(b)\n\n    if not happy_a and not happy_b:\n        return None\n    elif happy_a and not happy_b:\n        return a\n    elif not happy_a and happy_b:\n        return b\n    else:\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        elif float(a) < float(b):\n            return b\n        else:\n            return None\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_andflip(value: str) -> str:\n        num, string = value.split('.')\n        num = round(float(num))\n        if num % 2 == 0:\n            num = num - 1\n        string = string.swapcase()\n        return str(num) + ' ' + string\n\n    print(round_andflip(\"10.5abc\"))\n    print(round_andflip(\"15.3ABC\"))\n    print(round_andflip(\"14.5abc\"))\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append((2 ** n) % p)\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    \"\"\"\n\"\"\"\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n):\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    return max(digit_sum(largest_prime_divisor(n)) for n in lst)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            if round(numbers[0]) + round(numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n * (n + 1) / 2 + n / 2\n    else:\n        return n * (n + 1) / 2\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    bracket_count = string.count(bracket)\n    bracket_pairs = string.count('{}{}'.format(bracket, bracket))\n    bracket_sequence = bracket_pairs == bracket_count // 2\n    return bracket_sequence, bracket_count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune']\n    roman_nums = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii']\n    planet_to_num = {planet: num for planet, num in zip(planets, range(1, 9))}\n    num_to_roman = {num: roman for num, roman in zip(range(1, 9), roman_to_num)}\n    result = {}\n    if planet1 in planet_to_num and planet2 in planet_to_num:\n        start, end = min(planet_to_num[planet1], planet_to_num[planet2]), max(planet_to_num[planet1], planet_to_num[planet2])\n        for planet in planets[start:end]:\n            result[planet] = num_to_roman[planet_to_num[planet]]\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    grades_dict = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'E'}\n    result = []\n    for student in name_grade_list:\n        name = student[0]\n        gpa = student[1]\n        name = name[0].upper() + name[1:].lower()\n        for grade in grades_dict:\n            if gpa >= grade:\n                letter_grade = grades_dict[grade]\n                break\n        result.append((name, letter_grade))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    def grade(gpa):\n        if gpa >= 4.0: return 'A+'\n        elif gpa >= 3.7: return 'A'\n        elif gpa >= 3.3: return 'A-'\n        elif gpa >= 3.0: return 'B+'\n        elif gpa >= 2.7: return 'B'\n        elif gpa >= 2.3: return 'B-'\n        elif gpa >= 2.0: return 'C+'\n        elif gpa >= 1.7: return 'C'\n        elif gpa >= 1.3: return 'C-'\n        elif gpa >= 1.0: return 'D+'\n        elif gpa >= 0.7: return 'D'\n        else: return 'F'\n\n    result = []\n    for student in student_info:\n        name = student['name']\n        gpa = student['GPA']\n        consonants = count_consonants(name)\n        if consonants == n:\n            gpa += 0.3\n        gpa = min(4.0, gpa)\n        result.append({'name': name, 'grade': grade(gpa)})\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def can_exchange(arr, lst1):\n        arr = [n for n in arr if sum_digits(n) > 0]\n        lst1 = [n for n in lst1 if is_even(n)]\n        return all(is_even(n) for n in arr + lst1)\n\n    return \"YES\" if can_exchange(arr, lst1) else \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n, m+1) if is_prime(x)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance == 0:\n            zero_sum_points += 1\n    return zero_sum_points >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    notes = [\"o\", \"o|\", \".|\"]\n    word = word[::-1]\n    music_string = music_string[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            for j in range(len(music_string[:i])):\n                if music_string[j] in notes:\n                    result.append(notes.index(music_string[j]) + 1)\n            return result[::-1]\n    return []\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    fibfib_n = fib(fib(n))\n\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    for num in sorted(count_dict.keys(), reverse=True):\n        if count_dict[num] >= fibfib_n and num > 0:\n            return num\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return max_withdrawal, min_deposit, True\n        if op < min_deposit or min_deposit is None:\n            min_deposit = op\n        if op > max_withdrawal or max_withdrawal is None:\n            max_withdrawal = op\n    return max_withdrawal, min_deposit, False\n"}
{"task_id": "EvoEval/20", "completion": "\n    def letter_grade(gpa):\n        if gpa >= 4.0:\n            return 'A+'\n        elif gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'A-'\n        elif gpa >= 2.7:\n            return 'B+'\n        elif gpa >= 2.0:\n            return 'B0'\n        elif gpa >= 1.7:\n            return 'B-'\n        elif gpa >= 1.3:\n            return 'C+'\n        elif gpa >= 1.0:\n            return 'C0'\n        elif gpa >= 0.7:\n            return 'C-'\n        elif gpa >= 0.0:\n            return 'D'\n        else:\n            return 'E'\n\n    return [(name[::-1].lower(), letter_grade(gpa)) for name, gpa in zip(s, grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    base_x = \"\"\n    while x > 0:\n        base_x = str(x % base) + base_x\n        x = x // base\n    prefixes = [str(i) for i in range(1, len(base_x) + 1)]\n    return [base_x[0:i] for i in prefixes]\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return factorial(n) * brazilian_factorial(n-2)\n\n    result = []\n    for i in range(n, 0, -1):\n        result.append(brazilian_factorial(i))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    happy_numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    if len(numbers_list) % 3 != 0:\n        return 'Not a happy string'\n    for i in range(0, len(numbers_list), 3):\n        if numbers_list[i:i+3] not in happy_numbers:\n            return 'Not a happy string'\n    numbers_list.sort(key=lambda x: happy_numbers.index(x))\n    return ' '.join(numbers_list)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = [(a[i], a[j]) for i in range(n) for j in range(i + 1, n) if (a[i] + a[j]) % 3 == 0]\n    if not triples:\n        return (0, 1)\n    sum_first = sum(triple[0] for triple in triples)\n    product_first = 1\n    for triple in triples:\n        product_first *= triple[0]\n    return (sum_first, product_first)\n"}
{"task_id": "EvoEval/26", "completion": "\n    if not values:\n        return ()\n    even_nums = []\n    for i, s in enumerate(values):\n        for j, num in enumerate(sorted(s.split())):\n            if int(num) % 2 == 0:\n                even_nums.append((num, i, j))\n    if not even_nums:\n        return ()\n    even_nums.sort()\n    return (even_nums[0][0], even_nums[0][1])\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_prime = [num for num in lst1 if is_prime(num)]\n    lst1_non_prime = [num for num in lst1 if not is_prime(num)]\n    lst2_prime = [num for num in lst2 if is_prime(num)]\n    lst2_non_prime = [num for num in lst2 if not is_prime(num)]\n\n    if len(lst1_prime) + len(lst2_non_prime) >= len(lst1) and len(lst1_non_prime) + len(lst2_prime) >= len(lst2):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    grades_table = {4.0: \"A+\", 3.7: \"A+\", 3.3: \"A\", 3.0: \"A-\", 2.7: \"B+\", 2.3: \"B\", 2.0: \"B-\", 1.7: \"C+\", 1.3: \"C\", 1.0: \"C-\", 0.7: \"D+\", 0.0: \"D\"}\n    result = []\n    for gpa in grades:\n        if gpa in grades_table.keys():\n            if s0[0] == s1[0] and s0[1] == s1[1] and s0[2] == s1[2] and s0[3] == s1[3] and s0[4] == s1[4] and s0[5] == s1[5]:\n                result.append(grades_table[gpa])\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return x\n    else:\n        return y if n == 1 else largest_prime_factor(n)\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Split the music_string into a list of notes\n    notes = music_string.split()\n\n    # Split the fraction into numerator and denominator\n    numerator, denominator = map(int, x.split('/'))\n\n    # Define the length of each note\n    note_length = {'o': 4, 'o|': 2, '.|': 1, '|': 1}\n\n    # Calculate the total beats of the music\n    total_beats = len(notes) * note_length['o']\n\n    # Calculate the target beats\n    target_beats = total_beats * numerator // denominator\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the notes\n    for note in notes:\n        # Calculate the beats of the note\n        beats = len(note) * note_length[note]\n\n        # Check if the beats of the note are equal to the target beats\n        result.append(beats == target_beats)\n\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    prime_factor_list = prime_factors(n)\n    unique_prime_factors = set(prime_factor_list)\n    special_fact = 1\n\n    for prime_factor in unique_prime_factors:\n        count = prime_factor_list.count(prime_factor)\n        special_fact *= factorial(prime_factor) ** count\n\n    return special_fact\n"}
{"task_id": "EvoEval/32", "completion": "\n    def calculate_depth(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    depths = [calculate_depth(s) for s in input]\n    num = int(''.join(map(str, depths)))\n    shifted = list(str(num))[-shift:] + list(str(num))[:-shift]\n    return [int(i) for i in shifted]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_to_int = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_to_roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    if len(s) < 3:\n        return False\n    if len(s) > 3 and s[0] == s[1] == s[2]:\n        return False\n    if len(s) > 3 and s[1] == s[2] == s[3]:\n        return False\n    if len(s) > 3 and s[2] == s[3] == s[4]:\n        return False\n    if len(s) > 3 and s[3] == s[4] == s[5]:\n        return False\n    if len(s) > 3 and s[4] == s[5] == s[6]:\n        return False\n    if len(s) > 3 and s[5] == s[6] == s[7]:\n        return False\n    if len(s) > 3 and s[6] == s[7] == s[8]:\n        return False\n    if len(s) > 3 and s[7] == s[8] == s[9]:\n        return False\n    if len(s) > 3 and s[8] == s[9] == s[10]:\n        return False\n    if len(s) > 3 and s[9] == s[10] == s[11]:\n        return False\n    if len(s) > 3 and s[10] == s[11] == s[12]:\n        return False\n    if len(s) > 3 and s[11] == s[12] == s"}
{"task_id": "EvoEval/34", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/35", "completion": "\n    for key in dict.keys():\n        if not key.islower():\n            return False\n        if len(key) != 3:\n            return False\n        if len(set(key)) != 3:\n            return False\n    for value in dict.values():\n        if not isinstance(value, str):\n            return False\n        if len(value) != 3:\n            return False\n        if len(set(value)) != 3:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    arr.sort()\n    for i in range(n):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    even_count = 0\n    odd_count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            sum_sub_array = sum(sub_array)\n            if sum_sub_array < min_sum:\n                min_sum = sum_sub_array\n                even_count = sum(1 for num in sub_array if num % 2 == 0)\n                odd_count = sum(1 for num in sub_array if num % 2 != 0)\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_pales = [i for i in range(1, n + 1) if i % 2 == 0]\n    odd_pales = [i for i in range(1, n + 1) if i % 2 != 0]\n\n    even_sum = sum([i for i in even_pales if i in l])\n    odd_sum = sum([i for i in odd_pales if i in l])\n\n    even_bool = any(i + j == even_sum for i in l for j in l if i != j)\n    odd_bool = any(i + j == odd_sum for i in l for j in l if i != j)\n\n    return even_bool, odd_bool\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    suffix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n        suffix_sum[i + 1] = suffix_sum[i] + arr[n - i - 1]\n    min_changes = float('inf')\n    for i in range(n + 1):\n        min_changes = min(min_changes, prefix_sum[i] + suffix_sum[n - i] - 2 * arr[i])\n    return min_changes + x + y\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def satisfies_condition(n):\n        if n < 10:\n            return False\n        str_n = str(n)\n        return int(str_n[0]) in [1, 3, 5, 7, 9] and is_prime(n)\n\n    max_prime = None\n    for num in nums:\n        if satisfies_condition(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n    return max_prime\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    if shift > len(s):\n        s = s[::-1]\n    s = list(s)\n    for i in range(0, len(s), 2):\n        s[i] = chr((ord(s[i]) - 65 + shift) % 26 + 65)\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n    from fractions import Fraction\n\n    def is_whole(n):\n        return n.is_integer()\n\n    def is_valid(expression):\n        fractions = re.findall(r'<[\\d]+/[\\d]+>', expression)\n        product = Fraction(1, 1)\n        for fraction in fractions:\n            num, denom = map(int, fraction[1:-1].split('/'))\n            product *= Fraction(num, denom)\n        return is_whole(product)\n\n    return is_valid(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n    if n == 4:\n        return [0, 0, 2, 2]\n\n    sequence = [0, 0, 2, 2] + [0] * (n - 4)\n    for i in range(4, n):\n        sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i - 3] + sequence[i - 4]\n\n    if (sequence[0] + sequence[-1]) % 2 == 0:\n        sequence.sort()\n    else:\n        sequence.sort(reverse=True)\n\n    return sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman_num = ''\n    num_list = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for i in num_list:\n        while number >= i:\n            roman_num += roman_dict[i]\n            number -= i\n    prefixes = []\n    for i in range(1, len(roman_num) + 1):\n        prefixes.append(roman_num[:i])\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in numbers if is_prime(n)]\n    prime_sum = sum(primes)\n    prime_product = 1\n    for prime in primes:\n        prime_product *= prime\n\n    return (prime_sum, prime_product)\n"}
{"task_id": "EvoEval/46", "completion": "\n    positive_even_numbers = [num for num in l if num > 0 and num % 2 == 0]\n    if not positive_even_numbers:\n        return -1\n    else:\n        return max(positive_even_numbers)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = \"AEIOU\"\n    upper_vowels = sum(1 for c in s if c in vowels and int(s.index(c)) % 2 == 0)\n    result = []\n    for i in lst:\n        odd_digits = sum(1 for c in i if int(c) % 2 != 0)\n        result.append(f\"In the string, the number of uppercase vow in even indices is {upper_vowels}, and the number of odd digits is {odd_digits}.\")\n    return result\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_n_mod_p = 2**n % p\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * (abs(num) % 10)\n            while num:\n                if (num % 10) > two_n_mod_p:\n                    count += 1\n                    break\n                num = num // 10\n        else:\n            while num:\n                if (num % 10) > two_n_mod_p:\n                    count += 1\n                    break\n                num = num // 10\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1, 2):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    import re\n\n    def modify(x):\n        if isinstance(x, str):\n            if re.match(\"^[a-zA-Z]*$\", x):\n                return x.lower() if x.isupper() else x.upper()\n            else:\n                return x[::-1]\n        else:\n            return x\n\n    a, b = modify(a), modify(b)\n\n    if isinstance(a, str) or isinstance(b, str):\n        return b\n\n    try:\n        a, b = float(a), float(b)\n    except ValueError:\n        return b\n\n    if a == b:\n        return None\n    else:\n        return max(a, b) if isinstance(a, float) else min(a, b)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    smallest_even_val = float('inf')\n    smallest_even_idx = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even_val:\n            smallest_even_val = val\n            smallest_even_idx = i\n\n    if smallest_even_idx == -1:\n        return ([], None)\n\n    plucked_node = [smallest_even_val, smallest_even_idx]\n\n    sum_remaining_nodes = sum(abs(val) for val in arr[smallest_even_idx+1:])\n\n    product_signs = 1\n    for val in arr[smallest_even_idx+1:]:\n        if val < 0:\n            product_signs *= -1\n\n    return (plucked_node, sum_remaining_nodes * product_signs)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    grade_dict = {4.0: 'F', 3.7: 'E', 3.0: 'D', 2.7: 'C', 3.3: 'B', 2.0: 'A', 1.7: '8', 1.3: '7', 0.7: '6', 0.0: '5'}\n    prime_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for gpa in grades:\n        if grade_dict[gpa] in prime_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    if number > 0:\n        for key in sorted(roman_numerals.keys(), reverse=True):\n            while number >= key:\n                result += roman_numerals[key]\n                number -= key\n    else:\n        return None\n    return hashlib.md5(result.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [i for i in factors if i % 2 != 0]\n    if not odd_factors:\n        return 0\n    product = 1\n    for i in odd_factors:\n        product *= i\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def is_odd_digit(arr):\n        return all(int(digit) % 2 == 1 for num in arr for digit in str(num))\n\n    changes = 0\n    if not is_palindrome(arr):\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n    if not is_odd_digit(arr):\n        changes += sum(int(digit) % 2 == 0 for num in arr for digit in str(num))\n    return changes\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    def max_fre_andsum_check(lst, a, b):\n        from collections import Counter\n        c = Counter(lst)\n        max_fre = max([k for k, v in c.items() if v >= k], default=-1)\n        if max_fre == -1:\n            return (max_fre, False)\n        else:\n            return (max_fre, (a == max_fre + b) or (b == max_fre + a))\n\n    print(max_fre_andsum_check([4, 1, 2, 2, 3, 1], 2, 0))  # \ufffd\ufffd\ufffd (2, True)\n    print(max_fre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2))  # \ufffd (3, True)\n    print(max_fre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 8, 3))  # \ufffd (-1, False)\n    print(max_fre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 10, 5))  # \ufffd (-1, False)\n    print(max_fre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 4))  # \ufffd (4, True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def odd_count(s):\n        return sum(int(c) % 2 for c in s)\n\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else int(s, 2) if base == 2 else ''\n\n    return [str(odd_count(base_change(s, base))) for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    smallest_triple = (float('inf'), float('inf'), float('inf'))\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    if (a[i], a[j], a[k]) < smallest_triple:\n                        smallest_triple = (a[i], a[j], a[k])\n    if smallest_triple == (float('inf'), float('inf'), float('inf')):\n        return []\n    arr.append(smallest_triple[0])\n    smallest_even = float('inf')\n    index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            index = i\n    if smallest_even == float('inf'):\n        return []\n    return [smallest_even, index]\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words.sort(key=str.lower)\n    result = []\n    while words:\n        result.append(words.pop(0))\n        if words:\n            result.append('_' if len(result) % 2 else '-')\n            result.append(words.pop())\n    return ''.join(result)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    planets = {\n        'Mercury': 0,\n        'Venus': 1,\n        'Earth': 2,\n        'Mars': 3,\n        'Jupiter': 4,\n        'Saturn': 5,\n        'Uranus': 6,\n        'Neptune': 7\n    }\n\n    order = order.split()\n\n    if planet1 not in planets or planet2 not in planets or any(o not in planets for o in order):\n        return 'Invalid'\n\n    if len(order) != len(set(order)):\n        return 'Invalid'\n\n    planet1_index = planets[planet1]\n    planet2_index = planets[planet2]\n\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n\n    return ' '.join([planets_inv[int(o)] for o in order if planet1_index <= int(o) <= planet2_index])\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    mod_result = 2**n % p\n    primes = [i for i in range(2, mod_result) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/65", "completion": "\n    largest_divisor = 1\n    for i in range(2, p):\n        if (pow(2, n, p) % i) == 0:\n            largest_divisor = i\n    return largest_divisor\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # find the largest even number in the range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # find the largest triple\n    max_sum = -1\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k])\n\n    # return the sum of the largest triple and the largest even number\n    return max_sum + largest_even\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_digits_product(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_sum = 0\n    for i in range(len(nums)):\n        min_sum += odd_digits_product(nums[i])\n    return min_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    happy_strings = []\n    for string in lst:\n        if len(string) % 3 == 0:\n            distinct_chars = len(set(string))\n            if distinct_chars == 3:\n                happy_strings.append(string)\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_fact(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_fact(n - 1)\n\n    special_fact_numbers = [special_fact(n) for n in numbers]\n    special_fact_numbers.sort()\n\n    min_diff = float('inf')\n    result = (0, 0)\n\n    for i in range(len(special_fact_numbers) - 1):\n        diff = abs(special_fact_numbers[i] - special_fact_numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (special_fact_numbers[i], special_fact_numbers[i + 1])\n\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazil_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * math.factorial(n)\n\n    max_weight = brazil_factorial(n)\n    sum_weight = sum(w)\n\n    if sum_weight <= max_weight and is_balanced(w):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    def special_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1) * special_fact(n - 1)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(special_fact(numbers[i]) - special_fact(numbers[j])) <= threshold:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [Fraction(fraction) * n == Fraction(fraction).numerator // Fraction(fraction).denominator for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Check if lst1 contains any odd numbers\n    for num in lst1:\n        if num % 2 != 0:\n            return \"NO\"\n\n    # Check if lst2 contains any even numbers\n    for num in lst2:\n        if num % 2 == 0:\n            return \"YES\"\n\n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        return \"SUM YES\"\n    else:\n        return \"NO_SUM YES\"\n\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified = [sum_digits(n) if is_prime(n) else n for n in lst]\n    return sorted(modified) if sum(modified[0::len(modified)-1]) % 2 else sorted(modified, reverse=True)\n"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] < 0:\n            arr[i] = -1 * sum_digits(arr[i])\n        if arr[i] % 2 != 0 and sum_digits(arr[i]) > 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].isupper() else s[i].upper()\n        else:\n            s = s[::-1]\n            break\n    s = \"\".join(s)\n    count = sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n    return (s, count)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) != 3:\n        return s[::-1]\n    if s[0] == s[1] or s[1] == s[2] or s[2] == s[0]:\n        return s\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return s[-2:] + s[:-2]\n\n    def decode(s: str) -> str:\n        return s[2:] + s[:2]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n    result = ''.join([i for i in decoded if i not in c])\n\n    return (result, is_palindrome(result))\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    mean = sum(fibfib) / n\n    mad = sum(abs(x - mean) for x in fibfib) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    odd_fibfib_list = [0, 0, 1]\n    for i in range(3, n + 1):\n        odd_fibfib_list.append(odd_fibfib_list[i - 1] + odd_fibfib_list[i - 2] + odd_fibfib_list[i - 3])\n        if odd_fibfib_list[i] % 2 == 0:\n            odd_fibfib_list[i] = odd_product(odd_fibfib_list[i])\n    return odd_fibfib_list[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive underscores with a single underscore\n    text = re.sub(r'_{2,}', '_', text)\n\n    # Check if the length of the new string is a prime number\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    def count_ones(n):\n        return bin(n).count(\"1\")\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    unique_nums = list(set(lst))\n    unique_nums.sort()\n\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return unique_nums[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands = common_operands.intersection(operand_list)\n    if not common_operands:\n        return None\n    common_operands = sorted(list(common_operands))\n    result = common_operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += common_operands[i+1]\n        elif operators[i] == '-':\n            result -= common_operands[i+1]\n        elif operators[i] == '*':\n            result *= common_operands[i+1]\n        elif operators[i] == '//':\n            result //= common_operands[i+1]\n        elif operators[i] == '**':\n            result **= common_operands[i+1]\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    for ch in text:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if not stack or stack[-1] != '(':\n                return text\n            stack.pop()\n        elif ch.lower() in 'aeiou':\n            if stack and stack[-1] == '(':\n                continue\n            else:\n                stack.append(ch)\n    if stack:\n        return text\n    return ''.join(stack)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if hashlib.md5(string.encode()).hexdigest().find(hash_substring) != -1:\n            result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        if not key.islower():\n            return {}\n        count = sum(letter in vowels for letter in key)\n        result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n\n    for i in range(len(even_indices)):\n        if is_prime(even_values[i]):\n            even_values[i] = x\n        else:\n            even_values[i] = y\n\n    result = l.copy()\n    for i, v in zip(even_indices, even_values):\n        result[i] = v\n\n    return result\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = list(set(a) & set(l1))\n    common.sort()\n    if len(common) < 3:\n        return (common, 0)\n    else:\n        tri = [(i, j, k) for i in common for j in common for k in common if i < j < k and (i + j + k) % 3 == 0]\n        return (common, len(tri))\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if len(string) in prime_numbers:\n        for i in range(len(string) - 2, 0, -1):\n            if string[i] not in vowels and string[i - 1] not in vowels and string[i + 1] not in vowels:\n                return string[i]\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    def sort_func(n):\n        return abs(sum_digits(n))\n\n    positive_count = sum(sum_digits(n) > 0 for n in arr)\n\n    return sorted(arr, key=sort_func) if positive_count % 2 == 1 else sorted(arr)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(sorted(filtered_strings), key=len)\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        if -i in common_elements:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + 3 * i * i - i + 1)\n\n    tri_count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    tri_count += 1\n\n    return tri_count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        value = dict[key]\n        if not isinstance(value, str):\n            return False\n        bracket_count = 0\n        for char in value:\n            if char == \"(\":\n                bracket_count += 1\n            elif char == \")\":\n                bracket_count -= 1\n            if bracket_count < 0:\n                return False\n        if bracket_count != 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return len(str(convert_base(x, base)))\n\n"}
