{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                return False\n        return True\n\n    a, b = a.replace('happy', ''), b.replace('happy', '')\n\n    if not is_happy(a) and not is_happy(b):\n        return None\n    elif is_happy(a):\n        return a\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append((2 ** n) % p)\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    def test_sort_parentheses():\n        assert sort_parentheses(['(three)(', '(five)one']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', 'good, while( not']) == 'No'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four', '(fivethree)Yes']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four', '(fivethree)Yes', '(six)eight']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four', '(fivethree)Yes', '(six)eight', '(nine)zero']) == 'No'\n\n    test_sort_parentheses()\n\n    \"\"\"\n    def sort_parentheses(lst: List[str]) -> str:\n        # Your code here\n        pass\n    \"\"\"\n    def test_sort_parentheses():\n        assert sort_parentheses(['(three)(', '(five)one']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', 'good, while( not']) == 'No'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four', '(fivethree)Yes']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four', '(fivethree)Yes', '(six)eight']) == 'Yes'\n        assert sort_parentheses(['(three)(onefive', '(onefour)four', '(fivethree)Yes', '(six)eight', '(nine)zero']) == 'No'\n\n    test_sort_parentheses()\n\n   "}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        i = n - 1\n        while i > 1:\n            if n % i == 0 and is_prime(i):\n                return i\n            i -= 1\n        return 0\n\n    return sum(map(str, [largest_prime_divisor(n) for n in lst]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] + numbers[j] - threshold) < 0.0001:\n                if (numbers[i] + numbers[j]) % 2 == 0:\n                    numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    def pile_median(n):\n        if n % 2 == 0:\n            return (n / 2) + 0.5\n        else:\n            return n / 2\n\n    return pile_median(n)\n"}
{"task_id": "EvoEval/7", "completion": "\n    result = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            result += i**2\n        elif i % 4 == 0:\n            result += i**3\n        else:\n            result += i\n    return result\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        elif char == '<':\n            stack.append(char)\n        else:\n            if not stack:\n                return False, count\n            stack.pop()\n    return not stack, count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"]\n    planet_orbits = [1, 2, 3, 4]\n    planet_roman = [\"I\", \"V\", \"X\", \"L\"]\n\n    if planet1 not in planet_names or planet2 not in planet_names:\n        return {}\n\n    index1 = planet_names.index(planet1)\n    index2 = planet_names.index(planet2)\n\n    if index1 > index2:\n        index1, index2 = index2, index1\n\n    result = {}\n    for i in range(index1+1, index2):\n        result[planet_names[i]] = planet_roman[planet_orbits[i]-1]\n\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    def grade_to_letter(grade):\n        if grade == 40:\n            return 'A+'\n        elif grade == 37:\n            return 'A'\n        elif grade == 30:\n            return 'B+'\n        elif grade == 27:\n            return 'B'\n        elif grade == 0:\n            return 'E'\n        else:\n            return 'F'\n\n    def proper_case(name):\n        return name.title()\n\n    return [(proper_case(name), grade_to_letter(grade)) for name, grade in name_grade_list]\n"}
{"task_id": "EvoEval/11", "completion": "\n\n    def planet_vowelcount(planet1, planet2):\n        planets = {\n            \"Mercury\": 1,\n            \"Venus\": 2,\n            \"Earth\": 3,\n            \"Mars\": 4,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8,\n            \"Pluto\": 9\n        }\n\n        if planet1 not in planets or planet2 not in planets:\n            return 0\n\n        start, end = planets[planet1], planets[planet2]\n        return sum(1 for planet in planets if planets[planet] > start and planets[planet] <= end)\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def grade_from_gpa(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa == 3.0:\n            return 'A'\n        elif gpa == 2.0:\n            return 'B+'\n        elif gpa == 1.0:\n            return 'B'\n        elif gpa == 0.0:\n            return 'B-'\n        else:\n            return 'D'\n\n    def grade_student(student):\n        name, gpa = student['name'], float(student['GPA'])\n        if count_consonants(name) == n:\n            return {'name': name, 'grade': grade_from_gpa(gpa)}\n        else:\n            return {'name': name, 'grade': grade_from_gpa(gpa)}\n\n    return [grade_student(student) for student in student_info]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    filtered_arr = [num for num in arr if sum_digits(num) > sum_digits(num) % 2]\n    lst1.sort(reverse=True)\n\n    for i in range(len(filtered_arr)):\n        if sum_digits(filtered_arr[i]) > sum_digits(filtered_arr[i]) % 2:\n            lst1.append(filtered_arr.pop(i))\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    return \"YES\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance == 0 and len(set(operations[i] for i in range(len(operations)) if operations[i] == op)) > 2:\n            return False\n    return True\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    music_notes = {\n        \"o\": 4,\n        \"|\": 2,\n        \".\": 1,\n        \"o|\": 3,\n        \"o...\": 5,\n        \"o o\": 6,\n        \"o o o\": 7,\n    }\n\n    word_list = list(word)\n    result = []\n\n    for i in range(1, len(word_list) - 1):\n        if word_list[i] in vowels:\n            if word_list[i - 1] not in vowels and word_list[i + 1] not in vowels:\n                result.append(music_notes[music_string[music_string.index(word_list[i]):]])\n\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, n + 1):\n                a, b = b, a + b\n            return b\n\n    def count_freq(n: int, lst: list) -> dict:\n        freq = {}\n        for i in lst:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n        return freq\n\n    freq = count_freq(n, lst)\n    max_val = max(freq.keys())\n    while fibfib(max_val) < n:\n        max_val += 1\n    return max_val\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                sum_triplet = nums[i] + nums[j] + nums[k]\n                if sum_triplet < min_sum:\n                    min_sum = sum_triplet\n\n    return min_sum\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance_zero_fall = False\n\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            balance_zero_fall = True\n        if largest_withdrawal is None or operation > largest_withdrawal:\n            largest_withdrawal = operation\n        if smallest_deposit is None or operation < smallest_deposit:\n            smallest_deposit = operation\n\n    return (largest_withdrawal, smallest_deposit, balance_zero_fall)\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(s):\n        return s.swapcase()\n\n    def assign_grade(gpa):\n        if gpa > 3.7:\n            return 'A+'\n        elif gpa > 3.0:\n            return 'A'\n        elif gpa > 2.0:\n            return 'B'\n        elif gpa > 1.0:\n            return 'C'\n        else:\n            return 'F'\n\n    return [(reverse_case(name), assign_grade(gpa)) for name, gpa in zip(s, grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return base_change_prefixes(x // base, base) + [str(x % base)]\n"}
{"task_id": "EvoEval/22", "completion": "\n    def binary_planet_distance(planet1):\n        planets = {\n            \"Mercury\": 1,\n            \"Venus\": 2,\n            \"Earth\": 3,\n            \"Mars\": 4,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8,\n            \"Pluto\": 9\n        }\n\n        if planet1 not in planets:\n            return \"\"\n\n        planet2_index = planets[planet1]\n        binary_result = bin(planet2_index)[2:]\n\n        return \"bd\" + binary_result\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazil_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazil_factorial(n-1)\n\n    def brazil_n_factorial(n):\n        if n == 1:\n            return n\n        else:\n            return n * brazil_factorial(n-1)\n\n    def brazil_n_factorial_star(n):\n        if n == 1:\n            return n\n        else:\n            return n * brazil_n_factorial(n-1)\n\n    def brazil_factorial_star(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazil_factorial_star(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(brazil_n_factorial(i))\n        else:\n            result.append(brazil_n_factorial_star(i))\n\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        for i in range(0, len(s), 3):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    def sort_string(s: str) -> str:\n        return ' '.join(sorted(s.split()))\n\n    if not is_happy(numbers):\n        return 'Not a happy'\n    else:\n        return sort_string(numbers)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * -1 + i for i in range(1, n + 1)]\n    valid_triples = [(a[i], a[i + 1], a[i + 2]) for i in range(n - 2)]\n    sum_product_triples = [(sum(triple), product(triple)) for triple in valid_triples]\n    return sum_product_triples\n"}
{"task_id": "EvoEval/26", "completion": "\n    # sort the list\n    values.sort()\n\n    # find the smallest even number\n    for i, value in enumerate(values):\n        if int(value) % 2 == 0:\n            return (value, i)\n\n    return (\"\", -1)\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1.sort()\n    for i in range(len(lst1)):\n        for j in range(i + 1, len(lst1)):\n            if is_prime(lst1[i] + lst1[j]):\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                return x\n    return y\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    def grade_to_letter(grade: float) -> str:\n        if grade == 4.0:\n            return 'A+'\n        elif grade == 3.0:\n            return 'A'\n        elif grade == 2.0:\n            return 'B'\n        elif grade == 1.0:\n            return 'B-'\n        elif grade == 0.7:\n            return 'C+'\n        elif grade == 0.5:\n            return 'C'\n        elif grade == 0.0:\n            return 'D'\n        else:\n            return 'D-'\n\n    def check_conditions(name: str, course: str) -> bool:\n        return set(name) & set(course)\n\n    def grade_with_same_chars(grades: list, name: str, course: str) -> list:\n        if not check_conditions(name, course):\n            return []\n        else:\n            return [grade_to_letter(g) for g in grades]\n\n    return [grade_with_same_chars(grades, s0, s1) for s0, s1 in zip(s0, s1)]\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return n\n    else:\n        return max(largest_prime_factor(x), largest_prime_factor(y))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def simplify(fraction: str) -> int:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator // denominator\n\n    beats = simplify(x)\n    notes = music_string.split()\n    result = []\n\n    for note in notes:\n        if note == 'o':\n            result.append(beats % 4 == 0)\n        elif note == 'o|':\n            result.append(beats % 2 == 0)\n        elif note == '|':\n            result.append(beats % 4 == 1)\n        else:\n            raise ValueError(f'Invalid note: {note}')\n\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    factors = factorize(n)\n    special_factorial = 1\n    for factor in factors:\n        special_factorial *= factorial(factors.count(factor))\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    depths = [get_max_depth(s) for s in input]\n    total_depth = sum(depths)\n    circular_shift = total_depth + shift\n    circular_shift %= 10\n    if circular_shift == 0:\n        return [int(d) for d in str(total_depth)][::-1]\n    else:\n        return [int(d) for d in str(total_depth)][::-1][circular_shift:] + [int(d) for d in str(total_depth)][:circular_shift]\n"}
{"task_id": "EvoEval/33", "completion": "\n    if len(s) != 3:\n        return False\n    if not s.isdigit():\n        return False\n    if int(s) > 1000:\n        return False\n    if len(set(s[i] + s[i+1] + s[i+2] for i in range(len(s)-2))) != len(s)-2:\n        return False\n    return int(s)\n"}
{"task_id": "EvoEval/34", "completion": "\n    def md5_string(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(paren_string: str) -> int:\n        max_level = 0\n        current_level = 0\n        for c in paren_string:\n            if c == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif c == ')':\n                current_level -= 1\n        return max_level\n\n    def convert_to_md(paren_string: str, level: int) -> str:\n        if level == 0:\n            return md5_string(paren_string)\n        else:\n            return ''.join(convert_to_md(s, level-1) for s in paren_string.split())\n\n    level = deepest_level(paren_string)\n    return [convert_to_md(s, level) for s in paren_string.split()]\n"}
{"task_id": "EvoEval/35", "completion": "\n    for key in dict:\n        if len(key) != 3:\n            return False\n        for i in range(len(key) - 2):\n            if key[i] == key[i+1] == key[i+2]:\n                return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    def mod_shift_sort(arr, n: int, p: int):\n        mod_arr = [(i, num) for i, num in enumerate(arr)]\n        mod_arr.sort(key=lambda x: x[1])\n        for i in range(n):\n            if mod_arr[i][0] != i:\n                return False\n        return True\n\n    print(mod_shift_sort([3, 1], 3))\n    print(mod_shift_sort([3, 5, 4], 2))\n    print(mod_shift_sort([3, 1], 2))\n\nmod_shift_sort()\n"}
{"task_id": "EvoEval/37", "completion": "\n    n = len(nums)\n    min_sum = float('inf')\n    min_even = float('inf')\n    min_odd = float('inf')\n    for i in range(n):\n        even_count = 0\n        odd_count = 0\n        for j in range(i, n):\n            if nums[j] % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            if even_count % 2 == 0 and odd_count % 2 != 0:\n                min_sum = min(min_sum, nums[i:j+1])\n                min_even = min(min_even, nums[i:j+1])\n            if odd_count % 2 == 0 and even_count % 2 != 0:\n                min_sum = min(min_sum, nums[i:j+1])\n                min_odd = min(min_odd, nums[i:j+1])\n    return min_even, min_odd\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_sum = 0\n    odd_sum = 0\n    for i in l:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n\n    for i in l:\n        for j in l:\n            if i != j:\n                if (i + j) == n:\n                    if is_palindrome(i) and is_palindrome(j):\n                        return True\n    return False\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def count_changes(arr, x):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes * x\r\n\r\n    if is_palindrome(arr):\r\n        return 0\r\n    else:\r\n        return count_changes(arr, x)\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime(n):\n        largest = -1\n        while n % 2 == 0:\n            largest = 2\n            n >>= 1\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                largest = i\n                n = n / i\n        if n > 2:\n            largest = n\n        return largest\n\n    primes = [x for x in nums if is_prime(x) and x > 1 and x % 2 == 1]\n    if not primes:\n        return None\n    return max(primes)\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s.upper()\n    shift %= len(s)\n    shifted = s[shift:] + s[:shift]\n    count = 0\n    for i in range(len(shifted)):\n        if i % 2 == 0 and shifted[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n\n    def is_valid_fraction(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator and denominator\n\n    def is_valid_expression(expression: str) -> bool:\n        open_brackets = expression.count('<')\n        if open_brackets % 2 != 0:\n            return False\n\n        fractions = re.findall(r'<.*?>', expression)\n        for fraction in fractions:\n            if not is_valid_fraction(fraction):\n                return False\n\n        return True\n\n    return is_valid_expression(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 0]\n    if n == 2:\n        return [0, 0, 2, 2]\n    if n == 3:\n        return [0, 0, 2, 2, 4, 4]\n\n    sequence = [0, 0, 2, 2]\n    for i in range(4, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    return sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            roman_numeral += symbols[i]\n            number -= values[i]\n        i += 1\n\n    prefixes = []\n    for _ in range(len(roman_numeral)):\n        prefixes.append(roman_numeral[:])\n        roman_numeral = roman_numeral[1:]\n\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_of_primes = 0\n    product_of_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_of_primes += num\n            product_of_primes *= num\n\n    return (sum_of_primes, product_of_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    # filter out the largest even number\n    l = [i for i in l if i % 2 == 0]\n    # if there are no even numbers, return -1\n    if not l:\n        return -1\n    # return the largest even number\n    return max(l)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    output = []\n    for word in lst:\n        n = sum(1 for i in range(len(word)) if i % 2 == 0 and word[i] in vowels)\n        m = sum(1 for c in word if int(c) % 2 != 0)\n        output.append(f\"In the string, the number of uppercase vowels in even indices is {n}, and the odd digits is {m}.\")\n    return output\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def get_digits(n: int) -> list:\n        return [int(d) for d in str(n)]\n\n    def sum_digits(arr: list) -> int:\n        return sum(arr)\n\n    def modp_pow(base: int, power: int, mod: int) -> int:\n        result = 1\n        base = base % mod\n        while power > 0:\n            if power % 2 == 1:\n                result = (result * base) % mod\n            power = power >> 1\n            base = (base * base) % mod\n        return result\n\n    result = modp_pow(2, n, p)\n    count = 0\n    for num in arr:\n        digits = get_digits(num)\n        if sum_digits(digits) > result:\n            count += sum_digits(digits)\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOUaeiou\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def convert_to_num(s):\n        if '.' in s:\n            return float(s)\n        elif s.isdigit():\n            return int(s)\n        elif s.isalpha():\n            return s.lower() if s.isupper() else s.upper()\n        else:\n            return None\n\n    a = convert_to_num(a)\n    b = convert_to_num(b)\n\n    if a is None or b is None:\n        return None\n    elif a > b:\n        return b\n    elif a < b:\n        return a\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        even_values = [i for i in arr if i % 2 == 0]\n        if even_values:\n            smallest_even_value = min(even_values)\n            index_of_smallest_even_value = arr.index(smallest_even_value)\n            remaining_nodes = [i for i in arr if i != smallest_even_value]\n            product_of_signs = 1\n            for node in remaining_nodes:\n                product_of_signs *= (1 if node > 0 else -1)\n            return [smallest_even_value, index_of_smallest_even_value], sum(remaining_nodes) * product_of_signs\n        else:\n            return ([], None)\n\n    print(pluck_and_prod(42))\n    print(pluck_and_prod([1]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-52, 3, 0, -4, [-4, 4, 0]]))\n"}
{"task_id": "EvoEval/53", "completion": "\n    grade_map = {\n        '4.': 'A',\n        '3.': 'B',\n        '2759.': 'C',\n        '35.': 'D',\n        '8.': 'E',\n        '9.': 'F',\n        '0.': '0',\n        '00.': '0',\n        '000.': '0'\n    }\n\n    prime_hex_map = {\n        '2': '2',\n        '3': '3',\n        '5': '5',\n        '7': '7',\n        '11': 'D',\n        '13': 'B'\n    }\n\n    def is_prime(n):\n        if n in (2, 3):\n            return True\n        if n % 2 == 0 or n == 1:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def hex_to_dec(hex_grade):\n        dec_grade = 0\n        for i, digit in enumerate(reversed(hex_grade)):\n            if is_prime(int(digit)):\n                dec_grade += int(digit) * (16 ** i)\n        return dec_grade\n\n    def dec_to_hex(dec_grade):\n        hex_grade = ''\n        while dec_grade > 0:\n            dec_grade, remainder = divmod(dec_grade, 16)\n            hex_grade = prime_hex_map[str(remainder)] + hex_grade\n        return hex_grade\n\n    def grade_to_hex(gpa):\n        dec_grade = hex_to_dec(str(gpa))\n        hex_grade = dec_to_hex(dec_grade)\n        return grade_map[hex_grade]\n\n    return sum(grade_to_hex(gpa) in prime_hex_map.values() for gpa in grades)\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]):\n                sub_sum = sum(nums[i:j+1])\n                if sub_sum > max_sum:\n                    max_sum = sub_sum\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: \"I\", 4: \"IV\", 5: \"V\", 9: \"IX\", 10: \"X\", 40: \"XL\", 50: \"L\", 90: \"XC\", 100: \"C\", 400: \"CD\", 500: \"D\", 900: \"CM\", 1000: \"M\"}\r\n    result = \"\"\r\n    for key in sorted(roman_numerals.keys(), reverse=True):\r\n        while number >= key:\r\n            result += roman_numerals[key]\r\n            number -= key\r\n    return result\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def odd_prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                if is_prime(i) and i % 2 != 0:\n                    factors.append(i)\n        if n > 1 and is_prime(n) and n % 2 != 0:\n            factors.append(n)\n        return factors\n\n    factors = odd_prime_factors(n)\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def has_odd_digit(arr):\n        for num in arr:\n            if any(int(digit) % 2 != 0 for digit in str(num)):\n                return False\n        return True\n\n    if not is_palindrome(arr):\n        if not has_odd_digit(arr):\n            return -1\n\n        changes = 0\n        for num in arr:\n            if any(int(digit) % 2 != 0 for digit in str(num)):\n                changes += 1\n        return changes\n    else:\n        return 0\n"}
{"task_id": "EvoEval/58", "completion": "\n    from collections import Counter\n\n    def maxfre_andsum_check(lst, a, b):\n        count = Counter(lst)\n        max_fre = -1\n        for key, value in count.items():\n            if value > max_fre:\n                max_fre = value\n\n        if max_fre == 0:\n            return -1, False\n\n        sum_max = max_fre + a\n        if sum_max == b:\n            return max_fre, True\n        else:\n            return max_fre, False\n\n    print(maxfre_andsum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(maxfre_andsum_check([5, 2, 3, 4, 10, 5], 5, 10))\n    print(maxfre_andsum_check([4, 2, 3, 4, 4, 4], 5, 2))\n    print(maxfre_andsum_check([5, 5, 10, 5, -1], 5, 10))\n\nThe function maxfre_andsum_check(lst, a, b) should return a tuple (max_fre, True) if the sum of max_fre and a equals b, otherwise it should return (max_fre, False).\n\nThe function is expected to take in three parameters: a list of integers, an integer a, and an integer b.\n\nThe function should return a tuple with two elements. The first element is the greatest integer in the list that has a frequency greater or the value itself, and the second element is a boolean that indicates whether the sum of the greatest integer and a equals b.\n\nThe function should return (max_fre, False) if there's no such element in the list, and the first element is -1, and the second element is False.\n\nThe function should return (max_fre, True) if the sum of max_fre and a equals b.\n\nThe function should return (max_fre, False) if the sum of max_fre and a does not equal b.\n\nThe function should return (max_fre, False) if the sum of max_"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    def convert_to_base(n, base):\n        if n < base:\n            return str(n)\n        else:\n            return convert_to_base(n // base, base) + str(n % base)\n\n    def replace_odd_digits(s, base):\n        return ''.join(c if int(c) % 2 == 0 else convert_to_base(int(c), base) for c in s)\n\n    return [replace_odd_digits(s, base) for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    arr.sort()\n    for i in range(n - 2):\n        if arr[i] % 2 == 0:\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if arr[i] * 2 == arr[j] + arr[k] and arr[i] * 2 != arr[j] and arr[i] * 2 != arr[k]:\n                        return [arr[i] * 2, j, k]\n    return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    def longest_planet_chain(planet1: str, chains: List[T[str,...]]) -> Optional[T,...]:\n        # Initialize the longest chain to None\n        longest_chain = None\n\n        # Iterate over each chain\n        for chain in chains:\n            # If the first planet in the chain is the starting planet\n            if chain[0] == planet1:\n                # If the longest chain is None or the length of the current chain is longer\n                if longest_chain is None or len(chain) > len(longest_chain):\n                    # Update the longest chain\n                    longest_chain = chain\n\n        # Return the longest chain that starts with planet1\n        return longest_chain\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.lower() for word in words]\n    words = sorted(words)\n    words = [word[0] + word[-1] + word[1:-1] + word[0] for word in words]\n    words = [word.replace('-', '_') for word in words]\n    words = [word.replace(' ', '_') for word in words]\n    words = ' '.join(words)\n    return words\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def power_mod(base, power, mod):\n        result = 1\n        base = base % mod\n        while power > 0:\n            if power % 2 == 1:\n                result = (result * base) % mod\n            power = power >> 1\n            base = (base * base) % mod\n        return result\n\n    def modp_prime_numbers(n, p):\n        result = []\n        base = 2\n        for i in range(n, p):\n            mod_result = power_mod(base, i, p)\n            if is_prime(mod_result):\n                result.append(mod_result)\n        return result\n\n    return modp_prime_numbers(2, 11)\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return p - n % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def find_max_triple_sum(x, y, n):\n        a = [i for i in range(x, y-1, -1) if i % 2 == 0]\n        return sum(a[-3:]) if a else -1\n\n    print(find_max_triple_sum(15, 5, 1))\n    print(find_max_triple_sum(17, 6, 2))\n    print(find_max_triple_sum(16, 28, 3))\n\n\nfind_max_triple_sum(15, 5, 1)\nfind_max_triple_sum(17, 6, 2)\nfind_max_triple_sum(16, 28, 3)\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    left, right = 0, len(numbers) - 1\n    closest_diff = float('inf')\n\n    while left < right:\n        current_diff = abs(numbers[left] - numbers[right])\n        if current_diff < threshold:\n            closest_diff = min(closest_diff, current_diff)\n            left += 1\n            right -= 1\n        elif numbers[left] < numbers[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return closest_diff if closest_diff != float('inf') else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        product = 1\n        for digit in str(num):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    return min(minOddDigitsProduct(num) for num in nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        return len(set(s)) == 1\n\n    def is_odd(s):\n        return len(s) % 2 != 0\n\n    happy_strings = [s for s in lst if is_happy(s) and not is_odd(s)]\n    happy_strings.sort(key=len)\n    return happy_strings\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    special_factorial = []\n    for i in range(10):\n        special_factorial.append(factorial(i))\n\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] != numbers[j]:\n                diff = abs(numbers[i] - numbers[j])\n                if diff < min_diff:\n                    min_diff = diff\n                    result = (numbers[i], numbers[j])\n\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    max_possible = factorial(n)\n    sum_weights = sum(w)\n\n    if sum_weights < max_possible:\n        return False\n    else:\n        return True\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazil_fact(numbers: List[int]) -> int:\n        result = 1\n        for n in numbers:\n            result *= factorial(n)\n        return result\n\n    brazil_numbers = [brazil_fact(numbers[:i+1]) for i in range(len(numbers))]\n    brazil_numbers.sort()\n\n    for i in range(len(brazil_numbers)):\n        for j in range(i+1, len(brazil_numbers)):\n            if brazil_numbers[i] + brazil_numbers[j] < threshold:\n                return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> str:\n        numer, denom = map(int, fraction.split('/'))\n        return f'{numer}/{denom}'\n\n    def is_whole(n: int) -> bool:\n        return n % 1 == 0\n\n    fractions = [Fraction(f) for f in fractions]\n    n = Fraction(n)\n\n    return [simplify(f.numerator/f.denominator) == n for f in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def sum_of_even(lst):\n        return sum(n for n in lst if is_even(n))\n\n    def sum_of_odd(lst):\n        return sum(n for n in lst if not is_even(n))\n\n    def can_make_even(lst1, lst2, x, y, z):\n        sum1 = sum_of_even(lst1)\n        sum2 = sum_of_odd(lst2)\n        sum3 = x + y + z\n\n        if sum1 + sum2 == sum3:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    def append_sum(lst1, lst2, x, y, z):\n        if can_make_even(lst1, lst2, x, y, z) == \"YES\":\n            return \"YES_SUM \" + str(x) + \" \" + str(y) + \" \" + str(z)\n        else:\n            return \"NO_SUM\"\n\n    return append_sum(lst1, lst2, x, y, z)\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        if not input_dict:\n            return {}\n        output_dict = {}\n        for key, value in input_dict.items():\n            try:\n                num = float(value)\n                if num.is_integer():\n                    output_dict[key] = int(num)\n                else:\n                    output_dict[key] = round(num)\n            except ValueError:\n                output_dict[key] = \"\"\n        return output_dict\n\n    print(transform_dict({\"a\":\"1015.3\"}))\n    print(transform_dict({\"b\":\" 10\"}))\n    print(transform_dict({\"A10.5-155\": \"11\", \"B3\":\"\"}))\n    print(transform_dict({}))\n    print(transform_dict({\"all_upper\": \"10\"}))\n    print(transform_dict({\"all_upper\": \"10\", \"all_lower\": \"11\"}))\n\nThe function works by iterating over the input dictionary. For each key-value pair, it attempts to convert the value to a float. If this is successful, it checks if the float is an integer. If it is, it converts the float to an integer and adds it to the output dictionary under the original key. If the float is not an integer, it rounds the float to the nearest integer and adds it to the output dictionary under the original key. If the conversion to a float fails (for example, if the value is not a valid number), it adds an empty string to the output dictionary under the original key.\n\nThe function returns the output dictionary.\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified_lst = [sum_digits(n) if is_prime(n) else n for n in lst]\n    return sorted(modified_lst) if sum(modified_lst[i] + i for i in range(len(modified_lst))) % 2 == 0 else modified_lst\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_of_digits(n):\n        n = abs(n)\n        sum_digits = 0\n        while n > 0:\n            sum_digits += n % 10\n            n = n // 10\n        return sum_digits\n\n    def is_signed(n):\n        return n < 0\n\n    result = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 != 0 and sum_of_digits(arr[i]) > arr[i]:\n            result += arr[i]\n    return result\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            result += s[i].swapcase()\n        else:\n            result += s[i]\n        if i % 2 == 1 and s[i] in vowels:\n            count += 1\n    return result, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) != 3:\n        return \"Not happy\"\n    if len(set(s[i:i+3] for i in range(0, len(s), 3))) != 3:\n        return \"Not happy\"\n    return s[::-1]\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\n    def decode(s: str) -> str:\n        return ''.join([s[i+3-len(s)%3:i+3] for i in range(len(s))])\n\n    result = encode(s)\n    for c in c:\n        result = decode(result)\n    return (result, result == result[::-1])\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibfib(n-1) + fibfib(n-2)\n\n    fib_nums = [fibfib(i) for i in range(n)]\n    mean = sum(fib_nums) / n\n    deviations = [abs(num - mean) for num in fib_nums]\n    mad = sum(deviations) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n\n    def odd_digits_product(n: int) -> int:\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if not is_even(digit):\n                product *= digit\n            n = n // 10\n        return product\n\n    def odd_fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 0\n        elif n == 3:\n            return 1\n        else:\n            return odd_fibfib(n - 1) + odd_fibfib(n - 3)\n\n    return odd_fibfib(n)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"_+\", \"-\", text)\n    text = re.sub(r\"^-|-$\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"-$\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text = re.sub(r\"^-\", \"\", text)\n    text ="}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {}\n        if string[i - 1] not in histogram[prefix]:\n            histogram[prefix][string[i - 1]] = 0\n        histogram[prefix][string[i - 1]] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    lst.sort(key=lambda x: bin(x).count('1'))\n    for i in range(1, len(lst)):\n        if lst[i] < lst[0]:\n            return lst[i]\n    return None\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    from itertools import product\n    from functools import reduce\n    from operator import add, sub, mul, floordiv, pow\n\n    operators_map = {\n        '+': add,\n        '-': sub,\n        '*': mul,\n        '//': floordiv,\n        '**': pow\n    }\n\n    def common_elements(lst1, lst2):\n        return list(set(lst1) & set(lst2))\n\n    def evaluate(expression, operator_map):\n        for operator in operators:\n            expression = [operator_map[i](a, b) for i, a, b in zip(operator, expression[:-1], expression[1:])]\n        return expression[0]\n\n    common_operands = reduce(common_elements, operand_lists)\n\n    if not common_operands:\n        return None\n\n    expressions = [common_operands]\n    for operator in operators:\n        expressions = [expression + [operator] + rest for expression in expressions for rest in operand_lists]\n\n    return min(evaluate(expression, operators_map) for expression in expressions)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char in vowels:\n            result += char\n        elif char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                result += char\n    if stack:\n        return 'Invalid string'\n    else:\n        return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=len)\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    if not strings:\n        return None\n    return [s for s in strings if s.find(hash_substring) != -1]\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for key in dict:\n        count = 0\n        for char in key:\n            if char in vowels:\n                count += 1\n        if count > 0:\n            result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sort_list(lst):\n        lst.sort()\n        return lst\n\n    for i in range(0, len(l), 2):\n        if is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    return sort_list(l)\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    def get_common_max_triples(n, l1):\n        a = [i - 1 for i in range(n)]\n        common_elements = [i for i in l1 if i in a]\n        triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if a[i] % 3 == 0 or a[j] % 3 == 0 or a[k] % 3 == 0]\n        return sorted(triples), len(common_elements)\n\n    n = 5\n    l1 = [7, 13, 21, 4, 5]\n    print(get_common_max_triples(n, l1))\n\nget_common_max_triples(5, [7, 13, 21, 4, 5])\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    string = string.lower()\n    if len(string) % 2 == 0:\n        for i in range(1, len(string) - 1):\n            if string[i] in vowels and string[i - 1] in consonants and string[i + 1] in consonants:\n                return string[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_sum_digits(num):\n        num = str(abs(num))\n        return sum(map(int, num))\n\n    def sort_nums(arr):\n        return sorted(arr, key=count_sum_digits)\n\n    if not arr:\n        return arr\n\n    arr = sort_nums(arr)\n    return arr\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    result = [s for s in strings if substring in s and len(s) % 2 == 0]\n    result.sort(key=len)\n    return result\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = [i for i in l1 if i in l2]\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            if common_elements[i] + common_elements[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def fib(n):\n        fib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + i*i - i + 1)\n        return fib_list\n\n    fib_list = fib(n)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (fib_list[i] + fib_list[j] + fib_list[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "EvoEval/98", "completion": "\n    def check_key(key):\n        return key.isalpha()\n\n    def check_value(value):\n        return value.isalpha() and \"(\" in value and \")\" in value\n\n    for key, value in dict.items():\n        if not check_key(key) or not check_value(value):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return len_base_conversion(x // base, base) + str(x % base)\n\n"}
