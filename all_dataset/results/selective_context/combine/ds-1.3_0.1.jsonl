{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    if is_happy(a) and is_happy(b):\n        a_num = float(a.replace(',', '.'))\n        b_num = float(b.replace(',', '.'))\n        if a_num > b_num:\n            return a\n        elif a_num < b_num:\n            return b\n        else:\n            return None\n    elif is_happy(a):\n        return a\n    elif is_happy(b):\n        return b\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_andflip(value: str) -> str:\n        parts = value.split()\n        number = float(parts[0])\n        string = parts[1]\n        rounded_number = round(number)\n        if number == rounded_number:\n            rounded_number -= 1\n        return f\"{rounded_number} {string.swapcase()}\"\n\n    print(round_andflip(\"10.5abc\"))\n    print(round_andflip(\"14.5abc\"))\n    print(round_andflip(\"-14.5abc\"))\n    print(round_andflip(\"15.3ABC '15 ab' Note\"))\n\nround_andflip(\"10.5abc\")\nround_andflip(\"14.5abc\")\nround_andflip(\"-14.5abc\")\nround_andflip(\"15.3ABC '15 ab' Note\")\n\nThe function should take a string as input, split it into two parts: a number and a string. The number should be rounded to the nearest integer, and the string should be flipped (swapped case). If the number is equal to the rounded number, the number should be one less than the rounded number. The function should then return a string with the two parts separated by a space.\n\nThe function should handle the following examples:\n\nround_andflip(\"10.5abc\") -> \"11 ABC\"\nround_andflip(\"14.5abc\") -> \"15 ABC\"\nround_andflip(\"-14.5abc\") -> \"-15 ab\"\nround_andflip(\"15.3ABC '15 ab' Note\") -> \"16 ABC ab\"\n\nThe function should return the correct results for the provided examples.\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            result.append((numbers[i] ** n) % p)\n            result.append(numbers[i + 1])\n        else:\n            result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    def sort_parentheses(lst: List[str]) -> str:\n        # First, we need to sort the numbers from smallest to largest\n        lst.sort(key=lambda x: int(''.join(filter(str.isdigit, x))))\n\n        # Then, we check if it is possible to make a good string\n        for i in range(len(lst) - 1):\n            if '()' in lst[i] or '()()' in lst[i] or '(())' in lst[i]:\n                continue\n            else:\n                return 'No'\n\n        return 'Yes'\n\n    print(sort_parentheses(['(three)(', '(five)', '(one)']))\n    print(sort_parentheses(['(five)', '(one)', 'three']))\n    print(sort_parentheses(['(three)', '(one)', '(five)']))\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        i = n - 1\n        while i > 1:\n            if n % i == 0 and is_prime(i):\n                return i\n            i -= 1\n        return 0\n\n    return sum(map(str, [largest_prime_divisor(i) for i in lst]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n\n    first_last_sum = round(numbers[0] + numbers[-1])\n\n    if first_last_sum % 2 == 0:\n        numbers.sort(reverse=True)\n    else:\n        numbers.sort()\n\n    for i in range(1, len(numbers)):\n        if round(numbers[i-1] + numbers[i]) < threshold:\n            if round(numbers[i-1] + numbers[i]) % 2 == 0:\n                numbers[i], numbers[i-1] = numbers[i-1], numbers[i]\n\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    def sum_square_cube(lst: list):\n        return sum(i**2 if idx % 3 == 0 else i**3 for idx, i in enumerate(lst))\n\n    return sum_square_cube([i for i in range(1, n+1)])\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    for br in string:\n        if br == bracket:\n            stack.append(br)\n        elif len(stack) == 0:\n            return False, 0\n        else:\n            stack.pop()\n    if len(stack) == 0:\n        count = string.count(bracket)\n        return True, count\n    else:\n        return False, 0\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_position = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    if planet1 in planet_position and planet2 in planet_position:\n        planets_between = [planet for planet in planet_position if planet_position[planet] > planet_position[planet1] and planet_position[planet] < planet_position[planet2]]\n        return {planet: planet.lower() for planet in sorted(planets_between, key=planet_position.get)}\n    else:\n        return {}\n"}
{"task_id": "EvoEval/10", "completion": "\n    def proper_case(name):\n        return name[0].upper() + name[1:].lower()\n\n    def grade_from_gpa(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'B'\n        elif gpa > 27:\n            return 'B+'\n        elif gpa > 23:\n            return 'B-'\n        elif gpa > 13:\n            return 'C+'\n        elif gpa > 10:\n            return 'C'\n        elif gpa > 7:\n            return 'C-'\n        else:\n            return 'D'\n\n    return [(proper_case(name), grade_from_gpa(gpa)) for name, gpa in name_grade_list]\n"}
{"task_id": "EvoEval/11", "completion": "\n\n    def planet_vowel_count(planet1, planet2):\n        planets = {\n            \"Mercury\": 1,\n            \"Venus\": 2,\n            \"Earth\": 3,\n            \"Mars\": 4,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8\n        }\n\n        if planet1 not in planets or planet2 not in planets:\n            return 0\n\n        start, end = min(planets[planet1], planets[planet2]), max(planets[planet1], planets[planet2])\n        return sum(sum(row.count(vowel) for row in [planet for planet in planets if planets[planet] > start and planets[planet] <= end]) for planet in planets for vowel in 'aeiouy')\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def get_grade(n_consonants):\n        if n_consonants == 0:\n            return 'E'\n        elif n_consonants == 1:\n            return 'D'\n        elif n_consonants == 2:\n            return 'C'\n        elif n_consonants == 3:\n            return 'B'\n        elif n_consonants == 4:\n            return 'A'\n        else:\n            return '+'\n\n    return [{'name': student['name'], 'grade': get_grade(count_consonants(student['name']))} for student in student_info]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_of_digits(n):\n        n = abs(n)\n        return sum(int(digit) for digit in str(n))\n\n    filtered_arr = [num for num in arr if sum_of_digits(num) > 0]\n    lst1.sort(reverse=True)\n\n    for i in range(len(filtered_arr)):\n        for j in range(i, len(lst1)):\n            if sum_of_digits(filtered_arr[i]) + sum_of_digits(lst1[j]) == 0:\n                return \"YES\"\n            elif sum_of_digits(filtered_arr[i]) + sum_of_digits(lst1[j]) == 2:\n                return \"YES\"\n            elif sum_of_digits(filtered_arr[i]) + sum_of_digits(lst1[j]) == 4:\n                return \"YES\"\n\n    return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)[2:]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    points = set()\n    for op in operations:\n        balance += op\n        if balance in points:\n            return True\n        points.add(balance)\n        if balance < 0:\n            return False\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    music_notes = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    word_list = list(word)\n    music_list = list(music_string.split())\n    vowel_positions = []\n    for i in range(1, len(word_list) - 1):\n        if word_list[i] in vowels and word_list[i - 1] not in vowels and word_list[i + 1] not in vowels:\n            vowel_positions.append(i)\n    result = []\n    for pos in vowel_positions:\n        for note, beats in music_notes.items():\n            if f\"{pos}{note}\" in music_list:\n                result.append(beats)\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_lst = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_lst.append(fibfib_lst[i-1] + fibfib_lst[i-2] + fibfib_lst[i-3])\n\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    for num in sorted(freq_dict.keys()):\n        if num in fibfib_lst:\n            return num\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] < min_sum:\n                    min_sum = nums[i] + nums[j] + nums[k]\n\n    return min_sum\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance = 0\n    below_zero = False\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            below_zero = True\n        if largest_withdrawal is None and op < 0:\n            largest_withdrawal = op\n        if smallest_deposit is None and op > 0:\n            smallest_deposit = op\n\n    return largest_withdrawal, smallest_deposit, below_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    def grade_and_case(s, grades):\n        result = []\n        for name, grade in zip(s, grades):\n            if grade >= 3.7 and grade <= 4.0:\n                letter = 'A+'\n            elif grade >= 3.0 and grade < 3.7:\n                letter = 'A'\n            elif grade >= 2.0 and grade < 3.0:\n                letter = 'B'\n            elif grade >= 1.0 and grade < 2.0:\n                letter = 'B-'\n            elif grade >= 0.0 and grade < 1.0:\n                letter = 'D-'\n            else:\n                letter = 'E'\n            result.append((name.upper(), letter))\n        return result\n\n    print(grade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7]))\n\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLEs'], [4.0, 3, 1.7])\ngrade_and_case(['Amy', 'BOB', 'miLE"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    return [base_change(x, base)[i:] for i in range(len(base_change(x, base)))]\n"}
{"task_id": "EvoEval/22", "completion": "\n    def binary_planet_distance(planet1, planet):\n        planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet)\n        if planet1_index < planet2_index:\n            return ''.join('1' if planet2_index - i == 1 else '0' for i in range(planet2_index))\n        else:\n            return ''.join('1' if planet1_index - i == 1 else '0' for i in range(planet1_index))\n\n    print(binary_planet_distance(\"Jupiter\", \"Ne\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Mercury\", \"Venus\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print(binary_planet_distance(\"Earth\", \"Mars\"))\n    print"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_factorial(n):\n        if n % 2 == 0:\n            return n * factorial(n)\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(brazilian_factorial(i))\n\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        s = s.replace(' ', '')\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    def sort_string(s: str) -> str:\n        return ' '.join(sorted(s.split()))\n\n    if is_happy(numbers):\n        return sort_string(numbers)\n    else:\n        return 'Not a happy string'\n"}
{"task_id": "EvoEval/25", "completion": "\n    if n < 3:\n        return (0, 1)\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    valid_tri = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    valid_tri.append((a[i], a[j], a[k]))\n\n    if not valid_tri:\n        return (0, 1)\n\n    sum_tri = sum(sum(tri) for tri in valid_tri)\n    product_tri = 1\n\n    for tri in valid_tri:\n        product_tri *= tri[0]\n\n    return (sum_tri, product_tri)\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_values = [(int(v.split()[1]), i) for i, v in enumerate(values)]\n    even_values.sort()\n    for v, i in even_values:\n        if v % 2 == 0:\n            return (values[i], i)\n    return ()\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_prime = [i for i in lst1 if is_prime(i)]\n    lst2_prime = [i for i in lst2 if is_prime(i)]\n\n    if len(lst1_prime) == 0:\n        return y\n    elif len(lst2_prime) == 0:\n        return x\n    else:\n        return x\n"}
{"task_id": "EvoEval/28", "completion": "\n    def grade_with_same_ch(grades: list, s0: str, s1: str):\n        result = []\n        for grade, gpa in zip(grades, grades):\n            if len(s0) == len(s1) and s0 == s1:\n                if gpa == 4.0:\n                    result.append('A+')\n                elif gpa == 3.0:\n                    result.append('A')\n                elif gpa == 2.0:\n                    result.append('B')\n                elif gpa == 1.0:\n                    result.append('B-')\n                elif gpa == 0.7:\n                    result.append('C+')\n                elif gpa == 0.0:\n                    result.append('C')\n                elif gpa == -0.3:\n                    result.append('C-')\n                elif gpa == -1.0:\n                    result.append('D+')\n                elif gpa == -2.0:\n                    result.append('D')\n                elif gpa == -3.0:\n                    result.append('D-')\n        return result\n\n    return grade_with_same_ch(grades, s0, s1)\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return max(factors)\n    else:\n        return x if n == 1 else y\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(x.numerator % x.denominator == 0)\n        elif note == 'o|':\n            result.append(x.numerator / x.denominator == 0)\n        elif note == '.|':\n            result.append(x.numerator / 2 == x.denominator)\n    return result\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = factorize(n)\n    special_factorial = 1\n    for factor in set(factors):\n        special_factorial *= (factors.count(factor) * factorial(factor))\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n        return max_depth\n\n    depths = [get_depth(s) for s in input]\n    total_depth = sum(depths)\n    total_depth += shift\n    total_depth %= 10\n\n    result = [int(d) for d in str(total_depth)]\n    result = result[-shift:] + result[:-shift]\n    return result\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_numerals = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    last_num = 0\n    for i in range(len(s)):\n        if i > 0 and roman_numerals[s[i]] > last_num:\n            return False\n        last_num = roman_numerals[s[i]]\n    if len(s) < 3:\n        return False\n    if s[-1] not in roman_numerals or roman_numerals[s[-1]] < 1000:\n        return False\n    if s[-2:] == 'iv' or s[-2:] == 'ix':\n        return roman_numerals[s[-1]] - roman_numerals[s[-2]]\n    if s[-2:] == 'xl' or s[-2:] == 'xc':\n        return roman_numerals[s[-1]] - 10 * roman_numerals[s[-2]]\n    if s[-2:] == 'cd' or s[-2:] == 'cm':\n        return roman_numerals[s[-1]] - 100 * roman_numerals[s[-2]]\n    return roman_numerals[s[-1]]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(s: str) -> str:\n        max_level = 0\n        current_level = 0\n        max_level_str = ''\n        for c in s:\n            if c == '(':\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n                    max_level_str = s[s.index(c):]\n            elif c == ')':\n                current_level -= 1\n        return md5_hash(max_level_str)\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    return [deepest_level(g) for g in groups]\n"}
{"task_id": "EvoEval/35", "completion": "\n    def is_happy_string(s):\n        if len(s) != 3:\n            return False\n        for i in range(2):\n            if s[i] == s[i+1]:\n                return False\n        return True\n\n    if not dict:\n        return False\n\n    all_lower = all(k.islower() for k in dict.keys())\n    all_happy = all(is_happy_string(v) for v in dict.values())\n\n    return all_lower and all_happy\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n    mod_p = [pow(2, i, p) for i in range(n)]\n    sorted_arr = sorted(mod_p)\n    return arr == sorted_arr\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    def count_digits(num):\n        num_str = str(abs(num))\n        return sum(1 for c in num_str if c in '02468') , sum(1 for c in num_str if c in '13579')\n\n    n = len(nums)\n    min_sum = float('inf')\n    min_index = -1\n    for i in range(n):\n        cur_sum = nums[i]\n        cur_even, cur_odd = 1, 0\n        for j in range(i, n):\n            cur_sum += nums[j]\n            cur_even, cur_odd = count_digits(cur_sum)\n            if cur_sum < min_sum:\n                min_sum = cur_sum\n                min_index = i\n    return min_index, cur_even, cur_odd\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindromes = sum(is_palindrome(i) for i in range(1, n//2+1) if i % 2 == 0)\n    odd_palindromes = sum(is_palindrome(i) for i in range(1, n//2+1) if i % 2 != 0)\n\n    return (even_palindromes >= 2, odd_palindromes >= 2)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def count_changes(arr):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes\r\n\r\n    if is_palindrome(arr):\r\n        return 0\r\n    else:\r\n        return count_changes(arr) + x + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime(n):\n        largest = -1\n        while n % 2 == 0:\n            largest = 2\n            n >>= 1\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                largest = i\n                n = n / i\n        if n > 2:\n            largest = n\n        return largest\n\n    primes = [num for num in nums if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579']\n    return max(primes, key=largest_prime) if primes else None\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s[::-1] if shift > len(s) else s\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/42", "completion": "\n    def check_expression(expression: str):\n        # Check if the expression starts and ends with \"<\" and \">\"\n        if expression[0] != \"<\" or expression[-1] != \">\":\n            return False\n\n        # Split the expression into a list of fractions\n        fractions = expression[1:-1].split(\",\")\n\n        # Check if the expression is valid\n        for fraction in fractions:\n            numerator, denominator = map(int, fraction.split(\"/\"))\n            if numerator % denominator != 0:\n                return False\n\n        return True\n\n    # Test the function with the provided test cases\n    print(check_expression(\"<1/5,5/1>\"))  # True\n    print(check_expression(\"<1/6,2/1>\"))  # False\n    print(check_expression(\"<7/10,102,2/1>\"))  # True\n    print(check_expression(\"><1/2,21><2/3,32>\"))  # True\n    print(check_expression(\"><1/2,21><23,>\"))  # False\n\ncheck_expression(\"<1/5,5/1>\")\ncheck_expression(\"<1/6,2/1>\")\ncheck_expression(\"<7/10,102,2/1>\")\ncheck_expression(\"><1/2,21><2/3,32>\")\ncheck_expression(\"><1/2,21><23,>\")\n<jupyter>\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0, 0, 0, 0]\n    elif n == 1:\n        return [0, 0, 0, 0]\n    else:\n        fib4_sequence = [0, 0, 0, 0]\n        for i in range(3, n):\n            fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n        sum_first_and_last = fib4_sequence[0] + fib4_sequence[-1]\n        if sum_first_and_last % 2 == 0:\n            fib4_sequence.sort(reverse=True)\n        else:\n            fib4_sequence.sort()\n        return fib4_sequence\n"}
{"task_id": "EvoEval/44", "completion": "\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // values[i]):\n            roman_numeral += symbols[i]\n            number -= values[i]\n        i += 1\n    return roman_numeral.split(' ')\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in numbers if is_prime(n)]\n    return (sum(primes), 1 if not primes else reduce(lambda x, y: x*y, primes))\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_numbers = [num for num in l if num % 2 == 0]\n    if even_numbers:\n        return max(even_numbers)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = \"AEIOU\"\n    result = []\n    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            n += 1\n    for l in lst:\n        m = 0\n        for digit in l:\n            if int(digit) % 2 != 0:\n                m += 1\n        result.append(f\"In the string, the number of uppercase vow in even indices is {n}, and the number of odd digits is {m}.\")\n    return result\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def modp_count(arr, n, p):\n        mod_2_n = pow(2, n, p)\n        count = 0\n        for num in arr:\n            if num < 0:\n                num = -1 * (abs(num) % p)\n            if sum(int(digit) for digit in str(num)) > mod_2_n:\n                count += 1\n        return count\n\n    print(modp_count([], 2, 5))\n    print(modp_count([-1, 11, -11], 4, 5))\n    print(modp_count([1, 15, 20], 11, 3))\n    print(modp_count([2, 12, 11], 0, 101))\n    print(modp_count([1, 1, 2], 0, 101))\n\nmodp_count([-1, 11, -11], 4, 5)\nmodp_count([1, 15, 20], 11, 3)\nmodp_count([2, 12, 11], 0, 101)\nmodp_count([1, 1, 2], 0, 101)\nmodp_count([-1, 11, -11], 4, 5)\nmodp_count([1, 15, 20], 11, 3)\nmodp_count([2, 12, 11], 0, 101)\nmodp_count([1, 1, 2], 0, 101)\nmodp_count([-1, 11, -11], 4, 5)\nmodp_count([1, 15, 20], 11, 3)\nmodp_count([2, 12, 11], 0, 101)\nmodp_count([1, 1, 2], 0, 101)\nmodp_count([-1, 11, -11], "}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def modify(a, b):\n        if isinstance(a, str) and a.isalpha():\n            return a.lower()\n        elif isinstance(a, str) and not a.isalpha():\n            return a[::-1]\n        elif isinstance(b, str) and a.isalpha():\n            return b.lower()\n        elif isinstance(b, str) and not b.isalpha():\n            return b[::-1]\n        else:\n            return max(a, b)\n\n    def compare(a, b):\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return max(a, b)\n        else:\n            return b\n\n    return compare(modify(a, b), modify(b, a))\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        smallest_even = None\n        smallest_index = None\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and (smallest_even is None or num < smallest_even):\n                smallest_even = num\n                smallest_index = i\n        if smallest_even is None:\n            return ([], None)\n        else:\n            return ([smallest_even, smallest_index], sum(arr) - smallest_even)\n\n    print(pluck_and_prod([4,23]))\n    print(pluck_and_prod([1,2,]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n"}
{"task_id": "EvoEval/53", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    hex_grades = {4.0: 'A', 3.7: 'B', 33: 'C', 30: 'D', 27: 'E', 23: 'F', 20: 'G', 17: '9', 13: '8', 10: '7', 7: '5', 6: '3', 0: '2'}\n    return sum(is_prime(hex_grades.get(gpa, 0)) for gpa in grades)\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]) and is_prime(nums[j]):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\r\n    result = ''\r\n    if number < 0 or number > 1000:\r\n        return None\r\n    for i in sorted(roman_numerals.keys(), reverse=True):\r\n        while number >= i:\r\n            result += roman_numerals[i]\r\n            number -= i\r\n    return hashlib.md5(result.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [factor for factor in factors if factor % 2 != 0 and is_prime(factor)]\n\n    if not odd_factors:\n        return 0\n\n    product = 1\n    for factor in odd_factors:\n        product *= factor\n\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def palindromic_and_odd_digit_array(arr):\r\n        def is_palindromic(arr):\r\n            return arr == arr[::-1]\r\n\r\n        def is_odd_digit(arr):\r\n            return all(i % 2 != 0 for i in arr)\r\n\r\n        if not is_palindromic(arr) or not is_odd_digit(arr):\r\n            changes = 0\r\n            for i in range(len(arr)):\r\n                if arr[i] % 2 == 0:\r\n                    arr[i] += 1\r\n                    changes += 1\r\n            return changes\r\n        return 0\r\n\r\n    print(palindromic_and_odd_digit_array([1, 2, 3, 5, 4, 2, 9, 6]))\r\n    print(palindromic_and_odd_digit_array([1, 2, 3, 4, 3, 6, 2]))\r\n    print(palindromic_and_odd_digit_array([1, 2, 3, 2, 1]))\r\n\r\npalindromic_and_odd_digit_array([1, 2, 3, 5, 4, 2, 9, 6])\r\npalindromic_and_odd_digit_array([1, 2, 3, 4, 3, 6, 2])\r\npalindromic_and_odd_digit_array([1, 2, 3, 2, 1])\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n    def max_freq_and_sum_check(lst, a, b):\n        from collections import Counter\n        cnt = Counter(lst)\n        max_freq = -1\n        for num in cnt:\n            if cnt[num] > num:\n                max_freq = num\n                break\n        if max_freq == -1:\n            return (-1, False)\n        return (max_freq, a == max_freq + b) or (max_freq, b == max_freq + a)\n\n    print(max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5))\n\nmax_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0)\nmax_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2)\nmax_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5)\n\nThe function max_freq_and_sum_check takes a list of integers and two additional integers a and b as input. It first counts the frequency of each number in the list using the Counter class from the collections module. It then iterates over the numbers in the list, and if it finds a number that has a frequency greater than its value, it sets this number as the max_freq and breaks the loop. If no such number is found, it returns (-1, False). If max_freq is not -1, it checks if either a or b is equal to the sum of max_freq and the other integer. If this is the case, it returns a tuple"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    def replace_with_count(s, base):\n        count = count_odd_digits(s)\n        return \"the number of odd elements in the string {} of the input.\".format(count)\n\n    return [replace_with_count(s, base) for s in lst]\n"}
{"task_id": "EvoEval/60", "completion": "\n    def smallest_even_triple(arr, n):\n        a = [i * i - i + 1 for i in arr]\n        a.sort()\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        a.append(a[i] + a[j] + a[k])\n                        a.sort()\n                        for l in range(n - 1, -1, -1):\n                            if a[l] % 2 == 0:\n                                return [a[l], l]\n        return []\n\n    print(smallest_even_triple([423], 5))\n    print(smallest_even_triple([1, 3, 7, 13, 21], 5))\n    print(smallest_even_triple([4, 2, 3, 1], 4))\n    print(smallest_even_triple([], 0))\n"}
{"task_id": "EvoEval/61", "completion": "\n\n    def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        longest_chain = None\n\n        for chain in chains:\n            if chain[0] == planet1 and chain[-1] == planet2:\n                if longest_chain is None or len(chain) > len(longest_chain):\n                    longest_chain = chain\n\n        return longest_chain\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.replace('-', ' ').replace('_', ' ') for word in words]\n    words = [word.lower() for word in words]\n    words = sorted(words, key=lambda x: (len(x), x))\n    words = ['-' if word == words[-1] else '' for word in words]\n    words = ['_' if word == words[-1] else '' for word in words]\n    words = [word.capitalize() for word in words]\n    return ''.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def sort_planets(planet1: str, planet2: str, order: str) -> str:\n        planets = {\n            \"Mercury\": 0,\n            \"Venus\": 1,\n            \"Earth\": 2,\n            \"Mars\": 3,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8\n        }\n\n        if not (planet1 in planets and planet2 in planets):\n            return \"Invalid\"\n\n        if not (set(order.split()) <= set(planets)):\n            return \"Invalid\"\n\n        if len(set(order.split())) != len(order.split()):\n            return \"Invalid\"\n\n        order_list = list(map(lambda x: planets[x], order.split()))\n        planet_list = sorted(list(planets.keys()), key=lambda x: order_list[planets[x]])\n\n        return \" \".join(planet for planet in planet_list if planets[planet_list[0]] <= planets[planet2])\n\n    print(sort_planets(\"Jupiter\", \"Neptune\", \"zero one two three four five six seven\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven one\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven six\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven one two\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven one two three\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven one two three four\"))\n    print(sort_planets(\"Earth\", \"Mars\", \"zero one two three four five six seven one two three four five six seven one two three four five six seven one two three four five six seven one two three"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def power_mod(base, exp, mod):\n        result = 1\n        while exp > 0:\n            if exp % 2 == 1:\n                result = (result * base) % mod\n            exp = exp >> 1\n            base = (base * base) % mod\n        return result\n\n    def modp_prime_numbers(n, p):\n        result = power_mod(2, n, p)\n        primes = [i for i in range(2, result) if is_prime(i)]\n        return [i for i in primes if i < result]\n\n    return modp_prime_numbers(n, p)\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 ** n % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def find_max_triple_sum(x, y, n):\n        max_even = -1\n        for i in range(x, y + 1):\n            if i % 2 == 0 and i != 0:\n                max_even = i\n                break\n        if max_even == -1:\n            return -1\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        result = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n + 1):\n                    if (a[i] + a[j]) + a[k] % 3 == 0:\n                        result += a[i] + a[j] + a[k]\n        return result\n\n    print(find_max_triple_sum(12, 15, 5))\n    print(find_max_triple_sum(17, 6, 6))\n    print(find_max_triple_sum(16, 28, 6))\n    print(find_max_triple_sum(28, 67, 10))\n\n\nfind_max_triple_sum(12, 15, 5)\nfind_max_triple_sum(17, 6, 6)\nfind_max_triple_sum(16, 28, 6)\nfind_max_triple_sum(28, 67, 10)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff and diff > threshold:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        return int(''.join(str(num) for num in str(num) if num % 2 != 0))\n\n    return sum(minOddDigitsProduct(num) for num in nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    lst = [s for s in lst if is_happy(s)]\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_fact(n):\n        fact = 1\n        for i in range(1, n+1):\n            fact *= factorial(i)\n        return fact\n\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            sum_fact = special_fact(numbers[i]) + special_fact(numbers[j])\n            diff = abs(sum_fact - special_fact(numbers[i]-numbers[j]))\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j])\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazil_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazil_fact(n - 1)\n\n    total_weight = sum(w)\n    max_weight = brazil_fact(n)\n\n    if total_weight <= max_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_fact(numbers):\n        result = 1\n        for n in numbers:\n            result *= factorial(n)\n        return result\n\n    for n in numbers:\n        if brazilian_fact(numbers[:n]) * brazilian_fact(numbers[n+1:]) < brazilian_fact(numbers[n]) * factorial(n-2) * (factorial(n-3) if n > 2 else 1):\n            return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> Fraction:\n        numer, denom = map(int, fraction.split('/'))\n        return Fraction(numer, denom)\n\n    return [simplify(fraction) == simplify(n) for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def sum_exchange(lst1, lst2, x, y, z):\n        def is_even(n):\n            return n % 2 == 0\n\n        def is_sum_of_two(lst, x, y):\n            s = set(lst)\n            for i in s:\n                if x - i in s and y - i in s:\n                    return True\n            return False\n\n        if is_sum_of_two(lst1, x, z) or is_sum_of_two(lst2, y, z):\n            return \"SUM \" + (\"YES\" if is_sum_of_two(lst1, x, z) else \"NO\")\n        else:\n            return \"NO_SUM \" + (\"YES\" if is_sum_of_two(lst1, x, y) else \"NO\")\n\n    print(sum_exchange([1, 2, 3, 4], [1, 2, 3], 5, 2, 2))\n    print(sum_exchange([1, 5, 3, 4], [4, 2, 2], 5, 2, 2))\n    print(sum_exchange([1, 5, 3, 4], [4, 2, 2], 5, 2, 3))\n    print(sum_exchange([1, 5, 3, 4], [4, 2, 2], 5, 2, 4))\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        if not input_dict or not all(k.isupper() for k in input_dict.keys()):\n            return {}\n\n        output_dict = {}\n        for key, value in input_dict.items():\n            try:\n                num = float(value)\n                output_dict[key] = round(num)\n            except ValueError:\n                pass\n\n        return output_dict\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified_lst = [sum_digits(n) if is_prime(n) else n for n in lst]\n    modified_lst.sort(key=lambda x: (x, lst.index(x) + lst.index(max(lst))))\n    return modified_lst\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def mixed_solution(arr):\n        return sum(i for i in arr if i % 2 == 0 and sum(int(d) for d in str(abs(i)) if int(d) > 0) > 0 and i < 0 and abs(int(str(i)[0])) == abs(i)])\n\n    print(mixed_solution([]))\n    print(mixed_solution([-1, 11, -11]))\n    print(mixed_solution([1, 1, 2]))\n    print(mixed_solution([5, 8, 7, 1]))\n    print(mixed_solution([3, 3, -3, 3, 3]))\n    print(mixed_solution([-35, 13, 24, 321]))\n\nmixed_solution()\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result = result[::-1]\n            for j in range(0, len(result), 2):\n                if result[j] in vowels:\n                    count += 1\n    return result, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    def happy_case_string(s):\n        if len(s) < 3:\n            return s[::-1]\n        for i in range(0, len(s)-2, 3):\n            if len(set(s[i:i+3])) != 3:\n                return s[::-1]\n        return s[::-1] if s.isalpha() else s[::-1].swapcase()\n\n    print(happy_case_string(\"1234\")) # \"4321\"\n    print(happy_case_string(\"ab\")) # \"ba\"\n    print(happy_case_string(\"#a@C\")) # \"#A@c\"\n    print(happy_case_string(\"abcd\")) # \"ABCD\"\n    print(happy_case_string(\"aabb\")) # \"bbaa\"\n    print(happy_case_string(\"adb\")) # \"ADB\"\n    print(happy_case_string(\"*#@\")) # \"@#*\"\n\nhappy_case_string(\"1234\") = \"4321\" happy_case_string(\"ab\") = \"ba\" happycasestring(\"#a@C\") = \"#A@c\" happy(\"abcd\") \"ABCD\" happy(\"aabb\") \"bbaa\" happy(\"adb\") \"ADB\" happy(\"*#@\") \"@#*\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\n    def decode(s: str) -> str:\n        return ''.join([s[-i] for i in range(1, len(s)+1)])\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n    result = ''.join([ch for ch in decoded if ch not in c])\n\n    return (result, is_palindrome(result))\n"}
{"task_id": "EvoEval/81", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 0.0\n\n    fibfib_sequence = [0, 0, 0]\n    for i in range(3, n+1):\n        fibfib_sequence.append(fibfib_sequence[i-2] + fibfib_sequence[i-1] + fibfib_sequence[i-3])\n\n    mean = sum(fibfib_sequence) / n\n    deviations = [abs(x - mean) for x in fibfib_sequence]\n\n    return sum(deviations) / len(deviations)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def odd_fibfib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            odd_fibfib_list = [0, 0, 1]\n            for i in range(3, n+1):\n                odd_fibfib_list.append(odd_fibfib_list[-1] + odd_fibfib_list[-2] + odd_fibfib_list[-3])\n                if odd_fibfib_list[-1] % 2 == 0:\n                    odd_fibfib_list[-1] = 0\n                else:\n                    odd_fibfib_list[-1] = sum(int(digit) for digit in str(odd_fibfib_list[-1]))\n            return odd_fibfib_list[-1]\n\n    return odd_fibfib(n)\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = text.replace(\" \", \"_\")\n    if re.search(r\"__+\", text):\n        text = re.sub(r\"__+\", \"-\", text)\n    if len(text) > 2 and is_prime(len(text)):\n        return True\n    return False\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {}\n            for letter in string[:i]:\n                if letter not in histogram[prefix]:\n                    histogram[prefix][letter] = 0\n                histogram[prefix][letter] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    return lst[1] if len(lst) > 1 else None\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    from fractions import Fraction\n    from math import floor, exp\n\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands &= set(operand_list)\n\n    if not common_operands:\n        return None\n\n    result = None\n    for operand in common_operands:\n        if result is None:\n            result = operand\n        else:\n            for operator in operators:\n                if operator == '+':\n                    result += operand\n                elif operator == '-':\n                    result -= operand\n                elif operator == '*':\n                    result *= operand\n                elif operator == '//':\n                    result = floor(result / operand)\n                elif operator == '**':\n                    result = exp(result * operand)\n\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for char in text:\n        if char in vowels:\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                text = text.replace(char, '')\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.split(', ')\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if string:\n            if hashlib.md5(string.encode()).hexdigest() == hash_substring:\n                result.append(string)\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n    for key in dict:\n        if not isinstance(key, str):\n            return {}\n        count = 0\n        for char in key:\n            if char.lower() in vowels:\n                count += 1\n        if count == 0:\n            return {}\n        else:\n            result[key] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(0, len(l), 2):\n        if is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    l[1::2] = sorted(l[1::2])\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = [i for i in a if i in l1]\n    common_elements.sort()\n    count = 0\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            for k in range(j + 1, len(common_elements)):\n                if (common_elements[i] + common_elements[j]) % 3 == 0 and (common_elements[k] + common_elements[j]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    vowels = 'aeiou'\n    string = string.lower()\n    length = len(string)\n\n    if is_prime(length):\n        for i in range(length - 2, 0, -1):\n            if string[i] in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n                return string[i]\n    return \"\"\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_sum_digits(arr):\n        count = 0\n        for num in arr:\n            if num < 0:\n                count += abs(num) // 10 ** len(str(abs(num)))\n            else:\n                count += sum(int(digit) for digit in str(num))\n        return count\n\n    arr.sort(key=count_sum_digits)\n    return arr\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    result = [s for s in strings if substring in s and len(s) % 2 == 0]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = [i for i in l1 if i in l2]\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            if common_elements[i] + common_elements[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fib_list = [0, 0, 1]\n            for i in range(3, n + 1):\n                fib_list.append(fib_list[-1] + fib_list[-2] + i - 2)\n            return fib_list[-1]\n\n    fib_list = [fib(i) for i in range(n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if (fib_list[i] + fib_list[j]) % 3 == 0 and (fib_list[i] + fib_list[j] + fib_list[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if not (value.count('(') == value.count(')') and value.count('(') > 0):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return len(str(int(x, base)))\n\n"}
