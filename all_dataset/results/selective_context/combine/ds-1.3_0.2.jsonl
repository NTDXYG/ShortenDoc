{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        for i in range(3):\n            if s[i] == s[i+1]:\n                return False\n        return True\n\n    if is_happy(a) and is_happy(b):\n        a, b = float(a.replace(',', '.')), float(b.replace(',', '.'))\n        if a > b:\n            return str(b)\n        elif a < b:\n            return str(a)\n        else:\n            return None\n    elif is_happy(a):\n        return a\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_andflip(value: str) -> str:\n        parts = value.split('.')\n        if len(parts) == 2:\n            number = float('.'.join(parts))\n            if number >= 0:\n                rounded_number = int(number) if number == int(number) else int(number) + 1\n            else:\n                rounded_number = int(number) if number == int(number) else int(number) - 1\n            return ' '.join([str(rounded_number), parts[1].upper()])\n        else:\n            return 'Invalid input'\n\n    print(round_andflip(\"14.5abc\"))  # 15 ABC\n    print(round_andflip(\"10.5abc\"))  # 11 ABC\n    print(round_andflip(\"14.0abc\"))  # 14 ABC\n    print(round_andflip(\"-14.5abc\"))  # -15 ABC\n    print(round_andflip(\"14.5ABC\"))  # 15 ABC\n    print(round_andflip(\"14.0ABC\"))  # 14 ABC\n    print(round_andflip(\"-14.5ABC\"))  # -15 ABC\n    print(round_andflip(\"14.5\"))  # 14\n    print(round_andflip(\"-14.5\"))  # -15\n    print(round_andflip(\"abc\"))  # Invalid input\n\n\nround_andflip(\"14.5abc\")\nround_andflip(\"10.5abc\")\nround_andflip(\"14.0abc\")\nround_andflip(\"-14.5abc\")\nround_andflip(\"14.5ABC\")\nround_andflip(\"14.0ABC\")\nround_andflip(\"-14.5ABC\")\nround_andflip(\"14.5\")\nround_andflip(\"-14.5\")\nround_andflip(\"abc\")\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i < len(numbers) - 1:\n            result.append((numbers[i] ** n) % p)\n            result.append(numbers[i + 1])\n        else:\n            result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    def sort_parentheses(lst: List[str]) -> str:\n        # sort the list of strings\n        lst.sort(key=len)\n\n        # check if the string is good\n        def is_good(s: str) -> bool:\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack or stack.pop() != '(':\n                        return False\n            return not stack\n\n        # check if there's a way to make a good string\n        for s in lst:\n            if is_good(s):\n                return 'Yes'\n\n        return 'No'\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        i = n - 1\n        while i > 1:\n            if n % i == 0 and is_prime(i):\n                return i\n            i -= 1\n        return 0\n\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    return max(sum_of_digits(i) for i in lst if is_prime(largest_prime_divisor(i)))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n\n    first_number = round(numbers[0])\n    last_number = round(numbers[-1])\n\n    if (first_number + last_number) % 2 == 0:\n        return sorted(numbers, reverse=True)\n    else:\n        return sorted(numbers)\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return (n + 1) / 2\n    else:\n        return (n + 1) / 2\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    def sum_square_cube(lst: list):\n        return sum(i**2 if idx % 3 == 0 else i**3 for idx, i in enumerate(lst))\n\n    return sum_square_cube([i for i in range(1, n+1)])\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    def correct_bracket_sequence_and_count(string: str, bracket: str) -> tuple:\n        count = 0\n        for char in string:\n            if char == bracket:\n                count += 1\n        return string.count(bracket) == count, count\n\n    return correct_bracket_sequence_and_count(string, bracket)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_position = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    if planet1 not in planet_position or planet2 not in planet_position:\n        return {}\n\n    if planet_position[planet1] > planet_position[planet2]:\n        planet1, planet2 = planet2, planet1\n\n    result = {}\n    for planet in sorted(planet_position.keys(), key=lambda p: planet_position[p]):\n        if planet_position[planet] >= planet_position[planet1] and planet_position[planet] <= planet_position[planet2]:\n            result[planet.lower()] = planet[0].upper() * (planet_position[planet] - planet_position[planet1])\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    def convert_to_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 33:\n            return 'A'\n        elif gpa > 30:\n            return 'B'\n        elif gpa > 27:\n            return 'B+'\n        elif gpa > 23:\n            return 'C'\n        elif gpa > 17:\n            return 'C+'\n        elif gpa > 30:\n            return 'D'\n        elif gpa > 00:\n            return 'D-'\n        else:\n            return 'E'\n\n    def convert_to_proper_case(name):\n        return name.title()\n\n    return [(convert_to_proper_case(name), convert_to_letter_grade(gpa)) for name, gpa in name_grade_list]\n"}
{"task_id": "EvoEval/11", "completion": "\n    def planet_vowel_count(planet1, planet):\n        planets = {\n            \"Mercury\": 1,\n            \"Venus\": 2,\n            \"Earth\": 3,\n            \"Mars\": 4,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8\n        }\n\n        if planet1 not in planets or planet not in planets:\n            return 0\n\n        planet1_index = planets[planet1]\n        planet_index = planets[planet]\n\n        if planet1_index < planet_index:\n            return sum(1 for c in planet1[::-1] if c in 'aeiouy' if c not in 'aeiou')\n        else:\n            return sum(1 for c in planet[::-1] if c in 'aeiouy' if c not in 'aeiou')\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def grade_from_gpa(gpa):\n        if gpa > 3.7: return 'A+'\n        elif gpa > 33: return 'A'\n        elif gpa > 27: return 'B+'\n        elif gpa > 23: return 'B'\n        elif gpa > 20: return 'B-'\n        elif gpa > 13: return 'C+'\n        elif gpa > 10: return 'C'\n        elif gpa > 7: return 'D+'\n        elif gpa > 0: return 'D'\n        else: return 'E'\n\n    return [{'name': student['name'], 'grade': grade_from_gpa(student['GPA'])} for student in student_info if count_consonants(student['name']) == n]\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        n = abs(n)\n        return sum(int(digit) for digit in str(n))\n\n    filtered_arr = [num for num in arr if sum_digits(num) > 0]\n    lst1 = [num for num in lst1 if sum_digits(num) > 0]\n\n    for num in filtered_arr:\n        if num % 2 == 1:\n            lst1.append(num)\n            filtered_arr.remove(num)\n\n    if len(filtered_arr) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)[2:]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    points = set()\n    for op in operations:\n        balance += op\n        if balance in points:\n            return True\n        points.add(balance)\n        if balance < 0:\n            return False\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    music_dict = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    word_list = list(word)\n    music_list = music_string.split()\n    music_list = [i for i in music_list if i in music_dict]\n    music_dict = {i: music_dict[i] for i in music_dict if i in music_dict}\n    result = []\n    for i in range(len(word_list)):\n        if word_list[i] in vowels:\n            for j in range(i+1, len(word_list)):\n                if word_list[j] in vowels:\n                    result.append(music_dict[music_list[0]])\n                    break\n    return result\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_lst = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_lst.append(fibfib_lst[i-1] + fibfib_lst[i-2] + fibfib_lst[i-3])\n\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    max_val = -1\n    max_freq = -1\n    for num in freq_dict:\n        if num in fibfib_lst and freq_dict[num] >= fibfib_lst[n]:\n            if num > max_val or (num == max_val and freq_dict[num] > max_freq):\n                max_val = num\n                max_freq = freq_dict[num]\n\n    return max_val\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                min_sum = min(min_sum, nums[i] + nums[j] + nums[k])\n\n    return min_sum if min_sum != float('inf') else 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance = 0\n    invalid_balance = False\n\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            invalid_balance = True\n            if largest_withdrawal is None or operation > largest_withdrawal:\n                largest_withdrawal = operation\n        if smallest_deposit is None or operation < smallest_deposit:\n            smallest_deposit = operation\n\n    return largest_withdrawal, smallest_deposit, invalid_balance\n"}
{"task_id": "EvoEval/20", "completion": "\n    def grade_and_case(s, grades):\n        def letter_grade(gpa):\n            if gpa == 4.0:\n                return 'A+'\n            elif gpa == 3.0:\n                return 'A'\n            elif gpa == 3.0:\n                return 'A-'\n            elif gpa == 2.7:\n                return 'B+'\n            elif gpa == 2.0:\n                return 'B'\n            elif gpa == 1.0:\n                return 'B-'\n            elif gpa == 0.7:\n                return 'C+'\n            elif gpa == 0.0:\n                return 'D'\n            else:\n                return 'F'\n\n        tu = []\n        for name, gpa in zip(s, grades):\n            tu.append((name[::-1].lower(), letter_grade(gpa)))\n        return tu\n\n    print(grade_and_case(['Amy', 'Bob'], [4.0, 3.3]))\n\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy', 'Bob'], [4.0, 3.3])\ngrade_and_case(['Amy"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    new_base_num = int(base_change(x, base))\n    new_base_str = str(new_base_num)\n    prefixes = [new_base_str[i:] for i in range(len(new_base_str))]\n    return prefixes\n"}
{"task_id": "EvoEval/22", "completion": "\n\n    def binary_planet_distance(planet1, planet2):\n        planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        if planet1 not in planets or planet2 not in planets:\n            return ''\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        binary = ''.join(format(i - index2, 'b') for i in range(index1 + 1, index2))\n        return 'bd' + binary\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n+1):\n            if n % 2 == 0:\n                result *= factorial(i)\n            else:\n                result *= factorial(i+1)\n        return result\n\n    return [brazilian_factorial(n) for n in range(1, n+1)]\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        s = s.replace(' ', '')\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    def sort_string(s: str) -> str:\n        return ' '.join(sorted(s.split(' ')))\n\n    if is_happy(numbers):\n        return sort_string(numbers)\n    else:\n        return 'Not a happy string'\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    valid_triples = [(a[i], a[j]) for i in range(n) for j in range(i+1, n)]\n    sum_valid_triples = sum(a[i] + a[j] for i, j in valid_triples)\n    product_valid_triples = [a[i] * a[j] for i, j in valid_triples]\n    product_valid_triples_reduced = reduce(lambda x, y: x * y, product_valid_triples)\n    return (sum_valid_triples, product_valid_triples_reduced)\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_values = [(int(v.split()[-1]), i) for i, v in enumerate(values) if int(v.split()[-1]) % 2 == 0]\n    if not even_values:\n        return ()\n    even_values.sort()\n    return even_values[0]\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1 = [i for i in lst1 if is_prime(i)]\n    lst2 = [i for i in lst2 if is_prime(i)]\n\n    if len(lst1) > len(lst2):\n        return x\n    elif len(lst2) > len(lst1):\n        return y\n    else:\n        return x\n"}
{"task_id": "EvoEval/28", "completion": "\n    def grade(gpa: float, s0: str, s1: str) -> str:\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa == 3.7:\n            return 'A'\n        elif gpa == 3.3:\n            return 'B+'\n        elif gpa == 3.0:\n            return 'B'\n        elif gpa == 2.7:\n            return 'B-'\n        elif gpa == 2.3:\n            return 'C+'\n        elif gpa == 2.0:\n            return 'C'\n        elif gpa == 1.7:\n            return 'C-'\n        elif gpa == 1.3:\n            return 'D+'\n        elif gpa == 1.0:\n            return 'D'\n        elif gpa == 0.7:\n            return 'D-'\n        else:\n            return 'E'\n\n    def grade_with_same_chars(grades: list, s0: str, s1: str) -> list:\n        return [grade(gpa, s0, s1) for gpa in grades if len(set(s0)) == len(s1)]\n\n    return grade_with_same_chars(grades, s0, s1)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return max(factors)\n    else:\n        return x\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(x.numerator == 1)\n        elif note == 'o|':\n            result.append(x.numerator == 2)\n        elif note == '.|':\n            result.append(x.numerator == 4)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def special_factorial(factors: List[int]) -> int:\n        product = 1\n        for factor in set(factors):\n            product *= factors.count(factor)\n        return product\n\n    factors = factorize(n)\n    return special_factorial(factors)\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    def circular_shift(n: int, shift: int) -> int:\n        digits = [int(d) for d in str(n)]\n        shift %= len(digits)\n        return int(''.join(map(str, digits[-shift:] + digits[:-shift])))\n\n    depths = [get_max_depth(s) for s in input]\n    total = sum(depths)\n    result = circular_shift(total, shift)\n    return [int(d) for d in str(result)]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_numerals = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    last_num = 0\n    for i in range(len(s) - 1, -1, -1):\n        if roman_numerals[s[i]] >= last_num:\n            last_num = roman_numerals[s[i]]\n        else:\n            return False\n    if len(s) < 3:\n        return False\n    if s[-1] not in roman_numerals or roman_numerals[s[-1]] < 1 or roman_numerals[s[-1]] > 1000:\n        return False\n    if s.count(s[0]*3) > 0:\n        return False\n    return last_num\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(s: str) -> str:\n        max_level = 0\n        current_level = 0\n        max_level_str = ''\n        for c in s:\n            if c == '(':\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n                    max_level_str = c\n            elif c == ')':\n                current_level -= 1\n        return max_level_str * max_level\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split()\n    return [md5_hash(deepest_level(g)) for g in groups]\n"}
{"task_id": "EvoEval/35", "completion": "\n    def is_happy_string(s):\n        if len(s) != 3:\n            return False\n        for i in range(2):\n            if s[i] == s[i+1]:\n                return False\n        return True\n\n    for key in dict:\n        if not key.islower() or not is_happy_string(key) or not is_happy_string(dict[key]):\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(n):\n        if arr[i] != i + 1:\n            return False\n    return True\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    min_sub_array = None\n    even_count = 0\n    odd_count = 0\n\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            sub_sum = sum(sub_array)\n\n            if sub_sum % 2 == 0:\n                even_count += sub_array.count(0)\n            else:\n                odd_count += sub_array.count(0)\n\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n                min_sub_array = sub_array\n\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def count_palindromes(l, n):\n        even_count = 0\n        odd_count = 0\n        for i in range(1, n + 1):\n            if str(i) in str(i)[::-1]:\n                if i % 2 == 0:\n                    even_count += 1\n                else:\n                    odd_count += 1\n        return even_count, odd_count\n\n    even_count, odd_count = count_palindromes(l, n)\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] in (even_count, odd_count):\n                return True, (even_count, odd_count)\n    return False, (even_count, odd_count)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def smallest_change_and_sum(arr, x, y):\n        n = len(arr)\n        changes = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                changes += 1\n        changes += max(0, n%2 - 1)\n        return changes*x + y\n\n    print(smallest_change_and_sum([1, 2, 5, 4, 7, 9, 6], 2, 3))\n    print(smallest_change_and_sum([1, 4, 3, 2, 2], 1, 2))\n    print(smallest_change_and_sum([3, 2, 1, 2, 1], 3, 2))\n    print(smallest_change_and_sum([1, 2, 1], 1, 2))\n\nsmallest_change_and_sum()\n"}
{"task_id": "EvoEval/40", "completion": "\n    def largest_prime(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    def is_odd_and_largest(n):\n        str_n = str(n)\n        return str_n[0] in '13579' and str_n[-1] in '13579' and largest_prime(n) > 10\n\n    primes = [x for x in nums if is_odd_and_largest(x)]\n    return max(primes) if primes else None\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = \"AEIOU\"\n    s = s.upper()\n    if shift > len(s):\n        s = s[::-1]\n    s = s[shift:] + s[:shift]\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n\n    def is_whole_number(n):\n        return n.is_integer() and n > 0\n\n    def is_valid_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return is_whole_number(numerator) and is_whole_number(denominator)\n\n    def is_valid_expression(expression):\n        open_brackets = expression.count('<')\n        close_brackets = expression.count('>')\n        if open_brackets != close_brackets:\n            return False\n        fractions = re.findall(r'<\\d+/\\d+>', expression)\n        for fraction in fractions:\n            if not is_valid_fraction(fraction):\n                return False\n        return True\n\n    return is_valid_expression(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    def fib4(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            return fib4(n-1) + fib4(n-2) + fib4(n-3)\n\n    sequence = [fib4(i) for i in range(n)]\n    sum_sequence = sum(sequence)\n\n    if sum_sequence % 2 == 0:\n        sequence.sort(reverse=True)\n    else:\n        sequence.sort()\n\n    return sequence\n"}
{"task_id": "EvoEval/44", "completion": "\n    def int_to_roman(num: int) -> str:\n        val = [\n            1000, 900, 500, 400,\n            100, 90, 50, 40,\n            10, 9, 5, 4,\n            1\n            ]\n        syb = [\n            \"m\", \"cm\", \"d\", \"cd\",\n            \"c\", \"xc\", \"l\", \"xl\",\n            \"x\", \"ix\", \"v\", \"iv\",\n            \"i\"\n            ]\n        roman_num = ''\n        i = 0\n        while num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n    def roman_prefixes(num: int) -> List[str]:\n        prefixes = []\n        for i in range(1, num + 1):\n            prefixes.append(int_to_roman(i))\n        return prefixes\n\n    return roman_prefixes(number)\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_num += num\n            product_num *= num\n\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/46", "completion": "\n    # filter out the negative numbers\n    l = [i for i in l if i >= 0]\n    # filter out the odd numbers\n    l = [i for i in l if i % 2 == 0]\n    # if there are no positive even numbers, return -.\n    if not l:\n        return -1\n    # else, return the maximum number.\n    return max(l)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    output = []\n    for i, string in enumerate(lst):\n        n = sum(1 for c in string if c in vowels and c == s[i] and i % 2 == 0)\n        m = sum(1 for c in string if c not in vowels and c != '0' and int(c) % 2 == 1)\n        output.append(f\"In the string, the number of uppercase vow in even indices is '{n}', and the number odd digits is '{m}'.\")\n    return output\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def get_digits(n: int) -> list:\n        return [int(d) for d in str(n)]\n\n    def sum_digits(n: int) -> int:\n        return sum(get_digits(n))\n\n    def modp(n: int, p: int) -> int:\n        return n % p\n\n    result = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * (abs(num) // p) * p\n        result += sum_digits(modp(num, 2**n))\n    return result\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    def modify(a):\n        if isinstance(a, str):\n            if a.isalpha():\n                return a.lower() if a.isupper() else a.upper()\n            else:\n                return a[::-1]\n        elif isinstance(a, int) or isinstance(a, float):\n            return a\n        else:\n            return None\n\n    a = modify(a)\n    b = modify(b)\n\n    if a is None or b is None:\n        return b\n    elif isinstance(a, float) or isinstance(b, float):\n        return max(a, b)\n    else:\n        return a if a > b else b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        if not arr:\n            return ([], None)\n        smallest_even = float('inf')\n        smallest_index = -1\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n        if smallest_index == -1:\n            return ([], None)\n        else:\n            return ([smallest_even, smallest_index], sum(arr) - smallest_even)\n\n    print(pluck_and_prod([423]))\n    print(pluck_and_prod([1,2]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n"}
{"task_id": "EvoEval/53", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    hex_grades = {4.0: 'A', 3.0: 'B', 2.0: '8', 1.0: '9', 0.0: '0'}\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n\n    for grade in grades:\n        if is_prime(hex_grades.get(grade, '')) in prime_hex_grades:\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]) and is_prime(nums[j]):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"}\r\n    roman_numerals_reverse = {v: k for k, v in roman_numerals.items()}\r\n    result = \"\"\r\n    if number < 1 or number > 1000:\r\n        return None\r\n    for i in sorted(roman_numerals.keys(), reverse=True):\r\n        while number >= i:\r\n            result += roman_numerals[i]\r\n            number -= i\r\n    return hashlib.md5(result.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def odd_prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                if is_prime(i) and i % 2 != 0:\n                    factors.append(i)\n        if n > 1 and is_prime(n) and n % 2 != 0:\n            factors.append(n)\n        return factors\n\n    factors = odd_prime_factors(n)\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def palindromic_and_odd_digit_array(arr):\r\n        odd_digit_count = sum(str(i).count('1') for i in arr)\r\n        return odd_digit_count // 2 + odd_digit_count % 2\r\n\r\n    def palindromic_and_odd_digit_array(arr):\r\n        odd_digit_count = sum(str(i).count('1') for i in arr)\r\n        return odd_digit_count // 2 + odd_digit_count % 2\r\n\r\n    def palindromic_and_odd_digit_array(arr):\r\n        odd_digit_count = sum(str(i).count('1') for i in arr)\r\n        return odd_digit_count // 2 + odd_digit_count % 2\r\n\r\n    return palindromic_and_odd_digit_array(arr)\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n    def max_fre_andsum_check(lst, a, b):\n        from collections import Counter\n        cnt = Counter(lst)\n        max_fre = -1\n        for i in cnt:\n            if cnt[i] > max_fre:\n                max_fre = i\n        if max_fre == -1:\n            return (-1, False)\n        if a == max_fre + b or b == max_fre + a:\n            return (max_fre, True)\n        else:\n            return (max_fre, False)\n\n    print(max_fre_andsum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_fre_andsum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2))\n    print(max_fre_andsum_check([5, 5, 4, 4, 4, 4, 4, 4, 4], 8, 3))\n    print(max_fre_andsum_check([5, 5, 4, 4, 4, 4, 4, 4, 4], 10, 5))\n\nThe function max_fre_andsum_check takes a list of integers and two additional integers as input. It first counts the frequency of each integer in the list using the Counter class from the collections module. It then iterates over the Counter object to find the integer with the highest frequency. If no such integer exists, it returns (-1, False). If such an integer does exist, it checks if either a or b is equal to the sum of the integer and the other integer. If this is the case, it returns (max_fre, True). Otherwise, it returns (max_fre, False).\n"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    def replace_with_base(s, base):\n        return int(s, base)\n\n    return [f\"the number of odd elements {i}n the str{i}ng {i} of the {i}nput.\" for i in range(len(lst))]\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [0] * n\n    for i in range(n):\n        a[i] = i * i - i + i\n    res = []\n    for i in range(1, n):\n        if a[i] % 3 == 0:\n            res.append(a[i])\n    if res:\n        return [min(res), a.index(min(res))]\n    else:\n        return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        longest_chain = None\n        for chain in chains:\n            if chain[0] == planet1 and chain[-1] == planet2:\n                if longest_chain is None or len(chain) > len(longest_chain):\n                    longest_chain = chain\n        return longest_chain\n\n    print(longest_planet_chain(\"Earth\", \"Sat\", [(\"Earth\", \"Mars\", \"J\", \"Sat\"), (\"EarthVen\", \"Merc\", \"Mars\", \"J\", \"Sat\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"J\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"EarthMars\"), (\"EarthVen\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\","}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.replace('-', ' ').replace('_', '-') for word in words]\n    words = sorted([word for word in words if len(word) > 2], key=lambda x: (len(x), x.lower()))\n    words = words[::-1]\n    words = [word.replace('-', '_').replace('_', '-') for word in words]\n    return '-'.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    order = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7}\n\n    if planet1 not in planets or order not in order:\n        return 'Invalid'\n\n    index1 = planets.index(planet1)\n    planets_in_order = [planets[i] for i in range(index1 + 1, len(planets)) if order[planets[i]] >= order[planet1]]\n\n    return ' '.join(planets_in_order)\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = [2]\n    for i in range(3, n + 1):\n        power_result = (2**i) % p\n        if is_prime(power_result):\n            result.append(power_result)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1) % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def find_max_triple_sum(x, y, n):\n        max_even = -1\n        for i in range(x, y + 1):\n            if i % 2 == 0 and i > max_even:\n                max_even = i\n        if max_even == -1:\n            return -1\n        a = [i * i - i + max_even for i in range(1, n + 1)]\n        sum_triple = -1\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        sum_triple = max(sum_triple, a[i] + a[j] + a[k])\n        return sum_triple\n\n    print(find_max_triple_sum(12, 15, 5))\n    print(find_max_triple_sum(17, 6, 6))\n    print(find_max_triple_sum(28, 67, 7))\n\n\nfind_max_triple_sum(12, 15, 5)\nfind_max_triple_sum(17, 6, 6)\nfind_max_triple_sum(28, 67, 7)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    left, right = 0, len(numbers) - 1\n    while left < right:\n        if numbers[right] - numbers[left] > threshold:\n            return numbers[right] - numbers[left]\n        left += 1\n        right -= 1\n    return 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        return sum(int(d) for d in str(num) if int(d) % 2 != 0)\n\n    return sum(minOddDigitsProduct(num) for num in nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) % 3 != 0:\n            return False\n        for i in range(0, len(s), 3):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    lst = [s for s in lst if is_happy(s)]\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def special_fact(n):\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= factorial(i)\n        return fact\n\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if special_fact(numbers[i]) + special_fact(numbers[j]) < min_diff:\n                min_diff = special_fact(numbers[i]) + special_fact(numbers[j])\n                result = (numbers[i], numbers[j])\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazil_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazil_factorial(n - 1)\n\n    total_weight = sum(w)\n    max_weight = brazil_factorial(n)\n\n    return total_weight <= max_weight\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    for n in numbers:\n        special1 = factorial(n) * factorial(n-1) * (2 * factorial(n-2) if n > 1 else 1)\n        special2 = factorial(n-1) * factorial(n-2) * (2 * factorial(n-3) if n > 2 else 1)\n        if abs(special1 - special2) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> Fraction:\n        num, den = map(int, fraction.split('/'))\n        return Fraction(num, den)\n\n    fractions = [simplify(f) for f in fractions]\n    n = simplify(n)\n\n    return [f.numerator == n.numerator and f.denominator == n.denominator for f in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def sum_exchange(lst1, lst2, x, y, z):\n        # Check if it is possible to exchange elements between lst1 and lst2 to make all elements of lst2 even\n        for i in range(len(lst1)):\n            if lst1[i] % 2 != 0:\n                lst1[i] += x\n            if lst2[i] % 2 != 0:\n                lst2[i] += y\n            if lst1[i] % 2 == 0 and lst2[i] % 2 == 0:\n                continue\n            else:\n                return \"NO\"\n\n        # Check if one of the integers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return \"SUM\"\n        else:\n            return \"NO_SUM\"\n\n    print(sum_exchange([1, 2, 3], [1], 5, 2, 2))\n    print(sum_exchange([1, 5, 3, 4, 2, 2], [2], 5, 2, 2))\n    print(sum_exchange([1, 5, 3, 4, 2, 2], [2], 5, 2, 2))\n    print(sum_exchange([1, 5, 3, 4, 2, 2], [2], 5, 2, 2))\n\n\nsum_exchange([1, 2, 3], [1], 5, 2, 2)\nsum_exchange([1, 5, 3, 4, 2, 2], [2], 5, 2, 2)\nsum_exchange([1, 5, 3, 4, 2, 2], [2], 5, 2, 2)\nsum_exchange([1, 5, 3, 4, 2, 2], [2], 5, 2, 2)\n\n\nThe function sum_exchange() takes in five parameters: lst1, l"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        if not input_dict or not all(isinstance(k, str) and isinstance(v, str) for k, v in input_dict.items()):\n            return {}\n        if not all(k.isupper() for k in input_dict.keys()):\n            return {}\n        output_dict = {}\n        for k, v in input_dict.items():\n            try:\n                num = float(v)\n                rounded_num = round(num)\n                if num >= 0:\n                    output_dict[k] = rounded_num\n                else:\n                    output_dict[k] = rounded_num - 1\n            except ValueError:\n                continue\n        return output_dict\n\n    print(transform_dict({\"a\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"a\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\",15.3:\"10.5\"}))\n    print(transform_dict({\"A\":\"10\","}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    def sort_list(lst):\n        if sum(lst) % 2 == 0:\n            return sorted(lst, reverse=True)\n        else:\n            return sorted(lst)\n\n    for i in range(len(lst)):\n        if is_prime(lst[i]):\n            lst[i] = sum_digits(lst[i])\n\n    return sort_list(lst)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(num for i, num in enumerate(arr) if i % 2 == 0 and num > 0 and sum_of_digits(num) > 0)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                result += s[i].lower()\n            else:\n                result += s[i].upper()\n        else:\n            result = result[::-1]\n            for j in range(0, len(result), 2):\n                if result[j] in vowels:\n                    count += 1\n    return result, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    def happy_case_string(s):\n        if len(s) != 3 or len(set(s[i:i+3] for i in range(len(s)))) != 3:\n            return s[::-1]\n        else:\n            return ''.join(c.upper() if i%3==0 else c.lower() for i, c in enumerate(s))[::-1]\n\n    print(happy_case_string(\"1234\")) # \"4321\"\n    print(happy_case_string(\"aBc1\")) # \"cBa\"\n    print(happy_case_string(\"happyabcd\")) # \"dCbaP\"\n    print(happy_case_string(\"ABCD\")) # \"dCBA\"\n    print(happy_case_string(\"aabb\")) # \"bBa\"\n    print(happy_case_string(\"@#*\")) # \"*#@\"\n    print(happy_case_string(\"\")) # \"*\"\n    print(happy_case_string(\"1\")) # \"*\"\n    print(happy_case_string(\"12\")) # \"*\"\n    print(happy_case_string(\"123\")) # \"*\"\n\n    # Add more test cases as needed\n\n    # The function should return the resulted string.\n    # Examples: happy_case_string(\"1234\") = \"4321\"\n    # If the string is happy, reverse the case for each letter in the string.\n    # If s[i] is a letter, reverse its case from lower to upper or vise, otherwise keep it as it is.\n    # If the string is not happy or if it contains no letters, reverse the string.\n    # The function should return the resulted string.\n    # Examples: happy_case_string(\"1234\") = \"4321\"\n    # If the string is happy, reverse the case for each letter in the string.\n    # If s[i] is a letter, reverse its case from lower to upper or vise, otherwise keep it as it is.\n    # If the string is not happy or if it contains no letters, reverse the string.\n    # The function should return the resulted string.\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\n    def decode(s: str) -> str:\n        return ''.join([s[-i] for i in range(1, len(s)+1)])\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n\n    if is_palindrome(decoded):\n        return (decoded, True)\n    else:\n        return (decoded, False)\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n    fibfib_sequence = [fibfib(i) for i in range(n)]\n    mean = sum(fibfib_sequence) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence) / n\n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    def odd_fibfib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for i in range(3, n + 1):\n                a, b, c = b, c, a + b * c\n            return c\n\n    def odd_fib(n: int):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            a, b, c = 0, 0, 1\n            for i in range(3, n + 1):\n                a, b, c = b, c, a + b * c\n            return c if c % 2 != 0 else 0\n\n    def odd_fibfib(n: int):\n        return odd_fib(odd_fibfib(n - 1)) + odd_fibfib(n - 2)\n\n    return odd_fibfib(n)\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(\" +\", \"-\", text)\n    text = text.replace(\" \", \"_\")\n    if is_prime(len(text)):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {}\n        if string[i - 1] not in histogram[prefix]:\n            histogram[prefix][string[i - 1]] = 0\n        histogram[prefix][string[i - 1]] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    from functools import reduce\n    from operator import add\n\n    common_operands = set(reduce(add, operand_lists))\n    if not common_operands:\n        return None\n\n    def evaluate(expression, operator, operands):\n        if operator == '+':\n            return sum(operands)\n        elif operator == '-':\n            return reduce(lambda a, b: a - b, operands)\n        elif operator == '*':\n            return reduce(lambda a, b: a * b, operands)\n        elif operator == '//':\n            return reduce(lambda a, b: a // b, operands)\n        elif operator == '**':\n            return reduce(lambda a, b: a ** b, operands)\n\n    expression = str(common_operands.pop())\n    for operator, operands in zip(operators, operand_lists):\n        expression += ' ' + operator + ' ' + str(common_operands.pop())\n\n    return eval(expression)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for char in text:\n        if char in vowels:\n            continue\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                text = text.replace(char, '')\n    if stack:\n        return '(' * len(stack) + text\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.split(', ')\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    if not strings:\n        return None\n    return [s for s in strings if hashlib.md5(s.encode()).hexdigest() == hash_substring]\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict:\n        count = 0\n        for char in key:\n            if char.lower() in vowels:\n                count += 1\n        if count > 0:\n            result[key] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sort_list(lst):\n        lst.sort()\n        return lst\n\n    for i in range(0, len(l), 2):\n        if is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = [i for i in l1 if i in a]\n    common_elements.sort()\n    triples = [(a[i], a[j], a[k]) for i in range(len(common_elements)) for j in range(i + 1, len(common_elements)) for k in range(j + 1, len(common_elements)) if (a[i] + a[j] + a[k]) % 3 == 0]\n    return triples, len(triples)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    string = string.lower()\n    length = len(string)\n\n    if is_prime(length):\n        for i in range(length - 2, 0, -1):\n            if string[i] in consonants and string[i-1] in vowels and string[i+1] in vowels:\n                return string[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_sum_digits(arr):\n        count = 0\n        for num in arr:\n            if num < 0:\n                count += -1 * (num // 10) - (num % 10)\n            else:\n                count += num // 10 + num % 10\n        return count\n\n    def sort_array(arr):\n        arr.sort()\n        return arr\n\n    count = count_sum_digits(arr)\n    if count % 2 != 0:\n        arr = sort_array(arr)\n    else:\n        arr = sort_array(arr)[::-1]\n    return arr\n"}
{"task_id": "EvoEval/95", "completion": "\n    def filter_strings(strings: List[str], substring: str) -> List[str]:\n        return [s for s in strings if substring in s and len(s) % 2 == 0]\n\n    def sort_strings(strings: List[str]) -> List[str]:\n        return sorted(strings, key=lambda s: (len(s), s))\n\n    filtered_strings = filter_strings(strings, substring)\n    sorted_strings = sort_strings(filtered_strings)\n\n    return sorted_strings\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = [value for value in l1 if value in l2]\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            if common_elements[i] + common_elements[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def fib(n):\n        fib_seq = [0, 0, 1]\n        for i in range(3, n+1):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + i*i - i + 1)\n        return fib_seq\n\n    fib_seq = fib(n)\n    triples = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (fib_seq[i] + fib_seq[j] + fib_seq[k]) % 3 == 0:\n                    triples.append([fib_seq[i], fib_seq[j], fib_seq[k]])\n    return len(triples)\n"}
{"task_id": "EvoEval/98", "completion": "\n    def check_key(key):\n        return isinstance(key, str)\n\n    def check_value(value):\n        if isinstance(value, str) and value.count('(') == value.count(')'):\n            return value.count('(') == value.count(')')\n        return False\n\n    return all(check_key(key) and check_value(value) for key, value in dict.items())\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return len(str(x).replace(\"0\", \"\").replace(\"1\", \"\").replace(\"2\", \"\").replace(\"3\", \"\").replace(\"4\", \"\").replace(\"5\", \"\").replace(\"6\", \"\").replace(\"7\", \"\").replace(\"8\", \"\").replace(\"9\", \"\"))\n\n"}
