{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        return len(set(s[i] for i in range(3))) == 3\n\n    def to_num(s):\n        try:\n            return float(s)\n        except ValueError:\n            return None\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if not a_happy and not b_happy:\n        return None\n\n    a_num = to_num(a)\n    b_num = to_num(b)\n\n    if a_num is None and b_num is None:\n        return None\n\n    if a_happy and b_happy:\n        return str(max(a_num, b_num))\n\n    if a_num is not None:\n        return str(a_num)\n\n    return str(b_num)\n\n"}
{"task_id": "EvoEval/1", "completion": "\n\n    print(round_andfl(\"10.5abc '11 ABC'153ABC15 ab Note Rounding away from zero means if the given equid two integers one you should return one the fartFor example round_andfl(\"14.5abc should '15 ABC and-ABC-15 ab'''\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n   "}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    \"\"\"\n    print(sort_parentheses(['(three)(', '(five)one', 'not']))\n    # ['No sortfivethree', 'Yes onefive', 'No not']\n    \"\"\"\n    \"\"\"\n    def sort_parentheses(lst: List[str]) -> List[str]:\n        result = []\n        for s in lst:\n            stack = []\n            temp = []\n            for ch in s:\n                if ch == '(':\n                    stack.append(ch)\n                elif ch.isdigit():\n                    if not stack:\n                        temp.append(ch)\n                    else:\n                        stack.pop()\n                        temp.append(ch)\n            if stack:\n                result.append('No ' + ''.join(sorted(temp)))\n            else:\n                result.append('Yes ' + ''.join(sorted(temp)))\n        return result\n    \"\"\"\n    \"\"\"\n    print(sort_parentheses(['(three)(', '(five)one', 'not']))\n    # ['No sortfivethree', 'Yes onefive', 'No not']\n    \"\"\"\n    \"\"\"\n    def sort_parentheses(lst: List[str]) -> List[str]:\n        result = []\n        for s in lst:\n            stack = []\n            temp = []\n            for ch in s:\n                if ch == '(':\n                    stack.append(ch)\n                elif ch.isdigit():\n                    if not stack:\n                       "}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_div(n):\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    return max(digit_sum(largest_prime_div(n)) for n in lst)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            if round(numbers[0]) + round(numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n * n\n    else:\n        return n * n\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        if i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    bracket_count = string.count(bracket)\n    bracket_pairs = string.count('>>'), string.count('<<')\n    return bracket_pairs[0] == bracket_pairs[1], bracket_count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n        9: \"ix\",\n        10: \"x\"\n    }\n\n    result = {}\n\n    if planet1 not in planets or planet2 not in planets:\n        return result\n\n    start = min(planets[planet1], planets[planet2])\n    end = max(planets[planet1], planets[planet2])\n\n    for planet, position in planets.items():\n        if start < position < end:\n            result[planet] = roman_numerals[position]\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_scale = {40: 'A+', 37: 'A', 33: 'A-', 30: 'B+', 27: 'B', 23: 'B-', 20: 'C+', 17: 'C', 13: 'C-', 10: 'D+', 7: 'D', 3: 'D-', 0: 'E'}\n    name_grade_list = [(name.title(), grade) for name, grade in name_grade_list]\n    name_grade_list = [(name, grade_scale[min(grade_scale.keys(), key=lambda x:abs(x-grade))]) for name, grade in name_grade_list]\n    return name_grade_list\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    grading_scale = {\n        40: 'A+',\n        37: 'A',\n        33: 'B+',\n        30: 'B',\n        27: 'C',\n        23: 'D',\n        0: 'E'\n    }\n\n    result = []\n    for student in student_info:\n        name = student['name']\n        gpa = student['GPA']\n        consonant_count = count_consonants(name)\n        if consonant_count != n:\n            continue\n        grade_points = round(gpa * 100)\n        for points, grade in grading_scale.items():\n            if grade_points >= points:\n                final_grade = grade\n                break\n        else:\n            final_grade = 'E'\n        result.append({'name': name, 'grade': final_grade})\n\n    return result\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_positive(n):\n        return n > 0\n\n    def is_negative(n):\n        return n < 0\n\n    def first_digit(n):\n        return int(str(n)[0]) if n != 0 else 0\n\n    def make_negative(n):\n        return -n if n > 0 else n\n\n    def make_positive(n):\n        return -n if n < 0 else n\n\n    def exchange(arr, lst1):\n        arr = [make_positive(i) if is_negative(i) else i for i in arr]\n        lst1 = [make_positive(i) if is_negative(i) else i for i in lst1]\n\n        arr = [i for i in arr if is_positive(i)]\n        lst1 = [i for i in lst1 if is_positive(i)]\n\n        arr = [i for i in arr if is_even(i)]\n        lst1 = [i for i in lst1 if is_even(i)]\n\n        if len(arr) != len(lst1):\n            return \"NO\"\n\n        for i in range(len(arr)):\n            if sum_digits(arr[i]) <= sum_digits(lst1[i]):\n                return \"NO\"\n\n        return \"YES\"\n\n    return exchange(arr, lst1)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n, m+1) if is_prime(x)]\n    if not primes:\n        return \"-\"\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance == 0:\n            zero_sum_points += 1\n    return zero_sum_points >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiou\"\n    notes = [\"o\", \"o|\", \".|\", \"|\"]\n    word = word[::-1]\n    music_string = music_string[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            count = 0\n            for j in range(i + 1, len(music_string)):\n                if music_string[j] in notes:\n                    count += 1\n                if music_string[j] == \".\":\n                    count *= 2\n                if music_string[j] == \"|\":\n                    count *= 4\n                if music_string[j] in vowels:\n                    result.append(count)\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    fib_n = fib(n)\n    count = lst.count(fib_n)\n\n    if count >= fib_n:\n        return fib_n\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    balance_zero = False\n    for op in operations:\n        balance += op\n        if balance < 0:\n            balance_zero = True\n        elif op > 0:\n            if min_deposit is None or op < min_deposit:\n                min_deposit = op\n        elif op < 0:\n            if max_withdrawal is None or op > max_withdrawal:\n                max_withdrawal = op\n    return max_withdrawal, min_deposit, balance_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    result = []\n    for i in range(len(s)):\n        name = s[i]\n        gpa = grades[i]\n        if gpa > 3.7:\n            grade = 'A+'\n        elif gpa > 3.3:\n            grade = 'A'\n        elif gpa > 3.0:\n            grade = 'B'\n        elif gpa > 2.7:\n            grade = 'C'\n        else:\n            grade = 'E'\n        result.append((name[::-1].lower(), grade))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return [str(x % base)] + base_change_prefixes(x // base, base)\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazil_factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * brazil_factorial(n - 2)\n\n    levels = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        levels.append(n)\n\n    return [brazil_factorial(level) for level in levels]\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    happy_numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    happy_numbers_dict = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    if len(numbers_list) != len(set(numbers_list)):\n        return 'Not a happy string'\n    for i in range(len(numbers_list) - 2):\n        if numbers_list[i] == numbers_list[i + 1] or numbers_list[i + 1] == numbers_list[i + 2] or numbers_list[i] == numbers_list[i + 2]:\n            return 'Not a happy string'\n    numbers_list = [happy_numbers_dict[i] for i in numbers_list]\n    numbers_list.sort()\n    return ' '.join([happy_numbers[i - 1] for i in numbers_list])\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = (3 * i) - 1\n    triples = [(a[i], a[i + 1], a[i + 2]) for i in range(n - 2) if a[i + 1] % 3 == 0]\n    sum_first = sum([triple[0] for triple in triples])\n    product_first = prod([triple[0] for triple in triples]) if triples else 0\n    return (sum_first, product_first)\n"}
{"task_id": "EvoEval/26", "completion": "\n    if not values:\n        return ()\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    for i in range(len(values)):\n        values[i] = values[i].split()\n        values[i] = [(num_dict[num], num) for num in values[i]]\n        values[i].sort()\n    min_even_num = float('inf')\n    min_even_index = -1\n    for i, nums in enumerate(values):\n        for j, (num, original_num) in enumerate(nums):\n            if num % 2 == 0 and num < min_even_num:\n                min_even_num = num\n                min_even_index = (original_num, j)\n    return min_even_index\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in lst1:\n        if is_prime(i):\n            return x\n    return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    grade_table = {4.0: \"A+\", 3.7: \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7: \"B0\", 2.3: \"B-\", 1.7: \"C+\", 1.3: \"C\", 1.0: \"C-\", 0.7: \"D\", 0.0: \"D-\", 0.0: \"E\"}\n    result = []\n    for gpa in grades:\n        if gpa in grade_table.keys():\n            if grade_table[gpa] in s0 and grade_table[gpa] in s1:\n                result.append(grade_table[gpa])\n    return result\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return n\n    else:\n        return largest_prime_factor(n)\n"}
{"task_id": "EvoEval/30", "completion": "\n    beats_per_note = {'o': 4, '.': 2, '|': 1}\n    x_numer, x_den = map(int, x.split('/'))\n    x_beat = x_numer / x_den\n    result = []\n    for note in music_string:\n        if note == ' ':\n            continue\n        if beats_per_note[note] == x_beat:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    prime_factor_list = prime_factors(n)\n    unique_prime_factors = set(prime_factor_list)\n    special_fact = 1\n\n    for prime in unique_prime_factors:\n        prime_count = prime_factor_list.count(prime)\n        special_fact *= factorial(prime_count)\n\n    return special_fact\n"}
{"task_id": "EvoEval/32", "completion": "\n    def nested_paren_depth(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    depths = [nested_paren_depth(s) for s in input]\n    num = int(''.join(map(str, depths)))\n    shifted_num = (num % 10**len(str(num))) * 10**shift + num // 10**len(str(num))\n    return [int(d) for d in str(shifted_num)]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_to_int = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_to_roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    if not s:\n        return False\n    if len(s) > 3:\n        return False\n    if len(set(s)) != len(s):\n        return False\n    num = 0\n    for i in range(len(s)):\n        if i > 0 and roman_to_int[s[i]] > roman_to_int[s[i - 1]]:\n            num = roman_to_int[s[i - 1]] * 2 - num\n            if num < 1 or num > 1000:\n                return False\n        else:\n            num += roman_to_int[s[i]]\n    if num < 1 or num > 1000:\n        return False\n    return num\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    # Initialize variables\n    stack = []\n    result = []\n    current_level = \"\"\n    md5_hash = \"\"\n\n    # Iterate over each character in the string\n    for char in paren_string:\n        if char == '(':\n            # If it's an open brace, push it to the stack and start a new level\n            stack.append(char)\n            current_level += char\n        elif char == ')':\n            # If it's a close brace, pop from the stack and end the current level\n            if not stack:\n                return ['None']\n            stack.pop()\n            current_level += char\n            if not stack:\n                # If the stack is empty, we've finished a level\n                result.append(current_level)\n                current_level = \"\"\n\n    # If there are unbalanced parentheses, return 'None'\n    if stack:\n        return ['None']\n\n    # Compute the md5 hash of each level\n    for level in result:\n        import hashlib\n        md5_hash = hashlib.md5(level.encode()).hexdigest()\n        result[result.index(level)] = md5_hash\n\n    return result\n"}
{"task_id": "EvoEval/35", "completion": "\n    for key in dict.keys():\n        if not (key.islower() and len(key) == 3 and len(set(key)) == 3):\n            return False\n        if not (len(dict[key]) == 3 and len(set(dict[key])) == 3):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    # Your code here\n    arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    even_count = 0\n    odd_count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            sum_sub_array = sum(sub_array)\n            if sum_sub_array < min_sum:\n                min_sum = sum_sub_array\n                even_count = sum(1 for num in str(min_sum) if int(num) % 2 == 0)\n                odd_count = sum(1 for num in str(min_sum) if int(num) % 2 != 0)\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_pal = sum(i == i[::-1] and i % 2 == 0 for i in l)\n    odd_pal = sum(i == i[::-1] and i % 2 != 0 for i in l)\n    even_sum = sum(i % 2 == 0 for i in l)\n    odd_sum = sum(i % 2 != 0 for i in l)\n    return (even_sum > even_pal and odd_sum > odd_pal, even_sum > odd_pal and odd_sum > even_pal)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n    dp = [0] * (n + 1)\n    dp[0] = prefix_sum[0]\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i - 1], prefix_sum[i]) + x\n    min_changes = dp[n]\n    sum_val = prefix_sum[n] + min_changes * y\n    return sum_val\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    max_prime = 0\n    for num in nums:\n        if num > 10 and num % 2 != 0 and is_prime(num):\n            prime = largest_prime_factor(num)\n            if prime > max_prime:\n                max_prime = prime\n    return max_prime if max_prime else None\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    s = list(s)\n    for i in range(len(s)):\n        if 65 <= ord(s[i]) <= 90:\n            s[i] = chr((ord(s[i]) - 65 + shift) % 26 + 65)\n    s = ''.join(s)\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def is_valid(expression):\n        fractions = re.findall(r'<(\\d+)/(\\d+)>', expression)\n        for fraction in fractions:\n            numerator, denominator = map(int, fraction)\n            if denominator == 0:\n                return False\n            if gcd(numerator, denominator) != 1:\n                return False\n        product = 1\n        for fraction in fractions:\n            numerator, denominator = map(int, fraction)\n            product *= numerator\n        for fraction in fractions:\n            numerator, denominator = map(int, fraction)\n            if product * numerator % denominator != 0:\n                return False\n        return True\n\n    expressions = re.findall(r'<[^>]*>', expression)\n    return all(is_valid(expr) for expr in expressions)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n    if n == 4:\n        return [0, 0, 2, 2]\n\n    fib = [0, 0, 2, 2]\n    for i in range(4, n):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n\n    if sum(fib[:2]) % 2 == 1:\n        fib = sorted(fib)\n    else:\n        fib = sorted(fib, reverse=True)\n\n    return fib\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_dict = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n                  50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_num = ''\n    for key in sorted(roman_dict.keys(), reverse=True):\n        while number >= key:\n            roman_num += roman_dict[key]\n            number -= key\n    roman_prefixes = [roman_num[:i] for i in range(1, len(roman_num)+1)]\n    return roman_prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive = [i for i in l if i > 0 and i % 2 == 0]\n    if even_positive:\n        return max(even_positive)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = \"AEIOU\"\n    digits = \"13579\"\n    n = sum(1 for i in range(len(s)) if s[i] in vowels and i % 2 == 0)\n    return [f\"In the string, the number of uppercase vowels in even indices is {n}, and the number of odd digits is {sum(1 for c in lst[i] if c in digits)}. \" for i in range(len(lst))]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_power_n = pow(2, n, p)\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * (abs(num) % p)\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > two_power_n:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, -1, -2):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not isinstance(a, str) or not isinstance(b, str):\n        raise ValueError(\"Both inputs must be strings\")\n\n    if a.isalpha():\n        a = a.lower() if a.islower() else a.upper()\n    else:\n        a = a[::-1]\n\n    if b.isalpha():\n        b = b.lower() if b.islower() else b.upper()\n    else:\n        b = b[::-1]\n\n    try:\n        a = float(a)\n        b = float(b)\n    except ValueError:\n        pass\n\n    if a == b:\n        return None\n    elif a > b:\n        return b\n    else:\n        return a\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    even_nodes = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_nodes:\n        return ([], None)\n\n    even_nodes.sort()\n    plucked_node = even_nodes[0]\n    remaining_nodes = [v for v in arr if v != plucked_node[0]]\n\n    sum_magnitude = sum(abs(v) for v in remaining_nodes)\n    sign_product = 1\n    for v in remaining_nodes:\n        if v < 0:\n            sign_product *= -1\n\n    return (plucked_node, sum_magnitude * sign_product)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {\n        \"F\": 4,\n        \"E\": 3,\n        \"D\": 2,\n        \"C\": 1,\n        \"B\": 3,\n        \"A\": 4,\n        \"9\": 5,\n        \"8\": 6,\n        \"7\": 7,\n        \"6\": 8,\n        \"5\": 9,\n        \"4\": 10,\n        \"3\": 11,\n        \"2\": 12,\n        \"1\": 13,\n        \"0\": 14\n    }\n    prime_hex_grades = [2, 3, 5, 11, 13]\n    count = 0\n    for grade in grades:\n        if hex_grades[grade] in prime_hex_grades:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number <= 0 or number > 1000:\n        return None\n\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n                      50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n\n    roman_string = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            roman_string += roman_numerals[key]\n            number -= key\n\n    return hashlib.md5(roman_string.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [factor for factor in factors if factor % 2 != 0]\n    product = 1\n    for factor in odd_factors:\n        product *= factor\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_odd_digit(n):\n        return all(int(digit) % 2 == 1 for digit in str(n))\n\n    changes = 0\n    for num in arr:\n        if not is_palindrome(num):\n            changes += 1\n        if not is_odd_digit(num):\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/58", "completion": "\n    def maxfre_andsum_check(lst, a, b):\n        from collections import Counter\n        c = Counter(lst)\n        max_fre = max([k for k, v in c.items() if v >= k], default=-1)\n        if max_fre == -1:\n            return (max_fre, False)\n        else:\n            if max_fre == a or max_fre == b:\n                return (max_fre, True)\n            else:\n                return (max_fre, False)\n\n    print(maxfre_andsum_check([4, 1, 2, 2, 3, 1], 2, 0))  # (2, True)\n    print(maxfre_andsum_check([3, 3, 3, 4, 4, 4], 4, 4))  # (4, True)\n    print(maxfre_andsum_check([5, 5, 10, 5, -1], 5, 2))  # (5, True)\n    print(maxfre_andsum_check([5, 5, 4, 4, 4], 5, 3))  # (4, True)\n    print(maxfre_andsum_check([5, 5, 10, 5, -1], 8, 3))  # (-1, False)\n    print(maxfre_andsum_check([5, 5, 4, 4, 4], 5, 2))  # (5, True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else int(s, 10) if base == 2 else base_change(bin(int(s))[2:], base) if base > 2 else base_change(oct(int(s))[2:], base) if base > 8 else base_change(hex(int(s))[2:], base)\n\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 == 1)\n\n    return [str(odd_count(base_change(s, base))) for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [int(i) for i in arr]\n    triples = []\n    for i in range(n-2):\n        if a[i] < a[i+1] and a[i+1] < a[i+2]:\n            triples.append((a[i], a[i+1], a[i+2]))\n    if not triples:\n        return []\n    smallest_triple = min(triples, key=lambda x: sum(x))\n    a[smallest_triple.index(min(smallest_triple))] += smallest_triple[0]\n    smallest_even = [i for i in a if i % 2 == 0]\n    if not smallest_even:\n        return []\n    return [min(smallest_even), a.index(min(smallest_even))]\n"}
{"task_id": "EvoEval/61", "completion": "\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split(' ')\n    words.sort(key=lambda w: (w.lower(), w))\n    for i in range(1, len(words) - 1, 2):\n        words[i] = words[i].replace(' ', '-')\n        words[i] = words[i].replace('_', ' ')\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    def sortplan(planet1: str, order: str) -> str:\n        planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        order_nums = order.split()\n        if planet1 not in planets or len(order_nums) != len(set(order_nums)) or any(o not in '01234567' for o in order_nums):\n            return 'Invalid'\n        idx1, idx2 = planets.index(planet1), None\n        for i in range(len(planets)):\n            if order_nums[i] == str(idx1):\n                idx2 = i\n                break\n        if idx2 is None:\n            return 'Invalid'\n        order_nums = order_nums[idx2:] + order_nums[:idx2]\n        return ' '.join(planets[int(o)] for o in order_nums)\n\n    print(sortplan(\"Earth\", \"7 0 1 2 3 4 5 6\"))  # \"Uranus Mercury Venus Mars Jupiter Saturn Neptune Earth\"\n    print(sortplan(\"Earth\", \"7 0 1 6 5 4 3 2\"))  # \"Uranus Venus Mars Jupiter Saturn Neptune Earth\"\n    print(sortplan(\"Earth\", \"7 0 1 2 3 6 5 4\"))  # \"Invalid\"\n    print(sortplan(\"Pluto\", \"7 0 1 2 3 4 5 6\"))  # \"Invalid\"\n    print(sortplan(\"Earth\", \"7 0 1 2 3 4 5\"))  # \"Invalid\"\n    print(sortplan(\"Earth\", \"7 0 1 2 3 4 5 6 7\"))  # \"Invalid\"\n    print(sortplan(\"Earth\", \"7 0 1 2 3 4 5 6 7 2\"))  # \"Invalid\"\n    print(sortplan(\"Earth\", \"7 "}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for i in range(n):\n        mod_result = (2**i) % p\n        if is_prime(mod_result):\n            result.append(mod_result)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (2 ** n) % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Initialize the array\n    a = []\n\n    # Create the array\n    for i in range(1, n+1):\n        a.append(x - i)\n\n    # Initialize the sum\n    sum = 0\n\n    # Find the largest triple\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i] < a[j] < a[k] and a[i] % 3 == 0 or a[j] % 3 == 0 or a[k] % 3 == 0:\n                    if a[i] > sum or a[j] > sum or a[k] > sum:\n                        sum = a[i] + a[j] + a[k]\n\n    # If no such triple exists\n    if sum == 0:\n        return -1\n\n    # If the largest even integer range [x inclusive found, add it to the sum\n    if x % 2 == 0:\n        sum += x\n\n    return sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff <= threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def is_odd(n):\n        return n % 2 != 0\n\n    def product_odd_digits(n):\n        product = 1\n        for digit in str(n):\n            if is_odd(int(digit)):\n                product *= int(digit)\n        return product\n\n    min_sum = 0\n    for num in nums:\n        min_sum += product_odd_digits(num)\n    return min_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) % 3 != 0:\n            return False\n        for i in range(0, len(s), 3):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    return sorted(happy_strings, key=lambda s: (len(s), s))\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n\n    def closest_numbers(numbers: List[int]) -> Tuple[int, int]:\n        numbers.sort()\n        min_diff = float('inf')\n        result = (0, 0)\n        for i in range(len(numbers) - 1):\n            diff = numbers[i + 1] - numbers[i]\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[i + 1])\n        return result\n\n    special_numbers = [n for n in numbers if n > 0]\n    special_numbers = list(set(special_numbers))\n    special_numbers.sort()\n    for i in range(len(special_numbers)):\n        special_numbers[i] = (special_numbers[i], special_factorial(special_numbers[i]))\n    special_numbers.sort(key=lambda x: x[1])\n    return closest_numbers([x[0] for x in special_numbers])\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Calculate the maximum possible weight before Brazilian factorial\n    brazil_fact = 1\n    for i in range(1, n+1):\n        brazil_fact *= i\n\n    # Check if the sum of the weights is less than or equal to the maximum possible weight\n    if sum(w) <= brazil_fact:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * special_fact(n - 1)\n\n    def close_fact(n, m):\n        return abs(special_fact(n) - special_fact(m)) <= threshold\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if close_fact(numbers[i], numbers[j]):\n                return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> str:\n        num, den = map(int, fraction.split('/'))\n        frac = Fraction(num, den)\n        frac.limit_denominator()\n        return str(frac)\n\n    n = simplify(n)\n    num, den = map(int, n.split('/'))\n\n    return [simplify(f) == n for f in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Check if it is possible to exchange elements between lst1 to make all the elements of l to even\n    odd_lst1 = [i for i in lst1 if i % 2 != 0]\n    even_lst2 = [i for i in lst2 if i % 2 == 0]\n    if len(odd_lst1) > len(even_lst2):\n        return \"NO\"\n    else:\n        lst1 = [i if i % 2 == 0 else even_lst2.pop(0) for i in lst1]\n\n    # Check if one of the integers equals the sum of the other two\n    if x + y == z or x + z == y or y + z == x:\n        return \"SUM \" + \"YES \" + \" \".join(map(str, lst1))\n    else:\n        return \"NO_SUM \" + \"YES \" + \" \".join(map(str, lst1))\n"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        output_dict = {}\n        for key, value in input_dict.items():\n            try:\n                value = float(value)\n                if value >= 0:\n                    output_dict[key] = int(value) + 1\n                else:\n                    output_dict[key] = int(value) - 1\n            except ValueError:\n                continue\n        return output_dict\n\n    print(transform_dict({\"a\": \"1015.3\", \"b\": \"10\", \"c\": \"A10.5\", \"d\": \"-155\", \"e\": \"11\", \"f\": \"-16\"}))\n    print(transform_dict({\"a\": \"8\", \"b\": \"-8\"}))\n    print(transform_dict({}))\n    print(transform_dict({\"a\": \"14.5\", \"b\": \"-14.5\"}))\n    print(transform_dict({\"A\": \"10\", \"B\": \"3\"}))\n    print(transform_dict({\"a\": \"10\", \"b\": \"3\"}))\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-10.5\"}))\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-10.5\", \"C\": \"10\", \"D\": \"-10\"}))\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-10.5\", \"C\": \"10\", \"D\": \"-10\", \"E\": \"10.0\", \"F\": \"-10.0\"}))\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-10.5\", \"C\": \"10\", \"D\": \"-10\", \"E\": \"10.0\", \"F\": \"-10.0\", \"G\": \"10\", \"H\": \"-10\"}))\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-10.5\", \"C\": \"10\", \"D\": \"-10\", \"E\": \"10.0\", \"F\":"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_digits(n):\r\n        return sum(int(digit) for digit in str(n))\r\n\r\n    modified = [sum_digits(n) if is_prime(n) else n for n in lst]\r\n    return sorted(modified) if (sum(divmod(sum(divmod(lst[0], 10)), 2)) % 2) else modified\n"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 != 0 and sum_digits(arr[i]) > 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].isupper() else s[i].upper()\n    s = \"\".join(s[::-1])\n    count = sum(1 for i in range(0, len(s), 2) if s[i] in \"AEIOU\")\n    return s, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) != 3:\n        return s[::-1]\n    else:\n        if s[0] != s[1] and s[1] != s[2] and s[0] != s[2]:\n            return ''.join([c.lower() if c.isupper() else c.upper() for c in s])\n        else:\n            return s[::-1]\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def cyclic_encode(s: str) -> str:\n        return s[-3:] + s[:-3]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def cyclic_decode(s: str) -> str:\n        return s[3:] + s[:3]\n\n    encoded = cyclic_encode(s)\n    decoded = cyclic_decode(encoded)\n    result = ''.join([i for i in decoded if i not in c])\n\n    return result, is_palindrome(result)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n < 2:\n            return n\n        else:\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n    fibfib_sequence: List[int] = [fibfib(i) for i in range(n)]\n    mean: float = sum(fibfib_sequence) / n\n    mad: float = sum(abs(x - mean) for x in fibfib_sequence) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 5\n    if n == 5:\n        return 2\n    if n == 6:\n        return 11\n    if n == 7:\n        return 0\n    if n == 8:\n        return 4\n    if n == 9:\n        return 0\n    if n == 10:\n        return 23\n    if n == 11:\n        return 1\n    if n == 12:\n        return 5\n    if n == 13:\n        return 2\n    if n == 14:\n        return 11\n    if n == 15:\n        return 0\n    if n == 16:\n        return 8\n    if n == 17:\n        return 3\n    if n == 18:\n        return 14\n    if n == 19:\n        return 0\n    if n == 20:\n        return 12\n    if n == 21:\n        return 5\n    if n == 22:\n        return 2\n    if n == 23:\n        return 11\n    if n == 24:\n        return 0\n    if n == 25:\n        return 16\n    if n == 26:\n        return 8\n    if n == 27:\n        return 3\n    if n == 28:\n        return 14\n    if n == 29:\n        return 0\n    if n == 30:\n        return 22\n    if n == 31:\n        return 11\n    if n == 32:\n        return 5\n    if n == 33:\n        return 2\n    if n == 34:\n        return 11\n    if n == 35:\n        return 0\n    if n == 36:\n        return 18\n    if n == 37:\n        return 9\n    if n == 38:\n        return 4\n    if n"}
{"task_id": "EvoEval/83", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = re.sub(r'_{2,}', '_', text)\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    def count_ones(n):\n        return bin(n).count(\"1\")\n\n    lst = list(set(lst))\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "EvoEval/86", "completion": "\n    from itertools import combinations\n    from operator import add, sub, mul\n    import numpy as np\n\n    # Create a dictionary to map operator strings to actual operator functions\n    operator_dict = {'+': add, '-': sub, '*': mul}\n\n    # Find common elements in all operand lists\n    common_elements = set(operand_lists[0])\n    for operand_list in operand_lists:\n        common_elements = common_elements.intersection(set(operand_list))\n\n    # If there are no common elements, return None\n    if not common_elements:\n        return None\n\n    # Convert common elements to a list and sort it in ascending order\n    common_elements = sorted(list(common_elements))\n\n    # Create a list to store all possible combinations of common elements\n    combinations_list = []\n    for i in range(2, len(common_elements) + 1):\n        combinations_list.extend(list(combinations(common_elements, i)))\n\n    # Evaluate all possible combinations\n    results = []\n    for combination in combinations_list:\n        for operator in operators:\n            result = combination[0]\n            for i in range(1, len(combination)):\n                result = operator_dict[operator](result, combination[i])\n            results.append(result)\n\n    # Return the maximum result\n    return max(results)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    for i in text:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return ''\n            stack.pop()\n    if stack:\n        return ''\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        md5_hash = hashlib.md5(string.encode()).hexdigest()\n        if hash_substring in md5_hash:\n            result.append(string)\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = \"aeiou\"\n    result = {}\n    for key in dict.keys():\n        if key.islower():\n            count = 0\n            for char in key:\n                if char in vowels:\n                    count += 1\n            result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n\n    for i, index in enumerate(even_indices):\n        if is_prime(even_values[i]):\n            l[index] = x\n        else:\n            l[index] = y\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [n - i for i in range(n)]\n    common = list(set(a) & set(l1))\n    common.sort()\n    tri = 0\n    for i in range(len(common) - 2):\n        for j in range(i + 1, len(common) - 1):\n            for k in range(j + 1, len(common)):\n                if common[k] % 3 == 0:\n                    tri += 1\n    return (common, tri)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiouAEIOU\"\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if len(string) in prime_numbers:\n        for i in range(len(string) - 2, 0, -1):\n            if string[i] in vowels and string[i - 1] not in vowels and string[i + 1] not in vowels:\n                return string[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n            return sum(int(digit) for digit in str(n))\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    count = sum(1 for num in arr if sum_digits(num) > 0)\n    if count % 2 == 0:\n        return sorted(arr)\n    else:\n        return sorted(arr, reverse=True)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    filtered_strings.sort(key=lambda s: (len(s), s))\n    return filtered_strings\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = [value for value in l1 if value in l2]\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            if common_elements[i] + common_elements[j] == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n == 0:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + 2 * fib[i - 3])\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if fib[j] % 3 == fib[i] % 3:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not isinstance(dict[key], str):\n            return False\n        count = 0\n        for char in dict[key]:\n            if char == \"(\":\n                count += 1\n            elif char == \")\":\n                if count == 0:\n                    return False\n                count -= 1\n        if count != 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return len_base_conversion(x // base, base) + str(x % base)\n\n"}
