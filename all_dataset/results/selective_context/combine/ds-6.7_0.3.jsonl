{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) != 3:\n            return False\n        return len(set(s[i:i+3] for i in range(3))) == 3\n\n    def to_number(s):\n        return float(s.replace(',', '.'))\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if not a_happy and not b_happy:\n        return None\n    elif not a_happy:\n        return \"compare \" + b\n    elif not b_happy:\n        return \"compare \" + a\n    else:\n        a_num = to_number(a)\n        b_num = to_number(b)\n        if a_num > b_num:\n            return \"compare \" + a\n        elif b_num > a_num:\n            return \"compare \" + b\n        else:\n\n            return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_andfl(value: str) -> str:\n        import math\n        num, string = value.split('.')\n        num = int(num)\n        num = math.floor(num) if num % 2 == 0 else math.ceil(num)\n        flipped_string = string.swapcase()\n        return f'{num} {flipped_string}'\n\n    print(round_andfl(\"10.5abc\"))\n    print(round_andfl(\"14.5abc\"))\n    print(round_andfl(\"-14.5abc\"))\n    print(round_andfl(\"-15.5abc\"))\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n\"\"\"\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n):\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    return max(map(digit_sum, map(largest_prime_divisor, lst)))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            if round(numbers[0]) + round(numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n * n\n    else:\n        return n * n / 2\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    bracket_count = string.count(bracket)\n    bracket_pairs = string.count('><')\n    bracket_sequence = bracket_pairs == bracket_count // 2\n    return bracket_sequence, bracket_count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune']\n    roman_nums = ['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii']\n    planet1_index = planets.index(planet1) if planet1 in planets else -1\n    planet2_index = planets.index(planet2) if planet2 in planets else -1\n    if planet1_index == -1 or planet2_index == -1:\n        return {}\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return {planets[i]: roman_nums[i] for i in range(planet1_index + 1, planet2_index)}\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D', 0: 'E'}\n    result = []\n    for student in name_grade_list:\n        name = student[0].lower().capitalize()\n        grade = grade_scale[min(k for k in sorted(grade_scale.keys(), reverse=True) if student[1] >= k)]\n        result.append((name, grade))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n    def planet_vowel_count(planet1, planet2):\n        planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        if planet1 not in planets or planet2 not in planets:\n            return 0\n        else:\n            start = planets.index(planet1)\n            end = planets.index(planet2)\n            if start > end:\n                start, end = end, start\n            count = 0\n            for i in range(start, end + 1):\n                for letter in planets[i]:\n                    if letter in vowels or (letter == 'y' and planets[i] == planets[i][-1]):\n                        count += 1\n            return count\n\n    print(planet_vowel_count(\"Jupiter\", \"Neptune\"))  # 5\n    print(planet_vowel_count(\"Earth\", \"Mars\"))  # 2\n    print(planet_vowel_count(\"Mercury\", \"Uranus\"))  # 10\n    print(planet_vowel_count(\"Venus\", \"Earth\"))  # 2\n    print(planet_vowel_count(\"Mercy\", \"Uran\"))  # 0\n    print(planet_vowel_count(\"Jupiter\", \"Ne\"))  # 0\n    print(planet_vowel_count(\"Jupiter\", \"Jupiter\"))  # 3\n    print(planet_vowel_count(\"Jupiter\", \"Jupiteer\"))  # 0\n    print(planet_vowel_count(\"Jupiter\", \"Jup\"))  # 0\n    print(planet_vowel_count(\"Jup\", \"Jupiter\"))  # 0\n    print(planet_vowel_count(\"Jupiter\", \"Jup\"))  # 0\n    print(planet_vowel_count(\"Jupiter\", \"Jup\"))  # 0\n    print(planet_vowel_count(\""}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(letter.lower() in 'bcdfghjklmnpqrstvwxyz' for letter in name)\n\n    def grade(gpa):\n        if gpa >= 37: return 'A+'\n        elif gpa >= 33: return 'A'\n        elif gpa >= 30: return 'A-'\n        elif gpa >= 27: return 'B+'\n        elif gpa >= 23: return 'B'\n        elif gpa >= 20: return 'B-'\n        elif gpa >= 17: return 'C+'\n        elif gpa >= 13: return 'C'\n        elif gpa >= 10: return 'C-'\n        elif gpa >= 7: return 'D+'\n        elif gpa >= 3: return 'D'\n        else: return 'D-'\n\n    result = []\n    for student in student_info:\n        name = student['name']\n        gpa = student['GPA']\n        consonants = count_consonants(name)\n        if consonants == n:\n            gpa += 1\n        g = grade(gpa)\n        result.append({'name': name, 'grade': g})\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def filter_arr(arr):\n        return [i for i in arr if sum_digits(i) > 0]\n\n    def can_exchange(lst1):\n        odd_count = sum(not is_even(i) for i in lst1)\n        return odd_count % 2 == 0\n\n    arr = filter_arr(arr)\n    return \"YES\" if can_exchange(lst1) else \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # List to store prime numbers\n    primes = [i for i in range(n, m+1) if is_prime(i)]\n\n    # If there are no prime numbers in the range, return -\n    if not primes:\n        return \"-\"\n\n    # Compute the average of the prime numbers\n    avg = round(sum(primes) / len(primes))\n\n    # Convert the average to binary and return\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance == 0:\n            zero_sum_points += 1\n    return zero_sum_points >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiou\"\n    notes = [\"o\", \"o|\", \".|\", \"|\"]\n    word = word[::-1]\n    music_string = music_string[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            for j in range(i + 1, len(music_string)):\n                if music_string[j] in notes:\n                    result.append(notes.index(music_string[j]) + 1)\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n - 1) + fib(n - 2)\n\n    fib_nums = [fib(i) for i in range(n + 2)]\n    fib_fib_n = fib_nums[-1]\n\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= fib_fib_n and num > 0:\n            return num\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    if len(nums) < 3:\n        return 0\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    balance_zero = False\n    for op in operations:\n        if op > 0:\n            if min_deposit is None:\n                min_deposit = op\n            else:\n                min_deposit = min(min_deposit, op)\n        else:\n            if max_withdrawal is None:\n                max_withdrawal = op\n            else:\n                max_withdrawal = max(max_withdrawal, op)\n        balance += op\n        if balance < 0:\n            balance_zero = True\n            break\n    if balance_zero:\n        return max_withdrawal, min_deposit, balance_zero\n    else:\n        return max_withdrawal, min_deposit, balance_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    result = []\n    for i in range(len(s)):\n        gpa = grades[i]\n        name = s[i]\n        if gpa > 4.0 or gpa < 0:\n            return \"Invalid GPA\"\n        elif gpa >= 3.7:\n            grade = 'A+'\n        elif gpa >= 3.3:\n            grade = 'A'\n        elif gpa >= 3.0:\n            grade = 'B+'\n        elif gpa >= 2.7:\n            grade = 'B'\n        elif gpa >= 2.3:\n            grade = 'C+'\n        elif gpa >= 2.0:\n            grade = 'C'\n        elif gpa >= 1.7:\n            grade = 'D+'\n        elif gpa >= 1.3:\n            grade = 'D'\n        else:\n            grade = 'E'\n        result.append((name[::-1].lower(), grade))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    x_base = \"\"\n    while x > 0:\n        x_base = str(x % base) + x_base\n        x //= base\n    prefixes = [x_base[:i] for i in range(1, len(x_base) + 1)]\n    return prefixes\n"}
{"task_id": "EvoEval/22", "completion": "\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazil_n(n):\n        result = 1\n        for i in range(1, n+1):\n            result *= factorial(i)\n        return result\n\n    def next_odd(n):\n        return n+2\n\n    def next_even(n):\n        return n+1\n\n    levels = []\n    if n % 2 == 0:\n        for i in range(n, 0, -1):\n            levels.append(brazil_n(i))\n    else:\n        for i in range(n, 0, -1):\n            levels.append(brazil_n(next_odd(i)))\n    return levels\n"}
{"task_id": "EvoEval/24", "completion": "\n    # Define the mapping from words to numbers\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Define the mapping from numbers to words\n    num_to_word = {v: k for k, v in word_to_num.items()}\n\n    # Split the input string into words\n    words = numbers.split()\n\n    # Check if the string is happy\n    for i in range(0, len(words), 3):\n        if len(set(words[i:i+3])) != 3:\n            return 'Not a happy string'\n\n    # Convert the words to numbers\n    nums = [word_to_num[word] for word in words]\n\n    # Sort the numbers\n    nums.sort()\n\n    # Convert the sorted numbers back to words\n    sorted_words = [num_to_word[num] for num in nums]\n\n    # Join the words into a string and return it\n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_val = 0\n    product_val = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % 3 == 0:\n                sum_val += a[i]\n                product_val *= a[i]\n    return (sum_val, product_val)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    if not values:\n        return ()\n\n    even_nums = []\n    for i, line in enumerate(values):\n        nums = line.split()\n        nums.sort()\n        for num in nums:\n            if int(num) % 2 == 0:\n                even_nums.append((num, i, nums.index(num)))\n\n    if not even_nums:\n        return ()\n\n    even_nums.sort()\n    return (even_nums[0][0], even_nums[0][1])\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_primes = [num for num in lst1 if is_prime(num)]\n    lst2_non_primes = [num for num in lst2 if not is_prime(num)]\n\n    if len(lst1_primes) == len(lst1) and len(lst2_non_primes) == len(lst2):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    grades_list = []\n    for gpa in grades:\n        if gpa >= 3.7:\n            grades_list.append('A+')\n        elif 3.3 <= gpa < 3.7:\n            grades_list.append('A')\n        elif 3.0 <= gpa < 3.3:\n            grades_list.append('A-')\n        elif 2.7 <= gpa < 3.0:\n            grades_list.append('B+')\n        elif 2.3 <= gpa < 2.7:\n            grades_list.append('B')\n        elif 2.0 <= gpa < 2.3:\n            grades_list.append('B-')\n        elif 1.7 <= gpa < 2.0:\n            grades_list.append('C+')\n        elif 1.0 <= gpa < 1.7:\n            grades_list.append('C')\n        elif 0.7 <= gpa < 1.0:\n            grades_list.append('D+')\n        elif 0.0 <= gpa < 0.7:\n            grades_list.append('D')\n        else:\n            grades_list.append('E')\n    return grades_list\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return y\n    else:\n        return largest_prime_factor(n)\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Split the input string into numerator and denominator\n    numerator, denominator = map(int, x.split('/'))\n    beats_per_measure = 4\n    beats_per_note = beats_per_measure / denominator\n    total_beats = beats_per_note * numerator\n\n    # Initialize the result list\n    result = []\n\n    # Parse the music_string\n    for note in music_string:\n        if note == 'o':\n            result.append(True)\n        elif note == '|':\n            continue\n        else:\n            result.append(False)\n\n    # Return the result list\n    return result[:int(total_beats)]\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    prime_factor_list = prime_factors(n)\n    unique_prime_factors = set(prime_factor_list)\n    result = 1\n    for prime_factor in unique_prime_factors:\n        count = prime_factor_list.count(prime_factor)\n        result *= factorial(prime_factor) ** count\n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    def calculate_depth(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    depths = [calculate_depth(s) for s in input]\n    num = int(''.join(map(str, depths)))\n    shifted_num = num % 10**len(str(num)) * 10**shift\n    return [int(d) for d in str(shifted_num)]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_to_int = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_to_roman = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    if len(s) > 3 or len(s) < 1 or int(s) > 1000:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] == s[2]:\n            return False\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return False\n    if len(s) == 1:\n        if s[0] == 'v' or s[0] == 'l' or s[0] == 'd':\n            return False\n    int_value = 0\n    for i in range(len(s)):\n        int_value += roman_to_int[s[i]]\n    return int_value\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    # Split the string into groups\n    groups = paren_string.split()\n\n    # Initialize an empty list to store the md5 hashes\n    md5_hashes = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize a counter to keep track of the depth of nesting\n        depth = 0\n        max_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an open brace, increment the depth\n            if char == '(':\n                depth += 1\n                # If the depth is greater than the maximum depth, update the maximum depth\n                if depth > max_depth:\n                    max_depth = depth\n            # If the character is a close brace, decrement the depth\n            elif char == ')':\n                depth -= 1\n\n        # If the group is not balanced, return 'None'\n        if depth != 0:\n            md5_hashes.append('None')\n        else:\n            # If the group is balanced, compute the md5 hash of the deepest level string\n            deepest_level_string = group[max_depth-1:len(group)-max_depth+1]\n            import hashlib\n            md5_hash = hashlib.md5(deepest_level_string.encode()).hexdigest()\n            md5_hashes.append(md5_hash)\n\n    # Return the list of md5 hashes\n    return md5_hashes\n"}
{"task_id": "EvoEval/35", "completion": "\n    for key in dict.keys():\n        if not (key.islower() and len(key) == 3):\n            return False\n        for i in range(len(key)-2):\n            if key[i] == key[i+1] or key[i] == key[i+2] or key[i+1] == key[i+2]:\n                return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    # Your code here\n    arr.sort()\n    for i in range(n):\n        if arr[i] != i + 1:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    even_count = 0\n    odd_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        min_sum = min(min_sum, num)\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_pal = [x for x in l if x % 2 == 0 and 1 <= x <= n]\n    odd_pal = [x for x in l if x % 2 != 0 and 1 <= x <= n]\n    even_pal_set = set(even_pal)\n    odd_pal_set = set(odd_pal)\n    even_sum = False\n    odd_sum = False\n    for i in even_pal_set:\n        for j in even_pal_set:\n            if i != j and i + j in odd_pal_set:\n                even_sum = True\n                break\n        if even_sum:\n            break\n    for i in odd_pal_set:\n        for j in odd_pal_set:\n            if i != j and i + j in even_pal_set:\n                odd_sum = True\n                break\n        if odd_sum:\n            break\n    return even_sum, odd_sum\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Initialize the count of changes to 0\n    changes = 0\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # While the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # If the elements at the left and right pointers are not equal\n        if arr[left] != arr[right]:\n            # Increment the count of changes\n            changes += 1\n        # Move the pointers towards the center of the array\n        left += 1\n        right -= 1\n\n    # Return the sum of the count of changes and x and y\n    return changes + x + y\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def has_odd_first_digit(n):\n        return str(abs(n))[0] in '13579'\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    max_prime = 2\n    for num in nums:\n        if num > 10 and has_odd_first_digit(num) and is_prime(num):\n            max_prime = max(max_prime, largest_prime_factor(num))\n    return max_prime if max_prime > 2 else None\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    s = list(s)\n    for i in range(len(s)):\n        if 65 <= ord(s[i]) <= 90:\n            s[i] = chr((ord(s[i]) - 65 + shift) % 26 + 65)\n    if shift > len(s):\n        s = s[::-1]\n    else:\n        s = s[shift:] + s[:shift]\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n    from fractions import Fraction\n\n    def is_whole(num):\n        return num.is_integer()\n\n    def is_valid(expression):\n        fractions = re.findall(r'<(\\d+/\\d+)>', expression)\n        product = Fraction(1, 1)\n        for fraction in fractions:\n            product *= Fraction(fraction)\n        return is_whole(product)\n\n    return is_valid(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n    if n == 4:\n        return [0, 0, 2, 2]\n    if n == 5:\n        return [0, 0, 2, 2, 4]\n\n    fib = [0, 0, 2, 2, 4]\n    for i in range(5, n):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4] + fib[i-5])\n        fib[i] = fib[i] % 2\n    if sum(fib[:2]) % 2 == 1:\n        fib = sorted(fib)\n    else:\n        fib = sorted(fib, reverse=True)\n    return fib\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman_num = ''\n    num_list = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    for i in num_list:\n        while number >= i:\n            roman_num += roman_dict[i]\n            number -= i\n    prefixes = [roman_num[:i] for i in range(1, len(roman_num)+1)]\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [n for n in numbers if is_prime(n)]\n    return (sum(primes), 1 if not primes else eval('*'.join(map(str, primes))))\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive = [i for i in l if i > 0 and i % 2 == 0]\n    return max(even_positive) if even_positive else -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    digits = '13579'\n    n = sum(1 for c in s[::2] if c in vowels)\n    m = sum(1 for l in lst for c in l if c in digits)\n    return [f\"In the string, the number of upperc vow in even indices is {n}, and the number of odd digits is {m}.\"]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_n_mod_p = 2**n % p\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * (abs(num) % 10)\n        else:\n            num = num % 10\n        if num > two_n_mod_p:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1, 2):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if isinstance(a, str):\n        if a.isalpha():\n            if a.islower():\n                a = a.upper()\n            else:\n                a = a.lower()\n        else:\n            a = a[::-1]\n    if isinstance(b, str):\n        if b.isalpha():\n            if b.islower():\n                b = b.upper()\n            else:\n                b = b.lower()\n        else:\n            b = b[::-1]\n\n    if isinstance(a, str) and a.isnumeric():\n        a = float(a)\n    if isinstance(b, str) and b.isnumeric():\n        b = float(b)\n\n    if isinstance(a, float) and isinstance(b, float):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n        return None\n    else:\n        return b\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    smallest_even = [float('inf'), -1]\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even[0]:\n            smallest_even = [num, i]\n\n    if smallest_even[1] == -1:\n        return ([], None)\n\n    arr.pop(smallest_even[1])\n\n    sum_remaining = sum(abs(num) for num in arr)\n\n    product_signs = 1\n    for num in arr:\n        if num < 0:\n            product_signs *= -1\n\n    return (smallest_even, sum_remaining, product_signs)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {4.0: \"F\", 3.7: \"E\", 3.3: \"D\", 2.7: \"C\", 3.0: \"B\", 1.7: \"B\", 3.0: \"A\", 1.9: \"A\", 3.0: \"9\", 2.0: \"8\", 3.0: \"7\", 2.0: \"7\", 0.7: \"0\", 0.0: \"0\"}\n    prime_hex_grades = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for gpa in grades:\n        hex_grade = hex_grades[gpa]\n        if int(hex_grade, 16) in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number <= 0 or number > 1000:\n        return None\n\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n                      50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    roman_string = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            roman_string += roman_numerals[key]\n            number -= key\n    return hashlib.md5(roman_string.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [i for i in factors if i % 2 != 0]\n    if not odd_factors:\n        return 0\n    product = 1\n    for i in odd_factors:\n        product *= i\n    return product\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_odd_digit(n):\n        return all(int(digit) % 2 == 1 for digit in str(n))\n\n    changes = 0\n    for i in range(len(arr)):\n        if not is_palindrome(arr[i]):\n            arr[i] = int(str(arr[i])[::-1])\n            changes += 1\n        if not is_odd_digit(arr[i]):\n            arr[i] = int(''.join([str(1 if int(digit) % 2 == 0 else digit) for digit in str(arr[i])]))\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/58", "completion": "\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else int(s, 10) if base == 2 else int(s, 10) if base == 8 else int(s, 10) if base == 16 else int(s, 10)\n\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [str(odd_count(str(base_change(s, base)))) for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [0] * n\n    for i in range(1, n):\n        a[i] = a[i-1] + i + i + 1\n    min_val = min(a)\n    min_idx = a.index(min_val)\n    arr.append(min_val)\n    smallest_even = [min_val, min_idx] if min_val % 2 == 0 else []\n    return smallest_even\n"}
{"task_id": "EvoEval/61", "completion": "\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.replace(' ', '_') for word in words]\n    words = [''.join(sorted(word)) for word in words]\n    words.sort(key=lambda x: (len(x), x))\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven']\n    if planet1 not in planets or planet2 not in planets or any(item not in order for item in order):\n        return 'Invalid'\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return ' '.join(order[planet1_index:planet2_index+1])\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    mod_result = 2**n % p\n    primes = [i for i in range(2, mod_result) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Your code here\n    largest_divisor = 1\n    for i in range(2, p):\n        if (pow(2, n, p) % i) == 0:\n            largest_divisor = i\n    return largest_divisor\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # Find the largest even integer in range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Find the largest triple sum\n    max_sum = -1\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k])\n\n    # If a largest even integer exists, add it to the sum\n    if largest_even != -1:\n        max_sum += largest_even\n\n    return max_sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def is_odd(n):\n        return n % 2 != 0\n\n    def product_odd_digits(n):\n        product = 1\n        for digit in str(n):\n            if is_odd(int(digit)):\n                product *= int(digit)\n        return product\n\n    min_sum = 0\n    for num in nums:\n        min_sum += product_odd_digits(num)\n    return min_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) % 3 != 0:\n            return False\n        for i in range(0, len(s), 3):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[i + 1]))\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazil_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * math.factorial(n - 1)\n\n    max_weight = brazil_fact(n)\n    if sum(w) <= max_weight:\n        if w == w[::-1]:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    def special_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1) * special_fact(n - 1)\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(special_fact(numbers[i]) - special_fact(numbers[j])) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [Fraction(fraction) * n == Fraction(int(n)) for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Your code here\r\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\r\n    lst2_even = [i for i in lst2 if i % 2 == 0]\r\n    lst1_even = [i for i in lst1 if i % 2 == 0]\r\n    lst2_odd = [i for i in lst2 if i % 2 != 0]\r\n\r\n    if len(lst1_odd) > len(lst2_even):\r\n        return \"NO\"\r\n    else:\r\n        if x + y == z:\r\n            return \"SUM YES \" + \" \".join(map(str, lst1_even + lst2_odd))\r\n        else:\r\n            return \"NO_SUM YES \" + \" \".join(map(str, lst1_even + lst2_odd))\r\n\r\n\r"}
{"task_id": "EvoEval/75", "completion": "\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_digits(n):\r\n        return sum(int(digit) for digit in str(n))\r\n\r\n    modified = [sum_digits(n) if is_prime(n) else n for n in lst]\r\n    return sorted(modified) if (modified[0] + modified[-1]) % 2 == 1 else modified\n"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 != 0:\n            if sum_of_digits(arr[i]) > 0:\n                sum += arr[i]\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].isupper() else s[i].upper()\n    s = \"\".join(s)\n    s = s[::-1]\n    count = sum(1 for i in range(len(s)) if s[i] in vowels and i % 2 == 0)\n    return (s, count)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) != 3:\n        return s[::-1]\n    if len(set(s)) != 3:\n        return s[::-1]\n    return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def cyclic_encode(s: str) -> str:\n        return s[-1] + s[:-1]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def delete_char(s: str, c: str) -> str:\n        return ''.join([ch for ch in s if ch != c])\n\n    encoded = ''.join([cyclic_encode(s[i:i+3]) for i in range(0, len(s), 3)])\n    deleted = delete_char(encoded, c)\n    return (deleted, is_palindrome(deleted))\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1 or n == 2:\n            return 1\n        else:\n            return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n    fib_nums: List[int] = [fibfib(i) for i in range(n)]\n    mean: float = sum(fib_nums) / n\n    mad: float = sum(abs(num - mean) for num in fib_nums) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n\n    fib = [0, 1, 1, 2]\n    odd = [0, 1, 1, 2]\n\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n        if fib[i] % 2 == 0:\n            odd.append(odd[i - 1] * odd[i - 2] * odd[i - 3])\n        else:\n            odd.append(fib[i])\n\n    return odd[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive underscores with a single underscore\n    text = re.sub(r'_{2,}', '_', text)\n\n    # Check if the length of the new string is a prime number\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    def count_ones(n):\n        return bin(n).count(\"1\")\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n\n    unique_nums = list(set(lst))\n    unique_nums.sort()\n\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return unique_nums[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    if not operators or not operand_lists:\n        return None\n\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands &= set(operand_list)\n\n    if not common_operands:\n        return None\n\n    common_operands = sorted(list(common_operands))\n    result = common_operands[0]\n    for i in range(1, len(common_operands)):\n        result = eval(str(result) + operators[0] + str(common_operands[i]))\n\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    for char in text:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1] != '(':\n                stack.append(char)\n            else:\n                stack.pop()\n        else:\n            if not stack or stack[-1] != '(':\n                stack.append(char)\n    return ''.join(stack)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if string:\n            md5_hash = hashlib.md5(string.encode()).hexdigest()\n            if hash_substring in md5_hash:\n                result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = \"aeiou\"\n    result = {}\n    for key in dict.keys():\n        if not key.islower():\n            return {}\n        count = sum(letter in vowels for letter in key)\n        result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n\n    for i in range(0, len(l), 2):\n        if is_prime(even_indices_values[i // 2]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = list(set(a) & set(l1))\n    common.sort()\n    if not common or common[0] % 3 != 0:\n        return (common, 0)\n    else:\n        tri = sum([1 for i in range(len(common) - 1) for j in range(i + 1, len(common)) if common[j] - common[i] == 3])\n        return (common, tri)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if len(string) in prime_numbers:\n        for i in range(len(string) - 2, 0, -1):\n            if string[i] in vowels and string[i - 1] not in vowels and string[i + 1] not in vowels:\n                return string[i]\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    def sort_func(n):\n        return abs(n) if n < 0 else n\n\n    positive_count = sum(sum_digits(n) > 0 for n in arr)\n    sorted_arr = sorted(arr, key=sort_func)\n    return sorted_arr if positive_count % 2 == 0 else sorted_arr[::-1]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    filtered_strings.sort(key=lambda s: (len(s), s))\n    return filtered_strings\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        for j in common_elements:\n            if i != j and i + j == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n    tri = []\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    tri.append((fib[i], fib[j], fib[k]))\n    return len(tri)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not isinstance(dict[key], str):\n            return False\n        count = 0\n        for char in dict[key]:\n            if char == \"(\":\n                count += 1\n            elif char == \")\":\n                if count == 0:\n                    return False\n                count -= 1\n        if count != 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
