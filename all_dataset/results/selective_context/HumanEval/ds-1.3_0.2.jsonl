{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp = ''\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum1 = 0\n    product = 1\n    for num in numbers:\n        sum1 += num\n        product *= num\n    return (sum1, product)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    # Convert the result back to string\n    xor_result = ''.join('01'[int(i)] for i in xor_result)\n\n    return xor_result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_chars = set(string)\n    return len(distinct_chars)\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num]))\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value > 0]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [n for n in l if n > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    x}
{"task_id": "HumanEval/33", "completion": "\n    div_three = [l[i] for i in range(0, len(l), 3)]\n    div_three.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = div_three[j]\n            j += 1\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n    def fb(n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('7')\n        return count\n\n    return fb(n)\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    l_prime = l.copy()\n    for i, e in zip(even_indices, even_values):\n        l_prime[i] = e\n    return l_prime\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            break\n        if is_prime(fib_i):\n            yield fib_i\n        i += 1\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum = l[i] + l[left] + l[right]\n            if sum == 0:\n                return True\n            elif sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) <= 1:\n        return False\n    else:\n        l.sort()\n        left = 0\n        right = len(l) - 1\n        while left < right:\n            if l[left] + l[right] == 0:\n                return True\n            elif l[left] + l[right] < 0:\n                left += 1\n            else:\n                right -= 1\n        return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        a, b, c, d = 0, 0, 2, 4\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c - d\n        return d\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.replace(' ', '')  # remove spaces\n    return text == text[::-1]  # compare the string with its reverse\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return (pow(2, n, p) * pow(2, -n, p)) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels = ''\n    for char in text:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n-1)\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split(\"fruit\")\n    total_fruits = sum(int(fruit.split()[-1]) for fruit in fruits)\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "\n    def pluck(arr):\n        even_values = [i for i in arr if i % 2 == 0]\n        if even_values:\n            smallest_even_value = min(even_values)\n            smallest_index = arr.index(smallest_even_value)\n            return [smallest_even_value, smallest_index]\n        else:\n            return []\n\n    print(pluck([4,23]))\n    print(pluck([1,2]))\n    print(pluck([]))\n    print(pluck([5,0,3,0,4,2]))\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(max(lst), 0, -1):\n        if i in c:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w and q == q[::-1] and len(q) > 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        i = 0\n        j = n - 1\n        while i < j:\n            if arr[i] != arr[j]:\n                count += 1\n            i += 1\n            j -= 1\n        return count\n\n    # Test cases\n    print(smallest_change([1,2,5,4,7,9,6])) # 4\n    print(smallest_change([1,2,3,2,1])) # 1\n    print(smallest_change([0,1,2,2,1,0])) # 0\n    print(smallest_change([9,8,7,6,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,4,5,6,7,8,9])) # 0\n    print(smallest_change([1,2,3,4,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,4,5,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,4,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,4,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,3,2,1,2,3,4,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,3,2,1,2,3,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,3,2,1,2,3,3,2,1,2,3,4"}
{"task_id": "HumanEval/74", "completion": "\n    def total(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if total(lst1) <= total(lst2) else lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i) and is_prime(a//i):\n                return True\n        return False\n\n    return is_multiply_prime(a)\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    else:\n        return (x ** (1.0 / n)) % 1 == 0\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    def is_cube(n):\n        return n == round(n ** (1. / 3)) ** 3\n\n    return is_cube(a)\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = {'2': 2, '3': 3, '5': 5, '7': 7, 'B': 11, 'D': 13}\n    count = 0\n    for char in num:\n        if char in primes:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        return [['A+' if grade == 4.0 else ('A' if grade == 3.0 else ('B' if grade == 2.0 else ('B+' if grade == 2.3 else ('B0' if grade == 2.0 else ('C+' if grade == 1.7 else ('C' if grade == 1.0 else ('D' if grade == 0.7 else ('D0' if grade == 0.0 else 'E')))))))) for grade in grades]\n\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]))\n\ngrade_equation([4.0, 3, 1.7, 2, 3.5])\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * 10 ** (n - 2)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return bin(sum_digits(N))[2:]\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s))\n\n    def rearrange_string(s, sorted_s):\n        words = s.split(' ')\n        result = ''\n        for word in words:\n            if '!' in word:\n                result += sort_string(word.replace(' ', '')) + ' '\n            else:\n                result += sort_string(word) + ' '\n        return result.rstrip() + ' ' + sort_string(sorted_s.replace(' ', ''))\n\n    return rearrange_string(s, s)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n\n    mid = len(array) // 2\n    left_half = array[:mid]\n    right_half = array[mid:]\n\n    return merge_sorted_arrays(sort_array(left_half), sort_array(right_half))\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                encrypted_string += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_string += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in lst:\n        if num < first:\n            second, first = first, num\n        elif first < num < second:\n            second = num\n    if second == float('inf'):\n        return None\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    # Split the string into words\n    words = S.split()\n\n    # Count the number of sentences that start with \"I\"\n    count = 0\n    for word in words:\n        if word.startswith(\"I\"):\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    def is_integer(n):\n        return isinstance(n, int)\n\n    def is_sum_of_two(n1, n2, n3):\n        return n1 == n2 + n3 or n2 == n1 + n3 or n3 == n1 + n2\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and is_sum_of_two(x, y, z)\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index < len(vowels) - 1:\n                encoded_message += vowels[index + 2]\n            else:\n                encoded_message += vowels[index - 2]\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    keys = dict.keys()\n\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n\n    return True\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(n) if is_prime(i)]\n"}
{"task_id": "HumanEval/97", "completion": "\n    a_str = str(a)\n    b_str = str(b)\n    product = int(a_str[0]) * int(b_str[0])\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value >= 0:\n            return int(value) if value - int(value) < 0.5 else int(value) + 1\n        else:\n            return int(value) if abs(value - int(value)) < 0.5 else int(value) - 1\n\n    print(closest_integer(\"14.5\"))\n\nclosest_integer(\"14.5\")\nclosest_integer(\"10\")\nclosest_integer(\"-14.5\")\nclosest_integer(\"-10\")\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<j"}
{"task_id": "HumanEval/100", "completion": "\n    def next_odd(n):\n        return n + 1 if n % 2 != 0 else n\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n\n\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:\n            pile.append(next_even(pile[-1]))\n        else:\n            pile.append(next_odd(pile[-1]))\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(', ')\n"}
{"task_id": "HumanEval/102", "completion": "\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def unique_digits(x):\n        return sorted([i for i in x if all(int(digit) % 2 != 0 for digit in str(i))])\n\n    return unique_digits(x)\n"}
{"task_id": "HumanEval/105", "completion": "\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            if num == 1:\n                result.append(\"One\")\n            elif num == 2:\n                result.append(\"Two\")\n            elif num == 3:\n                result.append(\"Three\")\n            elif num == 4:\n                result.append(\"Four\")\n            elif num == 5:\n                result.append(\"Five\")\n            elif num == 6:\n                result.append(\"Six\")\n            elif num == 7:\n                result.append(\"Seven\")\n            elif num == 8:\n                result.append(\"Eight\")\n            elif num == 9:\n                result.append(\"Nine\")\n    if result:\n        result.reverse()\n        return result\n    else:\n        return result\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(factorial(i))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def count(arr):\n        count = 0\n        for num in arr:\n            if num > 0:\n                count += sum(int(digit) for digit in str(num)) > 0\n        return count\n\n    return count(arr)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr or len(arr) == 0:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    lst1_even = all(is_even(n) for n in lst1)\n    lst2_even = all(is_even(n) for n in lst2)\n\n    if lst1_even and lst2_even:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    def histogram(test):\n        if not test:\n            return {}\n        test = test.split()\n        count_dict = {}\n        for i in test:\n            if i in count_dict:\n                count_dict[i] += 1\n            else:\n                count_dict[i] = 1\n        max_count = max(count_dict.values())\n        return {k: v for k, v in count_dict.items() if v == max_count}\n\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('b b b a b'))\n    print(histogram('a'))\n    print(histogram(''))\n\n\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('b b b a b')\nhistogram('a')\nhistogram('')\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter"}
{"task_id": "HumanEval/112", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [\"the number of odd elements in the string {} of the input.\".format(i) for i in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    curr_sum = 0\n\n    for num in nums:\n        curr_sum += num\n        min_sum = min(min_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_buckets(grid, capacity):\n        n, m = len(grid), len(grid[0])\n        grid = [int(i) for i in ''.join(map(str, grid))]\n        res = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i * m + j] == 1:\n                    res += math.ceil(j / capacity)\n        return res\n\n    print(max_buckets(grid, capacity))\n\nmax_fill([[0,0,1,0], [010,0],1111], 1)\nmax_fill([[00110001111],0111], 2)\nmax_fill([[00],[0]], 5)\nmax_fill([[00],[0]], 0)\nmax_fill([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    def is_n_consonants(word, n):\n        return count_consonants(word) == n\n\n    words = s.split()\n    return [word for word in words if is_n_consonants(word, n)]\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] in consonants and word[i + 1] in consonants:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def match_parens(lst):\n        s = lst[0] + lst[1]\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n        if not stack:\n            return 'Yes'\n        else:\n            return 'No'\n\n    print(match_parens(['()(', ')']))\n    print(match_parens(['(', ')']))\n    print(match_parens(['(', '()']))\n    print(match_parens([')', '(']))\n    print(match_parens(['(', ')(']))\n    print(match_parens(['()', ')(']))\n\nmatch_parens(['()(', ')'])\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    def sum_of_two_digit_numbers(nums):\n        return sum(num for num in nums if 10 <= num < 100)\n\n    return sum_of_two_digit_numbers(arr[:k])\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3*n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    odd_sequence = [i for i in sequence if i % 2 != 0]\n    odd_sequence.sort()\n    return odd_sequence\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def is_leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def days_in_month(month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        elif month == 2:\n            if is_leap_year(year):\n                return 29\n            else:\n                return 28\n\n    def valid_date(date):\n        if re.match(r'\\d{2}-\\d{2}-\\d{4}', date) is None:\n            return False\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12 or day < 1 or day > days_in_month(month, year):\n            return False\n        return True\n\n    return valid_date(date)\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        return [chr(i) for i in range(ord('a'), ord('z')+1) if i%2 != 0]\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def intersection_length(interval1, interval2):\n        start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start > end:\n            return 0\n        return end - start + 1\n\n    if not (isinstance(interval1, tuple) and isinstance(interval2, tuple) and len(interval1) == len(interval2) == 2):\n        return \"NO\"\n\n    intersection_length_ = intersection_length(interval1, interval2)\n    if is_prime(intersection_length_):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    sum_magn = 0\n    for num in arr:\n        product *= num\n        sum_magn += abs(num)\n    return product * sum_magn\n"}
{"task_id": "HumanEval/129", "completion": "\n    def minPath(grid, k):\n        n = len(grid)\n        m = len(grid[0])\n        visited = [[False]*m for _ in range(n)]\n        res = []\n        def dfs(x, y, k):\n            if k == 0:\n                res.append(grid[x][y])\n                return\n            visited[x][y] = True\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:\n                    dfs(nx, ny, k - 1)\n            visited[x][y] = False\n        dfs(n//2, m//2, k)\n        return res\n\n    print(minPath([[12],[4]], 3))\n    print(minPath([[593416782]], 1))\n\nminPath([[12],[4]], 3)\nminPath([[593416782]], 1)\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tribonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1 or n == 2:\n            return 1\n        else:\n            if n % 2 == 0:\n                return tribonacci(n - 1) + 2 * tribonacci(n - 2)\n            else:\n                return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n - 3)\n\n    result = [tribonacci(i) for i in range(n + 1)]\n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    def is_nested(string):\n        stack = []\n        for char in string:\n            if char == '[':\n                stack.append(char)\n            elif char == ']':\n                if not stack or stack[-1] != '[':\n                    return False\n                stack.pop()\n        return not stack\n\n    def isn(string):\n        return string == '[' + string + ']'\n\n    def is_n(string):\n        return string == '[' + string + ']'\n\n    return any(isn(string) for string in string.split('][') if is_nested(string))\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and last_char.islower()\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    return (max(neg_lst) if neg_lst else None, max(pos_lst) if pos_lst else None)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def compare_one(a, b):\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return max(a, b)\n        elif isinstance(a, str) and isinstance(b, str):\n            try:\n                return max(float(a), float(b))\n            except ValueError:\n                return None\n        else:\n            return None\n\n    print(compare_one(1, 2.5))\n    print(compare_one(5, 1))\n    print(compare_one(\"2,3\", \"2,1\"))\n    print(compare_one(5, \"1\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \"2.3\"))\n    print(compare_one(\",1\", \"2\"))\n    print(compare_one(\",1\", \""}
{"task_id": "HumanEval/138", "completion": "\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(i, n):\n                if j % 2 == 0:\n                    for k in range(j, n):\n                        if k % 2 == 0:\n                            for l in range(k, n):\n                                if l % 2 == 0:\n                                    if i + j + k + l == n:\n                                        return True\n    return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazil_fact(n):\n        if n == 0:\n            return 1\n        else:\n            return brazil_fact(n-1) * factorial(n)\n\n    return brazil_fact(n)\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\")\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    if len(file_name)<=3 or len(file_name)>100:\n        return ''\n    if not re.search(r'\\d{3,}', file_name):\n        return ''\n    if file_name[0]=='.' or file_name[-1]=='.':\n        return ''\n    if not re.search(r'^[a-zA-Z].*', file_name):\n        return ''\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return ''\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def is_whole_number(s):\n        return s.isdigit() and s[0] != '0'\n\n    def is_valid_fraction(s):\n        numerator, denominator = s.split('/')\n        return is_whole_number(numerator) and is_whole_number(denominator)\n\n    def simplify_fraction(s):\n        numerator, denominator = s.split('/')\n        return str(int(numerator)) + '/' + str(int(denominator))\n\n    if is_valid_fraction(x) and is_valid_fraction(n):\n        return simplify_fraction(x) == simplify_fraction(n)\n    else:\n        return False\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return [nums[i] for i in sorted(range(len(nums)), key=sum_digits)]\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(num):\n        str_num = str(num)\n        return str_num[0] in '13579' and str_num[1] in '13579' and len(set(str_num)) == 1\n\n    return sum(is_special(num) for num in nums)\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + j for j in range(1, n + 1)]\n    return len([(i, j) for i, ai in enumerate(a) for j in range(i + 1, n) if (ai + j) % 3 == 0])\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])\n"}
{"task_id": "HumanEval/149", "completion": "\n    def list_sort(lst):\n        # delete odd length strings\n        lst = [i for i in lst if len(i) % 2 == 0]\n        # sort by length and alphabet\n        lst.sort(key=lambda x: (len(x), x))\n        return lst\n\n    print(list_sort([\"aa\", \"a\", \"aaa\", \"ab\", \"abab\", \"abcd\", \"abc\", \"abcdab\"]))\n\nlist_sort([\"aa\", \"a\", \"aaa\", \"ab\", \"abab\", \"abcd\", \"abc\", \"abcdab\"])\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a,b in zip(game,guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.replace('.', '')\n    strength = -1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/154", "completion": "\n    def rotations(s):\n        return [s[i:] + s[:i] for i in range(len(s))]\n\n    return any(rot in a for rot in rotations(b))\n"}
{"task_id": "HumanEval/155", "completion": "\n    even = 0\n    odd = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//':\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                result += i.upper()\n            else:\n                result += i.lower()\n        else:\n            result += i\n    return result[::-1]\n\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    return None\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n"}
