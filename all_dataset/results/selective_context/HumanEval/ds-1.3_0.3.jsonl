{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    result = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            result.append(temp)\n            temp = ''\n        else:\n            temp += char\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_level = 0\n    current_level = 0\n    result = []\n    temp = []\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n            temp.append(char)\n            if current_level > max_level:\n                max_level = current_level\n        elif char == ')':\n            temp.append(char)\n            current_level -= 1\n        elif char == '[':\n            current_level += 1\n            temp.append(char)\n            if current_level > max_level:\n                max_level = current_level\n        elif char == ']':\n            temp.append(char)\n            current_level -= 1\n        elif char == ' ':\n            if len(temp) > 0:\n                result.append(temp)\n                temp = []\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum1 = 0\n    product = 1\n    for num in numbers:\n        sum1 += num\n        product *= num\n    return (sum1, product)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_values = []\n    max_value = float('-inf')\n    for num in numbers:\n        max_value = max(max_value, num)\n        max_values.append(max_value)\n    return max_values\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_chars = set(string)\n    return len(distinct_chars)\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: [num_dict[n] for n in num.split()]))\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    return (numbers[0], numbers[-1])\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [i for i in values if isinstance(i, int) and i > 0]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    xs = [coeff for coeff in xs if coeff != 0]\n    xs.sort(reverse=True)\n    for x in range(-100, 100):\n        if round(poly(xs, x), 2) == 0:\n            return x\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    div_three = [i for i in range(len(l)) if i % 3 == 0]\n    l_div_three = [l[i] for i in div_three]\n    l_div_three.sort()\n    for i, val in zip(div_three, l_div_three):\n        l[i] = val\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n    def fb78(n: int):\n        return sum(str(i).count('7') for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n    def fb89(n: int):\n        return sum(str(i).count('8') for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n    return fb78(n), fb89(n)\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    l_prime = l.copy()\n    l_prime[::2] = even_indices_values\n    return l_prime\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fib(n: int) -> bool:\n        x = 0\n        y = 1\n        while y < n:\n            z = x + y\n            x = y\n            y = z\n        return y == n\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(i) and is_fib(i):\n            count += 1\n        i += 1\n    return i - 1\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum = l[i] + l[left] + l[right]\n            if sum == 0:\n                return True\n            elif sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if not l:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.replace(' ', '')  # remove spaces\n    return text == text[::-1]  # compare the string with its reverse\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return (pow(2, n, p) * pow(10, len(str(p))-1, p)) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels = ''\n    for char in text:\n        if char not in vowels:\n            no_vowels += char\n    return no_vowels\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0_chars = set(s0)\n    s1_chars = set(s1)\n    return s0_chars == s1_chars\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return \"Input should be positive integer.\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    common_list = [value for value in l1 if value in l2]\n    return sorted(list(set(common_list)))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)] + [xs[i] * (len(xs) - 1) for i in range(len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiouyAEIOUY'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.replace(\"apples\", \"\")\n    s = s.replace(\"oranges\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"fruit\", \"\")\n    s = s."}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    smallest_even_value = float('inf')\n    smallest_index = float('inf')\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node <= smallest_even_value:\n            smallest_even_value = node\n            smallest_index = i\n    return [smallest_even_value, smallest_index]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(max(c.keys())+1, 0, -1):\n        if i in c:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst, w):\n        return sum_of_elements(lst) <= w\n\n    return is_balanced(q, w)\n"}
{"task_id": "HumanEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n\n    changes = count_changes(arr)\n    for i in range(len(arr)):\n        if arr[i] != arr[-i - 1]:\n            arr[-i - 1] = arr[i]\n            return changes - count_changes(arr)\n"}
{"task_id": "HumanEval/74", "completion": "\n    def total(lst1, lst2):\n        lst1_total = sum(len(i) for i in lst1)\n        lst2_total = sum(len(i) for i in lst2)\n        if lst1_total < lst2_total:\n            return lst1\n        else:\n            return lst2\n\n    return total(lst1, lst2)\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    return len(factors) == 3 and factors[0]**factors[1]**factors[2] == a\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    else:\n        return (x ** (1.0 / n)) % 1 == 0\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    def is_cube(n):\n        return n == round(n ** (1. / 3)) ** 3\n\n    return is_cube(a)\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789ABCDEF':\n            if is_prime(int(num[i], 16)):\n                count += 1\n        else:\n            return 0\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) % 3 != 0:\n        return False\n    for i in range(0, len(s), 3):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else ('A' if grade == 3.0 else ('A-' if grade == 2.0 else ('B+' if grade == 3.7 else ('B' if grade == 3.0 else ('B-' if grade == 2.7 else ('C' if grade == 3.0 else 'E'))))) for grade in grades]\n\n    print(grade_equation([4, 3, 1.7, 2, 0.5]))\n\n\nnumerical_letter_grade([4, 3, 1.7, 2, 0.5])\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return bin(sum_digits(N))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s))\n\n    def shuffle_string(s):\n        return ' '.join(sort_string(word) for word in s.split(' '))\n\n    return shuffle_string(s)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array)\n    else:\n        return sorted(array[::-1])\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                start_char = 'A'\n                end_char = 'Z'\n            else:\n                start_char = 'a'\n                end_char = 'z'\n            char_index = ord(char) - ord(start_char)\n            new_char_index = (char_index - shift) % 26\n            new_char = chr(new_char_index + ord(start_char))\n            encrypted_string += new_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n    return None\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.split(' ')\n    return len(S)\n"}
{"task_id": "HumanEval/92", "completion": "\n    def is_integer(n):\n        return isinstance(n, int)\n\n    def is_sum_of_two(n, m):\n        return n == m or n == (m * 2)\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and is_sum_of_two(x, y) and is_sum_of_two(x, z)\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for i in range(len(message)):\n        if message[i] in vowels:\n            if i < len(message) - 1 and message[i + 1] in vowels:\n                encoded_message += message[i]\n                encoded_message += message[i + 1]\n                encoded_message += message[i]\n            else:\n                encoded_message += message[i]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_of_digits(largest_prime)\n"}
{"task_id": "HumanEval/95", "completion": "\n    for key in dict:\n        if not key.islower():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    def get_unit_digit(n):\n        return n % 10\n\n    def multiply(a, b):\n        return get_unit_digit(a) * get_unit_digit(b)\n\n    return multiply(a, b)\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value >= 0:\n            return int(value) if value - int(value) < 0.5 else int(value) + 1\n        else:\n            return int(value) if abs(value - int(value)) < 0.5 else int(value) - 1\n\n    print(closest_integer(value))\n\nclosest_integer(\"14.5\")\nclosest_integer(\"10.5\")\nclosest_integer(\"14\")\nclosest_integer(\"-14\")\nclosest_integer(\"-15\")\nclosest_integer(\"-15.3\")\nclosest_integer(\"15.3\")\nclosest_integer(\"15\")\nclosest_integer(\"-15.6\")\nclosest_integer(\"15.6\")\nclosest_integer(\"16\")\nclosest_integer(\"-16\")\nclosest_integer(\"16.0\")\nclosest_integer(\"-16.0\")\nclosest_integer(\"16.5\")\nclosest_integer(\"-16.5\")\nclosest_integer(\"17\")\nclosest_integer(\"-17\")\nclosest_integer(\"17.0\")\nclosest_integer(\"-17.0\")\nclosest_integer(\"17.5\")\nclosest_integer(\"-17.5\")\nclosest_integer(\"18\")\nclosest_integer(\"-18\")\nclosest_integer(\"18.0\")\nclosest_integer(\"-18.0\")\nclosest_integer(\"18.5\")\nclosest_integer(\"-18.5\")\nclosest_integer(\"19\")\nclosest_integer(\"-19\")\nclosest_integer(\"19.0\")\nclosest_integer(\"-19.0\")\nclosest_integer(\"19.5\")\nclosest_integer(\"-19.5\")\nclosest_integer(\"20\")\nclosest_integer(\"-20\")\nclosest_integer(\"20.0\")\nclosest_integer(\"-20.0\")\nclosest_integer(\"20.5\")"}
{"task_id": "HumanEval/100", "completion": "\n    def make_a_pile(n):\n        if n == 1:\n            return [n]\n        else:\n            if n % 2 == 0:\n                return [n + 1] + make_a_pile(n - 1)\n            else:\n                return [n - 1] + make_a_pile(n - 1)\n\n    return make_a_pile(n)\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.split(\",\")\n"}
{"task_id": "HumanEval/102", "completion": "\n    for i in range(x, y + 1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    total = 0\n    for i in range(n, m+1):\n        total += i\n    avg = round(total / (m-n+1))\n    return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted(x for x in x if not has_even_digit(x))\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    def to_words(n):\n        if n == 1:\n            return \"One\"\n        elif n == 2:\n            return \"Two\"\n        elif n == 3:\n            return \"Three\"\n        elif n == 4:\n            return \"Four\"\n        elif n == 5:\n            return \"Five\"\n        elif n == 6:\n            return \"Six\"\n        elif n == 7:\n            return \"Seven\"\n        elif n == 8:\n            return \"Eight\"\n        elif n == 9:\n            return \"Nine\"\n        else:\n            return \"\"\n\n    def sort_and_reverse(arr):\n        arr.sort()\n        arr.reverse()\n        return arr\n\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(to_words(num))\n        else:\n            result.append(str(num))\n    return result\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i**2)\n        else:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += abs(num)\n        else:\n            count += num\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i:] == sorted(arr[i:]) and arr[i:] != arr[:-i]:\n            return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    for i in lst1:\n        if i % 2 != 0:\n            for j in lst2:\n                if j % 2 == 0:\n                    lst1[lst1.index(i)] = j\n                    break\n    if all(i % 2 == 0 for i in lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    def histogram(test):\n        hist = {}\n        for letter in test:\n            if letter in hist:\n                hist[letter] += 1\n            else:\n                hist[letter] = 1\n        max_count = max(hist.values())\n        return {k: v for k, v in hist.items() if v == max_count}\n\n    print(histogram('a b c'))\n    print(histogram('a b b a'))\n    print(histogram('b b b a b'))\n    print(histogram(''))\n\nhistogram('a b c')\nhistogram('a b b a')\nhistogram('b b b a b')\nhistogram('')\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<j"}
{"task_id": "HumanEval/112", "completion": "\n    s = s.replace(c, '')\n    return (s[::-1], s == s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i in range(len(lst)):\n        count = 0\n        for j in lst[i]:\n            if int(j) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements in string {} of the input.\".format(i+1))\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        if cur_sum < min_sum:\n            min_sum = cur_sum\n        if cur_sum > 0:\n            cur_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_fill(grid, capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    dp[i][j] = 1\n                else:\n                    if i > 0:\n                        dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n                    if j > 0:\n                        dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n        return sum(dp[i][j]//capacity for i in range(m) for j in range(n))\n\n    print(max_fill(grid, capacity))\n\n\nmax_fill([[0,0,1,0], [01001111]], 1)\nmax_fill([[0,0,1,0], [01001111]], 2)\nmax_fill([[0,0,1,0], [01001111]], 5)\nmax_fill([[0,0,1,0], [01001111]], 0)\nmax_fill([[0,0,1,0], [01001111]], 2)\nmax_fill([[0,0,1,0], [01001111]], 5)\nmax_fill([[0,0,1,0], [01001111]], 0)\nmax_fill([[0,0,1,0], [01001111]], 2)\nmax_fill([[0,0,1,0], [01001111]], 5)\nmax_fill([[0,0,1,0], [01001111]], 0)\nmax_fill([[0,0,1,0], [01001111]], 2"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x[0]), x[0]))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] in consonants and word[i + 1] in consonants:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def match_parens(lst):\n        s1, s2 = lst\n        stack = []\n        for char in s1:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return 'No'\n        for char in s2:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack or stack.pop() != '(':\n                    return 'No'\n        return 'Yes' if not stack else 'No'\n\n    print(match_parens(['()(',') == 'Yes match(']))\n    print(match_parens}
{"task_id": "HumanEval/120", "completion": "\n    def maximum(arr, k):\n        arr.sort()\n        return arr[-k:]\n\n    return maximum(arr, k)\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum_elements = 0\n    for i in range(k):\n        sum_elements += arr[i]\n    return sum_elements\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3*n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    odd_sequence = [i for i in sequence if i % 2 != 0]\n    odd_sequence.sort()\n    return odd_sequence\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def is_leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def days_in_month(month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        elif month == 2:\n            if is_leap_year(year):\n                return 29\n            else:\n                return 28\n\n    def valid_date(date):\n        if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n            return False\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12 or day < 1 or day > days_in_month(month, year):\n            return False\n        return True\n\n    return valid_date(date)\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        return [chr(i) for i in range(ord('a'), ord('z')+1) if i%2 != 0]\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def intersection_length(interval1, interval2):\n        return max(0, min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1)\n\n    if not (isinstance(interval1, tuple) and isinstance(interval2, tuple) and len(interval1) == len(interval2) == 2):\n        return \"NO\"\n\n    if not (isinstance(interval1[0], int) and isinstance(interval1[1], int) and interval1[0] <= interval1[1] and\n            isinstance(interval2[0], int) and isinstance(interval2[1], int) and interval2[0] <= interval2[1]):\n        return \"NO\"\n\n    intersection_length_ = intersection_length(interval1, interval2)\n\n    return \"YES\" if is_prime(intersection_length_) else \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product)\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    min_path = [float('inf')]*n\n    res = []\n\n    def dfs(x, y, k):\n        if k == 0:\n            res.append(grid[x][y])\n            return\n        min_path[x] = min(min_path[x], grid[x][y])\n        visited[x][y] = True\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                dfs(nx, ny, k-1)\n        visited[x][y] = False\n\n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, k)\n\n    return res\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tribonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1 or n == 2:\n            return 1\n        else:\n            a, b, c = 0, 1, 1\n            for _ in range(n - 2):\n                a, b, c = b, c, a + b + c\n            return c\n\n    return [tribonacci(i) for i in range(n)]\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    last_char = txt[-1]\n    return last_char.isalpha() and not last_char.isalnum()\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    return (max(neg_lst) if neg_lst else None, min(pos_lst) if pos_lst else None)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def compare_two(a, b):\n        if isinstance(a, str) and isinstance(b, str):\n            try:\n                return compare_one(float(a), float(b))\n            except ValueError:\n                return None\n        elif isinstance(a, str):\n            return compare_two(float(a), b)\n        elif isinstance(b, str):\n            return compare_two(a, float(b))\n        else:\n            return None if a == b else (a > b) - (a < b)\n\n    return compare_two(a, b)\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n % 2 != 0:\n        return False\n    for i in range(2, n, 2):\n        if n - i == 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 0:\n        return \"Input must be a positive integer\"\n    elif n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\").replace(\"__\", \"-\").replace(\"_\", \" \").replace(\"-\", \"-_\")\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    if len(file_name)<=3:\n        return 'No'\n    if not re.match(\"^[a-zA-Z][a-zA-Z0-9]*$\", file_name):\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.count(' ') != 0:\n        return 'No'\n    if not re.match(\"^[a-zA-Z]+\\.(exe|dll|txt)$\", file_name):\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return \" \".join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def simplify(x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n        common_den = x_den * n_den\n        common_num = x_num * n_den - x_den * n_num\n        return str(common_num) + '/' + str(common_den)\n\n    return simplify(x, n)\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=sum_digits)\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(num):\n        str_num = str(num)\n        return str_num[0] in '13579' and str_num[1] in '13579' and str_num[2] in '13579'\n\n    return [num for num in nums if is_special(num) and num > 10]\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i for i in range(1, n + 1)]\n    return [a[i] + a[j] for i, j in enumerate(range(n, 0, -1)) if (a[i] + a[j]) % 3 == 0]\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index+1:planet2_index])\n    elif planet1_index > planet2_index:\n        return tuple(planets[planet2_index+1:planet1_index])\n    else:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    def list_sort(lst):\n        # delete odd length strings\n        lst = [i for i in lst if len(i) % 2 == 0]\n        # sort the list by length and alphabetically\n        lst.sort(key=lambda x: (len(x), x))\n        return lst\n\n    # test the function\n    print(list_sort([\"aaaaaa\", \"abcd\", \"abcde\", \"abcdab\", \"abc\", \"ab\"]))\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num % 2 != 0:\n            sum_squares += num ** 2\n    return sum_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.replace('.', '')\n    extensions = [e.replace('.', '') for e in extensions]\n    strength = [(len(set(e[i:]) - set(e[:i])) for i in range(len(e))]\n    strongest_extension = max(extensions, key=lambda e: sum(strength))\n    return f'{class_name}.{strongest_extension}'\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    def is_rotation(a, b):\n        return b in a + a\n\n    return any(is_rotation(a, b) for b in (b, b[::-1]))\n\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the triangle is right-angled\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_count = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_unique_word = word\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining < need:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if operator[0] == '+':\n        return operand[0] + operand[1]\n    elif operator[0] == '-':\n        return operand[0] - operand[1]\n    elif operator[0] == '*':\n        return operand[0] * operand[1]\n    elif operator[0] == '//':\n        return operand[0] // operand[1]\n    elif operator[0] == '**':\n        return operand[0] ** operand[1]\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result = char.lower() + result\n        else:\n            result = char + result\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_valid(n):\n        return a <= n <= b\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_valid_range(a, b):\n        return a <= b\n\n    def generate_even_numbers(a, b):\n        return [n for n in range(a, b+1) if is_even(n)]\n\n    def generate_odd_numbers(a, b):\n        return [n for n in range(a, b+1) if is_odd(n)]\n\n    if not is_valid_range(a, b):\n        return \"Invalid range\"\n\n    if is_even(a) and is_odd(b):\n        return generate_odd_numbers(a, b)\n    elif is_odd(a) and is_even(b):\n        return generate_even_numbers(a, b)\n    elif is_even(a) and is_even(b):\n        return generate_even_numbers(a, b)\n    else:\n        return generate_odd_numbers(a, b)\n"}
