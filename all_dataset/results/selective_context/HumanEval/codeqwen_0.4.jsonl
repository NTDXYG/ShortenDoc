{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            depth += 1\n            current_group.append(char)\n        elif char == \")\":\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(\"\".join(current_group))\n                current_group = []\n\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    for group in paren_string.split(' '):\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string  # Fallback, should never hit this line\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats.append(4)\n            i += 1\n        elif music_string[i] == '|':\n            if i + 1 < len(music_string) and music_string[i + 1] == ' ':\n                beats.append(2)\n                i += 2\n            else:\n                beats.append(1)\n                i += 1\n        elif music_string[i] == '.':\n            beats[-1] += 1\n            i += 1\n        else:\n            i += 1\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            current_diff = abs(numbers[j] - numbers[i])\n            if current_diff < min_diff:\n                min_diff = current_diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    result = [num for num in numbers if count_dict[num] == 1]\n    return result\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    positive_numbers = [num for num in l if num > 0]\n    return positive_numbers\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    assert len(xs) % 2 == 0 and xs[-1] != 0, \"Invalid input\"\n    low, high = -100, 100\n    while high - low > 0.0001:\n        mid = (low + high) / 2\n        if poly(xs, low) * poly(xs, mid) <= 0:\n            high = mid\n        else:\n            low = mid\n    return low\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Extract elements at indices divisible by 3\n    div_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the extracted elements\n    div_three_elements.sort()\n    # Create a new list l'\n    l_prime = []\n    # Iterate over the original list l\n    for i in range(len(l)):\n        # If the index is divisible by 3, use the sorted element\n        if i % 3 == 0:\n            l_prime.append(div_three_elements.pop(0))\n        # Otherwise, use the original element\n        else:\n            l_prime.append(l[i])\n    return l_prime\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = l[:]\n    for i, value in enumerate(even_indices):\n        result[2 * i] = value\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_generator():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib_generator():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n ** 2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 10:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 0, 2\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    text = ''.join(e for e in text if e.isalnum())\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        half = modp(n // 2, p)\n        return (half * half) % p\n    else:\n        return (2 * modp(n - 1, p)) % p\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    total_fruits = n - apples - oranges\n    return total_fruits\n    pass\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes, key=lambda x: (x[0], x[1])))\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # Round the area to 2 decimal places\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n    "}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    return lst1 if total1 <= total2 else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            if prime_factors > 2:\n                return False\n    return prime_factors == 2\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a == 0:\n        return True\n    a = abs(a)\n    b = round(a ** (1. / 3.))\n    return b ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "\n    primes = [2, 3, 5, 11, 13, 17]\n    count = 0\n    for digit in num:\n        if digit in '23456789':\n            count += 1\n        elif digit in 'AB':\n            count += 2\n    return count"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    # Define the grading scale\n    gradescale = {\n        4: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1: 'D+',\n        0.7: 'D',\n        0: 'D-',\n        -0.3: 'E'\n    }\n\n    # Convert the list of GPAs to a list of letter grades\n    letter_grades = []\n    for gpa in grades:\n        for key in sorted(gradescale.keys(), reverse=True):\n            if gpa > key:\n                letter_grades.append(gradescale[key])\n                break\n\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * starts_one_ends(n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary = bin(N)[2:]\n    return binary\n"}
{"task_id": "HumanEval/85", "completion": "\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            lst[i - 1] += lst[i]\n            lst[i] = 0\n    return [i for i in lst if i != 0]\n    #return [lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0]\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    anti_shuffled_words = []\n    for word in words:\n        anti_shuffled_word = ''\n        for char in word:\n            if char.isalpha():\n                anti_shuffled_word += chr(ord(char) + 1)\n            else:\n                anti_shuffled_word += char\n        anti_shuffled_words.append(anti_shuffled_word)\n    return ' '.join(anti_shuffled_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    sorted_array = sorted(array)\n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_alphabet = 'asdfghjklnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    encrypted_s = ''\n    for char in s:\n        if char in encrypted_alphabet:\n            encrypted_s += encrypted_alphabet[(encrypted_alphabet.index(char) + 4) % 26]\n        else:\n            encrypted_s += char\n    return encrypted_s\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    min1 = min(lst)\n    lst.remove(min1)\n    if len(lst) < 2:\n        return None\n    min2 = min(lst)\n    return min2\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and S[i+1] == ' ':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    if x == y + z or y == x + z or z == x + y:\n        if x == int(x) and y == int(y) and z == int(z):\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the next vowel in the alphabet\n                next_vowel = vowels[(vowels.index(char.lower()) + 2) % len(vowels)]\n                # Swap case and replace vowel\n                encoded_char = next_vowel.swapcase()\n            else:\n                # Swap case for consonants\n                encoded_char = char.swapcase()\n        else:\n            # Keep non-alphabetic characters unchanged\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    lower_case = upper_case = False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case = True\n        elif key.isupper():\n            upper_case = True\n        if lower_case and upper_case:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (a % 10) * (b % 10)\n    pass"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    # Convert the string to a float\n    num = float(value)\n    \n    # Check if the number is positive or negative\n    if num > 0:\n        # If positive, round to the nearest integer using the built-in round function\n        return int(round(num))\n    else:\n        # If negative, round to the nearest integer using the built-in round function\n        # and then subtract 1 to round away from zero\n        return int(round(num)) - 1\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    if n % 2 == 0:\n        for i in range(n):\n            pile.append(n + 2 * i)\n    else:\n        for i in range(n):\n            pile.append(n + 2 * i)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    words = s.split()\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 == 0:\n        return x\n    else:\n        return x - 1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n    \n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    arr.sort()\n    for i in range(len(arr)):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_lst1 = [i for i in lst1 if i % 2 == 0]\n    odd_lst2 = [i for i in lst2 if i % 2 != 0]\n    if len(even_lst1) >= len(odd_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    test = test.split()\n    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_count = max(d.values())\n    return {k: v for k, v in d.items() if v == max_count}\n"}
{"task_id": "HumanEval/112", "completion": "\n    s = s.replace(c, '')\n    return (s, s == s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 == 1)\n        result.append(f\"the number odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Calculate the total number of buckets needed to empty the wells\n    total_buckets = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times buckets need to be lowered\n    lowerings = math.ceil(total_buckets / capacity)\n    \n    return lowerings\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                combined = lst[i] + lst[j]\n                if is_balanced(combined):\n                    return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Initialize the sum\n    sum = 0\n    \n    # Iterate over the first k elements\n    for i in range(k):\n        # Add the current element to the sum\n        sum += arr[i]\n    \n    # Return the sum\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n            n = 3 * n + 1\n        else:\n            n = n // 2\n    odd_numbers.append(1)\n    odd_numbers.sort()\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [chr(ord('a') + i) for i in range(len(txt)) if (ord('a') + i) % 2 == 1]\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    max_start = max(start1, start2)\n    min_end = min(end1, end2)\n\n    intersection_length = min_end - max_start + 1\n\n    if intersection_length > 0 and is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    prod = 1\n    magn = 0\n    for num in arr:\n        if num > 0:\n            prod *= 1\n            magn += abs(num)\n        elif num < 0:\n            prod *= -1\n            magn += abs(num)\n        else:\n            prod *= 0\n            magn += 0\n    return prod * magn\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    M = len(grid[0])\n    \n    # Initialize a priority queue\n    pq = [(grid[0][0], 0, 0)]\n    \n    # Initialize a visited set\n    visited = set()\n    \n    # Initialize a result list\n    result = []\n    \n    # Initialize a counter\n    counter = 0\n    \n    while pq:\n        # Pop the smallest element from the priority queue\n        value, i, j = heapq.heappop(pq)\n        \n        # If the counter is equal to k, add the value to the result list and break the loop\n        if counter == k:\n            result.append(value)\n            break\n        \n        # Add the current cell to the visited set\n        visited.add((i, j))\n        \n        # Add the neighbors of the current cell to the priority queue\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < M and (ni, nj) not in visited:\n                heapq.heappush(pq, (grid[ni][nj], ni, nj))\n        \n        # Increment the counter\n        counter += 1\n    \n    # Return the result list\n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tri(n):\n        if n == 1:\n            return 3\n        elif n == 2:\n            return 8\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n - 3)\n    \n    return [tri(i) for i in range(1, n + 1)]\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(abs(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    # Check if the string is empty or the last character is not a letter\n    if not txt or not txt[-1].isalpha():\n        return False\n    # Check if the last character is a letter and it's preceded by a space or is the only character\n    return txt[-2] == ' ' or len(txt) == 1\n"}
{"task_id": "HumanEval/135", "completion": "\n    max_index = -1\n    max_value = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    if not lst:\n        return None\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n"}
{"task_id": "HumanEval/137", "completion": "\n    # Convert inputs to floats for comparison\n    a_float = float(a)\n    b_float = float(b)\n    \n    # Compare the floats\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n >= 8\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count > 2:\n                result += \"_\" * (space_count - 1) + char\n            elif space_count > 0:\n                result += \"_\" * space_count + char\n            else:\n                result += char\n            space_count = 0\n    if space_count > 2:\n        result += \"_\" * (space_count - 1)\n    elif space_count > 0:\n        result += \"_\" * space_count\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 100:\n        return \"No\"\n    if file_name.count('.') != 1:\n        return \"No\"\n    name, extension = file_name.split('.')\n    if not name[0].isalpha():\n        return \"No\"\n    if not extension in ['txt', 'exe', 'dll']:\n        return \"No\"\n    if name.count('0') > 3 or name.count('1') > 3 or name.count('2') > 3 or name.count('3') > 3 or name.count('4') > 3 or name.count('5') > 3 or name.count('6') > 3 or name.count('7') > 3 or name.count('8') > 3 or name.count('9') > 3:\n        return \"No\"\n    return \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def fraction_to_tuple(fraction):\n        numerator, denominator = fraction.split('/')\n        return int(numerator), int(denominator)\n\n    def multiply_fractions(fraction1, fraction2):\n        numerator1, denominator1 = fraction_to_tuple(fraction1)\n        numerator2, denominator2 = fraction_to_tuple(fraction2)\n        return f\"{numerator1 * numerator2}/{denominator1 * denominator2}\"\n\n    result = multiply_fractions(x, n)\n    numerator, denominator = fraction_to_tuple(result)\n    return numerator % denominator == 0\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(int(i) for i in str(abs(x))))"}
{"task_id": "HumanEval/146", "completion": "\n    result = []\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0]) % 2 != 0:\n                result.append(num)\n    return result\n"}
{"task_id": "HumanEval/147", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        a = i * i + 2 * i + 1\n        if a % 3 == 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Remove strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length of each word, then alphabetically\n    even_length_lst.sort(key=lambda x: (len(x), x))\n    \n    return even_length_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num < 0 and num % 2 != 0:\n            sum_squares += num ** 2\n    return sum_squares\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a,b in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = \"\"\n    max_strength = float('-inf')\n    for extension in extensions:\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        strength = upper_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Sort the sides to ensure the longest side is last\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    eaten = min(need, remaining)\n    return [number + eaten, remaining - eaten]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                s[i] = s[i].upper()\n            else:\n                s[i] = s[i].lower()\n    return ''.join(s)\n    pass\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n"}
