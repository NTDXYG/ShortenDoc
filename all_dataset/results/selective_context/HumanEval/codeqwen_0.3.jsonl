{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    depths = []\n    current_depth = 0\n    max_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                depths.append(max_depth)\n            max_depth = 0\n\n    # Add the last group's depth if the string doesn't end with a space\n    if max_depth > 0:\n        depths.append(max_depth)\n\n    return depths\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(map(str, range(n + 1)))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "HumanEval/17", "completion": "\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                result.append(2)\n                i += 2\n            else:\n                result.append(4)\n                i += 1\n        elif music_string[i] == '.':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                result.append(1)\n                i += 2\n            else:\n                result.append(1)\n                i += 1\n        else:\n            i += 1\n    return result\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])\n    return ' '.join(sorted_numbers)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            current_diff = abs(numbers[j] - numbers[i])\n            if current_diff < min_diff:\n                min_diff = current_diff\n                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return [num for num in numbers if counts[num] == 1]\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0:\n        raise ValueError(\"List must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non-zero coefficient must be non-zero\")\n\n    low = -1000\n    high = 1000\n    while poly(xs, low) * poly(xs, high) > 0:\n        low *= 2\n        high *= 2\n\n    while high - low > 1e-10:\n        mid = (low + high) / 2\n        if poly(xs, mid) * poly(xs, low) > 0:\n            low = mid\n        else:\n            high = mid\n\n    return low\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    third_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    third_elements.sort()\n    result = []\n    third_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(third_elements[third_index])\n            third_index += 1\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    max_num = l[0]\n    for num in l:\n        if num > max_num:\n            max_num = num\n    return max_num\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_generator():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib_generator():\n        if fib_num > 1 and is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n"}
{"task_id": "HumanEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base >= 10:\n        raise ValueError(\"Base must be less than 10\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    text = ''.join(e for e in text if e.isalnum())\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    result = 1\n    for _ in range(n):\n        result = (2 * result) % p\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1).intersection(set(l2))\n    # Return sorted list of common elements\n    return sorted(list(common_elements))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        a, b, c, d = 0, 1, 1, 2\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruit_counts = [int(num) for num in s.split() if num.isdigit()]\n    return n - sum(fruit_counts)\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    even_nodes = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]\n    if not even_nodes:\n        return []\n    return list(min(even_nodes, key=lambda x: (x[0], x[1])))\n"}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_val = -1\n    for num, count in freq.items():\n        if num <= count and num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/70", "completion": "\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # Round the area to 2 decimal places\n    return round(area, 2)\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    else:\n        return q == q[::-1]\n    "}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    return lst1 if total1 <= total2 else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n    return len(factors) == 3\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a < 0:\n        a = -a\n    return a**(1./3.) % 1 == 0\n    #return round(a**(1./3.))**3 == a\n    #return a**(1./3.) == int(a**(1./3.))\n    #return a**(1./3.) == round(a**(1./3.))\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1 or a == 1\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1 or a == 1 or a == -2\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1 or a == 1 or a == -2 or a == 2\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1 or a == 1 or a == -2 or a == 2 or a == -3\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1 or a == 1 or a == -2 or a == 2 or a == -3 or a == 3\n    #return a**(1./3.) == int(a**(1./3.)) and a > 0 or a == 0 or a == -1 or a == 1 or a == -2 or a == 2 or a == -3 or a == 3 or a =="}
{"task_id": "HumanEval/78", "completion": "\n    primes = '2357BD'\n    return sum(1 for c in num if c in primes)"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    pass\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * int(starts_one_ends(n - 1))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Your code here\n    return bin(sum(int(digit) for digit in str(N)))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words) + ' ' + ' '.join(words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    else:\n        return sorted(array) if (array[0] + array[-1]) % 2 != 0 else sorted(array, reverse=True)\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                start = ord('a')\n            else:\n                start = ord('A')\n            encrypted_char = chr((ord(char) - start + shift) % 26 + start)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    min1 = min(lst)\n    lst.remove(min1)\n    if len(lst) < 2:\n        return None\n    min2 = min(lst)\n    return min2\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    for i in range(len(S)):\n        if S[i] == 'I' and S[i-1] == '.' or S[i-1] == '?' or S[i-1] == '!':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    if x == y + z and x == int(x) and y == int(y) and z == int(z):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the next vowel in the alphabet\n                next_vowel = vowels[(vowels.index(char.lower()) + 2) % len(vowels)]\n                # Swap case and replace vowel with next vowel\n                encoded_char = next_vowel.swapcase()\n            else:\n                # Swap case for consonants\n                encoded_char = char.swapcase()\n        else:\n            # Keep non-alphabetic characters unchanged\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if num > max_prime and is_prime(num):\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    lower_case = upper_case = False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case = True\n        elif key.isupper():\n            upper_case = True\n        else:\n            return False\n        if lower_case and upper_case:\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(2, n) if is_prime(i)]\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (a % 10) * (b % 10) if a != 0 and b != 0 else 0"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    # Your code here\n    return int(value) if float(value) % 1 == 0 else int(value) + 1 if float(value) > 0 else int(value) - 1\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    for i in range(n):\n        pile.append(n + 2 * i)\n    return pile\n    pass\n"}
{"task_id": "HumanEval/101", "completion": "\n    s = s.replace(\",\", \"\")\n    s = s.split()\n    return s\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x % 2 == 0:\n        return x\n    else:\n        return x - 1\n\n    if y % 2 == 0:\n        return y\n    else:\n        return y - 1\n\n    if x > y:\n        return -1\n    else:\n        return -1\n\n    if x == y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -1\n\n    if x < y:\n        return -1\n    else:\n        return -"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i * i)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            return -int(str(n)[1]) + sum(int(digit) for digit in str(n)[2:])\n        else:\n            return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr == arr[i:] + arr[:i]:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n    \n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    test = test.split()\n    dic = {}\n    for i in test:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    max_val = max(dic.values())\n    return {k: v for k, v in dic.items() if v == max_val}\n"}
{"task_id": "HumanEval/112", "completion": "\n    for i in c:\n        s = s.replace(i, '')\n    if s == s[::-1]:\n        return (s, True)\n    else:\n        return (s, False)\n    \n    #Alternative solution\n    s = s.translate(str.maketrans('', '', c))\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = s.translate(str.maketrans('', '', c))\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])\n\n    #Alternative solution\n    s = ''.join([i for i in s if i not"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, string in enumerate(lst, 1):\n        odd_count = sum(1 for char in string if int(char) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char.lower() not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            elif char == ')':\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    for i in range(2):\n        if is_balanced(lst[i]) and is_balanced(lst[1 - i]):\n            return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum = 0\n    for i in range(k):\n        if len(str(arr[i])) == 2:\n            sum += arr[i]\n    return sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)\n    odd_numbers.sort()\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == '':\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    prod = 1\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        else:\n            return 0\n    return abs(prod) * sum(abs(num) for num in arr)\n"}
{"task_id": "HumanEval/129", "completion": "\n    N = len(grid)\n    if N == 1:\n        return [grid[0][0]]\n    \n    # Initialize the distance matrix\n    dist = [[float('inf')] * N for _ in range(N)]\n    \n    # Initialize the queue\n    queue = [(0, 0, 0)]\n    \n    # Initialize the visited set\n    visited = set()\n    \n    # Perform BFS\n    while queue:\n        x, y, d = queue.pop(0)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if d == k:\n            break\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                if d + 1 < dist[nx][ny]:\n                    dist[nx][ny] = d + 1\n                    queue.append((nx, ny, d + 1))\n    \n    # Find the minimum path\n    path = []\n    x, y = N - 1, N - 1\n    for _ in range(k):\n        path.append(grid[x][y])\n        min_dist = float('inf')\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and dist[nx][ny] < min_dist:\n                min_dist = dist[nx][ny]\n                x, y = nx, ny\n    \n    return path[::-1]\n"}
{"task_id": "HumanEval/130", "completion": "\n    # Your code here\n    def tri(n):\n        if n == 1:\n            return [3]\n        elif n == 2:\n            return [3, 2]\n        else:\n            trib = [3, 2]\n            for i in range(2, n):\n                if i % 2 == 0:\n                    trib.append(trib[-1] + trib[-2] + trib[-3] + 1)\n                else:\n                    trib.append(trib[-1] + trib[-2] + trib[-3] + 1)\n            return trib\n    return tri(n)\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 == 1:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    return len(stack) > 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([int(i)**2 for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' '):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] > arr[i-1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    if not lst:\n        return (None, None)\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n"}
{"task_id": "HumanEval/137", "completion": "\n    # Convert inputs to floats for comparison\n    a_float = float(a)\n    b_float = float(b)\n    \n    # Compare the floats\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n >= 8\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, n + 1):\n            factorial *= i\n        return factorial\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n        else:\n            if space_count > 2:\n                result += \"-\"\n            elif space_count > 0:\n                result += \"_\" * space_count\n            result += char\n            space_count = 0\n    if space_count > 2:\n        result += \"-\"\n    elif space_count > 0:\n        result += \"_\" * space_count\n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 100:\n        return \"No (the name should be less than 100 characters\"\n    if file_name.count('.') != 1:\n        return \"No (the name should contain exactly one dot\"\n    name, extension = file_name.split('.')\n    if not name[0].isalpha():\n        return \"No (the name should start a lat alapet letter\"\n    if extension not in ['txt', 'exe', 'dll']:\n        return \"No (the extension should be one of these: ['txt', 'exe', 'dll']\"\n    if name.count('0') > 3 or name.count('1') > 3 or name.count('2') > 3 or name.count('3') > 3 or name.count('4') > 3 or name.count('5') > 3 or name.count('6') > 3 or name.count('7') > 3 or name.count('8') > 3 or name.count('9') > 3:\n        return \"No (the name should not more three digits\"\n    return \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def parse_fraction(fraction):\n        numerator, denominator = fraction.split('/')\n        return int(numerator), int(denominator)\n\n    def multiply_fractions(frac1, frac2):\n        numerator1, denominator1 = frac1\n        numerator2, denominator2 = frac2\n        return numerator1 * numerator2, denominator1 * denominator2\n\n    def is_whole(numerator, denominator):\n        return numerator % denominator == 0\n\n    frac1 = parse_fraction(x)\n    frac2 = parse_fraction(n)\n    result = multiply_fractions(frac1, frac2)\n    return is_whole(*result)\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    def isFirstDigitOdd(num):\n        return int(str(abs(num))[0]) % 2 != 0\n\n    def isGreaterThanTen(num):\n        return abs(num) > 10\n\n    return len([num for num in nums if isFirstDigitOdd(num) and isGreaterThanTen(num)])\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % 3 == 0:\n                triples += 1\n    return triples\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1, index2 = planets.index(planet1), planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Remove strings with odd lengths\n    even_length_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list by length, then alphabetically\n    even_length_lst.sort(key=lambda x: (len(x), x))\n    \n    return even_length_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 == 1)\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a-b) for a,b in zip(game,guess)]"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = \"\"\n    max_strength = float('-inf')\n    for extension in extensions:\n        upper_count = sum(1 for char in extension if char.isupper())\n        lower_count = sum(1 for char in extension if char.islower())\n        strength = upper_count - lower_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result\n"}
{"task_id": "HumanEval/157", "completion": "\n    return sorted([a, b, c]) == [a, c, b] and (a**2 + b**2 == c**2)\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result[::-1] if result.isalpha() else result[::-1] if result.isdigit() else result[::-1] if result.isalnum() else result[::-1] if result.isspace() else result[::-1] if result.isupper() else result[::-1] if result.islower() else result[::-1] if result.isnumeric() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1] if result.isalpha() else result[::-1]"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
