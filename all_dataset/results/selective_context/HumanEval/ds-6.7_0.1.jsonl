{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1].replace(' ', ''))\n                start = i+1\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number % 1\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    groups = paren_string.split()\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        result.append(max_count)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_string = music_string.split()\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n        else:\n            result.append(len(note))\n    return result\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x]))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while (divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return [num for num in counts if counts[num] == 1]\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 == 1:\n        raise ValueError(\"List of coefficients must have even length\")\n    if xs[-1] == 0:\n        raise ValueError(\"Last coefficient must not be zero\")\n\n    a, b, c = xs[-3:]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    div_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    div_three.sort()\n    res = [div_three.pop(0) if i % 3 == 0 else l[i] for i in range(len(l))]\n    return res\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    count = 0\n    while count < n:\n        f = fib(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n    return fib(i - 1)\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        start = i + 1\n        end = len(l) - 1\n        while start < end:\n            total = l[i] + l[start] + l[end]\n            if total < 0:\n                start += 1\n            elif total > 0:\n                end -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i+1 for i in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    fib_sequence = [0, 0, 2, 0]\n    if n < 4:\n        return fib_sequence[n]\n    for i in range(4, n+1):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4])\n    return fib_sequence[-1]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 0, 1]\n        for i in range(3, n + 1):\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3])\n        return fib_sequence[-1]\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    if s[-1] == \"y\":\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[3])\n    total_fruits = int(s[-1])\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even_node = min(even_nodes, key=lambda x: (x[1], x[0]))\n    return [smallest_even_node[1], smallest_even_node[0]]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    max_val = max(c.keys())\n    for i in range(max_val, 0, -1):\n        if c[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 < sum2:\n        return lst1\n    elif sum1 > sum2:\n        return lst2\n    else:\n        return lst1\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a = a / prime\n    if len(factors) == 3 and a == 1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return True\n    if x == 1:\n        return True\n    if x == 0:\n        return True\n    if n == 0:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    x = int(a**(1/3))\n    return x**3 == a or (x+1)**3 == a or (x-1)**3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for i in num if i in hex_primes)\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D-', 0.1: 'D', 0.0: 'E'}\n    grades.sort(reverse=True)\n    return [grade_dict.get(grade) for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    # convert the number to binary\n    binary = bin(N)[2:]\n    # calculate the sum of the digits\n    total = sum(int(digit) for digit in binary)\n    # convert the sum to binary\n    result = bin(total)[2:]\n    return result\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    new_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(new_words)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    coords = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                coords.append((i, j))\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2 * 2) % 26 + 2 * ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = re.split('[.?!]', S)\n    return sum(1 for s in sentences if s.strip().startswith('I'))\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    lower_case = all(k.islower() for k in dict.keys())\n    string_keys = all(isinstance(k, str) for k in dict.keys())\n    return lower_case or string_keys\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Your code here\n    return a * b\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * i)\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', '').split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    return sorted([n for n in x if not has_even_digit(n)])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    num_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    if len(arr) == 0:\n        return result\n    else:\n        arr = sorted([i for i in arr if 1 <= i <= 9])\n        arr = arr[::-1]\n        for num in arr:\n            result.append(num_names[num])\n        return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    def sum_num(n):\n        return n * (n + 1) // 2\n\n    return [fact(i) if i % 2 == 0 else sum_num(i) for i in range(1, n + 1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(sum_digits(n) > 0 for n in arr)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    # Your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            count += 1\n    return count <= 1\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [i for i in lst1 if i % 2 != 0]\n    even_lst2 = [i for i in lst2 if i % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    # your code here\n    count = {}\n    for letter in test.split():\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_value = max(count.values()) if count else 0\n    return {k: v for k, v in count.items() if v == max_value}\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    for i in c:\n        s = s.replace(i,'')\n    return (s,s==s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the string {odd_count} of the {i+1}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        current_sum = min(current_sum, 0)\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Initialize the count of buckets to 0\n    count = 0\n    # Flatten the grid into a list of wells\n    wells = [item for sublist in grid for item in sublist]\n    # Sort the wells in descending order\n    wells.sort(reverse=True)\n    # Iterate over the sorted wells\n    for well in wells:\n        # Calculate the number of buckets needed to empty the well\n        buckets_needed = math.ceil(well / capacity)\n        # Increment the count of buckets by the number of buckets needed\n        count += buckets_needed\n    # Return the count of buckets\n    return count\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_good(s):\n        count = 0\n        for ch in s:\n            if ch == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    def concat(s1, s2):\n        return s1 + s2 if is_good(s1 + s2) else s2 + s1\n\n    return 'Yes' if is_good(concat(lst[0], lst[1])) else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort(reverse=True)\n    return arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through the first k elements of arr\n    for i in range(k):\n        # If the number has at most two digits, add it to sum\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n\n    return sum\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([i for i in collatz if i % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n    date_format = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$')\n    if date_format.match(date) is None:\n        return False\n    else:\n        month, day, year = map(int, date.split('-'))\n        if month in (4, 6, 9, 11) and day > 30:\n            return False\n        elif month == 2:\n            if day > 29:\n                return False\n            elif day == 29:\n                if year % 4 != 0 or (year % 100 == 0 and year % 400 != 0):\n                    return False\n        return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    # if the intervals don't intersect, return \"NO\"\n    if start > end:\n        return \"NO\"\n\n    # calculate the length of the intersection\n    length = end - start + 1\n\n    # check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n    else:\n        sum_magn = 0\n        prod_sign = 1\n        for num in arr:\n            sum_magn += abs(num)\n            if num < 0:\n                prod_sign *= -1\n        return prod_sign * sum_magn\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    q = [(grid[0][0], 0, 0, 1)]\n    dp[0][0][1] = grid[0][0]\n    heapq.heapify(q)\n    while q:\n        cur_min, x, y, k = heapq.heappop(q)\n        if k == n * n:\n            return cur_min.split(',')\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and k + 1 <= n * n:\n                new_min = cur_min + ',' + str(grid[nx][ny])\n                if new_min < dp[nx][ny][k + 1]:\n                    dp[nx][ny][k + 1] = new_min\n                    heapq.heappush(q, (new_min, nx, ny, k + 1))\n    return []\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n        tri_seq = [0, 1, 1]\n        for i in range(3, n + 1):\n            tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i - 3])\n        return tri_seq\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                return True\n            else:\n                stack.append(bracket)\n    return False\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum([math.ceil(i)**2 for i in lst])\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        if len(txt) == 1 or not txt[-2].isalpha():\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    arr.sort()\n    for i in range(len(arr) - 1, -1, -1):\n        if i == 0 or arr[i] <= arr[i - 1]:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_nums = [i for i in lst if i < 0]\n    pos_nums = [i for i in lst if i > 0]\n\n    if not neg_nums:\n        a = None\n    else:\n        a = max(neg_nums)\n\n    if not pos_nums:\n        b = None\n    else:\n        b = min(pos_nums)\n\n    return (a, b)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Write your code here\n    if n % 2 == 1:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def minus_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * minus_factorial(n-2)\n\n    def multiply_range(n):\n        if n == 1:\n            return 1\n        else:\n            return n * multiply_range(n-1)\n\n    return factorial(n) * minus_factorial(n) * multiply_range(n)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    # Your code here\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    return text\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    return ' '.join(word for word in words if is_prime(len(word)))\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    whole_num = x_num * n_num\n    whole_den = x_den * n_den\n\n    return whole_num % whole_den == 0\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=lambda n: (sum_digits(n), nums.index(n)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    tri = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    tri += 1\n    return tri\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = {\n        1: \"Mercury\",\n        2: \"Venus\",\n        3: \"Earth\",\n        4: \"Mars\",\n        5: \"Jupiter\",\n        6: \"Saturn\",\n        7: \"Uranus\",\n        8: \"Neptune\"\n    }\n\n    reverse_planets = {v: k for k, v in planets.items()}\n\n    if planet1 not in reverse_planets or planet2 not in reverse_planets:\n        return ()\n\n    start = min(reverse_planets[planet1], reverse_planets[planet2])\n    end = max(reverse_planets[planet1], reverse_planets[planet2])\n\n    return tuple(planets[i] for i in range(start, end + 1))\n\n"}
{"task_id": "HumanEval/149", "completion": "\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort()\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum = 0\n    for i in lst:\n        if i > 0 and type(i) == int and i % 2 != 0:\n            sum += i ** 2\n    return sum\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        result.append(abs(game[i]-guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.lower()\n    strongest_ext_name = ''\n    strongest_ext_strength = -10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}
{"task_id": "HumanEval/154", "completion": "\n    # your code goes here\n    if len(a) < len(b):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # sort the sides\n    sides = sorted([a, b, c])\n\n    # check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    # Your code here\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join([c.upper() if c.islower() else c.lower() for c in s])\n\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    even_numbers = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n\n"}
