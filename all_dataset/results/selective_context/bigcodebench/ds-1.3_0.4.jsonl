{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download all files a specific an FTP using w in subprocessArgs ftserver (str): The FTP addressDefault is 'ftdlptestftuser (str The FTP usernameDefault is 'dlpuserftpassword (str): The FTPDefault is 'rNrKYTX9g7z3RgJRmxWuGHbeu'.ftdir (str): The path on FTP from files needDefault is '/fttest'.Returns: List[str]: A fil were attempted downloaded FTPRaises: Exception - If there failure in connecting FTP.Output the messageF FTP {ft}: {str(e - If there failure logging into.Output the messageF log FTP {ft with user}: {str(e - If there failure changing to specified directory.Output the messageF change to directory {ft on serverserver}: {str(e Requirements - subprocess ftpl os Example >>> taskfunc() ['filejpg...\n    \"\"\"\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(ftp_user, ftp_password)\n    except Exception as e:\n        print(f\"FTP {ft}: {str(e)}\")\n        return\n    try:\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"Change to directory {ftp_dir} on {ftp_server}: {str(e)}\")\n        return\n    files = []\n    try:\n        ftp.retrbinary('RETR ' + file, open(file, 'wb').write)\n        files.append(file)\n    except Exception as e:\n        print(f\"{file} not downloaded: {str(e)}\")\n    finally:\n        ftp.quit()\n    return files\n"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute a list shell read CSV and save outputs in separateEach command's output written unique in specified outputIf a command fails error along exit app respective outputParameters - commands_file_path (str): Path CSV containing shell in first columnThe file should not have headers- output_dir_path (str): Path where outputs of commands will savedIf the directory does it createdRequirements - subprocess - csv os Ra: FileNotError If the commands_file_path does.Returns: - list str: A paths output files created in output, each named as 'command_X_output', where command indexIf a command execution fails output file contain descriptive error and exit.Example >>> task_func(\"commcsv \"/pathoutput_directory ['//command_1_outputtxt...\n    \"\"\"\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    with open(commands_file_path, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        commands = [row[0] for row in csv_reader]\n\n    output_files = []\n\n    for i, command in enumerate(commands):\n        output_file_path = os.path.join(output_dir_path, f'command_{i}_output.txt')\n        output_files.append(output_file_path)\n\n        try:\n            process = subprocess.run(command, shell=True, check=True, stdout=open(output_file_path, 'w'), stderr=subprocess.PIPE)\n        except subprocess.CalledProcessError as e:\n            with open(output_file_path, 'w') as f:\n                f.write(f'Command failed with error: {str(e)}')\n            output_files.pop()\n            continue\n\n    return output_files\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if a particular process based its nameIf it running start using process name as a commandIf it running terminate process by executing process asParameters - processstr check and manageThis should executable commandReturns: - str: A message indicating action taken: \"Process notStarting <process.\" - \" foundRestart <process.\" Requirements - sub psutil time Example >>> taskfunc('not \" not foundStarting notepad.\" OR >>> taskfunc('not \"Process foundRestart notepad.\"\n    \"\"\"\n    def is_process_running(process_name: str) -> bool:\n        for proc in psutil.process_iter(['pid', 'name']):\n            if proc.info['name'] == process_name:\n                return True\n        return False\n\n    if is_process_running(process_name):\n        return f\"Process foundRestart {process_name}.\"\n    else:\n        return f\"Process notStarting {process_name}.\"\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including sub located specified and returns path created zipParameters directory (str): path containing files zReturns: str: The path generated zipReturns None if directory does containRaises: FileNotError if the specified directory does Requirements - os - glob zipfile Notes The zip name always 'files. Example >>> path task_func('/files isinstance str True\n    \"\"\"\n    try:\n        # get all files in the directory\n        files = glob.glob(directory + '/*')\n\n        # create a new zip file\n        with zipfile.ZipFile('files.zip', 'w') as zipf:\n            # write all files to the zip file\n            for file in files:\n                zipf.write(file)\n\n        return 'files.zip'\n\n    except FileNotFoundError:\n        return None\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing URLs and plot it.Parameters - text (str): analyzeReturns: WordCloud object: The generated word.Raises: ValueError(\"No words available to generate a word cloud after removing URLs.\"): If there. Requirements - re - wordWord - matplotpyplot Example >>> printtaskfunc('Visit httpspython for more info.Python is great.I love Python.').words_) {'Python': 1.0Visit': 05info 0greatlove >>> printtaskfunc('Check out this link: httpexample.Machine fascinating.').words_) {'Check': 1.link 1Machinelearningfasc\n    \"\"\"\n    # Remove URLs\n    text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Remove numbers\n    text = re.sub(r'\\d+', '', text)\n\n    # Remove special characters\n    text = re.sub(r'\\W', ' ', text)\n\n    # Remove extra whitespace\n    text = re.sub(r'\\s+', ' ', text).strip()\n\n    # Split text into list of words\n    words = text.split()\n\n    if not words:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n\n    # Generate word cloud\n    wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords, \n                min_font_size = 10).generate(text) \n\n    # Plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n  \n    plt.show()\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train a random forest classifier perform the classification the rows dataframe with respect column of plot the bar plot feature importance of column in- The xlabel of bar plot should 'Feature Import Score the y 'Features' titleVisualizing Important'.- Sort the feature importances in a descending- Use feature importances on x- and feature namesParameters - df (pandas.Data : Dataframe containing to classify- target_column (str NameReturns: - sklearnmodelRandomForestClassifier : The random trained input- matplot.axesAx: The Ax object of the plotted dataRequirements - pand - sk.ense seab mat.py Example >>> dataFrame{\"X\" [- 3 5 -4 2],label [0 1 0] model, ax task_funcdata \"label printdatahead2 X label 0 - 0 3 1 >>>) RandomForestClass(randomstate=42\n    \"\"\"\n    # Split the dataframe into features and target\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    # Train a random forest classifier\n    clf = RandomForestClassifier(random_state=42)\n    clf.fit(X, y)\n\n    # Get the feature importances\n    importances = clf.feature_importances_\n\n    # Create a dataframe with feature importances\n    df_importances = pd.DataFrame({'Feature': X.columns, 'Importance': importances})\n\n    # Sort the dataframe by importance\n    df_importances = df_importances.sort_values('Importance', ascending=False)\n\n    # Plot the bar plot\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='Importance', y='Feature', data=df_importances, palette='viridis')\n    plt.xlabel('Feature Importance')\n    plt.ylabel('Features')\n    plt.title('Feature Import')\n    plt.show()\n\n    return clf\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates Flask application configured user authentication using-LoginIt defines routes for login log a protected pageThe user authentication is managed with simple User class and login form using Flask-WTFThe application uses dynamic configuration for security template renderingParameters secret (str): A application sessiontemplate_folder (str): The path directory FlaskRequirements - flask - flaskloginwtf wtformsvalidatorserksecurity Returns Flask: A Flask application instance configured userExamples >>> app task_func('mysecretkeytem 'login in [ruleend for appurl_map.iter_rules() TrueconfigSEC ==\n    \"\"\"\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    class User(UserMixin):\n        def __init__(self, id):\n            self.id = id\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        return User(user_id)\n\n    @app.route('/')\n    def home():\n        return render_template('home.html')\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = User.query.filter_by(username=form.username.data).first()\n            if user:\n                if check_password_hash(user.password, form.password.data):\n                    login_user(user)\n                    return redirect(url_for('dashboard'))\n\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('home'))\n\n    @app.route('/dashboard')\n    @login_required\n    def dashboard():\n        return render_template('dashboard.html')\n\n    return app\n\napp = task_func('mysecretkey', 'templates')\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outl from a specified column of a dataset based the Z.It standard the column, calculates Z-sc removes data points where the Z exceeds a thresholdThe function also visual data before and outlier removalParameters: data (ndarray): The dataset.column (int): The index to analyze for outloutlier_z_score (float): The Z- threshold to identify outlReturns: tuple: A tuple containing original data, the data without outl indices of outlRequirements: - numpy - mat. - sc.stats skpreprocessingStandardScaler Notes The function plots two scatter: 'Data with Outl shows original data including outl, while without displays data after removing based the provided Z thresholdThis visual comparison helps illustrate impact outlier removal the datasetExamples: >>> data = np[14 25],1 227 8100 200]]) column 1 lentask_func(data, column, 3.0 3 >>> isinstance, column,)[], npnd) True is is tuple\n    \"\"\"\n    # Standardize the column\n    scaler = StandardScaler()\n    data[:, column] = scaler.fit_transform(data[:, column].reshape(-1, 1))\n\n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(data[:, column]))\n\n    # Identify outliers\n    outliers = np.where(z_scores > outlier_z_score)[0]\n\n    # Remove outliers\n    data = np.delete(data, outliers, axis=0)\n\n    # Plotting\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.scatter(range(len(data)), data, color='blue')\n    plt.title('Data with Outliers')\n    plt.subplot(1, 2, 2)\n    plt.scatter(range(len(data)), data, color='red')\n    plt.title('Data without Outliers')\n    plt.show()\n\n    return data, outliers\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-me clust on dataset and generate scatter visual clusters and centroParameters data (pd.DataFrame): The dataset clustered, where rows samples and featuresn_clusters (int): The to formMust be greater 1Defaults 3Returns: tuple: - npnd: An cluster labels assigned each sample- plt.Axes: An Ax object with scatter plot showing clusters and centroRaises: ValueError If 'data pd.DataFrame.ValueError If 'n_clusters an greater 1.Requirements - numpy - pand mat sk Example >>> np42 >>> data pData(100 2 columnsFeature1 _, ax task_func 3gettitle 'K-Me Cl\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    labels = kmeans.labels_\n\n    plt.figure(figsize=(10, 7))\n    plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis')\n    centroids = kmeans.cluster_centers_\n    plt.scatter(centroids[:, 0], centroids[:, 1], c='red', s=200, alpha=0.5)\n\n    return labels, plt.gca()\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component a dataset and record resultAlso generates scatter transformed dataParameters data (DataFrame): The dataset.n_comp (int): The number principal to calculateDefault is 2Returns: DataFrame: The transformed with principalAxes: The matplot Ax object containing scatter.Raises: ValueError If n_comp a positive.Requirements - numpy - pand mat. skdecom Example >>> data p([[14 251 227 8] columnsColumn' transformed_data, plot task_func\n    \"\"\"\n    if n_components < 1:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    pca = PCA(n_components=n_components)\n    pca.fit(data)\n\n    transformed_data = pca.transform(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n    plt.show()\n\n    return pd.DataFrame(transformed_data, columns=['PC1', 'PC2'])\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws seaborn pair plot of ir dataset using Arial fontThis function sets global font to A for better visualIt then generates pair plot from iris dataset where sub represents relationship two features, colored speciesThe plot includes title 'Iris Datas Pair Plot labels for each feature on axesParameters None Returns plFigure: A mat Figure object containing seaborn pair plot of ir datasetThe plot has 'Iris Datas Pair Plot as itsEach subplot's axes labeled corresponding feature names such 'sepal length (cmpetRequirements - mat.pyplot - pand seab sk.datas Example >>> fig task_func() type( <classmatfigure.Figure\n    \"\"\"\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target\n    df['species'] = df['species'].apply(lambda x: iris.target_names[x])\n    g = sns.pairplot(df, hue='species', palette='Set2', markers=['o', 's', 'D'], height=2.5)\n    plt.title('Iris Datas Pair Plot', fontname='Arial')\n    plt.show()\n    return g\n"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates plot random time series data for past 30 with reproduc controlled an optional seed parameterThe plot is styled with Arial font for betterParameters seed (int optional): Seed for random number to ensure reproduDefaults to 42Returns: matplotaxesAx: The Ax object containing a line plot of time dataThe plot will have 'Date' as x label 'ValueRandom Time Series Data titleRaises: ValueError If there issue generating the data or plot.Requirements - mat.pyplot - pand random dat Example >>> ax task_func()gettitleRandom Time Series DataxDateylValue\n    \"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n    data_size = 30\n    data = pd.DataFrame({\n        'Date': pd.date_range(start=datetime(2020, 1, 1), periods=data_size),\n        'Value': np.random.rand(data_size)\n    })\n\n    fig, ax = plt.subplots()\n    ax.plot(data['Date'], data['Value'])\n    ax.set_xlabel('Date', fontname='Arial')\n    ax.set_title('Random Time Series Data', fontname='Arial')\n\n    return ax\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw the correlation heat of Boston Housing dataset using Seaborn, with an option save specifiedParameters seed (int optional): Random reproducDefaults 42The font should in family sans and AReturns: mataxesAx: The Ax object containing heat plotRaises: ValueError If an generating or saving plot.Requirements - mat os - pand seab n Example >>> ax task_func() type( <classmataxes._axAx\n    \"\"\"\n    np.random.seed(seed)\n    boston = pd.read_csv(data_url)\n    corr = boston.corr()\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(corr, annot=True, cmap='coolwarm')\n    plt.title('Correlation Heatmap of Boston Housing Dataset')\n    plt.show()\n"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes a time series in the 'value Data into trend, seasonality residualParameters: df (DataFrame): The Data with columns 'group',datevaluefreq (str, optional): Frequency the time series data.Defaults to 'D' (daily).decom_model (str optional): Type of decom.Options are 'additive ormultiplDefaults to 'multiplicative'.Returns: tuple: A containing decom result (DecomposeResult object and matplot Axes objectRaises: ValueError If 'df' DataFrame lacks required columns, or contains invalid types.ValueError If 'fre a frequency string.ValueError If 'decom_model 'additive ormultipl'.Requirements - pand - mat.plot statsmodelstsa.seasonal Example >>> df pData({...\"group\": [\"A\"] * 14,...\"date\": pdtodat[\"2022\",20...\"2022-0105\",20...\"2022-0109\",20...\"2022-01-13\",2014\"]),...\"value\": [10 12 13 15 16 14 13 15 17 18 20 19],...}) >>> result, ax task_funcdf fre='D decom_modelmultipl') plshow # This will display plot with title 'Time Series Dec and y- labeledValue\n    \"\"\"\n    # Check if the DataFrame has the required columns\n    if not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"The DataFrame must contain 'group', 'date' and 'value' columns.\")\n\n    # Check if the 'date' column contains valid dates\n    if not pd.to_datetime(df['date'], errors='coerce').notnull().all():\n        raise ValueError(\"The 'date' column must contain valid dates.\")\n\n    # Check if the 'freq' argument is a valid frequency string\n    if freq not in ['D', 'M', 'A']:\n        raise ValueError(f\"The frequency '{freq}' is not valid. Options are 'D' (daily), 'M' (monthly), and 'A' (annually).\")\n\n    # Check if the 'decom_model' argument is a valid model\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(f\"The decomposition model '{decomposition_model}' is not valid. Options are 'additive' or 'multiplicative'.\")\n\n    # Decompose the time series\n    result = seasonal_decompose(df['value'], model=decomposition_model, freq=freq)\n\n    # Plot the decomposed time series\n    fig, ax = plt.subplots()\n    result.plot(ax=ax)\n    plt.title('Time Series Decomposition')\n    plt.ylabel('Value')\n    plt.show()\n\n    return result, ax\n"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Gener pand Series of random dates within specified date, including both start_ with an seed for reproducThe function creates series dates randomly between specified start inclusiveIt allows specifying seed for random to ensure reprodu results, making suitable simulations or tests requiring consistencyParameters - start_date (dat., optional): start of rangeDefaults January 2020- end_date (dat, optional): The end of rangeDefaults December 2020- seed (int, optional): Seed for random number to ensure reproduDefault is 42Returns: - pandSeries: A Series object containing random dates within specified, with each datdat objectThe series length matches number days in specified rangeRaises: - ValueError If 'startdate or dat. instance or later'.Note The start_date and inclusive, meaning both dates considered as potential values in generated seriesThe default seed value 42 ensuring results reprodu by default unless a different by userRequirements - pand - datetime random Example >>> dates task_funcseed=123) printhead # Print the first 5 dates from series 0 2020-27 1 20200517021407270516 dtype: dat64[ns\n    \"\"\"\n    # Set seed for random number generation\n    random_seed(seed)\n\n    # Generate a list of random dates within the specified range\n    dates = [start_date + timedelta(days=randint(0, (end_date - start_date).days)) for _ in range(end_date - start_date).days + 1)]\n\n    # Convert the list to a pandas Series\n    series = pd.Series(dates)\n\n    return series\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify a list by adding element '12', then conc a number CSV from a directory into DataThe number files conc is determined sum numbers in listParameters mylist (list): The input, which modified in placefile_dir (str, optional): The search CSVDefaults './data_files'.file_ext (str optional): The files concDefaults '.csv'.Returns: DataFrame: A pand Data concating the selected CSV filesRaises: TypeError If 'mylist list.FileNotError If no files specified.Requirements - pand - os - glob Example >>> createdummycsv() mylist [1 df taskfunc printhead A B 0 0 3 4 0 3 >>> tearDownd\n    \"\"\"\n    # Check if the list is empty\n    if not my_list:\n        raise TypeError(\"The list is empty\")\n\n    # Set the default file directory and file extension\n    if not file_dir:\n        file_dir = './data_files/'\n    if not file_ext:\n        file_ext = '.csv'\n\n    # Get all the CSV files in the directory\n    csv_files = glob.glob(file_dir + '*' + file_ext)\n\n    # If no files are specified, raise an error\n    if not csv_files:\n        raise FileNotFoundError(\"No files specified\")\n\n    # Concatenate all the CSV files into a single DataFrame\n    df = pd.concat([pd.read_csv(file) for file in csv_files])\n\n    # Add '12' to the end of the list\n    my_list.append('12')\n\n    return df\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list by app the number 12, then generates random integers based sum elements '', limited 'sizeIt measures time taken for this process and plots a hist generated random numbersThe size random numbers list determined sum numbers 'my_list', with an upper set 'sizeThe random integers are within 1 100 inclusiveParameters - mylist (list): The input containing numeric elements- size (int): Maximum limit generated list randomDefault is 100- seed (int): Seed value for random number for reproducDefault is 100Returns: - tuple: A containing time taken generate list (in, as a float and matplot Axes object for histThe histogram's x labeled 'Number', representing range random integers,F each integer in generated listRaises: - TypeError If 'mylist list.- ValueError If 'my_list contains elements numeric (int or).The histogram plots distribution the random numbers generated, with number range (1 on x countfrequencyRequirements - random - time - mat.plot Example >>> mylist [2 time_taken, ax taskfunc printtype # Example output <classfloat'>class >>> axgettitle Returns 'Histogram Random Numbers 'Hist\n    \"\"\"\n    start_time = time.time()\n\n    random_seed(seed)\n\n    my_list = [12] + my_list\n\n    random_numbers = [randint(1, 100) for _ in range(size)]\n\n    plt.hist(random_numbers, bins=range(1, 101), align='left', rwidth=0.8)\n    plt.xticks(range(1, 101))\n    plt.title('Histogram Random Numbers')\n    plt.xlabel('Number')\n    plt.show()\n\n    end_time = time.time()\n\n    time_taken = end_time - start_time\n\n    return time_taken, plt\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape first table a web extract data into Pand DataThis function scrap first table found on specified web URL extracts data into Data, where each in corresponds row (<tr>) from web, represents contained table data elements (<td rowThe DataFrame's columns named table's header row (<th elements if presentIf the table lacks headers the Data's columns remain unnamedParameters - url (str): webpage scrapeDefaults 'httpexample'.Returns: - pd.DataFrame: A Data scrap table, with rows corresponding table rows named after headers, if availableRaises: - ConnectionError If there issue connecting URL.- requests.HTTPError If HTTP to URL fails.- ValueError If no table data on page or content cannot parsed.Note Assumes the webpage contains at table and attempts parse first encounteredRequirements - pand requests bs4 Example >>> df task_func('httpsenListcountG_(nom print 0 0 Larg economies bynom...\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except (requests.RequestException, ValueError):\n        print(\"Error: Unable to connect to the URL\")\n        return\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table')\n\n    if not table:\n        print(\"Error: No table data on page\")\n        return\n\n    df = pd.read_html(str(table))[0]\n\n    return df\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw hist numeric columns in a Data and return the plotsEach hist represents the distribution values one numeric column, with column name as plot title, 'Value' x labelFParameters: - df (DataFrame): The Data containing data.Returns: - list: A Matplot Ax objects, each representing hist for a numeric columnRaises: - ValueError If the input is nonempty DataFrame or if there numeric columns Data.Requirements - pand - n mat. Example >>> df pData({'A nprandomnormal0, 100exp 100) axes task_funcdf) for ax...plt.show()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame\")\n\n    if not df.columns.intersection(['A', 'nprandomnormal', '0', '100', 'exp', '100']):\n        raise ValueError(\"DataFrame should contain numeric columns 'A', 'nprandomnormal', '0', '100', 'exp', '100'\")\n\n    plots = []\n    for col in df.columns:\n        if col in ['A', 'nprandomnormal', '0', '100', 'exp', '100']:\n            plt.figure(figsize=(10, 5))\n            plt.hist(df[col], bins=10, color='c', alpha=0.7)\n            plt.title(col)\n            plt.xlabel('Value')\n            plots.append(plt.gca())\n\n    return plots\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP range checks a port open on each IP.The function returns dictionary IP as keys boolean the port's status (True openParameters iprange (str): range scan, CID notationport (int): The number to check on each IP in rangeReturns: dict: A dictionary mapping IP their port status (True if open).Examples >>> result task_func('1920 80 isinstance dict True all(iskey str andvalue bool for True Requirements - socket - ipaddress.IPNetwork threadThread\n    \"\"\"\n    open_ports = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((str(ip), port))\n            sock.close()\n            if result == 0:\n                open_ports[str(ip)] = True\n            else:\n                open_ports[str(ip)] = False\n        except socket.gaierror:\n            continue\n    return open_ports\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Ext logging information such message type timestamp the message itself a log and stores data CSV formatThis utility ideal converting plain logs a more s tructured that easily analyzedThe log is the format 'TYPE: [TIM (YY HH - MES'.Parameters logfile (str): path that needs parsedReturns: str: The file path newly CSV which structured logRequirements - re - pand datetime Ra: ValueError If timestamp in any log entry invalid or if no valid log entries.Example >>> output_path taskfunc('serverlog print logdata.csv\n    \"\"\"\n    try:\n        with open(log_file, 'r') as f:\n            logs = f.readlines()\n    except FileNotFoundError:\n        print(f\"File {log_file} not found\")\n        return\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return\n\n    pattern = re.compile(r'^(\\w+):\\[(\\d{2}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}).*\\]\\s*(.*)$')\n    matches = []\n\n    for log in logs:\n        match = pattern.match(log)\n        if match:\n            message_type, timestamp, message = match.groups()\n            timestamp = datetime.strptime(timestamp, '%d-%m-%Y %H:%M:%S')\n            matches.append({'message_type': message_type, 'timestamp': timestamp, 'message': message})\n\n    if not matches:\n        print(\"No valid log entries found\")\n        return\n\n    df = pd.DataFrame(matches)\n    df.sort_values('timestamp', inplace=True)\n    df.reset_index(drop=True, inplace=True)\n\n    try:\n        df.to_csv('logdata.csv', index=False)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return\n\n    print(\"Log data has been successfully stored in logdata.csv\")\n\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes and visual distribution word lengths a textThe function generates hist subplot, facilitates understanding how word lengths vary within provided textParameters text (str): string from word lengths willrwidth (float, optional): Spec relative bar in the histDefaults 08. Returns: mataxesAx: An Ax containing hist word lengthsRequirements - re - matplot n Note If there words input text or all words filtered hist empty as no bins will createdExample >>> mat >>> ax task_func('Hello, this test sentence.' isinstanceax mataxAx True\n    \"\"\"\n    # Cleaning the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    words = text.split()\n\n    # Calculating word lengths\n    lengths = [len(word) for word in words]\n\n    # Creating histogram\n    fig, ax = plt.subplots()\n    ax.hist(lengths, rwidth=rwidth)\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Ext articles whose titles contain specific case- keywords (\"likewhat a DataFrame and analy frequency each word content of these, excluding punctParameters df (Data): Data containing columns 'TitleContent with article dataReturns: dict: A dictionary with keys as words and their corresponding frequency, excluding any punct marksRequirements - re - nltk string Raises: Value If the DataFrame empty or does the necessary columns 'TitleContent'.Example >>> pand data = {'Title ['What happening',Nothing special'Content ['Like what?Just normal text.']} dfData task_func {Like 1what': 1yousee\n    \"\"\"\n    # Check if the DataFrame is empty or does not contain the necessary columns\n    if df.empty or 'TitleContent' not in df.columns:\n        raise ValueError(\"The DataFrame does not contain the necessary columns\")\n\n    # Define the case-insensitive keyword\n    keyword = 'likewhat'\n\n    # Remove punctuation from the titles\n    df['TitleContent'] = df['TitleContent'].str.replace('['+punctuation+']', '')\n\n    # Tokenize the titles\n    tokens = nltk.word_tokenize(df['TitleContent'].str.lower())\n\n    # Count the frequency of each word\n    word_freq = nltk.FreqDist(tokens)\n\n    # Return the frequency of the keyword\n    return {keyword: word_freq[keyword]}\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares and transforms text data from a specified column in Data by removing stopwords numbers punct, subsequently applying a vectorization process convert text numeric format suitable analysisParameters dataframe (Data): A pand Data containing text data.text_column (str): The name from text will processedReturns: DataFrame: Returns Data each word (after pre as column and their count rowsRequirements - pand - re - sk Example >>> df pData({'text ['This test.',Python is cool!nltk and sk useful text analysis] result task_func 'text print.to(index=False analysis cool n python sk test text useful 0 1\n    \"\"\"\n    # Remove stopwords\n    dataframe['text'] = dataframe['text'].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n\n    # Vectorize text\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe['text'])\n\n    # Convert to DataFrame\n    df = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return df\n\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create GeoPandas Data for a list cities with randomly coordinates based specified rangesParameters dic (dict): Dictionary with 'LonLat keys each a tuple (min for coordinate rangeDefault: {'Lon': (-180 180Lat90)} cities (list List cityDefault: ['NewLondonBeTokS Returns GeoDataFrame: APand Data containing 'CityCo (Point objectsRaises: ValueError If 'Lon orLat keys missing dictionary or their tu.Requirements - numpy - geopandas shapely.ge Example >>> dic = {'Lon (-180Lat90)} gdf task_func\n    \"\"\"\n    lon_min, lon_max = dic.get('Lon', (-180, 180))\n    lat_min, lat_max = dic.get('Lat', (-90, 90))\n\n    if not lon_min < lon_max or not lat_min < lat_max:\n        raise ValueError(\"'Lon' or 'Lat' keys missing or their values are not in correct range\")\n\n    gdf = gpd.GeoDataFrame()\n\n    for city in cities:\n        lon = np.random.uniform(lon_min, lon_max)\n        lat = np.random.uniform(lat_min, lat_max)\n        point = Point(lon, lat)\n        gdf = gdf.append(gpd.GeoSeries([point]), ignore_index=True)\n\n    gdf.crs = {'init': 'epsg:4326'}\n\n    return gdf\n"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Gener a weather report specified cities at a given UTC datParameters: - utc_dat (dat): UTC for weather report generated, with tzinfo set UTC- cities (list str): Cities for which the weather report generated.Default: ['New',LondonBeTokS'] - weather_cond (list of str): Possible weather to choose for the report.Default: ['Sun',CloudRainSnowStorm - timez (dict): A mapping city names to their respectivezDefault provided for the default cities.- seed (int): The value for random number to ensure reproducDefault: 42 Returns - pandDataFrame: A Data containing weather report.Columns include - 'City': The name.- 'Local Time': The local weather report for city, formatted 'YY ZZZ (ZZZ timezone abbre).- 'Weather Condition': The weather in the city at given local.Raises: - ValueError If utcdat is a dat object or any other parameters in expected.Requirements - pand - pytz dat random Example >>> utc_time dat(2023 1 1 12 0 tzinfo=py.UTC report task_funcut) print City Local Time Weather Condition 0 New 2023- 07 EST Sunny 1 London 12 GMT Beijing 20 CST Rainy Tokyo 21 J Cloud Sydney 23 AEDT Cloud\n    \"\"\"\n    # Set the seed for reproducibility\n    set_seed(seed)\n\n    # Generate a random number for each city\n    rand_nums = [randint(1, 10) for _ in cities]\n\n    # Create a dataframe with the weather report\n    df = pd.DataFrame(\n        {\n            'City': cities,\n            'Local Time': [f'{dt.strftime(\"%Y-%m-%d %H:%M:%S\")} {tz}' for dt, tz in zip(utc_datetime, [timezones[city] for city in cities])],\n            'Weather Condition': [weather_conditions[rand_num] for rand_num in rand_nums]\n        }\n    )\n\n    return df\n"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Gener and draw a random sequence \"e number of stepsThe steps are either -1 1, and the sequence plotted as random walkReturns the descriptive statistics random walk and the plot random.The descriptive statistics include count, mean standard minimum 5th 25 median 75 95 and maximumParameters: elements (int): The number steps in random walkseed (int): The for random numberDefault is 0Returns: dict: A dictionary containing descriptive statistics random walkmatplotaxesAx: The Ax object with plotted random walk.Requirements - numpy - mat. pand Ra: Value If elements is positive.Example >>> stats, ax task_func1000) printstats {'count 1000.mean 1818std': 9516415405086212min': -505% 125 11050 2075 2695 31max 36}\n    \"\"\"\n    np.random.seed(seed)\n    random_walk = [0]\n    for _ in range(elements):\n        random_walk.append(random_walk[-1] + np.random.choice([-1, 1]))\n    stats = {\n        'count': len(random_walk),\n        'mean': np.mean(random_walk),\n        'std': np.std(random_walk),\n        'min': np.min(random_walk),\n        '25%': np.percentile(random_walk, 25),\n        '50%': np.percentile(random_walk, 50),\n        '75%': np.percentile(random_walk, 75),\n        'max': np.max(random_walk)\n    }\n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title('Random Walk')\n    plt.show()\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and keep a zip from a URL, extract its the specified return list extractedParameters: url (str): zipdestination_directory (str): The directory where contents zip extractedheaders (dict, optional): Custom to be included requestDefaults to {'acceptapplicationoct'}.Returns: list: A fil of extracted filesRequirements - requests - os - zipfile Example >>> extractedfiles = task_func(\"httpsexampledata.zip\", \"/pathdest\") printext ['file1csv\n    \"\"\"\n    response = requests.get(url, headers=headers)\n    with open(destination_directory + '/' + url.split('/')[-1], 'wb') as f:\n        f.write(response.content)\n\n    with zipfile.ZipFile(destination_directory + '/' + url.split('/')[-1], 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    extracted_files = os.listdir(destination_directory)\n\n    return extracted_files\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Gener random RGB and view.Parameters - seedint optional Random reproducDefault is 42- image_size (tuple optional): Size generatedheight channelsDefault is (100 3- range_low (int optional): Lower randomDefault is 0- range_high (int optional): Upper randomDefault is 255Returns: - ax (matplotaxesAx): Ax object of plot- image (numpynd): The generatedRaises: - ValueError If rangelow less range.Requirements - random - n open mat. Example >>> ax, image taskfunc()\n    \"\"\"\n    np.random.seed(seed)\n    image = np.random.randint(range_low, range_high, image_size)\n    plt.imshow(image)\n    plt.show()\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates MxN matrix from list L, normal based sound pressure level (SP a specified audio file generates spect fromParameters L (list): A numbers form matrixM (int): The number rows matrixN (int): The number columns matrixaudiofile (str): The path for SPL calculationReturns: numpynd: The normalized MxN matrixmatplotfigureFigure: The figure object for generated spectRaises: FileNotError If specified audio.Notes The spectrogram generated based amplitude normalized matrix, with sound pressure level (SP calculated audio fileThe SPL calculated using formula 20 * log10sqmeandata^ where 'data audio read fileThe spectrogram is displayed with log for frequency a linear, with SPL used adjust amplitude displayed in spectRequirements - numpy - os - soundfile libros mat Examples >>> matrix task_func([i for100)], 10 10 'audio # Requires 'audio exist >>>shape (10 >>> isinstance( npnd True\n    \"\"\"\n    # read audio file\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(\"The specified audio file does not exist.\")\n    data, sample_rate = sf.read(audio_file)\n\n    # calculate spectrogram\n    spectrogram = librosa.stft(data)\n    spectrogram = np.abs(spectrogram)\n\n    # calculate SPL\n    sp = librosa.feature.spectral_contrast(S=spectrogram, sr=sample_rate)\n    sp = np.mean(sp, axis=1)\n\n    # create matrix\n    matrix = np.zeros((M, N))\n    for i in range(M):\n        for j in range(N):\n            matrix[i][j] = sp[i*N+j]\n\n    # normalize matrix\n    matrix = matrix / np.max(matrix)\n\n    # plot spectrogram\n    fig, ax = plt.subplots()\n    librosa.display.specshow(librosa.amplitude_to_db(spectrogram, ref=np.max), y_axis='mel', fmax=8000, x_axis='time', ax=ax)\n    plt.show()\n\n    return matrix\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    Given a list tu extract numeric, compute basic statistics generate a hist with an overl probability density function (PDF).Parameters: original (list tu): Input list where each's second numericReturns: np: A n the extracted numericdict: Basic statistics for the array including mean minimum and.Axes: A matplot Ax object showing hist with overl PDF.The histogram is plotted with density set True, alpha as 06 bins set 'auto for automatic bin selectionRequirements - numpy - mat. sc.stats Example >>> original [('a 1 arr, stats, ax task_funcoriginal print [ 2 >>> printstats {mean 25std': 1118033988749895min 1, 4\n    \"\"\"\n    # Extract numeric\n    numeric = [float(i[1]) for i in original]\n\n    # Basic statistics\n    mean = np.mean(numeric)\n    std = np.std(numeric)\n    min_val = np.min(numeric)\n    max_val = np.max(numeric)\n\n    # Histogram\n    plt.hist(numeric, density=True, alpha=0.6, bins='auto')\n\n    # PDF\n    x = np.linspace(min_val, max_val, 100)\n    y = stats.norm.pdf(x, mean, std)\n    plt.plot(x, y, 'k', linewidth=2)\n\n    plt.show()\n\n    return {\"mean\": mean, \"std\": std, \"min\": min_val, \"max\": max_val}\n\n"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array from \"original list, normal the array draw original and normalized arraysThe function will plot original and normalized arrays using matParameters: original (list): The list with tu to be unz into a nReturns: nparray: A n for the original datanp.array: Normalized array.matplotaxesAx: Ax object with the plotted dataRequirements - numpy - mat. skpreprocessing Example >>> original [('a 1 arr, norm_arr ax task_func print [ 2 >>> printnorm018257419 0365148375477225673029674\n    \"\"\"\n    # Convert list to numpy array\n    nparray = np.array(original)\n\n    # Normalize the array\n    normalized_array = preprocessing.normalize(nparray)\n\n    # Plot the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(nparray, label='Original Array')\n    ax.plot(normalized_array, label='Normalized Array')\n    ax.legend()\n    plt.show()\n\n    return normalized_array\n\n"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    Given a dictionary \"data\", this function performs 1Adds key \"a with value 1 dictionary2Generates signal based values \"data\".3Runs a Fast FouFF on signal4Plots and returns the FFT of signalParameters data (dict): The input asReturns: tuple: A: - nd The FFT of signal- Axes: The plot FFT.Requirements - numpy - sc.fftpack mat Example >>> data {'key1 1 fft, ax task_func\n    \"\"\"\n    # Adds key \"a with value 1 to dictionary\n    data['a'] = 1\n\n    # Generates signal based on values in dictionary\n    signal = np.array([data[key] for key in sorted(data.keys())])\n\n    # Runs a Fast Fourier Transform on signal\n    fft = fftpack.fft(signal)\n\n    # Plots and returns the FFT of signal\n    plt.figure()\n    plt.plot(abs(fft))\n    plt.show()\n\n    return {'FFT': fft}\n\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates HTTP POST handler processing incoming dataThe data is expected in JSON with a key 'dataThe handler responds 200 success if data valid an otherwiseThe type the response can retrieved as 'content and lengthThere two types error: 'Content header is not applicationNo data key in requestReturns: function: A class handles HTTP POST and valid incoming dataRequirements - cgi - http.server json Notes If the 'content header ' indicating the client sent an unsupported format.This condition sends 400 Bad Request response client with messageContent header is not applicationIf the JSON object does 'data key leading 400 Bad response with the messageNo key in request\".If the request body does contain valid JSON resulting 400 Bad response with the messageInvalid\".Examples >>> handler task_func() isinstance type True issub httpserverBaseRequest\n    \"\"\"\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        data = json.loads(post_data)\n\n        if 'data' not in data:\n            self.send_response(400)\n            self.end_headers()\n            response = json.dumps(ERROR_RESPONSE)\n\n        else:\n            self.send_response(200)\n            self.end_headers()\n            response = json.dumps(SUCCESS_RESPONSE)\n\n        self.wfile.write(response.encode('utf-8'))\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates HTTP POST handler processes incoming email data sends an email.The email data must a JSON 'subject',messageto keysThe type the response can retrieved as 'content and lengthParameters smtpserver (str): SM addresssmtp_port (int): SMsmtp_username (str): SM.smtp_password (str): SM.Returns: function: A class handles HTTP POST and sends emails based provided dataRequirements - cgi - http.server smtpl email.mimetextMIMET json Ra JSONDec If email data valid JSON.This results 400 Bad Request responseValueError If 'subject',messageto keys missing email data leading 400 Bad responsesmtplibSMPAuthenticationError If there authentication issue.This communicated client with 535 Authentication Failed responseExamples >>> handler task_func('smtpexample 587user@password') isinstance type True issub httpserverBaseRequest\n    \"\"\"\n\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            data = json.loads(post_data)\n\n            if 'subject' not in data or 'message' not in data:\n                self.send_response(400)\n                self.end_headers()\n                return\n\n            try:\n                msg = MIMEText(data['message'])\n                msg['Subject'] = data['subject']\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                text = msg.as_string()\n                server.sendmail(smtp_username, smtp_username, text)\n                server.quit()\n\n                self.send_response(200)\n                self.end_headers()\n\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.end_headers()\n\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.end_headers()\n\n    return Handler\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count the words.txt within specified directory, export counts JSON return totalParameters: filename (str): The name output JSONdirectory (str): The where.txt locatedReturns: int: total number words. files Requirements - collections.Counter - os - json Example >>> with\"./testdirsingle_file\",\" print fread hello world hello >>> count task_func('single './') print( 3\n    \"\"\"\n    # Check if the file exists\n    if not os.path.isfile(os.path.join(directory, filename)):\n        return \"File not found\"\n\n    # Open and read the file\n    with open(os.path.join(directory, filename), 'r') as f:\n        text = f.read()\n\n    # Split the text into words\n    words = text.split()\n\n    # Count the words\n    word_counts = Counter(words)\n\n    # Export the counts to a JSON file\n    with open(os.path.join(directory, 'word_counts.json'), 'w') as f:\n        json.dump(dict(word_counts), f)\n\n    # Return the total number of words\n    return len(word_counts)\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes a pand Data by splitting lists in the 'Value into separate columns, calculates Pearson between these columns optionally visual correlation matrix using heatParameters df (Data): A pand Data with two: 'DateValueThe 'Date' column contains dates, and theValue lists numbersplot (bool): Optional; if True displays heat correlation matrix and returns itReturns: DataFrame: A pand Data containing correlation among lists in 'ValueAxes (optional A matplot Ax object containing heat plot, returned if 'plot TrueNote - This function use \"Correlation Heat as title heat plot Raises: If DataFrame input empty or have invalid 'Value', this ValueRequirements - pand - seab mat.plot Example >>> df pData([['2021-01', [8 10 12]027 11]] columnsDateValue corrdf task_func print[][ 1.0\n    \"\"\"\n    # Check if DataFrame is not empty\n    if df.empty:\n        return df\n\n    # Check if 'Value' column is not empty\n    if 'Value' not in df.columns:\n        return df\n\n    # Split 'Value' into separate columns\n    df[COLUMNS] = df['Value'].apply(pd.Series)\n    df.drop('Value', axis=1, inplace=True)\n\n    # Calculate Pearson correlation\n    df = df.corr()\n\n    # If plot is True, plot correlation matrix\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(df, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heat')\n        plt.show()\n\n    return df\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create report on students grades in different subjects then calculate and subjectParameters additionalfields (list string,): The additional list student subjects not duplicate with constants (default = []) Returns DataFrame: A pand Data columns being subjects each student grades average gradesThe DataFrame also includes average grade per subject.Note - function does take input parameters generates report based pred constants and additional fields from input (if- This function use 'Average as row name for average grade for subject- This function use 'Average Grade as column for average for student - Grade of each subject between toRequirements - pand random statistics.mean Example >>> randomseed0 report = task_func['Computer ScienceGe printcolumn Index(['PhMathChemBEnglishHistoryComputerGeAverage Grade' dobject\n    \"\"\"\n    # Generate random grades\n    grades = [random.randint(20, 100) for _ in range(len(STUDENTS))]\n\n    # Create DataFrame\n    df = pd.DataFrame(list(zip(STUDENTS, grades)), columns=['Student', 'Grade'])\n\n    # Add additional fields\n    for field in additional_fields:\n        df[field] = [random.randint(20, 100) for _ in range(len(df))]\n\n    # Calculate average grades\n    df['Average Grade'] = df.groupby('Student')['Grade'].transform('mean')\n\n    # Calculate average for each subject\n    df['Average'] = df.groupby(FIELDS)['Average Grade'].transform('mean')\n\n    return df\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates CSV containing simulated data for 100 people, including name height and weightIt also calculates and app average age, height and at end fileParameters filename (str): name CSV be createdReturns: str: The path of created CSVRequirements - os - csv random statistics.mean Example >>> randomseed0) >>> filename 'peoplereport path task_func osex True\n    \"\"\"\n    # Create a new file\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n\n        # Generate random data\n        for _ in range(PEOPLE_COUNT):\n            name = f'Person{random.randint(1, 100)}'\n            age = random.randint(18, 65)\n            height = round(random.uniform(150, 200), 2)\n            weight = round(random.uniform(50, 200), 2)\n\n            writer.writerow([name, age, height, weight])\n\n    # Calculate average age, height and weight\n    with open(filename, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n\n        ages = []\n        heights = []\n        weights = []\n\n        for row in reader:\n            ages.append(int(row[1]))\n            heights.append(float(row[2]))\n            weights.append(float(row[3]))\n\n    avg_age = mean(ages)\n    avg_height = mean(heights)\n    avg_weight = mean(weights)\n\n    print(f'Average age: {avg_age}')\n    print(f'Average height: {avg_height}')\n    print(f'Average weight: {avg_weight}')\n\n    return filename\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files in directory based first text that is not enclosed squareMove the files to sub named after this text.If no matching text file not movedParameters: directory (str): The path.Returns: tuple: - str: The directory path with organized files- dict: A dictionary where keys the created subdirect and values lists files moved themRequirements - re - os - shutil datetime Example >>> import tempfile_dirmkd() createtestdirectory {\"file1.\":subdir1[content]1\"} dir, files task_func files['sub20].startswfile3_') True\n    \"\"\"\n    sub_dirs = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            match = re.search(r'(\\w+)\\.', file)\n            if match:\n                sub_dir = match.group(1)\n                if sub_dir not in sub_dirs:\n                    sub_dirs[sub_dir] = []\n                sub_dirs[sub_dir].append(os.path.join(root, file))\n            else:\n                shutil.move(os.path.join(root, file), os.path.join(root, 'other', file))\n    for key, value in sub_dirs.items():\n        new_dir = os.path.join(directory, key)\n        if not os.path.exists(new_dir):\n            os.makedirs(new_dir)\n        for file in value:\n            shutil.move(file, new_dir)\n    return directory, sub_dirs\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of as sub at the sameParameters - file_list (list str): List name to runReturns: list: The exit codes subRequirements - subprocess - time threading Example >>> task_func[\"taskfunc_data/file1bat [0,\n    \"\"\"\n    def run_file(file):\n        print(f\"Running {file}\")\n        subprocess.run([\"python3\", file])\n        print(f\"{file} has finished\")\n\n    threads = []\n    for file in file_list:\n        t = threading.Thread(target=run_file, args=(file,))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all.bat a given, returning their file and exitParameters: directory_path (str): of search.batReturns: list tu: A where contains file its exitThe exit code is None if file could executedRequirements - subprocess - os - sys glob Example >>> task_func(\"pathdirectory [(\"file1bat 0\n    \"\"\"\n    all_files = glob.glob(directory_path + \"/*.bat\")\n    all_files_and_exit_codes = []\n    for file in all_files:\n        try:\n            process = subprocess.run([file], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)\n            all_files_and_exit_codes.append((file, process.returncode))\n        except subprocess.CalledProcessError as e:\n            all_files_and_exit_codes.append((file, e.returncode))\n    return all_files_and_exit_codes\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    This function takes a pand Data and a column name as input and generates two subpl in one mat figure: the first sub is a hist (with a kernel density estimate for numerical data), is box plot, representing distribution the values in specified columnParameters: df (DataFrame): Input Data with numerical or categ.col (str): The name column to be plotted.This column should exist in the DataFrame and contain numerical or categReturns: matplotfigure.Figure: A mat figure object containing the hist and box plot.Requirements: - pand - seaborn matplot.pyplot Ra: The input df must Data, not be empty, and must contain the specified column, if it is not, the function will raise Value.Example: >>> df pd.DataFrame({'value [1 2] fig task_funcdf 'value') type(fig <classmatfigure.Figure'> >>> pl.close >>> df =category ['AAAAA'] figcategory len.ax 2 pl\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame\")\n    if not isinstance(col, str):\n        raise ValueError(\"Input col must be a string\")\n    if col not in df.columns:\n        raise ValueError(f\"Column {col} not found in DataFrame\")\n    if df[col].dtypes in ['object', 'category']:\n        raise ValueError(f\"Column {col} is of type {df[col].dtypes}, it should be numerical\")\n\n    fig, axs = plt.subplots(2)\n\n    sns.histplot(df, x=col, ax=axs[0], kde=True)\n    sns.boxplot(df, x=col, ax=axs[1])\n\n    plt.tight_layout()\n\n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python as a process with pred argumentsBy default waits process.If wait is False the function NoneParameters: scriptpath (str): of Python runwait (bool): Whether to script completeDefault is True.*args: The arguments be scriptReturns: int: The return code subprocessIf 'wait' False returns None.Requirements - subprocess - os - sys time Raise: - ValueError If the script does.- subprocess.CalledProcessError: If the script raises.Example >>> tempfile script_pathNTemsuff='.py').name with..._ = f.write('import sys;sysexit >>> taskfunc(script_path True 'arg1 0 >>> # Should return None\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f'{script_path} does not exist')\n    if not script_path.endswith('.py'):\n        raise ValueError(f'{script_path} is not a Python script')\n\n    start_time = time.time()\n    process = subprocess.Popen([sys.executable, script_path] + list(args),\n                              stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                              universal_newlines=True)\n\n    while True:\n        if process.poll() is not None:\n            if process.returncode != 0:\n                raise subprocess.CalledProcessError(process.returncode,\n                                                   process.args,\n                                                   output=process.stdout,\n                                                   stderr=process.stderr)\n            break\n\n        if wait:\n            if time.time() - start_time > 60:  # 1 minute\n                process.kill()\n                break\n            time.sleep(1)\n\n    return process.returncode\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from an Excel (.x), calculate mean column, draw barThe bar chart will returned as a matplot figure objectParameters - file_location (str): path Excel- sheet_name (str): The to load dataReturns: - dict: A dictionary with mean of each column- matplot.figure.Figure: The figure object containing bar chartThe figure is titled 'Mean and Standard Dev', the X labeledColumnValuesRaises: - FileNotError If the Excel does at specified path.- ValueError If specified sheet does exist in work.Requirements - pand - n mat. os - openpyxl Example >>> file_path='testx createdummyexcel( >>> result, fig task_funcfileTestShe osremove figaxgettitle 'Mean and Standard Dev\n    \"\"\"\n    # Load data\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The specified file does not exist.\")\n    except ValueError:\n        raise ValueError(\"The specified sheet does not exist in the work.\")\n\n    # Calculate mean\n    mean_dict = df.mean()\n\n    # Draw bar chart\n    fig = plt.figure(figsize=(10, 5))\n    fig.suptitle('Mean and Standard Dev')\n    plt.xlabel('ColumnValues')\n\n    mean_dict.plot(kind='bar')\n    plt.show()\n\n    return mean_dict, fig\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return a bar chart of number activities performed on each day based provided listIf the activities are not datetime objects raise a Type.Parameters - activities (list datetime objects): A dat representing when each activity occurredReturns: - matplotaxesAx: Ax object representing bar chart, with the x labeled 'Day of',Number Activities title 'Weekly ActivityRequirements - datetime - collections mat.pyplot Ra Type If activities dat objects.Example >>> ax task_func([dat(2023 10 25 dat 26) type(ax <classmataxes._axAx\n    \"\"\"\n    if not all(isinstance(i, datetime) for i in activities):\n        raise TypeError(\"All elements in the list must be datetime objects\")\n\n    day_counts = defaultdict(int)\n    for activity in activities:\n        day_counts[activity.date()] += 1\n\n    days = sorted(day_counts.keys())\n    counts = [day_counts[day] for day in days]\n\n    fig, ax = plt.subplots()\n    ax.bar(days, counts)\n    ax.set_xlabel('Day of')\n    ax.set_title('Weekly Activity')\n\n    plt.tight_layout()\n    return ax\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves a random file from the source specified directoryParameters: - src_dir (str): The path of source from a file will randomly selected and moved.- dest_dir (str): The path of destination where file will moved- seed (int, Optional): The for random numberDefaults to 100.Returns: str: The name file moved.Format 'filename.extension' (e., 'file1txt').Requirements: - os - shutil - random Examples >>> import tempfile src_dirmkdtemp() destd open(ossrcfile1'),').close opensrc task_func(src dest seed=1 'file2\n    \"\"\"\n    if not os.path.exists(src_dir):\n        raise ValueError(f\"Source directory {src_dir} does not exist\")\n\n    if not os.path.exists(dest_dir):\n        raise ValueError(f\"Destination directory {dest_dir} does not exist\")\n\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    random.seed(seed)\n\n    files = os.listdir(src_dir)\n\n    if not files:\n        raise ValueError(f\"Source directory {src_dir} is empty\")\n\n    random_file = random.choice(files)\n\n    src_file = os.path.join(src_dir, random_file)\n    dest_file = os.path.join(dest_dir, random_file)\n\n    shutil.move(src_file, dest_file)\n\n    return random_file\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes in all Excel (.x in specified directory by prefix double backParameters - directory_ (str): containing ExcelDefault is './xlsx_files'.Returns: - int: The number Excel files processedRequirements - Libraries: re, openpyxl glob - Excel files in the specified directory.Example >>> tempfile_dirmkd() workbook Work sheet workactive >>>append['This \"test string.']) worksavetemp + '/testx taskfunc( 1\n    \"\"\"\n    # Get all Excel files in the directory\n    excel_files = glob.glob(directory_path + '*.xlsx')\n\n    # Loop over all Excel files\n    for excel_file in excel_files:\n        # Load the workbook\n        workbook = load_workbook(excel_file)\n\n        # Loop over all worksheets in the workbook\n        for worksheet in workbook.worksheets:\n            # Loop over all cells in the worksheet\n            for row in worksheet.iter_rows():\n                for cell in row:\n                    # If the cell contains a double quote\n                    if '\"' in str(cell.value):\n                        # Replace the double quote with single quote\n                        worksheet.cell(row=cell.row, column=cell.column_letter).value = str(cell.value).replace('\"', \"'\")\n\n        # Save the workbook\n        workbook.save(excel_file)\n\n    return len(excel_files)\n\n"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram sine and cos with given frequency return plotParameters frequency (float): waveMust be a nonnegative float.samplesize (int, Optional): A positive integer den number taken for wave.Default is 10000Returns: matplotfigureFigure: The figure object containing plot.matplotaxesAx: The axes object of plotRequirements - numpy for data generation mat.plot for math for mathematical constants Ra Value If frequency negative.- ValueError If sample size nonpositive.Example >>> fig, ax task_func1 2500 type(fig <classmatfigure.Figure typeaxaxes._ax\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be a nonnegative float.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be a positive integer.\")\n\n    t = np.linspace(0, 1, sample_size, endpoint=False)\n    wave = np.sin(2 * np.pi * frequency * t) + np.cos(2 * np.pi * frequency * t)\n\n    fig, ax = plt.subplots()\n    ax.plot(t, wave)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title('Sine and Cos wave with frequency = ' + str(frequency))\n    plt.show()\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes a Flask-Mail instance for sending emails using generated Flask application with specified app_nameParameters app (): Flask Returns tuple: A Flask-Mail instance and app's mail configurationsNote - details email server are retrieved environment- If the variables do exist use defaults: - 'MAIL_SER': 'localhostMAPORT 25 -USET False (boUSER None Requirements flask - os flask_mail Example >>> mail, configs task_func(\"test\") print.__getattribute__app\").name test\n    \"\"\"\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False)\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', None)\n    mail = Mail(app)\n    return mail, app.config\n"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calcul the mean, median data from a specific column in an fileParameters: - excel_filepath (str): directory containing Excel- file_name (str): The name Excel.- column_name (str): The name to analyzeReturns: - dict: A dictionary with the mean, median standard.Raises: - FileNotError If the Excel does at specified path.- ValueError If the specified column found Excel file.Requirements: - pand - n os Example >>> data_dir, filename./data/', 'excelfile1x' createdummyfile >>> stats task_func 'Sales') osremovedata + file osrmd print {'mean 200.med 200std_dev 7071067811865476}\n    \"\"\"\n    try:\n        df = pd.read_excel(os.path.join(excel_file_path, file_name))\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The Excel file at the specified path does not exist.\")\n    except ValueError:\n        raise ValueError(\"The specified column found in the Excel file does not exist.\")\n\n    mean = df[column_name].mean()\n    median = df[column_name].median()\n    std_dev = df[column_name].std()\n\n    return {'mean': mean, 'median': median, 'std_dev': std_dev}\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains a simple neural on given input data target labelsThe function: - Spl data a training (75%) a test25%), assuming input dimension always 2- Constructs Sequ model with one dense hidden layer and a s activation function- Compiles the model using binary crossent loss and SG optimizer with a specified learning- Fits the model to training data (without verb output), also evaluating it on test set as validation- Plots the model's training and validation loss over epoch and returns plot's Ax object for further customizationParameters X (npnd): Input features for model, where each set has an input dimension 2Y (npndarray): Target labels for the model.Returns: - Sequ: The trained Ker Sequ model.- matplot.axesAx: The Ax object of the plot.The plot visualizes model's training validation loss over epoch, with x epoch and lossThe legend distinguishes between 'TrainTest lossesNotes - The input dimension X must always 2- The Axes title 'Model loss x labelEpochL Requirements - keras.layersDense - keroptimizersSGDmodelsSequ sklearnmodelselectiontraintestsplit mat Examples >>> X[ 0]])],1]] model, ax task_func isinstancemodel Sequ True isax plAx\n    \"\"\"\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    model = Sequential()\n    model.add(Dense(1, input_dim=2, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=SGD(), metrics=['accuracy'])\n\n    history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=10, verbose=0)\n\n    plt.figure(figsize=(10, 5))\n    plt.plot(history.history['loss'], label='Train loss')\n    plt.plot(history.history['val_loss'], label='Test loss')\n    plt.title('Model loss x label')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    return model, plt.gca()\n"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide the input data training and test sets (70 training, 30), create Ker Sequ model with one hidden layer using a s activation function compile model with binary crossent loss and an SG optim specifying a learning, fit training in a nonverb mode plot ROC curve for model on test, including A score in plot legendParameters: X (npndarray): The input data.The input dimension always 2Y (npndarray): The target data.Returns: - keras.modelsSequential: The trained Ker model.- matplot.axes._axAx: The mat Ax object for the Precision-Recall curve plotNotes: - The title axes should 'ROC curve' - x label is 'False positive rate y Requirements tensflow.keras - skmetroc_cur skauc -modelselectiontraintest_split mat Example >>> X np[ 00 0]]) Y],1]] model, ax task_func isinstancemodel ker.modelsSequ True\n    \"\"\"\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    model = keras.models.Sequential()\n    model.add(keras.layers.Dense(1, input_dim=2, activation='sigmoid'))\n\n    model.compile(loss='binary_crossentropy', optimizer='SG', metrics=['accuracy'])\n\n    model.fit(X_train, Y_train, epochs=10, verbose=0)\n\n    Y_pred = model.predict(X_test)\n\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure()\n    lw = 2\n    plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads an RGB image, applies K-me clust segment 'n_cl regions saves each separateThe function returns numpy arrays original and segment imagesParameters - image_path (str): RGBDefault is 'image.The image is expected in RGB as a 3 array (height x channels with channels in order RGB.- n_clusters (int): The for K-meDefault is 3A minimum 1 cluster is allowed, although clust with single will simply return original image as segment- random_seed (int): The for in K-me clustDefault is 42Returns: - tuple: A two nThe first array represents original RGB image segment, with each's color replaced cent cluster it belongsRaises: - FileNotError If image at specified.- ValueError If 'n_clusters a positive.Requirements - opencv: For reading the image and converting BGR RGB- numpy: For array manip.- os: For checking existence the image.- sklearncluster: For applying Kme clust.Example >>> createdummyimage('image originalimgarray, segmentimg taskfunc 3 osremove print.shape # Example output (10, 10 3se for n_cl > (10 Note - This function assumes input in RGB- The segmented image array will have the shape original but pixel colors replaced their corresponding cluster cent colors, effectively segment regions based color similarity- Clust with a single cluster is allowed and will return original image as both segment images, since all pixels will assigned\n    \"\"\"\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image not found at {image_path}\")\n\n    if n_clusters < 1:\n        raise ValueError(\"Number of clusters should be a positive integer\")\n\n    image = cv2.imread(image_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    # Reshape the image to 2D array\n    image = image.reshape((-1, 3))\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(image)\n\n    # Get the cluster labels\n    labels = kmeans.labels_\n\n    # Reshape the labels to the original image shape\n    labels = labels.reshape(image.shape[:-1])\n\n    # Replace the colors in the image with the centroids of the clusters\n    segmented_image = np.zeros_like(image)\n    for cluster in range(n_clusters):\n        segmented_image[labels == cluster] = kmeans.cluster_centers_[cluster]\n\n    return image, segmented_image\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calcul product of a matrix 'P a 3 tens 'T', flatt result, apply KMe clust flattened data visualize itParameters P (numpy.nd): The input matrixT (numpy.nd): The input tens with shape (3, 3).n_clusters (int): The for KMe clustDefault is 3random_state (int): The random for KMe clustDefault is 0n_init (int): Number time the k-me algorithm will run with different cent seedsDefault is 10Returns: cluster_result (numpynd): The KMe clustax (matplotaxesAx): The visualization of KMe clust, with the title ' Cl Visual'.Requirements - numpy - sk mat Example >>> P =[6 2 71 1 88 7 19 6 42]] Trandom(3 3 clusterresult, ax taskfuncP T n_cl=3 randomstate0 ninit10 type(cl <classnndarray'> typeaxaxes._axAx\n    \"\"\"\n    # Calcul product of a matrix 'P a 3 tens 'T'\n    result = np.dot(P, T)\n\n    # Flatten result\n    result_flattened = result.flatten()\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    kmeans.fit(result_flattened)\n\n    # Visualize the result\n    fig, ax = plt.subplots()\n    ax.scatter(kmeans.cluster_centers_, kmeans.labels_)\n    ax.set_title('Clusters')\n\n    return kmeans.cluster_centers_, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calcul Vor diagram for a number points in 2 and plot.Note this function will raise errors input invalid, for wrong type or shapeJittering is applied prior plottingParameters: - points (npnd): A n nd shape (n_points 2 with the coordinates points- seed (int): Random for reproducDefaults to 0Returns: tuplevor, ax): A containing: - v (Vonoi): A Vor object representing Vor diagram of points- ax (Axes): The axes plotted Vor diagram.Requirements - numpy - sc mat. Example >>> points[ 00]] vor, ax task_func type(vor <classscspatialqhullVonoi'> typeaxmataxes._axAx\n    \"\"\"\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Input must be a numpy array\")\n    if points.shape[1] != 2:\n        raise ValueError(\"Input array must have 2 columns\")\n\n    vor = Voronoi(points)\n\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    plt.show()\n\n    return vor, ax\n\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files with a specified extension from a source aThis function searches files in source that match given extensionIf a file with the same already in the destination it is not moved.Parameters: - src_dir (str): The source path.- dest_dir (str): The destination path.- ext (str): The file extension to search (without the leading dot).Returns: - list: A the full paths of files that were successfully moved.If a file was not moved because it already exists in destination it not included this listRaises: FileNotFoundError if either the source destination directory does Requirements - os - shutil - glob Examples >>> test_src_dir = './test'destexttxt osm( exist_ok= >>> os exist movedfiles task_functest test test lenmoved > 0 # Check any were True 'testfile. in [osbaspath) path moved # Assuming testfile exists in testsrc True oslistdest # Verify files were, and no dupl exist in the destination ['file\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"Source directory {src_dir} does not exist.\")\n\n    # Check if destination directory exists\n    if not os.path.isdir(dest_dir):\n        raise FileNotFoundError(f\"Destination directory {dest_dir} does not exist.\")\n\n    # Get all files with the specified extension\n    files = glob.glob(f\"{src_dir}/*.{ext}\")\n\n    moved_files = []\n\n    for file in files:\n        # Get the base name of the file\n        base_name = os.path.basename(file)\n\n        # Get the destination file path\n        dest_file = os.path.join(dest_dir, base_name)\n\n        # Check if the file already exists in the destination\n        if not os.path.exists(dest_file):\n            # Move the file\n            shutil.move(file, dest_file)\n\n            # Add the moved file to the list\n            moved_files.append(dest_file)\n\n    return moved_files\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load a JSON string dictionary, normal dictionary by doubling numerical values create Pand Data from dictionaryThis function processes JSON string by converting dictionary, normalizes data by doubling numerical values constructs Pand Data from thisNote the function designed handle simple flat diction with values that either single numerical lists numerical strings that can interpreted numbersIt doubles values numerical data types within dictionary including those within lists those in strings (which extracted using regex), but the function does process nested dictionFinally it returns the DataFrame with numerical stored as floats and other types left as-, or an empty Data if input JSON string empty or does valid structures for Data conversionParameters jsonstrstr):.Returns: DataFrame: A pand Data created from the dictionary.Requirements - pand - json re Example >>> json_stra [ 4.9 \"5\"} df task_func type( <classp.coreframeData print a b 0 2 9.8 10 1 4 9 6\n    \"\"\"\n    try:\n        data = json.loads(json_str)\n        df = pd.json_normalize(data)\n        df = df.apply(lambda x: x.str.replace(r'\\D', '') if x.dtype == 'object' else x*2 if x.dtype == 'float64' else x)\n        return df\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return pd.DataFrame()\n\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes given bash and CPU and script's processThis function checks script path exists, then it executes in sub uses psutil monitor script process for CPUNote - CPU usage a cumulative script process's demand over execution period an across cores- Memory usage reported sum RSS memory incrementsThe function aggreg these metrics until script completes or specified timeoutIt handles cases process becomes a zombie or is not found ensures subprocess terminated if runs beyond timeoutParameters scriptpathstr): bashPath must existtimeout (int, optional): Maximum ( the function scriptDefaults 10 secondsReturns: dict: A: - 'CPU Usage': The accumulated in percentage.- 'Memory Usage': The accumulated in bytes.Requirements - subprocess - psutil time os Examples >>> resources taskfunc('/pathscript {CPU Usage 52Memory 2048}\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script {script_path} not found\")\n\n    script_name = os.path.basename(script_path)\n\n    def execute_script():\n        process = subprocess.Popen([\"/bin/bash\", script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        output, error = process.communicate()\n        return process.returncode, output, error\n\n    start_time = time.time()\n    cpu_usage = memory_usage = 0\n    while True:\n        if time.time() - start_time > timeout:\n            break\n\n        return_code, output, error = execute_script()\n\n        if return_code != 0:\n            raise subprocess.CalledProcessError(return_code, output, error)\n\n        cpu_usage = psutil.cpu_percent(interval=1)\n        memory_usage = psutil.virtual_memory().total_bytes\n\n        time.sleep(1)\n\n    return {'CPU Usage': cpu_usage, 'Memory Usage': memory_usage}\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create DataFrame a given number rows (N 3: \"x with random,category categories from a CATEOR listEach category guaranteed appear at if N is greater categories, otherwise randomly sampled without replacement from CATEFinally draw scatter plot \"x vs,\" colored \"category\".Parameters - N (int, optional): Number rows for DataDefaults 100.- CATE (list, optional): List categories.Defaults ['A- seed (int, optional): Random for reproducDefaults 42Returns: tuple: A: - DataFrame: The generated Data- Axes: The Ax object of scatter plot.Requirements - numpy - pand mat. Example >>> df, ax task_func()head x y category 0239562385098 C 1144895851137 D489453316922985650169493 E242055556801 A >>> type(ax <classmataxes._axAx\n    \"\"\"\n    np.random.seed(seed)\n    df = pd.DataFrame()\n    df['x'] = np.random.randint(0, 100, N)\n    df['category'] = np.random.choice(CATEGORIES, N, replace=False)\n    ax = df.plot(kind='scatter', x='x', y='category', color='category', figsize=(10, 6))\n    return df, ax\n\n\ndf, ax = task_func()\nax.set_title(\"Scatter plot of 'x' vs 'category'\")\nplt.show()\n"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate a time series from a given epoch start time to end with a specified step and trend.The time series is plotted with timest on the x- ('Time') values onValueThe values are generated from a normal distribution, and a linear trend is added based provided trend valueParameters: - start_time (int): The start epoch time in milliseconds- end_time (int): The end epoch time in millisecondsMust be greater start_time.- step (int): The step in milliseconds between each data.Must be agreater than 0- trend (float): The trend value to be added time series.It acts multiplier for the index, adding a linear trend to randomly generated values- seed (int, optional): Seed for reproduc.Default is 42.Returns: - ax (matplotpy.Axes): The Ax object of generated plot, with the x- labeled 'Time' andValueRequirements: - datetime. - pand - n Example >>> ax task_func(0 10000 100, 0.001) type(ax) <classmataxes._ax.Ax'>get_xticklabels() [Text(-20.0 0, '1970- 100008000000'),(0.002002400460068008 ''),120)]\n    \"\"\"\n    np.random.seed(seed)\n    time_range = pd.date_range(start=pd.Timestamp(start_time, unit='ms'), end=pd.Timestamp(end_time, unit='ms'), freq='S')\n    time_series = pd.Series(np.random.normal(0, 1, len(time_range)), index=time_range)\n    time_series = time_series.cumsum().apply(lambda x: x + trend * x)\n    time_series.plot()\n    return time_series.plot()\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Gener sales data five products from a given epoch time up the current timeThis function checks input validity, then for day between the date given epoch time to the date current time generates random sales data for each of 5 productsParameters: - epoch_mill (int): Start epoch time inMust be before current system time.- random_seed (int): Seed for reproduc of sales dataDefaults to 0- products (list of str): Product list to choose.Must contain 5 unique strings.Defaults to ['Product1','Returns: - pd.DataFrame: A Data containing sales with columns 'Product' (string),Datedat andSalesintegerSales quantity is randomly sampled range [10 50].Requirements - pand - datetime random Example >>> sales_data task_func1236472051807, random_seed42) type(s <classpcoreframeData saleshead() Product Date Sales 0 Product4 20090308 112731.807 50 1 Product 17 21 113 27 25\n    \"\"\"\n\n    # Checking input validity\n    if not isinstance(epoch_milliseconds, int):\n        raise ValueError(\"Epoch time must be an integer\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"Random seed must be an integer\")\n    if not isinstance(products, list) or len(products) != 5:\n        raise ValueError(\"Products must be a list of 5 unique strings\")\n\n    # Setting the random seed\n    random.seed(random_seed)\n\n    # Generating a list of dates between the epoch time and the current time\n    dates = pd.date_range(start=pd.to_datetime(epoch_milliseconds, unit='ms'), end=datetime.now())\n\n    # Generating a dataframe with random sales data\n    df = pd.DataFrame(\n        {\n            \"Product\": random.choices(products, k=len(dates)),\n            \"Date\": dates,\n            \"Sales\": [random.randint(10, 50) for _ in range(len(dates))],\n        }\n    )\n\n    return df\n\n"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings an Excel file, including handling empty JSON arraysThis function takes JSON string converts Excel file with specified filenameIf the JSON string represents empty array function creates Excel file no data rowsParameters - json_strstr bytes by): JSON content as, bytes- filename (str): The name Excel created- sheet_name (str optional): The in ExcelDefault is \"sheet1Returns: - str: The absolute created ExcelRaises: - ValueError If `jsonstr valid JSON.- TypeError If `jsonstr bytes, byt.- Exception For other general errors related file writing.Requirements - xlwt: For writing to Excel files- xlrd - os: For file path operations.- pand: For data manipulation.Example >>> jsonstr '[NameJohn 30Jane 28 True if taskfunc 'data.x').enddata else # True True osremove\n    \"\"\"\n    try:\n        data = json.loads(json_str)\n        if isinstance(data, list):\n            if len(data) == 0:\n                return \"Error: JSON string represents empty array\"\n            else:\n                df = pd.DataFrame(data)\n                df.to_excel(filename, sheet_name=sheet_name, index=False)\n                return f\"{filename} created\"\n        else:\n            return \"Error: JSON string is not valid\"\n    except json.JSONDecodeError:\n        return \"Error: JSON string is not valid\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates graph daily activity d for specified number days in past using randomly data for activities.This function randomly generates acitivity d from 0 120 for activity from [\"RunningSwCyYWeight Training\"Parameters days_past (int optional): The for to generate graphDefaults 7 daysMust be in pastrandom_seed (int, optional): Seed for number to ensure reproduDefaults 0Returns: Tuple containing - ax (matplot.Ax): Data used- df (pd.Data): Seaborn lineplot with date on x duration activity as hueRequirements - datetime. - dattim pand random seab Example >>> ax, df task_func7 random_seed42 type(ax <classmataxes._axAx A sample row from returned Data might Date Activity Duration Y Running 45\n    \"\"\"\n    # Generate random data\n    random.seed(random_seed)\n    dates = [datetime.now() - timedelta(days=x) for x in range(days_in_past)]\n    activities = [random.randint(0, 120) for _ in range(days_in_past)]\n\n    # Create dataframe\n    df = pd.DataFrame({\n        \"Date\": dates,\n        \"Activity\": activities\n    })\n\n    # Create lineplot\n    ax = sns.lineplot(x=\"Date\", y=\"Activity\", hue=\"Activity\", data=df)\n\n    return ax, df\n\n"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create DataFrame of stock prices for specified number days in past using random dataParameters - days_past (int optional): for we want stock dataMust positiveDefaults 7- stock_names (list of str, optional): The stock which we dataMust not emptyDefaults [\"AAPGOOGLMSAMZFB\"- random_seed (int optional): number to ensure reproduDefaults 0Returns: DataFrame: A pand Data containing random stock prices for specified numberPr floats in [001).Requirements - datetime pand n Example >>> df task_func5 randomseed42 type( <classpcoreframeData printhead AAP GOOGL MS AMZ FB 2024-0330 37454012 95071431 73199394 59865848 15601864\n    \"\"\"\n    np.random.seed(random_seed)\n    dates = [(datetime(2024, 3, 1) - pd.DateOffset(days=x)).strftime(\"%Y-%m-%d\") for x in range(days_in_past)]\n    prices = {\n        stock: [np.random.normal(loc=100, scale=10) for _ in range(days_in_past)]\n        for stock in stock_names\n    }\n    df = pd.DataFrame(prices, index=dates)\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV create difference reportThis function compares CSV line provides detailed reportIt represents each difference with line number a status indicator content thatParameters file1 (str): first CSVfilepath2 (str): The second CSVdelim (str, optional): Del character used CSV filesDefault is ','.quotechar (str, optional): Quote character used CSV filesDefault is '\"'.Returns: DataFrame: A pand Data with differences.The DataFrame contains columns - 'Line Number file where difference occurs- 'Status': A character indicating type difference: - ': No change (line is the in files- '-': Line present the first file but- '+': Line present the second file but- 'Content': The actual text content line from either fileRaises: FileNotError If either files cannot.ValueError If either files empty.Exception For other IO related errors.Requirements - pand: For data manipulation analysis- csv: For reading CSV.- difflib: For performing difference operation- os Example >>> createdummytestfiles df taskfuncfile1csv osremove oshead Line Number Status Content 0 ('nameage - ('Alice30 +31 ('Bob25\n    \"\"\"\n    try:\n        df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar)\n        df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar)\n\n        diff = pd.merge(df1, df2, indicator=True)\n\n        diff['Line Number'] = diff['_merge'].apply(lambda x: '+' if x == 'left_only' else '-' if x == 'right_only' else 'Content' if x == 'both' else 'No Change')\n        diff['Status'] = diff['_merge'].apply(lambda x: '+' if x == 'left_only' else '-' if x == 'right_only' else 'Content' if x == 'both' else 'No Change')\n        diff['Content'] = diff.apply(lambda row: ndiff(row['file1_column'], row['file2_column']), axis=1)\n\n        return diff[['Line Number', 'Status', 'Content']]\n\n    except FileNotFoundError:\n        print(\"One or both of the files do not exist.\")\n    except ValueError:\n        print(\"One or both of the files are empty.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list employee data and calculate statistics a given columnIf the data list empty the sum will 0 and mean, min and values NaThe function also visual data with pie, using Age column as labelsParameters column (str): analyzeValid values are 'Age',Sal andExperienceIf invalid the function raise Key.data (list of lists): The employee data, where each represents [Age Salary Experience].Returns: tuple: A containing: - dict dictionary with 'sum',meanmin of column- Axes object: The pie chart visualizing column data.Requirements - pand - n mat. Example >>> data [[25 50000 2],30 75 535 100 7 125 10 15 12]] stats, ax task_func('Sal data {'sum 500000mean 100.min 5 15} type(ax <classmataxes._axAx\n    \"\"\"\n    if column not in ['Age', 'Sal', 'Experience']:\n        raise KeyError(\"Invalid column\")\n\n    if not data:\n        return {'sum': 0, 'mean': 0, 'min': float('inf'), 'values': []}, None\n\n    column_data = [row[0] if column == 'Age' else row[1] if column == 'Sal' else row[2] for row in data]\n\n    stats = {\n        'sum': sum(column_data),\n        'mean': np.mean(column_data),\n        'min': min(column_data),\n        'values': column_data\n    }\n\n    fig, ax = plt.subplots()\n    ax.pie(stats['values'], labels=stats['values'], autopct='%1.1f%%')\n    ax.axis('equal')\n\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list fitness data, calculate sum, the mean minimum of a certain column draw chartAdditionally validate numeric values for steps, calories burned distance walked nonParameters column (str): analyze from dataThe allowed columns: 'Date',StepCalories BurnDistance Walk'.data (list list): A where inner list dat object representing date followed numeric steps calories burned distance walked in that orderEach numeric must nonMust not emptyReturns: tuple: A: - dict dictionary with sum, mean min of column- matplot.axesAx: The Ax object of the plotted line chartThe line chart will have Date on its x the column value on title Line Chart of (column).Requirements - pand n mat. Ra Key If specified column valid.- ValueError If data list or if any numeric for steps, calories burned distance walked negative.Example >>> data [[dat(2022 1 5000 200, 3....[dat(2022 1 2 5500 220 4.0],...[dat(2022 1 3 6000 240 4.]] >>> stats, ax taskfunc('Step data) type(ax <classmataxes._axAx printstats {sum 16500mean 5500.min 5000 6000\n    \"\"\"\n    if column not in data[0].keys():\n        raise KeyError(\"Specified column is not valid.\")\n    if not all(isinstance(i, (int, float)) for i in data):\n        raise ValueError(\"Data list or if any numeric for steps, calories burned distance walked negative.\")\n\n    column_data = [i[data[0].index(column)] for i in data]\n\n    sum_data = sum(column_data)\n    mean_data = np.mean(column_data)\n    min_data = min(column_data)\n\n    fig, ax = plt.subplots()\n    ax.plot(data, column_data)\n    ax.set_title(column)\n    ax.set_xlabel('Date')\n    plt.show()\n\n    return {'sum': sum_data, 'mean': mean_data, 'min': min_data}, ax\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read a list diction from a JSON file, calculate mean median for key (ign nonn or missing convert Pand DataParameters - inputfile (str optional): input JSON nameDefaults 'data.'.The file should contain dictionIf a key in dictionary treated Na for that recordNonn values ignored for the calculation meanIf all values for key nonn or missing statistics NaReturns: - df (pd.Data): A Data indexed and sorted variable names (keys from input, containing columns 'meanmedRequirements - numpy - collections json pand Example >>> df task_func('data1json a mean median b mean median c\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    df = pd.DataFrame(data)\n\n    mean_median_dict = defaultdict(list)\n\n    for key, value in data.items():\n        if pd.isnull(value).all():\n            mean_median_dict[key] = 'Na'\n        else:\n            mean_median_dict[key] = [np.mean(value), np.median(value)]\n\n    df = pd.DataFrame(mean_median_dict)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows from CSV using c library, convert dupl pand Data then plot using matParameters - file_path (str): CSVReturns: - dict: A dictionary with duplicate rows as keys and their counts- Axes: A matplot Ax object with the bar chart of duplicate rowsRequirements - csv - collections.Counter - pand mat. Example >>> dupl, ax task_func(\"sampledata. {('Alice25New' 330London type(ax <classmataxes._axAx Note Ensure the CSV in proper and has.Other file formats will raise a Value.\n    \"\"\"\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        data = list(reader)\n\n    # Identify duplicate rows\n    duplicates = Counter(tuple(x) for x in data)\n\n    # Convert to pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Plot\n    ax = df.groupby(tuple(df.columns)).size().plot(kind='bar', ax=ax)\n\n    return {'duplicates': dict(duplicates), 'ax': ax}\n"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Ident duplicate entries Data and record age distribution for duplicate namesThis function takes Data with 'nameage columnsIf age provided floats they will roundedAge must not negative otherwise function raises ValueThen the function identifies duplicate names records age distributionIt returns a Counter object age distribution and a hist plot showing distribution ages for duplicate names, with age on x countBins are calculated based minimum and ages found among dupl, adjusted by.5 to ensure integer ages fall squarely binsParameters df: p.DataFrame - A Data with columns 'nameage'.Must not emptyIf empty the function raises Value.Returns: Counter: Age distribution among duplicate namespltAxes or None: Hist plot displaying age distribution, or None if there duplRequirements - pand - n collectionsCounter seab mat. Ra Value If Data empty or if age negative.Example >>> df pData({'name ['AliceBobAliceage [25 26 25 dupl_counter, ax taskfunc Counter({25 2 type(ax <classmataxes._axAx\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if 'nameage' not in df.columns:\n        raise ValueError(\"DataFrame does not contain 'nameage' column\")\n    if df['age'].isnull().any():\n        raise ValueError(\"Age is null\")\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n\n    df['age'] = df['age'].apply(lambda x: round(x) if isinstance(x, float) else x)\n\n    duplicates = df[df.duplicated(subset='name')]\n\n    if not duplicates.empty:\n        counter = Counter(duplicates['age'])\n\n        fig, ax = plt.subplots()\n        sns.histplot(duplicates['age'], bins=np.arange(min(duplicates['age']), max(duplicates['age'])+1, 0.5), ax=ax)\n        plt.title('Age distribution for duplicate names')\n        plt.xlabel('Age')\n        plt.ylabel('Count')\n\n        return counter, ax\n\n    return None, None\n"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Ident and count duplicate values in Data's 'value columnThis function also plots a hist for all values in 'value and overl a normal curve onParameters df (pd.DataFrame): Data containing a numeric 'value columnIf empty the function empty Counter and an plotbins (int, optional): Number bins for histDefaults to 4.Returns: tuple: A containing: - Counter: A Counter object with count each duplicate value- Axes: A matplot.axesAx object that represents plot the hist with 'value column dataIf applicable a normal distribution curve fitted data overl.The histogram's bars green with 60 opacity normal distribution curve black a linew 2The plot is titledDistribution\", with \"Value as x label andFRequirements - collections.Counter - numpy - sc.statsnorm mat Example >>> df pData({'value [ 2 3 2 4 2 1 1 3] counter, ax task_func ax <Ax: title={centerDist'}, xlabelValue',F'> >>> counter Counter({2 6 1 5 3 5})\n    \"\"\"\n    # Ident and count duplicate values\n    counter = Counter(df['value'])\n\n    # Plot hist\n    fig, ax = plt.subplots()\n    ax.hist(df['value'], bins=bins, alpha=0.6, color='g')\n\n    # Fit normal distribution curve\n    mu, sigma = norm.fit(df['value'])\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, sigma)\n    ax.plot(x, p, 'k', linewidth=2)\n\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n\n    return counter, ax\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Gener a pand Data with random values based lists 'a', and plot it as barList 'a' sets the DataFrame's row indices, while the length list determines number columns using pred names from 'COL = ['A' list.Parameters: - a (list): A used define number rows Data- b (list): Another list used define number columns DataThe actual column names pred.Returns: - matplotaxesAx: The Ax object of plotted bar chartRequirements: - numpy - pand mat Data Structure: Uses pand DataFrame to structure the.Example >>> ax task_func([1], ['A'\n    \"\"\"\n    df = pd.DataFrame(np.random.randint(0,10,size=(a[0], b[0])), columns=COLUMNS)\n    df.plot(kind='bar', ax=ax)\n    plt.show()\n    return ax\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    This function plots a bar chart of monthly data values for a single year, with 'month' on x andvalueParameters: data (str): The data string in the format 'yymmvalue'.Returns: Axes object: A matplot.axes.Ax object representing the plot, with the title formatted as 'Monthly Data for yyy', x label as 'Month', and labelValue'.Requirements: - pand - datetime - mat.pyplot Example: >>> data '2022-01100,2002200,150,300,250350,400450500550600650' ax task_func(data)\n    \"\"\"\n    # Split the data string into a list of data points\n    data_list = data.split(',')\n\n    # Create a list to hold the month and value\n    month_values = []\n\n    # Loop through the data points\n    for point in data_list:\n        # Split the point into year, month, and value\n        year, month, value = point.split('-')\n\n        # Convert the month to a datetime object\n        month_date = datetime(int(year), int(month), 1)\n\n        # Add the month and value to the list\n        month_values.append((month_date.strftime('%b'), int(value)))\n\n    # Sort the list by month\n    month_values.sort(key=lambda x: x[0])\n\n    # Create a list to hold the months\n    months = [x[0] for x in month_values]\n\n    # Create a list to hold the values\n    values = [x[1] for x in month_values]\n\n    # Create a bar chart\n    plt.bar(months, values)\n\n    # Set the title and labels\n    plt.title(f'Monthly Data for {year}')\n    plt.xlabel('Month')\n    plt.ylabel('Value')\n\n    # Show the plot\n    plt.show()\n\n    # Return the Axes object\n    return plt\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    This function draws hist to visualize frequency distribution numeric values provided in a string format, with 'Value on x,F andHist of Values as titleParameters: data (str): The string in format 'value-value-value-...Returns: ax (matplotaxes._ax.Ax): The Ax object of created histRequirements: - pand - n mat. Notes The hist uses bins calculated as `npardata.min(),+2 - 05`.Example: >>> data = '1-2 ax task_funcdata\n    \"\"\"\n    data = data.split(' ')\n    data = [int(i) for i in data]\n    plt.hist(data, bins=np.arange(min(data), max(data)+2, 2))\n    plt.title('Hist of Values')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    return plt.gca()\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine of specified and adjusts a curve using curve_fit from scoptim to the dataParameters - array_lengthint): Length sDefaults 100- noise_level (float): Level added sDefaults 02 Returns: - Ax object: A plot showing noisy s and adjusted curveRequirements - numpy sc.optim mat Example >>> ax task_func100 02\n    \"\"\"\n    x = np.linspace(0, 10, array_length)\n    y = np.sin(x) + noise_level * np.random.randn(array_length)\n\n    popt, _ = curve_fit(lambda t, a, b, c: a * np.sin(b * t) + c, (x, y))\n\n    plt.plot(x, y, label='Noisy Sine')\n    plt.plot(x, popt[0] * np.sin(popt[1] * x) + popt[2], label='Adjusted Curve')\n    plt.legend()\n    plt.show()\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads a CSV, normal the text in it to ASCII counts words returns 10 most along frequencies as mat bar plot and a list tuParameters: csvfile (str): path CSVReturns: tuple: A containing matplotaxesAx object for the bar plot and a list the 10 most words with their frequenciesRaises: FileNotFoundError If the CSV cannot at specified path.IOError If there reading the file.Requirements - unicodedata - csv collections mat.plot Example >>> createdummycsv_filed. ax, mostcommonwords task_func('d osremove type(ax <classmataxes._axAx'> typemostlist'> Note The function assumes CSV contains text data and file properly\n    \"\"\"\n    with open(csv_file, 'r') as csv_file:\n        reader = csv.reader(csv_file)\n        text = [row[0] for row in reader]\n\n    text = ' '.join(text)\n    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode()\n    words = text.split()\n\n    counter = Counter(words)\n    most_common = counter.most_common(10)\n\n    labels, values = zip(*most_common)\n\n    fig, ax = plt.subplots()\n    ax.bar(labels, values)\n    ax.set_title('10 most common words')\n    ax.set_xlabel('words')\n    ax.set_ylabel('frequency')\n\n    plt.tight_layout()\n    plt.show()\n\n    return ax, most_common\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list normally distributed random and plot their hist and probability density function (PDFParameters: - size (int): random numbers generateDefault is 1000.Requirements - numpy - sc.stats mat. Returns matfigure.Figure: A figure object containing hist and PDF plot.Example >>> mat >>> fig task_funcsize500 isinstance matfigure.Figure # Check output a mat figure object True len.ax[lines == 1 # Ensure there one line plot on axes for the PDF True lenpat > 10 histogram bars (pat) present True\n    \"\"\"\n    # Generate random numbers\n    data = np.random.normal(size=size)\n\n    # Plot histogram\n    plt.hist(data, bins=10, density=True)\n    plt.title('Histogram of Random Numbers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n\n    # Plot PDF\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, np.mean(data), np.std(data))\n    plt.plot(x, p, 'k', linewidth=2)\n\n    plt.show()\n\n    return plt.gcf()\n\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates an RSA public and and saves private in file after encrypt a password using AES encryptionReturns the public and the filename encrypted private, along encryption details for testingThe name output file a in the format of \"private_key_<number>. where < the hex representation 8 randomly bytesReturns: rsa.Public: The RSAstr: The filename where encrypted privatebytes: The encryption password, for testing decbytes: The encryption non, for testing decRequirements - rsa - os - Crypto.CipherA CryptoRandomget_randombytes base.b64en base54dec Examples >>> pub_key, filename password non = taskfunc() isinstancepub r.Public) True is str) bytes\n    \"\"\"\n    # Generate a private key\n    private_key = rsa.PrivateKey.generate(1024)\n\n    # Save the private key\n    with open(\"private_key.pem\", \"wb\") as f:\n        f.write(private_key.save_pkcs1())\n\n    # Generate a password\n    password = get_random_bytes(16)\n\n    # Encrypt the password\n    cipher = AES.new(password, AES.MODE_EAX)\n    nonce = cipher.nonce\n    ciphertext, tag = cipher.encrypt_and_digest()\n\n    # Save the encrypted password\n    with open(\"encrypted_password.bin\", \"wb\") as f:\n        f.write(b64encode(nonce + ciphertext + tag))\n\n    # Return the public key\n    return rsa.PublicKey.from_key(private_key)\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates RSA public and, encrypt a file using AES encryption then encrypt AES with the public RSAThe encrypted file and the encrypted AES key saved separate new files.This method demonstrates a hybrid encryption approach.Parameters: file_path (str): The to be encryptedReturns: rsa.Public: The RSA.str: The filename of encrypted file.str: The filename of file containing encrypted AESRequirements: - rsa - os - cryptography.hazmat.backendsdefault_back cryptographyprimcipCipher -primcal -modes - base.b64en Examples >>> pub_key, encryptedfile encryptedkey_file = task_func('myfile.txt') isinstancepub r.Public) True encrypted.endsw'.encrypted') True encryptedkey\n    \"\"\"\n    # Generate RSA keys\n    public_key, private_key = rsa.newkeys(512)\n\n    # Read the file\n    with open(file_path, 'rb') as f:\n        data = f.read()\n\n    # Encrypt the data with AES\n    cipher = Cipher(algorithms.AES(key=os.urandom(16)), modes.CBC())\n    encryptor = cipher.encryptor()\n    padded_data = padding.OAEP(\n        mgf=padding.MGF1(algorithm=hashes.SHA256()),\n        algorithm=hashes.SHA256(),\n        label=None\n    ).pad(data)\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt the AES key with RSA\n    encrypted_aes_key = rsa.encrypt(public_key, encrypted_data)\n\n    # Save the encrypted data and the encrypted AES key\n    with open('encryptedfile.enc', 'wb') as f:\n        f.write(b64encode(encrypted_data))\n\n    with open('encryptedkey_file.enc', 'wb') as f:\n        f.write(b64encode(encrypted_aes_key))\n\n    return public_key, 'encryptedfile.enc', 'encryptedkey_file.enc'\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Ext the text and href attributes all anchor tags from a given's HTML content, this data in pand Data along time of dataParameters url (str): from fetch HTML contentReturns: pandData: A Data with columns 'texthrefftimeEach row corresponds an anchor tag in HTML, with 'text andhref containing text and the hyper reference of,'fetch_time contains timestamp when data in formatYY'.Raises: ValueError If provided URL invalid empty.URLError: If there an issue network connectivity or the server.Requirements - urllrequest - pyquery datime pand urerror Example >>> df task_func('httpsenwikibMain Note The function requires internet connectivity fetch HTML content\n    \"\"\"\n\n    try:\n        response = urllib.request.urlopen(url)\n        html_content = response.read().decode()\n\n        if not html_content:\n            raise ValueError(\"URL is invalid or empty\")\n\n        doc = pq(html_content)\n\n        data = []\n\n        for a in doc('a'):\n            href = a.attrib.get('href')\n            text = a.text\n\n            data.append({\n                'text': text,\n                'href': href,\n                'fetch_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            })\n\n        df = pd.DataFrame(data)\n\n        return df\n\n    except urllib.error.URLError as e:\n        print(f\"Error: {e.reason}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number hours and save in CSV with coloumns 'Time',TemperatureHumPressParameters - hours (int): for sensor to generated- output_dir (str, optional): The output file path Returns - hours (int Number generate data.Requirements - datetime - os random csv Example >>> file_path taskfunc(1 # Gener data for 1 hour >>> ospathex Check the was actually True is str Val return type a True 'sensordata. in file # Ensure filename correct True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    filename = f'{output_dir}/sensor_data_{datetime.now().strftime(\"%Y%m%d%H%M%S\")}.csv'\n\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Time\", \"Temperature\", \"Humidity\", \"Pressure\"])\n\n        for _ in range(hours):\n            time = datetime.now()\n            temperature = randint(0, 40)\n            humidity = randint(0, 100)\n            pressure = randint(950, 1050)\n\n            writer.writerow([time, temperature, humidity, pressure])\n\n    return True\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data different vehicle over specified number hours, saves the data CSV with coloumns 'Time',Car',BusTruckB', plots in line chart with 'Time on xVeh CountParameters: - hours (int): Number generate data.- output_dir (str, optional): The output file path Returns - tuple: Path CSV and the mat axes object of line plotRequirements - pand - os - csv mat. random dat Example >>> mat file_path, ax taskfunc2 # Gener data for 2 hours >>> isinstancefile str) True 'trafficdata in file True isax mataxesAx\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, 'traffic_data_{}.csv'.format(datetime.now().strftime('%Y%m%d%H%M%S')))\n\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Car', 'Bus', 'Truck', 'Bike'])\n\n        for i in range(hours * 60):\n            time = datetime.now().strftime('%H:%M:%S')\n            car = randint(0, 100)\n            bus = randint(0, 100)\n            truck = randint(0, 100)\n            bike = randint(0, 100)\n\n            writer.writerow([time, car, bus, truck, bike])\n\n    df = pd.read_csv(file_path)\n    df.plot(x='Time', y=['Car', 'Bus', 'Truck', 'Bike'], kind='line')\n\n    plt.savefig(os.path.join(output_dir, 'traffic_plot.png'))\n    plt.close()\n\n    return file_path, plt.gca()\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Gener weather data the specified number hours, save it in with colomns 'TimeCondition and back up file backup directoryParameters - hours (int): for weather data to generated- output_dir (str, optional): The output file path Returns - str: path of generated CSVRequirements - datetime - os random csv shutil Example >>> 'weather_data in taskfunc(24 True10\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_name = f'weather_data_{datetime.now().strftime(\"%Y%m%d%H%M%S\")}.csv'\n    file_path = os.path.join(output_dir, file_name)\n\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        for i in range(hours):\n            time_condition = WEATHER_CONDITIONS[randint(0, 4)]\n            writer.writerow([datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"), time_condition])\n\n    # Backup the file\n    backup_file_path = f'{file_path}.bak'\n    shutil.copy2(file_path, backup_file_path)\n\n    return file_path\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Gener and visualize a Pand Data of results football for multiple teams 'Team with random goals 'Go penalties CostPen are converted fines according penalty costsParameters goalsint): maximum matchpenalties (int): The maximum number a team receive matchReturns: pd.DataFrame: A match resultslist: A list containing two seaborn plot objectsAx for goals penalty costsRequirements - pand seab mat. random Example >>> df, plots task_func5 3\n    \"\"\"\n    # Generate random goals and penalties\n    goals = [randint(0, 10) for _ in range(5)]\n    penalties = [randint(0, 10) for _ in range(5)]\n\n    # Calculate total penalty cost\n    total_penalty_cost = sum(penalties)\n\n    # Calculate total goals\n    total_goals = sum(goals)\n\n    # Create a DataFrame\n    df = pd.DataFrame({\n        'Team': TEAMS,\n        'Goals': goals,\n        'Penalties': penalties,\n        'Total Penalty Cost': total_penalty_cost,\n        'Total Goals': total_goals\n    })\n\n    # Create a bar plot for goals\n    fig, ax1 = plt.subplots()\n    ax1.bar(df['Team'], df['Goals'], color='b', label='Goals')\n    ax1.set_xlabel('Teams')\n    ax1.set_ylabel('Goals', color='b')\n    ax1.tick_params(axis='y', color='b')\n\n    # Create a bar plot for penalties\n    ax2 = ax1.twinx()\n    ax2.bar(df['Team'], df['Penalties'], color='r', label='Penalties')\n    ax2.set_ylabel('Penalties', color='r')\n    ax2.tick_params(axis='y', color='r')\n\n    # Create a line plot for total penalty cost\n    sns.lineplot(x='Team', y='Total Penalty Cost', data=df, color='g', label='Total Penalty Cost')\n\n    plt.show()\n\n    return df\n"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create Pand DataFrame random integer between 9 for a number rowsCount the nonzero values each visualize this information using bar plotParameters rows (int): DataReturns: tuple: A following - DataFrame: generated Data with random integer- Axes: The matplot Ax object containing bar plotRequirements - numpy - pand mat. Example >>> df, ax task_func10 printaxtitle.get_text # Should return 'NonZero Value Count Non\n    \"\"\"\n    # Generate random integer\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, 5)), columns=COLUMNS)\n\n    # Count nonzero values\n    non_zero_count = df.loc[:, df.ne(0).any(axis=0)].count()\n\n    # Visualize\n    ax = non_zero_count.plot(kind='bar')\n    plt.title('NonZero Value Count')\n    plt.xlabel('Columns')\n    plt.ylabel('Count')\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Gener Pand Data that displays grades a randomly group students multiple coursesCalcul average grade in course, the students with passing (>= 60 visualize this information using bar plot with title 'Course-wise Average and Passing CountParameters numstud (int): sampleReturns: Tuple[pd.DataFrame plAx]: A generated Data and bar plot's Ax objectRequirements - pand n mat. random typing Example >>> df, ax task_func50gettitle 'Course-wise Average and Passing Grade Count\n    \"\"\"\n    # Generate random grades\n    grades = [np.random.randint(0, 101) for _ in range(num_students)]\n    # Calculate average grade\n    average_grade = np.mean(grades)\n    # Calculate passing grade count\n    passing_count = len([grade for grade in grades if grade >= 60])\n    # Create DataFrame\n    df = pd.DataFrame({'Grades': grades, 'Average': [average_grade]*num_students, 'Passing': [passing_count]*num_students})\n    # Create bar plot\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', ax=ax, title='Course-wise Average and Passing Grade Count')\n    plt.show()\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit an exponential decay function to the indices in array where first column matches target valueParameters: - array (npnd): A n where first column will searched the target value- target_value (float or int): The in first column to filter the data for fittingReturns: - tuple: Containing the optimized parameters fitting (popt) and mat Axes object.Requirements - numpy - sc.optim mat.py Example >>> array[1],1 32]] target 1 params, ax task_func target lenparams 3\n    \"\"\"\n    def exp_decay(x, a, b):\n        return a * np.exp(-b * x)\n\n    popt, _ = optimize.curve_fit(exp_decay, array[:, 0], array[:, 1], p0=[1, 1])\n\n    plt.plot(array[:, 0], array[:, 1], 'o', label='Original data')\n    plt.plot(array[:, 0], exp_decay(array[:, 0], *popt), '-', label='Fitted curve')\n    plt.title('Fit of exponential decay function to data')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.legend()\n    plt.show()\n\n    return popt\n\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from collection text documents using NonNeg MatrixNMThis function first preprocess input texts by removing nonalphexcluding converting all lower removing stopIt then vector processed texts using TF-IDF applies NMF extract specified number topicsEach topic represented list its most significant words based NMF component weightsParameters - texts (list str): The input documents from topics- numtop (int): The topics extractReturns: - list list str: A where words representing topicRequirements - re - nltk sk.decomfeatureextraction.text Example >>> texts...\"Data science involves.\",...\"Machine provides systems the learn.\",...\"Python programming used data.\"...] >>> topics = taskfunctexts 2topics [['data',science ['systemprovides Note exact output may TF-IDF vectorization and NMF initialization\n    \"\"\"\n\n    # Preprocess texts\n    processed_texts = [ALPHANUMERIC.sub(' ', text.lower()).split() for text in texts]\n\n    # Remove stopwords\n    processed_texts = [[word for word in text if word not in STOPWORDS] for text in processed_texts]\n\n    # Vectorize texts\n    vectorizer = TfidfVectorizer(max_df=0.5, min_df=2, stop_words='english')\n    X = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(X)\n\n    # Get topics\n    topics = []\n    for topic_idx, topic in enumerate(nmf.components_):\n        topic_words = vectorizer.get_feature_names()[topic.argsort()[:-10:-1]]\n        topics.append(topic_words)\n\n    return topics\n"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Gener word vectors list texts using gensim Word2V model and nltkcorstopwordsThe texts first cleaned by removing nonalph except space lowerc stop words areParameters texts (list): Astopwords (list optional): A be removedIf not provided nltk's stopwords willReturns: Word2Vec: A trained Word modelRequirements - re - nltk gensim Example >>> texts [\"HelloMachine Learning is great\",Python my model task_func vectorwv['python\n    \"\"\"\n    # Remove non-alphanumeric characters and lowercase\n    texts = [ALPHANUMERIC.sub(' ', text.lower()) for text in texts]\n\n    # Remove stopwords\n    if stopwords is not None:\n        texts = [text for text in texts if not any(word in text for word in stopwords)]\n\n    # Train Word2Vec model\n    word2vec = Word2Vec(texts, min_count=1)\n\n    return word2vec\n"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes JSON files in a directoryThe function reads each JSON file alphabet into Data and inserts a \"Source column that specifies filenameThe processed files then moved \"process subThe path may not exist initiallyParameters - path (str): directory containing JSON filesReturns: - df (pandas.Data): A Data from all processed filesRequirements - pand - json os - shutil Example >>> osmk('data withajsonf.write('[{\"a 1...36 >>> with open('data/b.jsonw as f...f.write('[{\"a 5, 6 7')...36 >>> df task_func('data print a b source 0 5 6 b.json 1 7 b 0 1 2 a 3 4 a >>> shutil.rmtree\n    \"\"\"\n    df = pd.DataFrame()\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n                df_temp = pd.DataFrame(data)\n                df_temp['Source'] = filename\n                df = pd.concat([df, df_temp])\n    return df\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create and delete CSV \"taskfuncdata/Outputtxt sensor for temperature data generated randomly written append mode the file deleted useReturns: - Returns path CSV \"taskfuncdata/Outputtxt before deletionRequirements - os - csv random datime Example >>> taskfunc()\n    \"\"\"\n    # Create a new CSV file\n    with open('taskfuncdata/Outputtxt', 'a+') as f:\n        writer = csv.writer(f)\n        writer.writerow([random.randint(1, 100), random.randint(1, 100), random.randint(1, 100)])\n\n    # Delete the file\n    os.remove('taskfuncdata/Outputtxt')\n\n    return 'taskfuncdata/Outputtxt'\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data a given URL and save the scrapParameters - url (str): scrape dataReturns: - CSV_FILEPATH (str): The of where scrap savedRequirements - urll - bs4 csv os Example >>> task_func('httpexample') 'scraped_data\n    \"\"\"\n    # Open the url\n    with urllib.request.urlopen(url) as response:\n        html = response.read()\n\n    # Parse the html\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find the data\n    data = []\n    for element in soup.find_all('div'):\n        if element.get('class') == ['class1', 'class2']:\n            data.append([element.text])\n\n    # Save the data to a csv file\n    with open(CSV_FILE_PATH, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train a linear regression and return model score of test setThe provided DataFrame training, where target_column used target in the modelBefore training the provided data is split a training test set using test_size randomstate parametersParameters data (Data): input trainingtargetcolumn (str): The predictrandomstateint): The seed train-test splitDefaults 0 test_size (float): fraction test setDefaults 02 Returns: float: The model scoreRaises: ValueError If data DataFrame.ValueError If data empty.ValueError If target_columnt not of data.ValueError If data contains values numeric.ValueError If randomstate.ValueError If testsize between.Requirements - pand sk.model_selectiontraintestsplit sklinearLinReg n Example >>> rngdefaultrseed42 data pData({...'x1 rngrandom),...'x2 rngrandom),...'y': rngrandom100...}) >>> result task_funcdata 'y randomstate2 testsize3 -025486317198996633 data pData({...'x1 rngrandom500),...}) >>> data['y1 * + result taskfunc randomstate9 testsize 1\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data should be a pandas DataFrame\")\n\n    if not isinstance(target_column, str):\n        raise ValueError(\"Target column should be a string\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"Random state should be an integer\")\n\n    if not isinstance(test_size, float):\n        raise ValueError(\"Test size should be a float\")\n\n    if test_size > 1 or test_size < 0:\n        raise ValueError(\"Test size should be between 0 and 1\")\n\n    if data.empty:\n        raise ValueError(\"Data should not be empty\")\n\n    if not data[target_column].nunique() > 1:\n        raise ValueError(\"Target column should have at least two unique values\")\n\n    if data.select_dtypes(include=[np.number]).empty:\n        raise ValueError(\"Data should contain only numeric values\")\n\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return model.score(X_test, y_test)\n"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates random DataFrame with 100 records.Each record consists an ID (ranging 1 100), Namerandomly selected from provided lists of Latin and other names Date ofrandom generated dates between the specified years Email (constructed using the name, year of provided email domainImproperly encoded Latin characters in names are corrected during the processParameters: - start_year (int): The starting for range of birth years.Defaults to 1980.- end_year (int): The ending year for the range of birth years.Defaults to 2000.- email_domain (str): The domain to be used email addressesDefaults to 'example.'.- latin_names (list of str): A Latin to be used the generation.Defaults to: latin_names=['Sopet\u00f3n',M\u00e9ndezG\u00f3P\u00e9Mu - other_names (list str): A other names to be used in generation.Defaults to: other_names=['Smith',JohnsonWilliamsBrownJones - rng_seed (int): The for r.Returns: - DataFrame: A pand Data containing the generated userThe DataFrame has columns: 'IDNameDate of Birth andEmailRequirements: - pand - n codecs re - dat Examples >>> df task_func(rng_seed=1) print ID Name Date of Birth Email 0 1 Brown 1992-0910 brown1992@example 1 Smith 19960213 sm1996 2 Jones 19861019 j G\u00f3 20001211 G 19840824..............95 96 Johnson 1990-0917 john1990@example 96 Brown 19921014 brown Mu\u00f1 19980504 mu Mu 19820101 Jones 19900328 j <BLANKLINE [100 rows x 4 >>> df task_funcstart_year=0 end1200 email_domain='testat', rng_seed3) print ID Name Date of Birth Email 0 1 Sopet\u00f3n 0952-0901 00 sop\u00f3n952@test 1 Brown 08751010 brown875test Sop 06050815605 G\u00f3 03371123337 G 06410427..............95 96 Brown 0044-05-17 0000 brown44@test.at 96 97 Williams 05300121 wills530test 97 Johnson 10051215 johnson100 M\u00e9 11340719 m\u00e911 Johnson 06960822696 <BLANKLINE [100 rows x 4\n    \"\"\"\n    np.random.seed(rng_seed)\n    names = np.random.choice(latin_names, 100)\n    other_names = np.random.choice(other_names, 100)\n    birth_dates = np.random.randint(start_year, end_year, 100).astype(str) + '-' + np.random.choice(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'], 2) + '-' + np.random.choice(['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31'], 2)\n    emails = [name.lower() + str(year) + '@' + email_domain for name, year in zip(names, birth_dates.astype(int))]\n    df = pd.DataFrame({'ID': np.arange(1, 101), 'Name': names, 'Date of Birth': birth_dates, 'Email': emails})\n    return df\n"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read a list diction from a JSON file, calculate mean median for key writeParameters - input_file (str): input JSON name- output_ (str): The CSV nameReturns: - dict: A where key field from input JSON and another dictionary mean median of thatRequirements - numpy - collections json c Example >>> task_func('datastats\n    \"\"\"\n    # Read JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Initialize a dictionary to store the mean and median\n    result = defaultdict(dict)\n\n    # Iterate over each key-value pair in the JSON data\n    for key, value in data.items():\n        # Calculate mean\n        mean = np.mean(value)\n        # Calculate median\n        median = np.median(value)\n        # Store the mean and median in the result dictionary\n        result[key]['mean'] = mean\n        result[key]['median'] = median\n\n    # Write to CSV file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.DictWriter(f, fieldnames=['key', 'mean', 'median'])\n        writer.writeheader()\n        for k, v in result.items():\n            writer.writerow({'key': k, 'mean': v['mean'], 'median': v['median']})\n\n    return result\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from a dictionary by checking if the exists, if it has content, then copies targetParameters: - kwargs (dict): A dictionary where keys full file paths and values the file content- target_dir (str, optional): The files copied toDefaults to 'non_none_files'.Returns: - copied_files (list): A full file paths that were.Requirements - os - pathlib.Path - shutil Example >>> files {'/pathfile1':Hello', None 'World' task_func(files) >>> files4Another', 'Example, targetdir=\"another_directory\n    \"\"\"\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content is not None:\n            file_name = Path(file_path).name\n            target_path = os.path.join(target_dir, file_name)\n            with open(target_path, 'w') as f:\n                f.write(content)\n            copied_files.append(target_path)\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes CSV directory based specified pattern and creates new altered names while content, you've laid solid with your initial testsParameters - directory (str): path containing CSV- pattern (str, optional): A regular pattern the fil interestReturns: - new_files (list): A strings, where filename CSV created functionRequirements - re - os - pathlib csv Example >>> task_func(\"/mdatatestdata ['Shan.csvannon\n    \"\"\"\n\n    new_files = []\n\n    for file in Path(directory).rglob('*.csv'):\n        if re.match(pattern, file.name):\n            new_name = re.sub(pattern, r'\\1_new.csv', file.name)\n            new_files.append(new_name)\n\n            with open(file, 'r') as csv_file:\n                csv_reader = csv.reader(csv_file)\n\n                with open(new_name, 'w') as new_csv_file:\n                    csv_writer = csv.writer(new_csv_file)\n\n                    for row in csv_reader:\n                        csv_writer.writerow(row)\n\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip a whose a certain pattern by splitting filename the last \"-\" occurs and using prefix part directory extractParameters - directorystr): zip- pattern (str): Re pattern to zip filesReturns: - list: A directories where files extractedRequirements - os - re zipfile Example >>> taskfunc('/tmpmydata ('back202308270101 [])\n    \"\"\"\n    result = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                zip_path = os.path.join(root, file)\n                with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                    zip_ref.extractall(root)\n                result.append(root)\n    return result\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Arch all files that match pattern and then delete originalParameters - patternstr): match filesReturns: - archivefilestr): The pathRequirements - subprocess - os glob Example >>> taskfunc('*.txt Note function archive path\n    \"\"\"\n    # Archive all files that match the pattern\n    files = glob.glob(pattern)\n    for file in files:\n        os.rename(file, os.path.join(ARCHIVE_DIR, os.path.basename(file)))\n\n    # Return the path of the archived files\n    return [ARCHIVE_DIR + '/' + file for file in files]\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count the total goals and penalties from a CSV and update with the given goalsParameters: - goals (dict): A dictionary where keys team names and values numbers of goals scored- penalties (dict): A dictionary where keys team names and values numbers of penalties incurred.Returns: - count (Counter.collections): A Counter object with total counts of goals and penaltiesRequirements: - csv - os - collections.Counter Example >>> goals {'Team A 3 2 1 0 2} penalties 1 0 2 3 1} counts task_funcgo penalties print Counter({'go 8penalties 7})\n    \"\"\"\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(f\"CSV file not found at {csv_file_path}\")\n\n    with open(csv_file_path, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n        count = Counter()\n        for row in reader:\n            team, goals, penalties = row[0], int(row[1]), int(row[2])\n            count[team] += goals + penalties\n        return count\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from the source target based a specified patternThis function iter through files source, and if a's matches specified pattern is moved targetParameters: - source_dir (str): path- target_dir (str): The path- file_pattern (str optional): The regular that fil must in order moved.Default is r'\\b[A-a]+.(txt|docdoc)\\b', which matches fil that consist al and have extensions txt doc orReturns: - moved_files_count (int): The were successfully from source targetRequirements - re - os - shutil Example >>> task_func('/pathsource', '/target') 3 This example would move 3 from '/ if their fil match default pattern\n    \"\"\"\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), target_dir)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calcul similarity values two texts based cos similarity and Le ratioThe texts are first cleaned by removing all nonalph except spaces converted lowerCosine similarity computed based term frequency in each textThe Leven ratio computed 'rat function from 'python-Le, measures similarity two strings as number betweenParameters - text1 (str): first string compare.- text2 (str): The second string to compare.Returns: - tuple: A containing cos similarity and Le ratio as floats- cosine similarity (float): The ranges, means identical term frequency indicates no common terms- leven_rat (float): The Le ratio also ranges, where means strings identical completelyRequirements - re - numpy collections Leven Example >>> task_func(\"Hello!\", (0999998,9565217391304348\n    \"\"\"\n    # Clean text\n    text1 = ALPHANUMERIC.sub(' ', text1).lower()\n    text2 = ALPHANUMERIC.sub(' ', text2).lower()\n\n    # Compute cosine similarity\n    cosine_similarity = 1 - spatial.distance.cosine(Counter(text1), Counter(text2))\n\n    # Compute leven ratio\n    leven_rat = ratio(text1, text2)\n\n    return cosine_similarity, leven_rat\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate all perm a given list of numbers and calculate sum the fact of each number in eachIf an empty list is given the function returns empty listsParameters: numbers (list int): A to perm and calculate fact sumsReturns: list int: A list containing the sums the fact of each number in each perm.list of list of int: A list containing all perm numbers.Raises: TypeError: If numbers is not a list integers.ValueError If input numbers negative.Requirements: - funct.reduce - itertperm math.fact Example >>> fac, perm = task_func([1]) print() [9, 9] print [(1),1 3 22 12 3 1), 2 2)] fac,0 4])25]0 44 0)]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of integers\")\n    if not all(isinstance(i, int) and i >= 0 for i in numbers):\n        raise ValueError(\"Input numbers must be non-negative integers\")\n\n    perms = [list(permutations(numbers)) for _ in range(len(numbers))]\n    sums = [sum(map(math.fact, perm)) for perm in perms]\n\n    return sums, perms\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (SOURCE_DEST_ based specified file extensions (EXTIt also issues warnings for files could not transferred due any issuesParameters: - SOURCEDIR (str): source path from where files will transferred- DEST_DIR (str): The destination path where files will transferred- EXTENSIONS (list): A list file to consider for transferring.Example ['.txt', '.csvxx Returns - transferred_files (list): A containing names that successfullyRequirements - warnings os - glob shutil time Example >>> task_func('/pathsource', '/dest ['.txt '.csv' ['file1 'jpg' []\n    \"\"\"\n    transferred_files = []\n    warnings = []\n\n    for file in EXTENSIONS:\n        for file_name in glob.glob(SOURCE_DIR + '/*' + file):\n            try:\n                shutil.move(file_name, DEST_DIR)\n                transferred_files.append(file_name)\n            except Exception as e:\n                warnings.append(str(e))\n\n    return transferred_files, warnings\n"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    This function takes list tu containing elements and their respective counts and weightsIt normal the counts using z-score normal and the weights using min-max scalingFinally it returns a pand Data with the items, normalized counts normalized weightsParameters: data (list tu): A where each contains an element (any type), its count (int), weightfloatExample: [('A', 100 0.5), 2006 Returns: DataFrame: A pand Data with three columns: 'ItemNormalized CountNormal WeightEach row corresponds an entry from input data.Requirements: - pand - numpy sc.stats.zscore sk.preprocessingMinMaxScaler Example >>> data [('A 100 0.5 2006 150)] report task_func print Item Normal Count Normal Weight 0 A -1.224745 00 1 125 0000000 10 >>> dataAndrew 5743 0925Elizabeth 4655 10875Susan 4716 065),Christopher 210005('Timothy 3943175)] Item Andrew 1248851843373 1 0349969 1000000 2 Susan400366 0578313 -7609160000000238270120482\n    \"\"\"\n    data = pd.DataFrame(data, columns=['Item', 'Count', 'Normal', 'Year', 'Weight'])\n    data['Normal Count'] = zscore(data['Count'])\n    scaler = MinMaxScaler()\n    data['Normal Weight'] = scaler.fit_transform(data[['Weight']])\n    data = data[['Item', 'Normal Count', 'Normal Weight']]\n    return data\n\n"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calcul the mean of numerical in each position across tu in a list.Nonnumeric values are ignored, and means are computed only from available dataThat means that missing data in some of tu is simply ignoredA DataFrame with one columns named 'Mean Value which contains mean values for all tuple positions.The index is according this scheme: 'Position i' where current.If an empty list is passed then an Data returnedParameters: data_list (list tu): A containing tu of mixed data types (string int float etcDefaults to [('a 1, 2.1),2345 Returns: DataFrame: A pand Data with the mean values the numerical data at each positionRequirements: - pand - n itert Example >>> df task_func() print Mean Value Position 0 Na Position 30 Position 43 >>> data [('a1 2.1 21,c'), (12 3, 4['d'], 4 5.4 55\n    \"\"\"\n\n    df = pd.DataFrame(data_list, columns=['Position', 'Value', 'Mean Value'])\n    df['Value'] = df['Value'].astype(float)\n    df['Mean Value'] = df.groupby('Position')['Value'].transform('mean')\n    df = df.drop('Value', axis=1)\n    df = df.drop('Position', axis=1)\n    df = df.drop('Mean Value', axis=1)\n    df = df.set_index('Position')\n    return df\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform chi of independence of variables in contingency tableThis function takes Data containing categ two column names then constructs contingency from two categ columns performs chi of independenceIt returns the p- test, which indicates probability observing data if null (independence variablesParameters data (pd.DataFrame): A Data categ variables.col1 (str): The name first categ column 'datacol2 (str): The name second categ column 'dataReturns: float: The p- chi of independenceRaises: ValueError If 'data empty ifcol1 or are in 'data if one columns do have multiple categories or some categories less 5 observations (viol chi assumptions).TypeError If one both columns contain noncateg data.Requirements numpy pand sc.statschi2_conting Examples >>> data pDataFrame({...'Var1': ['A'] * 40 + [' 60,...'Var2': ['X'] * 25 + ['Y...}) >>> task_funcdata 'Var1 0.6619257972219346 >>> npseed42) data pData({...'a': nprandom['A size100...'b': nprandom['X size100...}) >>> task_funcdata 'a 1.\n    \"\"\"\n\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"Data should be a pandas DataFrame\")\n\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both columns do not exist in the data\")\n\n    if len(data[col1].unique()) < 5 or len(data[col2].unique()) < 5:\n        raise ValueError(\"One or both columns do have multiple categories or some categories less than 5 observations\")\n\n    if not data[col1].dtype == 'object' or not data[col2].dtype == 'object':\n        raise TypeError(\"One or both columns contain non categ data\")\n\n    contingency_table = pd.crosstab(data[col1], data[col2])\n\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n\n    return p\n\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate a number dice rolls, calculate frequency result return both frequency array a histNote The dice rolls have 6 possible outcomesThe title the hist is \"Hist Dice Rolls\".The x-axis labeled \"Dice ValueFrequencyParameters: rolls (int): The dice rolls.Returns: tuple: A tuple containing: - nparray: A n with the frequency each outcome- matplot.Axes: Ax object representing the hist.Requirements - numpy - mat. random Examples >>> import randomseed0) >>> outcomes, ax task_func10000 printout [1656 1690 1696573269] plshow >>> random10 outcomes10015 21 17 22 16 9]\n    \"\"\"\n    # Set seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Roll the dice\n    rolls = [random.choice(NUMBERS) for _ in range(rolls)]\n\n    # Calculate frequency\n    freqs = np.bincount(rolls)\n\n    # Plot\n    fig, ax = plt.subplots()\n    ax.bar(NUMBERS, freqs)\n    ax.set_title('Hist Dice Rolls')\n    ax.set_xlabel('Dice Value')\n    ax.set_ylabel('Frequency')\n\n    return freqs, ax\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Arch all processed files from a source directory to targetThe function identifies processed files by the '_processed suffix in filenameParameters: source_dir (str): containing files be archivedtarget_dir (str): The directory archive will savedarchive_name (str): The name fileDefault is 'archive.zip'.Returns: str: The path created archiveRequirements - os - re - shutil zipfile Example >>> task_func('.data', './_processed/ './archive.zip',myarchivemy\n    \"\"\"\n    processed_files = [f for f in os.listdir(source_dir) if f.endswith('_processed')]\n    with zipfile.ZipFile(archive_name, 'w') as z:\n        for file in processed_files:\n            with open(os.path.join(source_dir, file), 'r') as f:\n                z.writestr(file, f.read())\n    return os.path.join(target_dir, archive_name)\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts the stock closing prices for next 7 using simple linear and plots the dataParameters df (Data): The inputframe with columns 'dateclosing_price'date' should in datetimeReturns: tuple: A containing: - list with predicted prices for next 7- Axes: The matplot Ax object containing plot.Requirements - pand - n mat. sklinear_modelLinReg Const The function uses a constant time step of 24*60*60 seconds to generate future timExample >>> df pData({...'date': pd.date_range(start='1/120217'),...'closing_price [100 101...}) >>> pred_prices, plot = task_funcdf) print [107.0 108\n    \"\"\"\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n\n    model = LinearRegression()\n    model.fit(df['date'].values.reshape(-1,1), df['closing_price'])\n\n    future_days = np.array(pd.date_range(start=df.index[-1], periods=7))\n    future_data = pd.DataFrame(future_days, columns=['date'])\n    future_data['closing_price'] = model.predict(future_data['date'].values.reshape(-1,1))\n\n    plt.figure(figsize=(10,5))\n    plt.plot(df['closing_price'], label='Train Data')\n    plt.plot(future_data['closing_price'], label='Predicted Data')\n    plt.legend()\n    plt.show()\n\n    return future_data['closing_price'].tolist()\n"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies plots outl 'closing_price column given Data using ZScore methodParameters df (pandas.Data): input Data that must contain a column named 'closing_price with numericalz_threshold (float, optional): absolute ZScore threshold identifying outlDefault is 2Returns: tuple: A following - pandData: Data outl in 'closing_price column- matplot.axes._axAx: The plot object displaying outl, if x- label 'Index',Cl Price titleOut in Closing PricesRequirements - numpy - mat. scstatszscore Const Z-Score threshold for identifying outl is customizable via 'z_thExamples >>> pand df1Data({...'closing_price [100 101 150...}) >>> outl1, plot1 = task_funcdf1 df pData({...'closing_price [10 20...}) >>> outl2, plot2 = task_funcdf2 z_th\n    \"\"\"\n    # Calculate Z-Score\n    df['z_score'] = zscore(df['closing_price'])\n\n    # Identify outliers\n    outliers = df[df['z_score'] > z_threshold]\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(df['closing_price'], label='Closing Prices')\n    outliers.plot(ax=ax, kind='scatter', color='r', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_title('Closing Prices')\n    plt.legend()\n    plt.show()\n\n    return outliers, ax\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize distribution stock closing prices using both a box plot hist within single figureThis function designed help understand spread, central tendency the distribution shape stock closing pricesNote The tile of box plot set 'Box Plot of Closing Prices and title histHistRequirements - pand - mat.plot seab Parameters df (Data): A pand Data containing at column named 'closing_price with stock closingReturns: tuple: A containing two matplotaxes._ax.Ax objects: the first for boxplot and histExample >>> df pData({...'closing_price [100 101 150...}) >>> boxplot_ax, histplot = taskfuncdf) printbox.gettitle()) Box Plot of Closing Prices >>> printhist Hist\n    \"\"\"\n    # Create a box plot\n    boxplot = sns.boxplot(x=df['closing_price'])\n    plt.title('Box Plot of Closing Prices')\n    plt.show()\n\n    # Create a histogram\n    histplot = sns.histplot(df['closing_price'])\n    plt.title('Hist')\n    plt.show()\n\n    return boxplot, histplot\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices 7 using ARIM model and plots forecast.Parameters df (pd.Data): input with columns 'dateclosing_price'date' should of datetime dtype and 'closing_price floatReturns: Tuple[Listfloat], Ax]: A: - A forecast prices for 7- A matplot Axes object containing subplot.Requirements - pand n mat. statsmodelstsa.arimamodelAR Example >>> df pData({...'date': pd.date_rangestart='1/20217'),...'closing_price [100 101...}) >>> forecast, ax taskfuncdf) printfore [10699999813460752 107983384439547091295674052049929249915657345581803188028]\n    \"\"\"\n    # Convert date to datetime\n    df['date'] = pd.to_datetime(df['date'])\n\n    # Set date as index\n    df.set_index('date', inplace=True)\n\n    # Fit the model\n    model = ARIMA(df['closing_price'], order=(5,1,0))\n    model_fit = model.fit(disp=0)\n\n    # Make prediction\n    future = model_fit.predict(len(df), len(df)+7)\n\n    # Plotting\n    fig, ax = plt.subplots()\n    df['closing_price'].plot(ax=ax)\n    future.plot(ax=ax)\n    plt.show()\n\n    return future, ax\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing possible two combinations the lower English alThe dictionary values represent frequency these two- combinations in given wordIf a combination does appear word, its value 0Requirements - collectionsCounter - itert string Parameters word (str): input containing alReturns: - dict: A keys as two-letter alphabet combinations and values their counts in wordRequirements - The function uses `colCounter library to count occurrences two-letter combinations- The function uses `itertperm method generate all two-letter combinations al- The function uses `string library get of lower alExample >>> list(taskfunc('abc').items[:5 [('ab', 1ac 0adaeaf\n    \"\"\"\n    alphabet = string.ascii_lowercase\n    result = {}\n    for i in range(len(word)):\n        for j in range(i + 1, len(word)):\n            combination = ''.join(sorted([word[i], word[j]]))\n            if combination in result:\n                result[combination] += 1\n            else:\n                result[combination] = 1\n    return result\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create and visualize a sales report for different categories over aParameters: - start_date (str): start for report in 'YYDefault is '20160101'.- periods (int): The number for the reportDefault is 13.- freq (str): The frequency dates to generated.Default is 'WOM-2FRI' (WeekOfMonth-2nd Friday).- categories (list): List to include reportDefault is ['ElectronicsFashionHome & KitchenAutomSports'].Returns: - Returns a Data containing sales with following columns 'DateCategorySales'.- Returns the Matplot Axes object for the plot.Requirements - pand - mat.plot n Example >>> df, ax task_funcstartdate='2020 periods5 fre='W-MON', categories['ElectronicsFashion' Date Category Sales 0 202006 Electronics 272 106 14713 Electronics 217 29220 Electronics 423 35127 295 4590203 109 311\n    \"\"\"\n    # Generate sales data\n    sales_data = pd.DataFrame(np.random.randint(100, 1000, (periods, len(categories))),\n                              columns=categories,\n                              index=pd.date_range(start=start_date, periods=periods, freq=freq))\n\n    # Add a new column for total sales\n    sales_data['TotalSales'] = sales_data.sum(axis=1)\n\n    # Plot the sales data\n    fig, ax = plt.subplots()\n    sales_data.plot(ax=ax)\n\n    plt.show()\n\n    return ax\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates time sales starting a specified then use linear forecast based provided or generatedParameters - start_datestr): sales in YDefault is '2016'.- periods (int): The for sales dataDefault is 13- freq (str): The frequency sales data, e 'WOM-2FRI for second FridayDefault is 'WOM-2FRI'.- sales_data (array-like, optional): An actualIf not provided random dataReturns: - A numpy forecasted future sales same number periods as inputRequirements - numpy pand sk.linear_modelLinReg Examples >>> np42 For consistent random data generation in examples taskfunc('2016 13WOM-2FRI') array313.65384615 31856043956 32346703297 32837362637 33328021978 33818681319 34309340659, 35290659341 35781318681 3671978022 36762637363 37253296703]) >>> taskfunc('2020 5M', [200 300 400 array238.9, 226, 2131 200 187])\n    \"\"\"\n    # Generate random data\n    if sales_data is None:\n        sales_data = np.random.rand(periods) * 1000000\n\n    # Create a dataframe\n    df = pd.DataFrame({\n        'date': pd.date_range(start=start_date, periods=periods),\n        'sales': sales_data\n    })\n\n    # Convert date to a format that can be used by the model\n    df['date'] = df['date'].map(dt.datetime.toordinal)\n\n    # Create a linear regression model\n    model = LinearRegression()\n\n    # Fit the model\n    model.fit(df[['date']], df['sales'])\n\n    # Generate future sales\n    future_sales = model.predict(df[['date']])\n\n    return future_sales.flatten().tolist()\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    Randomly assigns specified tasks employees with due the current returns Data these assignmentsParameters - tasklist (list str): assigned- n_tasks (int): Number assignedThis number should negative can larger tasks in task_list- employees (list str, optional): List employee to whom tasksIf not provided defaults: ['JohnJane SmithJames BrownMary JohnsonRobert Davis'- seed (int, optional): Seed for random number to ensure reproduDefaults None (not set).Returns: - pd.DataFrame: Contains columns 'Task NameAss To andDue with each row representingRaises: - ValueError If n_tasks negative.Note - Task names san replacing spaces- Due dates set the current system dateRequirements - pand random dat Examples >>> df task_func['Clean OfficePrep ReportClient Meeting 2 seed42 Task Name Ass To Due 0 Client_Me John 20240413 1 Clean_ James Brown >>> type( <classpcoreframeData\n    \"\"\"\n\n    if seed is not None:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should be a non-negative integer\")\n\n    if not task_list:\n        raise ValueError(\"task_list should be a non-empty list\")\n\n    if not employees:\n        employees = [\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"]\n\n    task_df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    for i in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        due_date = datetime.today().strftime('%Y-%m-%d')\n        task_df = task_df.append({\"Task Name\": task, \"Assigned To\": employee, \"Due Date\": due_date}, ignore_index=True)\n\n    return task_df\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in given words underscores then plots frequency each uniqueParameters - mystrings (list str): List words/ph where spaces need underscores- text (str The text in which modifications applied and word frequencies calculatedMust not emptyReturns: - matplotaxesAx: The Ax object of plotRaises: - ValueError If input text empty.Requirements - numpy - mat re - collections Notes All operations case- The frequency plot displays each unique word on x in order they after modification with its corresponding frequency onExamples >>> ax task_func['Lorem',consect' d lore Ips') type( <classmatplotaxes._axAx\n    \"\"\"\n    if not text:\n        raise ValueError(\"Text cannot be empty\")\n\n    words = re.findall(r'\\b\\w+\\b', text)\n    modified_words = [word.replace(' ', '_') for word in words]\n\n    frequency = Counter(modified_words)\n\n    plt.figure(figsize=(10, 5))\n    plt.bar(range(len(frequency)), list(frequency.values()), align='center')\n    plt.xticks(range(len(frequency)), list(frequency.keys()))\n\n    plt.tight_layout()\n    plt.show()\n\n    return plt.gca()\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from a source directory and save saved targetParameters - source_directory (str): source containing files z- target_directory (str): The destination zip be createdIf it does exist the function will create- zip_name (str): The create (without extension; '. will added automaticallyReturns: - str: The full path created zip in format \"/pathtarget_directoryzip_name\".Raises: - OSError: If the source_directory does.Requirements - os - glob - pathlib zipfile Note - The valid extensions ['.txtdocxxcsv'Example >>> path task_func('/source_directory '/targetzipped_files type( <classstr >>> '/.zip\n    \"\"\"\n    source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist\")\n\n    if not os.path.exists(target_directory):\n        raise OSError(f\"Target directory {target_directory} does not exist\")\n\n    if not zip_name.endswith('.zip'):\n        zip_name += '.zip'\n\n    full_path_target_zip = target_directory / zip_name\n\n    with zipfile.ZipFile(full_path_target_zip, 'w') as zipf:\n        for file in glob.glob(f\"{source_directory}/*.txt\"):\n            zipf.write(file, arcname=Path(file).name)\n\n    return str(full_path_target_zip)\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files with specific extensions (.txtdocxcsv from a source directory CSV and saves targetParameters - source_directory (str): path containing files converted- target_directory (str): The path where converted CSV savedIf it does exist the function createReturns: - int: The files successfully converted CSVRaises: - FileNotError If source directory does.Requirements - os - pathlib pand python-docx openpyxl Notes Each file's text content captured and stored CSV with single 'Text and no row indices- This function overwrite existing files in target if they have the names convertedExample >>> task_func('/UserstestDocuments', '/csv_files 4 >>>pathsource',pathtarget 2\n    \"\"\"\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n\n    if not source_path.exists():\n        raise FileNotFoundError(f\"Source directory {source_path} does not exist\")\n\n    if not target_path.exists():\n        target_path.mkdir()\n\n    files = [f for f in source_path.iterdir() if f.suffix == '.txtdocxcsv']\n\n    for file in files:\n        try:\n            doc = docx.Document(file.as_posix())\n            data = [p.text for p in doc.paragraphs]\n            df = pd.DataFrame(data, columns=['Text'])\n            df.to_csv(target_path / (file.stem + '.csv'), index=False)\n        except Exception as e:\n            print(f\"Error converting {file.name} to csv: {e}\")\n\n    return len(files)\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes MinMax-normalized cumulative sum for numeric column given DataParameters: - df (pandas.Data): The input Data containing numericalReturns: - pd.DataFrame: A Data where each column contains normalized cumulative sum respective column in input Data, retaining original column namesRaises: - TypeError If DataFrame contains nonn types.- ValueError If the DataFrame empty or contains Na values.Requirements - pand - n sk Example >>> input_df pData({'A [3 2 1] output task_func type( <classp.coreframeData output A 0 00000000 1 046666 1000000\n    \"\"\"\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    # Check if the DataFrame contains Na values\n    if df.isna().any().any():\n        raise ValueError(\"The DataFrame contains Na values.\")\n\n    # Check if the DataFrame contains non-numeric types\n    if not df.select_dtypes(include=[np.number]).empty:\n        raise TypeError(\"The DataFrame contains non-numeric types.\")\n\n    # Compute MinMax-normalized cumulative sum\n    df_normalized = df.cumsum().div(df.cumsum().values[0])\n\n    return df_normalized\n\n"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes a given directory, listing each file it along size creation last modification without rec into subParameters - directory_ (str): be analyzedIf it is empty this function returns an listReturns: - list tu: Each contains (file file size in creation in ISO format modification ISO).Raises: - ValueError If the provided directory does.Requirements - os - pathlib dat Notes The function assumes the directory exists and contains only files (no sub are processed- Times are reported in system time, UTC.- The creation and modification times are platform; on some systems time might not available and might replaced the last metadata change timeExamples >>> result task_func('/pathdirectory') print( [('example 10242023-0401T143000200215'),...empty []\n    \"\"\"\n    if not os.path.exists(directory_path):\n        raise ValueError(f\"The provided directory {directory_path} does not exist.\")\n\n    result = []\n    for file_name in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file_name)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            creation_time = datetime.fromtimestamp(os.path.getctime(file_path), tz=timezone.utc)\n            modification_time = datetime.fromtimestamp(os.path.getmtime(file_path), tz=timezone.utc)\n            result.append((file_name, file_size, creation_time.isoformat(), modification_time.isoformat()))\n\n    return result\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates population report DataFrame and CSV based provided JSONParameters - jsondata (str): N string country namesstr as keys and populationsintThe parent key expected \"Countries\".Example format '{\"CountriesCountry A 331002651 67886011}}- output_dir (str): Directory path where CSV reportDefaults current directoryThe function will create it if does- file_name (str): Name CSV reportDefaults \"country_populationreport.\".Returns: - str: The file path generated CSV report- pd.DataFrame: The country-population loaded input JSON, with columns: \"Country\".Raises: - ValueError If JSON data mal empty, contains nonstring country nonn or negative populations- IOError If file cannot written specified.Requirements - json - os pand math Notes Output DataFrame has extra index column- If this function encounters float population that otherwise valid roundExample >>> jsonstrCountriesCountry A 331002651 67886011}} cfile_, df taskfunc print./countrypopulationreport Country 0 Country 33 1\n    \"\"\"\n    if not isinstance(json_data, str):\n        raise ValueError(\"JSON data is not a string\")\n\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"JSON data is not valid\")\n\n    if \"Countries\" not in data:\n        raise ValueError(\"JSON data does not contain 'Countries' key\")\n\n    for country, population in data[\"Countries\"].items():\n        if not isinstance(country, str) or not isinstance(population, int) or population < 0:\n            raise ValueError(\"Invalid country name or population\")\n\n    df = pd.DataFrame(data[\"Countries\"].items(), columns=[\"Country\", \"Population\"])\n\n    file_path = os.path.join(output_dir, file_name)\n\n    df.to_csv(file_path, index=False)\n\n    return file_path, df\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates each item (files and directories in given against specified conditionsParameters: - dir_path (str): be evaluatedMust exist.- predicates (list of strings): Names conditions to check for.Must contain valid conditionsInvalid conditions are ignoredSupported conditions 1'is_file whether the item a 2'is_dir': whether the item a 3'has_specialchars whether the item name contains character that is not a letter, digit underscore, ignoring file extensions 4.'has_numbers': whether the item name contains number Returns: - dict: A dictionary with directory items as keys and the results of condition checks as valuesRaises: - ValueError If no valid pred provided.- FileNotError If the specified directory does or a directory.Note - This function evaluates file/, rather their full- Predicates are dedu.Requirements: - os - re - pathlib Examples >>> task_func('/pathdir', ['isfilehasnumbers' {'file.txt {is True False},file2 True}}dirspecialchmy_folderisa@Folder True\n    \"\"\"\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"The provided directory does not exist.\")\n\n    result = {}\n\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n\n        if os.path.isfile(item_path):\n            is_file = True\n            is_dir = False\n        else:\n            is_file = False\n            is_dir = True\n\n        has_specialchars = re.search(r'[^a-zA-Z0-9_]', item) is not None\n        has_numbers = re.search(r'\\d', item) is not None\n\n        check_result = {}\n        check_result['is_file'] = is_file\n        check_result['is_dir'] = is_dir\n        check_result['has_specialchars'] = has_specialchars\n        check_result['has_numbers'] = has_numbers\n\n        result[item] = check_result\n\n    return result\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert a hexade string various enc.This function takes a hexade string as input and performs several encoding.Initially, it decodes the hex string to bytes and then converts these bytes into a UTF stringThis UTF string is subsequently encoded into different formats: hexade base UTF UTF UTF ASCII (if possible URL encoding and ROT13.Note that if ASCII not possible, returns 'Not represent in ASCII'.Parameters: - hex_string (str): The input inadeReturns: - dict: A dictionary containing the input string encoded in various formats.The dictionary's keys are the encoding types ('hex',baseutf',utf16',utf32',ASC',URLROT13'), and values are the corresponding encoded strings.If the string cannot represented in ASCII, the 'ASC' key maps 'Not represent in'.Requirements: - binasci - base urll - codecs Example >>> task_func(\"4a4b4c\") {'hex '4baseSktM',utf-JKL',utf16JutfASCJURLJ',ROT13WXY'} >>> task68656c6c6f\")caGVsbG8=',hello',hellohellohello',uryyb'\n    \"\"\"\n    decoded_bytes = binascii.unhexlify(hex_string)\n    utf_string = decoded_bytes.decode('utf-8')\n    base64_string = base64.b64encode(decoded_bytes).decode('utf-8')\n    utf16_string = codecs.encode(utf_string, 'utf-16').decode('utf-16').encode('latin-1', 'ignore').decode()\n    utf32_string = codecs.encode(utf_string, 'utf-32').decode('utf-32').encode('latin-1', 'ignore').decode()\n    url_encoded_string = urllib.parse.quote(utf_string)\n    rot13_encoded_string = ''.join([chr((ord(i) - 97 + 13) % 26 + 97) if i.isalpha() and i.islower() else i for i in utf_string])\n\n    return {'hex': hex_string, 'base64': base64_string, 'utf-8': utf_string, 'utf-16': utf16_string, 'utf-32': utf32_string, 'URL': url_encoded_string, 'ROT13': rot13_encoded_string}\n\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads a tar. from a specified URL, then valid its MD checks against a pred expected valueIf the checksum matches it extracts contents tar.gzOtherwise it delet downloadedParameters: url (str): from download tar.Returns: bool: Returns True file successfully downloaded, its MD checks matches expected value it extractedReturns False checks does expected or downloadRequirements - urllrequest - hashlib tarfile os Example >>> task_func('httpexamplefiles. True\n    \"\"\"\n    # Download file\n    with urllib.request.urlopen(url) as response, open(TARGET_TAR_FILE, 'wb') as out_file:\n        out_file.write(response.read())\n\n    # Validate MD5 checksum\n    with open(TARGET_TAR_FILE, 'rb') as file:\n        file_content = file.read()\n        md5_checksum = hashlib.md5(file_content).hexdigest()\n\n    if md5_checksum == EXPECTED_MD5_CHECKSUM:\n        # Extract contents\n        with tarfile.open(TARGET_TAR_FILE) as tar:\n            tar.extractall()\n        return True\n    else:\n        # Delete downloaded file\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download a CSV from a given URL, save specified path count occurrences each value a particular columnThe function handles various scenarios including missing columns file download errorsParameters url (str): CSV downloadedMust be a valid and accessible URLcolumn_name (str): The name in CSV whose values to countedThe function will raise Value this column foundcsvfilepath (str): The where downloaded savedIf a file already at path overwReturns: dict: A dictionary mapping the values from specified column their occurrence countsRaises: ValueError If specified column_name does in CSV function delete downloaded and raise a with message stating \"The provided '{column Requirements - ur - os c collections Example >>> task_func('httpdata. 'category',downloaded_data. {'cat1 5 3 8} # This is hypothetical output; the actual depend CSV dataNotes: - The downloaded CSV deleted after its contents processed- The function only counts values in specified column and ignores other data\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n        csv_file = response.read()\n        csv_string = csv_file.decode('utf-8')\n        csv_reader = csv.reader(csv_string.splitlines())\n        column_data = collections.defaultdict(int)\n\n        for row in csv_reader:\n            if len(row) > column_name:\n                column_data[row[column_name]] += 1\n\n        with open(csv_file_path, 'w') as f:\n            writer = csv.writer(f)\n            writer.writerow([\"Column\", \"Count\"])\n            for key, value in column_data.items():\n                writer.writerow([key, value])\n\n        return dict(column_data)\n\n    except urllib.error.URLError as e:\n        print(f\"Failed to download the file: {e.reason}\")\n    except ValueError as e:\n        print(f\"The provided '{column_name}' column not found in the CSV file.\")\n    finally:\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)\n\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches and pars an XML from specified URL, then converts Pand DataParameters: url (str): CSV downloadedMust be a valid and accessible URLReturns: pandData A Data constructed the parsed XMLEach row the Data corresponds an 'item element XML file, with child of ' becoming columns in DataRaises: ValueError This error raised in several scenarios 1If the URL invalid the XML cannot fet from URL.2If the XML file has invalid syntax.3If the XML structure does conform expected format.Requirements - urll - l pand Examples # Example with a valid XML structure >>> df task_func('httpsample_data. print name age 0 John 25 1 Jane 30 # an invalidinst Value XML does expected format\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n        xml_content = response.read()\n        parser = etree.XMLParser(encoding='utf-8')\n        tree = etree.fromstring(xml_content, parser)\n\n        # Extract data from XML\n        data = []\n        for item in tree.iter('item'):\n            row = []\n            for child in item:\n                row.append(child.text)\n            data.append(row)\n\n        # Convert data to pandas DataFrame\n        df = pd.DataFrame(data, columns=['name', 'age'])\n        return df\n\n    except ValueError as e:\n        print(f\"ValueError: {e}\")\n        return None\n\n    except etree.XMLSyntaxError as e:\n        print(f\"XMLSyntaxError: {e}\")\n        return None\n\n    except etree.ElementTree.ParseError as e:\n        print(f\"ElementTree.ParseError: {e}\")\n        return None\n\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return None\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Download a text from specified URL, processes to count frequency each word then plots a bar ten frequently occurringParameters urlstr): from text file downloadedThe URL should point directly a textReturns: tuple: A two: - Counter: Counter object from collections module, containing word frequencies in text- Axes: A matplot Ax object represents plotted bar chart ten most wordsNote - function assumes URL points plain and may handle binary or nontext content correctly- Words are identified using basic regular and are case- The function does remove common stopwords; all words counted is- Requires internet download file from URLExample >>> word_fre, ax taskfunc('httpexampledata.txt print.mostcommon(5 [('the', 102of 76and 64to 52in 41)] Requirements - ur - re collections mat\n    \"\"\"\n    try:\n        with urllib.request.urlopen(url) as response:\n            html = response.read().decode()\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return\n\n    # Remove punctuation\n    html = re.sub(r'[^\\w\\s]', '', html)\n\n    # Split into words\n    words = html.split()\n\n    # Count word frequencies\n    word_freq = Counter(words)\n\n    # Get the 10 most common words\n    most_common_words = word_freq.most_common(10)\n\n    # Plot the bar chart\n    fig, ax = plt.subplots()\n    ax.bar([i[0] for i in most_common_words], [i[1] for i in most_common_words])\n    ax.set_xticks([i[0] for i in most_common_words])\n    plt.show()\n\n    return word_freq, ax\n"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Download and extracts a ZIP a specified URL to givenParameters - urlstr): from download ZIPIt should a valid and accessible URL- download_path (str): The directory where ZIP and extractedDefaults \"mnt/datadownload\".Returns: - str: Path directory extracted contentsIf an error a descriptive returnedThe message starts \"Error \".If the specific descrption either \"The URL does point ZIP.\", downloaded valid orUn from provided.\".Raises: - Network Issues or Invalid URL: Returns \"Error Unable download the from provided if there issues in reaching or downloading- Inc File Type Returns \"Error The URL point ZIP if downloaded's content type 'application- Corrupt ZIP File: Returns \"Error The downloaded if downloaded but corrupt or cannot extracted- General Exceptions: Catches and reports any other exceptions (like runtime occur process with specific error, formatted \"Error [ex messageRequirements - requests - os zipfile Example >>> task_func('httpsexamplefilezip 'mntdatadownloadfile'\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        zip_file_path = os.path.join(download_path, os.path.basename(url))\n        with open(zip_file_path, 'wb') as f:\n            f.write(response.content)\n\n        try:\n            with ZipFile(zip_file_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n            return download_path\n        except BadZipFile:\n            return \"Error: The downloaded ZIP file is corrupt or cannot be extracted.\"\n    except requests.exceptions.RequestException as e:\n        return \"Error: Unable to download the ZIP file from provided.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Ext and converts data a specified HTML table based given 'table_ on webpage into Pand DataIf the table present but contains data rows (i <tr tags function DataParameters - url (str): webpage from extract table- table_id (str): The 'id attribute HTML to extractedReturns: - df (pd.Data): A Data extracted specified HTML tableIf the table found but has no rows (<tr elements an DataRaises: - requests.exceptionsHTTPError: If HTTP ( due connection issues nonsuccessful status like 404 500).- ValueError If no table with specified 'table on webpage.The error will \"Table with the specified ID not Requirements - requests - bs4.BeautS pand io Notes The function raises HTTPError for unsuccessful HTTP, includes scenarios network problems non2xx HTTP responses- A ValueError is raised specifically HTML table with specified ID present webpage content, indicating either incorrect ID absence table- If the located table has no rows indicated absence <tr tags an DataThis useful handling tables struct present HTML but devoid dataExample >>> task_func('httpsexampledata.htmltable1 DataFrame: Name Age 0 Alice 25 1 Bob 30 Example of ValueErrornonex_table Value Table with the specified ID notExample empty table >>> task_func('httpsexampleemptytableempty DataFrame: Empty Data Column [] Index []\n    \"\"\"\n\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        soup = BeautifulSoup(response.text, 'html.parser')\n        table = soup.find('table', {'id': table_id})\n\n        if table is None:\n            raise ValueError(f\"Table with the specified ID not found on the webpage.\")\n\n        df = pd.read_html(str(table))[0]\n\n        return df\n\n    except requests.exceptions.HTTPError as errh:\n        print (\"HTTP Error:\", errh)\n    except requests.exceptions.ConnectionError as errc:\n        print (\"Error Connecting:\", errc)\n    except requests.exceptions.Timeout as errt:\n        print (\"Timeout Error:\", errt)\n    except requests.exceptions.RequestException as err:\n        print (\"Something went wrong\", err)\n    except ValueError as ve:\n        print (\"Value Error:\", ve)\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Download and extracts a zip a specified URLParameters urlstr): zipfilename (str): The under downloaded zip savedReturns: tuple: A status message and list fil in unz directory, or an extractionNote the status message will contain \"Error when: - Network-related exceptions raised if download- File-related exceptions are raised if there issue file handling or extractionRequirements - requests - pathlib.Path - zip Example >>> task_func('httpexamplemyfile',my ('Download and extraction successful ['file1'\n    \"\"\"\n    # Create download directory if not exists\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n\n    # Download the file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        return \"Error: Http Error:\", errh\n    except requests.exceptions.ConnectionError as errc:\n        return \"Error: Error Connecting:\", errc\n    except requests.exceptions.Timeout as errt:\n        return \"Error: Timeout Error:\", errt\n    except requests.exceptions.RequestException as err:\n        return \"Error: General Error:\", err\n\n    file_path = DOWNLOAD_DIR / filename\n    with open(file_path, 'wb') as f:\n        f.write(response.content)\n\n    # Extract the file\n    try:\n        with zipfile.ZipFile(file_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except Exception as e:\n        return \"Error: Extraction Failed:\", e\n\n    return \"Download and extraction successful\", ZIP_DIR.glob('*')\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    This function scrap a webpage for all hyper saves absolute URLs to a CSVParameters - url (str): relative webpage scrape- base_url (str optional): website prep relative linksDefaults 'httpsexample'.- csv_file (str optional): The filename for CSV where links savedDefaults 'scraped_data.'.Returns: - int: The unique absolute links scrap webpageRequirements - requests - urllparsejoin bs4.BeautS csv Examples >>> task_func('/mywebpage 5anotherpage', basedifferent', cfileother_links 8\n    \"\"\"\n    # join the base url with the relative url\n    base_url = urljoin(base_url, url)\n\n    # send a request to the webpage\n    response = requests.get(base_url)\n\n    # parse the webpage with BeautifulSoup\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # find all the links in the webpage\n    links = [link.get('href') for link in soup.find_all('a')]\n\n    # write the links to a csv file\n    with open(csv_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Absolute URL\"])\n        writer.writerows(links)\n\n    return len(links)\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    This function pars HTML table data specified URL or local stores into an SQLThe function handles different scenarios for fetch, processing storingParameters - webpage_ (str): or a local path pref \"file://- database_name (str): The SQLite file where data toDefaults \"my_database.\".Returns: - int: The rows parsed HTML tableRaises: - requests.RequestException This exception if there network issue in accessing URLThis includes scenarios like connection errors time HTTP- sql.DatabaseError This exception in case issues connecting, writing the SQLThis includes issues like invalid database names write permissions or SQL execution errorsNotes - The function designed replace table \"my specified SQL with new data each called- If the HTML content does contain table or if function 0, indicating no rows were parsed and stored- This function relies 'requ',lxmlpandsql libraries for its operationsRequirements - requests - lxml pand sql Example >>> numrows taskfunc(\"httpexampletabledata printf\"Number parsed {num\") Number 5\n    \"\"\"\n\n    # Fetch HTML content\n    try:\n        response = requests.get(webpage_url)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        print(f\"Error: {e}\")\n        return 0\n\n    # Parse HTML content\n    try:\n        tree = html.fromstring(response.content)\n        table_data = tree.xpath('//table[@id=\"specified_table\"]/tr/td')\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return 0\n\n    # Store data into SQLite\n    try:\n        conn = sqlite3.connect(database_name)\n        cursor = conn.cursor()\n\n        # Create table\n        cursor.execute('''CREATE TABLE IF NOT EXISTS table_name\n                         (column1 text, column2 text, column3 text)''')\n\n        # Insert data into table\n        for i in range(0, len(table_data), 3):\n            cursor.execute(\"INSERT INTO table_name VALUES (?, ?, ?)\",\n                           (table_data[i].text, table_data[i+1].text, table_data[i+2].text))\n\n        conn.commit()\n        conn.close()\n    except sqlite3.DatabaseError as e:\n        print(f\"Error: {e}\")\n        return 0\n\n    return len(table_data)\n\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Op an image file, extracts text using O converts encoding, with fall image comment processingRaises: - ValueError UnicodeDec or Look occurs during conversion Parameters filename (str path imageDefaults a global 'IMPATH- from_enc (str The original extracted or commentDefault is 'cp1251'.- to_enc (str): The target converted text or commentDefault is 'utf8Returns: - comment (str): The text extracted image or comment, converted target encodingIf OCR extraction and comment both fail returns an emptyRaises: - ValueError If incorrect enc provided text or comment conversion.Requirements - codec PIL pytessact Example # Assuming 'image contains text\ufffd' in Russian (enc cp1251), this text successfully extracted by O>>> text = taskfunc('image.cp1251',utf print '\ufffd\ufffd' # This output ut version extracted\n    \"\"\"\n    try:\n        img = Image.open(filename)\n        text = pytesseract.image_to_string(img, lang='rus', config='--psm 6')\n        return text\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data a specified REST URL processes JSON parsingThe process involves decoding re handling different encoding scenarios.Note - function initi an HTTP GET specified with 5It retrie response content in raw bytesParameters - urlstr): RESTDefault is 'httpapidata'.- from_enc (str optional): The original dataIf None, encoding autodetDefault is- to_enc (str): The target format dataDefault is 'utf8Returns: - dict: The JSON-p after reencReturns an dictionary if contentRaises: - ValueError \"Un detect encoding for nonempty content\", if it fails response contentRequirements - json - requests chardet Example >>> data task_func('httpapiexampledata print {keyvalue # Example of expected output Notes The function sets timeout 5 API- It handles cases with empty content undet encoding by returning dictionary or raising, respectively- The decoding and re steps ensure compatibility various data the final JSON parsing.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n\n        content_type = response.headers.get(\"content-type\")\n        encoding = chardet.detect(content_type)[\"encoding\"] if content_type else to_encoding\n\n        if from_encoding:\n            encoding = from_encoding\n\n        data = response.content.decode(encoding)\n        return json.loads(data)\n\n    except requests.RequestException as e:\n        print(f\"Error: {e}\")\n        return {}\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads a CSV processes its date-relatedThe function performs several key such checking the file's existence valid presence specified date column converting date dat objects filtering rows based current sorting resulting dataThe function handles special, an empty CSV by returning Data and raises exceptions for specific error scenarios like missing files columnsParameters - csvfile (str): CSVFileNotError is raised if path invalid- column_name (str): The containing date valuesValueError is raised if this column missing in CSV- date_format (str optional): The values specified columnDefaults '%Y-'.Returns: - pand - os dat panderrorsEmptyDataError Ra FileError: If specified CSV at given path.- ValueError If specified column present CSV.Requirements - pand os - dat Example >>> task_func('pathcsvfileDateColumn Date Value 0 2023-1210 100 1 20 150\n    \"\"\"\n    try:\n        if not os.path.exists(csv_file_path):\n            raise FileNotFoundError(\"CSV file not found at the given path\")\n        if not column_name in pd.read_csv(csv_file_path).columns:\n            raise ValueError(\"The specified column is not present in the CSV file\")\n        df = pd.read_csv(csv_file_path)\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n        df = df.sort_values(by=[column_name])\n        return df\n    except FileNotFoundError as fnf_error:\n        print(f\"FileError: {fnf_error}\")\n    except ValueError as ve_error:\n        print(f\"ValueError: {ve_error}\")\n    except EmptyDataError as ede_error:\n        print(f\"EmptyDataError: {ede_error}\")\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    This function sec a client socket using SSL/ and sends back SHA256 a file requestedParameters: - client_socket (socket.socket): The client that will wrapped with SSL/ for secure- cert_file (str): The path SSL to for the secure connection- key_file (str): The path SSL corresponding certificate.- buffer_size (int, optional): The used receive data clientDefaults to 1024 bytes.Returns: - str: The SHA256 requested fileIf the requested file does returns 'FileIn case of an exception during processing an error message returnedRequirements - ssl - os - hashlib Note - This function assumes the client requests a file by sending its path.- The function does handle the opening or client_socket itself- Error handling is basic and might need expanded based specific useExample >>> # Server setup >>> server_socket socketsocket socket serverbind('localhost 443))list5 cert_file \"pathificatecr keyprivate # Accept client connection >>> clientsocket, addr serveraccept() # Use task_func function handle the client request filehash taskclient cert print(\"Sent file hash\", serverclose\n    \"\"\"\n    # SSL/TLS setup\n    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n    context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n\n    # Accept client connection\n    client_socket, addr = server_socket.accept()\n\n    # Use task_func function handle the client request\n    filehash = task_func(client_socket, cert_file, key_file)\n\n    # Send back SHA256 requested file\n    client_socket.send(filehash.encode())\n\n    # Close the client connection\n    client_socket.close()\n\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run a non echo server that app server current time received and, while handling exceptional conditions for each socketParameters - serveraddressstr): for listenDefault is 'localhost- server_port (int): listenDefault is 123- buffer (int): data receptionDefault is 1024 bytes- run_duration (int): The ( serverDefault is 5 secondsReturns: - str: A status indicating server operation and run durationRequirements - socket - select queue dat Example >>> printtaskfunc())Server started on local123.Ran for 5.'\n    \"\"\"\n    # Create a socket object\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the server address and port\n    sock.bind((server_address, server_port))\n\n    # Listen for incoming connections\n    sock.listen(5)\n\n    # Create a list to hold the socket objects\n    sockets_list = [sock]\n\n    # Create a queue to hold the readable sockets\n    read_sockets = select.select(sockets_list, [], [])\n\n    if not read_sockets:\n        return\n\n    # Iterate over the readable sockets\n    for sock in read_sockets:\n        # If the socket is the server socket, then accept the connection\n        if sock == sock:\n            client_sock, client_address = sock.accept()\n            print(f\"Connection from {client_address} has been established\")\n        else:\n            data = sock.recv(buffer_size)\n            if data:\n                print(f\"Received data: {data.decode('utf-8')}\")\n                current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                client_sock.send(current_time.encode())\n            else:\n                print(\"No data received, closing connection\")\n                sock.close()\n                sockets_list.remove(sock)\n\n    # Check if there are any sockets that are readable\n    if sockets_list:\n        # If there are, then check if there are any sockets that have data to read\n        if sockets_list:\n            # If there are, then check if the run_duration has passed\n            if datetime.now() > run_duration:\n                print(\"Server has been running for more than the specified duration\")\n                return\n\n"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive a message from a client socket and send as an email via an SMParameters: client_socket (socket.socket): The client from message receivedReturns: - None Note - Requires a working internet and access an SM- The function asks for the sender email, recipient email sender email password for authenticationRequirements: - smtplib - email.message.EmailMessage - getpass Example >>> import socket server_socket socket serverbind((SERAD SERlist5 client_socket, addr serveraccept() taskfunc(client)\n    \"\"\"\n    # Receive the message from the client\n    message = client_socket.recv(BUFFER_SIZE).decode(\"utf-8\")\n\n    # Split the message into sender, recipient, and message\n    sender, recipient, message_content = message.split(\" \")\n\n    # Get the sender's email and password\n    sender_email = getpass.getpass(\"Enter your email: \")\n    password = getpass.getpass(\"Enter your password: \")\n\n    # Create an email\n    email = EmailMessage()\n\n    # Set the email parameters\n    email[\"From\"] = sender_email\n    email[\"To\"] = recipient\n    email[\"Subject\"] = \"Hello\"\n\n    # Set the email content\n    email.set_content(message_content)\n\n    # Create a secure SMTP server\n    context = ssl.create_default_context()\n\n    # Try to connect to the SMTP server\n    try:\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls(context=context)\n        server.login(sender_email, password)\n\n        # Send the email\n        server.sendmail(sender_email, recipient, email.as_string())\n\n        print(\"Email sent successfully\")\n\n    except (smtplib.SMTPException, ssl.SMTPException) as error:\n        print(f\"Error: {error}\")\n\n    finally:\n        server.quit()\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes a CSV containing text data and generates hist ten wordsThis function reads CSV, which expected single column of dataIt then splits text words creates hist frequency top ten most, excluding a pred set stopThe resulting histogram can either displayed screen savedThe CSV should have single with header 'TextEach row under this column should contain text stringIf the CSV does have header the first column assumed text dataParameters - file_path (str): input CSV- save_path (str optional): The where hist plotIf not provided the plot is displayed onReturns: - matplotaxesAx: The Ax object of plot if save_path providedUseful for further customization or display in notebooks- None: If save_ provided plot is saved specified, function returns NoneRaises: - FileNotError If specified_path does.It raises FileNot with message indicating path that- Exception: For any other errors that function execution.In this case error is printed to console, NoneRequirements - pand - scik mat Notes The function uses pand for data manipulation sklearn's CountVectorizer for text vector mat for plotting- A pred list stopwords is used filter common but insignificant from histExamples >>> ax task_func('textdata.csv print Axes(0125011;0775x077 >>> result',output_plot None\n    \"\"\"\n    # Read the CSV file\n    df = pd.read_csv(file_path)\n\n    # Split the text into words\n    vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n    X = vectorizer.fit_transform(df['Text'])\n\n    # Get the frequency of each word\n    word_freq = X.toarray().sum(axis=0)\n\n    # Get the top 10 most common words\n    top_words = vectorizer.get_feature_names_out()\n    top_words = [word for word in top_words if word_freq[0, top_words.index(word)] > 1]\n\n    # Plot the histogram\n    plt.hist(word_freq, bins=len(top_words), align='left')\n    plt.xticks(range(len(top_words)), top_words, rotation=45)\n    plt.xlabel('Words')\n    plt.ylabel('Frequency')\n\n    if save_path is not None:\n        plt.savefig(save_path)\n        return None\n    else:\n        plt.show()\n        return plt.gca()\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create DataFrame with combinations animals foods in 'animal:food formatParameters: - animals (list str, optional): A animalIf not provided defaults a pred list common animals including 'DogCatEleTLZGirBearMonK'.- foods (list str, optional): A list food names.If not provided defaults a pred list common foods including 'MeatFishGrassFInSeedsLe'.Returns: - df (pandas.Data): A Data where each row represents unique animal from 'anim list and foodsEach cell contains string in format 'animal:food'.Handling of Special Cases: - If both 'anim andfood lists empty or not provided the function returns an DataFrame- If either 'animfoods list is empty or not provided the function uses its pred list for missing parameterRequirements - pand - n itert Example >>> animalfoodpairs task_func['DogCat' ['MeatFish print Meat Fish 0 Dog:Meat Dog 1 Note - The function generates all possible the provided 'animfood using itproduct.- The resulting pairs shuff randomly to ensure variety in DataFrame layout\n    \"\"\"\n    if animals is None:\n        animals = ['Dog', 'Cat', 'Elephant', 'Giraffe', 'Monkey', 'Bear', 'Fox', 'Zebra', 'GraSS', 'Fish', 'InSeeds']\n    if foods is None:\n        foods = ['Meat', 'Fish', 'Grass', 'InSeeds', 'Le', 'T', 'Zebra']\n\n    all_pairs = [i + ':' + j for i in animals for j in foods]\n    np.random.shuffle(all_pairs)\n\n    df = pd.DataFrame(all_pairs, columns=['Animal', 'Food'])\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference in seconds each consecutive pair tim in given list, after converting them a specifiedzoneParameters: - time_strings (list str): A timestamp in the format 'dd/ HH.fff'.- timezone (str): The to which timestamp strings should convertedThis should valid timezone string, e., 'AmericaReturns: - float: The mean (average time difference in seconds each consecutive pair timIf there are less two tim list the function returns 00 Requirements - dat - pytz n Notes The function first converts each in the specified- It then calculates absolute time difference in seconds each consecutive pair tim- If the list contains less two tim the function returns 00, as there pairs to compare- If there are no time differences (e in case a single timestamp after timezone conversion it also returns 00 - The function uses n's mean function average difference.Example >>> time_strings ['30/0309 163132.1233233123 meandiff taskfunc 'America') print 610\n    \"\"\"\n    time_list = []\n    for time_string in time_strings:\n        time_list.append(datetime.strptime(time_string, '%d/%H.%f'))\n\n    time_list = [time.astimezone(pytz.timezone(timezone)) for time in time_list]\n\n    time_diffs = [(time2 - time1).total_seconds() for time1, time2 in zip(time_list[:-1], time_list[1:])]\n\n    return np.mean(time_diffs) if len(time_diffs) > 1 else 0\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes the frequency words a given text after lowerc, removing punct splitting into words plots top 10Parameters: - text (str): input analyzedReturns: - list: A tu containing 10 most words and counts- Axes: The matplot Ax object of bar chartRequirements - re - collections.Counter - matplotpyplot Example >>> commonwords, ax task_func(\"This sample text.This text contains sample words like 'text',sample andwords.\") >>> printcommon) [('sample 3text 3this 2wordsisacontlikeand)]\n    \"\"\"\n    # Removing punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Splitting into words\n    words = text.split()\n    # Counting frequency of each word\n    word_counts = Counter(words)\n    # Getting the 10 most common words\n    most_common_words = word_counts.most_common(10)\n    # Plotting the bar chart\n    fig, ax = plt.subplots()\n    ax.bar([x[0] for x in most_common_words], [x[1] for x in most_common_words])\n    ax.set_xticks([x[0] for x in most_common_words])\n    plt.show()\n    return most_common_words\n\n"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts a URL a given string and retrie title of web from thatIf no valid URL or the URL does result successful web fetch returns an appropriate messageParameters: myString (str): The from to extract URLReturns: str: The title webpage at extracted if successful, otherwise one error messages - \"No valid URL found in the provided string.\" -Un fetch the content URL: {url}\" -No title tag found webpage Requirements - re - urllparse.urlparse - bs4.BeautS requests Example >>> task_func('Check this out: httpswwwgoogle') 'Google' taskNo URL here')No valid.' taskCheck broken linkthisdoesexist12345Un httpsthis'\n    \"\"\"\n    # Check if the string is a URL\n    if not re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[^&+]|[^?%^=]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', myString):\n        return \"No valid URL found in the provided string.\"\n\n    # Extract the URL\n    url = myString\n\n    # Fetch the content\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException as e:\n        return \"Unable to fetch the content URL: {url}\".format(url=url)\n\n    # Check if the URL is successful\n    if response.status_code != 200:\n        return \"Unable to fetch the content URL: {url}\".format(url=url)\n\n    # Parse the content\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Check if the URL has a title tag\n    title = soup.find('title')\n\n    # If the URL has a title tag, return the title\n    if title:\n        return title.text\n    else:\n        return \"No title tag found webpage\"\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses a JSON string to find a URL associated specified key, downloads file from URL saves with a tim filenameThe filename format '{unknown_key_{tim}. where ' formatted '%%%f' to include date down microThe file is saved specified or in current byParameters: - json_data (str): as, expected contain a key directly linked a URL- unknown_key (str): The used extract URL JSON data- save_dir (str, optional): The downloadedIf not specified the file is saved currentDefaults to None.Returns: str: The absolute path of downloaded, reflecting where has savedRequirements - json - requests os dat. Example >>> json_strunknownhttpsexamplefile.txt filepath task_funcunknown printf\"Downloaded file saved at {file\")\n    \"\"\"\n    if not save_dir:\n        save_dir = os.getcwd()\n\n    data = json.loads(json_data)\n    url = data.get(unknown_key)\n\n    if not url:\n        raise ValueError(f\"No URL found for key: {unknown_key}\")\n\n    filename = f\"{unknown_key}_{datetime.now().strftime('%Y%m%d%H%M%S%f')}.txt\"\n    filepath = os.path.join(save_dir, filename)\n\n    response = requests.get(url)\n\n    with open(filepath, 'wb') as f:\n        f.write(response.content)\n\n    return filepath\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Ext phone given URL or local saves specified in JSONParameters - urlstr): webpage scrape or the local path pref 'file://- output_path (str): where extracted phone numbers saved in JSONReturns: - list: A strings each representing found phoneRequirements - bs4 requests re - json Example >>> taskfunc('file://pathlocalfileoutput ['+1 (234 567 8901',44 1234 567890\n    \"\"\"\n    if url.startswith('file://'):\n        with open(url[len('file://'):], 'r') as f:\n            data = f.read()\n    else:\n        response = requests.get(url)\n        data = response.text\n\n    soup = bs4.BeautifulSoup(data, 'html.parser')\n\n    phone_numbers = re.findall(r'\\(?\\d{3}\\s?\\d{3}\\s?\\d{4}\\)?', soup.text)\n\n    result = []\n    for number in phone_numbers:\n        result.append('+1' + number.replace(' ', '').replace('-', '').replace('.', ''))\n\n    with open(output_path, 'w') as f:\n        json.dump(result, f)\n\n    return result\n"}
