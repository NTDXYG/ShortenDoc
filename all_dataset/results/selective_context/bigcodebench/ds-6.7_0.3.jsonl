{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download all files a specific on an FTP using w in subprocessArgs ftserver (str): The FTP address.Default is 'ft.dlptest'.ft_user (str): The FTP username.Default is 'dlpuser'.ft_password (str): The FTP server passwordDefault is 'rNrKYTX9g7z3RgJRmxWuGHbeu'.ft_dir (str): The path on FTP from files needDefault is '/fttest'.Returns: List[str]: A fil that were attempted downloaded FTPRaises: Exception: - If there failure in connecting FTP.Outputs the message \"F connect FTP {ftserver}: {str(e - If there failure in logging into.Outputs the message \"F log into FTP {ftserver with user}: {str(e - If there failure in changing to specified directory.Outputs the message \"F change to directory {ftdir on server {server}: {str(e Requirements - subprocess - ftpl os Example >>> task_func() ['file1jpg...\n    \"\"\"\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(ftp_user, ftp_password)\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"F connect FTP {ftp_server}: {str(e)}\")\n        return\n\n    try:\n        files = ftp.nlst()\n    except Exception as e:\n        print(f\"F log into FTP {ftp_server with user}: {str(e)}\")\n        return\n\n    try:\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"F change to directory {ftp_dir on server {ftp_server}: {str(e)}\")\n        return\n\n    try:\n        for file in files:\n            with open(file, 'wb') as f:\n                ftp.retrbinary('RETR '+ file, f.write)\n    except Exception as e:\n        print(f\"F download file {file} from {ftp_server}: {str(e)}\")\n        return\n\n    ftp.quit()\n    return files\n"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute a list shell read from a CSV and save the outputs in separateEach command's output written unique file in specified outputIf a command fails the error along exit is app respective output fileParameters: - commands_file_path (str): Path CSV containing shell in first columnThe file should not have headers.- output_dir_path (str): Path where the outputs of commands will savedIf the directory does it created.Requirements: - subprocess - csv os Raises: FileNotError If the commands_file_path does.Returns: - list str: A list paths the output files created in output directory, each named as 'command_X_output.', where command index.If a command execution fails the output file will contain a descriptive error and the exit.Example: >>> task_func(\"comm.csv \"/pathoutput_directory\") ['//command_1_output.txt '/...\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"The file {commands_file_path} does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    with open(commands_file_path, 'r') as file:\n        reader = csv.reader(file)\n        commands = [row[0] for row in reader]\n\n    output_files = []\n    for i, command in enumerate(commands):\n        output_file_path = os.path.join(output_dir_path, f'command_{i+1}_output.txt')\n        output_files.append(output_file_path)\n\n        with open(output_file_path, 'w') as file:\n            try:\n                subprocess.run(command, shell=True, check=True, stdout=file, stderr=subprocess.STDOUT)\n            except subprocess.CalledProcessError as e:\n                file.write(f'Error: {str(e)}')\n\n    return output_files\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if a particular process based its nameIf it is not running start using process name as a commandIf it is running, terminate process by executing process name as aParameters - process_ (str): check and manageThis should executable as command.Returns: - str: A message indicating action taken: \"Process notStarting <process_.\" - \"Process foundRestart <process_.\" Requirements - sub - psutil time Example >>> taskfunc('not \"Process not foundStarting notepad.\" OR >>> taskfunc('not \"Process foundRestart notepad.\"\n    \"\"\"\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            subprocess.Popen(['taskkill', '/F', '/IM', process_name])\n            return f\"Process foundRestart {process_name}.\"\n    subprocess.Popen([process_name])\n    return f\"Process not foundStarting {process_name}.\"\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including sub located the specified and returns path created zipParameters: directory (str): The path containing files zReturns: str: The path generated zipReturns None if the directory does contain any filesRaises: FileNotFoundError if the specified directory does Requirements - os - glob - zipfile Notes - The zip name always 'files.zip Example >>> path task_func('/pathfiles') isinstance str True\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory {directory} does not exist.\")\n\n    files = glob.glob(directory + '/*')\n\n    if not files:\n        return None\n\n    zip_name = 'files.zip'\n    zip_path = os.path.join(directory, zip_name)\n\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            zipf.write(file, arcname=os.path.basename(file))\n\n    return zip_path\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing URLs and plot it.Parameters: - text (str): The to analyzeReturns: WordCloud object: The generated word cloud.Raises: ValueError(\"No words available to generate a word cloud after removing URLs.\"): If there are. Requirements - re - word.Word - matplot.pyplot Example >>> print(task_func('Visit httpswwwpython for more info.Python is great.I love Python.').words_) {'Python': 1.0Visit': 0.5info 0greatlove} >>> print(task_func('Check out this link: httpwwwexample.Machine learning is fascinating.').words_) {'Check': 1.0link 1Machine': 1learningfascinating}\n    \"\"\"\n    # Remove URLs from text\n    text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n\n    # Split text into words\n    words = text.split()\n\n    # Check if there are words left\n    if not words:\n        raise ValueError(\"No words available to generate a word cloud after removing URLs.\")\n\n    # Create word cloud\n    wordcloud = WordCloud(width=800, height=400, max_font_size=200, background_color='white').generate(' '.join(words))\n\n    # Plot word cloud\n    plt.figure(figsize=(10, 7))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis('off')\n    plt.show()\n\n    return wordcloud\n\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train a random forest classifier to perform the classification of the rows in dataframe with respect column of plot the bar plot of feature importance of each column in- The xlabel of the bar plot should 'Feature Importance Score', the y 'Features' and titleVisualizing Important'.- Sort the feature importances in a descending.- Use the feature importances on x- and the feature namesParameters: - df (pandas.Data : Dataframe containing data to classify- target_column (str : Name.Returns: - sklearn.modelRandomForestClassifier : The random trained on input data- matplot.axesAx: The Ax object of the plotted data.Requirements: - pand - sk.ense seab mat.pyplot Example >>> dataDataFrame{\"X\" [- 3 5 -4 7 2],label\": [0 1 0] model, ax task_funcdata \"label\") printdata.head(2 X label 0 -1 0 1 3 1 >>>model) RandomForestClass(randomstate=42\n    \"\"\"\n    X = df.drop([target_column], axis=1)\n    y = df[target_column]\n\n    model = RandomForestClassifier(random_state=42)\n    model.fit(X, y)\n\n    feature_importances = pd.DataFrame(model.feature_importances_, index=X.columns, columns=['importance']).sort_values('importance', ascending=False)\n\n    fig, ax = plt.subplots()\n    sns.barplot(x=\"importance\", y=feature_importances.index, data=feature_importances, ax=ax)\n\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n\n    return model, ax\n\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates Flask application with configured user authentication using Flask-LoginIt defines routes for login, log a protected pageThe user authentication is managed with a simple User class and a login form using Flask-WTFThe application uses dynamic configuration for security and template renderingParameters: secretkey (str): A secret for application for session managementtemplate_folder (str): The path directory Flask templatesRequirements - flask - flask_loginwtf wtforms.validatorserk.security Returns Flask: A Flask application instance configured for userExamples >>> app task_func('mysecretkeytem') 'login in [rule.end for appurl_map.iter_rules() Trueconfig['SEC ==\n    \"\"\"\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    class User(UserMixin):\n        def __init__(self, username, password):\n            self.id = username\n            self.password = password\n\n        def check_password(self, password):\n            return check_password_hash(self.password, password)\n\n    users = [User('admin', generate_password_hash('password'))]\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = next((u for u in users if u.id == form.username.data), None)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n        return render_template('login.html', form=form)\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return 'Logged in as: ' + current_user.id\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return 'You are now logged out.'\n\n    return app\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outl from a specified column of a dataset based the Z-.It standardizes the column, calculates Z-sc, removes data points where the Z exceeds a threshold.The function also visual the data before and outlier removal.Parameters: data (ndarray): The dataset.column (int): The index of the column to analyze for outl.outlier_z_score (float): The Z- threshold to identify outl.Returns: tuple: A tuple containing the original data, the data without outl the indices of outlRequirements: - numpy - mat.pyplot - sc.stats - sk.preprocessing.StandardScaler Notes The function plots two scatter: 'Data with Outl' shows the original data including outl, while without displays the data after removing based the provided Z thresholdThis visual comparison helps illustrate the impact outlier removal on the dataset.Examples: >>> data = nparray[14 25],1 22],7 8100 200]]) column 1 lentask_func(data, column, 3.0 3 >>> isinstancetask(, column, 3)[0], npnd) True is)[1 is tuple)\n    \"\"\"\n    # Standardize the data\n    scaler = StandardScaler()\n    data_std = scaler.fit_transform(data)\n\n    # Calculate Z-scores\n    z_scores = stats.zscore(data_std)\n\n    # Identify outliers\n    outliers = np.where(np.abs(z_scores) > outlier_z_score)\n\n    # Remove outliers\n    data_no_outliers = np.delete(data, outliers)\n\n    # Plot data before and after outlier removal\n    plt.figure(figsize=(12, 6))\n\n    plt.subplot(1, 2, 1)\n    plt.scatter(np.arange(data.shape[0]), data[:, column])\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n\n    plt.subplot(1, 2, 2)\n    plt.scatter(np.arange(data_no_outliers.shape[0]), data_no_outliers[:, column])\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n\n    plt.tight_layout()\n    plt.show()\n\n    return data_no_outliers, outliers\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-me clust on a dataset and generate scatter visual clusters and their centroParameters: data (pd.DataFrame): The dataset to be clustered, where rows samples and featuresn_clusters (int): The to form.Must be greater 1Defaults to 3.Returns: tuple: - npnd: An cluster labels assigned each sample- plt.Axes: An Axes object with the scatter plot showing clusters and centro.Raises: ValueError: If 'data a pd.DataFrame.ValueError If 'n_clusters an integer greater 1.Requirements: - numpy - pand mat sk Example >>> nprandomseed42) >>> data pDataFramenp(100 2), columns['Feature1' _, ax task_func 3 axgettitle 'K-Me Cl\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=kmeans.labels_)\n    ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red')\n    ax.set_title('K-Means Clustering')\n\n    return kmeans.labels_, ax\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component ( a dataset and record result.Also, generates a scatter transformed dataParameters: data (DataFrame): The dataset.n_components (int): The number principal to calculateDefault is 2Returns: DataFrame: The transformed with principal components.Axes: The matplot Ax object containing scatter plot.Raises: ValueError: If n_components is a positive.Requirements: - numpy - pand mat. sk.decom Example >>> data pDataFrame([[14 25],1 227 8] columns=Column' transformed_data, plot task_func\n    \"\"\"\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    explained_variance_ratio = pca.explained_variance_ratio_\n    df = pd.DataFrame(transformed_data, columns=[f'PC{i+1}' for i in range(n_components)])\n\n    fig, ax = plt.subplots(figsize=(6, 6))\n    ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n    ax.set_xlabel(f'Principal Component 1 ({explained_variance_ratio[0]*100}%)')\n    ax.set_ylabel(f'Principal Component 2 ({explained_variance_ratio[1]*100}%)')\n    ax.set_title('2D PCA')\n\n    return df, ax\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws a seaborn pair plot of the iris dataset using Arial font.This function sets global font to A for better read and visual appealIt then generates pair plot from iris dataset, where each sub represents relationship two features, colored by speciesThe plot includes the title 'Iris Dataset Pair Plot labels for each feature on axesParameters: None Returns pltFigure: A mat Figure object containing seaborn pair plot of ir datasetThe plot has 'Iris Dataset Pair Plot as itsEach subplot's axes labeled the corresponding feature names, such 'sepal length (cm widthpet andpetRequirements - matplot.pyplot - pand - seab sk.datas Example >>> fig task_func() type( <classmatfigure.Figure\n    \"\"\"\n    iris = load_iris()\n    iris_data = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    iris_data['species'] = iris.target\n    iris_data['species'] = iris_data['species'].map({0: iris.target_names[0], 1: iris.target_names[1], 2: iris.target_names[2]})\n\n    sns.set(style=\"ticks\", color_codes=True)\n    plt.rcParams[\"font.family\"] = \"Arial\"\n\n    g = sns.pairplot(iris_data, hue='species', palette='Dark2')\n    g.fig.suptitle(\"Iris Dataset Pair Plot\", y=1.08)\n\n    return plt.gcf()\n\nfig = task_func()\nfig.show()\n"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates a plot random time series data for the past 30 with reproduc controlled an optional seed parameterThe plot is styled with Arial font for better readParameters: seed (int, optional): Seed for the random number to ensure reproducDefaults to 42.Returns: matplotaxesAx: The Ax object containing a line plot of time series dataThe plot will have 'Date' as x label, 'ValueRandom Time Series Data titleRaises: ValueError: If there an issue generating the data or plot.Requirements: - matplot.pyplot - pand - random - dat Example >>> ax task_func() >>>gettitle() 'Random Time Series DataxlabelDateylValue\n    \"\"\"\n    random.seed(seed)\n\n    # Generate date range\n    date_range = pd.date_range(start='01-01-2022', end='30-01-2022')\n\n    # Generate random data\n    data = [random.randint(1, 100) for _ in range(30)]\n\n    # Create dataframe\n    df = pd.DataFrame(data, index=date_range, columns=['Value'])\n\n    # Plot data\n    try:\n        ax = df.plot(kind='line', figsize=(10, 6), fontsize=12, title='Random Time Series Data', legend=False)\n        ax.set_xlabel('Date', fontsize=12)\n        ax.set_ylabel('Value', fontsize=12)\n    except Exception as e:\n        raise ValueError(f\"There was an issue generating the data or plot: {e}\")\n\n    return ax\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw the correlation heatmap of Boston Housing dataset using Seaborn, with an option save it specifiedParameters: seed (int, optional): Random for reproducDefaults to 42The font should in the family sans and AReturns: matplotaxesAx: The Ax object containing heat plotRaises: ValueError If an error in generating or saving the plot.Requirements - matplot - os - pand seab n Example >>> ax task_func() >>> type(ax <classmataxes._axAx\n    \"\"\"\n    np.random.seed(seed)\n    try:\n        data = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n        data.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n        corr = data.corr()\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr, annot=True, cmap='coolwarm')\n        plt.title('Correlation heatmap of Boston Housing dataset')\n        plt.xlabel('Features')\n        plt.ylabel('Features')\n        plt.show()\n    except Exception as e:\n        raise ValueError(f\"An error occurred: {e}\")\n\ntask_func()\n"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes a time series in the 'value' column of a Data into trend, seasonality residualParameters: df (DataFrame): The Data with columns 'group',date andvalue'.freq (str, optional): Frequency of the time series data.Defaults to 'D' (daily).decom_model (str optional): Type of decom.Options are 'additive ormultipl'.Defaults to 'multiplicative'.Returns: tuple: A tuple containing the decom result (DecomposeResult object and the matplot Axes objectRaises: ValueError: If 'df' a DataFrame, lacks required columns, or contains invalid data types.ValueError If 'freq not a valid frequency string.ValueError If 'decom_model not 'additive' ormultipl'.Requirements: - pand - mat.pyplot - statsmodelstsa.seasonal Example >>> df pData({...\"group\": [\"A\"] * 14,...\"date\": pd.to_dat([\"202201\",20...\"2022-01-05\",2006...\"2022-01-09\",2010...\"2022-01-13\",2014\"]),...\"value\": [10, 12, 13 15 17 16 14 13 12 15 17 18 20 19],...}) >>> result, ax = task_funcdf, fre='D', decomposition_model='multiplicative') plshow() # This will display plot with title 'Time Series Dec' and y- labeled 'Value'\n    \"\"\"\n    if 'value' not in df.columns:\n        raise ValueError(\"'df' must contain a 'value' column\")\n    if 'date' not in df.columns:\n        raise ValueError(\"'df' must contain a 'date' column\")\n    if 'group' not in df.columns:\n        raise ValueError(\"'df' must contain a 'group' column\")\n    if not isinstance(freq, str):\n        raise ValueError(\"'freq' must be a string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"'decomposition_model' must be 'additive' or 'multiplicative'\")\n\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n    df = df.groupby('group')['value'].resample(freq).mean().reset_index()\n    df.sort_values(by=['group', 'date'], inplace=True)\n    df.set_index('date', inplace=True)\n\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, freq=freq)\n\n    fig, ax = plt.subplots(4, 1, figsize=(10, 10))\n    decomposition.observed.plot(ax=ax[0])\n    ax[0].set_ylabel('Observed')\n    decomposition.trend.plot(ax=ax[1])\n    ax[1].set_ylabel('Trend')\n    decomposition.seasonal.plot(ax=ax[2])\n    ax[2].set_ylabel('Seasonality')\n    decomposition.resid.plot(ax=ax[3])\n    ax[3].set_ylabel('Residuals')\n    plt.suptitle('Time Series Decomposition')\n\n    return decomposition, ax\n\ndf = pd.DataFrame({\n    \"group\": [\"A\"] * 14,\n    \"date\": pd.to_datetime([\"2022-01-01\", \"2022-01-02\", \""}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate a pand Series of random dates within specified date, including both start_, with an optional seed for reproducThe function creates series dates randomly selected between the specified start, inclusiveIt allows specifying a seed for the random to ensure reprodu results, making suitable simulations or tests requiring consistencyParameters: - start_date (dat., optional): The start of range.Defaults to January 1 2020- end_date (dat., optional): The end of range.Defaults to December 31 2020- seed (int, optional): Seed for the random number to ensure reproducDefault is 42Returns: - pand.Series: A Series object containing random dates within the specified, with each being a dat.dat objectThe series length matches number days in specified rangeRaises: - ValueError If 'start_date orend a dat.dat instance or later'.Note The start_date and are inclusive, meaning both dates considered as potential values in generated seriesThe default seed value 42, ensuring results reprodu by default unless a different specified by userRequirements: - pand - datetime - random Example >>> dates task_funcseed=123) printdates.head # Print the first 5 dates from series 0 2020-27 1 20200517021407270516 dtype: dat64[ns]\n    \"\"\"\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"Both start_date and end_date must be datetime instances or later\")\n    if start_date > end_date:\n        raise ValueError(\"start_date must be earlier or equal to end_date\")\n\n    random_seed(seed)\n\n    n_days = (end_date - start_date).days + 1\n    dates = [start_date + timedelta(days=randint(0, n_days - 1)) for _ in range(n_days)]\n\n    return pd.Series(dates, name=\"dates\")\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify a list by adding the element '12', then conc a number CSV from a directory into single DataThe number files conc is determined sum numbers in listParameters: mylist (list): The input, which is modified in placefile_dir (str, optional): The directory search CSVDefaults to './data_files/'.file_ext (str optional): The of files concDefaults to '.csv'.Returns: DataFrame: A pand Data concating data the selected CSV filesRaises: TypeError If 'my_list a list.FileNotError If no files specified.Requirements - pand - os - glob Example >>> createdummycsv() >>> mylist [1 df task_func print.head A B 0 0 3 1 1 4 2 5 0 3 4 1 4 >>> tearDown_d()\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n    my_list.append('12')\n\n    all_files = glob.glob(file_dir + '*' + file_ext)\n    if not all_files:\n        raise FileNotFoundError(\"No files specified\")\n\n    li = []\n    for filename in all_files:\n        df = pd.read_csv(filename, index_col=None, header=0)\n        li.append(df)\n\n    return pd.concat(li, axis=0, ignore_index=True)\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list by app the number 12, then generates random integers based sum elements in '', limited by 'size'.It measures the time taken for this process and plots a hist generated random numbersThe size random numbers list determined sum numbers in 'my_list', with an upper set 'size'.The random integers are within 1 to 100, inclusiveParameters: - my_list (list): The input containing numeric elements- size (int): Maximum limit the generated list of random numbersDefault is 100.- seed (int): Seed value for random number for reproducDefault is 100.Returns: - tuple: A containing time taken to generate list (in, as a float and matplot Axes object for the histThe histogram's x is labeled 'Number', representing range random integers, andF', frequency each integer in generated listRaises: - TypeError If 'my_list a list.- ValueError If 'my_list contains elements numeric (int or float).The histogram plots distribution the random numbers generated, with number range (1- on x countfrequency of each numberRequirements: - random - time - matplot.pyplot Example >>> mylist [2 3 5] time_taken, ax task_funcmy printtypetime # Example output <class 'float'> <classfloat >>> axgettitle Returns 'Histogram Random Numbers 'Hist\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list.\")\n    if not all(isinstance(i, (int, float)) for i in my_list):\n        raise ValueError(\"'my_list' must contain only numeric elements.\")\n\n    start_time = time.time()\n    random_seed(seed)\n    my_list.append(12)\n    sum_list = sum(my_list)\n    random_numbers = [randint(1, 100) for _ in range(size) if sum_list >= randint(1, 100)]\n    end_time = time.time()\n    time_taken = end_time - start_time\n\n    fig, ax = plt.subplots()\n    ax.hist(random_numbers, bins=range(1, 101), align='left', edgecolor='black')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Numbers')\n\n    return time_taken, ax\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape the first table from a web and extract data into Pand DataThis function scrap first table found on specified web URL and extracts data into Data, where each in corresponds table row (<tr>) from web, each represents the data contained table data elements (<td of that rowThe DataFrame's columns named table's header row (<th> elements), if presentIf the table lacks headers the Data's columns remain unnamedParameters: - url (str): webpage scrapeDefaults to 'httpexample'.Returns: - pd.DataFrame: A Data containing scrap table, with rows corresponding table rows and named after table headers, if availableRaises: - ConnectionError If there an issue connecting URL.- requests.HTTPError If the HTTP request to the URL fails.- ValueError If no table data found on page or content cannot parsed.Note Assumes the webpage contains at table and attempts parse the first table encounteredRequirements - pand - requests bs4 Example >>> df task_func('httpsenListcount_byGDP_(nom) print( 0 0 1 Larg economies by (nom...\n    \"\"\"\n    # Send HTTP request\n    response = requests.get(url)\n    # If the response was successful, no Exception will be raised\n    response.raise_for_status()\n\n    # Parse the content of the response with BeautifulSoup\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Find the first table in the webpage\n    table = soup.find_all('table')[0]\n\n    # Find all the rows of the table\n    rows = table.find_all('tr')\n\n    # Create an empty list to hold the data\n    data = []\n\n    for row in rows:\n        # Find all the data in each row\n        cols = row.find_all('td')\n\n        # For each row, create an empty list\n        cols = [col.text.strip() for col in cols]\n\n        # Append the list of data to the data list\n        data.append(cols)\n\n    # Create a pandas DataFrame from the data\n    df = pd.DataFrame(data)\n\n    # If the table has headers, use them as the column names\n    if table.find_all('th'):\n        headers = [th.text.strip() for th in table.find_all('th')]\n        df.columns = headers\n\n    return df\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw hist of numeric columns in a Data and return the plots.Each hist represents the distribution values in one numeric column, with the column name as the plot title, 'Value' x labelFrequencyParameters: - df (DataFrame): The Data containing data.Returns: - list: A list Matplot Axes objects, each representing hist for a numeric column.Raises: - ValueError If the input is not a nonempty DataFrame or if there are numeric columns in Data.Requirements: - pand - numpy mat. Example >>> df pData({'A nprandomnormal(0, 1, 100exponential1 100) axes task_funcdf) for ax...plt.show()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input should be a nonempty DataFrame\")\n\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n\n    if not numeric_cols.any():\n        raise ValueError(\"There are no numeric columns in Data\")\n\n    axes = []\n    for col in numeric_cols:\n        ax = df[col].hist(bins=10)\n        ax.set_title(col)\n        ax.set_xlabel('Value')\n        ax.set_ylabel('Frequency')\n        axes.append(ax)\n\n    return axes\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans a specified IP range and checks a specified port open on each IP.The function returns dictionary with IP as keys a boolean indicating the port's status (True if openParameters: ip_range (str): range scan, in CID notationport (int): The port number to check on each IP in range.Returns: dict: A dictionary mapping IP their port status (True if open).Examples >>> result task_func('1920 80 isinstance dict True all(iskey str andvalue bool for result.items True Requirements - socket - ipaddress.IPvNetwork - thread.Thread\n    \"\"\"\n    result = {}\n    for ip in IPv4Network(ip_range):\n        t = Thread(target=scan_port, args=(ip, port, result))\n        t.start()\n    return result\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information such message type timestamp the message itself a log and stores the data CSV formatThis utility is ideal converting plain logs a more s tructured that can easily analyzedThe log is the format 'TYPE: [TIM (YY HH)] - MES'.Parameters: log_file (str): The path the that needs parsedReturns: str: The file path the newly CSV which contains structured log dataRequirements: - re - pand - datetime Ra: ValueError If the timestamp in any log entry invalid or if no valid log entries.Example >>> output_path taskfunc('serverlog') print( log_data.csv\n    \"\"\"\n    # Regular expression to match log entries\n    pattern = r\"(\\w+): \\[(.*)\\] - (.+)\"\n\n    # List to store log entries\n    log_entries = []\n\n    # Open the log file and read each line\n    with open(log_file, 'r') as file:\n        for line in file:\n            match = re.match(pattern, line.strip())\n            if match:\n                log_type, timestamp, message = match.groups()\n                try:\n                    # Convert timestamp to datetime object\n                    timestamp = datetime.strptime(timestamp, '%y %H %M')\n                except ValueError:\n                    raise ValueError(f\"Invalid timestamp in log entry: {line.strip()}\")\n                log_entries.append({\n                    'log_type': log_type,\n                    'timestamp': timestamp,\n                    'message': message\n                })\n\n    # Check if there are any valid log entries\n    if not log_entries:\n        raise ValueError(\"No valid log entries found in the file.\")\n\n    # Convert the log entries to a pandas DataFrame and save it to a CSV file\n    df = pd.DataFrame(log_entries)\n    output_file = log_file.split('.')[0] + '_data.csv'\n    df.to_csv(output_file, index=False)\n\n    return output_file\n\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes and visual the distribution word lengths a textThe function generates hist subplot, facilitates the understanding how word lengths vary within the provided textParameters: text (str): The string from word lengths will calculatedrwidth (float, optional): Spec relative bar in the histDefaults to 0.8. Returns: matplotaxesAx: An Ax object containing the hist word lengthsRequirements: - re - matplot - n Note If there no words input text or all words filtered the hist be empty as no bins will createdExample >>> mat >>> ax task_func('Hello world, this a test sentence.' isinstance(ax mataxAx True\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    lengths = [len(word) for word in words]\n\n    fig, ax = plt.subplots()\n    ax.hist(lengths, bins='auto', rwidth=rwidth)\n    ax.set_xlabel('Word length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word length distribution')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Extracts articles whose titles contain specific case-ins keywords (\"like\"what\") a DataFrame and analy frequency each word in content of these, excluding punct.Parameters: df (DataFrame): Data containing columns 'Title'Content' with article dataReturns: dict: A dictionary with keys as words and their corresponding frequency, excluding any punct marksRequirements: - re - nltk - string Raises: Value If the DataFrame is empty or does the necessary columns 'TitleContent'.Example: >>> pand data = {'Title ['What happening',Nothing special'Content ['Like what you?Just normal text.']} dfData task_func(df {'Like': 1what': 1yousee\n    \"\"\"\n    if df.empty or 'Title' not in df.columns or 'Content' not in df.columns:\n        raise ValueError(\"DataFrame is empty or does not contain necessary columns 'Title' and 'Content'\")\n\n    # Extract articles whose titles contain specific case-ins keywords\n    df = df[df['Title'].str.contains(r'\\blike\\b', case=False)]\n\n    # Combine title and content\n    df['Combined'] = df['Title'] + ' ' + df['Content']\n\n    # Tokenize combined text\n    tokens = nltk.word_tokenize(df['Combined'].str.lower())\n\n    # Remove punctuation\n    tokens = [token for token in tokens if token not in punctuation]\n\n    # Calculate frequency of each word\n    word_freq = nltk.FreqDist(tokens)\n\n    return word_freq\n\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares and transforms text data from a specified column in Data by removing stopwords, numbers punct, and subsequently applying a vectorization process convert text into a numeric format suitable analysisParameters: dataframe (Data): A pand Data containing the text data.text_column (str): The name from text will processedReturns: DataFrame: Returns a Data with each word (after pre as column and their count as rowsRequirements: - pand - re - sk Example >>> df = pData({'text ['This is test.',Python is cool!',nltk and sk useful for text analysis] result task_func 'text') print.to(index=False analysis cool n python sk test text useful 0 0 1 0 1 1 1 1 1\n    \"\"\"\n    # Remove punctuation and convert to lower case\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'[^\\w\\s]', ' ', x).lower())\n\n    # Remove stopwords\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n\n    # Vectorize the text\n    vectorizer = CountVectorizer()\n    vectorized_text = vectorizer.fit_transform(dataframe[text_column])\n\n    # Convert the vectorized text to a DataFrame\n    vectorized_df = pd.DataFrame(vectorized_text.toarray(), columns=vectorizer.get_feature_names_out())\n\n    # Merge the original DataFrame with the vectorized DataFrame\n    dataframe = pd.concat([dataframe.reset_index(drop=True), vectorized_df.reset_index(drop=True)], axis=1)\n\n    return dataframe\n\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create GeoPandas DataFrame for a list cities with randomly coordinates based specified rangesParameters: dic (dict): Dictionary with 'Lon' andLat keys, each a tuple (min for coordinate range.Default: {'Lon': (-180 180Lat90)} cities (list): List city.Default: ['New',LondonBeTokS'] Returns GeoDataFrame: A GeoPandas Data containing 'City'Coord (Point objects).Raises: ValueError If 'Lon' orLat keys missing in dictionary or their values tu.Requirements: - numpy - geopandas shapely.ge Example >>> dic = {'Lon': (-180 180Lat90)} gdf task_func\n    \"\"\"\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"'Lon' and 'Lat' keys must be in the dictionary\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"'Lon' and 'Lat' values must be tuples\")\n\n    lon_range = dic['Lon']\n    lat_range = dic['Lat']\n\n    np.random.seed(0)\n    lons = np.random.uniform(lon_range[0], lon_range[1], len(cities))\n    lats = np.random.uniform(lat_range[0], lat_range[1], len(cities))\n\n    geometry = [Point(xy) for xy in zip(lons, lats)]\n    df = gpd.GeoDataFrame(cities, geometry=geometry)\n\n    return df\n\ndic = {'Lon': (-180, 180), 'Lat': (-90, 90)}\ncities = ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']\ngdf = task_func(dic, cities)"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Generate a weather report for specified cities at a given UTC datParameters: - utc_dat (dat): The UTC for which weather report to generated, with tzinfo set UTC- cities (list of str): Cities for which the weather report is generated.Default: ['New York',LondonBeTokS'] - weather_conditions (list of str): Possible weather to choose for the report.Default: ['Sunny',CloudRainSnowStorm - timez (dict): A mapping city names to their respectivezDefault provided for the default cities.- seed (int): The seed value for random number to ensure reproducDefault: 42 Returns - pand.DataFrame: A Data containing the weather report.Columns include: - 'City': The name.- 'Local Time': The local of the weather report for the city, formatted as 'YY- HH: ZZZ (ZZZ is the timezone abbre).- 'Weather Condition': The weather condition in the city at given local.Raises: - ValueError If utc_dat is a dat object or if any other parameters are in expected format.Requirements: - pand - pytz datetime - random Example >>> utc_time = dat(2023 1 1, 12, 0 0 tzinfo=py.UTC) report = task_funcut) print( City Local Time Weather Condition 0 New York 2023-01 0700: EST Sunny 1 London 20 12 GMT Sunny Beijing 20 CST Rainy 3 Tokyo 21 J Cloud Sydney 23 AEDT Cloud\n    \"\"\"\n    if not isinstance(utc_datetime, datetime) or utc_datetime.tzinfo != pytz.UTC:\n        raise ValueError(\"utc_datetime should be a datetime object with UTC timezone\")\n\n    set_seed(seed)\n\n    report = []\n    for city in cities:\n        local_tz = pytz.timezone(timezones[city])\n        local_time = utc_datetime.astimezone(local_tz)\n        report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M %Z (%Z)'),\n            'Weather Condition': weather_conditions[randint(0, len(weather_conditions) - 1)]\n        })\n\n    return pd.DataFrame(report)\n\nutc_time = datetime(2023, 1, 1, 12, 0, 0, tzinfo=pytz.UTC)\nreport = task_func(utc_time)"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate and draw a random sequence \"e number of steps.The steps are either -1 or 1, and the sequence is plotted as a random walk.Returns the descriptive statistics the random walk and the plot of random walk.The descriptive statistics include count, mean standard minimum 5th percentile 25 median 75 95 and maximumParameters: elements (int): The number steps in random walk.seed (int): The seed for the random numberDefault is 0Returns: dict: A dictionary containing the descriptive statistics the random walk.matplotaxesAx: The Ax object with the plotted random walk.Requirements: - numpy - mat.plot - pand Ra: Value If elements is a positive.Example: >>> stats, ax = task_func1000) print(stats) {'count 1000.,mean 1818std': 9516415405086212,min': -505% 1025 11050 2075 2695 31max 36}\n    \"\"\"\n    np.random.seed(seed)\n    random_walk = np.random.choice([-1, 1], size=elements)\n    random_walk_series = pd.Series(random_walk)\n    random_walk_series = random_walk_series.cumsum()\n\n    stats = random_walk_series.describe()\n\n    fig, ax = plt.subplots()\n    ax.plot(random_walk_series)\n    ax.set_xlabel('Steps')\n    ax.set_ylabel('Random Walk')\n    ax.set_title('Random Walk of ' + str(elements) + ' steps')\n\n    return stats, ax\n\n\nstats, ax = task_func(1000)"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and keep a zip from a URL, extract its the specified directory return the list extractedParameters: url (str): The of zip to downloaddestination_directory (str): The directory where contents zip extractedheaders (dict, optional): Custom headers to be included the requestDefaults to {'accept 'applicationoct'}.Returns: list: A list fil of the extracted files.Requirements: - requests - os - zipfile Example >>> extracted_files = task_func(\"httpsexampledata.zip\", \"/pathdest\") printext ['file1txtcsv']\n    \"\"\"\n    if headers is None:\n        headers = {'accept': 'application/octet-stream'}\n\n    response = requests.get(url, headers=headers, stream=True)\n\n    if response.status_code == 200:\n        # Get the zip file name from the URL\n        zip_file_name = os.path.basename(url)\n\n        # Create the full path to the zip file\n        zip_file_path = os.path.join(destination_directory, zip_file_name)\n\n        # Write the zip file to the destination directory\n        with open(zip_file_path, 'wb') as f:\n            f.write(response.content)\n\n        # Extract the zip file\n        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n            zip_ref.extractall(destination_directory)\n\n        # Get a list of the extracted files\n        extracted_files = zip_ref.namelist()\n\n        return extracted_files\n    else:\n        print(f\"Failed to download the file. Status code: {response.status_code}\")\n        return None\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Gener random RGB image and view.Parameters - seed (int optional): Random for reproducDefault is 42- image_size (tuple optional): Size generated (height channelsDefault is (100, 100 3- range_low (int, optional): Lower bound of random rangeDefault is 0- range_high (int optional): Upper bound randomDefault is 255Returns: - ax (matplotaxesAx): Ax object of plot- image (numpynd): The n of generated imageRaises: - ValueError If range_low less range.Requirements - random - numpy open mat. Example >>> ax, image task_func()\n    \"\"\"\n    random.seed(seed)\n    np.random.seed(seed)\n\n    image = np.random.randint(low=range_low, high=range_high, size=image_size)\n\n    fig, ax = plt.subplots(1, 1)\n    ax.imshow(image)\n\n    return ax, image\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates an MxN matrix from a list L, normalizes based sound pressure level (SP a specified audio file generates spect from matrixParameters: L (list): A numbers to form the matrixM (int): The number rows matrix.N (int): The number columns matrix.audio_file (str): The path for SPL calculationReturns: numpynd: The normalized MxN matrix.matplotfigure.Figure: The figure object for the generated spectrogramRaises: FileNotFoundError If the specified audio does.Notes: The spectrogram is generated based amplitude normalized matrix, with sound pressure level (SP calculated from audio fileThe SPL is calculated using formula SPL 20 * log10sqmeandata^))) where 'data audio read fileThe spectrogram is displayed with a log for frequency and a linear time, with SPL used adjust amplitude displayed in spectRequirements: - numpy - os - soundfile librosa mat Examples >>> matrix task_func([i for100)], 10 10 'audio. # Requires 'audio to exist >>> matrixshape (10 >>> isinstance(mat npnd True\n    \"\"\"\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(f\"The specified audio file {audio_file} does not exist.\")\n\n    data, sample_rate = librosa.load(audio_file)\n    SPL = 20 * np.log10(np.sqrt(np.mean(data**2)))\n    data = np.array(L).reshape(M, N)\n    data = (data - np.min(data)) / (np.max(data) - np.min(data)) * (1 - 0) + 0\n    data = data * (10**(SPL/20))\n\n    fig, ax = plt.subplots()\n    ax.imshow(data, aspect='auto', origin='lower', extent=[0, len(data[0]), 0, len(data)])\n    ax.set_ylabel('Frequency Bin')\n    ax.set_xlabel('Time')\n    ax.set_title('Spectrogram')\n    plt.colorbar(ax.imshow(data, aspect='auto', origin='lower', extent=[0, len(data[0]), 0, len(data)]), ax=ax)\n\n    return data, fig\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    Given a list tu, extract numeric, compute basic statistics generate a hist with an overl probability density function (PDF).Parameters: original (list tu): Input list where each's second element a numericReturns: nparray: A numpy of the extracted numericdict: Basic statistics for the array including mean, minimum and.Axes: A matplot Ax object showing hist with overlaid PDF.The histogram is plotted with density set True, alpha as 06 bins set 'auto' for automatic bin selectionRequirements: - numpy - mat.plot - sc.stats Example >>> original = [('a 1),)] arr, stats, ax task_funcoriginal) printarr) [1 2] >>> printstats {'mean 25std': 1118033988749895,min': 1, 4}\n    \"\"\"\n    # Extract numeric\n    arr = np.array([i[1] for i in original if isinstance(i[1], (int, float))])\n\n    # Compute basic statistics\n    stats = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr),\n    }\n\n    # Generate a hist with an overlaid PDF\n    fig, ax = plt.subplots()\n    ax.hist(arr, density=True, alpha=0.6, bins='auto')\n    mean = stats['mean']\n    std = stats['std']\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, mean, std)\n    ax.plot(x, p, 'k', linewidth=2)\n    title = \"Histogram and PDF: mean={:.2f},  std={:.2f}\".format(mean, std)\n    ax.set_title(title)\n\n    return arr, stats, ax\n\n"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array from the \"original list, normal the array, draw the original and normalized arraysThe function will plot original and normalized arrays using mat.Parameters: original (list): The list with tu to be unz into a nReturns: nparray: A numpy for the original datanp.array: Normalized array.matplotaxesAx: Ax object with the plotted data.Requirements: - numpy - mat. - sk.preprocessing Example >>> original = [('a 1), arr, norm_arr, ax = task_funcoriginal) printarr) [1 2 >>> printnorm0.18257419 03651483754772256 073029674\n    \"\"\"\n    # Convert list to numpy array\n    arr = np.array(original)\n\n    # Normalize the array\n    norm_arr = preprocessing.normalize([arr])\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(arr, label='Original')\n    ax.plot(norm_arr, label='Normalized')\n    ax.legend()\n\n    return arr, norm_arr, ax\n\n\noriginal = [1, 2, 3, 4, 5]\narr, norm_arr, ax = task_func(original)"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    Given a dictionary \"data\", this function performs operations 1Adds a new key \"a with the value 1 to dictionary.2Generates a signal based values in \"data\".3Runs a Fast FouFF on the signal.4Plots and returns the FFT of the signal.Parameters: data (dict): The input as dictionaryReturns: tuple: A tuple containing: - nd The FFT of signal- Axes: The plot the FFT.Requirements - numpy - sc.fftpack mat Example >>> data {'key1 1 fft, ax task_func\n    \"\"\"\n    # Adding a new key to dictionary\n    data['a'] = 1\n\n    # Generating a signal based on values in dictionary\n    signal = np.array(list(data.values()))\n\n    # Running a Fast Fourier Transform on the signal\n    n = len(signal)\n    n_oneside = n//2\n    p = fftpack.fft(signal)\n    magnitude_oneside = np.abs(p[:n_oneside])\n    magnitude = np.abs(p)\n\n    # Plotting the FFT\n    fig, ax = plt.subplots()\n    freqs = sample_rate*np.arange(n_oneside)/n\n    ax.plot(freqs, magnitude_oneside)\n    ax.set_xlabel('Frequency [Hz]')\n    ax.set_ylabel('Magnitude')\n\n    return magnitude, ax\n\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates an HTTP POST handler for processing incoming dataThe data is expected in JSON with a key 'data'.The handler responds with 200 success message if data valid, or an otherwiseThe type the response can retrieved as 'content and the length ascontentThere two types error: 'Content header is not applicationjsonNo data key in requestReturns: function: A class that handles HTTP POST and valid incoming dataRequirements: - cgi - http.server json Notes If the 'content header not 'application indicating the client sent a request with an unsupported format.This condition sends a 400 Bad Request response client with the messageContent header is not applicationjson\".If the JSON object does the 'data key leading a 400 Bad response with the messageNo key in request\".If the request body does contain valid JSON resulting 400 Bad response with the messageInvalid\".Examples >>> handler task_func() isinstance type True issub http.server.BaseRequest True\n    \"\"\"\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n\n            try:\n                data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            if 'data' not in data:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode())\n\n    return Handler\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates an HTTP POST handler that processes incoming email data and sends an email.The email data must a JSON object with 'subject',messageto keysThe type the response can retrieved as 'content and the length ascontentParameters: smtpserver (str): SM address.smtp_port (int): SM server.smtp_username (str): SM username.smtp_password (str): SM.Returns: function: A class that handles HTTP POST and sends emails based provided dataRequirements - cgi - http.server smtpl email.mime.text.MIMET - json Ra: JSONDec If the email data valid JSON.This results 400 Bad Request responseValueError If the 'subject',messageto keys missing from email data leading 400 Bad response.smtplib.SMPAuthenticationError If there an authentication issue.This is communicated client with 535 Authentication Failed responseExamples >>> handler task_func('smtpexample 587 'user@ 'password') isinstance type) True issub httpserver.BaseRequestHandler True\n    \"\"\"\n    class EmailHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            form = cgi.FieldStorage(\n                fp=self.rfile,\n                headers=self.headers,\n                environ={'REQUEST_METHOD': 'POST'}\n            )\n            try:\n                data = json.loads(form['data'].value)\n                subject = data['subject']\n                message = data['message']\n            except (ValueError, KeyError):\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(b'Invalid JSON or missing \"subject\" or \"message\" fields')\n                return\n\n            msg = MIMEText(message)\n            msg['Subject'] = subject\n            msg['From'] = smtp_username\n\n            try:\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                server.send_message(msg)\n                server.quit()\n                self.send_response(200)\n                self.end_headers()\n                self.wfile.write(b'Email sent successfully')\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.end_headers()\n                self.wfile.write(b'Authentication failed')\n\n    return EmailHandler\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count the words.txt within a specified directory, export the counts to a JSON, then return total.Parameters: filename (str): The name output JSON.directory (str): The where.txt locatedReturns: int: total number words in.txt files Requirements - collections.Counter - os - json Example >>> with(\"./testdirsingle_file\",\"r print f.read hello world hello >>> count task_func('single './') print( 3\n    \"\"\"\n    # Initialize counter\n    word_counter = Counter()\n\n    # Get list of files in directory\n    files = os.listdir(directory)\n\n    # Iterate over files\n    for file in files:\n        # Check if file is a text file\n        if file.endswith('.txt'):\n            # Open file and read content\n            with open(os.path.join(directory, file), 'r') as f:\n                content = f.read()\n            # Split content into words and count words\n            word_counter.update(content.split())\n\n    # Export counts to JSON\n    with open(filename, 'w') as f:\n        json.dump(word_counter, f)\n\n    # Return total count\n    return sum(word_counter.values())\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes a pand Data by splitting lists in the 'Value column into separate columns, calculates Pearson between these columns optionally visual correlation matrix using a heatParameters: df (DataFrame): A pand Data with two columns: 'DateValueThe 'Date' column contains dates, and the 'Value lists numbersplot (bool): Optional; if True displays heat correlation matrix and returns itReturns: DataFrame: A pand Data containing the correlation coefficients among lists in 'Value columnAxes (optional): A matplot Ax object containing the heat plot, returned if 'plot TrueNote - This function use \"Correlation Heat as the title of heat plot Raises: If the DataFrame input empty or have invalid 'Value', this ValueError.Requirements: - pand - seaborn matplot.pyplot Example >>> df pData([['2021-01', [8, 10 12] ['20027 9 11]]], columns=DateValue' corr_df task_func printcor[][ 1.0\n    \"\"\"\n    # Split lists in 'Value' column\n    df_split = pd.DataFrame(df['Value'].to_list(), columns=[f'Value_{i}' for i in range(len(df['Value'][0]))])\n    df = pd.concat([df.drop('Value', axis=1), df_split], axis=1)\n\n    # Calculate Pearson correlation\n    corr = df.corr(method='pearson')\n\n    if plot:\n        # Plot correlation matrix\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heat')\n        plt.show()\n\n    return corr\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create report on students grades in different subjects and then calculate average grade student and subjectParameters: additionalfields (list string,): The additional list student subjects that not duplicate with constants (default = []) Returns DataFrame: A pand Data with the columns being subjects, each student's grades average gradesThe DataFrame also includes the average grade per subject.Note - This function does take any input parameters and generates report based pred constants and additional fields from input (if- This function use 'Average as row name for average grade for each subject- This function use 'Average Grade as column for average for each student - Grade of each subject is between 0 to 100Requirements - pand - random statistics.mean Example >>> random.seed0) >>> report = task_func['Computer ScienceGe printcolumn) Index(['PhMathChemBEnglishHistoryComputerGeAverage Grade' dtypeobject\n    \"\"\"\n    # Add additional fields to the list of subjects\n    fields = FIELDS + additional_fields\n\n    # Generate random grades for each student in each subject\n    data = {field: [random.randint(0, 100) for _ in range(len(STUDENTS))] for field in fields}\n\n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, index=STUDENTS)\n\n    # Add a column for the average grade for each student\n    df['Average Grade'] = df.mean(axis=1)\n\n    # Add a row for the average grade for each subject\n    df.loc['Average Grade'] = df.mean()\n\n    return df\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates a CSV containing simulated data for 100 people, including name age height and weightIt also calculates and app the average age, height and at the end the fileParameters: filename (str): The name CSV be createdReturns: str: The path of created CSVRequirements: - os - csv random statistics.mean Example >>> random.seed(0) >>> filename 'people_report path task_funcfilename osex True\n    \"\"\"\n    # Generate data\n    people = []\n    for _ in range(PEOPLE_COUNT):\n        name = 'Person' + str(random.randint(1, 1000))\n        age = random.randint(18, 80)\n        height = round(random.normalvariate(170, 10), 2)\n        weight = round(random.normalvariate(70, 10), 2)\n        people.append([name, age, height, weight])\n\n    # Calculate averages\n    avg_age = round(mean([p[1] for p in people]), 2)\n    avg_height = round(mean([p[2] for p in people]), 2)\n    avg_weight = round(mean([p[3] for p in people]), 2)\n\n    # Append averages to people\n    people.append(['Average', avg_age, avg_height, avg_weight])\n\n    # Write to CSV\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS + ['Average'])\n        writer.writerows(people)\n\n    return os.path.exists(filename)\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files in a directory based the first text that is not enclosed squareMove the files to subdirect named after this text.If no matching text is, the file is not movedParameters: directory (str): The path.Returns: tuple: - str: The directory path with organized files.- dict: A dictionary where keys the created subdirect and values lists files moved to themRequirements: - re - os - shutil - datetime Example >>> import tempfile temp_dirmkdtemp() createtestdirectory(, {\"file1.txt\": \"subdir1[content]12\"} dir, files task_func) files['sub2'0].startsw('file3_') True\n    \"\"\"\n    files = {}\n    for filename in os.listdir(directory):\n        match = re.match(r'\\[(.*?)\\]', filename)\n        if match:\n            subdir_name = match.group(1)\n            if not os.path.exists(os.path.join(directory, subdir_name)):\n                os.mkdir(os.path.join(directory, subdir_name))\n            shutil.move(os.path.join(directory, filename), os.path.join(directory, subdir_name))\n            if subdir_name in files:\n                files[subdir_name].append(filename)\n            else:\n                files[subdir_name] = [filename]\n    return directory, files\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from list of files as subprocess at the sameParameters: - file_list (list str): List name to run.Returns: list: The exit codes subprocess.Requirements - subprocess - time - threading Example >>> task_func([\"taskfunc_data/file1bat\"] [0,\n    \"\"\"\n    exit_codes = []\n    threads = []\n\n    for file in file_list:\n        t = threading.Thread(target=run_file, args=(file, exit_codes))\n        threads.append(t)\n        t.start()\n\n    for thread in threads:\n        thread.join()\n\n    return exit_codes\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all.bat in a given, returning their file names and exitParameters: directory_path (str): of search.batReturns: list tu: A where each contains the file and its exit codeThe exit code is None if file could executedRequirements: - subprocess - os - sys glob Example >>> task_func(\"pathdirectory [(\"file1.bat 0), (\" 1\n    \"\"\"\n    result = []\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if file.endswith(\".bat\"):\n                file_path = os.path.join(root, file)\n                try:\n                    exit_code = subprocess.call([file_path], shell=True)\n                    result.append((file_path, exit_code))\n                except Exception as e:\n                    result.append((file_path, None))\n    return result\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    This function takes a pand Data and a column name as input and generates two subpl in one matplot figure: the first subplot is a hist (with a kernel density estimate for numerical data), and is box plot, representing the distribution the values in the specified columnParameters: df (DataFrame): Input DataFrame with numerical or categ data.col (str): The name column to be plotted.This column should exist in the DataFrame and contain numerical or categ data.Returns: matplot.figure.Figure: A mat figure object containing the hist and box plot.Requirements: - pand - seaborn - matplot.pyplot Raises: - The input df must be DataFrame, not be empty, and must contain the specified column, if it is not, the function will raise Value.Example: >>> df pd.DataFrame({'value [1 2,,,,,,,]}) fig = task_func(df 'value') type(fig) <class 'matfigure.Figure'> >>> plt.close >>> df = pcategory ['A',ABAAA'] figcategory typeFigure len.ax 2 >>> pl\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df must be a pandas DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input DataFrame is empty\")\n    if col not in df.columns:\n        raise ValueError(f\"The DataFrame does not contain the column {col}\")\n\n    fig, ax = plt.subplots(2, 1, figsize=(10, 10))\n\n    if df[col].dtype in ['int64', 'float64']:\n        sns.histplot(df, x=col, kde=True, ax=ax[0])\n    else:\n        sns.countplot(data=df, x=col, ax=ax[0])\n\n    sns.boxplot(data=df, x=col, ax=ax[1])\n\n    ax[0].set_title(f'Histogram and KDE of {col}')\n    ax[1].set_title(f'Box plot of {col}')\n\n    plt.tight_layout()\n\n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run a Python as a process with pred argumentsBy default waits the process.If wait is False, the function returns None.Parameters: script_path (str): The of Python be runwait (bool): Whether to the script completeDefault is True.*args: The arguments be scriptReturns: int: The return code of subprocessIf 'wait' is False returns None.Requirements: - subprocess - os - sys - time Raise: - ValueError If the script does.- subprocess.CalledProcessError: If the script raises.Example: >>> import tempfile script_pathNamedTem(suff='.py').name with(w..._ = f.write('import sys;sysexit0 >>> task_func(script_path True 'arg1',') 0 >>> task1 # Should return None\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"Script {script_path} does not exist.\")\n\n    if wait:\n        try:\n            subprocess.check_call([sys.executable, script_path] + list(args))\n        except subprocess.CalledProcessError as e:\n            raise subprocess.CalledProcessError(e.returncode, e.cmd)\n    else:\n        subprocess.Popen([sys.executable, script_path] + list(args))\n        return None\n\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from an Excel (.x), calculate the mean and each column, draw bar.The bar chart will be returned as a matplot figure object.Parameters: - file_location (str): The path Excel.- sheet_name (str): The to load dataReturns: - dict: A dictionary with mean standard of each column- matplot.figure.Figure: The figure object containing bar chart.The figure is titled 'Mean and Standard Dev', the Xaxis is labeled 'Columns',ValuesRaises: - FileNotError If the Excel does at specified path.- ValueError If the specified sheet does exist in workbook.Requirements: - pand - numpy mat. os - openpyxl Example >>> file_path='testx createdummyexcel() >>> result, fig = task_funcfile 'TestShe') osremovefile figax[].gettitle 'Mean and Standard Dev\n    \"\"\"\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"The file {file_location} does not exist.\")\n    if not os.path.splitext(file_location)[1] == \".xlsx\":\n        raise ValueError(f\"The file {file_location} is not an Excel file.\")\n\n    df = pd.read_excel(file_location, sheet_name=sheet_name)\n\n    if sheet_name not in pd.ExcelFile(file_location).sheet_names:\n        raise ValueError(f\"The sheet {sheet_name} does not exist in the workbook.\")\n\n    mean_std_dict = {}\n    for col in df.columns:\n        mean_std_dict[col] = [df[col].mean(), df[col].std()]\n\n    fig, ax = plt.subplots()\n    ax.bar(mean_std_dict.keys(), [val[0] for val in mean_std_dict.values()], label='Mean')\n    ax.bar(mean_std_dict.keys(), [val[1] for val in mean_std_dict.values()], bottom=[val[0] for val in mean_std_dict.values()], label='Standard Dev')\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    ax.legend()\n\n    return mean_std_dict, fig\n\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return a bar chart of the number activities performed on each day of based provided listIf the activities are not datetime objects raise a Type.Parameters: - activities (list datetime objects): A dat representing when each activity occurredReturns: - matplot.axesAx: Ax object representing the bar chart, with the x- labeled 'Day of', theNumber Activities title 'Weekly Activity'.Requirements: - datetime - collections mat.pyplot Ra: Type If the activities are not dat objects.Example: >>> ax task_func([dat(2023 10, 25), dat20 26) type(ax <classmataxes._ax.Ax'>\n    \"\"\"\n    # Check if all activities are datetime objects\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n\n    # Create a dictionary to store the count of activities for each day\n    activity_counts = defaultdict(int)\n\n    # Count the activities for each day\n    for activity in activities:\n        activity_counts[activity.strftime(\"%A\")] += 1\n\n    # Create a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(activity_counts.keys(), activity_counts.values())\n\n    # Set the x-label, y-label, and title\n    ax.set_xlabel(\"Day of\")\n    ax.set_ylabel(\"Number Activities\")\n    ax.set_title(\"Weekly Activity\")\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves a random file from the source directory to specified destination directoryParameters: - src_dir (str): The path of source directory from a file will randomly selected and moved.- dest_dir (str): The path of destination directory where the file will moved.- seed (int, Optional): The seed for the random number.Defaults to 100.Returns: str: The name file moved.Format: 'filename.extension' (e., 'file1txt').Requirements: - os - shutil - random Examples >>> import tempfile src_dir temp.mkdtemp() dest_d open(os.src, 'file1.txt'),w').close opensrc task_func(src dest, seed=1) 'file2\n    \"\"\"\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    random_file = random.choice(files)\n    shutil.move(os.path.join(src_dir, random_file), dest_dir)\n    return random_file\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes in all Excel (.x in the specified directory by prefix them a double backParameters: - directory_path (str): containing Excel filesDefault is './xlsx_files/'.Returns: - int: The number Excel files processed.Requirements: - Libraries: re, openpyxl glob - Excel files in the specified directory.Example >>> tempfile_dirmkd() workbook Work() sheet workactive >>> sheetappend['This \"test string.']) worksave(temp + '/test.x task_func(temp) 1\n    \"\"\"\n    # Get all Excel files in the directory\n    excel_files = glob.glob(directory_path + '/*.xlsx')\n\n    # Initialize counter\n    counter = 0\n\n    # Loop over all Excel files\n    for file in excel_files:\n        # Load workbook\n        wb = load_workbook(filename=file)\n\n        # Loop over all worksheets\n        for sheet in wb:\n            # Loop over all cells\n            for row in sheet:\n                for cell in row:\n                    # Check if cell contains double quotes\n                    if re.search(r'\\\"', str(cell.value)):\n                        # Replace double quotes with double backslashes\n                        cell.value = re.sub(r'\\\"', '\\\\\\\"', cell.value)\n\n        # Save workbook\n        wb.save(file)\n\n        # Increment counter\n        counter += 1\n\n    return counter\n\n"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram a sine and cos with a given frequency and return the plot.Parameters: frequency (float): The wave.Must be a nonnegative float.sample_size (int, Optional): A positive integer den number taken for the wave.Default is 10000.Returns: matplotfigure.Figure: The figure object containing plot.matplotaxesAx: The axes object of the plot.Requirements: - numpy for data generation mat.pyplot for - math for mathematical constants Ra Value If the frequency is negative.- ValueError If the sample size nonpositive.Example >>> fig, ax task_func1 2500) type(fig <classmatfigure.Figure typeaxaxes._ax\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be nonnegative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive.\")\n\n    time = np.linspace(0, 1, sample_size)\n    signal = np.sin(2 * np.pi * frequency * time)\n\n    fig, ax = plt.subplots()\n    ax.plot(time, signal)\n    ax.set_xlabel(\"Time [s]\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.set_title(f\"Sine wave with frequency {frequency} Hz\")\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes a Flask-Mail instance for sending emails using the generated Flask application with specified app_nameParameters: app_name (string): The Flask application Returns tuple: A containing Flask-Mail instance and app's mail configurationsNote - The details email server are retrieved environment- If the variables do exist use defaults: - 'MAIL_SER': 'localhost'MAPORT 25 -MAUSET False (boMAUSERNAME None Requirements flask - os - flask_mail Example >>> mail, configs = task_func(\"test\") print(.__getattribute__app\").name) test\n    \"\"\"\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = os.getenv('MAIL_PORT', 25)\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False)\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER', None)\n\n    mail = Mail(app)\n\n    return mail, app.config\n"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calcul the mean, median standard the data from a specific column in an Excel fileParameters: - excel_file_path (str): The directory containing Excel.- file_name (str): The name Excel.- column_name (str): The name to analyzeReturns: - dict: A dictionary with the mean, median standard.Raises: - FileNotFoundError If the Excel file does at specified path.- ValueError If the specified column is found in Excel file.Requirements: - pand - numpy os Example >>> data_dir, file_name './data/', 'excel_file1.x' createdummy_file(data >>> stats task_funcdata file, 'Sales') osremovedata + file osrmddata) print( {'mean 200.0med 200std_dev 7071067811865476}\n    \"\"\"\n    # Check if the file exists\n    if not os.path.isfile(os.path.join(excel_file_path, file_name)):\n        raise FileNotFoundError(f\"The file {file_name} does not exist in the directory {excel_file_path}\")\n\n    # Read the Excel file\n    df = pd.read_excel(os.path.join(excel_file_path, file_name))\n\n    # Check if the column exists\n    if column_name not in df.columns:\n        raise ValueError(f\"The column {column_name} does not exist in the Excel file {file_name}\")\n\n    # Calculate the mean, median and standard deviation\n    mean = np.mean(df[column_name])\n    median = np.median(df[column_name])\n    std_dev = np.std(df[column_name])\n\n    return {'mean': mean, 'med': median, 'std_dev': std_dev}\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains a simple neural on given input data and target labels.The function: - Spl data a training set (75%) and a test25%), assuming the input dimension always 2.- Constructs Sequ model with one dense hidden layer and a s activation function- Compiles the model using binary crossent loss and SG optimizer with a specified learning- Fits the model to the training data (without verb output), also evaluating it on the test set as validation data- Plots the model's training and validation loss over epoch and returns the plot's Axes object for further customizationParameters: X (npndarray): Input features for the model, where each set has an input dimension of 2.Y (npndarray): Target labels for the model.Returns: - Sequ: The trained Keras Sequ model.- matplot.axesAx: The Ax object of the plot.The plot visualizes model's training and validation loss over epoch, with the x representing epoch and lossThe legend distinguishes between 'Train'Test lossesNotes: - The input dimension of X must always 2- The Axes title is 'Model loss - The x- label is 'Epoch' yL Requirements - keras.layersDense - keroptimizersSGDmodelsSequ - sklearnmodel_selectiontraintest_split matpy Examples >>> X np[0 001 0]])],10]] model, ax task_funcX isinstancemodel Sequ True isax pl.Ax\n    \"\"\"\n    # Split the data\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Construct the model\n    model = Sequential()\n    model.add(Dense(10, input_dim=2, activation='sigmoid'))\n    model.add(Dense(1, activation='sigmoid'))\n\n    # Compile the model\n    sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\n    model.compile(loss='binary_crossentropy', optimizer=sgd)\n\n    # Fit the model\n    history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=1000, verbose=0)\n\n    # Plot the model's training and validation loss over epoch\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('Model loss')\n    plt.ylabel('Loss')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Test'], loc='upper left')\n    ax = plt.gca()\n\n    return model, ax\n"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide the input data training and test sets (70% training, 30), create a Ker Sequ model with one hidden layer using a sigm activation function, compile model with binary crossent loss and an SG optim specifying a learning rate, fit model the training data in a nonverb mode plot ROC curve for the model on test set, including the AUC score in plot legendParameters: X (npndarray): The input data.The input dimension is always 2.Y (np.ndarray): The target data.Returns: - keras.modelsSequential: The trained Ker model.- matplot.axes._ax.Ax: The mat Ax object for the Precision-Recall curve plotNotes: - The title of the axes should 'ROC curve' - x label is 'False positive rate yTrue Requirements tensflow.keras - sk.met.roc_cur - skauc -model_selection.train_test_split mat Example: >>> X = np[0 0],01 0]]) Y],11]] model, ax task_funcX Y isinstancemodel ker.modelsSequ) True\n    \"\"\"\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    model = keras.models.Sequential()\n    model.add(keras.layers.Dense(1, input_dim=2, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(lr=0.01), metrics=['accuracy'])\n    model.fit(X_train, y_train, verbose=0)\n\n    y_pred = model.predict(X_test).ravel()\n    fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure()\n    lw = 2\n    plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return model, plt.gca()\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads an RGB image, applies K-me clust segment into 'n_cl regions saves each region separate imageThe function returns numpy arrays the original and segment imagesParameters: - image_path (str): RGB fileDefault is 'image.The image is expected in RGB as a 3 array (height x x channels), with channels in order RGB.- n_clusters (int): The for K-meDefault is 3.A minimum 1 cluster is allowed, although clust with a single will simply return the original image as the segmented image- random_seed (int): The seed for the number in K-me clustDefault is 42Returns: - tuple: A containing two numpy.The first array represents original RGB image, and array segment image, with each pixel's color replaced cent cluster it belongsRaises: - FileNotError If the image file does at specified path.- ValueError If 'n_clusters a positive.Requirements - opencv: For reading the image file and converting BGR RGB.- numpy: For array manip.- os: For checking the existence the image file.- sklearn.cluster: For applying K-me clust.Example >>> createdummyimage('image originalimg_array, segmentedimg = task_func(' 3 osremove print.shape) # Example output (10, 10 3 printse for n_cl > 1 (10 Note - This function assumes the input image in RGB format- The segmented image array will have the same shape original but with pixel colors replaced their corresponding cluster cent colors, effectively segment regions based color similarity- Clust with a single cluster is allowed and will return the original image as both the original segment images, since all pixels will assigned\n    \"\"\"\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image file not found at {image_path}\")\n    if n_clusters < 1:\n        raise ValueError(\"n_clusters must be a positive integer\")\n\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    img_array = img.reshape((-1, 3))\n    img_array = np.float32(img_array)\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed).fit(img_array)\n    labels = kmeans.labels_\n\n    segmented_img_array = kmeans.cluster_centers_[labels]\n    segmented_img_array = np.uint8(segmented_img_array)\n\n    segmented_img = segmented_img_array.reshape(img.shape)\n\n    return img, segmented_img\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calcul the product of a matrix 'P and a 3 tens 'T', flatten result, apply KMe clust to flattened data visualize it.Parameters: P (numpy.nd): The input matrix.T (numpy.ndarray): The input tens with shape (3, 3).n_clusters (int): The number for KMe clustDefault is 3.random_state (int): The random for KMe clustDefault is 0n_init (int): Number time the k-me algorithm will be run with different centroid seedsDefault is 10.Returns: cluster_result (numpynd): The result KMe clustax (matplot.axesAxes): The visualization of the KMe clust, with the title 'K Cl Visual'.Requirements: - numpy - sk mat Example >>> P = np[6 2 7],1 1 88 7 1],9 6 42 1 1]]) Trandom(3 3 cluster_result, ax task_funcP T, n_cl=3 randomstate0, ninit10 type(cl <class 'n.ndarray'> typeaxmataxes._ax.Ax'>\n    \"\"\"\n    # Calculate the product of P and T\n    product = np.dot(P, T)\n\n    # Flatten the result\n    flattened = product.flatten()\n\n    # Apply KMe clust to the flattened data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    kmeans.fit(flattened.reshape(-1, 1))\n\n    # Get the cluster result\n    cluster_result = kmeans.predict(flattened.reshape(-1, 1))\n\n    # Visualize the KMe clust\n    fig, ax = plt.subplots()\n    ax.scatter(range(len(flattened)), flattened, c=cluster_result)\n    ax.set_title(\"K Means Clustering Visualization\")\n\n    return cluster_result, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calcul the Vor diagram for a number points in 2 and plot it.Note this function will raise errors when input invalid, for wrong type or shapeJittering is applied prior plotting.Parameters: - points (npndarray): A numpy nd of shape (n_points, 2) with the coordinates points.- seed (int): Random seed for reproduc.Defaults to 0.Returns: tuple (vor, ax): A tuple containing: - v (Vonoi): A Vor object representing Vor diagram of points.- ax (Axes): The axes the plotted Vor diagram.Requirements: - numpy - sc mat. Example >>> points np[0 00 0]]) vor, ax task_func type(vor <classsc.spatial.qhullVonoi'> typeaxmataxes._axAx'>\n    \"\"\"\n    np.random.seed(seed)\n    points = np.random.rand(10, 2)\n    vor = Voronoi(points)\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    plt.show()\n    return vor, ax\n\n\ntask_func(points)\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files with a specified extension from a source directory to a.This function searches for files in the source directory that match given extension.If a file with the same already in the destination directory it is not moved.Parameters: - src_dir (str): The source path.- dest_dir (str): The destination path.- ext (str): The file extension to search (without the leading dot).Returns: - list: A list the full paths of files that were successfully moved.If a file was not moved because it already exists in the destination directory it will not included this listRaises: FileNotFoundError: if either the source or destination directory does Requirements - os - shutil - glob Examples >>> test_src_dir = './test_' testdest_ testext = 'txt' os.m(src exist_ok= >>> os exist moved_files task_functestsrc test, test) lenmoved > 0 # Check if any files were True >>> 'testfile. in [osbas(path) path moved # Assuming testfile exists in testsrc_ True oslistdest) # Verify that files were, and no dupl exist in the destination ['testfile']\n    \"\"\"\n    if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"Source directory {src_dir} does not exist.\")\n    if not os.path.isdir(dest_dir):\n        raise FileNotFoundError(f\"Destination directory {dest_dir} does not exist.\")\n\n    files_moved = []\n    for file in glob.glob(f\"{src_dir}/*.{ext}\"):\n        file_name = os.path.basename(file)\n        dest_file = os.path.join(dest_dir, file_name)\n        if not os.path.exists(dest_file):\n            shutil.move(file, dest_dir)\n            files_moved.append(file)\n    return files_moved\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load a JSON string into a dictionary, normal the dictionary by doubling numerical values, then create Pand Data from dictionaryThis function processes a JSON string by converting dictionary, normalizes the data by doubling numerical values then constructs Pand Data from this dictionaryNote the function is designed handle simple flat diction, with values that either single numerical values, lists numerical strings that can interpreted numbersIt doubles the values numerical data types within dictionary, including those within lists and those in strings (which are extracted using regex), but the function does process nested dictionFinally it returns the DataFrame with numerical values stored as floats and other types left as-, or an empty Data if the input JSON string empty or does valid structures for Data conversionParameters: jsonstr (str): The JSON.Returns: DataFrame: A pand Data created from the dictionary.Requirements: - pand - json - re Example >>> json_str 'a [1 4.9, \"5\"} df task_funcjson type(df <classp.coreframeData print a b 0 2 9.8 10 1 4 9 6\n    \"\"\"\n    # Check if the JSON string is empty\n    if not json_str:\n        return pd.DataFrame()\n\n    # Load the JSON string into a dictionary\n    data_dict = json.loads(json_str)\n\n    # Normalize the dictionary by doubling numerical values\n    data_dict = normalize_dict(data_dict)\n\n    # Create a pandas DataFrame from the dictionary\n    df = pd.DataFrame(data_dict, index=[0])\n\n    return df\n\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes a given bash and CPU and usage script's processThis function checks script path exists, then it executes it in sub and uses psutil monitor script's process for CPUNote - CPU usage a cumulative script process's demand over the execution period, an average across cores- Memory usage is reported as the sum RSS memory incrementsThe function aggreg these metrics until script completes or specified timeoutIt handles cases where the process becomes a zombie or is not found, and ensures the subprocess terminated if runs beyond timeoutParameters scriptpath (str): bash to bePath must exist.timeout (int, optional): Maximum ( the function the scriptDefaults to 10 secondsReturns: dict: A dictionary: - 'CPU Usage': The accumulated in percentage.- 'Memory Usage': The accumulated in bytes.Requirements - subprocess - psutil time - os Examples >>> resources task_func('/pathscript {'CPU Usage 52Memory 2048}\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"The script path {script_path} does not exist.\")\n\n    p = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    start_time = time.time()\n\n    cpu_percent = 0.0\n    mem_rss = 0.0\n\n    while p.poll() is None:\n        if time.time() - start_time > timeout:\n            p.terminate()\n            break\n\n        for proc in psutil.process_iter(['pid', 'cpu_percent', 'memory_info']):\n            if proc.info['pid'] == p.pid:\n                cpu_percent += proc.info['cpu_percent'] / psutil.cpu_count()\n                mem_rss += proc.memory_info().rss / (1024.0 * 1024.0)\n\n        time.sleep(0.1)\n\n    return {'CPU Usage': cpu_percent, 'Memory Usage': mem_rss}\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create DataFrame with a given number rows (N) 3: \"x\" and with random,category random categories from a CATEOR listEach category is guaranteed appear at if N is greater the number categories, otherwise it randomly sampled without replacement from CATEFinally draw a scatter plot \"x vs,\" colored \"category\".Parameters: - N (int, optional): Number rows for DataDefaults to 100.- CATEOR (list, optional): List categories.Defaults to ['A','- seed (int, optional): Random for reproducDefaults to 42.Returns: tuple: A tuple containing: - DataFrame: The generated Data.- Axes: The Ax object of scatter plot.Requirements: - numpy - pand mat. Example >>> df, ax task_func() dfhead x y category 0 0.239562 0385098 C 1 0144895851137 D489453316922 C985650169493 E242055556801 A >>> type(ax) <classmataxes._ax.Ax'>\n    \"\"\"\n    np.random.seed(seed)\n    df = pd.DataFrame({\n        \"x\": np.random.rand(N),\n        \"y\": np.random.rand(N),\n        \"category\": np.random.choice(CATEGORIES, N)\n    })\n\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        df_category = df[df[\"category\"] == category]\n        ax.scatter(df_category[\"x\"], df_category[\"y\"], label=category)\n    ax.legend()\n\n    return df, ax\n\n\ndf, ax = task_func()\nplt.show()\n"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate a time series from a given epoch start time to end with a specified step and trend.The time series is plotted with timest on the x- ('Time') and values onValue').The values are generated from a normal distribution, and a linear trend is added based the provided trend value.Parameters: - start_time (int): The start epoch time in milliseconds.- end_time (int): The end epoch time in milliseconds.Must be greater start_time.- step (int): The step in milliseconds between each data point.Must be agreater than 0.- trend (float): The trend value to be added to the time series.It acts as a multiplier for the index, adding a linear trend to the randomly generated values.- seed (int, optional): Seed for reproduc.Default is 42.Returns: - ax (matplot.py.Axes): The Ax object of the generated plot, with the x- labeled 'Time' and yValue'.Requirements: - datetime.dat - pand - n Example: >>> ax = task_func(0, 10000, 100, 0.001) type(ax) <class 'matplotaxes._axes.Ax'> >>> ax.get_xticklabels() [Text(-20.0, 0, '1970-0101 1000:08.000000'), Text(0.0 0, '197000 Text2002400460068008100 ''), Text120 '')]\n    \"\"\"\n    np.random.seed(seed)\n    time_range = pd.date_range(start=datetime.fromtimestamp(start_time / 1000), end=datetime.fromtimestamp(end_time / 1000), freq=f'{step}S')\n    values = np.random.normal(size=len(time_range)) + trend * np.arange(len(time_range))\n    df = pd.DataFrame(values, index=time_range, columns=['Value'])\n    ax = df.plot(x='Time', y='Value')\n    return ax\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Generate sales data for five products from a given epoch time up the current time.This function checks input validity, then for each day between the date of the given epoch time to the date current time, generates random sales data for each of 5 products.Parameters: - epoch_mill (int): Start epoch time in.Must be before current system time.- random_seed (int): Seed for reproduc of random sales data.Defaults to 0.- products (list of str): Product list to choose.Must contain 5 unique strings.Defaults to ['Product1',',',','].Returns: - pd.DataFrame: A Data containing sales with columns 'Product' (string),Datedat andSalesintegerSales quantity is randomly sampled from range [10, 50].Requirements: - pand - datetime. - random Example >>> sales_data task_func(1236472051807, random_seed=42) type(s) <class 'pand.coreframe.DataFrame >>> sales.head() Product Date Sales 0 Product4 20090308 112731.807 50 1 Product5 2009807 17 21 113 27 25\n    \"\"\"\n    if not isinstance(epoch_milliseconds, int):\n        raise ValueError(\"Epoch time must be an integer\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"Random seed must be an integer\")\n    if not isinstance(products, list):\n        raise ValueError(\"Products must be a list\")\n    if len(products) != len(set(products)):\n        raise ValueError(\"Products must be unique\")\n    if len(products) != 5:\n        raise ValueError(\"There must be 5 unique products\")\n\n    random.seed(random_seed)\n\n    now = datetime.now()\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    delta = now - start_date\n\n    data = []\n    for i in range(delta.days + 1):\n        date = (start_date + pd.DateOffset(days=i)).strftime(\"%Y%m%d\")\n        for product in products:\n            sales = random.uniform(10, 50)\n            data.append([product, date, sales])\n\n    df = pd.DataFrame(data, columns=[\"Product\", \"Date\", \"Sales\"])\n    df[\"Sales\"] = df[\"Sales\"].apply(lambda x: round(x, 3))\n\n    return df\n\n\nsales = task_func(1236472051807, random_seed=42)"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings an Excel file, including handling empty JSON arraysThis function takes JSON string converts an Excel file with specified filenameIf the JSON string represents an empty array the function creates Excel file with no data rowsParameters: - json_str (str, bytes byt): The JSON content as, bytes- filename (str): The name Excel be created- sheet_name (str, optional): The in Excel fileDefault is \"sheet1\".Returns: - str: The absolute path of created ExcelRaises: - ValueError If `json_str valid JSON.- TypeError If `json_str bytes, byt.- Exception: For other general errors related file writing.Requirements: - xlwt: For writing to Excel files.- xlrd - os: For file path operations.- pand: For data manipulation.Example >>> jsonstr '[Name\":John\",Age 30Jane 28} True if taskfunc(json 'data.x').enddata else False # True True >>> osremove('\n    \"\"\"\n    try:\n        # Create a workbook and add a sheet\n        wb = xlwt.Workbook()\n        ws = wb.add_sheet(sheet_name)\n\n        # Convert JSON to DataFrame\n        df = pd.read_json(json_str)\n\n        # Write DataFrame to Excel\n        for i, row in df.iterrows():\n            for j, value in enumerate(row):\n                ws.write(i, j, value)\n\n        # Save the workbook\n        wb.save(filename)\n\n        return os.path.abspath(filename)\n\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n    except TypeError as e:\n        print(f\"Invalid type: {e}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates a graph daily activity d for a specified number days in the past using randomly data for activities.This function randomly generates acitivity durations from 0 120 for activity from [\"RunningSwCyYWeight Training\"Parameters: days_past (int, optional): The number for to generate the graphDefaults to 7 days.Must be in the past.random_seed (int, optional): Seed for number to ensure reproducDefaults to 0.Returns: Tuple containing - ax (matplotpy.Ax): Data used- df (pd.DataFrame): Seaborn lineplot with date on the x, duration activity as hue.Requirements - datetime. - dattimed pand - random seab Example >>> ax, df task_func7 random_seed42 type(ax) <classmataxes._axAx'> A sample row from returned Data might: Date Activity Duration YYY Running 45\n    \"\"\"\n    random.seed(random_seed)\n    date_list = [(datetime.now() - timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(days_in_past)]\n    activity_list = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    duration_list = [random.randint(0, 120) for _ in range(days_in_past)]\n\n    df = pd.DataFrame(list(zip(date_list, activity_list, duration_list)),\n                      columns=[\"Date\", \"Activity\", \"Duration\"])\n\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.sort_values(by='Date', inplace=True)\n\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n\n    return ax, df\n\n\nax, df = task_func(7, 42)"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create DataFrame of stock prices for a specified number days in the past using random dataParameters: - days_past (int, optional): The for we want stock dataMust be positive.Defaults to 7- stock_names (list of str, optional): The list stock for which we want dataMust not emptyDefaults to [\"AAP\",GOOGLMSAMZFB\"- random_seed (int, optional): The for number to ensure reproduDefaults to 0Returns: DataFrame: A pand Data containing random stock prices for specified numberPrices are floats in [00,1).Requirements - datetime. - pand - n Example >>> df task_func5 randomseed42 type(df <classp.coreframeData printhead(1 AAP GOOGL MS AMZ FB 2024-0330 37454012 95071431 73199394 59865848 15601864\n    \"\"\"\n    np.random.seed(random_seed)\n    date_range = pd.date_range(start=datetime.now(), periods=days_in_past, freq=\"D\")\n    data = np.random.rand(days_in_past, len(stock_names)) * 100\n    df = pd.DataFrame(data, index=date_range, columns=stock_names)\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV and create difference reportThis function compares two CSV line and provides detailed report differencesIt represents each difference with a line number, a status indicator the content thatParameters: file_path1 (str): of first CSVfile_path2 (str): The of second CSVdelim (str, optional): Del character used the CSV filesDefault is ','.quotechar (str, optional): Quote character used the CSV filesDefault is '\"'.Returns: DataFrame: A pand Data with the differences.The DataFrame contains the following columns - 'Line Number': line in file where difference occurs- 'Status': A character indicating the type difference: - ': No change (line is the in files).- '-': Line present in the first file but- '+': Line present in the second file but- 'Content': The actual text content line from either file.Raises: FileNotFoundError If either files cannot.ValueError If either files is empty.Exception For other IO related errors.Requirements - pand: For data manipulation and analysis.- csv: For reading CSV.- difflib: For performing the difference operation.- os Example: >>> createdummytest_files() >>> df taskfunc('file1csv osremove osremovehead Line Number Status Content 0 1 ('nameage 1 - ('Alice30 +31 ('Bob25\n    \"\"\"\n    try:\n        df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar, quoting=csv.QUOTE_NONNUMERIC)\n        df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar, quoting=csv.QUOTE_NONNUMERIC)\n    except FileNotFoundError:\n        print(\"One or both files not found\")\n        return\n    except Exception as e:\n        print(\"Error occurred: \", e)\n        return\n\n    if df1.empty or df2.empty:\n        print(\"One or both files are empty\")\n        return\n\n    df1['Line Number'] = df1.index + 1\n    df2['Line Number'] = df2.index + 1\n\n    df1['Status'] = '-'\n    df2['Status'] = '+'\n\n    df1['Content'] = df1.apply(lambda row: str(row.values.tolist()), axis=1)\n    df2['Content'] = df2.apply(lambda row: str(row.values.tolist()), axis=1)\n\n    df_diff = pd.concat([df1, df2]).sort_values('Line Number').reset_index(drop=True)\n\n    df_diff = df_diff.drop_duplicates(subset='Content', keep='first')\n\n    df_diff.loc[df_diff['Status'] == '-', 'Status'] = ':'\n    df_diff.loc[df_diff['Status'] == '+', 'Status'] = '+'\n\n    return df_diff\n\n"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list employee data and calculate statistics for a given columnIf the data list is empty the sum will 0 and mean, min, and values will NaThe function also visual data with a pie, using the Age column as labelsParameters: column (str): The analyzeValid values are 'Age',Sal andExperienceIf invalid the function will raise Key.data (list of lists): The employee data, where each list represents [Age Salary Experience].Returns: tuple: A tuple containing: - dict: dictionary with the 'sum',meanmin and of column.- Axes object: The pie chart visualizing column data.Requirements: - pand - numpy mat. Example >>> data [[25 50000 2],30 75 5],35 100 7 125 10 150000 12]] stats, ax task_func('Salary', data) stats {'sum 500000mean 100000.min 5, 15} >>> type(ax <classmataxes._ax.Ax'>\n    \"\"\"\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    if column not in df.columns:\n        raise KeyError(f\"Invalid column name {column}\")\n\n    stats = {}\n    stats['sum'] = df[column].sum()\n    stats['mean'] = df[column].mean()\n    stats['min'] = df[column].min()\n    stats['max'] = df[column].max()\n\n    fig, ax = plt.subplots()\n    ax.pie(df[column], labels=df['Age'])\n    ax.axis('equal')\n\n    return stats, ax\n\n\ndata = [[25, 50000, 2], [30, 75000, 5], [35, 100000, 7], [40, 125000, 10], [45, 150000, 12]]\nstats, ax = task_func('Salary', data)"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list fitness data, calculate the sum, the mean minimum of a certain column and draw chartAdditionally validate that numeric values for steps, calories burned distance walked nonParameters: column (str): The analyze from the dataThe allowed columns are: 'Date',StepCalories BurnDistance Walk'.data (list of list): A where each inner list contains datetime object representing date, followed numeric for steps, calories burned distance walked in that orderEach numeric must nonMust not be empty.Returns: tuple: A tuple containing: - dict dictionary with sum, mean min of column.- matplot.axesAx: The Ax object of the plotted line chartThe line chart will have Date on its x, the column value on title Line Chart of (column).Requirements: - pand - n mat. Ra Key If the specified column valid.- ValueError If the data list or if any numeric for steps, calories burned and distance walked negative.Example >>> data = [[dat(2022 1 1), 5000 200, 3.5...[datetime(2022 1 2), 5500 220, 4.0],...[datetime(2022 1 3), 6000 240 4.5]] >>> stats, ax task_func('Steps', data) type(ax <classmataxes._axAx'> printstats {sum 16500mean 5500.min 5000, 6000\n    \"\"\"\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise ValueError(\"Invalid column name\")\n\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    for col in df.columns:\n        if col != 'Date' and df[col].min() < 0:\n            raise ValueError(f\"Negative value in column {col}\")\n\n    df[column] = df[column].astype(float)\n\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min()\n    }\n\n    ax = df.plot(x='Date', y=column, kind='line')\n\n    plt.title(f\"Line Chart of {column}\")\n\n    return stats, ax.figure.axes[0]\n\n\ndata = [[pd.to_datetime('2022-01-01'), 5000, 200, 3.5],\n        [pd.to_datetime('2022-01-02'), 5500, 220, 4.0],\n        [pd.to_datetime('2022-01-03'), 6000, 240, 4.5]]\n\nstats, ax = task_func('Steps', data)\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read a list diction from a JSON file, calculate mean median for key (ign nonn or missing convert results Pand DataParameters - input_file (str optional): input JSON nameDefaults to 'data.'.The file should contain a list diction.If a key is missing in a dictionary it is treated Na for that recordNonn values ignored for the calculation mean median.If all values for a key nonn or missing the statistics for NaReturns: - df (pd.DataFrame): A Data indexed and sorted the variable names (keys from input, containing columns 'meanmedRequirements - numpy - collections json pand Example >>> df task_func('data_1json a mean median b mean median c median\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    data_dict = defaultdict(list)\n    for item in data:\n        for key, value in item.items():\n            if value is not None:\n                data_dict[key].append(value)\n\n    df = pd.DataFrame(data_dict)\n    df = df.replace('', np.nan)\n    df = df.astype(float)\n\n    mean = df.mean(axis=0)\n    median = df.median(axis=0)\n\n    result = pd.DataFrame({'mean': mean, 'median': median})\n    result.index.name = 'variable'\n    result = result.sort_index()\n\n    return result\n\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows from a CSV using c library, convert duplicated into a pand Data, then plot using matParameters: - file_path (str): CSVReturns: - dict: A dictionary with duplicate rows as keys and their counts- Axes: A matplot Ax object with the bar chart of duplicate rowsRequirements: - csv - collections.Counter - pand mat. Example >>> dupl, ax = task_func(\"sampledata. dupl {('Alice25',New York'): 3Bob30London 2} type(ax <classmataxes._ax.Ax'> Note Ensure the CSV file in proper and has a.Other file formats will raise a Value.\n    \"\"\"\n    try:\n        with open(file_path, 'r') as f:\n            reader = csv.reader(f)\n            data = list(reader)\n    except FileNotFoundError:\n        raise ValueError(\"File not found\")\n    except csv.Error as e:\n        raise ValueError(\"CSV Error: {}\".format(e))\n\n    # Identify duplicate rows\n    duplicates = [item for item in data if data.count(item) > 1]\n\n    # Convert duplicates into a pandas DataFrame\n    df = pd.DataFrame(duplicates)\n\n    # Count the occurrences of each duplicate row\n    counter = Counter(tuple(row) for row in df.values)\n\n    # Plot the counts\n    fig, ax = plt.subplots()\n    ax.bar(range(len(counter)), list(counter.values()), align='center')\n    ax.set_xticks(range(len(counter)))\n    ax.set_xticklabels(list(counter.keys()), rotation=90)\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Count')\n    ax.set_title('Count of Duplicate Rows')\n\n    return counter, ax\n\n"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries in a Data and record age distribution for the duplicate namesThis function takes Data with 'name 'age columnsIf age provided as floats they will rounded downAge must not negative, otherwise the function raises Value.Then, the function identifies duplicate names and records age distribution.It returns a Counter object with age distribution and a hist plot showing distribution ages for duplicate names, with age on x and countBins are calculated based minimum and ages found among dupl, adjusted by.5 to ensure integer ages fall squarely binsParameters: df: p.DataFrame - A Data with columns 'nameage'.Must not be empty.If empty the function raises Value.Returns: Counter: Age distribution among duplicate names.plt.Axes or None: Hist plot displaying age distribution, or None if there duplRequirements: - pand - n collections.Counter seab mat. Ra Value If the Data is empty or if age negative.Example >>> df pData({'name ['AliceBobAlice'age [25 26, 25] dupl_counter, ax task_funcdf) dupl Counter({25 2}) >>> type(ax <classmataxes._axAx'>\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"Data is empty\")\n\n    df = df[df['age'] >= 0]\n    df['age'] = df['age'].apply(np.floor)\n\n    dupl = df[df.duplicated(subset='name', keep=False)]\n    dupl_counter = Counter(dupl['age'])\n\n    if not dupl.empty:\n        min_age = dupl['age'].min()\n        max_age = dupl['age'].max()\n        bins = np.arange(min_age, max_age + 1.5)\n\n        fig, ax = plt.subplots()\n        sns.histplot(dupl['age'], bins=bins, ax=ax)\n        ax.set_title('Age distribution for duplicate names')\n        ax.set_xlabel('Age')\n        ax.set_ylabel('Count')\n    else:\n        ax = None\n\n    return dupl_counter, ax\n\n"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify and count duplicate values in a Data's 'value columnThis function also plots a hist for all values in 'value and overl a normal distribution curve onParameters: df (pd.DataFrame): Data containing a numeric 'value column.If empty the function will empty Counter and an plotbins (int, optional): Number bins for the histDefaults to 4.Returns: tuple: A tuple containing: - Counter: A Counter object with the count each duplicate value.- Axes: A matplot.axes.Ax object that represents the plot of the hist with the 'value column dataIf applicable a normal distribution curve fitted data is overl.The histogram's bars are green with 60 opacity, and normal distribution curve black with a linew 2The plot is titledDistribution\", with \"Value as x label andFRequirements: - collections.Counter - numpy - sc.stats.norm - mat.py Example >>> df pData({'value [1 2 3 3 2 1 4 4 2 2 1 1 3] counter, ax task_funcdf) ax <Ax: title={'center 'Dist'}, xlabel='Value',F'> >>> counter Counter({2: 6 1 5 3 5 4})\n    \"\"\"\n    # Identify and count duplicate values\n    counter = Counter(df['value'])\n\n    # Plot histogram\n    fig, ax = plt.subplots()\n    ax.hist(df['value'], bins=bins, color='g', alpha=0.6, density=True)\n\n    # Overlay normal distribution curve\n    vals = np.linspace(df['value'].min(), df['value'].max(), 1000)\n    density = norm.pdf(vals, df['value'].mean(), df['value'].std())\n    ax.plot(vals, density, 'k', linewidth=2)\n\n    # Set plot title and labels\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n\n    return counter, ax\n\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Generate a pand Data with random values based lists 'a'', and plot it as bar chart.List 'a' sets the DataFrame's row indices, while the length listb determines number columns using predefined names from 'COLNS = ['A']' list.Parameters: - a (list): A used define the number rows in Data- b (list): Another list used to define the number columns in the Data.The actual column names are pred.Returns: - matplot.axesAx: The Ax object of the plotted bar chartRequirements: - numpy - pand - mat Data Structure: - Uses pand DataFrame to structure the.Example: >>> ax task_func([1], ['A'\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(np.random.rand(len(a), len(b)), index=a, columns=b)\n\n    # Plot DataFrame\n    ax = df.plot(kind='bar')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    This function plots a bar chart of monthly data values for a single year, with 'month' on the x- and 'value on.Parameters: data (str): The data string in the format 'yy-mmvalue'.Returns: Axes object: A matplot.axes.Ax object representing the plot, with the title formatted as 'Monthly Data for yyy', x label as 'Month', and y labelValue'.Requirements: - pandas - datetime - matplot.pyplot Example: >>> data '2022-01100,202202200,2003150,20300,250,350,400,450,500,550,600,650' >>> ax = task_func(data)\n    \"\"\"\n    # Convert the data string to a list of tuples\n    data_list = [(datetime.strptime(d[:7], '%Y-%m'), int(d[7:])) for d in data.split(',')]\n\n    # Create a pandas DataFrame from the list of tuples\n    df = pd.DataFrame(data_list, columns=['date', 'value'])\n\n    # Set the date as the index\n    df.set_index('date', inplace=True)\n\n    # Resample the data to monthly frequency and calculate the sum\n    df_monthly = df.resample('M').sum()\n\n    # Plot the data\n    ax = df_monthly.plot(kind='bar', legend=None, title=f'Monthly Data for {data[:4]}', xlabel='Month', ylabel='Value')\n\n    # Rotate x-axis labels\n    plt.xticks(rotation=45)\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    This function draws a hist to visualize the frequency distribution numeric values provided in a string format, with 'Value on x-,F andHist of Values as the titleParameters: data (str): The data string in the format 'value-value-value-...'.Returns: ax (matplotaxes._ax.Ax): The Ax object of the created hist.Requirements: - pand - numpy - mat.plot Notes - The hist uses bins calculated as `npardata.min(),()+2) - 05`.Example: >>> data = '1-2' ax task_func(data)\n    \"\"\"\n    # Convert string to list of integers\n    data_list = list(map(int, data.split('-')))\n\n    # Calculate bins\n    bins = np.arange(min(data_list), max(data_list) + 2) - 0.5\n\n    # Create histogram\n    fig, ax = plt.subplots(figsize=(10, 7))\n    ax.hist(data_list, bins=bins, edgecolor='black')\n\n    # Set title and labels\n    ax.set_title('Value on x-axis, Frequency on y-axis, Hist of Values')\n    ax.set_xlabel('Values')\n    ax.set_ylabel('Frequency')\n\n    return ax\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine of a specified length and adjusts a curve using curve_fit from scoptim to the dataParameters - array_length (int): Length sine wave arrayDefaults to 100.- noise_level (float): Level added sDefaults to 02 Returns: - Ax object: A plot showing noisy s and adjusted curveRequirements - numpy - sc.optim mat.py Example >>> ax task_func100 0.2\n    \"\"\"\n    x = np.linspace(0, 2 * np.pi, array_length)\n    y = np.sin(x) + np.random.normal(0, noise_level, array_length)\n\n    def func(x, a, b, c, d):\n        return a * np.sin(b * x + c) + d\n\n    popt, _ = curve_fit(func, x, y)\n\n    plt.plot(x, y, 'b-', label='data')\n    plt.plot(x, func(x, *popt), 'r-', label='fit')\n    plt.legend(loc='best')\n    plt.show()\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads a CSV, normal the text in it to ASCII, counts words, returns 10 most along their frequencies as a mat bar plot and a list tuParameters: csv_file (str): The path CSV.Returns: tuple: A tuple containing matplotaxes.Ax object for the bar plot and a list the 10 most common words with their frequenciesRaises: FileNotFoundError If the CSV cannot at specified path.IOError If there an in reading the file.Requirements: - unicodedata - csv collections mat.pyplot Example >>> createdummycsv_file('d. >>> ax, mostcommonwords task_func('d osremove('d type(ax) <classmataxes._ax.Ax'> >>> typemostlist'> Note The function assumes the CSV contains text data and that file properly formatted\n    \"\"\"\n    try:\n        with open(csv_file, 'r') as file:\n            reader = csv.reader(file)\n            data = list(reader)\n    except FileNotFoundError:\n        print(f\"File {csv_file} not found.\")\n        return\n    except IOError:\n        print(f\"Error reading file {csv_file}.\")\n        return\n\n    text = ' '.join(str(i) for i in data)\n    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode()\n\n    words = text.split()\n    counter = Counter(words)\n\n    most_common_words = counter.most_common(10)\n\n    words, frequencies = zip(*most_common_words)\n\n    fig, ax = plt.subplots()\n\n    ax.bar(words, frequencies)\n\n    ax.set_ylabel('Frequency')\n    ax.set_title('10 most common words')\n\n    return ax, most_common_words\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list normally distributed random and plot their hist and probability density function (PDF).Parameters: - size (int): The number random numbers to generateDefault is 1000.Requirements: - numpy - sc.stats mat. Returns - matfigure.Figure: A figure object containing the hist and PDF plot.Example: >>> import mat >>> fig task_func(size=500 isinstance matfigure.Figure) # Check the output a mat figure object True len.ax[].lines == 1 # Ensure there one line plot on the axes for the PDF True lenpat > 10 Check there are histogram bars (pat) present True\n    \"\"\"\n    # Generate random numbers\n    random_numbers = np.random.normal(0, 1, size)\n\n    # Create histogram\n    fig, ax = plt.subplots(2, 1)\n    ax[0].hist(random_numbers, bins=30, density=True)\n    ax[0].set_title('Histogram')\n\n    # Create PDF\n    x = np.linspace(-4, 4, 1000)\n    ax[1].plot(x, stats.norm.pdf(x, 0, 1))\n    ax[1].set_title('Probability Density Function')\n\n    return fig\n\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates an RSA public and pair and saves the private in a file after encrypt with a password using AES encryptionReturns the public key and the filename encrypted private, along encryption details for testingThe name of output file a in the format of \"private_key_<number>.\", where < a the hex representation 8 randomly generated bytes.Returns: rsa.Public: The RSA.str: The filename where the encrypted privatebytes: The encryption password, for testing dec.bytes: The encryption non, for testing dec.Requirements: - rsa - os - Crypto.Cipher.A - CryptoRandomget_randombytes - base.b64en base54bdec Examples >>> pub_key, filename, password non = task_func() >>> isinstancepub r.Public) True isfilename str) bytes\n    \"\"\"\n    # Generate RSA key pair\n    (pubkey, privkey) = rsa.newkeys(512)\n\n    # Generate random bytes for filename\n    random_bytes = get_random_bytes(8)\n    filename = \"private_key_\" + random_bytes.hex() + \".\"\n\n    # Generate random password\n    password = get_random_bytes(16)\n\n    # Encrypt private key with AES\n    cipher = AES.new(password, AES.MODE_EAX)\n    ciphertext, nonce = cipher.encrypt_and_digest(rsa.key.exportKey('PEM'))\n\n    # Save encrypted private key to file\n    with open(filename, 'wb') as file:\n        [file.write(x) for x in [cipher.nonce, ciphertext, nonce]]\n\n    return pubkey, filename, password, nonce\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates RSA public and, encrypt a file using AES encryption, then encrypt the AES with the public RSAThe encrypted file and the encrypted AES key are saved in separate new files.This method demonstrates a hybrid encryption approach.Parameters: file_path (str): The path file to be encryptedReturns: rsa.PublicKey: The RSA public.str: The filename of encrypted file.str: The filename of file containing encrypted AES key.Requirements: - rsa - os - cryptography.hazmat.backends.default_backend - cryptographyprimcip.Cipher - cryptographyprimcalgorith -primcmodes - - base64.b64en Examples >>> pub_key, encrypted_file, encryptedkey_file = task_func('my_file.txt') isinstancepub r.Public) True encrypted.endsw('.encrypted') True encryptedkey_encrypted\n    \"\"\"\n    # Generate RSA keys\n    (pubkey, privkey) = rsa.newkeys(512)\n\n    # Read file\n    with open(file_path, 'rb') as f:\n        data = f.read()\n\n    # Generate AES key\n    aes_key = os.urandom(32)\n\n    # Encrypt data with AES\n    cipher = Cipher(algorithms.AES(aes_key), modes.ECB())\n    encryptor = cipher.encryptor()\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(data) + padder.finalize()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt AES key with RSA\n    encrypted_aes_key = rsa.encrypt(aes_key, pubkey)\n\n    # Save encrypted data and encrypted AES key\n    encrypted_file_path = file_path + '.encrypted'\n    encrypted_key_file_path = file_path + '.key.encrypted'\n\n    with open(encrypted_file_path, 'wb') as f:\n        f.write(encrypted_data)\n\n    with open(encrypted_key_file_path, 'wb') as f:\n        f.write(b64encode(encrypted_aes_key))\n\n    return pubkey, encrypted_file_path, encrypted_key_file_path\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Extracts the text and href attributes all anchor tags from a given URL's HTML content, and returns this data in pand Data along time of data extractionParameters: url (str): The from to fetch HTML contentReturns: pandData: A Data with columns 'text',href andfetchtime'.Each row corresponds an anchor tag in HTML, with 'text andhref containing text and the hyper reference of, respectively'fetch_time contains the timestamp when data fet in formatYYMM'.Raises: ValueError: If the provided URL invalid or empty.URLError: If there an issue network connectivity or the server.Requirements: - urllrequest - pyquery datime pand urerror Example >>> df task_func('httpsenwikibMain') Note The function requires internet connectivity to fetch HTML content\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n    except Exception as e:\n        raise ValueError(\"Invalid URL or network error\") from e\n\n    html = response.read()\n    doc = pq(html)\n\n    data = []\n    for a in doc('a'):\n        text = a.text\n        href = a.attrib['href']\n        fetch_time = datetime.now().strftime('%y%m')\n        data.append({'text': text, 'href': href, 'fetch_time': fetch_time})\n\n    df = pd.DataFrame(data)\n    return df\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for the specified number hours and save in CSV with coloumns 'Time',TemperatureHumPressParameters: - hours (int): The for sensor data to generated- output_dir (str, optional): The output file path Returns: - hours (int): Number generate data for.Requirements: - datetime - os - random csv Example >>> file_path task_func(1) # Gener data for 1 hour >>> ospathex Check the file was actually True is str) Val that return type a string True 'sensor_data.csv in file # Ensure the filename correct True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + SENSORS)\n\n        start_time = datetime.now()\n        end_time = start_time.replace(hour=start_time.hour + hours, minute=0, second=0)\n\n        while start_time <= end_time:\n            row = [start_time.strftime('%Y-%m-%d %H:%M:%S')]\n            for _ in SENSORS:\n                row.append(randint(1, 100))\n            writer.writerow(row)\n\n            start_time = start_time.replace(minute=start_time.minute + 1, second=0)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data for different vehicle over a specified number hours, saves the data to a CSV with coloumns 'Time',Car',BusTruck andBike', plots data in line chart with 'Time on x- andVeh CountParameters: - hours (int): Number to generate data for.- output_dir (str, optional): The output file path Returns: - tuple: Path CSV and the matplot axes object of line plot.Requirements: - pand - os - csv mat.plot random dat Example >>> import mat >>> file_path, ax task_func2 # Gener data for 2 hours >>> isinstancefile str) True 'trafficdata. in file True isax mataxes.Ax\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, 'traffic_data.csv')\n\n    data = {'Time': []}\n    for vehicle_type in VEHICLE_TYPES:\n        data[vehicle_type] = []\n\n    for h in range(hours):\n        for m in range(60):\n            time = datetime(2022, 1, 1, h, m).strftime('%H:%M')\n            data['Time'].append(time)\n            for vehicle_type in VEHICLE_TYPES:\n                data[vehicle_type].append(randint(0, 100))\n\n    df = pd.DataFrame(data)\n    df.to_csv(file_path, index=False)\n\n    ax = df.set_index('Time').plot(kind='line', figsize=(15, 10), title='Traffic Data')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n\n    plt.savefig(os.path.join(output_dir, 'traffic_data.png'))\n\n    return file_path, ax\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for the specified number hours, save it in CSV with colomns 'Time'Condition and back up the file to a backup directoryParameters: - hours (int): The for weather data to generated- output_dir (str, optional): The output file path Returns: - str: path of generated CSVRequirements: - datetime - os - random csv shutil Example >>> 'weather_data in task_func(24 True10\n    \"\"\"\n    # Create output directory if not exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Create backup directory if not exists\n    backup_dir = os.path.join(output_dir, 'backup')\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time, condition])\n\n    # Save data to CSV\n    csv_file_path = os.path.join(output_dir, 'weather_data.csv')\n    with open(csv_file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(weather_data)\n\n    # Backup the CSV file\n    backup_file_path = os.path.join(backup_dir, 'weather_data.csv')\n    shutil.copyfile(csv_file_path, backup_file_path)\n\n    return csv_file_path\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Gener and visualize a Pand Data of the results football for multiple teams 'Team with random goals 'Go penaltiesPen CostPenalties are converted fines according penalty costsParameters goals (int): The maximum a team matchpenalties (int): The maximum number a team receive in match.Returns: pd.DataFrame: A data match resultslist: A list containing two seaborn plot objects (Axes) for goals penalty costsRequirements - pand - seab mat.plot random Example >>> df, plots task_func5 3\n    \"\"\"\n    # Create a dataframe\n    data = {'Teams': [], 'Goals': [], 'Penalties': [], 'Penalty Costs': []}\n\n    for team in TEAMS:\n        # Randomly generate the number of goals and penalties\n        data['Teams'].append(team)\n        data['Goals'].append(randint(0, goals))\n        data['Penalties'].append(randint(0, penalties))\n        # Calculate the penalty costs\n        data['Penalty Costs'].append(data['Penalties'][-1] * PENALTY_COST)\n\n    df = pd.DataFrame(data)\n\n    # Create a bar plot for goals\n    fig1, ax1 = plt.subplots()\n    sns.barplot(x='Teams', y='Goals', data=df, ax=ax1)\n\n    # Create a bar plot for penalty costs\n    fig2, ax2 = plt.subplots()\n    sns.barplot(x='Teams', y='Penalty Costs', data=df, ax=ax2)\n\n    return df, (ax1, ax2)\n\ndf, plots = task_func(5, 3)"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create Pandas DataFrame with random integer between 9 for a given number rowsCount the nonzero values in each column and visualize this information using a bar plotParameters: rows (int): The DataReturns: tuple: A containing following elements - DataFrame: The generated Data with random integer- Axes: The matplot Ax object containing bar plot.Requirements - numpy - pand mat. Example >>> df, ax task_func10 printax.title.get_text # Should return 'NonZero Value Counts Non\n    \"\"\"\n    np.random.seed(0)\n    df = pd.DataFrame(np.random.randint(1, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n\n    non_zero_counts = df.ne(0).sum()\n    ax = non_zero_counts.plot(kind='bar')\n\n    ax.set_title('NonZero Value Counts')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Counts')\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Gener a Pand DataFrame that displays grades a randomly group students in multiple coursesCalcul average grade in each course, the number students with passing (>= 60), visualize this information using a bar plot with title 'Course-wise Average and Passing Counts'.Parameters: numstud (int): The in sampleReturns: Tuple[pd.DataFrame, plAxes]: A containing generated Data and bar plot's Ax objectRequirements - pand - n mat. random typing Example >>> df, ax task_func50gettitle() 'Course-wise Average and Passing Grade Count\n    \"\"\"\n    # Generate random grades\n    np.random.seed(0)\n    grades = np.random.randint(50, 100, (num_students, 4))\n    courses = ['Math', 'English', 'Physics', 'Chemistry']\n    df = pd.DataFrame(grades, columns=courses)\n\n    # Calculate average grade in each course\n    averages = df.mean()\n\n    # Calculate number of students with passing grade in each course\n    passing_counts = (df >= 60).sum()\n\n    # Create a DataFrame to store the results\n    results = pd.DataFrame({\n        'Average Grade': averages,\n        'Passing Count': passing_counts\n    })\n\n    # Plot the results\n    ax = results.plot(kind='bar', figsize=(10, 5))\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_ylabel('Grade')\n\n    return df, ax\n\n\ndf, ax = task_func(50)\nplt.show()\n"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit an exponential decay function to the indices in array where the first column matches target valueParameters: - array (npnd): A numpy where the first column will searched the target value- target_value (float or int): The value in first column to filter the data for fittingReturns: - tuple: Containing the optimized parameters of fitting function (popt) and the matplot Axes object.Requirements: - numpy - sc.optim - mat.py Example >>> import n array.[1 2],1 32]]) target 1 >>> params, ax task_funcarray target lenparams 3\n    \"\"\"\n    # Filter the data\n    filtered_data = array[array[:, 0] == target_value]\n\n    # Define the exponential decay function\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Perform the curve fitting\n    popt, _ = optimize.curve_fit(exp_decay, filtered_data[:, 0], filtered_data[:, 1])\n\n    # Plot the original data and the fitted curve\n    fig, ax = plt.subplots()\n    ax.plot(filtered_data[:, 0], filtered_data[:, 1], 'o', label='data')\n    ax.plot(filtered_data[:, 0], exp_decay(filtered_data[:, 0], *popt), 'r-', label='fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    ax.legend()\n\n    return popt, ax\n\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from a collection text documents using NonNeg Matrix FactorNMThis function first preprocess input texts by removing nonalph (excluding spaces), converting all lower removing stopwordsIt then vector processed texts using TF-IDF and applies NMF extract specified number topicsEach topic represented as list its most significant words based NMF component weightsParameters: - texts (list str): The input documents from which extract topics- num_top (int): The topics to extractReturns: - list list str: A where each element words representing topicRequirements - re - nltk - sklearn.decom skfeature_extraction.text Example >>> texts [...\"Data science involves the study.\",...\"Machine learning provides systems the learn data.\",...\"Python programming used data.\"...] >>> topics = task_functexts 2 printtopics [['data',science ['systemprovides Note The exact output may depending TF-IDF vectorization and NMF initialization\n    \"\"\"\n    # Preprocessing\n    texts = [ALPHANUMERIC.sub(' ', text.lower()) for text in texts]\n    texts = [' '.join([word for word in text.split() if word not in STOPWORDS]) for text in texts]\n\n    # Vectorization\n    vectorizer = TfidfVectorizer(max_df=0.95, min_df=2, max_features=1000, stop_words='english')\n    tfidf = vectorizer.fit_transform(texts)\n\n    # Topic extraction\n    nmf = NMF(n_components=num_topics, random_state=1, alpha=.1, l1_ratio=.5).fit(tfidf)\n\n    def display_topics(model, feature_names, no_top_words):\n        topics = []\n        for topic_idx, topic in enumerate(model.components_):\n            topics.append([feature_names[i] for i in topic.argsort()[:-no_top_words - 1:-1]])\n        return topics\n\n    no_top_words = 10\n    topics = display_topics(nmf, vectorizer.get_feature_names(), no_top_words)\n\n    return topics\n\n\ntexts = [\"Data science involves the study.\",\n         \"Machine learning provides systems the learn data.\",\n         \"Python programming used data.\"]\n\ntopics = task_func(texts, 2)"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Gener word vectors from a list texts using gensim Word2Vec model and nltk.corusstopwordsThe texts are first cleaned by removing all nonalph except space lowerc stop words are removedParameters texts (list): A strings.stopwords (list, optional): A stop be removedIf not provided nltk's stopwords will be usedReturns: Word2Vec: A trained Word model.Requirements - re - nltk gensim Example >>> texts [\"HelloMachine Learning is great\",Python my model task_func vector modelwv['python']\n    \"\"\"\n    if stopwords is None:\n        stopwords = nltk.corpus.stopwords.words('english')\n\n    # Clean the texts\n    texts = [ALPHANUMERIC.sub(' ', text.lower()) for text in texts]\n\n    # Remove stopwords\n    texts = [' '.join([word for word in text.split() if word not in stopwords]) for text in texts]\n\n    # Train the Word2Vec model\n    model = Word2Vec([text.split() for text in texts], min_count=1)\n\n    return model\n\n\ntexts = [\"Hello Machine Learning is great\", \"Python my model task_func vector model\"]\nmodel = task_func(texts)"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes JSON files in a directory.The function reads each JSON file alphabet into Data and inserts a \"Source column that specifies filename.The processed files then moved \"process sub.The path may not exist initially.Parameters: - path (str): of directory containing JSON filesReturns: - df (pandas.DataFrame): A Data containing data from all processed filesRequirements: - pand - json - os - shutil Example >>> os.mk('data') withajsonw...f.write('[{\"a 1},]')...36 >>> with open('data/b.jsonw as f...f.write('[{\"a 5, 6}, 7]')...36 >>> df = task_func('data') print( a b source 0 5 6 b.json 1 7 8 b 0 1 2 a 1 3 4 a >>> shutil.rmtree('\n    \"\"\"\n    # Create an empty DataFrame\n    df = pd.DataFrame()\n\n    # Check if the directory exists\n    if not os.path.isdir(path):\n        print(f\"Directory {path} does not exist.\")\n        return df\n\n    # Get a list of all JSON files in the directory\n    json_files = [f for f in os.listdir(path) if f.endswith('.json')]\n\n    # Process each JSON file\n    for file in json_files:\n        # Read the JSON file\n        with open(os.path.join(path, file), 'r') as f:\n            data = json.load(f)\n\n        # Convert the data to a DataFrame\n        df_temp = pd.json_normalize(data)\n\n        # Add a \"Source\" column that specifies the filename\n        df_temp['Source'] = file\n\n        # Append the DataFrame to the main DataFrame\n        df = df.append(df_temp, ignore_index=True)\n\n        # Move the processed file to a \"processed\" subdirectory\n        shutil.move(os.path.join(path, file), os.path.join(path, 'processed', file))\n\n    return df\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create and delete a CSV \"taskfuncdata/Outputtxt with sensor data for temperatureThe data is generated randomly written append mode the file deleted after useReturns: - Returns path CSV \"taskfuncdata/Outputtxt before deletionRequirements - os - csv random datatime Example >>> task_func()\n    \"\"\"\n    # Create directory if not exists\n    if not os.path.exists('taskfuncdata'):\n        os.makedirs('taskfuncdata')\n\n    # Create CSV file\n    csv_file_path = 'taskfuncdata/Outputtxt'\n    with open(csv_file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"SensorID\", \"Temperature\", \"Timestamp\"])\n\n        # Generate random data and write to CSV\n        for i in range(1, 11):\n            temperature = random.uniform(30, 40)\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            writer.writerow([i, temperature, timestamp])\n\n    print(f\"CSV file created at: {csv_file_path}\")\n\n    # Delete CSV file after use\n    os.remove(csv_file_path)\n\n    print(f\"CSV file deleted at: {csv_file_path}\")\n\n    return csv_file_path\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data a given URL and save the scrap CSVParameters: - url (str): The scrape dataReturns: - CSV_FILE_PATH (str): The of CSV where scrap savedRequirements: - urll - bs4 csv os Example >>> task_func('httpwwwexample') 'scraped_data.csv\n    \"\"\"\n    # Open the URL\n    with urllib.request.urlopen(url) as response:\n        html = response.read()\n\n    # Parse the HTML\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find the data\n    data = soup.find_all('div')\n\n    # Save the data to a CSV\n    with open(CSV_FILE_PATH, 'w', newline='') as csv_file:\n        writer = csv.writer(csv_file)\n        for div in data:\n            writer.writerow([div.text])\n\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train a linear regression and return model score of test setThe provided DataFrame used as training, where target_column used target in training the modelBefore training the provided data is split a training and test set using test_size randomstate parametersParameters data (DataFrame): The input for trainingtargetcolumn (str): The predict.randomstate (int): The seed for train-test splitDefaults 0 test_size (float): fraction size test set.Defaults 02 Returns: float: The model scoreRaises: ValueError If data a DataFrame.ValueError If data empty.ValueError If target_columnt not column of data.ValueError If data contains values numeric.ValueError If random_state an.ValueError If test_size between.Requirements - pand - sk.model_selectiontraintestsplit sklinearmodelLinReg n Example >>> rng =default_rseed42 data pData({...'x1': rng.random(100),...'x2': rng.random(100),...'y': rng.random(100...}) >>> result task_funcdata 'y', randomstate2 testsize3 -025486317198996633 data pData({...'x1': rng.random(500),...}) >>> data['y'] datax1 * 2 + result task_func ' randomstate9 testsize1 1\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a DataFrame\")\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    if target_column not in data.columns:\n        raise ValueError(f\"{target_column} not a column of data\")\n    if not np.issubdtype(data.dtypes.object, np.number).all():\n        raise ValueError(\"data must contain only numeric values\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return model.score(X_test, y_test)\n"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates a random DataFrame with 100 records.Each record consists an ID (ranging 1 to 100), Name (randomly selected from provided lists of Latin and other names), Date of Birthrandom generated dates between the specified years), and Email (constructed using the name, year of provided email domain).Improperly encoded Latin characters in names are corrected during the process.Parameters: - start_year (int): The starting for the range of birth years.Defaults to 1980.- end_year (int): The ending year for the range of birth years.Defaults to 2000.- email_domain (str): The domain to be used for email addresses.Defaults to 'example.com'.- latin_names (list of str): A list Latin to be used in the generation.Defaults to: latin_names=['Sopet\u00f3n',M\u00e9ndez',G\u00f3',P\u00e9',Mu'] - other_names (list of str): A list other names to be used in the generation.Defaults to: other_names=['Smith',Johnson',Williams',BrownJones'] - rng_seed (int): The seed for the r.Returns: - DataFrame: A pand Data containing the generated user data.The DataFrame has columns: 'ID',NameDate of Birth andEmail'.Requirements: - pand - numpy - codecs - re - datetime Examples >>> df = task_func(rng_seed=1) print() ID Name Date of Birth Email 0 1 Brown 1992-0910 brown1992@example 1 2 Smith 19960213 smith1996example 2 Jones 19861019 j1986 3 G\u00f3 20001211\u00f3 4 G 19840824..............95 96 Johnson 1990-0917 johnson1990@example 96 97 Brown 19921014 brown1992example Mu\u00f1 19980504 muexample Mu 19820101 Jones 19900328 jones1990 <BLANKLINE> [100 rows x 4 columns >>> df = task_func(start_year=0, end1200 email_domain='test.at', rng_seed=3) >>> print(df) ID Name Date of Birth Email 0 1 Sopet\u00f3n 0952-09-01 00: sopet\u00f3n952@test 1 Brown 08751010 00 brown875@test 2 Sop 06050815 s605 G\u00f3 03371123337 G 06410427641..............95 96 Brown 0044-05-17 00:00:00 brown44@test.at 96 97 Williams 05300121 00 williams530test 97 Johnson 10051215 00 johnson100 98 M\u00e9nd 11340719 m\u00e911 99 Johnson 06960822 john696 <BLANKLINE> [100 rows x 4 columns\n    \"\"\"\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n\n    ids = np.arange(1, 101)\n    names = np.random.choice(latin_names + other_names, size=100)\n    birth_dates = pd.date_range(start=str(start_year)+'-01-01', end=str(end_year)+'-12-31')\n    birth_dates = np.random.choice(birth_dates, size=100)\n    emails = [re.sub(r'\\s+', '', name.lower()) + str(date.year) + '@' + email_domain for name, date in zip(names, birth_dates)]\n\n    df = pd.DataFrame({'ID': ids, 'Name': names, 'Date of Birth': birth_dates, 'Email': emails})\n    return df\n\ndf = task_func(rng_seed=1)"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read a list diction from a JSON file, calculate mean median for key write results CSVParameters: - input_file (str): input JSON name- output_file (str): The output CSV nameReturns: - dict: A dictionary where each key field from input JSON and each another dictionary with mean median of thatRequirements - numpy - collections json c Example >>> task_func('datajson 'statscsv\n    \"\"\"\n    # Read JSON\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Calculate mean and median\n    results = defaultdict(dict)\n    for key, values in data.items():\n        results[key]['mean'] = np.mean(values)\n        results[key]['median'] = np.median(values)\n\n    # Write to CSV\n    with open(output_file, 'w') as f:\n        writer = csv.writer(f)\n        for key, value in results.items():\n            writer.writerow([key, value['mean'], value['median']])\n\n    return results\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from a dictionary by checking if the exists, and if it has content, then copies it a target directoryParameters: - kwargs (dict): A dictionary where keys full file paths and values the file content- target_dir (str, optional): The directory where files will copied toDefaults to 'non_none_files'.Returns: - copied_files (list): A full file paths that were.Requirements: - os - pathlib.Path - shutil Example: >>> files = {'/pathfile1txt': 'Hello', None, 'World'} task_func(files) >>> files {4Another', 'Example' taskfiles, target_dir=\"another_directory\")\n    \"\"\"\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if file_path and content:\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n                if file_content:\n                    new_file_path = os.path.join(target_dir, Path(file_path).name)\n                    shutil.copy(file_path, new_file_path)\n                    copied_files.append(new_file_path)\n\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes CSV files in a directory based a specified pattern and creates new with altered names while preserving content, you've laid a solid with your initial testsParameters - directory (str): path containing CSV to processed- pattern (str, optional): A regular pattern the fil interest shouldReturns: - new_files (list): A strings, where the filename new CSV created functionRequirements - re - os - pathlib csv Example >>> task_func(\"/mdatatest_data ['Shan.csvShannon\n    \"\"\"\n\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise ValueError(f\"Directory {directory} does not exist\")\n\n    # Get all CSV files in directory\n    csv_files = [f for f in os.listdir(directory) if f.endswith('.csv')]\n\n    # Initialize list to store new file names\n    new_files = []\n\n    # Process each CSV file\n    for csv_file in csv_files:\n\n        # Check if file matches pattern\n        if re.match(pattern, csv_file):\n\n            # Get filename without extension\n            filename = os.path.splitext(csv_file)[0]\n\n            # Split filename by hyphen\n            parts = filename.split('-')\n\n            # Check if filename has more than one hyphen\n            if len(parts) > 1:\n\n                # Join first part and last part with hyphen in between\n                new_filename = '-'.join(parts[:-1]) + '-' + parts[-1]\n\n                # Create new file path\n                new_file_path = os.path.join(directory, new_filename + '.csv')\n\n                # Add new file path to list\n                new_files.append(new_file_path)\n\n                # Open original CSV file\n                with open(os.path.join(directory, csv_file), 'r') as f_in:\n\n                    # Read CSV data\n                    data = list(csv.reader(f_in))\n\n                    # Open new CSV file\n                    with open(new_file_path, 'w', newline='') as f_out:\n\n                        # Write CSV data\n                        writer = csv.writer(f_out)\n                        writer.writerows(data)\n\n    # Return list of new file paths\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip in a whose matches a certain pattern by splitting filename the last \"-\" occurs and using prefix part as directory to extractParameters - directory (str): zip files- pattern (str): Re pattern to zip filesReturns: - list: A directories where files were extractedRequirements - os - re zipfile Example >>> task_func('/tmpmydata ('/backback_20230827010101', [])\n    \"\"\"\n    result = []\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            prefix = filename.split('-')[0]\n            extract_dir = os.path.join(directory, prefix)\n            if not os.path.exists(extract_dir):\n                os.makedirs(extract_dir)\n            with zipfile.ZipFile(os.path.join(directory, filename), 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            result.append(extract_dir)\n    return result\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Arch all files that match a particular pattern and then delete originalParameters - pattern (str): match filesReturns: - archive_file (str): The pathRequirements - subprocess - os glob Example >>> taskfunc('*.txt Note This function archive file path\n    \"\"\"\n    # Find all files that match the pattern\n    files = glob.glob(pattern)\n\n    # Create archive directory if it doesn't exist\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n\n    # Archive each file\n    for file in files:\n        # Get the base name of the file\n        base_name = os.path.basename(file)\n\n        # Create the archive file path\n        archive_file = os.path.join(ARCHIVE_DIR, base_name)\n\n        # Archive the file\n        subprocess.run(['cp', file, archive_file])\n\n    return archive_file\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count the total goals and penalties from a CSV and update it with the given goals.Parameters: - goals (dict): A dictionary where keys are team names and values numbers of goals scored.- penalties (dict): A dictionary where keys are team names and values numbers of penalties incurred.Returns: - count (Counter.collections): A Counter object with total counts of goals and penalties.Requirements: - csv - os - collections.Counter Example: >>> goals = {'Team A 3Team 2 1 0 2} penalties {Team A 1 0 2, 3, 1} counts task_func(go, penalties) print( Counter({'go 8,penalties 7})\n    \"\"\"\n    # Initialize counters\n    total_goals = Counter()\n    total_penalties = Counter()\n\n    # Check if CSV file exists\n    if not os.path.exists(csv_file_path):\n        return total_goals + total_penalties\n\n    # Read CSV file\n    with open(csv_file_path, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n        for row in reader:\n            team, team_goals, team_penalties = row[0], int(row[1]), int(row[2])\n            total_goals[team] += team_goals\n            total_penalties[team] += team_penalties\n\n    # Update with given goals and penalties\n    total_goals.update(goals)\n    total_penalties.update(penalties)\n\n    return total_goals + total_penalties\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from the source directory target based a specified patternThis function iter through all files in source, and if a's name matches the specified pattern it is moved targetParameters: - source_dir (str): The path source.- target_dir (str): The path.- file_pattern (str optional): The regular pattern that fil must match in order be moved.Default is r'\\b[A-a]+\\.(txt|doc|docx)\\b', which matches fil that consist al and have extensions txt, doc orReturns: - moved_files_count (int): The that were successfully from source directory targetRequirements: - re - os - shutil Example >>> task_func('/pathsource', '/pathtarget') 3 This example would move 3 from '/source' if their fil match the default pattern\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    moved_files_count = 0\n    for file_name in os.listdir(source_dir):\n        if re.search(file_pattern, file_name):\n            shutil.move(os.path.join(source_dir, file_name), target_dir)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calcul the similarity values two texts based cos similarity and Le ratioThe texts are first cleaned by removing all nonalph except spaces and converted lowerCosine similarity is computed based term frequency in each text.The Leven ratio computed using 'rat' function from 'python-Le library, measures similarity two strings as a number between 0Parameters: - text1 (str): The first string compare.- text2 (str): The second string to compare.Returns: - tuple: A containing cos similarity and Le ratio as floats- cosine similarity (float): The ranges, 1 means identical term frequency and indicates no common terms- levensh_rat (float): The Le ratio also ranges, where means the strings identical they completelyRequirements: - re - numpy - collections Leven Example: >>> task_func(\"Hello,!\", \" World (0.9999999999999998,9565217391304348\n    \"\"\"\n    # Clean the texts\n    text1_clean = ALPHANUMERIC.sub(' ', text1).lower()\n    text2_clean = ALPHANUMERIC.sub(' ', text2).lower()\n\n    # Tokenize the texts\n    text1_tokens = text1_clean.split()\n    text2_tokens = text2_clean.split()\n\n    # Count the term frequency\n    text1_counter = Counter(text1_tokens)\n    text2_counter = Counter(text2_tokens)\n\n    # Calcul cosine similarity\n    cosine_vector1 = np.array([text1_counter[k] for k in text1_counter.keys()])\n    cosine_vector2 = np.array([text2_counter[k] for k in text1_counter.keys()])\n    cosine_similarity = np.dot(cosine_vector1, cosine_vector2) / (np.linalg.norm(cosine_vector1) * np.linalg.norm(cosine_vector2))\n\n    # Calcul Levenshtein ratio\n    levensh_rat = ratio(text1_clean, text2_clean)\n\n    return cosine_similarity, levensh_rat\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate all perm of a given list of numbers and calculate the sum the facts of each number in eachIf an empty list is given, the function returns empty lists.Parameters: numbers (list int): A list integers to perm and calculate fact sums.Returns: list of int: A list containing the sums the fact of each number in each perm.list of list of int: A list containing all perm numbers.Raises: TypeError: If numbers is not a list of integers.ValueError If input numbers are negative.Requirements: - funct.reduce - itertperm - math.fact Example: >>> fac, perm = task_func([1]) print() [9, 9 9] printperm [(1), (1 3 2),2 1 3),2 3 1),3 1 2 2 1)] fac,0 4])25 25] [(0 4),4, 0)]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input should be a list of integers\")\n    if not all(isinstance(i, int) for i in numbers):\n        raise TypeError(\"Input should be a list of integers\")\n    if not all(i >= 0 for i in numbers):\n        raise ValueError(\"Input should not contain negative numbers\")\n\n    def fact(n):\n        return reduce(lambda x, y: x * y, range(1, n + 1))\n\n    perms = list(permutations(numbers))\n    sums = [sum(fact(i) for i in p) for p in perms]\n\n    return sums, perms\n\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (SOURCE_DIRDEST_ based the specified file extensions (EXTIt also issues warnings for files that could not transferred due any issues.Parameters: - SOURCE_DIR (str): The source path from where files will transferred- DEST_DIR (str): The destination path to where files will transferred- EXTENSIONS (list): A list file to consider for transferring.Example: ['.txt', '.csvxx'] Returns: - transferred_files (list): A containing the names files that were successfully.Requirements: - warnings - os - glob - shutil time Example >>> task_func('/pathsource', '/pathdest ['.txt '.csv' ['file1. ' >>>sourcejpg' []\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.isdir(SOURCE_DIR):\n        warnings.warn(f\"Source directory {SOURCE_DIR} does not exist.\")\n        return []\n\n    # Check if destination directory exists\n    if not os.path.isdir(DEST_DIR):\n        warnings.warn(f\"Destination directory {DEST_DIR} does not exist.\")\n        return []\n\n    # Check if extensions are valid\n    if not all(ext.startswith('.') and len(ext) > 1 for ext in EXTENSIONS):\n        warnings.warn(\"Invalid extensions. Extensions should start with '.' and have more than 1 character.\")\n        return []\n\n    # Get all files with specified extensions\n    files = []\n    for ext in EXTENSIONS:\n        files.extend(glob.glob(os.path.join(SOURCE_DIR, f\"*{ext}\")))\n\n    # Transfer files\n    transferred_files = []\n    for file in files:\n        try:\n            shutil.copy2(file, DEST_DIR)\n            transferred_files.append(os.path.basename(file))\n        except Exception as e:\n            warnings.warn(f\"Failed to transfer file {file}. Reason: {str(e)}\")\n\n    return transferred_files\n\n\nSOURCE_DIR = '/path/to/source'\nDEST_DIR = '/path/to/destination'\nEXTENSIONS = ['.txt', '.csv']\n\nstart_time = time.time()\ntransferred_files = task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS)"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    This function takes a list tu containing elements and their respective counts and weights.It normal the counts using z-score normal and the weights using min-max scalingFinally, it returns a pandas DataFrame with the items, normalized counts, normalized weights.Parameters: data (list tu): A list where each tuple contains an element (any type), its count (int), and its weightfloatExample: [('A', 100, 0.5), 2006)] Returns: DataFrame: A pand Data with three columns: 'Item',Normalized CountNormal WeightEach row corresponds an entry from the input data.Requirements: - pand - numpy - sc.stats.zscore - sk.preprocessingMinMaxScaler Example: >>> data [('A', 100, 0.5), 2006 1507)] report = task_func(data) print( Item Normalized Count Normal Weight 0 A -1.224745 0.0 1 B 125 2 0000000 10 >>> data =Andrew 5743, 0925),Elizabeth 4655 10875Susan 4716 065),Christopher 210005),('Timothy 3943175)] Item Andrew 1248851843373 1 Elizabeth 0349969 1000000 2 Susan 0400366 0578313 -1760916000000 -0238270120482\n    \"\"\"\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n\n    # Normalize the counts using z-score\n    df['Normalized Count'] = zscore(df['Count'])\n\n    # Normalize the weights using min-max scaling\n    scaler = MinMaxScaler()\n    df['Normalized Weight'] = scaler.fit_transform(df[['Weight']])\n\n    return df[['Item', 'Normalized Count', 'Normalized Weight']]\n\n"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calcul the mean of numerical values in each position across tu in a list.Nonnumeric values are ignored, and means are computed only from available dataThat means that missing data in some of tu is simply ignored.A DataFrame with one columns named 'Mean Value which contains the mean values for all tuple positions.The index is according this scheme: 'Position i' where current.If an empty list is passed, then an DataFrame is returnedParameters: data_list (list of tu): A containing tu of mixed data types (string int float etc.).Defaults to [('a', 1, 2.1), 2,2),3),4),5 Returns: DataFrame: A pand Data with the mean values of the numerical data at each position.Requirements: - pand - numpy - itert Example >>> df task_func() >>> print() Mean Value Position 0 Na Position 30 Position 43 >>> data = [('a1 2.1 21, 'c'), (12 3, 4.3), (['d'], 4, 5.4 5, 65)] df print\n    \"\"\"\n    # Convert the list of tuples to a DataFrame\n    df = pd.DataFrame(data_list)\n\n    # Create a new DataFrame to store the mean values\n    mean_df = pd.DataFrame(columns=['Mean Value'], index=['Position ' + str(i) for i in range(df.shape[1])])\n\n    # Iterate over each column in the DataFrame\n    for i in range(df.shape[1]):\n        # Select the column and convert it to a list\n        col = df.iloc[:, i].tolist()\n\n        # Filter the list to only include numerical values\n        num_list = [x for x in col if pd.to_numeric(x, errors='coerce') is not None]\n\n        # Calculate the mean of the numerical values\n        mean_value = np.mean(num_list)\n\n        # Add the mean value to the mean DataFrame\n        mean_df.loc['Position ' + str(i), 'Mean Value'] = mean_value\n\n    return mean_df\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform a chi of independence of variables in a contingency table.This function takes DataFrame containing categ two column names, then constructs contingency table from two categ columns and performs chi of independenceIt returns the p- test, which indicates the probability observing data if null (independence of variablesParameters: data (pd.DataFrame): A Data containing categ variables.col1 (str): The name first categ column 'data'.col2 (str): The name second categ column in 'data'.Returns: float: The p- chisquare test of independenceRaises: ValueError: If 'data empty if 'col1 or are not in 'data', if one both of columns do have multiple categories or some categories have less 5 observations (viol chi assumptions).TypeError If one or both columns contain noncateg data.Requirements: numpy pand sc.statschi2_conting Examples >>> data pDataFrame({...'Var1': ['A'] * 40 + ['B 60,...'Var2': ['X'] * 25 + ['Y 25X...}) >>> task_func(data 'Var1 ' 0.06619257972219346 >>> nprandomseed42) >>> data pDataFrame({...'a': nprandom['A' size100),...'b': nprandom['X' size100...}) >>> task_func(data 'a',') 1.0\n    \"\"\"\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both columns are not in the data\")\n    if data[col1].nunique() < 2 or data[col2].nunique() < 2:\n        raise ValueError(\"One or both columns have less than 2 categories\")\n    if data[col1].nunique() * data[col2].nunique() > 200:\n        raise ValueError(\"The number of categories is more than 200\")\n    if data.empty:\n        raise ValueError(\"Data is empty\")\n    if not np.issubdtype(data[col1].dtype, np.integer) or not np.issubdtype(data[col2].dtype, np.integer):\n        raise TypeError(\"One or both columns contain non-categorical data\")\n\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n\n    return p\n\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate a number dice rolls, calculate the frequency each result return both the frequency array a hist of resultsNote The dice rolls have 6 possible outcomesThe title the hist is \"Hist Dice Rolls\".The x-axis is labeled \"Dice Value and theFrequency\".Parameters: rolls (int): The dice rolls.Returns: tuple: A tuple containing: - nparray: A n with the frequency of each outcome.- matplot.Axes: Ax object representing the hist.Requirements: - numpy - mat.plot - random Examples >>> import random random.seed0) >>> outcomes, ax task_func10000 printout) [1656 1690 1696573269] >>> plshow() >>> randomseed10 >>> outcomes100)15 21 17 22 16 9]\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    results = [random.choice(NUMBERS) for _ in range(rolls)]\n    frequencies = np.bincount(results)\n\n    ax = plt.hist(results, bins=range(1, 8), edgecolor='black', align='left')\n    plt.title(\"Hist Dice Rolls\")\n    plt.xlabel(\"Dice Value\")\n    plt.ylabel(\"Frequency\")\n\n    return frequencies, ax\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from a source directory to a targetThe function identifies processed files by the '_processed suffix in filename.Parameters: source_dir (str): The directory containing files to be archivedtarget_dir (str): The directory where archive will savedarchive_name (str): The name file.Default is 'archive.zip'.Returns: str: The path created archive.Requirements: - os - re - shutil - zipfile Example: >>> task_func('.data', './_processed/') './archive.zip >>> task',my_archivezipmy\n    \"\"\"\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    archive_path = os.path.join(target_dir, archive_name)\n\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        for root, dirs, files in os.walk(source_dir):\n            for file in files:\n                if re.search(r'_processed\\.', file):\n                    file_path = os.path.join(root, file)\n                    zipf.write(file_path, arcname=os.path.relpath(file_path, source_dir))\n\n    return archive_path\n\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts the stock closing prices for next 7 using simple linear and plots the data.Parameters: df (DataFrame): The inputframe with columns 'dateclosing_price'.'date' should in datetime format.Returns: tuple: A tuple containing: - list: A with predicted prices for the next 7.- Axes: The matplot Ax object containing the plot.Requirements: - pand - numpy mat. sk.linear_model.LinReg Const The function uses a constant time step of 24*60*60 seconds to generate future timExample: >>> df pdData({...'date': pd.date_range(start='1/12021720'),...'closing_price [100, 101]...}) >>> pred_prices, plot = task_funcdf) print(pred [107.0, 108 109]\n    \"\"\"\n    # Create a new column 'time' which represents the time in seconds from the first date\n    df['time'] = (df['date'] - df['date'].min()) / np.timedelta64(1, 's')\n\n    # Create a new DataFrame for the future dates\n    future_dates = pd.date_range(start=df['date'].max(), periods=7, freq='D')\n    future_df = pd.DataFrame(future_dates, columns=['date'])\n    future_df['time'] = (future_df['date'] - df['date'].min()) / np.timedelta64(1, 's')\n\n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(df[['time']], df['closing_price'])\n\n    # Predict the closing prices for the future dates\n    pred_prices = model.predict(future_df[['time']])\n\n    # Plot the original data and the predicted prices\n    plt.figure(figsize=(10, 6))\n    plt.plot(df['date'], df['closing_price'], label='Original Prices')\n    plt.plot(future_df['date'], pred_prices, label='Predicted Prices')\n    plt.xlabel('Date')\n    plt.ylabel('Closing Price')\n    plt.title('Stock Prices Prediction')\n    plt.legend()\n    plt.grid(True)\n\n    return pred_prices.tolist(), plt.gca()\n"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies and plots outl in the 'closing_price column a given Data using Z-Score methodParameters: df (pandas.Data): The input Data that must contain a column named 'closing_price with numericalz_threshold (float, optional): The absolute ZScore threshold for identifying outlDefault is 2Returns: tuple: A tuple containing following elements - pandDataFrame: A Data outl in 'closing_price column- matplot.axes._axAx: The plot object displaying outl, if x- label 'Index',Closing Price and titleOut in Closing PricesRequirements: - numpy - mat. sc.stats.zscore Const Z-Score threshold for identifying outl is customizable via the 'z_th parameterExamples: >>> import pand df1Data({...'closing_price [100 101 150...}) >>> outliers1, plot1 = task_funcdf1) df2 pdData({...'closing_price [10, 20 100...}) >>> outliers2, plot2 = task_funcdf2 z_th15\n    \"\"\"\n    df['z_score'] = zscore(df['closing_price'])\n    outliers = df[np.abs(df['z_score']) > z_threshold]\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(df['closing_price'], label='Closing Prices')\n    ax.scatter(outliers.index, outliers['closing_price'], color='r', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    ax.legend()\n    return outliers, ax\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize the distribution stock closing prices using both a box plot hist within a single figureThis function is designed help understand the spread, central tendency the distribution shape stock closing pricesNote The tile of box plot is set 'Box Plot of Closing Prices' and the title of hist setHistRequirements: - pand - mat.plot - seab Parameters df (Data): A pand Data containing at column named 'closing_price with stock closing prices.Returns: tuple: A tuple containing two matplot.axes._ax.Ax objects: the first for the boxplot and histExample: >>> df pd.Data({...'closing_price': [100, 101 150]...}) >>> boxplot_ax, histplot = task_funcdf) printbox.get_title()) Box Plot of Closing Prices >>> printhist Hist Closing\n    \"\"\"\n    # Create a new figure\n    fig, ax = plt.subplots(2, figsize=(10,10))\n\n    # Create a boxplot\n    sns.boxplot(df['closing_price'], ax=ax[0])\n    ax[0].set_title('Box Plot of Closing Prices')\n\n    # Create a histogram\n    sns.histplot(df['closing_price'], ax=ax[1])\n    ax[1].set_title('Hist Closing Prices')\n\n    # Return the axes\n    return ax[0], ax[1]\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts the share closing prices for next 7 using ARIM model and plots forecast.Parameters: df (pd.DataFrame): The inputframe with columns 'dateclosing_price'.'date' should of datetime dtype and 'closing_price float.Returns: Tuple[Listfloat], Axes]: A tuple containing: - A with forecasted prices for next 7- A matplot Axes object containing the subplot.Requirements - pand - n mat. statsmodelstsa.arima.modelAR Example >>> df pData({...'date': pd.date_range(start='1/12021720'),...'closing_price [100 101...}) >>> forecast, ax = task_funcdf) printfore) [106.99999813460752 107999833844395470912959867405204999992924991569957345581803188028]\n    \"\"\"\n    model = ARIMA(df['closing_price'], order=(5,1,0))\n    model_fit = model.fit(disp=0)\n    forecast = model_fit.forecast(steps=7)\n\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(df['date'], df['closing_price'], label='Historical data')\n    ax.plot(pd.date_range(start=df['date'].iloc[-1], periods=8)[1:], forecast, label='Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    plt.show()\n\n    return forecast, ax\n\ndf = pd.DataFrame({\n    'date': pd.date_range(start='1/1/2021', end='1/7/2021'),\n    'closing_price': [100, 101, 102, 103, 104, 105, 106]\n})\n\nforecast, ax = task_func(df)"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing all possible two combinations of the lower English alThe dictionary values represent frequency these two-letter combinations in given wordIf a combination does appear word, its value will 0Requirements: - collections.Counter - itert - string Parameters word (str): The input containing alReturns: - dict: A dictionary with keys as two-letter alphabet combinations and values their counts in the word.Requirements: - The function uses `colCounter library to count occurrences two-letter combinations- The function uses the `itert.permutations method generate all two-letter combinations al- The function uses the `string library to get a of lower alExample >>> list(taskfunc('abcdef').items[:5 [('ab', 1),ac 0ad 0aeaf)]\n    \"\"\"\n    # Generate all two-letter combinations\n    combinations = [''.join(i) for i in itertools.permutations(word, 2)]\n\n    # Count the occurrences of each combination\n    counter = Counter(combinations)\n\n    # Generate all possible two-letter combinations\n    all_combinations = [''.join(i) for i in itertools.permutations(string.ascii_lowercase, 2)]\n\n    # Create a dictionary with all possible combinations and their counts\n    result = {key: counter[key] for key in all_combinations}\n\n    return result\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create and visualize a sales report for different categories over a periodParameters: - start_date (str): The start for report in 'YY'Default is '20160101'.- periods (int): The number periods for the report.Default is 13.- freq (str): The frequency of dates to be generated.Default is 'WOM-2FRI' (WeekOfMonth-2nd Friday).- categories (list): List categories to include in the report.Default is ['Electronics',FashionHome & KitchenAutomSports'].Returns: - Returns a DataFrame containing the sales data with the following columns 'Date',CategorySales'.- Returns the Matplot Axes object for the plot.Requirements: - pand - mat.pyplot - n Example >>> df, ax task_funcstart_date='202001', periods=5 fre='W-MON', categories=['ElectronicsFashion']) df Date Category Sales 0 202006 Electronics 272 1 202006 147 213 Electronics 21713 29220 Electronics 423 35127 Electronics 295 4590203 10903 311\n    \"\"\"\n    # Create date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n\n    # Create dataframe\n    df = pd.DataFrame(dates, columns=['Date'])\n\n    # Add random sales data\n    df['CategorySales'] = np.random.randint(100, 500, size=(periods, len(categories)))\n    df['Category'] = np.random.choice(categories, size=(periods, len(categories)))\n\n    # Reshape dataframe\n    df = df.set_index(['Date', 'Category']).stack().reset_index().drop('level_2', axis=1)\n    df.columns = ['Date', 'Category', 'CategorySales']\n\n    # Plot data\n    ax = df.plot(x='Date', y='CategorySales', kind='bar', figsize=(12, 6))\n\n    # Set title and labels\n    ax.set_title('Sales Report')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n\n    return df, ax\n\ndf, ax = task_func()\nplt.show()\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates time series sales data starting a specified, then use linear forecast future based provided or generated salesParameters - start_date (str): start sales data in YDefault is '20160101'.- periods (int): The number for sales dataDefault is 13.- freq (str): The frequency sales data, e 'WOM-2FRI' for the second FridayDefault is 'WOM-2FRI'.- sales_data (array-like, optional): An actualIf not provided random data will generatedReturns: - A numpy containing forecasted future sales for same number periods as input dataRequirements - numpy - pand sk.linear_model.LinReg Examples >>> npseed42) # For consistent random data generation in examples >>> task_func('201601', 13 'WOM-2FRI') array313.65384615 31856043956 32346703297 32837362637 33328021978 33818681319 34309340659 348, 352.90659341 35781318681 3671978022 36762637363 37253296703]) >>> taskfunc('2020-01 5M', [200 300 400 array([238.9, 226, 213.1, 2002 1873])\n    \"\"\"\n    # Generate date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n\n    # If sales_data is not provided, generate random data\n    if sales_data is None:\n        np.random.seed(42)\n        sales_data = np.random.randint(100, 500, size=periods)\n\n    # Create a dataframe with date and sales data\n    df = pd.DataFrame({'date': date_range, 'sales': sales_data})\n\n    # Set date as index\n    df.set_index('date', inplace=True)\n\n    # Create a new dataframe for forecasting\n    forecast_df = pd.DataFrame(index=pd.date_range(start=df.index[-1], periods=periods))\n\n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(df.index.values.reshape(-1, 1), df['sales'])\n\n    # Predict future sales\n    forecast_df['sales'] = model.predict(forecast_df.index.values.reshape(-1, 1))\n\n    return forecast_df['sales'].values\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    Randomly assigns specified tasks employees with due of the current and returns a Data these assignmentsParameters: - task_list (list str): List tasks be assigned.- n_tasks (int): Number assigned.This number should not negative can larger the number tasks in task_list- employees (list str, optional): List employee names to whom tasks canIf not provided defaults: ['JohnJane SmithJames BrownMary JohnsonRobert Davis'- seed (int, optional): Seed for the random number to ensure reproducDefaults to None (not set).Returns: - pd.DataFrame: Contains columns 'Task NameAssigned To andDue with each row representing an assigned taskRaises: - ValueError If n_tasks is negative.Note - Task names san by replacing spaces- Due dates are set to the current system dateRequirements - pand - random datetime Examples >>> df task_func['Clean OfficePrep ReportClient Meeting' 2 seed42 Task Name Ass To Due 0 Client_Me John Doe 20240413 1 Clean_ James Brown >>> type(df <classp.coreframeData\n    \"\"\"\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    tasks = [task.replace(\" \", \"_\") for task in task_list]\n    assignments = []\n\n    for _ in range(n_tasks):\n        task = random.choice(tasks)\n        employee = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y%m%d\")\n        assignments.append([task, employee, due_date])\n\n    df = pd.DataFrame(assignments, columns=[\"Task_Name\", \"Assigned_To\", \"Due\"])\n    return df\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in given words underscores, then plots frequency each unique wordParameters: - mystrings (list str): List words/ph where spaces need replaced underscores- text (str): The text in which modifications applied and word frequencies calculatedMust not be empty.Returns: - matplot.axesAx: The Ax object of plot.Raises: - ValueError If the input text empty.Requirements: - numpy - mat re - collections Notes All operations are case- The frequency plot displays each unique word on x in the order they after modification with its corresponding frequency onExamples: >>> ax task_func(['Lorem',consectet adip' 'L d lore Ips') type(ax <classmatplotaxes._ax.Ax'>\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    # Replace spaces in given words underscores\n    for word in mystrings:\n        text = text.replace(word, word.replace(' ', '_'))\n\n    # Find all words in text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count frequency of each unique word\n    word_freq = Counter(words)\n\n    # Plot frequency of each unique word\n    fig, ax = plt.subplots()\n    ax.bar(word_freq.keys(), word_freq.values())\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of each unique word')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from a source directory and save it as saved a targetParameters: - source_directory (str): The source containing files z- target_directory (str): The destination of zip to be createdIf it does not exist the function will create it- zip_name (str): The to create (without extension; '.' will added automatically).Returns: - str: The full path created zip in the format \"/pathtarget_directory/zip_namezip\".Raises: - OSError: If the source_directory does.Requirements: - os - glob - pathlib zipfile Note - The valid extensions are: ['.txtdocxxcsv'].Example: >>> path task_func('/pathsource_directory', '/targetzipped_files') type( <classstr >>> '//.zip\n    \"\"\"\n    # Define the valid extensions\n    valid_extensions = ['.txt', '.docx', '.csv']\n\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Get the list of files with valid extensions\n    files_to_zip = []\n    for extension in valid_extensions:\n        files_to_zip.extend(glob.glob(f'{source_directory}/*{extension}'))\n\n    # Create the zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            zipf.write(file, arcname=os.path.basename(file))\n\n    return zip_path\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files with specific extensions (.txtdocxxcsv) from a source directory CSV and saves in a targetParameters: - source_directory (str): The path source containing files to converted- target_directory (str): The path where converted CSV files savedIf it does not exist the function will create itReturns: - int: The number files successfully converted CSVRaises: - FileNotError If the source directory does.Requirements: - os - pathlib - pand python-docx openpyxl Notes Each file's text content captured and stored CSV with a single 'Text' column and no row indices- This function will overwrite existing files in target if they have the names convertedExample: >>> task_func('/UserstestDocuments', '//csv_files') 4 >>>pathsource',pathtarget 2\n    \"\"\"\n    source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist\")\n\n    if not target_directory.exists():\n        os.makedirs(target_directory)\n\n    converted_count = 0\n\n    for file in source_directory.glob(\"*.txt\"):\n        df = pd.DataFrame([file.read_text()], columns=['Text'])\n        df.to_csv(target_directory / f\"{file.stem}.csv\", index=False)\n        converted_count += 1\n\n    for file in source_directory.glob(\"*.docx\"):\n        doc = docx.Document(file)\n        df = pd.DataFrame([p.text for p in doc.paragraphs], columns=['Text'])\n        df.to_csv(target_directory / f\"{file.stem}.csv\", index=False)\n        converted_count += 1\n\n    for file in source_directory.glob(\"*.csv\"):\n        df = pd.read_csv(file)\n        df.to_csv(target_directory / f\"{file.stem}.csv\", index=False)\n        converted_count += 1\n\n    return converted_count\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes the MinMax-normalized cumulative sum for each numeric column in given DataParameters: - df (pandas.DataFrame): The input Data containing numerical values.Returns: - pd.DataFrame: A Data where each column contains the normalized cumulative sum respective column in input Data, retaining original column namesRaises: - TypeError If the DataFrame contains nonn data types.- ValueError If the DataFrame is empty or contains Na values.Requirements: - pand - numpy sk Example >>> input_df pData({'A [13 2 1] output task_func) type(output <classpand.coreframeData output A 0 0.0 0000000 1 04666667 10 1000000\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    if df.isnull().values.any():\n        raise ValueError(\"DataFrame contains NaN values\")\n\n    if not all(df.dtypes != \"object\"):\n        raise TypeError(\"DataFrame contains non-numeric data types\")\n\n    scaler = MinMaxScaler()\n    df_normalized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n\n    df_cumulative_sum = df_normalized.cumsum()\n\n    return df_cumulative_sum\n\n"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes a given directory, listing each file it along its size, creation last modification without recursing into subParameters: - directory_path (str): The to be analyzedIf it is empty this function returns an listReturns: - list tu: Each tuple contains (file name file size in, creation in ISO format modification ISO).Raises: - ValueError If the provided directory does.Requirements: - os - pathlib - datetime Notes The function assumes the directory exists and contains only files (no sub are processed- Times are reported in system time, UTC.- The creation and modification times are platform dependent; on some systems the creation time might not available and might be replaced the last metadata change timeExamples: >>> result task_func('/pathdirectory') print( [('example.txt 10242023-0401T143000Z20021500'),... >>> resultempty_ []\n    \"\"\"\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"The provided directory does not exist\")\n\n    result = []\n\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            creation_time = os.path.getctime(file_path)\n            modification_time = os.path.getmtime(file_path)\n\n            creation_time = datetime.fromtimestamp(creation_time, tz=timezone.utc).isoformat()\n            modification_time = datetime.fromtimestamp(modification_time, tz=timezone.utc).isoformat()\n\n            result.append((filename, file_size, creation_time, modification_time))\n\n    return result\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates a population report DataFrame and CSV based provided JSONParameters: - json_data (str): Nested string containing country names (str as keys and populationsintThe parent key is expected \"Countries\".Example format '{\"Countries {\"Country A 331002651 67886011}}- output_dir (str): Directory path where the CSV report savedDefaults to the current directory.The function will create it if it does- file_name (str): Name CSV report.Defaults to \"country_populationreport.\".Returns: - str: The file path of generated CSV report- pd.DataFrame: The country-population data loaded input JSON, with columns: \"CountryPopulation\".Raises: - ValueError If the JSON data mal empty, contains nonstring country nonn or negative populations.- IOError If the file cannot written the specified directory.Requirements - json - os - pand math Notes Output DataFrame has no extra index column- If this function encounters float population that otherwise valid round itExample >>> jsonstrCountries {\"Country A\": 331002651 67886011}} csvfile_path, df taskfuncjson print./countrypopulationreportcsv >>> df Country 0 Country 33 1\n    \"\"\"\n    # Load JSON data\n    data = json.loads(json_data)\n\n    # Check if the JSON data is empty\n    if not data:\n        raise ValueError(\"The JSON data is empty.\")\n\n    # Check if the JSON data contains non-string country names or negative populations\n    for country, population in data[\"Countries\"].items():\n        if not isinstance(country, str):\n            raise ValueError(\"Country name is not a string.\")\n        if not isinstance(population, int) or population < 0:\n            raise ValueError(\"Population is not a positive integer.\")\n\n    # Create a DataFrame from the JSON data\n    df = pd.DataFrame(list(data[\"Countries\"].items()), columns=[\"Country\", \"Population\"])\n\n    # Calculate the population density\n    df[\"PopulationDensity\"] = df[\"Population\"] / data[\"Area\"]\n\n    # Round population density to the nearest integer\n    df[\"PopulationDensity\"] = df[\"PopulationDensity\"].apply(lambda x: round(x))\n\n    # Save the DataFrame to a CSV file\n    file_path = os.path.join(output_dir, file_name)\n    df.to_csv(file_path, index=False)\n\n    return file_path, df\n\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates each item (files and directories in a given directory against specified conditionsParameters: - dir_path (str): The directory to be evaluatedMust exist.- predicates (list of strings): Names of conditions to check for.Must contain valid conditions.Invalid conditions are ignored.Supported conditions: 1.'is_file': whether the item is a file 2'is_dir': whether the item is a directory 3'has_specialchars': whether the item name contains a character that is not a letter, digit underscore, ignoring file extensions 4.'has_numbers': whether the item name contains a number Returns: - dict: A dictionary with directory items as keys and the results of condition checks as values.Raises: - ValueError If no valid predicates are provided.- FileNotError If the specified directory does or is a directory.Note - This function evaluates file/directory names, rather their full path.- Predicates are dedu.Requirements: - os - re - pathlib Examples >>> task_func('/pathdir', ['is_file',hasnumbers' {'file.txt {is Truehas False},file2. True}} >>>dirdirhasspecialchmy_folder {is},a_@Folder True}}\n    \"\"\"\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"The specified directory {dir_path} does not exist or is not a directory.\")\n\n    if not predicates:\n        raise ValueError(\"No predicates provided.\")\n\n    valid_predicates = ['is_file', 'is_dir', 'has_specialchars', 'has_numbers']\n    invalid_predicates = [pred for pred in predicates if pred not in valid_predicates]\n\n    if invalid_predicates:\n        print(f\"Invalid predicates: {invalid_predicates}. Ignoring these predicates.\")\n\n    predicates = [pred for pred in predicates if pred in valid_predicates]\n\n    result = {}\n\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n\n        for predicate in predicates:\n            if predicate == 'is_file':\n                result[item] = result.get(item, True) if os.path.isfile(item_path) else False\n            elif predicate == 'is_dir':\n                result[item] = result.get(item, True) if os.path.isdir(item_path) else False\n            elif predicate == 'has_specialchars':\n                result[item] = result.get(item, False) if re.search(r'\\W', item) else True\n            elif predicate == 'has_numbers':\n                result[item] = result.get(item, False) if re.search(r'\\d', item) else True\n\n    return result\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert a hexade string to various enc.This function takes a hexade string as input and performs several encoding operations.Initially, it decodes the hexade string to bytes and then converts these bytes into a UTF string.This UTF string is subsequently encoded into different formats: hexade, base64, UTF8, UTF16, UTF, ASCII (if possible), URL encoding, and ROT13.Note that if ASCII not possible, returns 'Not represent in ASCII'.Parameters: - hex_string (str): The input string inade format.Returns: - dict: A dictionary containing the input string encoded in various formats.The dictionary's keys are the encoding types ('hex',base',utf-', 'utf16',utf32',ASC',URL',ROT13'), and the values are the corresponding encoded strings.If the string cannot represented in ASCII, the 'ASC' key maps to 'Not representable in'.Requirements: - binasci - base64 - urll - codecs Example: >>> task_func(\"4a4b4c\") {'hex': '4a',base 'SktM',utf-JKL',utf16JKutf32ASCJURLJ',ROT13':WXY'} >>> task68656c6c6f\")68caGVsbG8=',hello',utf16helloutfhelloASChelloURLhello',uryyb'}\n    \"\"\"\n    # Convert hex to bytes\n    bytes_obj = binascii.unhexlify(hex_string)\n\n    # Convert bytes to UTF-8 string\n    utf8_string = bytes_obj.decode('utf-8')\n\n    # Encode to different formats\n    encodings = {\n        'hex': binascii.hexlify(bytes_obj).decode('utf-8'),\n        'base64': base64.b64encode(bytes_obj).decode('utf-8'),\n        'utf-8': utf8_string,\n        'utf-16': bytes_obj.decode('utf-16'),\n        'utf-32': bytes_obj.decode('utf-32'),\n        'ASC': 'Not representable in ASCII' if utf8_string.isascii() else utf8_string,\n        'URL': urllib.parse.quote(utf8_string),\n        'ROT13': codecs.encode(utf8_string, 'rot_13')\n    }\n\n    return encodings\n\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads a tar. from a specified URL, then valid its MD checks against a pred expected valueIf the checksum matches, it extracts contents tar.gz.Otherwise it delet the downloaded.Parameters: url (str): The from to download tar.Returns: bool: Returns True file successfully downloaded, its MD checks matches expected value it is extracted.Returns False if the checks does expected value or download failsRequirements: - urll.request - hashlib tarfile os Example >>> task_func('httpexamplefiles.tar True\n    \"\"\"\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n    except Exception as e:\n        print(f\"Failed to download file: {e}\")\n        return False\n\n    # Calculate the MD5 checksum of the downloaded file\n    md5_checksum = hashlib.md5()\n    with open(TARGET_TAR_FILE, \"rb\") as f:\n        # Read the file in chunks to avoid memory issues\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            md5_checksum.update(chunk)\n\n    # Check if the checksum matches the expected value\n    if md5_checksum.hexdigest() != EXPECTED_MD5_CHECKSUM:\n        print(\"Checksum does not match expected value. Deleting downloaded file.\")\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n    # Extract the contents of the tar.gz file\n    try:\n        with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n            tar.extractall()\n    except Exception as e:\n        print(f\"Failed to extract file: {e}\")\n        return False\n\n    # Remove the downloaded file\n    os.remove(TARGET_TAR_FILE)\n\n    return True\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download a CSV from a given URL, save specified path count occurrences each value in a particular columnThe function handles various scenarios including missing columns and file download errorsParameters: url (str): The CSV to be downloadedMust be a valid and accessible URL.column_name (str): The name in CSV file whose values to countedThe function will raise a Value this column foundcsv_file_path (str): The file where downloaded savedIf a file already at this path overw.Returns: dict: A dictionary mapping the values from the specified column their corresponding occurrence countsRaises: ValueError: If the specified column_name does in CSV file the function will delete downloaded and raise a with a message stating \"The provided '{column in Requirements - urll - os c collections Example >>> task_func('httpexampledata.', 'category',downloaded_data. {'cat1 5 3 8} # This is a hypothetical output; the actual output will depend CSV data.Notes: - The downloaded CSV deleted after its contents have processed- The function only counts values in the specified column and ignores other data\n    \"\"\"\n    try:\n        urllib.request.urlretrieve(url, csv_file_path)\n    except Exception as e:\n        os.remove(csv_file_path)\n        raise ValueError(f\"Failed to download CSV from {url} due to {str(e)}\")\n\n    if not os.path.exists(csv_file_path):\n        raise ValueError(f\"Failed to download CSV from {url}\")\n\n    try:\n        with open(csv_file_path, 'r') as csv_file:\n            csv_reader = csv.DictReader(csv_file)\n            column_values = [row[column_name] for row in csv_reader if column_name in row]\n    except Exception as e:\n        os.remove(csv_file_path)\n        raise ValueError(f\"Failed to read CSV file due to {str(e)}\")\n\n    os.remove(csv_file_path)\n\n    return collections.Counter(column_values)\n\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches and parses an XML from a specified URL, then converts Pand DataParameters: url (str): The of CSV to be downloadedMust be a valid and accessible URL.Returns: pandDataFrame A Data constructed the parsed XML dataEach row of the DataFrame corresponds an 'item element XML file, with child of ' becoming columns in DataRaises: ValueError This error is raised in several scenarios 1If the URL is invalid or the XML file cannot fet from URL.2If the XML file has invalid syntax.3If the XML structure does conform expected format.Requirements: - urll - lxml pand Examples # Example with a valid XML structure >>> df task_func('httpexamplesample_data. print( name age 0 John 25 1 Jane 30 # Example an invalid XMLinst Value XML structure does match expected format.\n    \"\"\"\n    try:\n        # Fetch the XML file\n        response = urllib.request.urlopen(url)\n        xml_content = response.read()\n\n        # Parse the XML file\n        root = etree.fromstring(xml_content)\n\n        # Extract data\n        data = []\n        for item in root.findall('item'):\n            name = item.find('name').text\n            age = item.find('age').text\n            data.append([name, age])\n\n        # Convert to DataFrame\n        df = pd.DataFrame(data, columns=['name', 'age'])\n\n        return df\n\n    except Exception as e:\n        raise ValueError(f\"Error: {str(e)}\")\n\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads a text from a specified URL, processes text to count frequency each word then plots a bar showing ten frequently occurringParameters: url (str): from text file downloadedThe URL should point directly a text.Returns: tuple: A tuple containing two elements: - Counter: A Counter object from collections module, containing word frequencies in text.- Axes: A matplot Ax object that represents plotted bar chart of ten most common words.Note - function assumes the URL points plain and may handle binary or nontext content correctly- Words are identified using a basic regular and are case- The function does remove common stopwords; all words counted is- Requires internet access download the file from URL.Example >>> word_fre, ax = taskfunc('httpexampledata.txt print(.mostcommon(5 [('the', 102),of 76and 64to 52in 41)] Requirements - urll - re - collections mat\n    \"\"\"\n    # Download the text file\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Remove non-word characters (everything except numbers and letters)\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Convert to lowercase\n    text = text.lower()\n\n    # Split text into words\n    words = text.split()\n\n    # Remove common stopwords\n    stopwords = ['the', 'of', 'and', 'to', 'in', 'is']\n    words = [word for word in words if word not in stopwords]\n\n    # Count word frequencies\n    word_freq = Counter(words)\n\n    # Plot word frequencies\n    most_common_words = word_freq.most_common(10)\n    words = [word[0] for word in most_common_words]\n    frequencies = [word[1] for word in most_common_words]\n    plt.bar(words, frequencies)\n    plt.xlabel('Words')\n    plt.ylabel('Frequencies')\n    plt.title('Frequency of the most common words')\n    plt.xticks(rotation=90)\n    ax = plt.gca()\n\n    return word_freq, ax\n\n\nurl = 'http://www.gutenberg.org/files/1112/1112.txt'\nword_freq, ax = task_func(url)"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Downloads and extracts a ZIP from a specified URL to a given directoryParameters: - url (str): from to download ZIPIt should a valid and accessible URL.- download_path (str): The directory path where ZIP and extractedDefaults to \"mnt/datadownload\".Returns: - str: Path directory containing extracted contentsIf an error a descriptive message returnedThe message starts \"Error: \".If the specific descrption is either \"The URL does point ZIP.\", downloaded a valid orUnable from provided URL.\".Raises: - Network Issues or Invalid URL: Returns \"Error Unable download the from the provided if there issues in reaching URL or downloading- Inc File Type Returns \"Error The URL does point ZIP if the downloaded's content type not 'applicationzip- Corrupt ZIP File: Returns \"Error: The downloaded a if the downloaded a ZIP but is corrupt or cannot extracted- General Exceptions: Catches and reports any other exceptions (like runtime occur process with a specific error message, formatted \"Error [ex message\".Requirements - requests - os - zipfile Example >>> task_func('httpsexamplefilezip 'mntdatadownloadfile'\n    \"\"\"\n    try:\n        r = requests.get(url, stream=True)\n        if r.status_code != 200:\n            return \"Error: Unable to download the file from the provided URL. Status code: \" + str(r.status_code)\n\n        if not url.endswith('.zip'):\n            return \"Error: The URL does not point to a ZIP file.\"\n\n        if not os.path.exists(download_path):\n            os.makedirs(download_path)\n\n        zip_path = os.path.join(download_path, url.split(\"/\")[-1])\n\n        with open(zip_path, 'wb') as f:\n            f.write(r.content)\n\n        try:\n            with ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"Error: The downloaded file is not a valid ZIP file or is corrupt.\"\n\n        return download_path\n\n    except requests.exceptions.RequestException as e:\n        return \"Error: Unable to download the file from the provided URL. Error message: \" + str(e)\n\n    except Exception as e:\n        return \"Error: \" + str(e)\n\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Exts and converts data a specified HTML table based given 'table_ on a webpage into Pand DataIf the table is present but contains no data rows (i no <tr tags the function returns an DataParameters: - url (str): webpage from to extract table- table_id (str): The 'id attribute HTML to be extractedReturns: - df (pd.DataFrame): A Data containing extracted specified HTML tableIf the table is found but has no rows (<tr> elements an empty DataRaises: - requests.exceptionsHTTPError: If the HTTP fails (e due connection issues a nonsuccessful status like 404 500).- ValueError If no table with the specified 'tableid on webpage.The error message will \"Table with the specified ID not Requirements - requests - bs4.BeautSoup pand io Notes - The function raises HTTPError for unsuccessful HTTP, which includes scenarios network problems or non2xx HTTP responses- A ValueError is raised specifically the HTML table with specified ID present webpage's content, indicating either an incorrect ID the absence table- If the located table has no rows indicated the absence <tr tags an empty Data returnedThis is useful handling tables struct present HTML but are devoid dataExample >>> task_func('httpsexampledata.html', 'table1 DataFrame: Name Age 0 Alice 25 1 Bob 30 Example of ValueError >>>nonex_table Value Table with the specified ID notExample of empty table: >>> task_func('httpsexampleemptytable.html 'empty_ DataFrame: Empty Data Column [] Index []\n    \"\"\"\n    response = requests.get(url)\n    response.raise_for_status()\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n\n    if table is None:\n        raise ValueError(f\"Table with the specified ID not found on webpage.\")\n\n    csv_data = StringIO()\n    for row in table.find_all('tr'):\n        row_data = [cell.get_text(strip=True) for cell in row.find_all(['th', 'td'])]\n        csv_data.write(','.join(row_data) + '\\n')\n\n    csv_data.seek(0)\n    df = pd.read_csv(csv_data)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Downloads and extracts a zip from a specified URLParameters: url (str): The zipfilename (str): The under downloaded zip will savedReturns: tuple: A tuple containing status message and list fil in unz directory, or an empty if extractionNote the status message will contain \"Error\" when: - Network-related exceptions raised if download fails.- File-related exceptions are raised if there an issue file handling or extractionRequirements - requests - pathlib.Path - zip Example >>> task_func('httpexamplemyfile', 'my ('Download and extraction successful', ['file1txt'\n    \"\"\"\n    try:\n        # Create download directory if it doesn't exist\n        DOWNLOAD_DIR.mkdir(exist_ok=True)\n\n        # Create unzip directory if it doesn't exist\n        ZIP_DIR.mkdir(exist_ok=True)\n\n        # Download the file\n        response = requests.get(url)\n        response.raise_for_status()\n\n        # Save the file\n        download_path = DOWNLOAD_DIR / filename\n        download_path.write_bytes(response.content)\n\n        # Extract the file\n        with zipfile.ZipFile(download_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Get the list of files in the unzipped directory\n        unzipped_files = [file.name for file in ZIP_DIR.iterdir() if file.is_file()]\n\n        return \"Download and extraction successful\", unzipped_files\n\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {str(e)}\", []\n\n    except Exception as e:\n        return f\"Error: {str(e)}\", []\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    This function scrap a webpage for all hyper and saves as absolute URLs to a CSVParameters: - url (str): relative webpage to scrape- base_url (str, optional): The website to prep relative linksDefaults to 'httpswwwexample'.- csv_file (str, optional): The filename for CSV where links will savedDefaults to 'scraped_data.csv'.Returns: - int: The number unique absolute links scrap webpageRequirements - requests - urllparseurljoin bs4.BeautS csv Examples >>> task_func('/mywebpage 5 >>>anotherpage', base='wwwdifferent.', cfileother_links 8\n    \"\"\"\n    # Initialize a set to store unique links\n    unique_links = set()\n\n    # Send a GET request to the webpage\n    response = requests.get(urljoin(base_url, url))\n\n    # Parse the content of the response with BeautifulSoup\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find all the hyperlinks in the webpage\n    for link in soup.find_all(\"a\"):\n        href = link.get(\"href\")\n\n        # If the href is not None and it's not an empty string\n        if href and href != \"\":\n            # Join the base_url and the href to get the absolute url\n            absolute_url = urljoin(base_url, href)\n\n            # Add the absolute url to the set\n            unique_links.add(absolute_url)\n\n    # Open the csv_file in write mode\n    with open(csv_file, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n\n        # Write each link in the set to a new line in the csv file\n        for link in unique_links:\n            writer.writerow([link])\n\n    # Return the number of unique links\n    return len(unique_links)\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    This function pars HTML table data from a specified URL or local file and stores into an SQLThe function handles different scenarios for fetch, processing storingParameters: - webpage_url (str): or a local file path pref \"file://- database_name (str): The SQLite file where data toDefaults to \"my_database.db\".Returns: - int: The number rows parsed HTML tableRaises: - requests.RequestException: This exception raised if there network issue in accessing URLThis includes scenarios like connection errors, time and HTTP errors- sql.DatabaseError This exception raised in case issues connecting, writing the SQLThis includes issues like invalid database names write permissions or SQL execution errorsNotes: - The function is designed replace table \"my_ in specified SQLite with new data each it called- If the HTML content does contain a table or if table is empty the function will return 0, indicating no rows were parsed and stored- This function relies 'requ', 'lxmlpandsql libraries for its operationsRequirements: - requests - lxml pand sql Example >>> numrows task_func(\"httpexampletabledata\") printf\"Number parsed: {num\") Number 5\n    \"\"\"\n    try:\n        # Fetch the webpage\n        response = requests.get(webpage_url)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        print(f\"Error: {e}\")\n        return 0\n\n    # Parse the HTML content\n    tree = html.fromstring(response.content)\n    table = tree.xpath('//table')\n\n    if not table:\n        print(\"No table found in the HTML content.\")\n        return 0\n\n    # Extract table data\n    table_data = []\n    for row in table[0].xpath(\".//tr\"):\n        row_data = []\n        for cell in row.xpath(\".//td\"):\n            row_data.append(cell.text)\n        table_data.append(row_data)\n\n    if not table_data:\n        print(\"No data found in the table.\")\n        return 0\n\n    # Create a DataFrame\n    df = pd.DataFrame(table_data)\n\n    # Connect to the SQLite database\n    try:\n        conn = sqlite3.connect(database_name)\n    except sqlite3.DatabaseError as e:\n        print(f\"Error: {e}\")\n        return 0\n\n    # Replace table \"my_table\" with new data\n    df.to_sql(\"my_table\", conn, if_exists=\"replace\", index=False)\n\n    # Close the connection\n    conn.close()\n\n    # Return the number of rows parsed\n    return len(table_data)\n\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens an image file, extracts text using O converts encoding, with a fall image comment processingRaises: - ValueError UnicodeDec or Look occurs during conversion Parameters filename (str): path imageDefaults a global variable 'IMPATH'.- from_enc (str): The original extracted or image commentDefault is 'cp1251'.- to_enc (str): The target for converted text or commentDefault is 'utf8'.Returns: - comment (str): The text extracted image or image comment, converted the target encodingIf OCR extraction and comment processing both fail returns an emptyRaises: - ValueError If incorrect enc provided for text or comment conversion.Requirements - codec - PIL pytesseract Example # Assuming 'image. contains text\ufffd\ufffd\ufffd\u0440' in Russian (enc in cp1251), # this text successfully extracted by OCR.>>> text = task_func('image.cp1251',utf print '\ufffd\ufffd\u0435\ufffd\u0438\u0440' # This output the ut version extracted\n    \"\"\"\n    try:\n        img = Image.open(filename)\n        text = pytesseract.image_to_string(img)\n        text = text.encode('utf8').decode(from_encoding)\n        return text\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from a specified REST URL and processes for JSON parsingThe process involves decoding and re data, handling different encoding scenarios.Note - function initi an HTTP GET to specified with 5It retrie response content in raw bytesParameters: - url (str): RESTDefault is 'httpapiexampledata'.- from_enc (str optional): The original dataIf None, encoding is autodetDefault is None- to_enc (str): The target encoding format for data.Default is 'utf8'.Returns: - dict: The JSON-p data after reencReturns an empty dictionary if content emptyRaises: - ValueError \"Un detect encoding for nonempty content\", if it fails detect the for non response contentRequirements - json - requests chardet Example >>> data task_func('httpapiexampledata print {keyvalue # Example of expected output Notes The function sets a timeout of 5 for the API- It handles cases with empty content and undet encoding by returning an empty dictionary or raising, respectively- The decoding and re steps ensure compatibility various data and the final JSON parsing.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        content = response.content\n\n        if not content:\n            return {}\n\n        if not from_encoding:\n            from_encoding = chardet.detect(content)[\"encoding\"]\n\n        content = content.decode(from_encoding).encode(to_encoding)\n\n        return json.loads(content)\n\n    except chardet.chardet.NotUtf8Error:\n        raise ValueError(\"Unable to detect encoding for non-empty content\")\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads a CSV and processes its date-relatedThe function performs several key tasks such checking for the file's existence valid presence specified date column converting date values dat objects filtering rows based current sorting the resulting dataThe function handles special cases, like an empty CSV by returning an Data and raises exceptions for specific error scenarios like missing files or columnsParameters: - csv_file (str): CSV.FileNotError is raised if path is invalid- column_name (str): The name containing date valuesValueError is raised if this column missing in CSV file- date_format (str, optional): The of values in specified columnDefaults to '%Y-'.Returns: - pand - os - dat. pand.errorsEmptyDataError Ra FileError: If the specified CSV at given path.- ValueError If the specified column present CSV.Requirements: - pand - os - datetime Example >>> task_func('pathcsvfileDateColumn') Date Value 0 2023-1210 100 1 2011 150\n    \"\"\"\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(f\"The specified CSV file {csv_file_path} does not exist.\")\n\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        raise FileError(f\"The specified CSV file {csv_file_path} is empty.\")\n\n    if column_name not in df.columns:\n        raise ValueError(f\"The specified column {column_name} does not exist in the CSV file.\")\n\n    df[column_name] = pd.to_datetime(df[column_name], errors='coerce')\n    df = df[df[column_name].notna()]\n\n    df = df.sort_values(by=column_name)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    This function sec a client socket using SSL/ and sends back the SHA256 hash of a file requested byParameters: - client_socket (socket.socket): The client that will wrapped with SSL/ for secure communication- cert_file (str): The file path to the SSL to be used for the secure connection- key_file (str): The file path to the SSL key corresponding certificate.- buffer_size (int, optional): The size used to receive data clientDefaults to 1024 bytes.Returns: - str: The SHA256 hash requested file.If the requested file does returns 'File'.In case of an exception during processing, an error message is returned.Requirements: - ssl - os - hashlib Note - This function assumes that the client requests a file by sending its path.- The function does handle the opening or the client_socket itself- Error handling is basic and might need expanded based specific useExample: >>> # Server setup >>> server_socket socket.(socket socketS) serverbind('localhost 443)) >>> serverlist5) >>> cert_file \"pathificatecr keyprivate. # Accept client connection >>> client_socket, addr serveraccept() # Use task_func function handle the client request filehash task(client cert print(\"Sent file hash\", serverclose\n    \"\"\"\n    try:\n        # Wrap the client socket with SSL\n        ssl_socket = ssl.wrap_socket(client_socket, server_side=True, certfile=cert_file, keyfile=key_file)\n\n        # Receive the file path requested by the client\n        file_path = ssl_socket.recv(buffer_size).decode()\n\n        # Check if the file exists\n        if os.path.isfile(file_path):\n            # Open the file in binary mode\n            with open(file_path, 'rb') as file:\n                # Read the file content\n                file_content = file.read()\n\n            # Calculate the SHA256 hash of the file content\n            file_hash = hashlib.sha256(file_content).hexdigest()\n\n            # Send the SHA256 hash back to the client\n            ssl_socket.send(file_hash.encode())\n\n            return file_hash\n        else:\n            # Send a message to the client indicating that the file does not exist\n            ssl_socket.send('File does not exist'.encode())\n\n            return 'File does not exist'\n    except Exception as e:\n        # Send an error message to the client in case of an exception\n        ssl_socket.send(str(e).encode())\n\n        return str(e)\n    finally:\n        # Close the SSL socket\n        ssl_socket.close()\n\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run a nonblocking echo server that app server current time received data and sends, while handling exceptional conditions for each socketParameters - server_address (str): for listenDefault is 'localhost'.- server_port (int): The for listenDefault is 123.- buffer_size (int): The data receptionDefault is 1024 bytes- run_duration (int): The ( serverDefault is 5 secondsReturns: - str: A status message indicating server's operation and run durationRequirements - socket - select queue dat Example >>> print(taskfunc()) 'Server started on local123.Ran for 5 seconds.'\n    \"\"\"\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(0)\n\n    # Bind the socket to the port\n    server_address = (server_address, server_port)\n    server_socket.bind(server_address)\n\n    # Listen for incoming connections\n    server_socket.listen(5)\n\n    # Keep track of the connected clients\n    message_queues = {}\n\n    # Start time of the server\n    start_time = datetime.now()\n\n    # Main loop\n    while datetime.now() - start_time < timedelta(seconds=run_duration):\n        # Wait for the next socket event\n        ready_to_read, _, _ = select.select([server_socket] + list(message_queues.keys()), [], [])\n\n        for sock in ready_to_read:\n            # A new connection request received\n            if sock is server_socket:\n                connection, client_address = sock.accept()\n                connection.setblocking(0)\n                message_queues[connection] = queue.Queue()\n            else:\n                data = sock.recv(buffer_size)\n                if data:\n                    # A message received, send back the current time\n                    message = \"Current time: {}\".format(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"))\n                    sock.send(message.encode())\n                else:\n                    # Client disconnected, clean up the socket\n                    del message_queues[sock]\n                    sock.close()\n\n    # Server stopped\n    server_socket.close()\n\n    return \"Server started on {}:{}. Ran for {} seconds.\".format(server_address, server_port, run_duration)\n\n"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive a message from a client socket and send as an email via an SM serverParameters: client_socket (socket.socket): The client from the message is receivedReturns: - None Note - Requires a working internet and access an SM.- The function asks for the sender's email, recipient email, sender email password for authentication.Requirements: - smtplib - email.message.EmailMessage - getpass Example >>> import socket server_socket.socketsocket socketS server_bind((SERAD SERPORT)) >>> serverlist5 >>> client_socket, addr serveraccept() task_func(client)\n    \"\"\"\n    msg = EmailMessage()\n    client_response = client_socket.recv(BUFFER_SIZE).decode()\n    print(f\"Received: {client_response}\")\n\n    sender_email = input(\"Enter your email: \")\n    password = getpass.getpass(\"Enter your password: \")\n    recipient_email = input(\"Enter recipient email: \")\n\n    msg['Subject'] = client_response\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n\n    try:\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(sender_email, password)\n        server.send_message(msg)\n        server.quit()\n        print(\"Email sent successfully\")\n    except Exception as e:\n        print(f\"Something went wrong...{e}\")\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes a CSV containing text data and generates hist of ten words.This function reads a CSV, which expected a single column of text dataIt then splits the text words creates hist frequency the top ten most, excluding a pred set stopThe resulting histogram can either displayed on screen savedThe CSV file should have single column with header 'Text'.Each row under this column should contain text string.If the CSV does have header the first column is assumed text data.Parameters: - file_path (str): input CSV- save_path (str optional): The where hist plot willIf not provided, the plot is displayed on screenReturns: - matplotaxesAx: The Ax object of plot if save_path not providedUseful for further customization or display in notebooks.- None: If save_path provided the plot is saved to specified path, and function returns NoneRaises: - FileNotError If the specified_path does.It raises a FileNot with a message indicating the file path that was- Exception: For any other errors that function execution.In this case error is printed to console, and None returnedRequirements: - pand - scik mat Notes The function uses pand for data manipulation, sklearn's CountVectorizer for text vector mat for plotting- A pred list stopwords is used filter out common but insignificant words from histExamples: >>> ax task_func('text_data.csv print Axes(0.125011;0775x077) >>> result task', 'output_plot.png None\n    \"\"\"\n    try:\n        # Read CSV\n        df = pd.read_csv(file_path, header=None, names=[\"Text\"])\n\n        # Initialize CountVectorizer\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n        # Fit and transform the data\n        X = vectorizer.fit_transform(df[\"Text\"])\n\n        # Convert sparse matrix to DataFrame\n        df_word_counts = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names_out())\n\n        # Sum the word counts\n        word_counts = df_word_counts.sum().sort_values(ascending=False)\n\n        # Get top 10 words\n        top_10_words = word_counts[:10]\n\n        # Plot the histogram\n        ax = top_10_words.plot(kind=\"bar\")\n\n        # Set plot title and labels\n        ax.set_title(\"Top 10 Words\")\n        ax.set_xlabel(\"Words\")\n        ax.set_ylabel(\"Frequency\")\n\n        # Save or display the plot\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            return ax\n\n    except FileNotFoundError:\n        print(f\"File not found at path: {file_path}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create a DataFrame with combinations animals and foods in a 'animal:food formatParameters: - animals (list str, optional): A animal names.If not provided, defaults to a pred list common animals including 'DogCatEleTLZGirBearMonK'.- foods (list of str, optional): A list food names.If not provided, defaults to a pred list common foods including 'Meat',FishGrassFruitsInSeedsLeaves'.Returns: - df (pandas.DataFrame): A Data where each row represents unique animal from 'anim list and each column food item fromsEach cell contains a string in the format 'animal:food'.Handling of Special Cases: - If both 'anim andfoods lists are empty or not provided the function returns an empty DataFrame.- If either 'animals orfoods list is empty or not provided the function uses its pred list for the missing parameterRequirements: - pand - numpy itert Example >>> animal_foodpairs task_func(['Dog',Cat' ['MeatFish']) print Meat Fish 0 Dog:Meat Dog 1 Note - The function generates all possible combinations the provided 'anim andfood using itproduct.- The resulting pairs are shuff randomly to ensure variety in the DataFrame layout\n    \"\"\"\n    if animals is None:\n        animals = ['Dog', 'Cat', 'Elephant', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey', 'Kangaroo']\n    if foods is None:\n        foods = ['Meat', 'Fish', 'Grass', 'Fruits', 'InSeeds', 'Leaves']\n\n    pairs = list(itertools.product(animals, foods))\n    np.random.shuffle(pairs)\n    df = pd.DataFrame(pairs, columns=['Animal:Food'])\n    return df\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference in seconds each consecutive pair tim in a given list, after converting them a specified timezoneParameters: - time_strings (list str): A timestamp in the format 'dd/mm HHMM.fff'.- timezone (str): The time to which the timestamp strings should convertedThis should a valid timezone string, e., 'America/'.Returns: - float: The mean (average time difference in seconds each consecutive pair timIf there are less two timest in the list the function returns 00 Requirements - dat - pytz n Notes - The function first converts each timestamp in the specified timezone- It then calculates absolute time difference in seconds between each consecutive pair tim- If the list contains less two tim the function returns 00, as there no pairs to compare- If there are no time differences (e in case a single timestamp after timezone conversion it also returns 0.0. - The function uses numpy's mean function to calculate average time difference.Example: >>> time_strings ['30/0309 163132.123',30323312333'] meandiff task_functime 'America/New') print( 610\n    \"\"\"\n    # Convert all timestamps to specified timezone\n    timestamps = []\n    for time_string in time_strings:\n        dt = datetime.strptime(time_string, '%d/%m%H%M.%f')\n        dt = dt.replace(tzinfo=pytz.UTC)\n        timestamps.append(dt.astimezone(pytz.timezone(timezone)))\n\n    # If there are less two timestamps, return 0\n    if len(timestamps) < 2:\n        return 0.0\n\n    # Calculate time differences in seconds\n    time_diffs = []\n    for i in range(1, len(timestamps)):\n        time_diffs.append((timestamps[i] - timestamps[i-1]).total_seconds())\n\n    # Return average time difference\n    return np.mean(time_diffs)\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes the frequency words in a given text after lowerc, removing punct splitting into words plots top 10 most.Parameters: - text (str): The input to analyzedReturns: - list: A tu containing the 10 most common words and their counts- Axes: The matplot Ax object of the bar chart.Requirements: - re - collections.Counter - matplot.pyplot Example >>> common_words, ax = task_func(\"This is sample text.This text contains sample words like 'text',sample andwords'.\") >>> print(commonwords) [('sample 3),text 3this 2wordsisacontlikeand)]\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    counter = Counter(words)\n    common_words = counter.most_common(10)\n\n    words, counts = zip(*common_words)\n    fig, ax = plt.subplots()\n    ax.bar(words, counts)\n    ax.set_title('Top 10 most common words')\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Counts')\n\n    return common_words, ax\n\n\ntext = \"This is sample text. This text contains sample words like 'text', sample and words'.\"\ncommon_words, ax = task_func(text)"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts a URL from a given string and retrie the title of web from thatIf no valid URL found or the URL does result a successful web page fetch returns an appropriate error messageParameters: myString (str): The from to extract the URL.Returns: str: The title webpage at the extracted if successful, otherwise one error messages: - \"No valid URL found in the provided string.\" -Un fetch the content the URL: {url}\" -No title tag found in webpage.\" Requirements - re - urll.parse.urlparse - bs4.BeautSoup - requests Example: >>> task_func('Check this out: httpswwwgoogle') 'Google' >>> taskNo URL here')No valid.' >>> taskCheck broken link:thisdoesnotexist12345.Un fetch httpsthis'\n    \"\"\"\n    # Extract URL from string\n    url = re.findall('(?P<url>https?://[^\\s]+)', myString)\n    if url:\n        url = url[0]\n    else:\n        return \"No valid URL found in the provided string.\"\n\n    # Check if URL is valid\n    try:\n        result = urlparse(url)\n        if all([result.scheme, result.netloc]):\n            r = requests.get(url)\n            if r.status_code == 200:\n                soup = BeautifulSoup(r.content, 'html.parser')\n                title = soup.find('title')\n                if title:\n                    return title.get_text()\n                else:\n                    return \"No title tag found in webpage.\"\n            else:\n                return f\"Un fetch the content the URL: {url}\"\n        else:\n            return \"No valid URL found in the provided string.\"\n    except:\n        return \"No valid URL found in the provided string.\"\n\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses a JSON string to find a URL associated specified key, downloads file from URL saves with a tim filenameThe filename format '{unknown_key_{tim}.txt', where 'tim formatted '%Y%%%f' to include the date and down microThe file is saved the specified or in the current byParameters: - json_data (str): The as a, expected to contain a key directly linked a URL- unknown_key (str): The key used extract URL from JSON data- save_dir (str, optional): The downloadedIf not specified the file is saved in currentDefaults to None.Returns: str: The absolute path of downloaded, reflecting where it has savedRequirements: - json - requests os - dat. Example >>> json_str 'unknown\":httpsexamplefile.txt file_path task_func(json 'unknown') print(f\"Downloaded file saved at: {file\")\n    \"\"\"\n    try:\n        url = json_data[unknown_key]\n    except KeyError:\n        print(f\"No URL found for key: {unknown_key}\")\n        return None\n\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        print (\"HTTP Error:\",errh)\n        return None\n    except requests.exceptions.ConnectionError as errc:\n        print (\"Error Connecting:\",errc)\n        return None\n    except requests.exceptions.Timeout as errt:\n        print (\"Timeout Error:\",errt)\n        return None\n    except requests.exceptions.RequestException as err:\n        print (\"Something went wrong\",err)\n        return None\n\n    if save_dir is None:\n        save_dir = os.getcwd()\n\n    tim = datetime.now().strftime('%Y%f')[:-3]\n    filename = f\"{unknown_key}_{tim}.txt\"\n    file_path = os.path.join(save_dir, filename)\n\n    with open(file_path, 'w') as file:\n        file.write(response.text)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Exts phone a given URL or local file and saves specified in JSONParameters: - url (str): webpage scrape or the local file path pref 'file://- output_path (str): The where extracted phone numbers saved in JSONReturns: - list: A strings, each representing found phoneRequirements - bs4 - requests - re - json Example >>> task_func('file://pathlocalfiletxt 'outputjson ['+1 (234 567 8901',44 1234 567890\n    \"\"\"\n    if url.startswith('file://'):\n        with open(url.replace('file://', ''), 'r') as f:\n            content = f.read()\n    else:\n        response = requests.get(url)\n        content = response.text\n\n    soup = bs4.BeautifulSoup(content, 'html.parser')\n\n    phone_numbers = []\n    for script in soup.find_all(\"script\"):\n        text = script.string\n        if text:\n            matches = re.findall(r'\\+\\d{1,3}\\s?\\(\\d{1,3}\\)\\s?\\d{1,9}', text)\n            phone_numbers.extend(matches)\n            matches = re.findall(r'\\d{1,3}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}', text)\n            phone_numbers.extend(matches)\n\n    with open(output_path, 'w') as f:\n        json.dump(phone_numbers, f)\n\n    return phone_numbers\n"}
