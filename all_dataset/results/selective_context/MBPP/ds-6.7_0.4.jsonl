{"task_id": "MBPP/11", "completion": "\n    # remove first occurrence\n    s = s.replace(ch, '', 1)\n    # remove all other occurrences\n    s = s.replace(ch, '')\n    return s\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Create a list to store the sum of each row\n    sum_rows = [sum(row) for row in M]\n\n    # Create a list of tuples where each tuple is (sum, row)\n    sum_row_pairs = list(zip(sum_rows, M))\n\n    # Sort the list of tuples\n    sum_row_pairs.sort()\n\n    # Extract the sorted matrix\n    M_sorted = [row for _, row in sum_row_pairs]\n\n    return M_sorted\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(10)\n\n"}
{"task_id": "MBPP/14", "completion": "\n    # calculate the area of the base\n    base_area = 0.5 * b * l\n\n    # calculate the volume\n    volume = base_area * h\n\n    return volume\n\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]+', text)\n\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i*n)\n    return multiples\n\n"}
{"task_id": "MBPP/22", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        num_dict[num] = 1\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for lst in list1:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum\n\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(set(sub)) == K for sub in test_list)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d+', '', i) for i in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i:i+j] == s[i:j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num))\n    res = []\n    for _ in range(k):\n        freq, num = heapq.heappop(heap)\n        res.append(num)\n    return res\n\n\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return (N % 2 + 10 * decimal_To_Binary(N // 2))\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # Your code here\n    for i in range(N):\n        if ar[i] != i+1:\n            return i+1\n    return N+1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    return n*(n+1)//2\n\n"}
{"task_id": "MBPP/36", "completion": "\n    # Initialize the fraction\n    fraction = p / q\n\n    # Convert the fraction to a string\n    fraction_str = str(fraction)\n\n    # Remove the '0.' at the beginning of the string\n    fraction_str = fraction_str[2:]\n\n    # Find the nth digit\n    nth_digit = fraction_str[N]\n\n    return nth_digit\n\n"}
{"task_id": "MBPP/37", "completion": "\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    if len(even_num) == 0 or len(odd_num) == 0:\n        return \"No even or odd number in the list\"\n    else:\n        return even_num[0] / odd_num[0]\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        max_heap.append((-freq, char))\n    heapq.heapify(max_heap)\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if -freq1 >0:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if -freq2 >0:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    # if there is any character left in max_heap\n    if max_heap:\n        result.append(max_heap[0][1])\n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    return Counter(chain(*nums))\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # If element is already in hash set, then add it to sum\n        if arr[i] in s:\n            sum = sum + arr[i]\n        else:\n            # Else add element to hash set\n            s.add(arr[i])\n\n    return sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = 'ab*'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    distinct_numbers = set(data)\n    if len(distinct_numbers) == len(data):\n        return True\n    else:\n        return False\n\n\ndata = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/47", "completion": "\n    # Initialize the last digit of factorial of A\n    last_digit = A % 10\n\n    # If A is 0 or 1, the last digit of the factorial is A itself\n    if A in [0, 1]:\n        return A\n\n    # If B is 0, the last digit of the factorial is 1\n    if B == 0:\n        return 1\n\n    # If B is 1, the last digit of the factorial is the last digit of A\n    if B == 1:\n        return last_digit\n\n    # Compute the last digit of the factorial of A raised to the power of B\n    for _ in range(B - 1):\n        last_digit = (last_digit * A) % 10\n\n    return last_digit\n\n"}
{"task_id": "MBPP/48", "completion": "\n    return n | 0b10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"}
{"task_id": "MBPP/49", "completion": "\n    return nums[::N]\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = 2"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(len(x) for x in input_list)\n    min_list = [x for x in input_list if len(x) == min_length]\n    return min_list\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) > 0:\n        first_char = str[0]\n        last_char = str[-1]\n        if first_char == last_char:\n            return True\n        else:\n            return False\n    else:\n        return \"Empty String\"\n\n"}
{"task_id": "MBPP/54", "completion": "\n    # find the maximum number to know the range\n    max_val = max(my_list)\n\n    # initialize count array\n    count_arr = [0] * (max_val + 1)\n\n    # populate count array\n    for num in my_list:\n        count_arr[num] += 1\n\n    # populate original array\n    sorted_list = []\n    for i, count in enumerate(count_arr):\n        sorted_list.extend([i] * count)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort()\n    res = 0\n    a = 1\n    for i in range(n - 1, -1, -1):\n        res += a * arr[i]\n        a = a * 10\n    return res\n\n\narr = [1, 4, 45, 7]\nn = len(arr)"}
{"task_id": "MBPP/58", "completion": "\n    if (x ^ y) < 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/59", "completion": "\n    i = 1\n    while True:\n        octagonal = i*(3*i - 2)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] + 1\n\n    return max(dp)\n\n"}
{"task_id": "MBPP/61", "completion": "\n    prefix_sum = [0]*(n+1)\n    prefix_sum[0] = 0\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + int(s[i-1])\n\n    mp = defaultdict(int)\n    ans = 0\n\n    for i in range(1, n+1):\n        if prefix_sum[i] == 0:\n            ans += 1\n        if mp[prefix_sum[i]] > 0:\n            ans += mp[prefix_sum[i]]\n            mp[prefix_sum[i]] += 1\n        else:\n            mp[prefix_sum[i]] += 1\n\n    return ans\n\n\ns = \"123123\"\nn = len(s)"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[2])\n\n\nsubjectmarks = [('English', 'B', 88), ('Science', 'A', 90), ('Maths', 'C', 97), ('Social sciences', 'A', 82)]"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    if len(Input) != k:\n        return False\n    else:\n        return True\n\n\nInput = [(1, 2), (3, 4), (5, 6)]\nk = 3"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    for i in range(0, n):\n        j = n - i\n        if (i * i - j * j == n):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [' ', ',', '.', ';', ':', '?', '!/']\n    regexPattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regexPattern, text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1] and patterns[i] != patterns[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    # Initialize result\n    count_squares = 0\n\n    # Traverse through all dimensions of given rectangle\n    for i in range(1, m):\n        for j in range(1, n):\n\n            # If current dimension is less than or equal to 1,\n            # then no squares can be formed\n            if(i*j <= max(m, n)):\n                continue\n\n            # If current dimension is greater than maximum of m and n,\n            # then squares can be formed\n            if(i*j > max(m, n)):\n                count_squares += (i*j) - max(m, n) + 1\n\n    return count_squares\n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    # Your code here\n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return chr(sum_char // len(strr))\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[1:]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    if n < 1:\n        return 0\n    return n * (5 * n - 3) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict.maps\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert N to string\n    N = str(N)\n    # find the length of N\n    length = len(N)\n    # if N is less than 10 return -1\n    if length < 2:\n        return -1\n    # if N is 10 or more digits\n    else:\n        # if the first digit is 1, replace it with 0 and convert back to int\n        if N[0] == '1':\n            return int(N[0] + '0' + N[2:])\n        # if the first digit is greater than 1, replace the last digit with the previous digit\n        else:\n            return int(N[0] + str(int(N[1]) - 1) + '9' * (length - 2))\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return len(max(list1, key=len))\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3:\n        return False\n    diff = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        if int(n[i]) - int(n[i-1]) != diff:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == sum(lst):\n                if j-i < min_length:\n                    min_length = j-i\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    div = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div.append(i)\n    return div\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    if num == num[::-1]:\n        if num[0] == '9':\n            return '1' + '0' * (length - 1) + '1'\n        return str(int(num) + 2)\n    else:\n        if num[0] == '9':\n            return '1' + '0' * (length - 1) + '1'\n        return str(int(num) + 1)\n\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n - 1) * eulerian_num(n, m - 1) + eulerian_num(n - 1, m)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i in [num1, num2, num3]:\n        heapq.heappush(heap, (i.next(), i))\n\n    result = []\n    while heap:\n        val, iterator = heapq.heappop(heap)\n        result.append(val)\n        next_val = iterator.next()\n        if iterator.hasNext():\n            heapq.heappush(heap, (next_val, iterator))\n    return result\n\n"}
{"task_id": "MBPP/109", "completion": "\n    # Initialize the count of binary strings\n    count = 0\n\n    # Initialize the length of the binary string\n    length = len(s)\n\n    # Iterate over the binary string\n    for i in range(2 ** length):\n        # Convert the integer to binary and remove the '0b' prefix\n        binary = bin(i)[2:].zfill(length)\n\n        # Check if the binary string is valid\n        if binary.count('1') % 2 == 1:\n            count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/110", "completion": "\n    result = []\n    test_list.sort()\n    for i in range(strt_val, stop_val):\n        if i not in test_list:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/111", "completion": "\n    if not all(isinstance(i, list) for i in nestedlist):\n        raise ValueError(\"All elements in the input list must be lists\")\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n\n"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    from math import pi\n    perimeter = 2 * pi * radius\n    return perimeter\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    return [(i, Counter(test_list)[i]) for i in test_list]\n\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not bool(d) for d in list1)\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) if isinstance(i, (int, str)) else i for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    for i in range(0, n, 2):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        if i+1 < n and arr[i] == arr[i+1]:\n            continue\n        return arr[i]\n    return -1\n\n"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return (list1[0], list1[-1])\n\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or check_triplet(A, n - 1, sum, count)\n\n"}
{"task_id": "MBPP/122", "completion": "\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        i = 1\n        count = 1\n        while count < n:\n            i += 1\n            if isSmart(i):\n                count += 1\n        return i\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_numbers = set()\n    for a in range(1, limit):\n        b = d(a)\n        if a != b and d(b) == a:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a+bj)\n"}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    sum = 0\n    for i in range(1, a):\n        if a % i == 0:\n            sum += i\n    for i in range(1, b):\n        if b % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    return result if (x > 0 and y > 0) or (x < 0 and y < 0) else -result\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str.split() if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the first row\n    magic_constant = sum(my_matrix[0])\n\n    # check rows\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # check columns\n    for col in range(len(my_matrix)):\n        if sum(my_matrix[i][col] for i in range(len(my_matrix))) != magic_constant:\n            return False\n\n    # check diagonals\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != magic_constant:\n        return False\n    if sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))) != magic_constant:\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n\ntup1 = ('h', 'e', 'l', 'l', 'o')"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    if arr[n-1] % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 25 + ((units - 50) * 0.75)\n    elif units <= 250:\n        bill = 100 + ((units - 150) * 1.20)\n    else:\n        bill = 220 + ((units - 250) * 1.50)\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    nums = str(nums)\n    zero_count = nums.count('0')\n    return zero_count\n"}
{"task_id": "MBPP/138", "completion": "\n    if n < 0:\n        return False\n    while n > 0:\n        if n & 1:\n            n >>= 1\n            if n & 1:\n                return False\n        n >>= 1\n    return True\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2 * math.pi * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    return [i[0] for i in test_list]\n\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums), 0, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:i] = reversed(nums[:i])\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += abs(arr[i] - arr[i + 1])\n    return sum\n\n"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return max(abs(arr[i] - arr[i - 1]) for i in range(1, n))\n\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for i in str1:\n        total += ord(i)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    # Create a 2D array to store the sum of the path\n    dp = [[0]*i for i in range(1, n+1)]\n\n    # Initialize the last element of dp array\n    for i in range(m):\n        dp[n-1][i] = tri[n-1][i]\n\n    # Fill the dp array in bottom-up manner\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            dp[i][j] = max(dp[i+1][j], dp[i+1][j+1]) + tri[i][j]\n\n    return dp[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    if x < 10:\n        return x\n    else:\n        return x % 10 + sum_digits_single(x // 11)\n\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize result\n    dp = [1] * n\n    res = 1\n\n    # Compute optimized LIS values in\n    # bottom up manner\n    for i in range(1, n):\n        # Check all elements before i\n        for j in range(0, i):\n            # If absolute difference is one and\n            # current element is greater than previous\n            if abs(arr[i] - arr[j]) == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n        # Update result if needed\n        if res < dp[i]:\n            res = dp[i]\n\n    return res\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = 5\nc = 11"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0 or len(x) == 1: return x\n    mid = len(x) // 2\n    a = merge_sort(x[:mid])\n    b = merge_sort(x[mid:])\n    return merge(a, b)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    return h, k\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if i == j or i + j == N - 1:\n                result.append(nums[i][j])\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            if binary[i] == '1':\n                binary[i] = '0'\n            else:\n                binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n\n\ntuple_str = ('1', '2', '3', '4', '5')"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Initialize sum and count of operations\n    sum = [0]*n\n    ops = 0\n\n    # Traverse through the array elements\n    for i in range(n):\n        # Find the sum of elements in the current subarray\n        sum[i] = (arr[i] + ((sum[i-1] if i > 0 else 0) +\n                             (sum[i+1] if i < n-1 else 0)))\n\n        # If the sum is greater than k, then reduce the sum\n        # by k and increment the count of operations\n        if sum[i] > k:\n            ops += (sum[i] - k)\n            sum[i] = k\n\n    # Return the count of operations\n    return ops\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['December', 'January', 'February']:\n        season = 'Winter'\n    elif month in ['March', 'April', 'May']:\n        season = 'Spring'\n    elif month in ['June', 'July', 'August']:\n        season = 'Summer'\n    else:\n        season = 'Autumn'\n\n    if days == 28:\n        print(f\"{month} has 28 days and it's {season}\")\n    elif days == 30:\n        print(f\"{month} has 30 days and it's {season}\")\n    elif days == 31:\n        print(f\"{month} has 31 days and it's {season}\")\n    else:\n        print(\"Invalid number of days\")\n\n\nmonth_season('February', 28)\nmonth_season('April', 30)\nmonth_season('June', 31)\nmonth_season('October', 31)\nmonth_season('December', 31)\nmonth_season('January', 31)\nmonth_season('March', 31)\nmonth_season('May', 31)\nmonth_season('July', 31)\nmonth_season('August', 31)\nmonth_season('September', 30)\nmonth_season('November', 30)\nmonth_season('February', 30)\nmonth_season('February', 31)\nmonth_season('April', 32)\nmonth_season('June', 32)\nmonth_season('October', 32)\nmonth_season('December', 32)\nmonth_season('January', 32)\nmonth_season('March', 32)\nmonth_season('May', 32)\nmonth_season('July', 32)\nmonth_season('August', 32)\nmonth_season('September', 32)\nmonth_season('November', 32)\nmonth_season('February', 33)\nmonth_season('April', 33)\nmonth_season('June', 33)\nmonth_season('October', 33)\nmonth_season('December',"}
{"task_id": "MBPP/160", "completion": "\n    if a == 0:\n        if n % b == 0:\n            return [0, n // b]\n        else:\n            return []\n    if b == 0:\n        if n % a == 0:\n            return [n // a, 0]\n        else:\n            return []\n\n    x = n // a\n    y = (n - a * x) // b\n    return [x, y]\n\n"}
{"task_id": "MBPP/161", "completion": "\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 1)\n\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n\ns = int(input(\"Enter the number of sides: \"))\nl = int(input(\"Enter the length of a side: \"))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i:\n            continue\n        if i == (n // i):\n            result = result + i\n        else:\n            result = result + (i + n // i)\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    lower_count = 0\n    upper_count = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            lower_count += 1\n        elif str1[i].isupper():\n            upper_count += 1\n    return lower_count, upper_count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # Initialize result\n    result = 0\n\n    # Create a map to store counts of all elements\n    map = [0] * 2\n\n    # Traverse through all elements of array\n    for i in range(N):\n        # Increment count of elements in map\n        map[A[i] % 2] += 1\n\n    # If there are more 1s than 0s, then we can make\n    # all remaining 1s as 0s and all remaining 0s as 1s\n    # to make their xor as even.\n    if map[1] > map[0]:\n        # Swap map[0] and map[1]\n        map[0], map[1] = map[1], map[0]\n\n    # If there are more 0s than 1s, then we can make\n    # all remaining 0s as 1s and all remaining 1s as 0s\n    # to make their xor as even.\n    if map[0] > map[1]:\n        # Swap map[0] and map[1]\n        map[0], map[1] = map[1], map[0]\n\n    # If there are more 1s than 0s, then we can make\n    # all remaining 1s as 0s and all remaining 0s as 1s\n    # to make their xor as even.\n    if map[1] > map[0]:\n        # Swap map[0] and map[1]\n        map[0], map[1] = map[1], map[0]\n\n    # If there are more 0s than 1s, then we can make\n    # all remaining 0s as 1s and all remaining 1s as 0s\n    # to make their xor as even.\n    if map[0] > map[1]:\n        # Swap map[0] and map[1]\n        map[0], map[1] = map[1], map[0]\n\n    # If there are more 1s than 0s, then we can make\n    # all remaining 1s as 0s and all remaining 0s as 1s\n"}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while(n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^a-zA-Z]', '', text)\n\n"}
{"task_id": "MBPP/174", "completion": "\n    from collections import defaultdict\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return dict(d)\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in str1:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Initialize the variables\n    lcm = L\n    gcd = L\n\n    # Find the gcd of L and R\n    while R != 0:\n        lcm = R\n        R = L % R\n        L = lcm\n\n    # Return the gcd and lcm\n    return gcd, lcm\n\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n\npatterns = ['cat', 'dog', 'bird']\ntext = 'I have a cat. My dog and bird are flying.'"}
{"task_id": "MBPP/179", "completion": "\n    def is_keith(n, m):\n        s = [int(i) for i in str(n)]\n        while len(s) < m:\n            s.append(s[-1] - s[-2])\n        return s[-1] == x\n\n    for i in range(2, len(str(x)) + 1):\n        if is_keith(x, i):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of earth in kilometers\n    R = 6371\n\n    # Convert degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Difference between longitudes\n    dlon = elon - slon\n\n    # Difference between latitudes\n    dlat = elat - slat\n\n    # Haversine formula\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a)\n\n    # Distance\n    distance = R * c\n\n    return distance\n\n"}
{"task_id": "MBPP/181", "completion": "\n    prefix = \"\"\n    len1 = len(str1)\n    len2 = len(str2)\n    i = 0\n    j = 0\n\n    while i <= len1 - 1 and j <= len2 - 1:\n        if str1[i] != str2[j]:\n            break\n        prefix = prefix + str1[i]\n        i += 1\n        j += 1\n\n    return prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    u_char = re.findall(r'u', string)\n    special_char = re.findall(r'\\W', string)\n    numeric = re.findall(r'\\d', string)\n\n    return u_char, special_char, numeric\n\n\nstring = \"Hello, u1234567890Worl@d!\"\nu_char, special_char, numeric = find_character(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    arr.sort()\n    pairs = []\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            pairs.append((arr[i], arr[j]))\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return len(pairs), pairs\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    return (a/2, b)\n"}
{"task_id": "MBPP/186", "completion": "\n    return [bool(re.search(pattern, text)) for pattern in patterns]\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = ['fox', 'cat', 'dog']"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    else:\n        i = 1\n        while i <= n//2:\n            j = 1\n            while j <= n//2:\n                if i*i + j*j == n:\n                    return True\n                j += 1\n            i += 1\n        return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    x_coords = [i for i in range(x1, x2+1)]\n    y_coords = [i for i in range(y1, y2+1)]\n\n    return len(x_coords) * len(y_coords)\n"}
{"task_id": "MBPP/191", "completion": "\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    has_upper = any(char.isupper() for char in str)\n    has_lower = any(char.islower() for char in str)\n    has_digit = any(char.isdigit() for char in str)\n    return has_upper, has_lower, has_digit\n\n"}
{"task_id": "MBPP/193", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n\ntest_tup = (5, 3, 4, 5, 2, 4, 1, 2, 3, 4, 5, 6)"}
{"task_id": "MBPP/194", "completion": "\n    decimal, i, n = 0, 0, str(n)\n    while i < len(n):\n        decimal = decimal * 8 + int(n[i])\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n\ntest_list = [(1, 2), (3, 4, 5), (6, 7, 8, 9), (10,)]\nK = 2"}
{"task_id": "MBPP/197", "completion": "\n    # convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # calculate exponent\n    result = [a**b for a, b in zip(list1, list2)]\n\n    return tuple(result)\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # Area of the ellipse is given by \u03c0ab\n    area_of_ellipse = math.pi * a * b\n\n    # The semi-major axis of the ellipse is given by a\n    semi_major_axis = a\n\n    # The semi-minor axis of the ellipse is given by b\n    semi_minor_axis = b\n\n    # The semi-perimeter of the ellipse is given by sqrt(a^2 + b^2)\n    semi_perimeter = math.sqrt(a**2 + b**2)\n\n    # The area of the largest possible triangle inscribed in the ellipse is given by 1/2 * semi-perimeter * semi-minor axis\n    area_of_largest_triangle = 0.5 * semi_perimeter * semi_minor_axis\n\n    return area_of_largest_triangle\n\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_indexes = [i for i, x in enumerate(list1) if x == max_value]\n    return max_indexes\n\n"}
{"task_id": "MBPP/201", "completion": "\n    return len(set(lst)) <= 1\n\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x = n1 ^ n2\n    setBits = 0\n\n    while (x > 0):\n        setBits += x & 1\n        x >>= 1\n\n    return setBits\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n\n"}
{"task_id": "MBPP/206", "completion": "\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result\n\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n\n    # Create a table to store lengths of longest repeating subsequ\n    # for all substrings of length l\n    LCSRe = [[0 for x in range(n + 1)] for y in range(n + 1)]\n\n    # Build LCSRe[] in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1\n            else:\n                LCSRe[i][j] = max(LCSRe[i][j - 1], LCSRe[i - 1][j])\n\n    # The longest repeating subsequ is LCSRe[n][n]\n    return LCSRe[n][n]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n    return heap\n\nheap = [21, 1, 45, 33, 12, 9]\nhq.heapify(heap)"}
{"task_id": "MBPP/210", "completion": "\n    # allowed_set = ['a-', 'a', '0']\n    allowed_set = ['a-', 'a', '0']\n    for char in string:\n        if char not in allowed_set:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if '0' not in str(i) and '2' not in str(i) and '4' not in str(i) and '6' not in str(i) and '8' not in str(i):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.pow(i, 4)\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # your code here\n    return test_tup1 + test_tup2\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list += alist[i] * alist[i+1]\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Initialize an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is seen before, return it\n        if i in char_set:\n            return i\n\n        # If not, add it to the set and continue\n        char_set.add(i)\n\n    # If no repeated character found, return None\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    return math.floor(math.log(B / A) / math.log(2)) + 1\n\n"}
{"task_id": "MBPP/219", "completion": "\n    test_tup = list(test_tup)\n    test_tup.sort()\n    min_k = test_tup[:K]\n    max_k = test_tup[-K:]\n    return min_k, max_k\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = [' ', ',', '.', ':']\n    for char in special_chars:\n        text = re.sub(char, '*', text, n)\n    return text\n\n\ntext = \"Hello, world: how are you?\"\nn = 2"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    # Initialize result\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Your code here\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            j = j + 1\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(' ', char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, -1, -1):\n        for j in range(0, i):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n\ntriangle = [[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    latsurf_cylinder = 2 * math.pi * r * h\n    return latsurf_cylinder\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Initialize count of triangles\n    count = 0\n\n    # Loop to find all possible triangles\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            k = N - i - j\n            if k > j and k > i:\n                count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    return {k: v for k, v in count.items() if v > 1}\n\n\ntest_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "MBPP/238", "completion": "\n    return sum(str[i: j] for i in range(len(str)) for j in range(i + 1, len(str) + 1))\n\n"}
{"task_id": "MBPP/239", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2, n + 1):\n        dp[i] = 2 * dp[i - 1]\n        if dp[i] > m:\n            dp[i] = m\n    return dp[n]\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    array_3d = [[['*' for _ in range(o)] for _ in range(n)] for _ in range(m)]\n    return array_3d\n\n"}
{"task_id": "MBPP/242", "completion": "\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/243", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Create a list of tuples, where each tuple is (element, count)\n    lst_tuples = [(i, count_dict[i]) for i in lst]\n\n    # Sort the list of tuples based on the count of the elements\n    lst_tuples.sort(key=lambda x: x[1])\n\n    # Extract the elements from the sorted list of tuples\n    sorted_lst = [i[0] for i in lst_tuples]\n\n    return sorted_lst\n\n"}
{"task_id": "MBPP/244", "completion": "\n    # Find next perfect square\n    next_number = N + 1\n    while True:\n        sqrt = math.sqrt(next_number)\n        if sqrt == int(sqrt):\n            return next_number\n        next_number += 1\n\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_sum_arr = [0]*n\n    max_sum_arr[0] = arr[0]\n\n    # Find maximum sum for increasing sub-sequence\n    for i in range(1, n):\n        max_sum_arr[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and max_sum_arr[i] < max_sum_arr[j] + arr[i]:\n                max_sum_arr[i] = max_sum_arr[j] + arr[i]\n\n    # Initialize variables\n    max_sum_bs = [0]*n\n    max_sum_bs[0] = arr[0]\n\n    # Find maximum sum for decreasing sub-sequence\n    for i in range(1, n):\n        max_sum_bs[i] = arr[i]\n        for j in range(i):\n            if arr[i] < arr[j] and max_sum_bs[i] < max_sum_bs[j] + arr[i]:\n                max_sum_bs[i] = max_sum_bs[j] + arr[i]\n\n    # Find maximum sum for bitonic sub-sequence\n    max_sum_bs = [max_sum_arr[i] + max_sum_bs[i] for i in range(n)]\n\n    return max(max_sum_bs)\n\n"}
{"task_id": "MBPP/246", "completion": "\n    if number < 0:\n        return None\n    x = number\n    y = 1\n    e = 0.000001  # this can be any small number\n    while x - y > e:\n        x = (x + y) / 2\n        y = number / x\n    return x\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of sub-problems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in\n    # diagonally opposite direction.\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if (str[i] == str[j] and cl == 2):\n                L[i][j] = 2\n            elif (str[i] == str[j]):\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j]);\n\n    # L[0][n-1] contains the length of the longest palindrome substring\n    return L[0][n-1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 1:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [2, 4, 6, 8, 10]"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n\n"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list) - 1, -1, -1):\n        list.insert(i, element)\n    return list\n\n"}
{"task_id": "MBPP/252", "completion": "\n    return cmath.polar(numbers)\n\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\ncolors = ['red', 'blue', 'green']\nn = 3\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # your code goes here\n    return (max(test_tup1), max(test_tup2))\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        if num < 2:\n            return False\n        if num == 2 or num == 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0:\n                return False\n            i += w\n            w = 6 - w\n        return True\n\n    if n < 1:\n        return []\n    primes = [2]\n    if n == 1:\n        return primes\n    primes.append(3)\n    if n == 2:\n        return primes\n    candidate = 5\n    while len(primes) < n:\n        if newman_shanks_williams(candidate):\n            primes.append(candidate)\n        candidate += 2\n    return primes\n\n"}
{"task_id": "MBPP/261", "completion": "\n    result = tuple(a / b if b != 0 else 0 for a, b in zip(test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\n\n\nhuman_age = int(input(\"Enter human age: \"))"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n"}
{"task_id": "MBPP/268", "completion": "\n    star_numbers = [1, 9, 153, 370, 371, 407]\n    return star_numbers[n-1]\n\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\n"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        return a[n-1]\n"}
{"task_id": "MBPP/276", "completion": "\n    from math import pi\n    return pi * r**2 * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in test_tup:\n        if i == 1:\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "MBPP/279", "completion": "\n    if n < 0:\n        return False\n    x = 1\n    while x * (7 * x - 5) / 2 < n:\n        x += 1\n    return x * (7 * x - 5) / 2 == n\n\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n    return found\n\n"}
{"task_id": "MBPP/281", "completion": "\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]"}
{"task_id": "MBPP/283", "completion": "\n    for i in str(n):\n        if str(n).count(i) > int(i):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    res = -1\n\n    # Compute sum of first window of size k\n    for i in range(k):\n        res += a[i]\n\n    # Compute sums of remaining windows by removing first element of previous window and adding last element of current window.\n    curr_sum = res\n    for i in range(k, 2*k):\n        curr_sum += a[i%n]\n        curr_sum -= a[i-k]\n        res = max(res, curr_sum)\n\n    return res\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/288", "completion": "\n    fact = [0]*N\n    fact[0] = 1\n    for i in range(1, N):\n        fact[i] = (fact[i-1]*i)%P\n    inv = [0]*N\n    inv[0] = 1\n    for i in range(1, N):\n        inv[i] = (P - (P//i)*inv[P%i] % P)\n    for i in range(1, N):\n        inv[i] = (inv[i-1]*inv[i])%P\n    cnt = [0]*P\n    for i in range(len(arr)):\n        cnt[arr[i]] += 1\n    ans = 1\n    for i in range(1, P):\n        if cnt[i] > 1:\n            ans = (ans*fact[cnt[i]])%P\n            ans = (ans*inv[cnt[i]-1])%P\n            ans = (ans*inv[cnt[i]])%P\n    return ans\n\n"}
{"task_id": "MBPP/289", "completion": "\n    odd_days = N // 2\n    return odd_days\n\n"}
{"task_id": "MBPP/290", "completion": "\n    return max(list1, key=len)\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    return n / m\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [value for value in l1 if value in l2]\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of each column\n    sum_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for tu in stdata:\n        # Iterate over the tuple\n        for i, val in enumerate(tu):\n            # Add the value to the corresponding sum in the dictionary\n            sum_dict[i] += val\n\n    # Return the maximum sum\n    return max(sum_dict.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0, 0] for _ in range(n+1)]\n    dp[0] = [1, 1]\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0] + dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n][0] + dp[n][1]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return max(dict_depth(v) for v in d.values()) + 1\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    count = 0\n    while (n):\n        count += 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/303", "completion": "\n    # Write your code here\n    a.sort()\n    n.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] > n[i]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Rotate array\n    for _ in range(rotations):\n        arr = [arr[-1]] + arr[:-1]\n\n    # Find element at index\n    return arr[index]\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match('^p', word)]\n\n\nwords = ['python', 'programming', 'practice', 'problem', 'painting', 'pencil', 'pizza']"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0]\n    if index < 0:\n        return 0\n    max_sum = 0\n    for i in range(index - 1, -1, -1):\n        if a[index] > a[i] and (index - i) <= k:\n            curr_sum = a[index] + max_sum_increasing_subseq(a, n, i, k)\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    if m > n or m < 0 or n > len(tuplex):\n        return ()\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    nums1.sort()\n    nums2.sort()\n    result = []\n    for _ in range(N):\n        if nums1[-1] * nums2[-1] > nums1[0] * nums2[0]:\n            result.append((nums1[-1], nums2[-1]))\n            nums1.pop()\n            nums2.pop()\n        else:\n            result.append((nums1[0], nums2[0]))\n            nums1.pop(0)\n            nums2.pop(0)\n    return result\n\n\nnums1 = [1, 2, 3, 4, 5, 6]\nnums2 = [2, 3, 4, 5, 6, 7]\nN = 3"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return eval(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    # convert number to binary\n    binary = bin(n)[2:]\n    # find the position of the first 0 from the right\n    pos = binary.find('0')\n    # if no 0 is found, return the number as is\n    if pos == -1:\n        return n\n    # set the bit at the found position to 1\n    binary = list(binary)\n    binary[pos] = '1'\n    binary = ''.join(binary)\n    # convert back to decimal\n    return int(binary, 2)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1.0/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_list = [i for i in list1 if i > 0]\n    return pos_list\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid:\n        return 0\n\n    m = len(grid)\n    dp = [[0]*n for _ in range(m)]\n    dp[0] = grid[0]\n\n    for i in range(1, m):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + grid[i][j]\n            elif j == n-1:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + grid[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + grid[i][j]\n\n    return max(dp[-1])\n\n\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nn = 4"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split()\n    even_words = [word for word in str if len(word) % 2 == 0]\n    if even_words:\n        return max(even_words, key=len)\n    else:\n        return \"No even length words found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # your code here\n    s = s / 3\n    return s ** 3\n\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    square_of_sum = (n * (n + 1) // 2) ** 2\n    return square_of_sum - sum_of_squares\n\n"}
{"task_id": "MBPP/321", "completion": "\n    # Initialize the list of demlo numbers\n    demlo_numbers = []\n\n    # Iterate over the range from 1 to s\n    for i in range(1, s+1):\n        # Check if the number is a demlo number\n        if i % 3 == 0 and i % 2 == 0:\n            demlo_numbers.append(i)\n\n    # Return the list of demlo numbers\n    return demlo_numbers\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_value = min(list1)\n    min_indexes = [i for i, x in enumerate(list1) if x == min_value]\n    return min_indexes\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n - 1]\n    for i in range(n - 1, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[::2])\n\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum number of squares for all numbers up to n\n    min_squares = [0, 1, 2, 3]\n\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares to i (i.e., the number itself)\n        min_square = i\n\n        # Try to form a number by squaring numbers less than or equal to the square root of i\n        j = 1\n        while j * j <= i:\n            # Update the minimum number of squares if a smaller number of squares is found\n            min_square = min(min_square, 1 + min_squares[i - j * j])\n            j += 1\n\n        # Store the minimum number of squares for i in the list\n        min_squares.append(min_square)\n\n    # Return the minimum number of squares for n\n    return min_squares[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    str1 = ' '.join(test_list)\n    str1 = str1.lower()\n    counts = dict()\n    words = str1.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    max_count = max(counts.values())\n    most_frequent_word = [key for key, value in counts.items() if value == max_count]\n\n    return most_frequent_word\n\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    list1 = list1[m:n] + list1[:m]\n    return list1\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/330", "completion": "\n    return re.findall(r'\\b\\w{3,4}\\b', text)\n\n\ntext = \"Hello, my name is John. I am 25 years old. I love programming.\""}
{"task_id": "MBPP/331", "completion": "\n    # convert number to binary and count the number of 0s\n    return bin(n).count('0') - 1\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key = lambda x: x[1])\n\nsub_li = [[5, 2], [1, 3], [4, 1], [2, 4]]"}
{"task_id": "MBPP/334", "completion": "\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return \"Not a valid triangle\"\n    else:\n        return \"Valid triangle\"\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    month_30_days = ['April', 'June', 'September', 'November']\n    if monthname1 in month_31_days:\n        return 31\n    elif monthname1 in month_30_days:\n        return 30\n    elif monthname1 == 'February':\n        return 28\n    else:\n        return \"Invalid month name\"\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    divisor = []\n    for i in range(x, y+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisor.append(j)\n    return max(set(divisor), key = divisor.count)\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(s)\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n\n    # Add first element from each list to the min heap and update max_val\n    for i, l in enumerate(list):\n        if l:\n            heappush(min_heap, Node(l[0], i, 0))\n            max_val = max(max_val, l[0])\n\n    min_range = float('inf')\n    result = [0, 0]\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_val - node.value < min_range:\n            min_range = max_val - node.value\n            result = [node.value, max_val]\n\n        if len(list[node.list_num]) > node.index + 1:\n            next_node = Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heappush(min_heap, next_node)\n            max_val = max(max_val, next_node.value)\n\n    return result\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for c in s:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i*j) % 2 != 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k > n:\n        return -1\n    if k == 0:\n        return -1\n\n    # Initialize the array\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, n+1):\n        dp[1][i] = 1\n    for i in range(2, k+1):\n        dp[i][1] = i\n\n    # Fill the array\n    for i in range(2, k+1):\n        for j in range(2, n+1):\n            dp[i][j] = dp[i-1][j-1] + dp[i][j-1] + 1\n\n    return dp[k][n]\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # formula to calculate squares in rectangle is (m+1)*(n+1)\n    return (m+1)*(n+1)\n"}
{"task_id": "MBPP/348", "completion": "\n    if n < r:\n        return 0\n    if n == r:\n        return 1\n    if r == 0:\n        return 1\n    return bin_coff(n - 1, r - 1) + bin_coff(n - 1, r)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    # Your code here\n    for i in string:\n        if i not in ['0', '1']:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    # Write your code here\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i < j:\n        if s[i] != s[j]:\n            break\n        else:\n            while i < n - 1 and s[i] == s[i + 1]:\n                i += 1\n            while j > 0 and s[j] == s[j - 1]:\n                j -= 1\n            i += 1\n            j -= 1\n    if i > j:\n        return 0\n    else:\n        return j - i + 1\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # create a dictionary to store elements and their counts\n    dic = {}\n    for i in range(n):\n        if arr[i] in dic:\n            dic[arr[i]] += 1\n        else:\n            dic[arr[i]] = 1\n\n    # traverse the array elements\n    for i in range(n):\n        if dic[arr[i]] == k:\n            return arr[i]\n\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(set(str)) == len(str)\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # The number of rectangles in a circle of radius r is given by the formula:\n    # \u03c0r\u00b2\n    # So, the function will return \u03c0r\u00b2\n    import math\n    return math.pi * radius ** 2\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - a - b\n\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 0, 5, 1]"}
{"task_id": "MBPP/359", "completion": "\n    # Your code here\n    if a == 0:\n        return False\n    if b/a == 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/360", "completion": "\n    return n\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_occurrence = max(num_dict.values())\n    max_nums = [num for num, occurrence in num_dict.items() if occurrence == max_occurrence]\n    return max_nums\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x + K, y + K) for x, y in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flip_count = 0\n    for i in range(1, len(ch)):\n        if ch[i] == ch[i-1]:\n            flip_count += 1\n    return flip_count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = [list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1)]\n    return max(product_list)\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = get_height(root.left) - get_height(root.right)\n    if abs(height_diff) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return tuple(test_tup * N)\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x[1]))\n\n\nprice = [('item1', '14.99'), ('item2', '9.99'), ('item3', '19.99')]"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return right_element + 1\n    if left_element != A[left_element]:\n        return left_element\n\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    return smallest_missing(A, left_element, mid_element)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n, m)\n\n"}
{"task_id": "MBPP/376", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n        else:\n            res[res.index(i)] = 'custom_value'\n    return tuple(res)\n\n\ntest_tup = (1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7, 8, 9, 9)"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n\n"}
{"task_id": "MBPP/378", "completion": "\n    return test_list[-1:] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/380", "completion": "\n    from random import randint\n    return [[randint(1,10) for i in range(colnum)] for j in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n\ndata = [['apple', 10], ['banana', 5], ['pear', 20], ['orange', 15]]"}
{"task_id": "MBPP/382", "completion": "\n    left_index = 0\n    right_index = len(A) - 1\n\n    while left_index < right_index:\n        mid_index = (left_index + right_index) // 2\n\n        if A[mid_index] > A[right_index]:\n            left_index = mid_index + 1\n        else:\n            right_index = mid_index\n\n    return left_index\n\n"}
{"task_id": "MBPP/383", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_br = 0\n    swap_count = 0\n    for i in s:\n        if i == '[':\n            open_br += 1\n        else:\n            if open_br == 0:\n                swap_count += 1\n                open_br += 1\n            else:\n                open_br -= 1\n    return swap_count\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # convert hex to decimal\n    dec = int(N, 16)\n\n    # check if the number is even or odd\n    if dec % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(min(len(l1), len(l2), len(l3)))]\n\n\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = [1, 2, 3]\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return get_max_sum(n // 10) + n % 10\n\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length = max(len(x) for x in input_list)\n    max_list = [x for x in input_list if len(x) == max_length]\n    return max_list\n\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(i) for i in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    res = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/400", "completion": "\n    from collections import Counter\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/401", "completion": "\n    res = tuple(map(lambda t1, t2: tuple(map(lambda x, y: x + y, t1, t2)), test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0 , r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n\n\ntuplex = \"p\"\ntuple1 = (\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")"}
{"task_id": "MBPP/406", "completion": "\n    # convert the number to binary\n    binary = bin(x)[2:]\n\n    # count the number of 1s in the binary representation\n    count = binary.count('1')\n\n    # if the count is even, return 0 (even parity)\n    if count % 2 == 0:\n        return 0\n    # if the count is odd, return 1 (odd parity)\n    else:\n        return 1\n\n"}
{"task_id": "MBPP/407", "completion": "\n    num_list = [int(i) for i in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            temp = num_list[i - 1]\n            num_list[i - 1] = num_list[i]\n            num_list[i] = temp\n            num_list[i + 1:] = sorted(num_list[i + 1:])\n            return int(\"\".join(map(str, num_list)))\n    return -1\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) < 2:\n        return None\n    min_product = list1[0][0] * list1[0][1]\n    min_pair = list1[0]\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n            min_pair = pair\n    return min_pair\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    return [i[n] for i in list1]\n\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/415", "completion": "\n    arr.sort()\n    return max(arr[0]*arr[1], arr[-1]*arr[-2])\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 9\n    if n in memo:\n        return memo[n]\n    maxVal = 0\n    for i in range(1, n//2+1):\n        maxVal = max(maxVal, breakSum(i) * breakSum(n-i))\n    memo[n] = maxVal\n    return maxVal\n"}
{"task_id": "MBPP/417", "completion": "\n    return [(i[0], sum(x[1] for x in Input if x[0] == i[0])) for i in Input]\n\n\nInput = [(1, 2), (3, 4), (1, 4), (3, 2), (1, 5), (3, 5)]"}
{"task_id": "MBPP/418", "completion": "\n    max_sublist = max(lst, key=sum)\n    return max_sublist\n\n\nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]]"}
{"task_id": "MBPP/419", "completion": "\n    rounded_list = [round(num) for num in list1]\n    sum_list = sum(rounded_list)\n    length_list = len(rounded_list)\n    result = sum_list * length_list\n    return result\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/421", "completion": "\n    str1 = '-'\n    return str1.join(test_tup)\n\n\ntest_tup = (\"Gfg\", \"is\", \"best\", \"for\", \"Geeks\")"}
{"task_id": "MBPP/422", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n\n"}
{"task_id": "MBPP/423", "completion": "\n    goldTable = [[0 for i in range(m)] for j in range(n)]\n\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n - 1:\n                right = 0\n            else:\n                right = goldTable[row][col + 1]\n\n            if row == 0 or col == n - 1:\n                right_up = 0\n            else:\n                right_up = goldTable[row - 1][col + 1]\n\n            if row == m - 1 or col == n - 1:\n                right_down = 0\n            else:\n                right_down = goldTable[row + 1][col + 1]\n\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n\n    return res\n\n\ngold = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\nm = 4\nn = 4"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    return re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt)\n\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return abs(c) / sqrt(a)\n\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/432", "completion": "\n    median = (base1 + base2) / 2\n    area = 0.5 * (base1 + base2) * height\n    return median, area\n\n\nbase1 = int(input(\"Enter base1: \"))\nbase2 = int(input(\"Enter base2: \"))\nheight = int(input(\"Enter height: \"))\n\nmedian, area = median_trapezium(base1, base2, height)\n"}
{"task_id": "MBPP/433", "completion": "\n    return [i > number for i in arr]\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = 'ab?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n"}
{"task_id": "MBPP/437", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    result = []\n    for sublist in L:\n        for item in sublist:\n            result.append(item)\n    return result\n\n"}
{"task_id": "MBPP/440", "completion": "\n    adverbs = re.finditer(r'\\b(often|usually|always|frequently|seldom|sometimes|occasionally|rarely|never)\\b', text)\n    return [(match.group(), match.start()) for match in adverbs]\n\n\ntext = \"I usually go to the market, but I often stay at home.\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    # Write your code here\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg\n\n"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:-K] for t in test_list]\n\n"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(i * j for i, j in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(lst)\n    return {i: count[i] for i in tup}\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        perrin = [0, 1, 1]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate area of triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # if area is zero, then points are collinear\n    if area == 0:\n        return \"Points are collinear\"\n    else:\n        return \"Points form a triangle\"\n\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost and sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n//i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n\nmonthnum2 = int(input(\"Enter month number: \"))"}
{"task_id": "MBPP/456", "completion": "\n    return [i[::-1] for i in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    min_sublist = min(lst, key=sum)\n    return min_sublist\n\n\nlst = [[1, 2, 3], [4, 5, 6], [10, 11, 12]]"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r\"[A-Z]\", \"\", str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i[0] for i in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend(combinations(list1, i))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if len(arr) == 0:\n        return 0\n\n    max_end_here = arr[0]\n    min_end_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_end_here, min_end_here = min_end_here, max_end_here\n\n        max_end_here = max(arr[i], max_end_here * arr[i])\n        min_end_here = min(arr[i], min_end_here * arr[i])\n\n        max_so_far = max(max_so_far, max_end_here)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return all(value == values[0] for value in values)\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)[2:]\n\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initializing maximum and minimum product\n    max_end = 1\n    min_end = 1\n\n    # Initializing maximum product\n    max_product = 1\n\n    # Traverse through the array. Following steps are\n    # taken to handle the case when there are zeros in array\n    for i in range(n):\n        if arr[i] > 0:\n            max_end = max_end * arr[i]\n            min_end = min(min_end * arr[i], 1)\n        elif arr[i] < 0:\n            temp = max_end\n            max_end = max(min_end * arr[i], 1)\n            min_end = temp * arr[i]\n        else:\n            max_end = 1\n            min_end = 1\n\n        # Update max_product if it is less than max_end\n        max_product = max(max_product, max_end)\n\n    return max_product\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], max((price[i] - price[x] + dp[x - 1][j - 1] for x in range(i))))\n\n    return dp[-1][-1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] + test_tup[i + 1])\n    return tuple(res)\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize result\n    res = 1\n\n    # Compute the product of all elements in the array\n    for i in range(lens):\n        res = (res * arr[i]) % n\n\n    # Return the remainder\n    return res % n\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tup1)\n    return result\n\n\ntest_list1 = [(1, 2), (2, 3), (3, 4)]\ntest_list2 = [(2, 3), (3, 4), (4, 5)]"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return Counter(dict1)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    # sort the array\n    nums.sort()\n    # return the sum of the last two elements\n    return nums[-1] + nums[-2]\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n /= 10\n    return int(n)\n\n"}
{"task_id": "MBPP/480", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n\nset = [3, 1, 5, 9, 12]\nsum = 24\nn = len(set)"}
{"task_id": "MBPP/482", "completion": "\n    return re.findall(r'[A-Z]+[a-z]+', text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    fact = factorial(x)\n    i = 1\n    while True:\n        if fact % i == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    return [i for i in test_list1 if i not in test_list2]\n\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r > n // 2:\n        r = n - r\n    x = 1\n    y = 1\n    for i in range(1, r + 1):\n        x *= n\n        y *= i\n        gcd = math.gcd(x, y)\n        x //= gcd\n        y //= gcd\n        n -= 1\n    return x // y\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return tuple(sorted(tup, key=lambda x: x[-1]))\n\n"}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5*(5+2*math.sqrt(5))) * a**2\n\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    return arr.count(max_val)\n\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while(first <= last and not found):\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    distance = math.sqrt((endx - startx) ** 2 + (endy - starty) ** 2)\n\n    # Calculate the number of polygons\n    num_polygons = int(distance / (2 * radius))\n\n    # Calculate the x and y coordinates of the polygons\n    polygons = []\n    for i in range(num_polygons):\n        x = startx + (i * 2 * radius)\n        y = starty\n        polygons.append((x, y))\n\n    return polygons\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return [int(i, 2) for i in test_tup]\n\n\ntest_tup = ('101', '1111', '10101')"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    heapq.heapify(nums)\n    return heapq.nsmallest(n, nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return [sum(nums[i:i+2]) for i in range(0, len(nums), 2)]\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/505", "completion": "\n    count = 0\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[count] = A[i]\n            count += 1\n    while count < len(A):\n        A[count] = 0\n        count += 1\n    return A\n\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    if k > n/2:\n        k = n - k\n    permutation = 1\n    for i in range(0, k):\n        permutation *= (n - i)\n    return permutation\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n\nlist1 = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nremovewords = ['apple', 'date']\n"}
{"task_id": "MBPP/508", "completion": "\n    for i in l1:\n        if i in l2:\n            l2.remove(i)\n        else:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i\n        count += 1\n    return sum/count\n\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(31):\n        cnt = arr.count(i)\n        if cnt > 0:\n            count += cnt * (cnt - 1) // 2\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\n"}
