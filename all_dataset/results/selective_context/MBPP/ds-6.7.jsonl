{"task_id": "MBPP/11", "completion": "\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return ''.join(s)\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Create a list of tuples where each tuple is a row of the matrix and its sum\n    rows_sum = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples\n    rows_sum.sort()\n\n    # Return the sorted matrix\n    return [row for _, row in rows_sum]\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'banana']"}
{"task_id": "MBPP/14", "completion": "\n    # calculate the volume\n    volume = (1/2) * l * b * h\n\n    return volume\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]+', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4*a\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, n+1):\n        if i % m == 0:\n            multiples.append(i)\n    return multiples\n\n"}
{"task_id": "MBPP/22", "completion": "\n    nums_dict = {}\n    for num in nums:\n        if num in nums_dict:\n            return num\n        nums_dict[num] = 1\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for lst in list1:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum\n\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(set(sub)) == K for sub in test_list)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d', '', i) for i in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i:i+j] == s[i:j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return N % 2 + 10 * decimal_To_Binary(N // 2)\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize the difference between the first and last element of the array\n    diff = (ar[N-1] - ar[0]) // N\n\n    # Initialize the start and end of the array\n    start = 0\n    end = N - 1\n\n    # While the start index is less than the end index\n    while start < end:\n        # Calculate the middle index\n        mid = (start + end) // 2\n\n        # If the difference between the element at the middle index and the first element is not equal to the difference multiplied by the middle index, then the missing number is at the middle index\n        if ar[mid] - ar[0] != mid * diff:\n            return (ar[mid] + ar[0]) // 2\n\n        # If the difference between the element at the middle index and the element before it is not equal to the difference, then the missing number is between the first element and the middle element\n        if ar[mid] - ar[mid-1] != diff:\n            return (ar[mid-1] + ar[mid]) // 2\n\n        # If the difference between the element at the middle index and the element after it is not equal to the difference, then the missing number is between the middle element and the last element\n        if ar[mid+1] - ar[mid] != diff:\n            return (ar[mid] + ar[mid+1]) // 2\n\n        # If the difference between the element at the middle index and the first element is equal to the difference, then the missing number is after the middle element\n        if ar[mid] - ar[0] == mid * diff:\n            start = mid + 1\n\n        # If the difference between the element at the middle index and the element before it is equal to the difference, then the missing number is before the middle element\n        if ar[mid] - ar[mid-1] == diff:\n            end = mid - 1\n\n        # If the difference between the element at the middle index and the element after it is equal to the difference, then the missing number is after the middle element\n        if ar[mid+1] - ar[mid] == diff:\n            start = mid + 2\n\n    return -1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    return n*(n+1)//2\n"}
{"task_id": "MBPP/36", "completion": "\n    # Initialize the fraction\n    fraction = p / q\n\n    # Convert the fraction to a string\n    fraction_str = str(fraction)\n\n    # Remove the '0.' at the beginning of the string\n    fraction_str = fraction_str[2:]\n\n    # Find the nth digit\n    nth_digit = fraction_str[N]\n\n    return int(nth_digit)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    mixed_list.sort()\n    return mixed_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n            break\n    for i in list1:\n        if i % 2 != 0:\n            odd_num = i\n            break\n    if even_num == 0 or odd_num == 0:\n        return \"No even or odd number found\"\n    else:\n        return even_num / odd_num\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        max_heap.append((-freq, char))\n    heapq.heapify(max_heap)\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if -freq1 < -1:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if -freq2 < -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    if max_heap:\n        result.append(max_heap[0][1])\n\n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    return Counter(chain(*nums))\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty dictionary\n    d = {}\n\n    # Traverse through the given array\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n\n    # Traverse through dictionary and find the sum of repeated elements\n    sum = 0\n    for i in d:\n        if d[i] > 1:\n            sum += i\n\n    return sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = '^[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'ab*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    distinct_numbers = set(data)\n    if len(distinct_numbers) == len(data):\n        return True\n    else:\n        return False\n\n\ndata = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/47", "completion": "\n    # Initialize the result\n    result = 1\n\n    # Calculate x^y % p\n    for _ in range(B):\n        result = (result * A) % 10\n\n    return result\n\n"}
{"task_id": "MBPP/48", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/49", "completion": "\n    return [nums[i] for i in range(N)]\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = 5"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(len(i) for i in input_list)\n    min_length_list = list(filter(lambda x: len(x) == min_length, input_list))\n    return min_length_list\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/54", "completion": "\n    # find the maximum number to know the range\n    max_val = max(my_list)\n\n    # initialize the count array\n    count_arr = [0] * (max_val + 1)\n\n    # populate the count array\n    for num in my_list:\n        count_arr[num] += 1\n\n    # populate the output array\n    output = []\n    for i, count in enumerate(count_arr):\n        output += [i] * count\n\n    return output\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n == rev(n) * 2 - 1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort(reverse=True)\n    res = \"\"\n    for i in arr:\n        res += str(i)\n    return res\n\n"}
{"task_id": "MBPP/58", "completion": "\n    if (x ^ y) < 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (3 * n - 2)\n\n"}
{"task_id": "MBPP/60", "completion": "\n    # Initialize the result\n    res = 1\n\n    # Initialize current difference and max length\n    curr_diff = arr[1] - arr[0]\n    max_len = 2\n\n    # Initialize length of current sequence\n    curr_len = 2\n\n    # Traverse through the array\n    for i in range(2, n):\n        # If current difference is equal to the difference of current and previous elements\n        if (arr[i] - arr[i - 1]) == curr_diff:\n            curr_len += 1\n        else:\n            # If current difference is not equal to the difference of current and previous elements\n            curr_diff = arr[i] - arr[i - 1]\n            curr_len = 2\n\n        # Update result\n        res = max(res, curr_len)\n\n    return res\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Initialize the count of substrings\n    count = 0\n\n    # Initialize the map to store the count of subarrays\n    map = defaultdict(lambda: 0)\n\n    # Initialize the sum of digits\n    sum = 0\n\n    # Traverse through the string\n    for i in range(n):\n        # Update the sum of digits\n        sum += int(s[i])\n\n        # If sum is 0, then update count\n        if sum == 0:\n            count += 1\n\n        # Increment the count of subarrays with sum sum\n        count += map[sum]\n\n        # Increment the count of subarrays with sum sum\n        map[sum] += 1\n\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[2])\n\n\nsubjectmarks = [('English', 'B', 88), ('Science', 'A', 90), ('Maths', 'C', 97), ('Social sciences', 'A', 82)]"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    return all(len(t) == k for t in Input)\n\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    return re.split(';|,|\\*', text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1] and patterns[i] != patterns[i + 1]:\n            return False\n        if colors[i] != colors[i + 1] and patterns[i] == patterns[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    # Initialize result\n    count_squares = 0\n\n    # Traverse through all dimensions\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n\n            # If current dimension is a square\n            if i == j:\n                count_squares += 1\n\n    return count_squares\n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 != 0\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    strr = strr.lower()\n    char_count = {}\n    for char in strr:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for key, value in char_count.items():\n        if value == 1:\n            return key\n    return None\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[1:]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (5 * n - 3) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert the number to string\n    N_str = str(N)\n    # find the length of the string\n    length = len(N_str)\n    # iterate over the string\n    for i in range(length-1, -1, -1):\n        # if the digit is not 0, decrease it by 1 and return the number\n        if N_str[i] != '0':\n            return int(N_str[:i] + str(int(N_str[i]) - 1) + '9' * (length - i - 1))\n    # if all digits are 0, return -1\n    return -1\n\n"}
{"task_id": "MBPP/90", "completion": "\n    len_list = [len(i) for i in list1]\n    return max(len_list)\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    # convert the number to string\n    n = str(n)\n    # check if the length of the number is less than 3\n    if len(n) < 3:\n        return False\n    # check if all digits are the same\n    if len(set(n)) == 1:\n        return False\n    # check if the difference between consecutive digits is the same\n    diff = int(n[1]) - int(n[0])\n    for i in range(2, len(n)):\n        if int(n[i]) - int(n[i-1]) != diff:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst)\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if sum(sublist) % 2 == 0 and len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers)/len(numbers)\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    elif length % 2 == 0:\n        half = num[:length//2]\n        half_next = str(int(half) + 1)\n        if len(half_next) < len(half):\n            half_next = '9' * len(half)\n        return half_next + half_next[::-1]\n    else:\n        half = num[:length//2]\n        half_next = str(int(half) + 1)\n        if len(half_next) < len(half):\n            half_next = '9' * len(half)\n        return half_next + num[length//2] + half_next[::-1]\n\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/103", "completion": "\n    # Initialize the matrix\n    eulerian_matrix = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # Fill the matrix\n    for i in range(n+1):\n        for j in range(min(i, m)+1):\n            if i == 0 or j == 0:\n                eulerian_matrix[i][j] = 1\n            else:\n                eulerian_matrix[i][j] = eulerian_matrix[i-1][j] + eulerian_matrix[i][j-1]\n\n    return eulerian_matrix[n][m]\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    return [sum(x) for x in zip(test_list, test_tup)]\n\n\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (10, 20, 30, 40, 50)"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i in range(len(num1)):\n        heapq.heappush(heap, num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap, num2[i])\n    for i in range(len(num3)):\n        heapq.heappush(heap, num3[i])\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n\n\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [11, 13, 15, 17, 19]"}
{"task_id": "MBPP/109", "completion": "\n    s = s + s\n    count = 0\n    for i in range(n):\n        if i % 2 == 1:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/110", "completion": "\n    test_list.sort()\n    missing_ranges = []\n    prev_val = strt_val\n    for i in range(len(test_list)):\n        if test_list[i] - prev_val > 1:\n            missing_ranges.append((prev_val, test_list[i] - 1))\n        prev_val = test_list[i] + 1\n    if stop_val > prev_val:\n        missing_ranges.append((prev_val, stop_val))\n    return missing_ranges\n\n"}
{"task_id": "MBPP/111", "completion": "\n    if not all(isinstance(i, list) for i in nestedlist):\n        raise ValueError(\"All elements in the input list should be lists\")\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n\n"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    from math import pi\n    perimeter = 2 * pi * radius\n    return perimeter\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not d for d in list1)\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) if isinstance(i, (int, str)) else i for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    for i in range(0, n, 2):\n        if (i > 0 and arr[i] == arr[i-1]):\n            continue\n        if (i+1 < n and arr[i] == arr[i+1]):\n            continue\n        return arr[i]\n    return -1\n\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = 0\n    result = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] > max_product:\n                max_product = list1[i][0]*list1[j][1]\n                result = (list1[i], list1[j])\n    return result\n"}
{"task_id": "MBPP/121", "completion": "\n    A.sort()\n    for i in range(0, n-2):\n        l = i + 1\n        r = n - 1\n        while l < r:\n            if A[i] + A[l] + A[r] == sum:\n                count += 1\n                l += 1\n                r -= 1\n            elif A[i] + A[l] + A[r] < sum:\n                l += 1\n            else:\n                r -= 1\n    return count\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(A)\nsum = 12\ncount = 0"}
{"task_id": "MBPP/122", "completion": "\n    if n < 1 or n > MAX:\n        raise ValueError(\"n must be between 1 and \" + str(MAX))\n\n    if n == 1:\n        return 1\n\n    i = 1\n    count = 1\n    step = 2\n    while count < n:\n        i += step\n        count += 1\n        if count < n and i % 2 == 0:\n            step += 2\n    return i\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_numbers = set()\n    for a in range(1, limit):\n        b = d(a)\n        if a != b and d(b) == a:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a+b*1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    for i in range(n):\n        count_zero = 0\n        count_one = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            max_diff = max(max_diff, abs(count_zero - count_one))\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    return result if (x >= 0 and y >= 0) or (x <= 0 and y <= 0) else -result\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str.split() if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # Get the size of the matrix\n    n = len(my_matrix)\n\n    # Calculate the sum of the first row\n    magic_constant = n * (n * n + 1) // 2\n    row_sum = 0\n    for i in range(n):\n        row_sum += my_matrix[0][i]\n\n    # Check the sum of each row\n    for i in range(1, n):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += my_matrix[i][j]\n        if temp_sum != row_sum:\n            return False\n\n    # Check the sum of each column\n    for i in range(n):\n        temp_sum = 0\n        for j in range(n):\n            temp_sum += my_matrix[j][i]\n        if temp_sum != row_sum:\n            return False\n\n    # Check the sum of the two diagonals\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += my_matrix[i][i]\n    if temp_sum != row_sum:\n        return False\n\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += my_matrix[i][n - i - 1]\n    if temp_sum != row_sum:\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n\ntup1 = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    if arr[n-1] % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 25 + ((units - 50) * 0.75)\n    elif units <= 250:\n        bill = 100 + ((units - 150) * 1.20)\n    else:\n        bill = 220 + ((units - 250) * 1.50)\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"}
{"task_id": "MBPP/138", "completion": "\n    # Base case\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n\n    # Initialize result\n    res = 0\n\n    # Try all powers starting from 2^0\n    p = 0\n\n    # While sum doesn't become more than n\n    while res < n:\n        res = pow(2, p)\n        if res == n:\n            return True\n        p += 1\n\n    return False\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2*math.pi*r\n"}
{"task_id": "MBPP/140", "completion": "\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Count the occurrence of each element in the list\n    for i in test_list:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # Extract the elements that occur singly\n    singly_occur_list = [i for i in count_dict if count_dict[i] == 1]\n\n    return singly_occur_list\n\n"}
{"task_id": "MBPP/141", "completion": "\n    # Your code here\n    for cur_size in range(len(nums), 0, -1):\n        max_index = max_element(nums, 0, cur_size)\n        if max_index != cur_size - 1:\n            nums = flip(nums, 0, max_index + 1)\n            nums = flip(nums, 0, cur_size)\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    list1.sort()\n    list2.sort()\n    list3.sort()\n    i = j = k = 0\n    count = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] == list2[j] == list3[k]:\n            count += 1\n            i += 1\n            j += 1\n            k += 1\n        elif list1[i] < list2[j]:\n            i += 1\n        elif list2[j] < list3[k]:\n            j += 1\n        else:\n            k += 1\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += abs(arr[i] - arr[i + 1])\n    return sum\n\n"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return arr[-1] - arr[0]\n\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for char in str1:\n        total += ord(char)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    # Create a 2D array to store the sum of the paths\n    dp = [[0]*i for i in range(1, n+1)]\n\n    # Initialize the last element of the dp array to the last element of the triangle\n    for i in range(n):\n        dp[n-1][i] = tri[n-1][i]\n\n    # Start from the second last row\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            # For each element, add the maximum of the two elements below it to the current element\n            dp[i][j] = tri[i][j] + max(dp[i+1][j], dp[i+1][j+1])\n\n    # Return the top element of the dp array\n    return dp[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    if x < 10:\n        return x\n    else:\n        return sum_digits_single(x // 10) + x % 10\n\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize result\n    j = 0\n    for i in range(1, n):\n        if arr[i] == arr[j] + 1:\n            j = i\n    return arr[j-1:0:-1]\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if a * b == c:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    x_vertex = -b / (2 * a)\n    y_vertex = c - (b ** 2) / (4 * a)\n    return (x_vertex, y_vertex)\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if i == j or i + j == N - 1:\n                result.append(nums[i][j])\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n\n\ntuple_str = ('1', '2', '3', '4', '5')"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(list1)]\n\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    ans = float('inf')\n    for i in range(n - k + 1):\n        ans = min(ans, arr[i + k - 1] - arr[i])\n    return ans\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['December', 'January', 'February']:\n        season = 'Winter'\n    elif month in ['March', 'April', 'May']:\n        season = 'Spring'\n    elif month in ['June', 'July', 'August']:\n        season = 'Summer'\n    else:\n        season = 'Autumn'\n\n    if days == 28:\n        print(f\"{month} has 28 days. It's {season}.\")\n    elif days == 30:\n        print(f\"{month} has 30 days. It's {season}.\")\n    elif days == 31:\n        print(f\"{month} has 31 days. It's {season}.\")\n    else:\n        print(f\"{month} has {days} days. It's {season}.\")\n\n\nmonth_season('July', 31)\nmonth_season('December', 28)\nmonth_season('March', 31)\nmonth_season('June', 30)\nmonth_season('February', 28)\nmonth_season('April', 30)\nmonth_season('November', 30)\nmonth_season('September', 31)\nmonth_season('October', 31)\nmonth_season('January', 31)\nmonth_season('August', 31)\nmonth_season('May', 31)\nmonth_season('February', 30)\nmonth_season('February', 31)\nmonth_season('February', 29)\nmonth_season('February', 0)\nmonth_season('February', -1)\nmonth_season('February', 32)\nmonth_season('February', 100)\nmonth_season('February', 1000)\nmonth_season('February', 10000)\nmonth_season('February', 100000)\nmonth_season('February', 1000000)\nmonth_season('February', 10000000)\nmonth_season('February', 100000000)\nmonth_season('February', 1000"}
{"task_id": "MBPP/160", "completion": "\n    # Initialize the variables\n    x = 0\n    while n >= a:\n        x += n // a * b\n        n = n // a * a + n % a\n    return x\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    # Initialize the sum\n    sum = 0\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the number to the sum\n        sum += i\n\n    # Return the sum\n    return sum\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i:\n            continue\n        if i == (n // i):\n            result = result + i\n        else:\n            result = result + (i + n // i)\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower() or str1[i] == str1[i].upper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(N):\n        if A[i] in freq:\n            freq[A[i]] += 1\n        else:\n            freq[A[i]] = 1\n\n    # count the pairs\n    pairs = 0\n    for key in freq:\n        if freq[key] > 1:\n            pairs += freq[key] * (freq[key] - 1) // 2\n\n    return pairs\n\n"}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while(n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell = [0, 1]\n        for i in range(2, n + 1):\n            pell.append(2 * pell[i - 1] + pell[i - 2])\n        return pell[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = 0\n    for i in s:\n        if i == 'list item':\n            count += 1\n    return count\n\n\ns = 'std 1 list item 1. list item 1. list item 2 list item 2 list item 2 list item 2 list item'"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'\\W+','', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for i in l:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return d\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses = {'(': ')', '{': '}', '[': ']'}\n    for char in str1:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Initialize the variables\n    lcm = L\n    gcd = L\n\n    # Find the gcd of L and R\n    while R != 0:\n        lcm = R\n        R = L % R\n        L = lcm\n\n    # Return the gcd and lcm\n    return gcd, lcm\n\n"}
{"task_id": "MBPP/178", "completion": "\n    return [re.search(pattern, text) for pattern in patterns]\n\n\npatterns = ['cat', 'dog', 'bird']\ntext = 'I have a cat, a dog and a bird'\n"}
{"task_id": "MBPP/179", "completion": "\n    def is_keith(n, m):\n        s = [int(i) for i in str(n)]\n        while len(s) < m:\n            s.append(s[-1] + s[-2])\n        return s[-1] == n\n\n    return is_keith(x, len(str(x)))\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of the earth in km\n    R = 6371\n\n    # Convert degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Change in coordinates\n    dlon = elon - slon\n    dlat = elat - slat\n\n    # Haversine formula\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a**0.5)\n\n    # Distance calculation\n    distance = R * c\n\n    return distance\n"}
{"task_id": "MBPP/181", "completion": "\n    prefix = \"\"\n    length = min(len(str1), len(str2))\n\n    for i in range(length):\n        if str1[i] == str2[i]:\n            prefix += str1[i]\n        else:\n            break\n\n    return prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase = re.findall(r'[A-Z]', string)\n    special_characters = re.findall(r'[^a-zA-Z0-9\\s]', string)\n    numeric_values = re.findall(r'\\d', string)\n\n    return uppercase, special_characters, numeric_values\n\n\nstring = \"Hello World123 @ # $ % ^ & * ( ) _ +\"\nuppercase, special_characters, numeric_values = find_character(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    arr.sort()\n    pairs = []\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            pairs.append((arr[i], arr[j]))\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return len(pairs), pairs\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    # The focus of a parabola is the point where the line perpendicular to the directrix intersects the parabola.\n    # The equation of a parabola is y = a*(x-h)^2 + k\n    # The equation of the line perpendicular to the directrix is y = m*x + c\n    # The intersection point of the parabola and the line is where the two equations are equal.\n    # Solving for h and k in the equation of the parabola gives the focus.\n\n    # Calculate the vertex of the parabola\n    h = -0.5 * b / a\n    k = c - (b**2) / (4 * a)\n\n    return h, k\n"}
{"task_id": "MBPP/186", "completion": "\n    return [re.search(pattern, text) for pattern in patterns]\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = ['fox', 'cat', 'dog']\n"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    else:\n        i = 0\n        while i*i <= n:\n            j = 0\n            while j*j <= n:\n                if (i*i + j*j) == n:\n                    return True\n                j += 1\n            i += 1\n        return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # Initialize the count\n    count = 0\n\n    # Iterate over the range of x and y\n    for x in range(x1, x2 + 1):\n        for y in range(y1, y2 + 1):\n            # If the point is integral, increment the count\n            if x % 1 == 0 and y % 1 == 0:\n                count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/191", "completion": "\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in str:\n        if char in vowels:\n            count += 1\n    if count >= 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/193", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal, i, n = 0, 0, str(n)\n    while i < len(n):\n        decimal = decimal * 8 + int(n[i])\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    # convert tuples to list\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # perform exponentiation\n    result = [a**b for a, b in zip(list1, list2)]\n\n    return tuple(result)\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # The largest triangle that can be inscribed in a circle is a right-angled triangle.\n    # The radius of the circle is the hypotenuse of the triangle.\n    # The other two sides of the triangle are equal to the radius divided by the square root of 2.\n    # The area of the triangle is 0.5 * base * height.\n\n    # Calculate the radius of the circle\n    radius = a / 2\n\n    # Calculate the other two sides of the triangle\n    side = radius / math.sqrt(2)\n\n    # Calculate the area of the triangle\n    area = 0.5 * side * side\n\n    return area\n\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_val = max(list1)\n    max_indices = [i for i, val in enumerate(list1) if val == max_val]\n    return max_indices\n\n"}
{"task_id": "MBPP/201", "completion": "\n    return len(lst) == len(set(lst))\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x = n1 ^ n2\n    setBits = 0\n\n    while (x > 0):\n        setBits += x & 1\n        x >>= 1\n\n    return setBits\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversion_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_list.append((test_tup[i], test_tup[j]))\n    return inversion_list\n\n"}
{"task_id": "MBPP/206", "completion": "\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(str(test_tup[i]) + str(test_tup[i + 1]))\n    return tuple(result)\n\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-2]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapify(heap)\n    hq.heappush(heap, a)\n    hq.heappop(heap)\n    return heap\n\nheap = [21, 1, 45, 33, 18, 9]"}
{"task_id": "MBPP/210", "completion": "\n    charRe = re.compile(r'[^a-z0-9 ]')\n    string = charRe.search(string)\n    return not bool(string)\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count\n\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.pow(i, 4)\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # convert tuples to strings\n    str1 = ''.join(test_tup1)\n    str2 = ''.join(test_tup2)\n\n    # concatenate strings\n    result = str1 + str2\n\n    return result\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for item in alist:\n        if isinstance(item, list):\n            decoded_list.append(decode_list(item))\n        else:\n            decoded_list.append(chr(item))\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Initialize an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is seen before, return it\n        if i in char_set:\n            return i\n\n        # Else add current character to the set\n        char_set.add(i)\n\n    # If no repeated character found, return None\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    return math.floor(math.log(B / A) / math.log(2)) + 1\n\n"}
{"task_id": "MBPP/219", "completion": "\n    test_tup = list(test_tup)\n    test_tup.sort()\n    min_k = test_tup[:K]\n    max_k = test_tup[-K:]\n    return min_k, max_k\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = ['.', ':']\n    for char in special_chars:\n        text = re.sub(char, ' ', text)\n    words = text.split()\n    words.sort(key=lambda w: len(re.findall(r'\\W', w)), reverse=True)\n    for word in words[:n]:\n        text = text.replace(word, word.replace(' ', '_'), 1)\n    return text\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n        count += 1\n\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n"}
{"task_id": "MBPP/227", "completion": "\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Your code here\n    for i in range(l, r+1):\n        if (n >> i) & 1 == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            j = j + 1\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, -1, -1):\n        for j in range(0, i):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n\ntriangle = [[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    return 2 * math.pi * r * h\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Initialize the count of triangles\n    count = 0\n\n    # Initialize the side of the triangle\n    side = 1\n\n    # Loop until the side of the triangle is greater than N\n    while side <= N:\n        # Calculate the number of triangles that can be formed with the current side\n        num_triangles = (N - side) // (2 * side) + 1\n\n        # Update the count of triangles\n        count += num_triangles\n\n        # Update the side of the triangle\n        side *= K\n\n    # Return the count of triangles\n    return count\n\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    values = list(count.values())\n    return len(set(values)) == 1\n"}
{"task_id": "MBPP/238", "completion": "\n    return sum([(i * (i + 1)) // 2 for i in range(1, len(str) + 1)])\n\n"}
{"task_id": "MBPP/239", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i - j >= 0:\n                dp[i] += 2 * dp[i - j]\n    return dp[n]\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    array_3d = [[[0 for _ in range(o)] for _ in range(n)] for _ in range(m)]\n    return array_3d\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: lst.count(x))\n\n"}
{"task_id": "MBPP/244", "completion": "\n    # find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # if sqrt_N is not an integer, return -1\n    if sqrt_N != int(sqrt_N):\n        return -1\n\n    # find the next integer greater than sqrt_N\n    next_sqrt_N = sqrt_N + 1\n\n    # return the square of next_sqrt_N\n    return int(next_sqrt_N * next_sqrt_N)\n\n"}
{"task_id": "MBPP/245", "completion": "\n    # Initializing the dp arrays\n    dp_inc = [0]*n\n    dp_dec = [0]*n\n\n    # Filling the dp_inc array\n    for i in range(n):\n        dp_inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and dp_inc[i] < dp_inc[j] + arr[i]:\n                dp_inc[i] = dp_inc[j] + arr[i]\n\n    # Filling the dp_dec array\n    for i in range(n-1, -1, -1):\n        dp_dec[i] = arr[i]\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dp_dec[i] < dp_dec[j] + arr[i]:\n                dp_dec[i] = dp_dec[j] + arr[i]\n\n    # Finding the maximum sum bi-tonic subsequence\n    max_sum = dp_inc[0] + dp_dec[0] - arr[0]\n    for i in range(1, n):\n        if max_sum < dp_inc[i] + dp_dec[i] - arr[i]:\n            max_sum = dp_inc[i] + dp_dec[i] - arr[i]\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    # initial guess\n    guess = number / 2.0\n\n    while True:\n        better_guess = (guess + number / guess) / 2.0\n\n        if abs(guess - better_guess) < 0.000001:\n            return better_guess\n\n        guess = better_guess\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n \n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n \n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in\n    # diagonally\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if (str[i] == str[j] and cl == 2):\n                L[i][j] = 2\n            elif (str[i] == str[j]):\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n \n    # L[0][n-1] contains the length of the longest palindromic substring\n    return L[0][n - 1]\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [2, 4, 6, 8, 10]"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n\n"}
{"task_id": "MBPP/251", "completion": "\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, phi = cmath.polar(number)\n        result.append((r, phi))\n    return result\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\ncolors = ['red', 'blue', 'green']\nn = 2"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)\n\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # sort the lists\n    list1.sort()\n    list2.sort()\n\n    # merge the sorted lists\n    merged_list = list1 + list2\n\n    # sort the merged list in descending order\n    merged_list.sort(reverse=True)\n\n    # convert the list back to tuple\n    result = tuple(merged_list)\n\n    return result\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        if num == 1:\n            return 2\n        if num == 2:\n            return 3\n        if num == 3:\n            return 5\n        if num == 4:\n            return 7\n        if num == 5:\n            return 11\n        if num == 6:\n            return 13\n        if num == 7:\n            return 17\n        if num == 8:\n            return 19\n        if num == 9:\n            return 23\n        if num == 10:\n            return 29\n        if num == 11:\n            return 31\n        if num == 12:\n            return 37\n        if num == 13:\n            return 41\n        if num == 14:\n            return 43\n        if num == 15:\n            return 47\n        if num == 16:\n            return 53\n        if num == 17:\n            return 59\n        if num == 18:\n            return 61\n        if num == 19:\n            return 67\n        if num == 20:\n            return 71\n        if num == 21:\n            return 73\n        if num == 22:\n            return 79\n        if num == 23:\n            return 83\n        if num == 24:\n            return 89\n        if num == 25:\n            return 97\n        if num == 26:\n            return 101\n        if num == 27:\n            return 103\n        if num == 28:\n            return 107\n        if num == 29:\n            return 109\n        if num == 30:\n            return 113\n        if num == 31:\n            return 127\n        if num == 32:\n            return 13"}
{"task_id": "MBPP/261", "completion": "\n    # your code here\n    result = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age / 7\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i::step] for i in range(step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4*l**2\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum\n\n"}
{"task_id": "MBPP/268", "completion": "\n    return n*(n+1)/2\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\n"}
{"task_id": "MBPP/272", "completion": "\n    res = [sub[-1] for sub in test_list]\n    return res\n\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum = 0\n\n    # Compute sum of binomial coefficients\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n\n    return sum\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        return (a[n-1] + m) % len(a)\n"}
{"task_id": "MBPP/276", "completion": "\n    from math import pi\n    return pi * r**2 * h\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for sub in test_tup:\n        if sub[0] == sub[-1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/279", "completion": "\n    return n*(7*n-5)//2\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n    return found\n\n"}
{"task_id": "MBPP/281", "completion": "\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for i in range(len(n)):\n        if n.count(n[i]) > int(n[i]):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return [i for i in list if i == element]\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    max_sum = -1\n\n    # Compute sum of first window of size k\n    window_sum = sum([a[i] for i in range(k)])\n    max_sum = window_sum\n\n    # Compute sums of remaining windows by removing first element of previous window and adding last element of current window.\n    for i in range(k, n * k):\n        window_sum = window_sum - a[i - k] + a[i % n]\n        max_sum = max(window_sum, max_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n"}
{"task_id": "MBPP/288", "completion": "\n    inv = [0] * (N + 1)\n    inv[1] = 1\n    for i in range(2, N + 1):\n        inv[i] = (P - (P // i) * inv[P % i] % P) % P\n    return [inv[i] for i in arr]\n\n"}
{"task_id": "MBPP/289", "completion": "\n    # Initialize the count of odd days\n    odd_days = 0\n\n    # Loop through each day of the year\n    for day in range(1, N + 1):\n        # Check if the day is odd\n        if day % 2 != 0:\n            # If the day is odd, increment the count\n            odd_days += 1\n\n    return odd_days\n"}
{"task_id": "MBPP/290", "completion": "\n    return max(len(i) for i in list1)\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        quotient = n / m\n        return quotient\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    divisors = [i for i in range(1, number + 1) if number % i == 0]\n    return sum(divisors)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of each tuple\n    sum_dict = defaultdict(int)\n\n    # Iterate over each tuple in the list\n    for tup in stdata:\n        # Add the sum of the tuple to the dictionary\n        sum_dict[tup] += sum(tup)\n\n    # Return the maximum sum\n    return max(sum_dict.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0, 0] for _ in range(n+1)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0] + dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n][0] + dp[n][1]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return max(dict_depth(v) for v in d.values()) + 1\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    count = 0\n    while (n):\n        n >>= 1\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/303", "completion": "\n    # Write your code here\n    a.sort()\n    n.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] > n[i]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Rotate the array to the left by rotations\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the given index\n    element = arr[index]\n\n    return element\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match(\"^p\", word)]\n\nwords = ['python', 'programming', 'problem', 'pair', 'parrot', 'pizza']"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0]\n    max_sum = a[index]\n    for i in range(index):\n        if a[i] < a[index] and a[index] + a[k] > max_sum:\n            max_sum = a[index] + max_sum_increasing_subseq(a, n, i, k)\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    tuplex_copy = deepcopy(tuplex)\n    tuplex_copy = tuplex_copy[m:n+1]\n    return tuplex_copy\n\ntuplex = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")"}
{"task_id": "MBPP/308", "completion": "\n    nums1.sort()\n    nums2.sort()\n    return max(nums1[-1]*nums1[-2]*nums1[-3], nums2[-1]*nums2[-2]*nums2[-3], nums1[-1]*nums2[-1]*nums2[-2])\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    # convert the number to binary\n    binary = bin(n)[2:]\n\n    # find the position of the left most unset bit\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            position = i\n            break\n\n    # set the left most unset bit\n    binary = list(binary)\n    binary[position] = '1'\n    binary = ''.join(binary)\n\n    # convert the binary back to decimal\n    n = int(binary, 2)\n\n    return n\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1.0/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_nos = [num for num in list1 if num > 0]\n    return pos_nos\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid:\n        return 0\n\n    # Initialize the dp array\n    dp = [[0]*n for _ in range(2)]\n\n    # Initialize the first row\n    for j in range(n):\n        dp[0][j] = max(dp[0][j-1], dp[1][j-1]) + grid[0][j]\n\n    # Initialize the first column\n    for i in range(1, len(grid)):\n        dp[1][0] = max(dp[0][0], dp[1][0]) + grid[i][0]\n\n    # Fill in the dp array\n    for i in range(1, len(grid)):\n        for j in range(1, n):\n            dp[1][j] = max(dp[0][j], dp[1][j-1]) + grid[i][j]\n            dp[0][j] = dp[1][j-1] + grid[i-1][j]\n\n    return max(dp[0][-1], dp[1][-1])\n\n"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split(\" \")\n    even_len_words = [word for word in str if len(word) % 2 == 0]\n    if even_len_words:\n        return max(even_len_words, key=len)\n    return \"No even length word found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # Your code here\n    s = sorted(s)\n    return s[0]*s[1]*s[2]\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    square_of_sum = (n * (n + 1) // 2) ** 2\n    return square_of_sum - sum_of_squares\n\n"}
{"task_id": "MBPP/321", "completion": "\n    # Initialize the variables\n    demlo_numbers = []\n    i = 1\n\n    # Loop through the numbers\n    while len(demlo_numbers) < s:\n        # Check if the number is a demlo number\n        if i % 3 == 0 or i % 5 == 0:\n            demlo_numbers.append(i)\n        i += 1\n\n    # Return the demlo numbers\n    return demlo_numbers\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_indices = [i for i, val in enumerate(list1) if val == min_val]\n    return min_indices\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n - 1]\n    for i in range(n - 1, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    # initializing the sum\n    sum = 0\n    # iterating over the tuple\n    for i in range(len(test_tuple)):\n        # checking if the index is even\n        if i % 2 == 0:\n            # adding the element to the sum\n            sum += test_tuple[i]\n    return sum\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum number of squares for all numbers up to n\n    min_squares = [0, 1, 2, 3]\n\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares to i (i.e., all 1s)\n        min_square = i\n\n        # Try to form a square number from the previous numbers\n        j = 1\n        while j * j <= i:\n            # Update the minimum number of squares\n            min_square = min(min_square, 1 + min_squares[i - j * j])\n            j += 1\n\n        # Store the minimum number of squares for i\n        min_squares.append(min_square)\n\n    # Return the minimum number of squares for n\n    return min_squares[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    # Creating an empty dictionary\n    dict = defaultdict(int)\n\n    # Iterating over the list\n    for sublist in test_list:\n        for val in sublist:\n            dict[val] += 1\n\n    # Finding the maximum occurrence\n    max_key = max(dict, key=dict.get)\n    return max_key\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 2\n    # n = 10\n    return list1[m:n] + list1[0:m]\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key = lambda x: x[1])\n\nsub_li = [[5, 2], [1, 3], [4, 1], [2, 4]]"}
{"task_id": "MBPP/334", "completion": "\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return \"Not a valid triangle\"\n    elif a == b == c:\n        return \"Equilateral triangle\"\n    elif a == b or b == c or c == a:\n        return \"Isosceles triangle\"\n    else:\n        return \"Scalene triangle\"\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    month_30_days = ['April', 'June', 'September', 'November']\n    if monthname1 in month_31_days:\n        return 31\n    elif monthname1 in month_30_days:\n        return 30\n    elif monthname1 == 'February':\n        return 28\n    else:\n        return \"Invalid month name\"\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    divisor_list = []\n    for i in range(x, y+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                divisor_list.append(j)\n    max_divisor = max(set(divisor_list), key=divisor_list.count)\n    return max_divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3]) if len(lst) > 2 else sum(lst)\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(s)\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_num = float('-inf')\n\n    # Add first element from each list\n    for i in range(len(list)):\n        heappush(min_heap, Node(list[i][0], i, 0))\n        max_num = max(max_num, list[i][0])\n\n    min_range = float('inf')\n    result = [0, 0]\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_num - node.value < min_range:\n            min_range = max_num - node.value\n            result = [node.value, max_num]\n\n        if len(list[node.list_num]) > node.index + 1:\n            next_num = list[node.list_num][node.index + 1]\n            heappush(min_heap, Node(next_num, node.list_num, node.index + 1))\n            max_num = max(max_num, next_num)\n\n    return result\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i*i + j*j) % 2 != 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [j-i for i, j in zip(nums, nums[1:])]\n"}
{"task_id": "MBPP/346", "completion": "\n    # Initialize the list of entringer numbers\n    e = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    # Base cases\n    for i in range(1, n+1):\n        e[i][0] = 0\n        e[i][i] = 1\n\n    # Recursive case\n    for i in range(2, n+1):\n        for j in range(1, i):\n            e[i][j] = e[i-1][j-1] + e[i-1][j]\n\n    return e[n][k]\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # Your code here\n    return m*n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0 and r == 0:\n        return 1\n    if n == 0 or r == 0:\n        return 0\n    return bin_coff(n - 1, r) + bin_coff(n, r - 1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    # Write your code here\n    n = len(s)\n    i = 0\n    j = n - 1\n    while i < n and s[i] == s[j]:\n        c = s[i]\n        while i < n and s[i] == c:\n            i += 1\n        while j > 0 and s[j] == c:\n            j -= 1\n    return max(0, j - i + 1)\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # create an empty dictionary\n    d = {}\n\n    # count frequency of each element in the array\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n\n    # check if frequency is k\n    for i in range(n):\n        if d[arr[i]] == k:\n            return arr[i]\n\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Create an empty set\n    st = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is already present in set, return False\n        if i in st:\n            return False\n\n        # Else add current character to set\n        st.add(i)\n\n    # If all characters are unique, return True\n    return True\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # Your code here\n    from math import pi\n    return int(pi * radius ** 2)\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = max(test_list, key=lambda item: item[1])\n    return max_val\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 0, 5, 1]"}
{"task_id": "MBPP/359", "completion": "\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # if discriminant is positive, there are two solutions\n    if discriminant > 0:\n        return \"There are two distinct real roots\"\n    # if discriminant is zero, there is one solution\n    elif discriminant == 0:\n        return \"There is one real root\"\n    # if discriminant is negative, there are no real solutions\n    else:\n        return \"There are no real roots\"\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + 1\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_key = max(num_dict, key=num_dict.get)\n    return max_key\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x + K, y + K) for x, y in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flips = 0\n    for i in range(len(ch) - 1):\n        if ch[i] == ch[i + 1]:\n            flips += 1\n    return flips\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = [list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1)]\n    return max(product_list)\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = get_height(root.left) - get_height(root.right)\n    if abs(height_diff) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return tuple(test_tup * N)\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return tuple(sorted(price))\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] != left_element:\n        return left_element\n    n = len(A)\n    for i in range(n):\n        if A[i] != left_element + i:\n            return left_element + i\n    return right_element + 1\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    # initializing empty dictionary\n    temp_dict = {}\n\n    # initializing empty list\n    res_list = []\n\n    # iterating over tuple elements\n    for ele in test_tup:\n        if ele not in temp_dict:\n            temp_dict[ele] = 1\n            res_list.append(ele)\n        else:\n            temp_dict[ele] += 1\n            res_list.append(\"custom_value\")\n\n    return res_list\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    return test_list[-1:] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    # Surface area = 2lw + 2lh + 2wh\n    surface_area = 2*l*w + 2*l*h + 2*w*h\n    return surface_area\n\n"}
{"task_id": "MBPP/380", "completion": "\n    multilist = [[0 for col in range(colnum)] for row in range(rownum)]\n    return multilist\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n\ndata = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]"}
{"task_id": "MBPP/382", "completion": "\n    left = 0\n    right = len(A) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\n"}
{"task_id": "MBPP/383", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        perrin = [3, 0, 2]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return perrin[n]\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_brackets = []\n    swap_count = 0\n    for bracket in s:\n        if bracket == '[':\n            open_brackets.append(bracket)\n        else:\n            if len(open_brackets) > 0:\n                open_brackets.pop()\n            else:\n                swap_count += 1\n                open_brackets.append('[')\n    swap_count += len(open_brackets)\n    return swap_count\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # convert hexadecimal to decimal\n    decimal = int(N, 16)\n\n    # check if the decimal number is even or odd\n    if decimal % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while n > 0:\n        n = n // 2\n        i += 1\n    return 2 ** (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + i for i in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(min(len(l1), len(l2), len(l3)))]\n\n\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = [1, 2, 3]\n"}
{"task_id": "MBPP/392", "completion": "\n    if n < 0:\n        return 0\n    else:\n        return n + get_max_sum(n - 1)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length_list = max(input_list, key=lambda x: len(x))\n    return max_length_list\n\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    # Your code here\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    res = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/400", "completion": "\n    from collections import Counter\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/401", "completion": "\n    result = tuple(map(lambda t1, t2: t1 + t2, test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0 , r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    return tuplex in tuple1\n\ntuplex = (45, 45, 45, 45)\ntuple1 = (10, 20, 30, 45, 50, 60, 70, 80, 90, 100, 45)"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/407", "completion": "\n    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(\"\".join(num_list))\n    return -1\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    min_pair = ()\n    for i in range(len(list1) - 1):\n        product = list1[i] * list1[i + 1]\n        if product < min_product:\n            min_product = product\n            min_pair = (list1[i], list1[i + 1])\n    return min_pair\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    try:\n        return list1[n]\n    except IndexError:\n        return None\n\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/415", "completion": "\n    arr.sort()\n    return max(arr[0]*arr[1], arr[-1]*arr[-2])\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    maxSum = 0\n    for i in range(1, n+1):\n        currSum = i * (n-i+1)\n        maxSum = max(maxSum, currSum + breakSum(n-i))\n\n    return maxSum\n"}
{"task_id": "MBPP/417", "completion": "\n    return [(i[0], sum(x[1] for x in Input if x[0] == i[0])) for i in Input]\n\n\nInput = [(1, 2), (3, 4), (1, 4), (3, 2), (1, 5), (3, 6)]"}
{"task_id": "MBPP/418", "completion": "\n    max_len = len(max(lst, key=len))\n    return [i for i in lst if len(i) == max_len]\n\n"}
{"task_id": "MBPP/419", "completion": "\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    return sum\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/421", "completion": "\n    str1 = ''.join(test_tup)\n    return str1\n\n\ntest_tup = ('g', 'e', 'e', 'k', 's')"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n    if n == 1:\n        return gold[0][0]\n    if m == 1:\n        return max(gold[0])\n\n    for j in range(1, n):\n        for i in range(m):\n            if i == 0:\n                gold[i][j] += max(gold[i][j-1], gold[i+1][j-1])\n            elif i == m-1:\n                gold[i][j] += max(gold[i][j-1], gold[i-1][j-1])\n            else:\n                gold[i][j] += max(gold[i][j-1], gold[i-1][j-1], gold[i+1][j-1])\n\n    max_gold = max(gold[i][n-1] for i in range(m))\n\n    return max_gold\n\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    date_pattern = r\"(\\d{4})-(\\d{1,2})-(\\d{1,2})\"\n    match = re.match(date_pattern, dt)\n    if match:\n        return \"{}-{}-{}\".format(match.group(1), match.group(2).zfill(2), match.group(3).zfill(2))\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return abs(c) / sqrt(a)\n\n"}
{"task_id": "MBPP/431", "completion": "\n    common = [value for value in list1 if value in list2]\n    return common\n\n"}
{"task_id": "MBPP/432", "completion": "\n    median = (base1 + base2) / 2\n    return median\n\n"}
{"task_id": "MBPP/433", "completion": "\n    return [i > number for i in arr]\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/435", "completion": "\n    return n%10\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_nos = [i for i in list1 if i < 0]\n    return neg_nos\n"}
{"task_id": "MBPP/437", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return [item for sublist in L for item in sublist]\n\n"}
{"task_id": "MBPP/440", "completion": "\n    adverbs = re.finditer(r'\\b(?:very|just|so|much|too)\\b', text)\n    return [(match.group(), match.start()) for match in adverbs]\n\n\ntext = \"She is very beautiful and so talented\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"}
{"task_id": "MBPP/443", "completion": "\n    # Initialize the largest negative number to be the smallest possible integer\n    largest_neg = -99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:-K] for t in test_list]\n\n"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(i*j for i, j in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(lst)\n    return count\n\ntup = (1,2,3,4,5,6,7,8,9,10)\nlst = [1,2,2,3,3,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10]\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        perrin = [0, 1, 1]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # if area is 0, then points are collinear\n    if area == 0:\n        return \"Points are collinear\"\n    else:\n        return \"Points form a triangle\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n//i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n\n\nmonthnum2 = int(input(\"Enter the month number: \"))"}
{"task_id": "MBPP/456", "completion": "\n    return [i[::-1] for i in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = i\n    return min_lst\n\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]+', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i[0] for i in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1) + 1):\n        result.extend(combinations(list1, i))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if len(arr) == 0:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    result = max_so_far\n\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        temp_max = max(curr, max_so_far * curr, min_so_far * curr)\n        min_so_far = min(curr, max_so_far * curr, min_so_far * curr)\n\n        max_so_far = temp_max\n\n        result = max(result, max_so_far)\n\n    return result\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return len(set(values)) <= 1\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)[2:]\n\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # max_end_here[i] will store the maximum product of the subarray arr[0..i]\n    max_end_here = [0]*n\n    max_end_here[0] = arr[0]\n\n    # max_product_so_far will store the result\n    max_product_so_far = arr[0]\n\n    for i in range(1, n):\n        max_end_here[i] = max(arr[i], max_end_here[i-1]*arr[i])\n        max_product_so_far = max(max_product_so_far, max_end_here[i])\n\n    return max_product_so_far\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j - 1] - price[j])\n    return dp[k][n - 1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] + test_tup[i + 1])\n    return tuple(res)\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize result\n    res = 1\n\n    # Compute the product of all elements in the array\n    for i in range(lens):\n        res = (res * arr[i]) % n\n\n    # Return the remainder\n    return res % n\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tup1)\n    return result\n\n\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list2 = [(1, 2, 3), (4, 5, 6), (10, 11, 12)]"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    dict1 = Counter(dict1)\n    return dict(sorted(dict1.items()))\n\n"}
{"task_id": "MBPP/476", "completion": "\n    if len(nums) < 2:\n        return \"Array must have at least two numbers\"\n    else:\n        return max(nums) + min(nums)\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n /= 10\n    return int(n)\n\n"}
{"task_id": "MBPP/480", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n"}
{"task_id": "MBPP/481", "completion": "\n    # The value of subset[i][j] will be True if there is a subset of set[0..j-1]\n    # with sum equal to i\n    subset = ([[False for i in range(sum + 1)] for i in range(n + 1)])\n\n    # If sum is 0, then answer is True\n    for i in range(n + 1):\n        subset[i][0] = True\n\n    # If sum is not 0 and set is empty, then answer is False\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n\n    # Fill the subset table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            if j >= set[i - 1]:\n                subset[i][j] = (subset[i - 1][j] or subset[i - 1][j - set[i - 1]])\n\n    # return the last cell of the table\n    return subset[n][sum]\n\n"}
{"task_id": "MBPP/482", "completion": "\n    return re.findall(r'[A-Z]+', text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    return [i for i in test_list1 if i not in test_list2]\n\n"}
{"task_id": "MBPP/485", "completion": "\n    # convert the number to string\n    n = str(n)\n\n    # compare the string with its reverse\n    return n == n[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r > n / 2:\n        r = n - r\n    result = 1\n    for i in range(1, r + 1):\n        result = result * (n - i + 1) // i\n    return result\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4\n\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            result.append(pair)\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while(first <= last and not found):\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the angle between the two points\n    angle = math.atan2(endy - starty, endx - startx)\n\n    # Calculate the coordinates of the hexagon vertices\n    vertices = []\n    for i in range(6):\n        x = startx + radius * math.cos(angle + i * 2 * math.pi / 6)\n        y = starty + radius * math.sin(angle + i * 2 * math.pi / 6)\n        vertices.append((x, y))\n\n    return vertices\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return [int(bin_num, 2) for bin_num in test_tup]\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]+', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    heapq.heapify(nums)\n    return heapq.nsmallest(n, nums)\n\nnums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nn = 3"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return sum(nums)\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/505", "completion": "\n    count = A.count(0)\n    A = [i for i in A if i != 0]\n    return A + [0]*count\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 0:\n        return 1\n    return n * permutation_coefficient(n - 1, k - 1) / k\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n\nlist1 = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nremovewords = ['apple', 'date']\n"}
{"task_id": "MBPP/508", "completion": "\n    return l1 == l2\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i\n            count += 1\n    return sum/count\n\n"}
{"task_id": "MBPP/510", "completion": "\n    def dfs(index, product):\n        if index == len(arr):\n            if product < k:\n                return 1\n            return 0\n        cnt = dfs(index + 1, product)\n        if product * arr[index] < k:\n            cnt += dfs(index + 1, product * arr[index])\n        return cnt\n\n    return dfs(0, 1)\n\n"}
