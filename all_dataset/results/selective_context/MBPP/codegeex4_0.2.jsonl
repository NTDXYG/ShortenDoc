{"task_id": "MBPP/11", "completion": "\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '', 1)\n\n"}
{"task_id": "MBPP/12", "completion": "\n    return sorted(M, key=lambda x: sum(x))\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)[0][0]\n\n"}
{"task_id": "MBPP/14", "completion": "\n    return (1/2)*l*b*h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split(r'(?=[a-z])', text)\n\n"}
{"task_id": "MBPP/16", "completion": "\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    # Create a hash table to mark all characters of second string\n    mark = [0] * NO_OF_CHARS\n    for i in range(len(string)):\n        mark[ord(string[i])] = 1\n\n    # Traverse all characters of first string and if character is not present in\n    # second string then append it to result.\n    res = \"\"\n    for i in range(len(string)):\n        if mark[ord(string[i])] == 0:\n            res += string[i]\n\n    return res\n\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "MBPP/21", "completion": "\n    return [i * n for i in range(1, m + 1)]\n\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for i in list1:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * (2 ** (len(binary) - i - 1))\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        if arr[i] not in arr[i+1:]:\n            product *= arr[i]\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    if len(test_list) < K:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/27", "completion": "\n    new_list = []\n    for i in list:\n        new_list.append(re.sub(r'\\d', '', i))\n    return new_list\n\n"}
{"task_id": "MBPP/28", "completion": "\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"}
{"task_id": "MBPP/29", "completion": "\n    # Initialize result\n    res = 0\n\n    # Traverse array elements\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n\n    # Return result\n    return res\n\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j]:\n                count += 1\n    return count"}
{"task_id": "MBPP/31", "completion": "\n    # Create a dictionary to store the count of each integer\n    count_dict = collections.defaultdict(int)\n\n    # Iterate through each list and count the occurrence of each integer\n    for num_list in nums:\n        for num in num_list:\n            count_dict[num] += 1\n\n    # Create a heap queue to store the top k integers\n    heap = []\n\n    # Iterate through the count dictionary and push each integer and its count into the heap\n    for num, count in count_dict.items():\n        heapq.heappush(heap, (-count, num))\n\n    # Create a list to store the top k integers\n    top_k = []\n\n    # Pop the top k integers from the heap and add them to the list\n    for _ in range(k):\n        count, num = heapq.heappop(heap)\n        top_k.append(num)\n\n    # Return the list of top k integers\n    return top_k\n\n"}
{"task_id": "MBPP/32", "completion": "\n    # Function to find largest prime factor\n    def largest_prime_factor(n):\n        # Initialize the maximum prime factor\n        max_prime = -1\n\n        # Divide n by 2 until it is odd\n        while n % 2 == 0:\n            max_prime = 2\n            n = n // 2\n\n        # n must be odd at this point, thus skip the even numbers and iterate only for odd\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            # While i divides n, update n and max_prime\n            while n % i == 0:\n                max_prime = i\n                n = n // i\n\n        # This condition is to handle the case when n is a prime number greater than 2\n        if n > 2:\n            max_prime = n\n\n        return max_prime\n\n    # Test the function\n    print(largest_prime_factor(315))  # Output: 7\n    print(largest_prime_factor(17))   # Output: 17\n    print(largest_prime_factor(100))  # Output: 5\n    print(largest_prime_factor(13))   # Output: 13\n    print(largest_prime_factor(1))    # Output: 1\n    print(largest_prime_factor(0))    # Output: -1\n    print(largest_prime_factor(-10))  # Output: -1\n    print(largest_prime_factor(-1))   # Output: -1\n    print(largest_prime_factor(2))    # Output: 2\n    print(largest_prime_factor(3))    # Output: 3\n    print(largest_prime_factor(4))    # Output: 2\n    print(largest_prime_factor(5))    # Output: 5\n    print(largest_prime_factor(6))    # Output: 3\n    print(largest_prime_factor(7))    # Output: 7\n    print(largest_prime_factor(8))    # Output: 2\n    print(largest_prime_factor(9))    # Output: 3\n    print(largest_prime_factor(10))   # Output: 5\n    print(largest_prime_factor(11))   # Output: 11\n    print(largest_prime_factor(12))   # Output: 3\n    print(largest_prime_factor(13))   # Output: 13\n    print(largest"}
{"task_id": "MBPP/33", "completion": "\n    binary = bin(N).replace(\"0b\", \"\")\n    return binary\n\n"}
{"task_id": "MBPP/34", "completion": "\n    for i in range(N-1):\n        if ar[i+1] - ar[i] != 1:\n            return ar[i] + 1\n    return -1\n"}
{"task_id": "MBPP/35", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * find_rect_num(n - 1) + 2 * (n - 1) + 1\n"}
{"task_id": "MBPP/36", "completion": "\n    # Check if p and q are valid fractions\n    if p <= 0 or q <= 0:\n        return \"Invalid fraction\"\n    \n    # Check if N is valid\n    if N <= 0:\n        return \"Invalid N\"\n    \n    # Calculate the length of the fraction\n    length = len(str(p)) + len(str(q))\n    \n    # Check if N is within the length of the fraction\n    if N > length:\n        return \"N is out of range\"\n    \n    # Find the nth digit in the fraction\n    fraction = str(p) + str(q)\n    return int(fraction[N-1])\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate integers and strings\n    integers = [i for i in mixed_list if isinstance(i, int)]\n    strings = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort integers and strings\n    sorted_integers = sorted(integers)\n    sorted_strings = sorted(strings)\n\n    # Combine sorted integers and strings\n    sorted_list = sorted_integers + sorted_strings\n\n    return sorted_list\n"}
{"task_id": "MBPP/38", "completion": "\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character in the string\n    char_count = Counter(S)\n    \n    # Create a max heap based on the frequency of each character\n    max_heap = [(-freq, char) for char, freq in char_count.items()]\n    heapq.heapify(max_heap)\n    \n    # Initialize the previous character and its frequency to None and 0\n    prev_char, prev_freq = None, 0\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # While the heap is not empty\n    while max_heap:\n        # Pop the character with the highest frequency from the heap\n        freq, char = heapq.heappop(max_heap)\n        \n        # Append the character to the result string\n        result += char\n        \n        # If the previous character is not None and its frequency is greater than 0\n        if prev_char is not None and prev_freq > 0:\n            # Push the previous character back into the heap with its updated frequency\n            heapq.heappush(max_heap, (prev_freq, prev_char))\n        \n        # Update the previous character and its frequency\n        prev_char, prev_freq = char, freq + 1\n    \n    # Return the result string\n    return result\n\n"}
{"task_id": "MBPP/40", "completion": "\n    # Flatten the list of lists\n    flat_list = list(chain.from_iterable(nums))\n\n    # Count the frequency of each element\n    freq = Counter(flat_list)\n\n    # Find the element with the highest frequency\n    max_freq = max(freq.values())\n\n    # Find all elements with the highest frequency\n    max_freq_elements = [k for k, v in freq.items() if v == max_freq]\n\n    return max_freq_elements\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the sum of repeated elements\n    sum_repeated = 0\n    for key, value in count_dict.items():\n        if value > 1:\n            sum_repeated += key * value\n    \n    return sum_repeated\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'\\b[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'\\bword\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n\n"}
{"task_id": "MBPP/47", "completion": "\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0\n    # 0\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0\n    # 0\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0\n    # 0\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0\n    # 0\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0\n    # 0\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0\n    # 0\n    # A = 5, B = 10\n    # A! = 120\n    # B! = 3628800\n    # 120 % 10 = 0\n    # 3628800 % 10 = 0\n    # 0 % 10 = 0"}
{"task_id": "MBPP/48", "completion": "\n    return n | 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for i in range(len(nums)):\n        if i == N:\n            result.append(nums[i][0])\n        else:\n            result.append(nums[i][1])\n    return result\n\nnums = [[1, 2], [3, 4], [5, 6], [7, 8]]\nN = 2"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=len)\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        print(\"Triangle is equilateral\")\n    else:\n        print(\"Triangle is not equilateral\")\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) < 2:\n        return True\n    else:\n        return str[0] == str[-1]\n"}
{"task_id": "MBPP/54", "completion": "\n    # Find maximum value in the list\n    max_value = max(my_list)\n\n    # Create a count array to store the count of each element\n    count = [0] * (max_value + 1)\n\n    # Count the occurrences of each element in the list\n    for num in my_list:\n        count[num] += 1\n\n    # Create a sorted list by adding elements in order\n    sorted_list = []\n    for i in range(len(count)):\n        sorted_list.extend([i] * count[i])\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    def checkf(n):\n        rev_num = 0\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return n == 2 * rev_num - 1\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    def checkf(n):\n        rev_num = 0\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return n == 2 * rev_num - 1\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    def checkf(n):\n        rev_num = 0\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return n == 2 * rev_num - 1\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    def checkf(n):\n        rev_num = 0\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return n == 2 * rev_num - 1\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    def checkf(n):\n        rev_num = 0\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return n == 2 * rev_num - 1\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    def checkf(n):\n        rev_num = 0\n        while n > 0:\n            rev_num = rev_num * 10 + n % 10\n            n = n // 10\n        return n == 2 * rev_num - 1\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    def checkf(n):\n        rev_num = 0\n        while n >"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort()\n    arr.reverse()\n    return int(''.join(map(str, arr)))\n"}
{"task_id": "MBPP/58", "completion": "\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n*(3*n-2)\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"}
{"task_id": "MBPP/61", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return 0\n    test_list.sort()\n    return test_list[-1][0] - test_list[0][1]\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    if len(A) <= 1:\n        return True\n    increasing = None\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            if increasing is False:\n                return False\n            increasing = True\n        elif A[i] < A[i-1]:\n            if increasing is True:\n                return False\n            increasing = False\n    return True\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)):\n        if len(Input[i]) != len(Input[0]):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    for i in range(1, n):\n        for j in range(i, n):\n            if i**2 - j**2 == n:\n                return True\n    return False\n"}
{"task_id": "MBPP/73", "completion": "\n    # Define the regular expression pattern\n    pattern = r'[,;:\\s]+'  # Match commas, semicolons, colons, and whitespace\n\n    # Use the re.split() function to split the text\n    result = re.split(pattern, text)\n\n    # Return the result\n    return result\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tu in test_list:\n        if all(i % K == 0 for i in tu):\n            result.append(tu)\n    return result\n"}
{"task_id": "MBPP/76", "completion": "\n    return (m * n) // 4\n"}
{"task_id": "MBPP/77", "completion": "\n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    return sum_even - sum_odd\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "MBPP/81", "completion": "\n    return zip(test_tup1, test_tup2)\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return sum\n"}
{"task_id": "MBPP/84", "completion": "\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n    return sequence[n-1]\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.defaultdict(list)\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            merged_dict[key].append(value)\n    return merged_dict\n\n"}
{"task_id": "MBPP/88", "completion": "\n    freq = collections.Counter(list1)\n    return freq\n\n"}
{"task_id": "MBPP/89", "completion": "\n    if N < 10:\n        return 9\n    else:\n        return N - 1\n\n"}
{"task_id": "MBPP/90", "completion": "\n    list1 = list1.split()\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] == n[i+1]:\n            return False\n    return True\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n\n"}
{"task_id": "MBPP/95", "completion": "\n    if not lst:\n        return 0\n\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            min_length = min(min_length, len(sublist))\n\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div += 1\n    return div\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"}
{"task_id": "MBPP/98", "completion": "\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"}
{"task_id": "MBPP/99", "completion": "\n    return bin(n).replace(\"0b\", \"\")\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return int(num) + 1\n    if num == num[::-1]:\n        return int(num) + 2\n    if length % 2 == 0:\n        mid = length // 2\n        left = num[:mid]\n        right = num[mid:]\n        if left < right[::-1]:\n            return int(num) + 10 ** (length - 1)\n        else:\n            return int(left + right[::-1])\n    else:\n        mid = length // 2\n        left = num[:mid]\n        right = num[mid+1:]\n        if left < right[::-1]:\n            return int(num) + 10 ** (length - 1)\n        else:\n            return int(left + right[::-1])\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k < 1 or k > n:\n        return None\n    return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/103", "completion": "\n    if m == 0:\n        return 1\n    else:\n        return (n + m - 1) * eulerian_num(n, m - 1) // m\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: sorted(x))\n"}
{"task_id": "MBPP/105", "completion": "\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if is_Hexadecimal(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    # Create a heap queue\n    heap = []\n    # Initialize the heap queue with the first element of each list\n    for i, lst in enumerate([num1, num2, num3]):\n        if lst:\n            heapq.heappush(heap, (lst[0], i, 0))\n    # Merge the lists\n    merged_list = []\n    while heap:\n        # Pop the smallest element from the heap queue\n        val, lst_idx, elem_idx = heapq.heappop(heap)\n        # Append the element to the merged list\n        merged_list.append(val)\n        # If there are more elements in the list, push the next element to the heap queue\n        if elem_idx + 1 < len(num1[lst_idx]):\n            heapq.heappush(heap, (num1[lst_idx][elem_idx + 1], lst_idx, elem_idx + 1))\n    return merged_list\n\n"}
{"task_id": "MBPP/109", "completion": "\n    # Initialize count to 0\n    count = 0\n\n    # Iterate through the string\n    for i in range(n):\n        # If the current character is '1', increment count by 2\n        if s[i] == '1':\n            count += 2\n\n    # If count is odd, return count\n    if count % 2 == 1:\n        return count\n\n    # Otherwise, return count - 1\n    return count - 1\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_ranges = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_ranges.append(i)\n    return missing_ranges\n"}
{"task_id": "MBPP/111", "completion": "\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n"}
{"task_id": "MBPP/112", "completion": "\n    return 2 * (3.14 * diameter + height)\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = Counter(test_list)\n    return freq_dict\n\n\ntest_list = [(1, 2), (1, 2), (2, 3), (2, 3), (2, 3), (3, 4), (3, 4), (3, 4), (3, 4)]"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n"}
{"task_id": "MBPP/117", "completion": "\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        elif (mid % 2 == 0 and arr[mid] == arr[mid-1]) or (mid % 2 == 1 and arr[mid] == arr[mid+1]):\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return max(list1[-1]*list1[-2], list1[0]*list1[1])\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/122", "completion": "\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n       "}
{"task_id": "MBPP/123", "completion": "\n    # Create a list to store the sum of amicable numbers\n    amicable_sum = 0\n\n    # Iterate through all numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Calculate the sum of proper divisors of the current number\n        sum_divisors = sum_proper_divisors(num)\n\n        # Check if the sum of divisors is a proper divisor of the current number\n        if sum_proper_divisors(sum_divisors) == num and sum_divisors != num:\n            # Add the current number to the sum of amicable numbers\n            amicable_sum += num\n\n    return amicable_sum\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a) - cmath.phase(b)\n\n"}
{"task_id": "MBPP/125", "completion": "\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        max_diff = max(max_diff, abs(count_0 - count_1))\n\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(abs(y)):\n        result += x\n    if y < 0:\n        result = -result\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n    if not isinstance(my_matrix, list):\n        raise TypeError(\"my_matrix must be a list\")\n    if not all(isinstance(i, list) for i in my_matrix):\n        raise TypeError(\"my_matrix must be a list of lists\")\n    if not all(isinstance(i, int) for i in [j for i in my_matrix for j in i]):\n        raise TypeError(\"my_matrix must be a list of lists of integers\")\n    if not all(len(i) == len(my_matrix[0]) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i) == len(my_matrix) for i in my_matrix):\n        raise ValueError(\"my_matrix must be a n x n matrix\")\n    if not all(len(i)"}
{"task_id": "MBPP/130", "completion": "\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = max(frequency.values())\n    max_items = [num for num, freq in frequency.items() if freq == max_freq]\n    return max_items\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    if p == 0:\n        return arr[-1] % 2 == 0\n    else:\n        return check_last(arr, n, p-1)\n"}
{"task_id": "MBPP/135", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        return units * 0.50\n    elif units <= 150:\n        return 25 + (units - 50) * 0.75\n    elif units <= 250:\n        return 100 + (units - 150) * 1.20\n    else:\n        return 220 + (units - 250) * 1.50\n\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\n"}
{"task_id": "MBPP/138", "completion": "\n    if n < 0:\n        return False\n    while n > 0:\n        if n % 2 != 0:\n            n = n - 1\n        else:\n            n = n // 2\n    return n == 0\n\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * math.pi * r\n"}
{"task_id": "MBPP/140", "completion": "\n    return [i for i in test_list if test_list.count(i) == 1]\n"}
{"task_id": "MBPP/141", "completion": "\n\n        Flip the first k elements of the array\n        \"\"\"\n        arr[:k] = arr[:k][::-1]\n\n    n = len(nums)\n    for i in range(n, 1, -2):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            flip(nums, max_index + 1)\n            flip(nums, i)\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    return [i for i in Input if isinstance(i, list)]\n"}
{"task_id": "MBPP/144", "completion": "\n    # Sort the array\n    arr.sort()\n    # Initialize the sum\n    sum = 0\n    # Iterate over the array\n    for i in range(n):\n        # Add the absolute difference between the current element and the next element\n        sum += abs(arr[i] - arr[i+1])\n    # Return the sum\n    return sum\n"}
{"task_id": "MBPP/145", "completion": "\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_diff = max(max_diff, abs(arr[i] - arr[j]))\n    return max_diff\n\n"}
{"task_id": "MBPP/146", "completion": "\n    sum = 0\n    for i in str1:\n        sum += ord(i)\n    return sum\n\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-2, -1, -1):\n        for j in range(n-i-1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(x))\n"}
{"task_id": "MBPP/149", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"}
{"task_id": "MBPP/150", "completion": "\n    if a == b:\n        return True\n    if a > b:\n        return False\n    if c == 0:\n        return False\n    if c == 1:\n        return False\n    if c == 2:\n        return False\n    if c == 3:\n        return False\n    if c == 4:\n        return False\n    if c == 5:\n        return False\n    if c == 6:\n        return False\n    if c == 7:\n        return False\n    if c == 8:\n        return False\n    if c == 9:\n        return False\n    if c == 10:\n        return False\n    if c == 11:\n        return False\n    if c == 12:\n        return False\n    if c == 13:\n        return False\n    if c == 14:\n        return False\n    if c == 15:\n        return False\n    if c == 16:\n        return False\n    if c == 17:\n        return False\n    if c == 18:\n        return False\n    if c == 19:\n        return False\n    if c == 20:\n        return False\n    if c == 21:\n        return False\n    if c == 22:\n        return False\n    if c == 23:\n        return False\n    if c == 24:\n        return False\n    if c == 25:\n        return False\n    if c == 26:\n        return False\n    if c == 27:\n        return False\n    if c == 28:\n        return False\n    if c == 29:\n        return False\n    if c == 30:\n        return False\n    if c == 31:\n        return False\n    if c == 32:\n        return False\n    if c == 33:\n        return False\n    if c == 34:\n        return False\n    if c == 35:\n        return False\n    if c == 36:\n        return False\n    if c == 37:\n        return False\n    if c == 38:\n        return False\n    if c == 39:\n        return False\n    if c == 40:\n        return False\n    if c == 41:\n        return False\n    if c == 42:\n        return False\n    if c == 43:\n        return False\n    if c == 44:\n       "}
{"task_id": "MBPP/151", "completion": "\n    while q != 0:\n        p, q = q, p % q\n    return p\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0 or len(x) == 1: return x else: mid = len(x) // 2 a = merge_sort(x[:mid]) b = merge_sort(x[mid:]) return merge(a, b)\n"}
{"task_id": "MBPP/153", "completion": "\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append(nums[i][j])\n    return result\n"}
{"task_id": "MBPP/155", "completion": "\n    # Convert the number to binary\n    binary = bin(n)[2:]\n\n    # Pad the binary string with leading zeros to make it 32 bits long\n    binary = binary.zfill(32)\n\n    # Toggle all even bits\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary[1::2])\n\n    # Convert the toggled binary string back to an integer\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(group))) for k, group in groupby(list1)]\n\n"}
{"task_id": "MBPP/158", "completion": "\n    # Initialize the count of operations\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # Calculate the difference between the current element and k\n        diff = abs(arr[i] - k)\n\n        # Add the difference to the count of operations\n        count += diff\n\n    # Return the count of operations\n    return count\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in [12, 1, 2]:\n        return \"Winter\"\n    elif month in [3, 4, 5]:\n        return \"Spring\"\n    elif month in [6, 7, 8]:\n        return \"Summer\"\n    elif month in [9, 10, 11]:\n        return \"Autumn\"\n    else:\n        return \"Invalid month\"\n"}
{"task_id": "MBPP/160", "completion": "\n    if a == 0 and b == 0:\n        if n == 0:\n            return [0, 0]\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return [0, n // b]\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return [n // a, 0]\n        else:\n            return None\n    else:\n        for x in range(n // a + 1):\n            for y in range(n // b + 1):\n                if a * x + b * y == n:\n                    return [x, y]\n        return None\n"}
{"task_id": "MBPP/161", "completion": "\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"}
{"task_id": "MBPP/162", "completion": "\n    if n < 0:\n        return \"Input should be a positive integer\"\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l) / 2\n\n"}
{"task_id": "MBPP/164", "completion": "\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum1 += i\n    for i in range(1, n):\n        if n % i == 0:\n            sum2 += i\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/165", "completion": "\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "MBPP/167", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1).bit_length()"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n - 1) + get_pell(n - 2)\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    return s.count('std')\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^a-zA-Z]', '', text)\n\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    for char in str1:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top != '(':\n                return False\n            if char == '}' and top != '{':\n                return False\n            if char == ']' and top != '[':\n                return False\n    return not stack\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Initialize the answer as None\n    answer = None\n    \n    # Iterate over all pairs of numbers in the range [L, R]\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            # Calculate the lcm of the two numbers\n            lcm = (i * j) // gcd(i, j)\n            \n            # Check if the lcm lies within the given range\n            if L <= lcm <= R:\n                # Update the answer if a valid pair is found\n                answer = (i, j)\n                break\n        if answer is not None:\n            break\n    \n    # Return the answer\n    return answer\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 10:\n        return False\n    digits = [int(d) for d in str(x)]\n    sum_digits = sum(digits)\n    while sum_digits < x:\n        digits = [int(d) for d in str(sum_digits)]\n        sum_digits = sum(digits)\n    return sum_digits == x"}
{"task_id": "MBPP/180", "completion": "\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n    return dist\n\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]:\n        i += 1\n    return str1[:i]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    upperc = re.findall(r'[A-Z]', string)\n    special = re.findall(r'[^a-zA-Z0-9\\s]', string)\n    numeric = re.findall(r'\\d', string)\n    return upperc, special, numeric\n\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the focus\n    focus = (1/(4*a)) * (b**2 - 4*a*c)\n    return focus\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return 0\n\n    if X[m-1] == Y[n-1]:\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1)\n    else:\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    for i in range(1, int(n ** 0.5) + 1):\n        if n == i * i * (int(n / (i * i)) ** 2):\n            return True\n    return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # Initialize the array with 0\n    arr = [0] * n\n\n    # Mark the elements which are in the range from 1 to n\n    for i in range(n):\n        if 1 <= nums[i] <= n:\n            arr[nums[i] - 1] = 1\n\n    # Return the first index which has 0 value\n    for i in range(n):\n        if arr[i] == 0:\n            return i + 1\n\n    # If all elements are present, return n+1\n    return n + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x % 1 == 0 and y % 1 == 0:\n                count += 1\n    return count"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['April', 'June', 'September', 'November']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    if len(str) < 6:\n        return False\n    has_letter = False\n    has_digit = False\n    for char in str:\n        if char.isalpha():\n            has_letter = True\n        elif char.isdigit():\n            has_digit = True\n    return has_letter and has_digit\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal = 0\n    base = 1\n    while(n):\n        last_digit = n % 10\n        n = n // 10\n        decimal += last_digit * base\n        base = base * 8\n    return decimal\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n"}
{"task_id": "MBPP/197", "completion": "\n    return test_tup1 ** test_tup2\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b) / 2\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b))\n\n    # Calculate the height of the triangle\n    height = 2 * area / a\n\n    # Calculate the length of the third side of the triangle\n    c = math.sqrt(a**2 - height**2)\n\n    # Return the area of the triangle\n    return area\n\n"}
{"task_id": "MBPP/199", "completion": "\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    return [i for i, value in enumerate(list1) if value == max_value]\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] == chkList(lst[1:])\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[1::2]\n"}
{"task_id": "MBPP/203", "completion": "\n    xor = n1 ^ n2\n    count = 0\n    while xor:\n        count += xor & 1\n        xor >>= 1\n    return count\n"}
{"task_id": "MBPP/204", "completion": "\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversion_count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_count += 1\n    return inversion_count\n"}
{"task_id": "MBPP/206", "completion": "\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    # Create and initialize DP table\n    dp = [[0 for x in range(n+1)] for x in range(n+1)]\n    res = 0  # Result is going to be stored in res\n    # Fill dp[][] in bottom up manner.\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            # If characters match and indexes are not same\n            if (str[i-1] == str[j-1] and i != j):\n                dp[i][j] = dp[i-1][j-1] + 1\n                # Update result\n                res = max(res, dp[i][j])\n            else:\n                # Take maximum of two subsequences\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return res\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(r'^[a0]*$')\n    return bool(pattern.match(string))\n\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(n):\n        if (i & (1 << 0)) and (i & (1 << n)):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum([i**4 for i in range(1, n+1)])\n\n"}
{"task_id": "MBPP/213", "completion": "\n    return test_tup1 + test_tup2\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * 180 / math.pi\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i]] * alist[i+1])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return all(item in list2 for sublist in list1 for item in sublist)\n"}
{"task_id": "MBPP/217", "completion": "\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Iterate through the string\n    for char in str:\n        # If the character is already in the dictionary, return it\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary\n        char_count[char] = 1\n    # If no repeated character is found, return None\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    if A == B:\n        return 0\n    if A < B:\n        return min_Operations(B, A)\n    if B == 0:\n        return A - 1\n    if A % B == 0:\n        return A // B - 1\n    return min_Operations(B, A % B) + A // B - 1\n\n"}
{"task_id": "MBPP/219", "completion": "\n    # Sort the tuple in descending order\n    sorted_tup = sorted(test_tup, reverse=True)\n    # Extract the maximum element\n    max_element = sorted_tup[0]\n    # Extract the k-th element\n    kth_element = sorted_tup[K-1]\n    return max_element, kth_element\n"}
{"task_id": "MBPP/220", "completion": "\n    # Replace spaces, commas and dots with a colon\n    text = re.sub(r'[ ,\\.]', ':', text, count=n)\n    return text\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    # check if x is present in the array\n    if x not in arr:\n        return False\n\n    # find the index of x in the array\n    index = arr.index(x)\n\n    # check if x is a majority element\n    if index + n // 2 < len(arr) and arr[index + n // 2] == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid - 1] > arr[mid]:\n        return arr[mid]\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # create a mask with all bits set in the given range\n    mask = ((1 << (r - l + 1)) - 1) << l\n\n    # check if the given number has all bits set in the given range\n    if (n & mask) == mask:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/229", "completion": "\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(i, n):\n                if arr[j] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return arr\n\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    return 2 * 3.14 * r * h\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    mask = 0xAAAAAAAA\n    return n | mask\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Write your code here\n    if N < 3 or K < 1:\n        return 0\n    return (N * (N - 1) * (N - 2) // 6) * K\n\n"}
{"task_id": "MBPP/237", "completion": "\n    counter = Counter(test_list)\n    max_occurences = max(counter.values())\n    result = [k for k, v in counter.items() if v == max_occurences]\n    return result\n\n\ntest_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]"}
{"task_id": "MBPP/238", "completion": "\n    return sum(range(len(str)))\n"}
{"task_id": "MBPP/239", "completion": "\n    # Initialize a list to store the number of sequences for each length\n    sequences = [0] * (n + 1)\n    sequences[0] = 1  # There is one sequence of length 0 (the empty sequence)\n\n    # Iterate over each length from 1 to n\n    for i in range(1, n + 1):\n        # Iterate over each possible value of the previous element\n        for j in range(1, m + 1):\n            # If the previous element is less than or equal to half of the current length, add the number of sequences for the previous length to the current length\n            if j <= i // 2:\n                sequences[i] += sequences[i - j]\n\n    # Return the number of sequences for length n\n    return sequences[n]\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(o)] for _ in range(n) for _ in range(m)]\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: x[0])\n"}
{"task_id": "MBPP/244", "completion": "\n    if N < 0:\n        return None\n    if N == 0:\n        return 1\n    if N == 1:\n        return 4\n    if N == 2:\n        return 4\n    if N == 3:\n        return 9\n    if N == 4:\n        return 16\n    if N == 5:\n        return 16\n    if N == 6:\n        return 16\n    if N == 7:\n        return 25\n    if N == 8:\n        return 25\n    if N == 9:\n        return 25\n    if N == 10:\n        return 25\n    if N == 11:\n        return 36\n    if N == 12:\n        return 36\n    if N == 13:\n        return 36\n    if N == 14:\n        return 36\n    if N == 15:\n        return 36\n    if N == 16:\n        return 36\n    if N == 17:\n        return 49\n    if N == 18:\n        return 49\n    if N == 19:\n        return 49\n    if N == 20:\n        return 49\n    if N == 21:\n        return 49\n    if N == 22:\n        return 49\n    if N == 23:\n        return 49\n    if N == 24:\n        return 49\n    if N == 25:\n        return 49\n    if N == 26:\n        return 49\n    if N == 27:\n        return 49\n    if N == 28:\n        return 49\n    if N == 29:\n        return 49\n    if N == 30:\n        return 49\n    if N == 31:\n        return 49\n    if N == 32:\n        return 49\n    if N == 33:\n        return 49\n    if N == 34:\n        return 49\n    if N == 35:\n        return 49\n    if N == 36:\n        return 49\n    if N == 37:\n        return 49\n    if N == 38:\n        return 49\n    if N == 39:\n        return 49\n    if N == 40:\n        return 49\n    if N == 41:\n        return"}
{"task_id": "MBPP/245", "completion": "\n    # Initialize arrays to store maximum sum of increasing and decreasing subsequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Initialize maximum sum of bi-tonic sub-sequence\n    max_sum = 0\n\n    # Compute maximum sum of increasing subsequence\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Compute maximum sum of decreasing subsequence\n    for i in range(n-1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Compute maximum sum of bi-tonic sub-sequence\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    guess = number / 2.0\n    while True:\n        better_guess = (guess + number / guess) / 2.0\n        if abs(guess - better_guess) < 0.000001:\n            return better_guess\n        guess = better_guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]"}
{"task_id": "MBPP/248", "completion": "\n    return sum(1.0/i for i in range(1, n+1))\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums2, array_nums1))\n"}
{"task_id": "MBPP/250", "completion": "\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/251", "completion": "\n    return [element, *list]\n"}
{"task_id": "MBPP/252", "completion": "\n    return [cmath.polar(number) for number in numbers]\n\n\nnumbers = [1+2j, 3+4j, 5+6j]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text)\n\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return sum(primes)\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return tuple(max(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n"}
{"task_id": "MBPP/260", "completion": "\n    pass\n"}
{"task_id": "MBPP/261", "completion": "\n    # Write your code here\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age * 7\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l**2\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n"}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return None\n    count = 0\n    num = 1\n    while count < n:\n        if is_star_num(num):\n            count += 1\n        num += 1\n    return num - 1\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n"}
{"task_id": "MBPP/272", "completion": "\n    rear_list = []\n    for record in test_list:\n        rear_list.append(record[-1])\n    return rear_list\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize the binomial coefficient\n    binomial_coeff = 1\n\n    # Initialize the sum\n    sum_even_index = 0\n\n    # Loop through the range of n\n    for i in range(n):\n        # Calculate the binomial coefficient\n        binomial_coeff = binomial_coeff * (n - i) // (i + 1)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the binomial coefficient to the sum\n            sum_even_index += binomial_coeff\n\n    # Return the sum\n    return sum_even_index\n\n"}
{"task_id": "MBPP/275", "completion": "\n    # Your code goes here\n    return (a.index(n) + m) % len(a)\n\n"}
{"task_id": "MBPP/276", "completion": "\n    return 3.14 * r * r * h\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n"}
{"task_id": "MBPP/278", "completion": "\n    return len(test_tup) - test_tup.index(1) - 1\n"}
{"task_id": "MBPP/279", "completion": "\n    return n * (5 * n - 3) // 2\n\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    if n < 0:\n        return False\n    freq = [0] * 10\n    while n > 0:\n        digit = n % 10\n        freq[digit] += 1\n        n //= 10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    window_size = n\n\n    # Calculate the sum of the first window\n    for i in range(window_size):\n        current_sum += a[i]\n\n    # Update the maximum sum if necessary\n    max_sum = max(max_sum, current_sum)\n\n    # Slide the window across the array\n    for i in range(window_size, len(a) + k - 1):\n        # Remove the element that is sliding out of the window\n        current_sum -= a[i - window_size]\n\n        # Add the new element that is sliding into the window\n        current_sum += a[i % n]\n\n        # Update the maximum sum if necessary\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n"}
{"task_id": "MBPP/288", "completion": "\n    # Initialize the result\n    result = 0\n\n    # Traverse the array\n    for i in range(N):\n        # If the element is equal to its modular inverse\n        if arr[i] == modular_inverse(arr[i], P):\n            result += 1\n\n    # Return the result\n    return result\n\n"}
{"task_id": "MBPP/289", "completion": "\n    # Initialize the number of odd days\n    odd_days = 0\n\n    # Check if the year is a leap year\n    if N % 4 == 0:\n        odd_days += 1\n        if N % 100 == 0:\n            odd_days -= 1\n            if N % 400 == 0:\n                odd_days += 1\n\n    # Return the number of odd days\n    return odd_days\n\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = max(len(lst) for lst in list1)\n    return [lst for lst in list1 if len(lst) == max_len]\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # dp[i] will store the number of ways to paint the fence with i posts\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        # If the last two posts have the same color, then the current post can have any of the remaining k-1 colors\n        # If the last two posts have different colors, then the current post can have any of the k colors\n        dp[i] = (k - 1) * dp[i - 1] + k * dp[i - 2]\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    return n / m\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n"}
{"task_id": "MBPP/295", "completion": "\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/296", "completion": "\n    # Write your code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    result = []\n    for sublist in l1:\n        if sublist in l2:\n            result.append(sublist)\n    return result\n"}
{"task_id": "MBPP/299", "completion": "\n    max_aggregate = 0\n    for tu in stdata:\n        max_aggregate += max(tu)\n    return max_aggregate\n\n"}
{"task_id": "MBPP/300", "completion": "\n    # Initialize a 2D array to store the count of binary sequences\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    # Base case: There is only one binary sequence of length 0\n    dp[0][0] = 1\n\n    # Fill the dp array\n    for i in range(1, n+1):\n        for j in range(i+1):\n            # If the sum of the first i bits is equal to the sum of the last i bits\n            if j == i-j:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1] + 2*dp[i-1][j]\n\n    # Return the count of binary sequences of length 2n\n    return dp[n][n]\n"}
{"task_id": "MBPP/301", "completion": "\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return 0\n    msb = 0\n    while n:\n        n >>= 1\n        msb += 1\n    return msb\n"}
{"task_id": "MBPP/303", "completion": "\n    # count the number of inversions of type 1\n    count1 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count1 += 1\n\n    # count the number of inversions of type 2\n    count2 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] < a[j]:\n                count2 += 1\n\n    # check if the counts are equal\n    if count1 == count2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Find the number of rotations\n    num_rotations = rotations % len(arr)\n    \n    # Find the starting index after rotations\n    start_index = (index + num_rotations) % len(arr)\n    \n    # Find the element at the starting index\n    element = arr[start_index]\n    \n    return element\n"}
{"task_id": "MBPP/305", "completion": "\n    pattern = re.compile(r'^p')\n    return [word for word in words if pattern.match(word)]\n\n"}
{"task_id": "MBPP/306", "completion": "\n    # Base case: If the array is empty or the index is out of bounds\n    if n == 0 or index >= n:\n        return 0\n\n    # Initialize the maximum sum\n    max_sum = 0\n\n    # Iterate through the array from the current index to the end\n    for i in range(index, n):\n        # If the current element is greater than the previous element, update the maximum sum\n        if a[i] > a[index]:\n            max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k))\n\n    # Return the maximum sum\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[m:n]\n\n"}
{"task_id": "MBPP/308", "completion": "\n    # Create a set to store the unique products\n    products = set()\n\n    # Iterate through the first list\n    for num1 in nums1:\n        # Iterate through the second list\n        for num2 in nums2:\n            # Calculate the product\n            product = num1 * num2\n            # Add the product to the set\n            products.add(product)\n\n    # Convert the set to a list\n    products_list = list(products)\n\n    # Sort the list in descending order\n    products_list.sort(reverse=True)\n\n    # Return the first N elements of the list\n    return products_list[:N]\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    return n | (n + 1)\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n\n"}
{"task_id": "MBPP/314", "completion": "\n    # Initialize variables\n    max_sum = float('-inf')\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    max_sum = dp[0][0]\n\n    # Fill the dp table\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + grid[0][i]\n        max_sum = max(max_sum, dp[0][i])\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n            max_sum = max(max_sum, dp[i][j])\n\n    return max_sum\n"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split()\n    max_len = 0\n    max_len_word = \"\"\n    for word in str:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_len_word = word\n    return max_len_word\n\n"}
{"task_id": "MBPP/316", "completion": "\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == len(A) - 1 or A[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    # Create a list to store the encoded values\n    encoded_list = []\n\n    # Iterate over the list using groupby\n    for key, group in groupby(alist):\n        # Get the length of the group\n        length = len(list(group))\n\n        # Append the key and length to the encoded list\n        encoded_list.append((key, length))\n\n    return encoded_list\n\n"}
{"task_id": "MBPP/318", "completion": "\n    # Sort the sides in descending order\n    sides = sorted(s, reverse=True)\n    \n    # Calculate the maximum volume\n    max_volume = sides[0] * sides[1] * sides[2]\n    \n    return max_volume\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n"}
{"task_id": "MBPP/320", "completion": "\n    return n*(n+1)*(2*n+1)//6 - (n*(n+1)//2)**2\n"}
{"task_id": "MBPP/321", "completion": "\n    if s == 0:\n        return 0\n    else:\n        return s * find_demlo(s - 1)\n"}
{"task_id": "MBPP/322", "completion": "\n    min_value = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_value]\n"}
{"task_id": "MBPP/323", "completion": "\n    if cur == n:\n        return\n    if out_of_place == 0:\n        right_rotate(arr, n, 1, cur+1)\n    else:\n        if arr[cur] < 0:\n            right_rotate(arr, n, 1, cur+1)\n        else:\n            arr[cur], arr[cur-1] = arr[cur-1], arr[cur]\n            right_rotate(arr, n, 0, cur+1)\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 == 0)\n"}
{"task_id": "MBPP/325", "completion": "\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = i\n        for j in range(1, int(i ** 0.5) + 1):\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    word_dict = defaultdict(int)\n    for word in test_list:\n        word_dict[word] += 1\n    return max(word_dict, key=word_dict.get)\n\n\ntest_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\"]"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or x == z:\n        print(\"Triangle is isosceles\")\n    else:\n        print(\"Triangle is not isosceles\")\n\n"}
{"task_id": "MBPP/328", "completion": "\n    if m > n:\n        m, n = n, m\n    if m == 0:\n        return list1\n    if m > len(list1):\n        m = m % len(list1)\n    if n > len(list1):\n        n = n % len(list1)\n    if m > n:\n        return list1[n:] + list1[:n]\n    else:\n        return list1[m:] + list1[:m]\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,4}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n\ntext = \"This is a test string to find all three, four characters long words given string by using regex.\""}
{"task_id": "MBPP/331", "completion": "\n    return bin(n).count('0')\n"}
{"task_id": "MBPP/332", "completion": "\n    dict1 = {}\n    for n in str1:\n        keys = dict1.keys()\n        if n in keys:\n            dict1[n] += 1\n        else:\n            dict1[n] = 1\n    return dict1\n"}
{"task_id": "MBPP/333", "completion": "\n    l = len(sub_li)\n    for i in range(0, l):\n        for j in range(0, l-i-1):\n            if (sub_li[j][1] > sub_li[j + 1][1]):\n                tempo = sub_li[j]\n                sub_li[j]= sub_li[j + 1]\n                sub_li[j + 1]= tempo\n    return sub_li"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return (n * (2 * a + (n - 1) * d)) // 2\n\n"}
{"task_id": "MBPP/336", "completion": "\n    monthname1 = monthname1.lower()\n    if monthname1 in ['february', 'april', 'june', 'september', 'november']:\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b(?=[.,;!?]?$)'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    # Write your code here\n    if x > y:\n        x, y = y, x\n    max_divisor = 0\n    for i in range(x, y+1):\n        for j in range(2, i+1):\n            if i % j == 0:\n                max_divisor = max(max_divisor, j)\n    return max_divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    if len(lst) < 3:\n        return \"List must contain at least three numbers\"\n    else:\n        lst = [x for x in lst if x > 0]\n        lst.sort()\n        return sum(lst[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n"}
{"task_id": "MBPP/342", "completion": "\n    min_range = float('inf')\n    min_range_list = []\n    min_range_start = 0\n    min_range_end = 0\n    heap = []\n    for i in range(len(list)):\n        heappush(heap, Node(list[i][0], i, 0))\n    while len(heap) == len(list):\n        node = heappop(heap)\n        if min_range > node.value - heap[0].value:\n            min_range = node.value - heap[0].value\n            min_range_start = heap[0].value\n            min_range_end = node.value\n            min_range_list = [node.value]\n        elif min_range == node.value - heap[0].value:\n            min_range_list.append(node.value)\n        if node.index + 1 < len(list[node.list_num]):\n            heappush(heap, Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1))\n    return min_range_start, min_range_end, min_range_list\n\n"}
{"task_id": "MBPP/343", "completion": "\n    letters = 0\n    digits = 0\n    for i in s:\n        if i.isalpha():\n            letters += 1\n        elif i.isdigit():\n            digits += 1\n    return letters, digits\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m+1):\n        if i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1] - nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    return zigzag(n - 1, k - 1) + zigzag(n - 1, k)\n"}
{"task_id": "MBPP/347", "completion": "\n    return (m * n) // 4\n"}
{"task_id": "MBPP/348", "completion": "\n    # Initialize the binomial coefficient matrix\n    C = [[0 for _ in range(r+1)] for _ in range(n+1)]\n    C[0][0] = 1\n\n    # Fill the binomial coefficient matrix\n    for i in range(1, n+1):\n        for j in range(1, r+1):\n            C[i][j] = C[i-1][j-1] + C[i-1][j]\n\n    return C[n][r]\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if len(s) == 3:\n        return 3\n    if len(s) == 4:\n        return 4\n    if len(s) == 5:\n        return 5\n    if len(s) == 6:\n        return 6\n    if len(s) == 7:\n        return 7\n    if len(s) == 8:\n        return 8\n    if len(s) == 9:\n        return 9\n    if len(s) == 10:\n        return 10\n    if len(s) == 11:\n        return 11\n    if len(s) == 12:\n        return 12\n    if len(s) == 13:\n        return 13\n    if len(s) == 14:\n        return 14\n    if len(s) == 15:\n        return 15\n    if len(s) == 16:\n        return 16\n    if len(s) == 17:\n        return 17\n    if len(s) == 18:\n        return 18\n    if len(s) == 19:\n        return 19\n    if len(s) == 20:\n        return 20\n    if len(s) == 21:\n        return 21\n    if len(s) == 22:\n        return 22\n    if len(s) == 23:\n        return 23\n    if len(s) == 24:\n        return 24\n    if len(s) == 25:\n        return 25\n    if len(s) == 26:\n        return 26\n    if len(s) == 27:\n        return 27\n    if len(s) == 28:\n        return 28\n    if len(s) == 29:\n        return 29\n    if len(s) == 30:\n        return 30\n    if len(s) == 31:\n        return 31\n    if len(s) == 32:\n        return 32\n    if len(s) == 33:\n        return 33\n    if len(s) == 34:\n        return 34\n    if len(s) == 35:\n        return 35\n    if len(s) == 36:\n        return 36\n    if len(s) == 37"}
{"task_id": "MBPP/351", "completion": "\n    # Create a dictionary to store the count of each element\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    # Find the first element occurring k times\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    # If no element occurs k times, return -1\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Create an empty set\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in str:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters were unique, so return True\n    return True\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # Check if the radius is valid\n    if radius <= 0:\n        return 0\n\n    # Initialize the count of rectangles\n    count = 0\n\n    # Iterate over all possible pairs of x and y coordinates\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            # Check if the point (x, y) is inside the circle\n            if x**2 + y**2 <= radius**2:\n                # Increment the count of rectangles\n                count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n"}
{"task_id": "MBPP/357", "completion": "\n    max_value = test_list[0][0]\n    for record in test_list:\n        if record[0] > max_value:\n            max_value = record[0]\n    return max_value\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n"}
{"task_id": "MBPP/359", "completion": "\n    if a == 0:\n        return False\n    else:\n        delta = b**2 - 4*a*c\n        if delta < 0:\n            return False\n        else:\n            x1 = (-b + delta**0.5) / (2*a)\n            x2 = (-b - delta**0.5) / (2*a)\n            if x1 == x2:\n                return True\n            else:\n                return False"}
{"task_id": "MBPP/360", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + 1\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n"}
{"task_id": "MBPP/362", "completion": "\n    # Create a dictionary to store the count of each item\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the item with maximum occurrences\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item\n"}
{"task_id": "MBPP/363", "completion": "\n    return [i + K for i in test_list]\n"}
{"task_id": "MBPP/364", "completion": "\n    count = 0\n    for i in range(len(ch)):\n        if i % 2 == 0:\n            if ch[i] != '0':\n                count += 1\n        else:\n            if ch[i] != '1':\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) <= 1 and is_tree_balanced(root.left) and is_tree_balanced(root.right):\n        return True\n\n    return False\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return test_tup * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x))\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[left_element] != left_element:\n        return left_element\n    if A[right_element] != right_element:\n        return right_element\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element, right_element)\n    else:\n        return smallest_missing(A, left_element, mid_element)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    result = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            result.append(char + p)\n    return result\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = {}\n    for element in test_tup:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Create a new list to store the result\n    result = []\n    for element in test_tup:\n        if count_dict[element] > 1:\n            result.append('dupl')\n        else:\n            result.append(element)\n\n    return tuple(result)\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) == 0:\n        return test_list\n    else:\n        return [test_list[-1]] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0 for i in range(colnum)] for j in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n"}
{"task_id": "MBPP/382", "completion": "\n    if len(A) == 0:\n        return 0\n\n    low, high = 0, len(A) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n"}
{"task_id": "MBPP/383", "completion": "\n    return n ^ 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/384", "completion": "\n    # find the smallest value in the array\n    smallest = min(arr)\n    # count the frequency of the smallest value in the array\n    frequency = arr.count(smallest)\n    return frequency\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)\n"}
{"task_id": "MBPP/386", "completion": "\n    count = 0\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                count += 1\n    return count + len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    if n < 1:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + i for i in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n"}
{"task_id": "MBPP/392", "completion": "\n    # Base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n\n    # Recursive case\n    return max((n/2) + get_max_sum(n/2), (n/3) + get_max_sum(n/3), (n/4) + get_max_sum(n/4))\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=len)\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/395", "completion": "\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string again to find the first character with count 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no nonrepeating character is found, return None\n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(map(lambda x: x[0] ^ x[1], zip(test_tup1, test_tup2)))\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tu in test_list:\n        if tu in freq_dict:\n            freq_dict[tu] += 1\n        else:\n            freq_dict[tu] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    # Your code goes here\n    return tuple(tuple(sum(x) for x in zip(*t)) for t in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    num = den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    parity = 0\n    while x:\n        parity ^= x & 1\n        x >>= 1\n    return parity\n"}
{"task_id": "MBPP/407", "completion": "\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Find the first digit from the right that is smaller than the digit next to it\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number is the largest possible permutation\n        return -1\n    \n    # Find the smallest digit on the right of the found digit that is larger than it\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits to the right of the found digit\n    digits = digits[:i + 1] + digits[i + 1:][::-1]\n    \n    # Convert the list of digits back to a number\n    return int(''.join(map(str, digits)))\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n            else:\n                if nums1[i] + nums2[j] < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (nums1[i] + nums2[j], i, j))\n                else:\n                    break\n\n    result = []\n    while min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n    return result\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) < 2:\n        return None\n    list1.sort()\n    return list1[0] * list1[1]\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r\"(?<!^)(?=[A-Z])\", \"_\", word).title().replace(\"_\", \"\")\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    if n < len(list1):\n        return list1[n]\n    else:\n        return None\n"}
{"task_id": "MBPP/414", "completion": "\n    return any(item in list2 for item in list1)\n"}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return None\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for x in arr:\n        if x > max1:\n            max2 = max1\n            max1 = x\n        elif x > max2:\n            max2 = x\n        if x < min1:\n            min2 = min1\n            min1 = x\n        elif x < min2:\n            min2 = x\n    return max(max1 * max2, min1 * min2)\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = max(n, breakSum(n - 1) + breakSum(n - 3) + breakSum(n - 4))\n        return memo[n]\n\n"}
{"task_id": "MBPP/417", "completion": "\n    return [x[0] for x in Input if len(set(x)) == 1]\n"}
{"task_id": "MBPP/418", "completion": "\n    max_len = 0\n    max_sublist = []\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_len:\n                max_len = len(sublist)\n                max_sublist = sublist\n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    return sum(round(i) for i in list1) * len(list1)\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum\n"}
{"task_id": "MBPP/421", "completion": "\n    delim = ','\n    return delim.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"}
{"task_id": "MBPP/423", "completion": "\n    # Initialize dp array\n    dp = [[0] * n for _ in range(m)]\n\n    # Initialize max gold\n    max_gold = 0\n\n    # Iterate over each cell in the gold mine\n    for i in range(m):\n        for j in range(n):\n            # Calculate the maximum gold that can be collected starting from cell (i, j)\n            dp[i][j] = gold[i][j] + max(\n                (dp[i-1][j] if i > 0 else 0),\n                (dp[i][j-1] if j > 0 else 0),\n                (dp[i+1][j] if i < m-1 else 0)\n            )\n\n            # Update the maximum gold\n            max_gold = max(max_gold, dp[i][j])\n\n    return max_gold\n"}
{"task_id": "MBPP/424", "completion": "\n    rear = []\n    for i in test_tuple:\n        rear.append(i[-1])\n    return tuple(rear)\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/427", "completion": "\n    # Define the regex pattern\n    pattern = r\"(\\d{2})(\\d{2})(\\d{2})\"\n\n    # Define the replacement string\n    replacement = r\"\\3-\\2-\\1\"\n\n    # Use the re.sub() function to replace the date format\n    new_dt = re.sub(pattern, replacement, dt)\n\n    return new_dt\n\n"}
{"task_id": "MBPP/428", "completion": "\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(map(lambda x: x[0] and x[1], zip(test_tup1, test_tup2)))\n"}
{"task_id": "MBPP/430", "completion": "\n    return -1 * (b / (2 * a))\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    area = (base1 + base2) / 2 * height\n    return area / 2\n\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'a(b+)'\n    match = re.match(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([char for char in str1 if char in '02468'])\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n"}
{"task_id": "MBPP/440", "completion": "\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w+ly\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create a list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate over the matches and add them to the list\n    for match in matches:\n        adverbs.append((match.group(), match.start()))\n\n    return adverbs\n\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n"}
{"task_id": "MBPP/443", "completion": "\n    list1.sort()\n    for i in list1:\n        if i < 0:\n            return i\n    return None\n\n"}
{"task_id": "MBPP/444", "completion": "\n    return [tuple(i[:K]) for i in test_list]\n"}
{"task_id": "MBPP/445", "completion": "\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(tup)\n    for i in lst:\n        print(f\"{i} : {count[i]}\")\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2) + cal_sum(n-3)\n"}
{"task_id": "MBPP/449", "completion": "\n    if (x1 == x2 and y1 == y2) or (x1 == x3 and y1 == y3) or (x2 == x3 and y2 == y3):\n        return False\n    else:\n        return True\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"}
{"task_id": "MBPP/451", "completion": "\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    if not lst:\n        return []\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)\n\n"}
{"task_id": "MBPP/460", "completion": "\n    return [item[0] for item in lst]\n"}
{"task_id": "MBPP/461", "completion": "\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    return [list(comb) for comb in combinations(list1, len(list1))]\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n\n"}
{"task_id": "MBPP/464", "completion": "\n    if len(dict.values()) == 0:\n        return True\n    else:\n        return all(x == n for x in dict.values())\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n            (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    octal = 0\n    i = 1\n    while (deciNum != 0):\n        rem = deciNum % 8\n        octal = octal + rem * i\n        deciNum = int(deciNum / 8)\n        i = i * 10\n    return octal\n\n"}
{"task_id": "MBPP/468", "completion": "\n    # Initialize the maximum product\n    max_product = 1\n\n    # Iterate through the array\n    for i in range(n):\n        # Multiply the current number with the maximum product of the previous numbers\n        max_product *= arr[i]\n\n    # Return the maximum product\n    return max_product\n\n"}
{"task_id": "MBPP/469", "completion": "\n    if k == 0:\n        return 0\n    if len(price) < 2:\n        return 0\n    if k >= len(price) // 2:\n        return sum(max(price[i + 1] - price[i], 0) for i in range(len(price) - 1))\n    dp = [[0] * (k + 1) for _ in range(len(price))]\n    for i in range(1, len(price)):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], price[i] + dp[i - 1][j - 1] - price[i - 1])\n    return dp[-1][-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return test_tup[0] + test_tup[1]\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize the result\n    result = 1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Multiply the current element with the result\n        result = (result * arr[i]) % n\n\n    # Return the result\n    return result % n\n\n"}
{"task_id": "MBPP/472", "completion": "\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    return list(set(test_list1) & set(test_list2))\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums) + max(nums)\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n\n"}
{"task_id": "MBPP/480", "completion": "\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the character with maximum count\n    max_count = 0\n    max_char = ''\n    for char, count in char_count.items():\n        if count > max_count:\n            max_count = count\n            max_char = char\n\n    return max_char\n\n"}
{"task_id": "MBPP/481", "completion": "\n    # Create a 2D array to store the subset sum results\n    subset_sum = [[False for i in range(sum + 1)] for j in range(n + 1)]\n\n    # Initialize the first column of the subset sum array to True\n    for i in range(n + 1):\n        subset_sum[i][0] = True\n\n    # Fill the subset sum array\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset_sum[i][j] = subset_sum[i - 1][j]\n            else:\n                subset_sum[i][j] = subset_sum[i - 1][j] or subset_sum[i - 1][j - set[i - 1]]\n\n    # Return the result\n    return subset_sum[n][sum]\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z][a-z]'\n    matches = re.findall(pattern, text)\n    return matches\n\n"}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    for i in test_list1:\n        if i in test_list2:\n            test_list1.remove(i)\n            test_list2.remove(i)\n    return test_list1, test_list2\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator *= n - i\n        denominator *= i + 1\n    return numerator // denominator\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a ** 2\n\n"}
{"task_id": "MBPP/489", "completion": "\n    # find the largest value in the array\n    largest = max(arr)\n    # count the frequency of the largest value\n    frequency = arr.count(largest)\n    return frequency\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                result.append((test_list[i], test_list[j]))\n    return result\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    low = 0\n    high = len(item_list) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n\n        if item_list[mid] < item:\n            low = mid + 1\n\n        elif item_list[mid] > item:\n            high = mid - 1\n\n        else:\n            return mid\n\n    return -1\n\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    distance = math.sqrt((endx - startx) ** 2 + (endy - starty) ** 2)\n\n    # Calculate the number of hexagons needed along the x and y axes\n    num_hexagons_x = int(distance / (2 * radius))\n    num_hexagons_y = int(distance / (2 * radius))\n\n    # Calculate the coordinates of the hexagons\n    hexagon_coordinates = []\n    for i in range(num_hexagons_x):\n        for j in range(num_hexagons_y):\n            hexagon = []\n            for k in range(6):\n                angle = math.radians(60 * k)\n                x = startx + i * 2 * radius * math.cos(angle) + j * 2 * radius * math.cos(angle + math.radians(30))\n                y = starty + i * 2 * radius * math.sin(angle) + j * 2 * radius * math.sin(angle + math.radians(30))\n                hexagon.append((x, y))\n            hexagon_coordinates.append(hexagon)\n\n    return hexagon_coordinates\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(''.join(map(str, test_tup)), 2)\n"}
{"task_id": "MBPP/495", "completion": "\n    pattern = r'[a-z]'\n    return re.sub(pattern, '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"}
{"task_id": "MBPP/505", "completion": "\n    # A = [0, 1, 0, 3, 12]\n    # A = [0, 0, 1]\n    # A = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return permutation_coefficient(n-1, k-1) + permutation_coefficient(n-1, k)\n"}
{"task_id": "MBPP/507", "completion": "\n    for word in removewords:\n        list1 = [i for i in list1 if i != word]\n    return list1\n"}
{"task_id": "MBPP/508", "completion": "\n    return l1 == l2\n"}
{"task_id": "MBPP/509", "completion": "\n    if n % 2 == 0:\n        n -= 1\n    total = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        total += i\n        count += 1\n    return total / count\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j//arr[i-1]]\n    return dp[n][k]\n"}
