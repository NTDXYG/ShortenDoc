{"task_id": "MBPP/11", "completion": "\n    # find first occurrence of character\n    first_occurrence = s.find(ch)\n\n    # if character is not found, return original string\n    if first_occurrence == -1:\n        return s\n\n    # remove first occurrence of character\n    s = s[:first_occurrence] + s[first_occurrence+1:]\n\n    # find second occurrence of character\n    second_occurrence = s.find(ch)\n\n    # if character is not found, return string after first occurrence\n    if second_occurrence == -1:\n        return s\n\n    # remove second occurrence of character\n    s = s[:second_occurrence] + s[second_occurrence+1:]\n\n    return s\n"}
{"task_id": "MBPP/12", "completion": "\n    # Create a list of tuples where each tuple is a row of the matrix and its sum\n    rows_sum = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples\n    rows_sum.sort()\n\n    # Return the sorted matrix\n    return [row for _, row in rows_sum]\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(10)\n\n"}
{"task_id": "MBPP/14", "completion": "\n    # calculate the volume\n    volume = (1/2) * l * b * h\n    return volume\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[A-Z][^A-Z]*', text)\n\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return list(string)\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    # convert the number to string\n    x = str(x)\n\n    # check if the number is a palindrome\n    if x == x[::-1]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i*n)\n    return multiples\n\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for lst in list1:\n        max_sum = max(max_sum, sum(lst))\n    return max_sum\n\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal, i = 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(item in test_list for item in K)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d', '', i) for i in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i:i+j] == s[i:j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return N % 2 + 10 * decimal_To_Binary(N // 2)\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize the difference between the first and last element of the array\n    diff = (ar[N-1] - ar[0]) // N\n\n    # Initialize the start and end of the array\n    start = 0\n    end = N\n\n    # Loop until the end of the array\n    while end >= start:\n        # Find the middle of the array\n        mid = (start + end) // 2\n\n        # If the difference between the middle element and the next element is greater than the difference,\n        # then the missing element is in the right half of the array\n        if ar[mid+1] - ar[mid] > diff:\n            return (ar[mid+1] + ar[mid]) // 2\n\n        # If the difference between the middle element and the previous element is greater than the difference,\n        # then the missing element is in the left half of the array\n        if mid > 0 and ar[mid] - ar[mid-1] > diff:\n            return (ar[mid] + ar[mid-1]) // 2\n\n        # If the difference between the middle element and the first element is greater than the difference,\n        # then the missing element is in the right half of the array\n        if ar[mid] - ar[0] > mid * diff:\n            end = mid\n\n        # Otherwise, the missing element is in the left half of the array\n        else:\n            start = mid + 1\n\n    return -1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    # Your code here\n    return n*(n+1)//2\n"}
{"task_id": "MBPP/36", "completion": "\n    # convert the fraction to decimal\n    decimal = p / q\n\n    # convert the decimal to string\n    decimal_str = str(decimal)\n\n    # remove the '0.' at the beginning of the string\n    decimal_str = decimal_str.replace('.', '')\n\n    # check if N is out of range\n    if N > len(decimal_str):\n        return -1\n\n    # return the nth digit\n    return int(decimal_str[N])\n\n"}
{"task_id": "MBPP/37", "completion": "\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    if even_num == 0:\n        return \"No even number in the list\"\n    elif odd_num == 0:\n        return \"No odd number in the list\"\n    else:\n        return even_num / odd_num\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        max_heap.append((-freq, char))\n    heapq.heapify(max_heap)\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if -freq1 >0:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if -freq2 >0:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    # if there is any character left in max_heap\n    if max_heap:\n        result.append(max_heap[0][1])\n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "MBPP/42", "completion": "\n    # Creating an empty dictionary\n    d = {}\n\n    # Counting frequency of each element in the array\n    for i in range(n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n\n    # Finding sum of repeated elements\n    sum = 0\n    for i in d:\n        if d[i] > 1:\n            sum += i\n\n    return sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = 'ab*'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/47", "completion": "\n    # Initialize result\n    res = 1\n\n    # Find all factors of B\n    for i in range(1, B + 1):\n        if B % i == 0:\n            temp = i\n            while temp > 0:\n                if temp % 10 == A:\n                    res *= i\n                    break\n                temp //= 10\n\n    return res % 10\n\n"}
{"task_id": "MBPP/48", "completion": "\n    return n | 0b}
{"task_id": "MBPP/49", "completion": "\n    return [nums[i][0] for i in range(N)]\n\n\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = len(nums)"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(len(lst) for lst in input_list)\n    min_length_list = [lst for lst in input_list if len(lst) == min_length]\n    return min_length_list\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) > 0:\n        return str[0] == str[-1]\n    else:\n        return \"Empty String\"\n\n"}
{"task_id": "MBPP/54", "completion": "\n    # Find the maximum number to know the range\n    max_val = max(my_list)\n\n    # Initialize count array\n    count_arr = [0] * (max_val + 1)\n\n    # Populate count array\n    for num in my_list:\n        count_arr[num] += 1\n\n    # Populate the output array\n    output = []\n    for i, count in enumerate(count_arr):\n        output += [i] * count\n\n    return output\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort(reverse=True)\n    return int(\"\".join(map(str, arr)))\n\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x ^ y) < 0\n\n"}
{"task_id": "MBPP/59", "completion": "\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        return n*(3*n-2)\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n    for i in range(1, n):\n        if arr[i] != arr[i-1]:\n            dp[i] = dp[i-1] + 1\n\n    return max(dp)\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Initialize count and sum of digits\n    count = 0\n    sum_digits = 0\n\n    # Initialize dictionary to store frequency of digits\n    freq = defaultdict(int)\n\n    # Traverse through the string\n    for i in range(n):\n        # Update sum of digits\n        sum_digits += ord(s[i]) - ord('0')\n\n        # If sum of digits is equal to length of substring\n        if sum_digits == i+1:\n            count += 1\n\n        # If sum of digits is greater than length of substring\n        if sum_digits > i+1:\n            # Decrease count by frequency of digits in substring\n            count -= freq[i+1]\n\n        # Increase frequency of digits in substring\n        freq[sum_digits] += 1\n\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[2])\n\n\nsubjectmarks = [('English', 'B', 88), ('Science', 'A', 90), ('Maths', 'C', 97), ('Social sciences', 'A', 82)]"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    result = []\n    for tup in Input:\n        if len(tup) == k:\n            result.append(tup)\n    return result\n\n\nInput = [(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14), (15,)]\nk = 4"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [' ', ',', '.', ';', ':', '?', '!/']\n    regexPattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regexPattern, text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    color_pattern = {'R': 'RGBY', 'G': 'RGBY', 'B': 'RGBY', 'Y': 'RGBY'}\n    pattern_sequence = ''\n    for color in colors:\n        pattern_sequence += color_pattern[color]\n    return pattern_sequence in patterns\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    # Initialize count\n    count = 0\n\n    # Loop through the rectangle\n    for i in range(m):\n        for j in range(n):\n            # Increment count for each square\n            count += 1\n\n    return count\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    digit_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            digit_sum += int(i)\n    return even_sum - digit_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * (r**3)\n\n"}
{"task_id": "MBPP/83", "completion": "\n    sum_Char = 0\n    for char in strr:\n        sum_Char += ord(char)\n    return chr(sum_Char // len(strr))\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[1:]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (2 * n - 1)\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert N to string\n    N = str(N)\n    # find the length of N\n    length = len(N)\n    # if the length of N is 1, return -1\n    if length == 1:\n        return -1\n    # if the length of N is greater than 1, find the closest smaller number\n    else:\n        # if the first digit of N is 1, find the closest smaller number by changing the last digit of N\n        if N[0] == '1':\n            return int(N[0] + '0'*(length-1))\n        # if the first digit of N is greater than 1, find the closest smaller number by changing the first digit of N\n        else:\n            return int((str(int(N[0])-1) + '9'*(length-1)))\n"}
{"task_id": "MBPP/90", "completion": "\n    # Initialize maximum length and word\n    max_len = 0\n    word = \"\"\n\n    # Traverse through the list\n    for i in list1:\n        # If length of current word is greater than max_len\n        if len(i) > max_len:\n            max_len = len(i)\n            word = i\n\n    return word\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(2, len(n)):\n            if n[i] == n[i-1] == n[i-2]:\n                return False\n        return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    # Your code here\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == sum(lst) / 2:\n                if j-i < min_length:\n                    min_length = j-i\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    div = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div.append(i)\n    return div\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    if len(numbers) == 0:\n        return 0\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    elif length % 2 == 0:\n        half = num[:length//2]\n        half_next = str(int(half) + 1)\n        if len(half_next) < len(half):\n            half_next = '9' * len(half)\n        return half_next + half_next[::-1]\n    else:\n        half = num[:length//2]\n        half_next = str(int(half) + 1)\n        if len(half_next) < len(half):\n            half_next = '9' * len(half)\n        return half_next + num[length//2] + half_next[::-1]\n\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/103", "completion": "\n    # Initialize the matrix\n    eulerian_matrix = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # Fill the matrix\n    for i in range(n+1):\n        for j in range(min(i, m)+1):\n            if i == 0 or j == 0:\n                eulerian_matrix[i][j] = 1\n            else:\n                eulerian_matrix[i][j] = eulerian_matrix[i-1][j] + eulerian_matrix[i][j-1]\n\n    return eulerian_matrix[n][m]\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i in [num1, num2, num3]:\n        heap.append((i.pop(0), i))\n\n    heapq.heapify(heap)\n    merged_list = []\n\n    while heap:\n        val, iterator = heapq.heappop(heap)\n        merged_list.append(val)\n\n        if iterator:\n            try:\n                next_val = iterator.pop(0)\n                heapq.heappush(heap, (next_val, iterator))\n            except IndexError:\n                pass\n\n    return merged_list\n\n\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [0, 12, 14, 16, 18]\n"}
{"task_id": "MBPP/109", "completion": "\n    # Initialize the count of rotations\n    count = 0\n\n    # Convert the binary string to integer\n    num = int(s, 2)\n\n    # Loop until the number becomes 0\n    while num > 0:\n        # If the number is odd, increment the count and decrement the number\n        if num % 2 == 1:\n            count += 1\n            num -= 1\n        # If the number is even, divide it by 2\n        else:\n            num //= 2\n\n    # Return the count of rotations\n    return count % (10**9 + 7)\n\n"}
{"task_id": "MBPP/110", "completion": "\n    test_list.sort()\n    missing_ranges = []\n    prev_val = strt_val\n    for val in test_list:\n        if val - prev_val > 1:\n            missing_ranges.append((prev_val, val - 1))\n        prev_val = val\n    if test_list[-1] < stop_val:\n        missing_ranges.append((test_list[-1] + 1, stop_val))\n    return missing_ranges\n\n"}
{"task_id": "MBPP/111", "completion": "\n    result = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        result = result & set(lst)\n    return list(result)\n\n\nnested_list = [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6]]"}
{"task_id": "MBPP/112", "completion": "\n    # Write your code here\n    radius = diameter / 2\n    perimeter = 2 * 3.142 * radius\n    perimeter += height\n    return perimeter\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not bool(d) for d in list1)\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) if isinstance(i, (int, str)) else i for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    # Initialize result\n    res = -1\n\n    # Traverse the array\n    for i in range(0, n, 2):\n\n        # If current element is not equal to next element\n        if (i+1 < n and arr[i] != arr[i+1]):\n            res = arr[i]\n            break\n\n        # If current element is not equal to previous element\n        if (i-1 >= 0 and arr[i] != arr[i-1]):\n            res = arr[i]\n            break\n\n    return res\n\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = 0\n    result = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] > max_product:\n                max_product = list1[i][0]*list1[j][1]\n                result = (list1[i], list1[j])\n    return result\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or check_triplet(A, n - 1, sum, count)\n\n"}
{"task_id": "MBPP/122", "completion": "\n    prime = [True]*(MAX+1)\n    p = 2\n    while(p * p <= MAX):\n        if (prime[p] == True):\n            for i in range(p * p, MAX+1, p):\n                prime[i] = False\n        p += 1\n\n    prime[0]= False\n    prime[1]= False\n    cnt = 0\n    res = 0\n\n    for p in range(2, MAX):\n        if (prime[p]):\n            cnt += 1\n        if (cnt == n):\n            res = p\n            break\n    return res\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_numbers = set()\n    for a in range(1, limit):\n        b = d(a)\n        if a != b and d(b) == a:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a+b*1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize count of 0s and 1s\n    count_zero = 0\n    count_one = 0\n\n    # Initialize max difference\n    max_diff = 0\n\n    # Traverse through the given string\n    for i in range(0, n):\n        # If character is '0', increment count_zero\n        if string[i] == '0':\n            count_zero += 1\n\n        # If character is '1', increment count_one and update max_diff\n        elif string[i] == '1':\n            count_one += 1\n            max_diff = max(max_diff, count_one - count_zero)\n\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    sum = 0\n    for i in range(1, a):\n        if a % i == 0:\n            sum += i\n    for i in range(1, b):\n        if b % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += abs(x)\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        result = -result\n    return result\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # Check if the matrix is a square matrix\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a 3x3 matrix\n    if len(my_matrix) != 3:\n        return False\n\n    # Check if all elements in the matrix are numbers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # Check if all rows have the same number of elements\n    for row in my_matrix:\n        if len(row) != len(my_matrix[0]):\n            return False\n\n    # Check if the sum of elements in each row, column and diagonal is the same\n    sum_row = [sum(row) for row in my_matrix]\n    sum_col = [sum(col) for col in zip(*my_matrix)]\n    sum_diag = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    sum_diag_inv = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n\n    if len(set(sum_row)) > 1 or len(set(sum_col)) > 1 or sum_diag != sum_diag_inv:\n        return False\n\n    # If all checks pass, return True\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n\ntup1 = ('H', 'e', 'l', 'l', 'o')"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        arr.pop()\n    return arr[-1] % 2 == 0\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 25 + ((units - 50) * 0.75)\n    elif units <= 250:\n        bill = 100 + ((units - 150) * 1.20)\n    else:\n        bill = 220 + ((units - 250) * 1.50)\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    zero_count = nums.count(0)\n    total_count = len(nums)\n    return zero_count/total_count\n"}
{"task_id": "MBPP/138", "completion": "\n    # base case\n    if n == 0 or n == 1:\n        return True\n\n    # recursive case\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2 * math.pi * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i-1, -1, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    # convert lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n\n    # find intersection of three sets\n    intersection = set1.intersection(set2).intersection(set3)\n\n    # count the number of elements in the intersection\n    count = len(intersection)\n\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    return [i for i in Input if isinstance(i, list)]\n\n\nInput = (1, \"a\", [\"list1\", \"list2\"], 3.14, [\"list3\", \"list4\"])"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += abs(arr[i] - arr[i + 1])\n    return sum\n\n"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return arr[-1] - arr[0]\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for i in str1:\n        total += ord(i)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    # Create a 2D array to store the maximum sum of paths\n    dp = [[0]*i for i in range(1, n+1)]\n\n    # Initialize the last row of dp array\n    for i in range(m):\n        dp[n-1][i] = tri[n-1][i]\n\n    # Fill the dp array in bottom-up manner\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            dp[i][j] = max(dp[i+1][j], dp[i+1][j+1]) + tri[i][j]\n\n    return dp[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    str_x = str(x)\n    len_x = len(str_x)\n    half_x = len_x // 2\n    first_half = int(str_x[:half_x])\n    second_half = int(str_x[half_x:])\n    return max(first_half, second_half)\n\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize result\n    dp = [1]*n\n    res = 1\n\n    # Compute optimized LIS values in\n    # bottom up manner\n    for i in range(1, n):\n        for j in range(0, i):\n            if abs(arr[i]-arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j]+1)\n                res = max(res, dp[i])\n\n    return res\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if a * b ** 2 == c:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0 or len(x) == 1: return x else: mid = len(x) // 2 return merge(merge_sort(x[:mid]), merge_sort(x[mid:]))\n\n"}
{"task_id": "MBPP/153", "completion": "\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    return h, k\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if i == j or i + j == N - 1:\n                result.append(nums[i][j])\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n\n\ntuple_str = ('1', '2', '3', '4', '5')"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    ans = float('inf')\n    for i in range(n - k + 1):\n        ans = min(ans, arr[i + k - 1] - arr[i])\n    return ans\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['January', 'February', 'March']:\n        season = 'Winter'\n    elif month in ['April', 'May', 'June']:\n        season = 'Spring'\n    elif month in ['July', 'August', 'September']:\n        season = 'Summer'\n    else:\n        season = 'Autumn'\n\n    if days == 28:\n        print(f\"{month} is in {season}\")\n    elif days == 30:\n        if season == 'Winter':\n            print(f\"{month} is in {season}\")\n        else:\n            print(f\"{month} is not in Winter\")\n    elif days == 31:\n        if season in ['Spring', 'Summer']:\n            print(f\"{month} is in {season}\")\n        else:\n            print(f\"{month} is not in {season}\")\n    else:\n        print(f\"{month} is in {season}\")\n\n\nmonth_season('July', 31)\nmonth_season('February', 28)\nmonth_season('March', 31)\nmonth_season('April', 30)\nmonth_season('May', 31)\nmonth_season('June', 30)\nmonth_season('August', 31)\nmonth_season('September', 30)\nmonth_season('October', 31)\nmonth_season('November', 30)\nmonth_season('December', 31)\nmonth_season('January', 31)\nmonth_season('February', 30)\nmonth_season('March', 31)\nmonth_season('April', 30)\nmonth_season('May', 31)\nmonth_season('June', 30)\nmonth_season('July', 31)\nmonth_season('August', 31)\nmonth_season('September', 30)\nmonth_season('October', 31)\nmonth_season('November', 30)\nmonth_season('December', 31)\nmonth_season('January', 31)\nmonth_season('February', 28)\nmonth_season('"}
{"task_id": "MBPP/160", "completion": "\n    # Initialize x and y to 0\n    x = 0\n    y = 0\n\n    # Check if n is divisible by gcd(a, b)\n    if n % math.gcd(a, b) != 0:\n        return None\n\n    # If a is greater than b, solve for x first\n    if a > b:\n        x = n // math.gcd(a, b)\n        y = (n - a * x) // b\n\n    # If b is greater than a, solve for y first\n    else:\n        y = n // math.gcd(a, b)\n        x = (n - b * y) // a\n\n    return (x, y)\n\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 1)\n\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n\ns = int(input(\"Enter the number of sides: \"))\nl = int(input(\"Enter the length of a side: \"))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i:\n            continue\n        if i == (n // i):\n            result = result + i\n        else:\n            result = result + (i + n // i)\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    lower_count = 0\n    upper_count = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            lower_count += 1\n        elif str1[i].isupper():\n            upper_count += 1\n    return lower_count, upper_count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # Initialize result\n    result = 0\n\n    # Create a map to store counts of all elements\n    map = [0] * 2\n\n    # Traverse through all elements of the array\n    for i in range(N):\n        # Increment count of elements in the map\n        map[A[i] % 2] += 1\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n       "}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while(n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    return s.count('std')\n\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^A-Za-z]', '', text)\n\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in str1:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Initialize the variables\n    lcm_min = L\n    lcm_max = R\n    num1 = num2 = None\n\n    # Iterate over the range from L to R\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            # Calculate the lcm of i and j\n            lcm = (i*j)//gcd(i, j)\n            # If lcm is within the range, update the variables\n            if lcm_min <= lcm <= lcm_max:\n                num1, num2 = i, j\n                break\n        if num1 is not None:\n            break\n\n    return [num1, num2] if num1 is not None else []\n\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n\npatterns = ['cat', 'dog', 'bird']\ntext = 'I have a cat, a dog and a bird'"}
{"task_id": "MBPP/179", "completion": "\n    def is_keith(num, s):\n        s.add(num)\n        if len(str(num)) == len(str(s)):\n            return False\n        new_num = num + sum(int(i) for i in str(num))\n        if new_num in s:\n            return False\n        return is_keith(new_num, s)\n\n    return is_keith(x, set())\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of earth in kilometers.\n    R = 6371\n\n    # Convert degrees to radians.\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Difference between longitudes.\n    dlon = elon - slon\n\n    # Difference between latitudes.\n    dlat = elat - slat\n\n    # Haversine formula.\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, a))\n\n    # Distance.\n    distance = R * c\n\n    return distance\n\n"}
{"task_id": "MBPP/181", "completion": "\n    prefix = \"\"\n    length = min(len(str1), len(str2))\n\n    for i in range(length):\n        if str1[i] == str2[i]:\n            prefix += str1[i]\n        else:\n            break\n\n    return prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    upper_case = re.findall(r'[A-Z]', string)\n    special_char = re.findall(r'[@_#$%^&*()<>?/\\|}{~:]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return upper_case, special_char, numeric_values\n\n\nstring = \"Hello@123#WorLd\"\nupper_case, special_char, numeric_values = find_character(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    arr = sorted(arr)\n    pairs = []\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            pairs.append((arr[i], arr[j]))\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] < k:\n            j += 1\n        else:\n            i += 1\n            if i == j:\n                j += 1\n    return len(pairs), pairs\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    return (a/2, b)\n"}
{"task_id": "MBPP/186", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n\ntext = \"I love Python, Java, C++ and JavaScript\"\npatterns = [\"Python\", \"Java\", \"C++\", \"Ruby\"]"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # Initialize the count\n    count = 0\n\n    # Loop through the range of x and y\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            # If the point is inside the square, increment the count\n            if x1 <= x <= x2 and y1 <= y <= y2:\n                count += 1\n\n    return count\n"}
{"task_id": "MBPP/191", "completion": "\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    has_letter = any(char.isalpha() for char in str)\n    has_number = any(char.isdigit() for char in str)\n    return has_letter and has_number\n"}
{"task_id": "MBPP/193", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal, i, n = 0, 0, str(n)\n    while i < len(n):\n        decimal = decimal * 8 + int(n[i])\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    # insert code here\n    return (test_tup1[0]**test_tup2[0], test_tup1[1]**test_tup2[1])\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # The area of the triangle is 1/2 * base * height\n    # The area of the ellipse is \u03c0 * a * b\n    # The area of the triangle inscribed in the ellipse is 1/2 * min(a, b) * sqrt((a^2 + b^2)/2)\n    # So, we need to maximize the ratio of the area of the triangle to the area of the ellipse\n\n    # The area of the triangle is 1/2 * min(a, b) * sqrt((a^2 + b^2)/2)\n    # The area of the ellipse is \u03c0 * a * b\n    # So, we need to maximize the ratio 1/2 * min(a, b) * sqrt((a^2 + b^2)/2) / (\u03c0 * a * b)\n    # This is equivalent to maximize the ratio min(a, b) * sqrt((a^2 + b^2)/2) / (a * b)\n    # This is equivalent to maximize the ratio sqrt((a^2 + b^2)/2) / b\n    # This is equivalent to maximize the ratio sqrt(a^2 + b^2) / b\n    # This is equivalent to maximize the ratio sqrt(a^2 + b^2)\n\n    # The maximum value of sqrt(a^2 + b^2) is sqrt(2) * max(a, b)\n    # So, the largest triangle that can inscribed in an ellipse with semi-major axis a and semi-minor axis b is a triangle with base and height both equal to sqrt(2) * max(a, b)\n\n    return math.sqrt(2) * max(a, b)\n\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_val = max(list1)\n    max_indices = [i for i, val in enumerate(list1) if val == max_val]\n    return max_indices\n\n"}
{"task_id": "MBPP/201", "completion": "\n    return len(set(lst)) <= 1\n\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/203", "completion": "\n    # convert numbers to binary and then to list\n    n1_bin = list(bin(n1)[2:].zfill(8))\n    n2_bin = list(bin(n2)[2:].zfill(8))\n\n    # initialize hamming distance\n    hamming_distance = 0\n\n    # compare each bit of two numbers\n    for i in range(len(n1_bin)):\n        if n1_bin[i] != n2_bin[i]:\n            hamming_distance += 1\n\n    return hamming_distance\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversion_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_list.append((test_tup[i], test_tup[j]))\n    return inversion_list\n\n"}
{"task_id": "MBPP/206", "completion": "\n    # initializing result\n    result = ''\n\n    # iterating through the tuple\n    for ele in test_tup:\n        result += str(ele)\n\n    return result\n\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j] and i != j:\n                dp[i][j] = dp[j][i-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-2]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n    return heap\n\nheap = [21, 1, 45, 33, 12, 9]\nhq.heapify(heap)"}
{"task_id": "MBPP/210", "completion": "\n    # define the allowed characters\n    allowed_set = 'a-zA-Z0-9'\n\n    # define the regex pattern\n    regex = '[^' + allowed_set + ']'\n\n    # search the string for unallowed characters\n    unallowed = re.search(regex, string)\n\n    # return True if no unallowed characters were found, False otherwise\n    return not bool(unallowed)\n\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i & 1 and i & 2:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.pow(i, 4)\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # Concatenate the strings in the tuples\n    str1 = ''.join(test_tup1)\n    str2 = ''.join(test_tup2)\n    return str1 + str2\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list += alist[i] * [alist[i+1]]\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    return all(item in list2 for sublist in list1 for item in sublist)\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Initialize an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is already present in set, return it\n        if i in char_set:\n            return i\n\n        # Else add current character to set\n        char_set.add(i)\n\n    # If no repeated character found, return None\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    return math.floor(math.log(B / A) / math.log(2))\n\n"}
{"task_id": "MBPP/219", "completion": "\n    test_tup = list(test_tup)\n    test_tup.sort()\n    min_k = test_tup[:K]\n    max_k = test_tup[-K:]\n    return min_k, max_k\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = ['.', ',', ' ']\n    for char in special_chars:\n        text = re.sub(char, ':', text, n)\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(el == test_tuple[0] for el in test_tuple)\n\n"}
{"task_id": "MBPP/223", "completion": "\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            break\n        i += 1\n\n    if i == n:\n        return False\n\n    return i + n // 2 < n and arr[i + n // 2] == x\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Your code here\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j = j + 1\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n-1, -1, -1):\n        for j in range(0, i):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    return 2 * math.pi * r * h\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Initialize the count of triangles\n    count = 0\n\n    # Loop through all possible side lengths\n    for i in range(1, N+1):\n        # Check if the side length can form an equilateral triangle\n        if i*(i+1)//2 <= K:\n            count += 1\n        else:\n            break\n\n    return count\n"}
{"task_id": "MBPP/237", "completion": "\n    # Create a dictionary to store the count of each element\n    count_dict = Counter(test_list)\n\n    # Create a set to store the counts\n    count_set = set(count_dict.values())\n\n    # If the length of the set is 1, all elements occur the same number of times\n    if len(count_set) == 1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/238", "completion": "\n    return sum(i * (len(str) - i + 1) for i in range(1, len(str) + 1))\n\n"}
{"task_id": "MBPP/239", "completion": "\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        dp[i][1] = i\n    for i in range(1, m + 1):\n        for j in range(2, n + 1):\n            for k in range(1, i + 1):\n                dp[i][j] += dp[k][j - 1]\n            dp[i][j] += i // 2\n    return sum(dp[i][n] for i in range(1, m + 1))\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    array_3d = [['*' * o for _ in range(n)] for _ in range(m)]\n    return array_3d\n\n\nm = 3\nn = 4\no = 5\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: (lst.count(x), x))\n\n"}
{"task_id": "MBPP/244", "completion": "\n    # Find next perfect square\n    next_number = N + 1\n    while True:\n        root = math.sqrt(next_number)\n        if int(root + 0.5) ** 2 == next_number:\n            return next_number\n        next_number += 1\n\n"}
{"task_id": "MBPP/245", "completion": "\n    # Initializing the variables\n    dp1 = [0]*n\n    dp2 = [0]*n\n    dp1[0] = arr[0]\n    dp2[n-1] = arr[n-1]\n    max_sum = arr[0]\n\n    # Finding the maximum sum increasing sub-sequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp1[i] < dp1[j] + arr[i]:\n                dp1[i] = dp1[j] + arr[i]\n        if dp1[i] == 0:\n            dp1[i] = arr[i]\n        max_sum = max(max_sum, dp1[i])\n\n    # Finding the maximum sum decreasing sub-sequence\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dp2[i] < dp2[j] + arr[i]:\n                dp2[i] = dp2[j] + arr[i]\n        if dp2[i] == 0:\n            dp2[i] = arr[i]\n\n    # Finding the maximum sum bi-tonic sub-sequence\n    for i in range(n):\n        if dp1[i] != arr[i] and dp2[i] != arr[i]:\n            max_sum = max(max_sum, dp1[i] + dp2[i] - arr[i])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    # Initial guess\n    guess = number / 2.0\n\n    # Loop until the guess is good enough\n    while abs(guess * guess - number) > 0.0001:\n        # Improve the guess\n        guess = (guess + number / guess) / 2.0\n\n    return guess\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of sub-problems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The values are filled in\n    # diagonally\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if (str[i] == str[j] and cl == 2):\n                L[i][j] = 2\n            elif (str[i] == str[j]):\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j]);\n\n    # L[0][n-1] contains the length of the longest palindrome substring\n    return L[0][n-1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n\n"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list)):\n        list.insert(i+1, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    for number in numbers:\n        magnitude, angle = cmath.polar(number)\n        print(f\"Magnitude: {magnitude}, Angle: {angle}\")\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\ncolors = ['red', 'blue', 'green']\nn = 2\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # your code here\n    return tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        return num * num + 1\n\n    prime_count = 0\n    number = 2\n    while prime_count < n:\n        if is_prime(newman_shanks_williams(number)):\n            prime_count += 1\n        number += 1\n    return number - 1\n\n"}
{"task_id": "MBPP/261", "completion": "\n    res = tuple(a / b if b != 0 else 0 for a, b in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age / 7\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n"}
{"task_id": "MBPP/268", "completion": "\n    star_numbers = [1, 9, 153, 370, 371, 407]\n    return star_numbers[n-1]\n\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\n"}
{"task_id": "MBPP/272", "completion": "\n    res = [sub[-1] for sub in test_list]\n    return res\n\n\ntest_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum = 0\n\n    # Compute sum of binomial coefficients\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n\n    return sum\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == n:\n                return i\n        return -1\n"}
{"task_id": "MBPP/276", "completion": "\n    from math import pi\n    return pi * r**2 * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] < test_tup[i + 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/279", "completion": "\n    # Decagonal number is a figurate number that extends the concept of pentagonal numbers.\n    # The formula to find nth decagonal number is: n*(7*n-5)/2\n    # So, we can use this formula to find the nth decagonal number.\n\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n\n    # Check if n is a decagonal number\n    for i in range(1, n+1):\n        if i*(7*i-5)//2 == n:\n            return True\n\n    return False\n\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos+1\n\n    return found\n\n"}
{"task_id": "MBPP/281", "completion": "\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for i in set(n):\n        if n.count(i) > int(i):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(i == element for i in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    res = -1\n\n    # Compute sum of all array elements\n    total_sum = sum(a)\n\n    # Compute sum of k*(sum of array elements)\n    k_total_sum = total_sum * k\n\n    # Initialize current sum as 0\n    curr_sum = 0\n\n    # Traverse through the array\n    for i in range(n):\n\n        # Add current element to current sum\n        curr_sum += a[i]\n\n        # If current sum becomes greater than or equal to k_total_sum, update result\n        if curr_sum >= k_total_sum:\n            res = max(res, curr_sum)\n\n        # If current sum becomes less than 0, then discard the subarray and start a new one\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return res\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/288", "completion": "\n    # Initialize result\n    res = 0\n\n    # Compute inverse of all elements in arr[] under modulo P\n    for i in range(N):\n        res = (res + pow(arr[i], P-2, P)) % P\n\n    return res\n\n"}
{"task_id": "MBPP/289", "completion": "\n    # Write your code here\n    odd_days = 0\n    for i in range(1, N+1):\n        if i % 2 != 0:\n            odd_days += 1\n    return odd_days\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = len(max(list1, key=len))\n    return max_len\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        quot = n / m\n        return quot\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    div_list = []\n    for i in range(1, number):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n\nnested_list = [[1, 2, [3, 4]], [5, 6, 7], 8, 9]"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of each student's data\n    student_sum = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for student, data in stdata:\n        # Add the data to the corresponding student's sum\n        student_sum[student] += data\n\n    # Return the maximum sum\n    return max(student_sum.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, 2 * n + 1):\n        for j in range(min(i, n) + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if i - j - 1 >= 0:\n                dp[i][j] += dp[i - 1][j]\n    return dp[2 * n][n]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return max(dict_depth(v) for v in d.values()) + 1\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    ##Your code here\n    count = 0\n    while (n):\n        n >>= 1\n        count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/303", "completion": "\n    # Write your code here\n    inversions = [(i, j) for i in range(n) for j in range(i+1, n) if a[i] > a[j]]\n    return len(inversions) % 2 == 0\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Rotate the array\n    for _ in range(rotations):\n        arr.insert(0, arr.pop())\n\n    # Find the element at the given index\n    return arr[index]\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match('^p', word)]\n\nwords = ['python', 'programming', 'practice', 'problem', 'painting', 'pencil', 'pizza']"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0]\n    if index < 0:\n        return 0\n    max_sum = 0\n    for i in range(index - 1, -1, -1):\n        if a[index] > a[i] and (k == -1 or a[i] > a[k]):\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index))\n    max_sum += a[index]\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    # Combine two lists\n    nums = nums1 + nums2\n    # Sort the combined list in descending order\n    nums.sort(reverse=True)\n    # Return the product of the first N numbers in the sorted list\n    return functools.reduce(lambda x, y: x * y, nums[:N])\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return eval(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    # convert number to binary and then to string\n    binary_n = bin(n)[2:]\n    # find the index of the first '0' from the right\n    index = binary_n.find('0')\n    if index == -1:\n        # if there is no '0', return the number itself\n        return n\n    else:\n        # if there is '0', replace it with '1' and convert back to int\n        binary_n = binary_n[:index] + '1' + binary_n[index+1:]\n        return int(binary_n, 2)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1.0/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_nos = [num for num in list1 if num > 0]\n    return pos_nos\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid:\n        return 0\n\n    m = len(grid)\n    dp = [[0]*n for _ in range(m)]\n    dp[0] = grid[0]\n\n    for i in range(1, m):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = max(dp[i-1][j+1], dp[i-1][j]) + grid[i][j]\n            elif j == n-1:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + grid[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j-1], dp[i-1][j+1], dp[i-1][j]) + grid[i][j]\n\n    return max(dp[-1])\n\n\ngrid = [[1, 2, 3, -4], [5, 6, 7, 8]]"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split()\n    even_len_words = [word for word in str if len(word) % 2 == 0]\n    if even_len_words:\n        return max(even_len_words, key=len)\n    return \"No even length word found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # Initialize the maximum volume to 0\n    max_volume = 0\n\n    # Loop through all possible combinations of sides\n    for a in range(1, s//3 + 1):\n        for b in range(a, (s-a)//2 + 1):\n            c = s - a - b\n            # Calculate the volume and update the maximum if necessary\n            volume = a * b * c\n            if volume > max_volume:\n                max_volume = volume\n\n    return max_volume\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return abs(sum_of_squares - square_of_sum)\n"}
{"task_id": "MBPP/321", "completion": "\n    # Initialize the demlo number\n    demlo = 0\n\n    # Convert the number to binary\n    binary = bin(s)[2:]\n\n    # Iterate over the binary number\n    for i in range(len(binary)):\n        # If the digit is 1, add 2^i to the demlo number\n        if binary[i] == '1':\n            demlo += 2**i\n\n    return demlo\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_indexes = [i for i, val in enumerate(list1) if val == min_val]\n    return min_indexes\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n - 1]\n    for i in range(n - 1, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    # initializing sum\n    sum = 0\n\n    # iterating over tuple\n    for i in range(len(test_tuple)):\n\n        # checking if index is even\n        if i % 2 == 0:\n\n            # adding element to sum\n            sum += test_tuple[i]\n\n    return sum\n\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum number of squares for all numbers up to n\n    min_squares = [0, 1, 2, 3]\n\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares to i (i.e., all 1s)\n        min_square = i\n\n        # Try to form a square number from the previous numbers\n        j = 1\n        while j * j <= i:\n            # Update the minimum number of squares\n            min_square = min(min_square, 1 + min_squares[i - j * j])\n            j += 1\n\n        # Store the minimum number of squares for i\n        min_squares.append(min_square)\n\n    # Return the minimum number of squares for n\n    return min_squares[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    # Creating an empty dictionary\n    dict = defaultdict(int)\n\n    # Iterating over the list\n    for sublist in test_list:\n        for word in sublist:\n            dict[word] += 1\n\n    # Finding the word with most occurrences\n    max_value = max(dict.values())\n    max_keys = [k for k, v in dict.items() if v == max_value]\n\n    return max_keys\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 2\n    # n = 5\n    # Output: [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 3\n    # n = 10\n    # Output: [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\n\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 5\n    # n = 10\n    # Output: [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 10\n    # n = 10\n    # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 0\n    # n = 10\n    # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n    # list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 11\n    # n = 15\n    # Output: [1, 2, 3, 4, 5, 6, 7, "}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,4}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe. I am 25 years old.\""}
{"task_id": "MBPP/331", "completion": "\n    return bin(n).count('0')\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key = lambda x: x[1])\n\nsub_li = [['A', 2], ['B', 1], ['C', 5], ['D', 4]]"}
{"task_id": "MBPP/334", "completion": "\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return \"Not a valid triangle\"\n    else:\n        return \"Valid triangle\"\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    month_30_days = ['April', 'June', 'September', 'November']\n\n    if monthname1 in month_31_days:\n        return \"This month has 31 days\"\n    elif monthname1 in month_30_days:\n        return \"This month has 30 days\"\n    elif monthname1 == 'February':\n        return \"This month has 28 days\"\n    else:\n        return \"Invalid month name\"\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    div_list = []\n    for i in range(x, y+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                div_list.append(j)\n    return max(set(div_list), key = div_list.count)\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(s)\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n\n    # Add first element from each array to the min heap\n    for array_num in range(len(list)):\n        heappush(min_heap, Node(list[array_num][0], array_num, 0))\n        max_val = max(max_val, list[array_num][0])\n\n    min_range_start = min_range_end = -1\n    min_length = float('inf')\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_val - node.value < min_length:\n            min_length = max_val - node.value\n            min_range_start = node.value\n            min_range_end = max_val\n\n        if len(list[node.list_num]) > node.index + 1:\n            next_val_index = node.index + 1\n            next_val = list[node.list_num][next_val_index]\n            heappush(min_heap, Node(next_val, node.list_num, next_val_index))\n            max_val = max(max_val, next_val)\n\n    return [min_range_start, min_range_end]\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i*i + j*j) % 2 != 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [j-i for i, j in zip(nums[:-1], nums[1:])]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0:\n        return 1\n    elif n < 0 or k < 0 or k > n:\n        return 0\n    else:\n        return zigzag(n - 1, k - 1) + k * zigzag(n - 1, k)\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # Initialize count\n    count = 0\n\n    # Loop through the rectangle\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            # If the area of the square is less than the area of the rectangle, increment the count\n            if i*i <= m*n:\n                count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0 and r == 0:\n        return 1\n    if n == 0 or r == 0:\n        return 0\n    return bin_coff(n-1, r) + bin_coff(n-1, r-1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    # your code goes here\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == s[j]:\n            while i < j and s[i] == s[i + 1]:\n                i += 1\n            while i < j and s[j] == s[j - 1]:\n                j -= 1\n            i += 1\n            j -= 1\n        else:\n            break\n    return j - i + 1\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # traverse the array and return the first element occurring k times\n    for i in range(n):\n        if freq[arr[i]] == k:\n            return arr[i]\n\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    # Creating an empty list\n    list_str = []\n\n    # Iterating through the string\n    for i in str:\n        if i in list_str:\n            return False\n        list_str.append(i)\n    return True\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # The number of rectangles in a circle of radius r is given by the formula:\n    # \u03c0r\u00b2\n    # So, we just need to multiply the radius by itself and return the result.\n    return 3.14 * radius ** 2\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = max(test_list, key=lambda item: item[1])\n    return max_val\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 0, 5, 1]\n"}
{"task_id": "MBPP/359", "completion": "\n    # calculate the discriminant\n    d = b**2 - 4*a*c\n\n    # if discriminant is positive, there are two real roots\n    if d > 0:\n        root1 = (-b + d**0.5) / (2*a)\n        root2 = (-b - d**0.5) / (2*a)\n        if root1 == root2*2 or root2 == root1*2:\n            return True\n        else:\n            return False\n\n    # if discriminant is zero, there is one real root\n    elif d == 0:\n        root = -b / (2*a)\n        if root == root*2:\n            return True\n        else:\n            return False\n\n    # if discriminant is negative, there are two complex roots\n    else:\n        return False\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n - 1) + get_carol(n - 2)\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_key = max(num_dict, key=num_dict.get)\n    return max_key\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x[0], x[1] + K) for x in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flip = 0\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] == '1':\n            flip += 1\n        elif i % 2 != 0 and ch[i] == '0':\n            flip += 1\n    return flip\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = [list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1)]\n    return max(product_list)\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = get_height(root.left) - get_height(root.right)\n    if abs(height_diff) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return tuple(test_tup * N)\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x[1]))\n\n\nprice = [('item1', '34.56'), ('item2', '12.34'), ('item3', '90.00'), ('item4', '89.99')]"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return right_element + 1\n    if left_element != A[left_element]:\n        return left_element\n\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    return smallest_missing(A, left_element, mid_element - 1)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n        else:\n            res.append('custom_value')\n    return tuple(res)\n\n\ntest_tup = (1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6, 7)"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n\n"}
{"task_id": "MBPP/378", "completion": "\n    # code here\n    return test_list[-1:] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2*(l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    from random import randint\n    return [[randint(1,10) for i in range(colnum)] for j in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n\ndata = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]"}
{"task_id": "MBPP/382", "completion": "\n    left_index = 0\n    right_index = len(A) - 1\n\n    while left_index < right_index:\n        mid_index = (left_index + right_index) // 2\n\n        if A[mid_index] > A[right_index]:\n            left_index = mid_index + 1\n        else:\n            right_index = mid_index\n\n    return left_index\n\n"}
{"task_id": "MBPP/383", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_br = 0\n    swap_count = 0\n    unbalanced = 0\n\n    for br in s:\n        if br == '[':\n            open_br += 1\n        else:\n            if open_br == 0:\n                unbalanced += 1\n                open_br += 1\n                swap_count += 1\n            else:\n                open_br -= 1\n\n    return swap_count + unbalanced // 2\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # convert the hexadecimal to decimal\n    decimal = int(N, 16)\n\n    # check if the decimal number is even or odd\n    if decimal % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return {l1[i]: {l2[i]: l3[i]} for i in range(len(l1))}\n\n\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = [1, 2, 3]\n"}
{"task_id": "MBPP/392", "completion": "\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max((n/2) + get_max_sum(n/3) + get_max_sum(n-1))\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length = max(len(lst) for lst in input_list)\n    max_length_list = [lst for lst in input_list if len(lst) == max_length]\n    return max_length_list\n\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    # insert code here\n    res = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/400", "completion": "\n    from collections import OrderedDict\n    freq_dict = OrderedDict()\n    for sub in test_list:\n        if sub in freq_dict:\n            freq_dict[sub] += 1\n        else:\n            freq_dict[sub] = 1\n    return freq_dict\n\n"}
{"task_id": "MBPP/401", "completion": "\n    res = tuple(map(lambda t1, t2: tuple(map(lambda x, y: x + y, t1, t2)), test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0 , r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n\n\ntuplex = \"p\"\ntuple1 = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")"}
{"task_id": "MBPP/406", "completion": "\n    # convert the number to binary\n    binary = bin(x)[2:]\n\n    # count the number of 1s in the binary representation\n    count = binary.count('1')\n\n    # if the count is even, return 0 (even parity)\n    if count % 2 == 0:\n        return 0\n    # if the count is odd, return 1 (odd parity)\n    else:\n        return 1\n\n"}
{"task_id": "MBPP/407", "completion": "\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n\n    x = digits[i - 1]\n    y = i\n    for j in range(i + 1, len(digits)):\n        if digits[j] > x and digits[j] < digits[y]:\n            y = j\n    digits[i - 1], digits[y] = digits[y], digits[i - 1]\n\n    digits[i:] = sorted(digits[i:])\n\n    return int(''.join(map(str, digits)))\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n"}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) < 2:\n        return None\n    min_product = list1[0][0] * list1[0][1]\n    min_pair = list1[0]\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n            min_pair = pair\n    return min_pair\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    try:\n        return list1[n]\n    except IndexError:\n        return \"Index out of range\"\n\n"}
{"task_id": "MBPP/414", "completion": "\n    return any(value in list1 for value in list2)\n\n"}
{"task_id": "MBPP/415", "completion": "\n    arr.sort()\n    return max(arr[0]*arr[1], arr[-1]*arr[-2])\n"}
{"task_id": "MBPP/416", "completion": "\n    if n < 10:\n        return n*(n+1)//2\n    # find the number of digits in n\n    digits = len(str(n))\n\n    # create a list to store the sum of digits for each digit\n    sums = [0]*digits\n\n    # calculate the sum of digits for each digit\n    for i in range(1, digits):\n        p10 = 10**i\n        p9 = 10**(i-1)\n        sums[i] = sums[i-1] + i*(45*p9 + 10*p10)\n\n    # calculate the sum of digits for the last digit\n    last = n - 10**(digits-1) + 1\n    sums[-1] = sums[-2] + (last*(last+1)//2)\n\n    # calculate the maximum sum\n    maxSum = 0\n    for i in range(digits):\n        p10 = 10**i\n        maxSum = max(maxSum, sums[i] + (n%p10 + 1)*((n//p10)*(n//p10 + 1)//2))\n\n    return maxSum\n\n"}
{"task_id": "MBPP/417", "completion": "\n    return [(i[0], sum(x[1] for x in Input if x[0] == i[0])) for i in Input]\n\n\nInput = [(1, 2), (3, 4), (1, 4), (3, 2), (1, 5), (3, 5)]"}
{"task_id": "MBPP/418", "completion": "\n    max_len = max(len(sub) for sub in lst)\n    max_sublist = [sub for sub in lst if len(sub) == max_len]\n    return max_sublist\n\n"}
{"task_id": "MBPP/419", "completion": "\n    # rounding each number in the list\n    rounded_list = [round(num) for num in list1]\n    # summing the rounded list\n    sum_rounded_list = sum(rounded_list)\n    # multiplying the sum by the length of the list\n    result = sum_rounded_list * len(rounded_list)\n    return result\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, n*2+1, 2):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/421", "completion": "\n    # initializing string\n    str1 = ''\n\n    # using join() to concatenate string\n    str1 = ''.join(test_tup)\n\n    # return concatenated string\n    return str1\n\n"}
{"task_id": "MBPP/422", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"}
{"task_id": "MBPP/423", "completion": "\n    goldTable = [[0 for i in range(m)] for j in range(n)]\n\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n-1:\n                right = 0\n            else:\n                right = goldTable[row][col+1]\n\n            if row == 0 or col == n-1:\n                right_up = 0\n            else:\n                right_up = goldTable[row-1][col+1]\n\n            if row == m-1 or col == n-1:\n                right_down = 0\n            else:\n                right_down = goldTable[row+1][col+1]\n\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n\n    return res\n\n\ngold = [[1, 3, 1, 5],\n        [2, 2, 4, 1],\n        [5, 0, 2, 3],\n        [0, 6, 1, 2]]\nm = 4\nn = 4"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(i[-1] for i in test_tuple)\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "MBPP/427", "completion": "\n    if not re.match(r'\\d{6}', dt):\n        return \"Invalid date format\"\n    day = dt[:2]\n    month = dt[2:4]\n    year = '20' + dt[4:]\n    return f\"{day}-{month}{year}\"\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    # initializing empty list\n    res = []\n\n    # iterating through the tuples\n    for i in range(0, len(test_tup1)):\n        res.append(test_tup1[i] & test_tup2[i])\n\n    # returning the result\n    return tuple(res)\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return abs(b**2 - 4*a*c)**0.5\n\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/432", "completion": "\n    median = (base1 + base2) / 2\n    area = 0.5 * (base1 + base2) * height\n    return median, area\n\n\nbase1 = int(input(\"Enter base1: \"))\nbase2 = int(input(\"Enter base2: \"))\nheight = int(input(\"Enter height: \"))\n\nmedian, area = median_trapezium(base1, base2, height)\n"}
{"task_id": "MBPP/433", "completion": "\n    return [i > number for i in arr]\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = 'ab*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n"}
{"task_id": "MBPP/437", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][1] == test_list[i + 1][0]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n\n"}
{"task_id": "MBPP/440", "completion": "\n    # Define the regular expression for adverbs\n    adverb_regex = r'\\b(?:very|just|so|fairly|too)\\b'\n\n    # Find all matches\n    matches = re.finditer(adverb_regex, text)\n\n    # Create a list of tuples (match, start position, end position)\n    matches_positions = [(match.group(), match.start(), match.end()) for match in matches]\n\n    return matches_positions\n\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n"}
{"task_id": "MBPP/443", "completion": "\n    # Write your code here\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg\n\n"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:-K] for t in test_list]\n\n"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(i*j for i, j in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(tup)\n    return {i: count[i] for i in lst if i in count}\n\ntup = (1, 2, 3, 4, 5, 3, 2, 2, 2, 1, 1, 1, 4, 4, 4, 4)\nlst = [1, 2, 3, 4]"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        perrin = [0, 1, 1]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # if area is 0, then points are collinear\n    if area == 0:\n        return \"Points are collinear\"\n    else:\n        return \"Points form a triangle\"\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n//i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n\nmonthnum2 = int(input(\"Enter month number: \"))"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]+', '', str1)\n\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i[0] for i in lst]\n\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1) + 1):\n        result.extend(combinations(list1, i))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if len(arr) == 0:\n        return 0\n\n    max_end_here = arr[0]\n    min_end_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_end_here, min_end_here = min_end_here, max_end_here\n\n        max_end_here = max(arr[i], max_end_here * arr[i])\n        min_end_here = min(arr[i], min_end_here * arr[i])\n\n        max_so_far = max(max_so_far, max_end_here)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return len(set(values)) <= 1\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)[2:]\n\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initializing maximum and minimum product\n    max_end = arr[0]\n    min_end = arr[0]\n\n    # Initializing maximum product\n    max_prod = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_end, min_end = min_end, max_end\n\n        max_end = max(arr[i], max_end * arr[i])\n        min_end = min(arr[i], min_end * arr[i])\n\n        max_prod = max(max_prod, max_end)\n\n    return max_prod\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], max((price[i] - price[x] + dp[x - 1][j - 1] for x in range(i))))\n\n    return dp[-1][-1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] + test_tup[i + 1])\n    return tuple(res)\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize result\n    res = 1\n\n    # Compute the product of array elements\n    for i in range(lens):\n        res = (res * arr[i]) % n\n\n    # Return the remainder\n    return res % n\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tup1)\n    return result\n\n\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list2 = [(10, 11, 12), (13, 14, 15), (1, 2, 3)]"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return Counter(dict1)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    # sort the array in ascending order\n    nums.sort()\n    # return the sum of the last and first element\n    return nums[0] + nums[-1]\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    # Your code here\n    return int(str(n)[0])\n\n"}
{"task_id": "MBPP/480", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n\n"}
{"task_id": "MBPP/481", "completion": "\n    # The value of subset[i][j] will be True if there is a subset of set[0..j-1] with sum equal to i\n    subset = ([[False for i in range(sum + 1)] for i in range(n + 1)])\n\n    # If sum is 0, then answer is True\n    for i in range(n + 1):\n        subset[i][0] = True\n\n    # If sum is not 0 and set is empty, then answer is False\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n\n    # Fill the subset table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            if j >= set[i - 1]:\n                subset[i][j] = (subset[i - 1][j] or subset[i - 1][j - set[i - 1]])\n\n    # return the last cell of the table\n    return subset[n][sum]\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = re.compile(r'[A-Z]+[a-z]+')\n    return pattern.findall(text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    fact = 1\n    i = 1\n    while True:\n        if fact % x == 0:\n            return i\n        i += 1\n        fact *= i\n\n"}
{"task_id": "MBPP/484", "completion": "\n    # initializing empty list\n    res = []\n\n    # iterate through the first list\n    for tup in test_list1:\n        # check if tuple is not in second list\n        if tup not in test_list2:\n            # append tuple to result list\n            res.append(tup)\n\n    # return result list\n    return res\n\n"}
{"task_id": "MBPP/485", "completion": "\n    # convert number to string\n    n = str(n)\n    # compare the string with its reverse\n    return n == n[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if n < r:\n        return \"Invalid input\"\n    fact_n = 1\n    for i in range(1, n + 1):\n        fact_n *= i\n\n    fact_r = 1\n    for i in range(1, r + 1):\n        fact_r *= i\n\n    fact_n_r = 1\n    for i in range(1, n - r + 1):\n        fact_n_r *= i\n\n    return fact_n // (fact_r * fact_n_r)\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n\n\ntup = [(1, 2), (3, 1), (4, 5), (2, 3)]"}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5*(5+2*math.sqrt(5))) * a**2\n\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the angle between the two points\n    dx = endx - startx\n    dy = endy - starty\n    angle = math.atan2(dy, dx)\n\n    # Calculate the coordinates of the hexagon vertices\n    vertices = []\n    for i in range(6):\n        x = radius * math.cos(angle + i * 2 * math.pi / 6) + startx\n        y = radius * math.sin(angle + i * 2 * math.pi / 6) + starty\n        vertices.append((x, y))\n\n    return vertices\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return [int(i, 2) for i in test_tup]\n\n\ntest_tup = ('101', '1111', '10101')"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    heapq.heapify(nums)\n    return heapq.nsmallest(n, nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return [sum(nums[i:i+2]) for i in range(0, len(nums), 2)]\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/505", "completion": "\n    count = A.count(0)\n    A = [i for i in A if i != 0]\n    return A + [0]*count\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    else:\n        result = 1\n        for i in range(k):\n            result *= (n - i)\n        return result\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n"}
{"task_id": "MBPP/508", "completion": "\n    return l1 == l2\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i\n        count += 1\n    return sum/count\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(1, 1 << n):\n        product = 1\n        for j in range(n):\n            if (i & (1 << j)):\n                product *= arr[j]\n        if product < k:\n            count += 1\n    return count\n\n"}
