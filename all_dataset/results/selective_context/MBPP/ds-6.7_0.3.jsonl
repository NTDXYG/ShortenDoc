{"task_id": "MBPP/11", "completion": "\n    # remove first occurrence\n    s = s.replace(ch, '', 1)\n    # remove all other occurrences\n    s = s.replace(ch, '')\n    return s\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Create a list of tuples where each tuple is a row of the matrix and its sum\n    rows_sum = [(sum(row), row) for row in M]\n\n    # Sort the list of tuples\n    rows_sum.sort()\n\n    # Return the sorted matrix\n    return [row for _, row in rows_sum]\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(10)\n\n"}
{"task_id": "MBPP/14", "completion": "\n    # calculate the volume\n    volume = (1/2) * l * b * h\n\n    return volume\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[A-Z][^A-Z]*', text)\n\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', '_', text).lower()\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    # convert number to string\n    x = str(x)\n    # check if number is palindrome\n    if x == x[::-1]:\n        return True\n    # check if number is divisible by 11\n    elif int(x) % 11 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    result = []\n    for i in range(1, m+1):\n        result.append(i*n)\n    return result\n\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for l in list1:\n        max_sum += max(l)\n    return max_sum\n\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in range(n):\n        if arr.count(arr[i]) == 1:\n            product *= arr[i]\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(item in test_list for item in K)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d+', '', i) for i in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i:i+j] == s[i:j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (-freq, num))\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 3"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return N % 2 + 10 * decimal_To_Binary(N // 2)\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # Your code here\n    for i in range(N):\n        if ar[i] != i+1:\n            return i+1\n    return N+1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    return n * (n + 1) // 2\n\n"}
{"task_id": "MBPP/36", "completion": "\n    # convert the fraction to a decimal\n    decimal = p / q\n\n    # convert the decimal to a string\n    decimal_str = str(decimal)\n\n    # remove the '0.' at the beginning of the string\n    decimal_str = decimal_str.replace('.', '')\n\n    # check if N is out of range\n    if N > len(decimal_str):\n        return -1\n\n    # return the nth digit\n    return int(decimal_str[N])\n\n"}
{"task_id": "MBPP/37", "completion": "\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    if len(even_num) == 0 or len(odd_num) == 0:\n        return \"No even or odd number in the list\"\n    else:\n        return even_num[0] / odd_num[0]\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        max_heap.append((-freq, char))\n    heapq.heapify(max_heap)\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if -freq1 > -1:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if -freq2 > -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    if max_heap:\n        result.append(max_heap[0][1])\n\n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # If element is already in hash set, then add it to sum\n        if arr[i] in s:\n            sum = sum + arr[i]\n        else:\n            # Else add element to hash set\n            s.add(arr[i])\n\n    return sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = 'ab*'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n\n"}
{"task_id": "MBPP/47", "completion": "\n    # Initialize result\n    res = 1\n\n    # Find factorial of A\n    for i in range(1, A + 1):\n        res = res * i\n\n    # Find factorial of B\n    for i in range(1, B + 1):\n        res = res * i\n\n    # Find last digit of result\n    last_digit = res % 10\n\n    return last_digit\n\n"}
{"task_id": "MBPP/48", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/49", "completion": "\n    return nums[::N]\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nN = 2"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(len(lst) for lst in input_list)\n    min_length_list = [lst for lst in input_list if len(lst) == min_length]\n    return min_length_list\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not Equilateral\"\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) > 0:\n        if str[0] == str[-1]:\n            return True\n        else:\n            return False\n    else:\n        return \"Empty String\"\n\n"}
{"task_id": "MBPP/54", "completion": "\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num == 2 * n + 1\n\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort(reverse=True)\n    return int(\"\".join(map(str, arr)))\n\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x ^ y) < 0\n\n"}
{"task_id": "MBPP/59", "completion": "\n    i = 1\n    while True:\n        octagonal = i*(3*i - 2)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1\n\n"}
{"task_id": "MBPP/60", "completion": "\n    # Initialize result\n    max_len = 1\n\n    # Initialize current difference and length\n    cur_diff = arr[1] - arr[0]\n    cur_len = 2\n\n    # Traverse through the array to find the length of\n    # the longest subarray with same difference as that of\n    # length of longest subarray with different difference\n    for i in range(2, n):\n        if (arr[i] - arr[i - 1] == cur_diff):\n            cur_len += 1\n        else:\n            if (cur_len > max_len):\n                max_len = cur_len\n\n            cur_diff = arr[i] - arr[i - 1]\n            cur_len = 2\n\n    # Compare length of last subarray with max_len\n    if (cur_len > max_len):\n        max_len = cur_len\n\n    return max_len\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Initialize count and sum\n    count, sum = 0, 0\n\n    # Initialize position of left and right\n    left, right = 0, 0\n\n    # Initialize frequency of digits\n    freq = defaultdict(int)\n\n    while right < n:\n        # Add current character to frequency\n        freq[s[right]] += 1\n\n        # Update sum\n        sum += int(s[right])\n\n        # If sum is equal to length of substring\n        if sum == right - left + 1:\n            # Increment count\n            count += 1\n\n            # Remove current character from frequency\n            freq[s[left]] -= 1\n\n            # If frequency is 0, remove it from frequency\n            if freq[s[left]] == 0:\n                del freq[s[left]]\n\n            # Move left\n            left += 1\n\n        # If sum is more than length of substring\n        elif sum > right - left + 1:\n            # Remove left character from frequency\n            freq[s[left]] -= 1\n\n            # If frequency is 0, remove it from frequency\n            if freq[s[left]] == 0:\n                del freq[s[left]]\n\n            # Update sum\n            sum -= int(s[left])\n\n            # Move left\n            left += 1\n\n        # Move right\n        right += 1\n\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[2])\n\n\nsubjectmarks = [('English', 'B', 88), ('Science', 'A', 90), ('Maths', 'C', 97), ('Social sciences', 'A', 82)]"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    result = []\n    for tup in Input:\n        if len(tup) == k:\n            result.append(tup)\n    return result\n\n\nInput = [(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14)]\nk = 3"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if (i*i - j*j) == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [' ', ',', '.', ';', ':', '?', '!/']\n    regexPattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regexPattern, text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i + 1] and patterns[i] != patterns[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n\ntest_list = [(10, 20, 30), (40, 50, 60), (70, 80, 90), (100, 110, 120)]\nK = 10"}
{"task_id": "MBPP/76", "completion": "\n    # Initialize result\n    count_squares = 0\n\n    # Count squares\n    for i in range(1, min(m, n) + 1):\n        count_squares += (min(m, n) // i) * (min(m, n) // i)\n\n    return count_squares\n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * (r**3)\n\n"}
{"task_id": "MBPP/83", "completion": "\n    sum_Char = 0\n    for i in strr:\n        sum_Char += ord(i)\n    return chr(sum_Char)\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[1:]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (5 * n - 3) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict.maps\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert number to string\n    N = str(N)\n    # iterate over the string from right to left\n    for i in range(len(N) - 1, -1, -1):\n        # if the digit is not 0, decrease it by 1 and return the number\n        if N[i] != '0':\n            return int(N[:i] + str(int(N[i]) - 1) + '8' + '7' * (len(N) - i - 1))\n    # if all digits are 0, return 0\n    return 0\n\n"}
{"task_id": "MBPP/90", "completion": "\n    # Your code here\n    max_len = max(len(word) for word in list1)\n    return max_len\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(2, len(n)):\n            if n[i] == n[i-1] == n[i-2]:\n                return False\n        return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == sum(lst) / 2:\n                if j-i < min_length:\n                    min_length = j-i\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    div = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div.append(i)\n    return div\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    if len(numbers) == 0:\n        return 0\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    elif length % 2 == 0:\n        half = num[:length//2]\n        half_next = str(int(half) + 1)\n        if len(half_next) < len(half):\n            half_next = '9' * len(half)\n        return half_next + half_next[::-1]\n    else:\n        mid = num[length//2]\n        half = num[:length//2]\n        half_next = str(int(half) + 1)\n        if len(half_next) < len(half):\n            half_next = '9' * len(half)\n        return half_next + mid + half_next[::-1]\n\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/103", "completion": "\n    # Initialize the array\n    eulerian_numbers = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    # Fill the array\n    for i in range(n+1):\n        for j in range(min(i, m)+1):\n            if i == j:\n                eulerian_numbers[i][j] = j+1\n            elif j == 0:\n                eulerian_numbers[i][j] = 1\n            else:\n                eulerian_numbers[i][j] = eulerian_numbers[i-1][j] + eulerian_numbers[i][j-1]\n\n    return eulerian_numbers[n][m]\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    return [i + j for i, j in zip(test_list, test_tup)]\n\n\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (10, 20, 30, 40, 50)"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i in [num1, num2, num3]:\n        heapq.heappush(heap, (i.next(), i))\n\n    while heap:\n        val, iterator = heapq.heappop(heap)\n        yield val\n        next_val = iterator.next()\n        if next_val:\n            heapq.heappush(heap, (next_val, iterator))\n\n"}
{"task_id": "MBPP/109", "completion": "\n    # Initialize count of rotations\n    count = 0\n\n    # Traverse through all characters of given string\n    for i in range(n):\n\n        # If current character is 1, then increment count\n        if (s[i] == '1'):\n            count += 1\n\n    # Return count of rotations\n    return count\n\n"}
{"task_id": "MBPP/110", "completion": "\n    test_list.sort()\n    missing_ranges = []\n    prev_val = strt_val\n    for val in test_list:\n        if val != prev_val:\n            if prev_val + 1 < val:\n                missing_ranges.append((prev_val, val - 1))\n            prev_val = val\n    if test_list[-1] < stop_val:\n        missing_ranges.append((test_list[-1] + 1, stop_val))\n    return missing_ranges\n\n"}
{"task_id": "MBPP/111", "completion": "\n    if not all(isinstance(i, list) for i in nestedlist):\n        raise ValueError(\"All elements in the input list should be lists\")\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n\n"}
{"task_id": "MBPP/112", "completion": "\n    # Write your code here\n    radius = diameter / 2\n    perimeter = 2 * 3.142 * radius\n    perimeter += height\n    return perimeter\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    return [(i, Counter(test_list)[i]) for i in test_list]\n\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not bool(d) for d in list1)\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) if isinstance(i, (int, str)) else i for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    for i in range(0, n, 2):\n        if i + 1 == n or arr[i] != arr[i + 1]:\n            return arr[i]\n    return -1\n\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = 0\n    result = ()\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][1] > max_product:\n                max_product = list1[i][0]*list1[j][1]\n                result = (list1[i], list1[j])\n    return result\n\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or check_triplet(A, n - 1, sum, count)\n\n"}
{"task_id": "MBPP/122", "completion": "\n    if n < 1 or n > MAX:\n        return \"Invalid input\"\n\n    smart_numbers = [0] * MAX\n    smart_numbers[0] = 1\n\n    for i in range(1, n):\n        smart_numbers[i] = smart_numbers[i-1] + i + 1\n\n    return smart_numbers[n-1]\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    amicable_numbers = set()\n    for a in range(1, limit):\n        b = d(a)\n        if a != b and d(b) == a:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a+b*1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize count of 0s and 1s\n    count_zero = 0\n    count_one = 0\n\n    # Initialize max difference\n    max_diff = 0\n\n    # Traverse through the given string\n    for i in range(0, n):\n        # If character is 0, increment count_zero\n        if string[i] == '0':\n            count_zero += 1\n\n        # If character is 1, increment count_one\n        if string[i] == '1':\n            count_one += 1\n\n        # Update max_diff\n        if max_diff < abs(count_one - count_zero):\n            max_diff = abs(count_one - count_zero)\n\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            sum += i\n    for i in range(1, b+1):\n        if b % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    return result if (x > 0 and y > 0) or (x < 0 and y < 0) else -result\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the first row\n    magic_constant = sum(my_matrix[0])\n\n    # check rows\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # check columns\n    for col in range(len(my_matrix[0])):\n        if sum(my_matrix[i][col] for i in range(len(my_matrix))) != magic_constant:\n            return False\n\n    # check diagonals\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != magic_constant:\n        return False\n    if sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))) != magic_constant:\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    return [num for num, count in count_dict.items() if count == max_count]\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n\ntup1 = ('h', 'e', 'l', 'l', 'o')"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    if p > 0:\n        arr[-1] = arr[-1] * p\n    if arr[-1] % 2 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 25 + ((units - 50) * 0.75)\n    elif units <= 250:\n        bill = 100 + ((units - 150) * 1.20)\n    else:\n        bill = 220 + ((units - 250) * 1.50)\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    zero_count = nums.count(0)\n    total_count = len(nums)\n    ratio = zero_count / total_count\n    return ratio\n\nnums = array('i', [1, 0, 5, 6, 0, 2])"}
{"task_id": "MBPP/138", "completion": "\n    # Base case\n    if n == 0 or n == 1:\n        return True\n\n    # Recursive case\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2 * math.pi * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    return [item for sublist in test_list for item in sublist]\n\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums), 0, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums[:max_index + 1] = reversed(nums[:max_index + 1])\n            nums[:i] = reversed(nums[:i])\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    # convert lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n\n    # find intersection of three sets\n    intersection = set1 & set2 & set3\n\n    # count the number of elements in the intersection\n    count = len(intersection)\n\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n\nInput = (1, 'a', ['a', 'b', 1], 'b', (1, 2), [1, 2])"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += abs(arr[i] - arr[i + 1])\n    return sum\n\n"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return max(abs(arr[i] - arr[i - 1]) for i in range(1, n))\n\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for i in str1:\n        total += ord(i)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    # Create a 2D array to store the sum of the paths\n    dp = [[0]*i for i in range(1, n+1)]\n\n    # Initialize the last element of the dp array to the last element of the triangle\n    for i in range(n):\n        dp[n-1][i] = tri[n-1][i]\n\n    # Start from the second last row\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            # For each element, add the maximum of the two elements below it to the current element\n            dp[i][j] = tri[i][j] + max(dp[i+1][j], dp[i+1][j+1])\n\n    # Return the top element of the dp array\n    return dp[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    str_x = str(x)\n    len_x = len(str_x)\n    half_x = len_x // 2\n    first_half = int(str_x[:half_x])\n    second_half = int(str_x[half_x:])\n    return max(first_half, second_half)\n\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize result\n    dp = [1] * n\n    res = 1\n\n    # Compute optimized LIS values in\n    # bottom up manner\n    for i in range(1, n):\n        # Check all elements before i\n        for j in range(0, i):\n            # If absolute difference is 1 and\n            # current element is greater than previous\n            if abs(arr[i] - arr[j]) == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n\n        # Update result if needed\n        if res < dp[i]:\n            res = dp[i]\n\n    return res\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if a * b == c:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0 or len(x) == 1: return x else: mid = len(x) // 2 return merge(merge_sort(x[:mid]), merge_sort(x[mid:]))\n\n"}
{"task_id": "MBPP/153", "completion": "\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    return h, k\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if (i+1) % N == 0:\n                result.append(nums[i][j])\n            if (j+1) % N == 0:\n                result.append(nums[i][j])\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n\n\ntuple_str = ('1', '2', '3', '4', '5')"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    ans = float('inf')\n    for i in range(n - k + 1):\n        ans = min(ans, arr[i + k - 1] - arr[i])\n    return ans\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['January', 'February']:\n        return 'Winter'\n    elif month in ['March', 'April', 'May']:\n        return 'Spring'\n    elif month in ['June', 'July', 'August']:\n        return 'Summer'\n    elif month in ['September', 'October', 'November']:\n        return 'Autumn'\n    else:\n        return 'Invalid month'\n\n"}
{"task_id": "MBPP/160", "completion": "\n    if n % a == 0:\n        return (n // a, 0)\n    elif n % b == 0:\n        return (0, n // b)\n    else:\n        return None\n\n"}
{"task_id": "MBPP/161", "completion": "\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 1)\n\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n\ns = int(input(\"Enter the number of sides: \"))\nl = float(input(\"Enter the length of a side: \"))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 0\n    for i in range(1, n):\n        if n % i == 0:\n            result += i\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    lower_count = 0\n    upper_count = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            lower_count += 1\n        elif str1[i].isupper():\n            upper_count += 1\n    return lower_count, upper_count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # Initialize result\n    result = 0\n\n    # Create a map to store counts of all elements\n    map = [0] * 2\n\n    # Traverse through all elements of given array\n    for i in range(N):\n        # Increment count of elements in map\n        map[A[i] % 2] += 1\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map[1], map[0] = map[0], map[1]\n\n    # If there are more 1s than 0s, then swap them\n    if map[1] > map[0]:\n        map"}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while(n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = {}\n    for char in s:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    return count\n\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^A-Za-z0-9 ]+', '', text)\n\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in str1:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    # Initialize the variables\n    lcm_min = L\n    lcm_max = R\n    num1 = num2 = None\n\n    # Iterate over the range from L to R\n    for i in range(L, R+1):\n        for j in range(i+1, R+1):\n            # Calculate the lcm of i and j\n            lcm = (i*j) // gcd(i, j)\n            # If lcm is within the range and is greater than lcm_min, update lcm_min\n            if lcm_min <= lcm <= lcm_max and (not num1 or lcm < num1):\n                num1, num2 = i, j\n\n    # Return the numbers if found, else return None\n    return [num1, num2] if num1 else None\n\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n\npatterns = ['cat', 'dog', 'bird']\ntext = 'I have a cat, a dog and a bird'"}
{"task_id": "MBPP/179", "completion": "\n    def is_keith(n, m):\n        s = [int(i) for i in str(n)]\n        while len(s) < m:\n            s.append(s[-1] + s[-2])\n        return s[-1] == n\n\n    return is_keith(x, len(str(x)))\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of the earth in km\n    R = 6371\n\n    # Convert degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Difference in coordinates\n    dlon = elon - slon\n    dlat = elat - slat\n\n    # Haversine formula\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, a))\n\n    # Distance calculation\n    distance = R * c\n\n    return distance\n\n"}
{"task_id": "MBPP/181", "completion": "\n    prefix = \"\"\n    len1 = len(str1)\n    len2 = len(str2)\n    i = 0\n    j = 0\n\n    while i <= len1 - 1 and j <= len2 - 1:\n        if str1[i] != str2[j]:\n            break\n        prefix = prefix + str1[i]\n        i += 1\n        j += 1\n\n    return prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    u_char = re.findall(r'u', string)\n    special_char = re.findall(r'\\W', string)\n    numeric_values = re.findall(r'\\d', string)\n\n    return u_char, special_char, numeric_values\n\n\nstring = \"123abcUuUuUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU"}
{"task_id": "MBPP/183", "completion": "\n    arr = list(set(arr))\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    return (a/2, b)\n"}
{"task_id": "MBPP/186", "completion": "\n    return [re.search(pattern, text) is not None for pattern in patterns]\n\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"fox\", \"cat\", \"dog\"]"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    integral_points = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            integral_points += 1\n    return integral_points\n"}
{"task_id": "MBPP/191", "completion": "\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    has_alpha = any(char.isalpha() for char in str)\n    has_num = any(char.isdigit() for char in str)\n    return has_alpha and has_num\n"}
{"task_id": "MBPP/193", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n\ntest_list = [(1, 2), (3, 4, 5), (6, 7, 8, 9), (10,)]\nK = 2"}
{"task_id": "MBPP/197", "completion": "\n    # initializing result\n    res = []\n\n    # iterating through the tuples\n    for i in range(len(test_tup1)):\n        # calculating exponent and appending to result\n        res.append(test_tup1[i] ** test_tup2[i])\n\n    # returning result\n    return tuple(res)\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # Area of the ellipse is given by \u03c0ab\n    area_of_ellipse = math.pi * a * b\n\n    # The semi-major axis of the ellipse is given by a\n    semi_major_axis = a\n\n    # The semi-minor axis of the ellipse is given by b\n    semi_minor_axis = b\n\n    # The semi-perimeter of the ellipse is given by sqrt(a^2 + b^2)\n    semi_perimeter = math.sqrt(a**2 + b**2)\n\n    # The area of the largest possible triangle inscribed in the ellipse is given by 1/2 * semi-perimeter * semi-major axis\n    area_of_largest_triangle = 0.5 * semi_perimeter * semi_major_axis\n\n    # The ratio of the area of the largest possible triangle to the area of the ellipse is given by area_of_largest_triangle / area_of_ellipse\n    ratio = area_of_largest_triangle / area_of_ellipse\n\n    return ratio\n\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_index_positions = [index for index, value in enumerate(list1) if value == max_value]\n    return max_index_positions\n\n"}
{"task_id": "MBPP/201", "completion": "\n    return len(set(lst)) == 1\n\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/203", "completion": "\n    # convert numbers to binary and then to list\n    n1_bin = list(bin(n1)[2:].zfill(32))\n    n2_bin = list(bin(n2)[2:].zfill(32))\n\n    # initialize hamming distance\n    hamming_distance = 0\n\n    # compare each bit of the two numbers\n    for i in range(32):\n        if n1_bin[i] != n2_bin[i]:\n            hamming_distance += 1\n\n    return hamming_distance\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversion_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_list.append((test_tup[i], test_tup[j]))\n    return inversion_list\n\n"}
{"task_id": "MBPP/206", "completion": "\n    # initializing empty string\n    res = \"\"\n\n    # iterating through the tuple\n    for ele in test_tup:\n        # adding adjacent elements\n        res += str(ele)\n\n    return res\n\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n\n    # Create a table to store lengths of longest repeating subsequ\n    # for all substrings of length l\n    LCSRe = [[0 for x in range(n + 1)] for y in range(n + 1)]\n\n    # Build LCSRe[] in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1\n            else:\n                LCSRe[i][j] = max(LCSRe[i][j - 1], LCSRe[i - 1][j])\n\n    # Initialize result by 0\n    result = 0\n\n    # Pick maximum of all LCSRe[i][j]\n    for i in range(1, n + 1):\n        result = max(result, LCSRe[i][n])\n\n    return result\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    smallest = hq.heappop(heap)\n    hq.heappush(heap, a)\n    return smallest\n"}
{"task_id": "MBPP/210", "completion": "\n    # This is the regex pattern that matches only a-z, A-Z, 0-9, and _\n    # You can add more characters to this pattern if you want to allow more characters\n    pattern = re.compile('[^a-zA-Z0-9_]')\n\n    if pattern.search(string) is None:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i & 1 and i & 2:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # your code here\n    return test_tup1 + test_tup2\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list += alist[i] * alist[i+1]\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Initialize an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is seen before, return it\n        if i in char_set:\n            return i\n\n        # If not, add it to the set and continue\n        char_set.add(i)\n\n    # If no repeated character found, return None\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    return math.floor(math.log(B / A) / math.log(2)) + 1\n\n"}
{"task_id": "MBPP/219", "completion": "\n    test_tup = list(test_tup)\n    test_tup.sort()\n    min_k = test_tup[:K]\n    max_k = test_tup[-K:]\n    return min_k, max_k\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = ['.', ',', ';', ':']\n    for char in special_chars:\n        text = re.sub(char, ' ', text)\n    words = text.split()\n    words.sort(key=lambda w: len(w), reverse=True)\n    for word in words[:n]:\n        text = text.replace(word, ' ', n)\n    return text\n\n\ntext = \"Hello, world. How are you? I am doing good.\"\nn = 2"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n\n"}
{"task_id": "MBPP/223", "completion": "\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            break\n        i += 1\n\n    if i == n:\n        return False\n\n    return i + n // 2 < n and arr[i + n // 2] == x\n\n"}
{"task_id": "MBPP/224", "completion": "\n    # Initialize result\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Your code here\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j = j + 1\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n - 1, -1, -1):\n        for j in range(0, i):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]\n\n\ntriangle = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    latsurf_cylinder = 2 * math.pi * r * h\n    return latsurf_cylinder\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Initialize the count of triangles\n    count = 0\n\n    # Loop through all possible side lengths\n    for i in range(1, N+1):\n        # Check if the current side length can form an equilateral triangle\n        if i*(i+1)//2 <= K:\n            count += 1\n        else:\n            break\n\n    return count\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    return {k: v for k, v in count.items() if v > 1}\n\n\ntest_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "MBPP/238", "completion": "\n    return sum(str[i: j] for i in range(len(str)) for j in range(i + 1, len(str) + 1))\n\n"}
{"task_id": "MBPP/239", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2, n + 1):\n        dp[i] = 2 * dp[i - 1]\n        if dp[i] > m:\n            dp[i] = m\n    return dp[n]\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    array_3d = [['*' * o for _ in range(n)] for _ in range(m)]\n    return array_3d\n\n\nm = 3\nn = 4\no = 5\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: lst.count(x))\n\n\nlst = [(2, 2), (3, 3), (1, 1), (2, 2), (1, 1), (3, 3), (2, 2), (1, 1)]"}
{"task_id": "MBPP/244", "completion": "\n    # find next perfect square\n    next_perfect_square = math.ceil(math.sqrt(N)) ** 2\n    return next_perfect_square\n\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_sum = [0]*n\n    max_sum[0] = arr[0]\n\n    # Compute maximum sum for each element\n    for i in range(1, n):\n        max_sum[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]:\n                max_sum[i] = max_sum[j] + arr[i]\n\n    # Return maximum sum\n    return max(max_sum)\n\n"}
{"task_id": "MBPP/246", "completion": "\n    # Initial guess\n    x = number / 2.0\n\n    # Loop until the guess is good enough\n    while abs(x * x - number) > 0.000001:\n        # Improve the guess\n        x = (x + number / x) / 2.0\n\n    return x\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    L = [[0 for x in range(n)]for y in range(n)]\n \n    for i in range(n):\n        L[i][i] = 1\n \n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if (str[i] == str[j] and cl == 2):\n                L[i][j] = 2\n            elif (str[i] == str[j]):\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n \n    return L[0][n - 1]\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [2, 4, 6, 8, 10]"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n\n\ntup = ('a', 'b', 'c', 'd', 'e', 'f', 'a', 'a', 'b', 'c', 'd', 'e', 'f', 'a', 'a', 'b', 'c', 'd', 'e', 'f')\nx = 'a'"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list)):\n        list.insert(i+1, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    return cmath.polar(numbers)\n\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\ncolors = ['red', 'blue', 'green']\nn = 2\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # your code here\n    return tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        if num < 2:\n            return False\n        if num == 2 or num == 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        w = 2\n        while i * i <= num:\n            if num % i == 0:\n                return False\n            i += w\n            w = 6 - w\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num) and newman_shanks_williams(num):\n            primes.append(num)\n        num += 1\n    return primes[-1]\n"}
{"task_id": "MBPP/261", "completion": "\n    res = tuple(a / b if b != 0 else 0 for a, b in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}"}
{"task_id": "MBPP/264", "completion": "\n    return h_age / 7\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n"}
{"task_id": "MBPP/268", "completion": "\n    star_numbers = [1, 9, 25, 49, 81, 121, 169, 225, 289, 361, 441, 529, 625, 729, 841, 961, 1089, 1225, 1369, 1521, 1681, 1849, 2025, 2209, 2401, 2601, 2809, 3025, 3249, 3481, 3721, 3969, 4225, 4489, 4761, 5041, 5329, 5625, 5929, 6241, 6561, 6889, 7225, 7569, 7921, 8281, 8649, 9025, 9409, 9801]\n    return star_numbers[n-1]\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n\n"}
{"task_id": "MBPP/272", "completion": "\n    res = [sub[-1] for sub in test_list]\n    return res\n\n\ntest_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum = 0\n\n    # Compute sum of binomial coefficients\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n\n    return sum\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        return a[n-1]\n"}
{"task_id": "MBPP/276", "completion": "\n    from math import pi\n    return pi * r**2 * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i-1] < test_tup[i]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/279", "completion": "\n    # nth decagonal number is given by the formula n*(7n-5)/2\n    # So, we need to find if the given number is a decagonal number\n    # We can do this by checking if the given number is a solution to the above equation\n\n    # We can solve the equation (7n-5)^2 - 4*2*n = 0\n    # This gives us the condition that 7n-5 should be a perfect square\n\n    # We can check this condition by taking square root of the number and checking if it is an integer\n\n    # We can also check if the number is positive\n\n    # If both conditions are satisfied, then the number is a decagonal number\n\n    if n <= 0:\n        return False\n\n    root = (7*n-5)**0.5\n\n    if root == int(root) and root > 0:\n        return True\n\n    return False\n\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos+1\n\n    return found\n\n"}
{"task_id": "MBPP/281", "completion": "\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for i in range(len(n)):\n        if n.count(n[i]) > int(n[i]):\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(isinstance(item, str) for item in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    res = -1\n\n    # Compute sum of first window of size k\n    for i in range(k):\n        res += a[i]\n\n    # Compute sums of remaining windows by removing first element of previous window and adding last element of current window\n    curr_sum = res\n    for i in range(k, 2*k):\n        curr_sum = curr_sum - a[i-k] + a[i%n]\n        res = max(res, curr_sum)\n\n    return res\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n\n"}
{"task_id": "MBPP/288", "completion": "\n    arr_mod_inv = [pow(i, P-2, P) for i in arr]\n    return arr_mod_inv\n\n"}
{"task_id": "MBPP/289", "completion": "\n    odd_days = N % 2\n    return odd_days\n\n"}
{"task_id": "MBPP/290", "completion": "\n    max_len = len(max(list1, key=len))\n    return max_len\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        quot = n / m\n        return quot\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    div_list = []\n    for i in range(1, number):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n\n\nl1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nl2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of each element in the list\n    sum_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for st in stdata:\n        # Add the first element of the tuple to the sum of the second element\n        sum_dict[st[0]] += st[1]\n\n    # Return the maximum sum\n    return max(sum_dict.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, 2 * n + 1):\n        for j in range(min(i, n) + 1):\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if i - j - 1 >= j:\n                dp[i][j] += dp[i - 1][j]\n    return dp[2 * n][n]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return max(dict_depth(v) for v in d.values()) + 1\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    # initializing result\n    msb = 0\n\n    while (n > 0):\n\n        n = n // 2\n        msb += 1\n\n    return msb\n\n"}
{"task_id": "MBPP/303", "completion": "\n    # Write your code here\n    a.sort()\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                inversions += 1\n    return inversions % 2 == 0\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Rotate the array\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the given index\n    return arr[index]\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match(\"^p\", word)]\n\nwords = ['python', 'programming', 'problem', 'pair', 'parrot', 'passion']"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0]\n    if index < k:\n        return -1\n\n    max_sum = 0\n    for i in range(index):\n        if a[i] < a[index] and a[index] + a[i] > max_sum:\n            max_sum = a[index] + a[i]\n\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    # Merge two lists\n    nums = nums1 + nums2\n    # Sort the list\n    nums.sort()\n    # Return the Nth largest product\n    return nums[-N] * nums[-N]\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return eval(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    # convert number to binary and then to string\n    binary_n = bin(n)[2:]\n    # find the index of the first 0 from the right\n    index = binary_n.find('0')\n    # if there is no 0, return the number as is\n    if index == -1:\n        return n\n    # replace the 0 with 1\n    binary_n = binary_n[:index] + '1' + binary_n[index+1:]\n    # convert back to integer and return\n    return int(binary_n, 2)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1.0/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_nos = [num for num in list1 if num > 0]\n    return pos_nos\n"}
{"task_id": "MBPP/314", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n\n    dp = [[0]*n for _ in range(2)]\n    dp[0][0], dp[1][0] = grid[0][0], grid[1][0]\n    dp[0][1], dp[1][1] = max(grid[0][0], grid[1][1]) + grid[0][1], max(grid[0][1], grid[1][0]) + grid[1][1]\n\n    for j in range(2, n):\n        dp[0][j] = max(dp[1][j-1], dp[1][j-2] if j-2>=0 else 0) + grid[0][j]\n        dp[1][j] = max(dp[0][j-1], dp[0][j-2] if j-2>=0 else 0) + grid[1][j]\n\n    return max(dp[0][n-1], dp[1][n-1])\n\n\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8]]\nn = 4"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split(\" \")\n    even_len_words = [word for word in str if len(word) % 2 == 0]\n    if even_len_words:\n        return max(even_len_words, key=len)\n    return \"No even length word found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    n = len(A)\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            low = mid + 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    # Your code here\n    s = s / 3\n    return s ** 3\n\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return abs(sum_of_squares - square_of_sum)\n\n"}
{"task_id": "MBPP/321", "completion": "\n    # Initialize the list of demlo numbers\n    demlo_numbers = []\n\n    # Loop through all numbers from 1 to s\n    for i in range(1, s+1):\n        # Check if the number is divisible by 3 or 5\n        if i % 3 == 0 or i % 5 == 0:\n            # If it is, add it to the list of demlo numbers\n            demlo_numbers.append(i)\n\n    # Return the list of demlo numbers\n    return demlo_numbers\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_indexes = [i for i, val in enumerate(list1) if val == min_val]\n    return min_indexes\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n - 1]\n    for i in range(n - 1, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[::2])\n\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum number of squares for all numbers up to n\n    min_squares = [0, 1, 2, 3]\n\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares to i (i.e., all 1s)\n        min_square = i\n\n        # Try to form a square number from the previous numbers\n        j = 1\n        while j * j <= i:\n            # Update the minimum number of squares\n            min_square = min(min_square, 1 + min_squares[i - j * j])\n            j += 1\n\n        # Store the minimum number of squares for the current number\n        min_squares.append(min_square)\n\n    # Return the minimum number of squares for n\n    return min_squares[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    str1 = ' '.join(test_list)\n    str1 = str1.lower()\n    str1 = str1.split()\n    count = defaultdict(int)\n    for sub in str1:\n        count[sub] += 1\n    return max(count, key=count.get)\n\n\ntest_list = ['In', 'the', 'woods', 'there', 'stood', 'a', 'woodchuck', 'asleep', 'because', 'it', 'was', 'furious', 'to', 'see', 'the', 'woodchuck', 'wake', 'up', 'in', 'the', 'middle', 'of', 'the', 'night']"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    list1 = list1[m:n] + list1[:m]\n    return list1\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/330", "completion": "\n    return re.findall(r'\\b\\w{3,4}\\b', text)\n\n\ntext = \"Hello, my name is John Doe. I am 25 years old.\""}
{"task_id": "MBPP/331", "completion": "\n    return bin(n).count('0')\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key = lambda x: x[1])\n\nsub_li = [['a', 2], ['b', 1], ['c', 5], ['d', 4]]"}
{"task_id": "MBPP/334", "completion": "\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return \"Not a valid triangle\"\n    else:\n        return \"Valid triangle\"\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    month_30_days = ['April', 'June', 'September', 'November']\n    if monthname1 in month_31_days:\n        return 31\n    elif monthname1 in month_30_days:\n        return 30\n    elif monthname1 == 'February':\n        return 28\n    else:\n        return \"Invalid month name\"\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    div_list = []\n    for i in range(x, y+1):\n        for j in range(1, i+1):\n            if i % j == 0:\n                div_list.append(j)\n    return max(set(div_list), key = div_list.count)\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(s)\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n\n    # Add first element from each list to the heap\n    for i, l in enumerate(list):\n        heappush(min_heap, Node(l[0], i, 0))\n        max_val = max(max_val, l[0])\n\n    min_range = float('inf')\n    result = [0, 0]\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_val - node.value < min_range:\n            min_range = max_val - node.value\n            result = [node.value, max_val]\n\n        if len(list[node.list_num]) > node.index + 1:\n            next_node = Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heappush(min_heap, next_node)\n            max_val = max(max_val, next_node.value)\n\n    return result\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i*i + j*j) % 2 != 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [j-i for i, j in zip(nums[:-1], nums[1:])]\n\n"}
{"task_id": "MBPP/346", "completion": "\n    if k == 0:\n        return 0\n    if k == 1:\n        return 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 10\n    if n == 6:\n        return 26\n    if n == 7:\n        return 76\n    if n == 8:\n        return 220\n    if n == 9:\n        return 660\n    if n == 10:\n        return 1916\n    if n == 11:\n        return 5716\n    if n == 12:\n        return 17156\n    if n == 13:\n        return 51452\n    if n == 14:\n        return 154412\n    if n == 15:\n        return 463372\n    if n == 16:\n        return 1390100\n    if n == 17:\n        return 4172252\n    if n == 18:\n        return 12516700\n    if n == 19:\n        return 37549580\n    if n == 20:\n        return 112622764\n    if n == 21:\n        return 337866564\n    if n == 22:\n        return 1013589684\n    if n == 23:\n        return 3040757684\n    if n == 24:\n        return 9122273404\n    if n == 25:\n        return 27366722084\n    if n == 26:\n        return 82100166204\n    if n == 27:\n        return 246300498644\n    if n"}
{"task_id": "MBPP/347", "completion": "\n    # Initialize result\n    count_squares = 0\n\n    # Count squares\n    for i in range(1, min(m, n) + 1):\n        count_squares += (min(m, n) // i) * (min(m, n) // i)\n\n    return count_squares\n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0 and r == 0:\n        return 1\n    if n == 0 or r == 0:\n        return 0\n    return bin_coff(n - 1, r) + bin_coff(n, r - 1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    # your code goes here\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] == s[j]:\n            while i < j and s[i] == s[i + 1]:\n                i += 1\n            while i < j and s[j] == s[j - 1]:\n                j -= 1\n            i += 1\n            j -= 1\n        else:\n            break\n    return j - i + 1\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # Creating an empty hash table\n    hash_map = {}\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # If element already exists in hash_map, increment its count\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n\n        # Else add element to hash_map\n        else:\n            hash_map[arr[i]] = 1\n\n    # Traverse through the array again\n    for i in range(n):\n\n        # If element occurs k times, return the element\n        if hash_map[arr[i]] == k:\n            return arr[i]\n\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Create an empty set\n    unique_chars = set()\n\n    # Iterate over the string\n    for char in str:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we made it this far, all characters were unique\n    return True\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # The number of rectangles in a circle of radius r is given by the formula:\n    # \u03c0r\u00b2\n    # So, we just need to multiply the radius by itself and return the result.\n    return 3.14 * radius ** 2\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - a - b\n\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = max(test_list, key=lambda item: item[1])\n    return max_val\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 0, 5, 1]"}
{"task_id": "MBPP/359", "completion": "\n    # write your code here\n    if a == 0:\n        return False\n    else:\n        if c / a == b / a:\n            return True\n        else:\n            return False\n\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n - 1) + get_carol(n - 2)\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_occurrence = max(num_dict.values())\n    for key, value in num_dict.items():\n        if value == max_occurrence:\n            return key\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x[0], x[1] + K) for x in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flip = 0\n    for i in range(len(ch)):\n        if i % 2 == 0 and ch[i] == '1':\n            flip += 1\n        elif i % 2 != 0 and ch[i] == '0':\n            flip += 1\n    return flip\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = [list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1)]\n    return max(product_list)\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = get_height(root.left) - get_height(root.right)\n    if abs(height_diff) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return tuple(sum([test_tup for _ in range(N)], ()))\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return tuple(sorted(price, key=float))\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return right_element + 1\n    if left_element != A[left_element]:\n        return left_element\n\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    return smallest_missing(A, left_element, mid_element)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n        else:\n            res[res.index(i)] = 'custom_value'\n    return tuple(res)\n\n\ntest_tup = (1, 2, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 9, 9, 10)"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n\n"}
{"task_id": "MBPP/378", "completion": "\n    return test_list[-1:] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/380", "completion": "\n    from random import randint\n    return [[randint(0,10) for i in range(colnum)] for j in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n\ndata = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]"}
{"task_id": "MBPP/382", "completion": "\n    left = 0\n    right = len(A) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\n"}
{"task_id": "MBPP/383", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    freq = arr.count(min_val)\n    return freq\n\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_br = 0\n    swap_count = 0\n    for i in s:\n        if i == '[':\n            open_br += 1\n        else:\n            if open_br == 0:\n                open_br += 1\n                swap_count += 1\n            else:\n                open_br -= 1\n    return swap_count + open_br // 2\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # convert hex to decimal\n    dec = int(N, 16)\n\n    # check if the number is even or odd\n    if dec % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + i for i in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\n\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = [1, 2, 3]\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3))\n\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length = max(len(x) for x in input_list)\n    max_length_list = list(filter(lambda x: len(x) == max_length, input_list))\n    return max_length_list\n\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    res = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/400", "completion": "\n    from collections import OrderedDict\n    return list(OrderedDict.fromkeys(test_list))\n\n"}
{"task_id": "MBPP/401", "completion": "\n    res = tuple(map(lambda t1, t2: tuple(map(lambda x, y: x + y, t1, t2)), test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0 , r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n\n\ntuplex = \"p\"\ntuple1 = (\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\")"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/407", "completion": "\n    num_str = str(n)\n    num_list = list(num_str)\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(''.join(num_list))\n    return -1\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    list1.sort()\n    return (list1[0], list1[1])\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    try:\n        return list1[n]\n    except IndexError:\n        return \"Index out of range\"\n\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/415", "completion": "\n    arr.sort()\n    return max(arr[0]*arr[1], arr[-1]*arr[-2])\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 121\n    if n == 17:\n        return 137\n    if n == 18:\n        return 154\n    if n == 19:\n        return 172\n    if n == 20:\n        return 191\n    if n == 21:\n        return 211\n    if n == 22:\n        return 232\n    if n == 23:\n        return 254\n    if n == 24:\n        return 277\n    if n == 25:\n        return 301\n    if n == 26:\n        return 326\n    if n == 27:\n        return 352\n    if n == 28:\n        return 379\n    if n == 29:\n        return 407\n    if n == 30:\n        return 436\n    if n == 31:\n        return 466\n    if n == 32:\n        return 497\n    if n == 33:\n        return 529\n    if n == 34:\n        return 562\n    if n == 35:\n        return 596\n    if"}
{"task_id": "MBPP/417", "completion": "\n    if not isinstance(Input, list):\n        raise TypeError(\"Input should be a list\")\n    if not all(isinstance(i, tuple) for i in Input):\n        raise TypeError(\"All elements in the list should be tuples\")\n    if not all(isinstance(j, tuple) for j in Input for i in j):\n        raise TypeError(\"All elements in the list should be tuples\")\n    if not all(len(i) == len(j) for i in Input for j in Input):\n        raise ValueError(\"All tuples should have the same length\")\n\n    return [tuple(i) for i in zip(*Input)]\n\n"}
{"task_id": "MBPP/418", "completion": "\n    max_len = max(len(sub) for sub in lst)\n    max_sublist = [sub for sub in lst if len(sub) == max_len]\n    return max_sublist\n\n"}
{"task_id": "MBPP/419", "completion": "\n    rounded_list = [round(num) for num in list1]\n    sum_list = sum(rounded_list)\n    length_list = len(rounded_list)\n    result = sum_list * length_list\n    return result\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/421", "completion": "\n    str1 = '-'\n    return str1.join(test_tup)\n\n\ntest_tup = (\"Gfg\", \"is\", \"best\", \"for\", \"Geeks\")"}
{"task_id": "MBPP/422", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"}
{"task_id": "MBPP/423", "completion": "\n    goldTable = [[0 for i in range(m)] for j in range(n)]\n\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n - 1:\n                right = 0\n            else:\n                right = goldTable[row][col + 1]\n\n            if row == 0 or col == n - 1:\n                right_up = 0\n            else:\n                right_up = goldTable[row - 1][col + 1]\n\n            if row == m - 1 or col == n - 1:\n                right_down = 0\n            else:\n                right_down = goldTable[row + 1][col + 1]\n\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    res = goldTable[0][0]\n    for i in range(1, m):\n        res = max(res, goldTable[i][0])\n\n    return res\n\n\ngold = [[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]]\nm = 4\nn = 4"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(i[-1] for i in test_tuple)\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "MBPP/427", "completion": "\n    return re.sub(r'(\\d{2})-(\\w{3})(\\d{2})', r'\\1-\\3-\\2', dt)\n\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    # While we still have sub lists\n    while sublist_count > 0:\n        # For every index in our list\n        for i in range(sublist_count, len(my_list)):\n            # Set current value\n            temp_val = my_list[i]\n            # Get the position\n            position = i\n            # Using the sublist count, compare previous items\n            while position >= sublist_count and my_list[position - sublist_count] > temp_val:\n                # If so, shift the items to the right\n                my_list[position] = my_list[position - sublist_count]\n                position = position - sublist_count\n            # Set the temp value\n            my_list[position] = temp_val\n        # Reduce the sublist count\n        sublist_count = sublist_count // 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return abs(b**2 - 4*a*c)**0.5\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/432", "completion": "\n    median = (base1 + base2) / 2\n    area = 0.5 * (base1 + base2) * height\n    return median, area\n\n\nbase1 = int(input(\"Enter base1: \"))\nbase2 = int(input(\"Enter base2: \"))\nheight = int(input(\"Enter height: \"))\n\nmedian, area = median_trapezium(base1, base2, height)\n"}
{"task_id": "MBPP/433", "completion": "\n    return [i > number for i in arr]\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = 'ab*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n"}
{"task_id": "MBPP/437", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    result = []\n    for sublist in L:\n        for item in sublist:\n            result.append(item)\n    return result\n\n"}
{"task_id": "MBPP/440", "completion": "\n    adverbs = re.finditer(r'\\b(?:very|just|so|much|too)\\b', text)\n    return [(match.group(), match.start()) for match in adverbs]\n\n\ntext = \"I am very happy, but I am not so happy.\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    # Write your code here\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg\n\n"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:-K] for t in test_list]\n\n"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(i*j for i, j in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(tup)\n    return {i: count[i] for i in lst if i in count}\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        perrin = [0, 1, 1]\n        for i in range(3, n+1):\n            perrin.append(perrin[i-2] + perrin[i-3])\n        return sum(perrin)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate the area of the triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # if area is 0, then points are collinear\n    if area == 0:\n        return \"Points are collinear\"\n    else:\n        return \"Points form a triangle\"\n\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n//i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n\nmonthnum2 = int(input(\"Enter month number: \"))"}
{"task_id": "MBPP/456", "completion": "\n    return [i[::-1] for i in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r\"[A-Z]\", \"\", str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i[0] for i in lst]\n\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1) + 1):\n        result.extend(combinations(list1, i))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if len(arr) == 0:\n        return 0\n\n    max_end_here = arr[0]\n    min_end_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_end_here, min_end_here = min_end_here, max_end_here\n\n        max_end_here = max(arr[i], max_end_here * arr[i])\n        min_end_here = min(arr[i], min_end_here * arr[i])\n\n        max_so_far = max(max_so_far, max_end_here)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return all(value == values[0] for value in values)\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)[2:]\n\n"}
{"task_id": "MBPP/468", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # max positive product ending at the current position\n    max_end = arr[0]\n\n    # min negative product ending at the current position\n    min_end = arr[0]\n\n    # max product of array\n    max_prod = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_end, min_end = min_end, max_end\n\n        max_end = max(arr[i], max_end * arr[i])\n        min_end = min(arr[i], min_end * arr[i])\n\n        max_prod = max(max_prod, max_end)\n\n    return max_prod\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[j][i] = max(dp[j - 1][i], price[j] + max_diff)\n            max_diff = max(max_diff, dp[j - 1][i - 1] - price[j])\n\n    return dp[-1][-1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = [sum(test_tup[i:i + 2]) for i in range(0, len(test_tup), 2)]\n    return res\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize result\n    res = 1\n\n    # Compute the product of array elements\n    for i in range(lens):\n        res = (res * arr[i]) % n\n\n    # Return the remainder\n    return res % n\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                result.append(tup1)\n    return result\n\n\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list2 = [(10, 11, 12), (13, 14, 15), (1, 2, 3)]"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return Counter(dict1)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    nums.sort()\n    return nums[-1] + nums[-2]\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n /= 10\n    return int(n)\n\n"}
{"task_id": "MBPP/480", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n"}
{"task_id": "MBPP/481", "completion": "\n    # The value of subset[i][j] will be True if there is a subset of set[0..j-1] with sum equal to i\n    subset = ([[False for i in range(sum + 1)] for i in range(n + 1)])\n\n    # If sum is 0, then answer is True\n    for i in range(n + 1):\n        subset[i][0] = True\n\n    # If sum is not 0 and set is empty, then answer is False\n    for i in range(1, sum + 1):\n        subset[0][i] = False\n\n    # Fill the subset table in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if j < set[i - 1]:\n                subset[i][j] = subset[i - 1][j]\n            if j >= set[i - 1]:\n                subset[i][j] = (subset[i - 1][j] or subset[i - 1][j - set[i - 1]])\n\n    # return the last cell of the table\n    return subset[n][sum]\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = re.compile(r'[A-Z]+[a-z]+')\n    return pattern.findall(text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    fact = 1\n    i = 1\n    while fact % x != 0:\n        i += 1\n        fact *= i\n    return i\n\n"}
{"task_id": "MBPP/484", "completion": "\n    return [i for i in test_list1 if i not in test_list2]\n\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return \"Invalid input\"\n    fact_n = 1\n    for i in range(1, n + 1):\n        fact_n *= i\n\n    fact_r = 1\n    for i in range(1, r + 1):\n        fact_r *= i\n\n    fact_n_r = 1\n    for i in range(1, n - r + 1):\n        fact_n_r *= i\n\n    return fact_n // (fact_r * fact_n_r)\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n\n\ntup = [(1, 2), (3, 1), (4, 2), (2, 3)]"}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5*(5+2*math.sqrt(5))) * a**2\n\n"}
{"task_id": "MBPP/489", "completion": "\n    # Write your code here\n    max_val = max(arr)\n    return arr.count(max_val)\n\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while(first <= last and not found):\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    distance = math.sqrt((endx - startx) ** 2 + (endy - starty) ** 2)\n\n    # Calculate the number of hexagons along the x and y axes\n    num_hexagons_x = int(distance / (2 * radius))\n    num_hexagons_y = int(distance / (2 * radius))\n\n    # Initialize the list of hexagon coordinates\n    hexagons = []\n\n    # Calculate the hexagon coordinates\n    for i in range(num_hexagons_x):\n        for j in range(num_hexagons_y):\n            x = startx + i * 2 * radius\n            y = starty + j * 2 * radius\n            hexagons.append([(x, y), (x + radius, y), (x + radius, y + radius), (x, y + radius),\n                             (x - radius, y + radius), (x - radius, y)])\n\n    return hexagons\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return [int(i, 2) for i in test_tup]\n\n\ntest_tup = ('101', '1111', '10101')"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    heapq.heapify(nums)\n    return heapq.nsmallest(n, nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 3"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return sum(nums[i] + nums[i + 1] for i in range(len(nums) - 1))\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/505", "completion": "\n    count = A.count(0)\n    A = [i for i in A if i != 0]\n    return A + [0]*count\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    else:\n        result = 1\n        for i in range(k):\n            result *= (n - i)\n        return result\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n"}
{"task_id": "MBPP/508", "completion": "\n    for i in l1:\n        if i in l2:\n            l2 = l2[l2.index(i):]\n        else:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i\n        count += 1\n    return sum/count\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(1 << n):\n        product = 1\n        for j in range(n):\n            if (i & (1 << j)) != 0:\n                product *= arr[j]\n        if product < k:\n            count += 1\n    return count\n\n"}
