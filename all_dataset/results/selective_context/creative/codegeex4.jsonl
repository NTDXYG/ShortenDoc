{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    is_string_item = False\n    for item in items:\n        if isinstance(item, str):\n            is_string_item = True\n            item = 1.0\n        total_cost += 5.0 + (item - 5.0) * 10.0\n    if is_string_item:\n        total_cost *= 1.5\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    return f\"{round(total_cost, 2):.2f}\""}
{"task_id": "EvoEval/1", "completion": "\n    total_weight = 0\n    for item in items:\n        if isinstance(item, str):\n            total_weight += 1\n        else:\n            total_weight += item\n    \n    base_cost = total_weight * 5.0\n    if location == \"Local\":\n        total_cost = base_cost\n    elif location == \"National\":\n        total_cost = base_cost * 1.5\n    elif location == \"International\":\n        total_cost = base_cost * 2.5\n    else:\n        total_cost = base_cost\n    \n    if total_weight > 5:\n        total_cost += 10.0\n    \n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word.lower():\n            if char.isalpha():\n                shifted = ord(char) + key\n                if shifted > ord('z'):\n                    shifted -= 26\n                encrypted_word += chr(shifted)\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            result.append(input_string[i:j])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    else:\n        return sum(candles[i] > candles[i-1] for i in range(1, len(candles)))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    \n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for rightwards, -1 for downwards\n    \n    row, col = 0, 0\n    \n    while row < rows and col < cols:\n        result.append(matrix[row][col])\n        \n        if direction == 1:\n            if col == cols - 1:\n                row += 1\n                direction = -1\n            elif row == 0:\n                col += 1\n                direction = -1\n            else:\n                row -= 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n                direction = 1\n            elif col == 0:\n                row += 1\n                direction = 1\n            else:\n                row += 1\n                col -= 1\n    \n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n        for i in range(max(0, x - 1), min(x + 2, len(grid))):\n            for j in range(max(0, y - 1), min(y + 2, len(grid[0]))):\n                if grid[i][j] == 1:\n                    grid[x][y] += 1\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    if canvas.count('P') != 1 or canvas.count('*') % canvas.count('-') == 0:\n        return 'Invalid canvas'\n    for i in range(painter, len(canvas)):\n        if canvas[i] == '-':\n            canvas[i] = '*'\n        elif canvas[i] == '#':\n            break\n    for i in range(painter, -1, -1):\n        if canvas[i] == '-':\n            canvas[i] = '*'\n        elif canvas[i] == '#':\n            break\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    word_frequency = {}\n    words = string.lower().split()\n    for word in words:\n        word = word.strip('.,!?;:')\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    return word_frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {}\r\n    animal_order = []\r\n    animal_sound = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_count = 0\r\n    for animal in animal_string.split():\r\n        if animal_count >= 5:\r\n            break\r\n        if animal[0] in animal_sound:\r\n            if animal[0] not in animal_counts:\r\n                animal_counts[animal[0]] = len(animal) - 1\r\n                animal_order.append(animal[0])\r\n            elif animal_counts[animal[0]] < 2:\r\n                animal_counts[animal[0]] += len(animal) - 1\r\n            else:\r\n                continue\r\n        animal_count += 1\r\n    return [animal_counts[animal] for animal in animal_order]"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location} Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location} Marvelous!\"\n    else:\n        return f\"Oh are those {fruits[0]} {fruits[1]} and from {location} Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_occurrence = max(counter.values())\n    most_occurred_number = min([k for k, v in counter.items() if v == max_occurrence])\n    sum_all_elements = sum(flux_values)\n    return sum_all_elements * most_occurred_number\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    rarest_elems = [elem for elem, count in count.items() if count == min_count]\n    return rarest_elems[0]"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char in vowels:\n                alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n            elif char in consonants:\n                alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n            else:\n                alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    hand_values = [int(card[:-1]) for card in hand]\n    hand_values.sort()\n    hand_values_set = set(hand_values)\n    hand_values_dict = {value: hand_values.count(value) for value in hand_values_set}\n    hand_values_dict = dict(sorted(hand_values_dict.items(), key=lambda item: item[1], reverse=True))\n    if len(hand_values_dict) == 1:\n        return hand_values_dict[list(hand_values_dict.keys())[0]] * 4\n    elif len(hand_values_dict) == 2:\n        if list(hand_values_dict.values())[0] == 4:\n            return list(hand_values_dict.keys())[0] * 3\n        elif list(hand_values_dict.values())[0] == 3:\n            return list(hand_values_dict.keys())[0] * 2\n        elif list(hand_values_dict.values())[0] == 2:\n            return list(hand_values_dict.keys())[0]\n    elif len(hand_values_dict) == 3:\n        if list(hand_values_dict.values())[0] == 3:\n            return list(hand_values_dict.keys())[0] * 2\n        elif list(hand_values_dict.values())[0] == 2:\n            return list(hand_values_dict.keys())[0]\n    elif len(hand_values_dict) == 4:\n        if list(hand_values_dict.values())[0] == 2:\n            return list(hand_values_dict.keys())[0]\n    return 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_magical(n: int) -> bool:\n        return n % 7 == 0 and sum(int(digit) for digit in str(n)) == 7\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_magical(num):\n            count += 1\n    return num\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return [\",\".join(pattern)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Check if the grid is a square\n    if len(grid) != len(grid[0]):\n        return False\n\n    # Check if the words are in the grid\n    for word in words:\n        if not find_word_in_grid(grid, word):\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    speed_of_light = 299792.458  # km/s\n    distance = t * v / speed_of_light\n    return distance\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            prime = get_prime(ord(char) - ord('a') + 1)\n            result += str(prime)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word)\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    word_count = 0\r\n    max_sentence = \"\"\r\n    max_count = 0\r\n    for sentence in sentences:\r\n        count = sentence.lower().count(word.lower())\r\n        if count > max_count:\r\n            max_count = count\r\n            max_sentence = sentence\r\n        word_count += count\r\n    return word_count, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end is out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue and the visited set\n    queue = [(start, [])]\n    visited = set()\n    # While the queue is not empty\n    while queue:\n        # Pop the first element from the queue\n        current, path = queue.pop(0)\n        # Add the current position to the visited set\n        visited.add(current)\n        # Check if the current position is the end\n        if current == end:\n            return path\n        # Get the neighbors of the current position\n        neighbors = get_neighbors(maze, current)\n        # For each neighbor\n        for neighbor in neighbors:\n            # Check if the neighbor has not been visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue with the current path\n                queue.append((neighbor, path + [get_direction(current, neighbor)]))\n    # If the queue is empty, there is no path\n    return []"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 130000:\n        return 5000 + (taxable_income - 35000) * 0.25\n    else:\n        return 5000 + 10000 + (taxable_income - 130000) * 0.30"}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                palindromes.add(substring)\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue to store the points to be visited\n    queue = [start]\n    # Create a set to store the points that have been visited\n    visited = set()\n    # Create a dictionary to store the parent of each point\n    parent = {}\n    # Add the start point to the visited set\n    visited.add(start)\n    # While the queue is not empty\n    while queue:\n        # Get the current point from the queue\n        current = queue.pop(0)\n        # If the current point is the end point, return the path\n        if current == end:\n            path = []\n            while current in parent:\n                path.append(current)\n                current = parent[current]\n            path.append(start)\n            return path[::-1]\n        # Get the neighbors of the current point\n        neighbors = get_neighbors(maze, current)\n        # For each neighbor\n        for neighbor in neighbors:\n            # If the neighbor has not been visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue\n                queue.append(neighbor)\n                # Add the neighbor to the visited set\n                visited.add(neighbor)\n                # Set the parent of the neighbor to the current point\n                parent[neighbor] = current\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * n for _ in range(m)]\n    # initialize the first row and column to 1 since there is only one way to reach them\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    # fill in the rest of the array using the recurrence relation\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    # return the number of unique paths to the bottom-right corner\n    return dp[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # TODO: Implement function\n    pass\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # There is 1 way to reach the 0th step (starting point)\n    ways[0] = 1\n    # Iterate through each step\n    for i in range(1, n + 1):\n        # Iterate through each magic stone\n        for stone in magic_stones:\n            # If the stone's power is less than or equal to the current step, add the number of ways to reach the previous step\n            if stone <= i:\n                ways[i] += ways[i - stone]\n    # Return the number of ways to reach the nth step\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n + 1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.index(\"@\") == 0 or \".\" not in email[email.index(\"@\"):] or email[email.index(\"@\"):] == \".\" or email[email.index(\"@\"):] == \"@\":\r\n        return False\r\n    else:\r\n        return True"}
{"task_id": "EvoEval/36", "completion": "\n    # TODO: Implement this function\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\ndef asciiArt(n, s):\n    # Create the top and bottom frames\n    top_bottom = '*' * (len(s) + 2)\n    \n    # Create the middle rows\n    middle_rows = ['*' + s * n + '*' for _ in range(n)]\n    \n    # Combine the frames and middle rows\n    result = [top_bottom] + middle_rows + [top_bottom]\n    \n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions.sort(key=lambda x: (int(x[1]), x[0]))\n    target = int(target)\n    result = []\n    for potion in potions:\n        if int(potion[1]) <= target:\n            result.append(potion[0])\n            target -= int(potion[1])\n            if target == 0:\n                return result\n    return []"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to 0\n    min_energy = 0\n    # Initialize the current position to the top-left cell (0,0)\n    current_position = (0, 0)\n    # Initialize the target position to the safe cell\n    target_position = None\n    # Iterate through the array to find the target position\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 0:\n                target_position = (i, j)\n                break\n        if target_position is not None:\n            break\n    # While the current position is not the target position\n    while current_position != target_position:\n        # Get the neighboring cells\n        neighbors = get_neighbors(arr, current_position)\n        # Find the neighbor with the minimum energy required\n        min_energy += min(neighbors.values())\n        # Move to the neighbor with the minimum energy required\n        current_position = min(neighbors, key=neighbors.get)\n    # Return the minimum energy required\n    return min_energy"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player has acquired a legendary item\n    if 5 in player_input:\n        # Find the second most valuable item\n        sorted_items = sorted(player_input)\n        second_most_valuable = sorted_items[-2]\n        return True, second_most_valuable\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    if duration > fuel:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1\n        remaining_fuel = fuel - (duration * fuel_consumption)\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\r\n    if total_weight <= w + e:\r\n        return True\r\n    else:\r\n        return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    # Initialize the maximum number of hills the prince can see to 0\n    max_hills = 0\n    \n    # Iterate through each hill in the array\n    for i in range(len(arr)):\n        # Initialize the number of hills the prince can see from the current hill to 1 (the current hill itself)\n        num_hills = 1\n        \n        # Iterate through the hills to the left of the current hill\n        for j in range(i-1, -1, -1):\n            # If the current hill is taller than the hill to the left, break the loop\n            if arr[i] > arr[j]:\n                break\n            # If the current hill is the same height as the hill to the left, increment the number of hills the prince can see\n            elif arr[i] == arr[j]:\n                num_hills += 1\n        \n        # Iterate through the hills to the right of the current hill\n        for j in range(i+1, len(arr)):\n            # If the current hill is taller than the hill to the right, break the loop\n            if arr[i] > arr[j]:\n                break\n            # If the current hill is the same height as the hill to the right, increment the number of hills the prince can see\n            elif arr[i] == arr[j]:\n                num_hills += 1\n        \n        # Update the maximum number of hills the prince can see if the current hill has a better view\n        max_hills = max(max_hills, num_hills)\n    \n    return max_hills\n"}
{"task_id": "EvoEval/46", "completion": "\n    pass\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '000': 'R', '1': 'S', '001': 'T', '0101': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '100011': '3', '100001': '4', '100000': '5', '011110': '6', '001111': '7', '000111': '8', '000011': '9', '011111': '0'\n    }\n    msg = msg.replace('/', ' / ')\n    words = msg.split(' ')\n    decoded_words = []\n    for word in words:\n        if word == '':\n            continue\n        decoded_word = ''\n        for char in word.split(' '):\n            decoded_word += morse_code[char]\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': '  '}\n    morse_code = ''\n    for char in text.upper():\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            result += list_of_alphabets[list_of_alphabets.index(char) % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize the number of orders fulfilled\n    fulfilled_orders = 0\n    \n    # Iterate through the orders\n    for order in orders:\n        # If the order can be fulfilled in a single batch\n        if order <= n:\n            fulfilled_orders += 1\n        # If the order cannot be fulfilled in a single batch\n        else:\n            # Calculate the number of batches needed to fulfill the order\n            batches_needed = order // n\n            # If the number of batches needed is less than or equal to the maximum number of batches allowed\n            if batches_needed <= m:\n                fulfilled_orders += 1\n            # If the number of batches needed is greater than the maximum number of batches allowed\n            else:\n                break\n    \n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    morse_code = ''\n    for char in s:\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    result = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for letter in dish:\n            if letter.isalpha():\n                new_dish += magic_spell[(ord(letter.lower()) - ord('a')) % len(magic_spell)]\n            else:\n                new_dish += letter\n        result[new_dish + ' ' + str(price)] = price\n    return result\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated += '@'\n    translated = translated[0].upper() + translated[1:]\n    if translated[0] in vowels:\n        translated = 'xy' + translated\n    else:\n        translated = 'yz' + translated\n    return translated\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredient_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_ingredient_dict\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    \n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    for i, char in enumerate(s):\n        if char == ' ':\n            result.append(char)\n        elif i % 2 == 0:\n            if char in vowels:\n                result.append(vowels[(vowels.index(char)+1)%5])\n            elif char in consonants:\n                result.append(consonants[(consonants.index(char)-1)%21])\n            else:\n                result.append(char)\n        else:\n            if char in vowels:\n                result.append(vowels[(vowels.index(char)+1)%5].swapcase())\n            elif char in consonants:\n                result.append(consonants[(consonants.index(char)-1)%21].swapcase())\n            else:\n                result.append(char.swapcase())\n    return ''.join(result)"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\r\n    while p > 0:\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n        pyramid.append(p)\r\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in range(start, end + 1) if x % divisor == 0 and is_prime(x)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    else:\n        for food, customization in order.items():\n            if \"remove\" in customization:\n                for ingredient in customization[\"remove\"]:\n                    if ingredient in menu[food]:\n                        menu[food].remove(ingredient)\n            if \"add\" in customization:\n                for ingredient in customization[\"add\"]:\n                    if ingredient not in menu[food]:\n                        menu[food].append(ingredient)\n        return menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    rotated_arr = arr[1:] + arr[:1]\n    if rotated_arr == sorted_arr:\n        return True\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            swapped_arr = arr[:]\n            swapped_arr[i], swapped_arr[j] = swapped_arr[j], swapped_arr[i]\n            if swapped_arr == sorted_arr:\n                return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a set of the cards\n    card_set = set(cards)\n    # Create a list of the cards\n    card_list = list(cards)\n    # Create a list of the indices of the cards\n    card_indices = list(range(len(cards)))\n    # Create a list of the indices of the cards that are multiples of the magic number\n    multiples = [i for i, card in enumerate(cards) if card % magicNumber == 0]\n    # Create a list of the indices of the cards that are factors of the magic number\n    factors = [i for i, card in enumerate(cards) if magicNumber % card == 0]\n    # Create a list of the indices of the cards that are multiples of the magic number and factors of the magic number\n    magic_indices = list(set(multiples) & set(factors))\n    # If there are no magic indices, return \"No magic today\"\n    if len(magic_indices) == 0:\n        return \"No magic today\"\n    # If there is one magic index, return the index\n    elif len(magic_indices) == 1:\n        return magic_indices[0]\n    # If there are two magic indices, return the indices in ascending order\n    else:\n        return tuple(sorted(magic_indices))\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        name = string\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n    # Write your code here\n   "}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    \n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    \n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            if char.islower():\n                result.append(vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n            else:\n                result.append(vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper())\n        elif char.lower() in consonants:\n            if char.islower():\n                result.append(consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n            else:\n                result.append(consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper())\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        elif char in ['?', '!']:\n            if i % 2 == 0:\n                result.append('!')\n            else:\n                result.append('?')\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 1\n    for i in range(len(lst)):\n        if i == len(lst) - 1:\n            pyramid.append('#' * level)\n        else:\n            pyramid.append('#' * (level + lst[i]))\n        level += lst[i]\n    return pyramid[::-1]\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        total = 0\n        while n > 1:\n            total += n // k\n            n //= k\n        return total\n\n    return sorted(sequence, key=lambda x: points(x, k), reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(len(prices) - days):\r\n        profit = prices[i + days] - prices[i]\r\n        if profit > max_profit:\r\n            max_profit = profit\r\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the starting position\n    start_row = 0\n    start_col = 0\n    for row in range(len(map)):\n        for col in range(len(map[row])):\n            if map[row][col] == 'S':\n                start_row = row\n                start_col = col\n                break\n        if start_row != 0 or start_col != 0:\n            break\n\n    # Initialize the path\n    path = [(start_row, start_col)]\n\n    # Process the instructions\n    for instruction in instructions:\n        if instruction == 'up':\n            if start_row > 0 and map[start_row - 1][start_col] != 'X':\n                start_row -= 1\n        elif instruction == 'down':\n            if start_row < len(map) - 1 and map[start_row + 1][start_col] != 'X':\n                start_row += 1\n        elif instruction == 'left':\n            if start_col > 0 and map[start_row][start_col - 1] != 'X':\n                start_col -= 1\n        elif instruction == 'right':\n            if start_col < len(map[start_row]) - 1 and map[start_row][start_col + 1] != 'X':\n                start_col += 1\n\n        # Check if the player has reached the end\n        if map[start_row][start_col] == 'E':\n            break\n\n        # Add the current position to the path\n        path.append((start_row, start_col))\n\n    return path\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Create a dictionary to store the order of the alien alphabet\n    alien_dict = {}\n    for i, char in enumerate(alien_dictionary):\n        alien_dict[char] = i\n\n    # Check if the word list is sorted correctly\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n\n        # Compare the words character by character\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            # If one word is a prefix of the other, the list is not sorted correctly\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\", \"Fire\"),\n        \"Taurus\": (\"April 20\", \"May 20\", \"Earth\"),\n        \"Gemini\": (\"May 21\", \"June 20\", \"Air\"),\n        \"Cancer\": (\"June 21\", \"July 22\", \"Water\"),\n        \"Leo\": (\"July 23\", \"August 22\", \"Fire\"),\n        \"Virgo\": (\"August 23\", \"September 22\", \"Earth\"),\n        \"Libra\": (\"September 23\", \"October 22\", \"Air\"),\n        \"Scorpio\": (\"October 23\", \"November 21\", \"Water\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\", \"Fire\"),\n        \"Capricorn\": (\"December 22\", \"January 19\", \"Earth\"),\n        \"Aquarius\": (\"January 20\", \"February 18\", \"Air\"),\n        \"Pisces\": (\"February 19\", \"March 20\", \"Water\"),\n    }\n    elements = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end, element) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                elements[element] += 1\n    return {element: count for element, count in elements.items() if count > 0}\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n"}
{"task_id": "EvoEval/84", "completion": "\ndef tree_traversal(tree):\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        dfs(node.get('left'), path)\n        dfs(node.get('right'), path)\n        path.pop()\n\n    paths = []\n    dfs(tree, [])\n    return paths\n\ntree = {1: {2: {4: {}, 5: {}}, 3: {6: {7: {}}}}}\nassert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]\n\ntree = {1: {2: {4: {}, 5: {7: {8: {}}}}, 3: {6: {}}}}\nassert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5, 7, 8], [1, 3, 6]]"}
{"task_id": "EvoEval/85", "completion": "\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    else:\n        return (coord[0] + coord[1]) * 2\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Sort the movies by ratings and release year\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n\n    # Extract the movie names from the sorted list\n    sorted_movie_names = [movie[0] for movie in sorted_movies]\n\n    return sorted_movie_names\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            new_dict[planet] = round(data[0] / data[1], 2)\n    return new_dict\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # Create a copy of the aliens list\n    remaining_aliens = aliens.copy()\n\n    # Find the index of the alien at the aimed position\n    aimed_index = remaining_aliens.index(ray)\n\n    # Destroy the alien at the aimed position\n    remaining_aliens.pop(aimed_index)\n\n    # Destroy any aliens in the adjacent positions\n    if aimed_index > 0:\n        remaining_aliens.pop(aimed_index - 1)\n    if aimed_index < len(remaining_aliens) - 1:\n        remaining_aliens.pop(aimed_index + 1)\n\n    # Return the remaining aliens' positions\n    return remaining_aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.add((int(s[i]), int(s[j])))\n        return combinations\n\n    def get_sum_of_combinations(combinations):\n        sum_of_combinations = 0\n        for combination in combinations:\n            sum_of_combinations += sum(combination)\n        return sum_of_combinations\n\n    combinations_s1 = get_combinations(s1)\n    combinations_s2 = get_combinations(s2)\n    sum_s1 = get_sum_of_combinations(combinations_s1)\n    sum_s2 = get_sum_of_combinations(combinations_s2)\n    return sum_s1 * sum_s2\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            elif action == 'Move':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                status = 'In Space'\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Create a list to store the layers of the fountain\n    layers = []\n    \n    # Loop through the number of layers\n    for i in range(n):\n        # Calculate the width of the current layer\n        width = 2 * i + 1\n        \n        # Calculate the number of letters to use for the current layer\n        letters = width // 2\n        \n        # Create the current layer\n        layer = ' ' * (width // 2) + 'A' * letters + 'A' * letters + ' ' * (width // 2)\n        \n        # Add the current layer to the list of layers\n        layers.append(layer)\n    \n    # Join the layers with newlines and return the result\n    return '\\n'.join(layers)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    if len(alien) == 0 or len(humans) == 0:\n        return []\n    for key in humans:\n        if not isinstance(key, str) or not isinstance(humans[key], str):\n            return []\n    continents = [\"Asia\", \"Africa\", \"Europe North\", \"North America\", \"South\"]\n    result = []\n    for cont in continents:\n        for key in humans:\n            if humans[key] == cont:\n                result.append(key)\n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for r in rounds:\n        for _ in range(r):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n"}
