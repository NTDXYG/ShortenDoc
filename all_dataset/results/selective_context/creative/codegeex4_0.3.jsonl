{"task_id": "EvoEval/0", "completion": "\n    shipping_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item_weight = 1\n            shipping_cost *= 15\n        else:\n            item_weight = item\n        if item_weight > 5:\n            shipping_cost += 10\n        shipping_cost += 50\n    if location == \"Local\":\n        shipping_cost *= 1\n    elif location == \"National\":\n        shipping_cost *= 1.5\n    elif location == \"International\":\n        shipping_cost *= 2\n    else:\n        shipping_cost *= 1\n    return round(shipping_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 50\n        if weight > 5:\n            base_cost += 10\n        total_cost += base_cost\n    if location == 'Local':\n        return round(total_cost, 2)\n    elif location == 'National':\n        return round(total_cost * 1.5, 2)\n    elif location == 'International':\n        return round(total_cost * 2.5, 2)\n    else:\n        return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(s: str, path: List[str], result: List[str]):\n        if not s:\n            result.append(''.join(path))\n            return\n        for i in range(1, min(3, len(s) + 1)):\n            num = int(s[:i])\n            if num > 26:\n                break\n            path.append(chr(ord('a') + num - 1))\n            backtrack(s[i:], path, result)\n            path.pop()\n    \n    result = []\n    backtrack(input_string, [], result)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    count = 0\n    for candle in candles:\n        if candle == tallest:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    \n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n    \n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n            if (i + j) % 2 == 0:\n                if j == cols - 1:\n                    i += 1\n                elif i == 0:\n                    j += 1\n                else:\n                    i -= 1\n                    j += 1\n            else:\n                if i == rows - 1:\n                    j += 1\n                elif j == 0:\n                    i += 1\n                else:\n                    i += 1\n                    j -= 1\n    \n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n    if grid[position[0]][position[1]] == 1:\n        return grid\n    if grid[position[0]][position[1]] == 0:\n        return grid\n    if grid[position[0]][position[1]] == -1:\n        grid[position[0]][position[1]] = 0\n        for i in range(max(0, position[0] - 1), min(len(grid), position[0] + 2)):\n            for j in range(max(0, position[1] - 1), min(len(grid[0]), position[1] + 2)):\n                if grid[i][j] == 1:\n                    grid[i][j] = 1\n                else:\n                    grid[i][j] = 0\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'Shang found'\r\n    else:\r\n        return 'Shangri not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    if canvas.count('P') != 1 or canvas.count('-') % canvas.count('P') == 0:\n        return 'Invalid canvas'\n    for i in range(len(canvas)):\n        if canvas[i] == '-':\n            if i < painter:\n                canvas[i] = '*'\n            elif i > painter:\n                canvas[i] = '*'\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {}\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chir'}\n    animal_list = []\n    count = 0\n    for char in animal_string:\n        if char in animal_sounds:\n            if animal_counts.get(char, 0) < 2:\n                animal_counts[char] = animal_counts.get(char, 0) + 1\n                count += 1\n                animal_list.append(animal_sounds[char])\n        if count == 5:\n            break\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    max_elements = [k for k, v in count.items() if v == max_count]\n    max_element = min(max_elements)\n    total_sum = sum(flux_values)\n    return total_sum * max_element\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    for elem, cnt in count.items():\n        if cnt == min_count:\n            return elem\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            alias += vowels[(index + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            alias += consonants[(index + 1) % len(consonants)]\n        elif char.isalpha():\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    hand = [int(card[:-1]) for card in hand]\n    hand.sort()\n    if hand.count(hand[0]) == 5:\n        return hand[0] * 4\n    elif hand.count(hand[0]) == 4:\n        return hand[0] * 3\n    elif hand.count(hand[0]) == 3 and hand.count(hand[3]) == 2:\n        return hand[0] * 2 + hand[3]\n    elif hand.count(hand[0]) == 3 and hand.count(hand[2]) == 2:\n        return hand[0] * 2 + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 3:\n        return hand[2] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 3:\n        return hand[3] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 3:\n        return hand[4] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 2:\n        return hand[0] * 2 + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 2:\n        return hand[0] * 2 + hand[3]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 2:\n        return hand[0] * 2 + hand[4]\n    else:\n        return 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        for i in range(2, n):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n        return sum(fib_sequence)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if wizard[1] >= dragon_hp:\n            return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return magical_seven(n-1) + 7\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_grid(word, grid):\n        n = len(grid)\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == word[0]:\n                    if is_word_in_grid_helper(word, grid, i, j):\n                        return True\n        return False\n\n    def is_word_in_grid_helper(word, grid, i, j):\n        if len(word) == 0:\n            return True\n        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid):\n            return False\n        if grid[i][j] != word[0]:\n            return False\n        grid[i][j] = '*'  # Mark the cell as visited\n        result = is_word_in_grid_helper(word[1:], grid, i-1, j) or \\\n                 is_word_in_grid_helper(word[1:], grid, i+1, j) or \\\n                 is_word_in_grid_helper(word[1:], grid, i, j-1) or \\\n                 is_word_in_grid_helper(word[1:], grid, i, j+1)\n        grid[i][j] = word[0]  # Unmark the cell\n        return result\n\n    for word in words:\n        if not is_word_in_grid(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9461000000000\n    distance = t * v\n    return distance / light_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word.lower())\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        count = sentence.lower().split().count(word.lower())\n        if count > word_count:\n            word_count = count\n            max_sentence = sentence\n    return word_count, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end are walls\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    # While the queue is not empty\n    while queue:\n        # Pop the first element from the queue\n        current, path = queue.pop(0)\n        # Add the current position to the visited set\n        visited.add(current)\n        # Check if the current position is the end\n        if current == end:\n            return path\n        # Get the neighbors of the current position\n        neighbors = get_neighbors(maze, current)\n        # For each neighbor\n        for neighbor in neighbors:\n            # Check if the neighbor has not been visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue with the current path\n                queue.append((neighbor, path + [get_direction(current, neighbor)]))\n    # If the queue is empty, there is no path\n    return []"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 1000:\n        return 0\n    elif taxable_income <= 3000:\n        return (taxable_income - 1000) * 0.15\n    elif taxable_income <= 13000:\n        return 450 + (taxable_income - 3000) * 0.25\n    else:\n        return 450 + 2250 + (taxable_income - 13000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                palindromes.add(substring)\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Initialize the queue with the start point\n    queue = [start]\n    # Initialize the visited set with the start point\n    visited = set([start])\n    # Initialize the parent dictionary with the start point\n    parent = {start: None}\n    # Initialize the distance dictionary with the start point\n    distance = {start: 0}\n    # Initialize the current point\n    current = start\n    # Initialize the shortest path\n    shortest_path = []\n    # Loop until the queue is empty or the end point is reached\n    while queue and current != end:\n        # Pop the current point from the queue\n        current = queue.pop(0)\n        # Get the neighbors of the current point\n        neighbors = get_neighbors(maze, current)\n        # Loop through the neighbors\n        for neighbor in neighbors:\n            # If the neighbor is not visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue\n                queue.append(neighbor)\n                # Add the neighbor to the visited set\n                visited.add(neighbor)\n                # Add the neighbor to the parent dictionary\n                parent[neighbor] = current\n                # Add the neighbor to the distance dictionary\n                distance[neighbor] = distance[current] + 1\n    # If the end point is reached\n    if current == end:\n        # Get the shortest path\n        shortest_path = get_shortest_path(parent, end)\n        # Reverse the shortest path\n        shortest_path.reverse()\n    # Return the shortest path\n    return shortest_path\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Create a copy of the playlist to avoid modifying the original list\n    shuffled_playlist = playlist.copy()\n    \n    # Initialize the seed\n    seed = seed\n    \n    # Get the length of the playlist\n    playlist_length = len(shuffled_playlist)\n    \n    # Iterate over the playlist\n    for i in range(playlist_length):\n        # Calculate the index to swap with\n        swap_index = seed % playlist_length\n        \n        # Check if the song title contains \"Rock\"\n        if \"Rock\" not in shuffled_playlist[i]:\n            # Swap the songs\n            shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        \n        # Update the seed\n        seed = (seed * 16807) % 2147\n    \n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # There is 1 way to reach the 0th step (starting point)\n    ways[0] = 1\n    # Iterate through each step\n    for i in range(1, n + 1):\n        # Iterate through each magic stone\n        for stone in magic_stones:\n            # If the stone's power is less than or equal to the current step\n            if stone <= i:\n                # Add the number of ways to reach the previous step to the current step\n                ways[i] += ways[i - stone]\n    # Return the number of ways to reach the nth step\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email or email[0] == \"@\" or email[-1] == \"@\" or email.count(\"@\") != 1 or email.count(\".\") != 1 or email.index(\"@\") == len(email) - 1 or email.index(\".\") == 0 or email.index(\"@\") > email.index(\".\"):\r\n        return False\r\n    else:\r\n        return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \";(\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":X\": \"\ufffd\ufffd\",\n        \":V\": \"\ufffd\ufffd\",\n        \":3\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":$\": \"\ufffd\ufffd\",\n        \":@\": \"\ufffd\ufffd\",\n        \":#\": \"\ufffd\ufffd\",\n        \":&\": \"\ufffd\ufffd\",\n        \":*\": \"\ufffd\ufffd\",\n        \":^\": \"\ufffd\ufffd\",\n        \":!\": \"\ufffd\ufffd\",\n        \":?\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \";(\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":X\": \"\ufffd\ufffd\",\n        \":V\": \"\ufffd\ufffd\",\n        \":3\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":$\": \"\ufffd\ufffd\",\n        \":@\": \"\ufffd\ufffd\",\n        \":#\": \"\ufffd\ufffd\",\n        \":&\": \"\ufffd\ufffd\",\n        \":*\": \"\ufffd\ufffd\",\n        \":^\": \"\ufffd\ufffd\",\n        \":!\": \"\ufffd\ufffd\",\n        \":?\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \";(\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":X\": \"\ufffd\ufffd\",\n        \":V\": \"\ufffd\ufffd\",\n        \":3\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":$\": \"\ufffd\ufffd\",\n        \":@\": \"\ufffd\ufffd\",\n        \":#\": \"\ufffd\ufffd\",\n        \":&\": \"\ufffd\ufffd\",\n        \":*\": \"\ufffd\ufffd\",\n        \":^\": \"\ufffd\ufffd\",\n        \":!\": \"\ufffd\ufffd\",\n        \":?\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \";(\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":X\": \"\ufffd\ufffd\",\n        \":V\": \"\ufffd\ufffd\",\n        \":3\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":$\": \"\ufffd\ufffd\",\n        \":@\": \"\ufffd\ufffd\",\n        \":#\": \""}
{"task_id": "EvoEval/39", "completion": "\n    return [('*' * (n + 2)) + '\\n'] + ['*' + (s * n) + '*' for _ in range(n)] + [('*' * (n + 2)) + '\\n']\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions)\n    for i in range(len(potions)):\n        for j in range(i+1, len(potions)):\n            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) == target:\n                return [potions[i], potions[j]]\n    return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to 0\n    min_energy = 0\n    \n    # Get the dimensions of the array\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    # Create a 2D array to store the minimum energy required to reach each cell\n    min_energy_arr = [[float('inf')] * cols for _ in range(rows)]\n    \n    # Set the energy required to reach the starting cell (0,0) to 0\n    min_energy_arr[0][0] = 0\n    \n    # Iterate through each cell in the array\n    for i in range(rows):\n        for j in range(cols):\n            # If the current cell is the safe cell, continue to the next cell\n            if arr[i][j] == 0:\n                continue\n            \n            # Check the neighboring cells\n            if i > 0 and min_energy_arr[i-1][j] != float('inf'):\n                min_energy_arr[i][j] = min(min_energy_arr[i][j], min_energy_arr[i-1][j] + arr[i][j])\n            if i < rows-1 and min_energy_arr[i+1][j] != float('inf'):\n                min_energy_arr[i][j] = min(min_energy_arr[i][j], min_energy_arr[i+1][j] + arr[i][j])\n            if j > 0 and min_energy_arr[i][j-1] != float('inf'):\n                min_energy_arr[i][j] = min(min_energy_arr[i][j], min_energy_arr[i][j-1] + arr[i][j])\n            if j < cols-1 and min_energy_arr[i][j+1] != float('inf'):\n                min_energy_arr[i][j] = min(min_energy_arr[i][j], min_energy_arr[i][j+1] + arr[i][j])\n    \n    # Return the minimum energy required to reach the safe cell\n    return min_energy_arr[rows-1][cols-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    def findlegendaryitem(player_input): ''' In a popular multiplayer online game players can acquire various items.Each item has a rarity value ranging 1 (common 5legIn a single game a player can acquire multiple items but with the condition the rarity each is uniqueThe player_input is a list representing items acquired by a player in a single game, where each represented its rarityYour task write a function determines if the player has acquired a legendary item (r 5) in the gameThe function should return True a legendary item has acquired and FalseFurther, if a legendary item has been acquired, the function should return the rarity of second most valuable that the player has acquiredIf the player has only acquired the legendary item, return -1.The function should able handle player_input lists of any length.Examples: find_legitem([1,]) == (True 4) find5])True - find1 3])False None]) None '''\n    \"\"\"\n    def findlegendaryitem(player_input):\n        legendary = [5]\n        if 5 in player_input:\n            return True\n        else:\n            return False\n    \"\"\"\n    def findlegendaryitem(player_input): ''' In a popular multiplayer online game players can acquire various items.Each item has a rarity value ranging 1 (common 5legIn a single game a player can acquire multiple items but with the condition the rarity each is uniqueThe player_input is a list representing items acquired by a player in a single game, where each represented its rarityYour task write a function determines if the player has acquired a legendary item (r 5) in the gameThe function should return True a legendary item has acquired and FalseFurther, if a legendary item has been acquired, the function should return the rarity of second most valuable that the player has acquiredIf the player has only acquired the legendary item, return -1.The function should able handle player_input lists of any length.Examples: find_legitem([1,]) == (True 4) find5])True - find1 3])False None]) None '''\n    \"\"\"\n    def findlegendaryitem(player_input):\n        legendary = [5]\n        if 5 in player_input:\n            return True\n        else:\n            return False\n    \"\"\"\n    def findlegendaryitem(player_input): ''' In a popular multiplayer online game players can"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.01\n    if duration > fuel:\n        return 'Insufficient fuel'\n    else:\n        remaining_fuel = fuel - (duration * fuel_consumption)\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i, -1, -1):\n            if arr[j] <= arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] <= arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if letter.isalpha():\n                        secret.append(letter.lower())\n        return secret\n    \"\"\"\n    def hiddenmessage(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for letter in word:\n                    if"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quant = log['quant']\n        if item in inventory:\n            inventory[item] += quant\n        else:\n            inventory[item] = quant\n    return {item: quant for item, quant in inventory.items() if quant > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111101': 'J', '010011': 'K', '101110': 'L', '000': 'M', '001': 'N', '0111': 'O', '00111': 'P', '11001': 'Q', '01001': 'R', '00000': 'S', '0001': 'T', '0110': 'U', '00100': 'V', '00011': 'W', '01010': 'X', '01110': 'Y', '001000': 'Z', '011111': '1', '0011100': '2', '0011010': '3', '0001100': '4', '0001010': '5', '110000': '6', '0101000': '7', '0001000': '8', '0000100': '9', '0000010': '0'\n    }\n    return ''.join(morse[i] for i in msg.split(' ') if i)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' '}\n    morse = ''\n    for char in text.upper():\n        morse += morse_dict[char] + ' '\n    return morse[:-1]\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            result += list_of_alphabets[list_of_alphabets.index(char) % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize the total number of orders fulfilled\n    total_orders = 0\n    \n    # Iterate through each batch\n    for i in range(m):\n        # Initialize the number of cookies baked in the current batch\n        cookies_baked = 0\n        \n        # Iterate through each order in the current batch\n        for j in range(n):\n            # If there are no more orders, break out of the loop\n            if not orders:\n                break\n            \n            # If the current order can be fulfilled in the current batch, add it to the total\n            if cookies_baked + orders[0] <= n:\n                cookies_baked += orders.pop(0)\n                total_orders += 1\n            else:\n                break\n    \n    return total_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('a') + (ord(char.lower()) - ord('a') + 1) % len(vowels)).upper()\n            else:\n                transformed += chr(ord('a') + (ord(char) - ord('a') + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('b') + (ord(char.lower()) - ord('a') + 1) % len(consonants)).upper()\n            else:\n                transformed += chr(ord('b') + (ord(char) - ord('a') + 1) % len(consonants))\n        else:\n            transformed += char\n        if i % 2 == 0 and char == '?':\n            transformed = transformed[:-1] + '!'\n        elif i % 2 == 1 and char == '!':\n            transformed = transformed[:-1] + '?'\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                return [(i, j)]\n    return []\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.islower():\n                index = alphabet.index(char)\n                new_index = (index + shift + i) % 26\n                result += alphabet[new_index]\n            else:\n                index = alphabet.index(char.lower())\n                new_index = (index + shift + i) % 26\n                result += alphabet[new_index].upper()\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += '/'\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, char in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_name\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n        else:\n            translated_phrase += char\n    translated_phrase = translated_phrase.title()\n    for i in range(len(translated_phrase)):\n        if translated_phrase[i] in vowels and i == 0:\n            translated_phrase = translated_phrase[:i] + 'xy' + translated_phrase[i:]\n        elif translated_phrase[i] in consonants and i == 0:\n            translated_phrase = translated_phrase[:i] + 'yz' + translated_phrase[i:]\n    return translated_phrase\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    happy_ants = 0\n    sugar_locations = set(sugar_locations)\n    for ant_position, direction in ant_positions:\n        if direction == \"right\":\n            for i in range(ant_position, path_length + 1):\n                if i in sugar_locations:\n                    happy_ants += 1\n                    break\n        else:\n            for i in range(ant_position, -1, -1):\n                if i in sugar_locations:\n                    happy_ants += 1\n                    break\n    return happy_ants\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 0:\n                if c.lower() in vowels:\n                    result.append(vowels[(vowels.index(c.lower()) + 1) % len(vowels)].upper())\n                else:\n                    result.append(vowels[(vowels.index(c.lower()) - 1) % len(vowels)].upper())\n            else:\n                if c.lower() in consonants:\n                    result.append(consonants[(consonants.index(c.lower()) + 1) % len(consonants)].upper())\n                else:\n                    result.append(consonants[(consonants.index(c.lower()) - 1) % len(consonants)].upper())\n        else:\n            result.append(c)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n\n    Write a function that takes a dictionary representing a recipe as input where the keys are the ingredients and quantities needed for one serving.The function should also take a conversion factor which represents number servings required.The function should return a new dictionary where the quantities of each ingredient are multiplied the conversion factor.The quantities in the recipe are integers and the conversion factor is a positive.Examples: >>> recipe_converter({\"flour\": 500,s 200,egg 3}, 2) {'fl 1000 400 6} >>>mil 250chocolate 75butter 50}, 3 750 225 'but 150 '''\n    \"\"\"\n    def recipe_conver(reci, conversion_factor): ''' Write a function that takes a dictionary representing a recipe as input where the keys are the ingredients and quantities needed for one serving.The function should also take a conversion factor which represents number servings required.The function should return a new dictionary where the quantities of each ingredient are multiplied the conversion factor.The quantities in the recipe are integers and the conversion factor is a positive.Examples: >>> recipe_converter({\"flour\": 500,s 200,egg 3}, 2) {'fl 1000 400 6} >>>mil 250chocolate 75butter 50}, 3 750 225 'but 150 '''\n    \"\"\"\n    new_recipe = {}\n    for ingredient, quantity in reci.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n    \"\"\"\n    Write a function that takes a dictionary representing a recipe as input where the keys are the ingredients and quantities needed for one serving.The function should also take a conversion factor which represents number servings required.The function should return a new dictionary where the quantities of each ingredient are multiplied the conversion factor.The quantities in the recipe are integers and the conversion factor is a positive.Examples: >>> recipe_converter({\"flour\": 500,s 200,egg 3}, 2) {'fl 1000 400 6} >>>mil 250chocolate 75butter 50}, 3 750 225 'but 150 '''\n    \"\"\"\n    def recipe_conver(reci, conversion_factor): ''' Write a function that takes a dictionary representing a recipe as input where the keys are the ingredients and quantities needed for"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\r\n    while p > 0:\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n        pyramid.append(p)\r\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in range(start, end + 1) if x % divisor == 0 and is_prime(x)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            if \"remove\" in ingredients:\n                for ingredient in ingredients[\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in ingredients:\n                for ingredient in ingredients[\"add\"]:\n                    final_order[food].append(ingredient)\n    return final_order\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    def rotate(arr):\n        return arr[-1:] + arr[:-1]\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n        return arr\n    if len(arr) == 0:\n        return True\n    if is_sorted(arr):\n        return True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr = swap(arr, i, j)\n                if is_sorted(arr):\n                    return True\n                arr = rotate(arr)\n                if is_sorted(arr):\n                    return True\n                arr = rotate(arr)\n                arr = swap(arr, i, j)\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    def shift(c):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n        return c\n\n    shifted = ''.join(shift(c) for c in s)\n    vowels = sum(1 for c in shifted if c.lower() in 'aeiou')\n    return shifted, vowels\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        tales = string.count(str(string))\n        fairy_tales.append(f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_treasures = 0\n    trips = 0\n\n    # Calculate the total number of treasures in the pyramid\n    for i in range(num_chambers):\n        for j in range(len(grid[i])):\n            num_treasures += grid[i][j]\n\n    # Calculate the number of trips needed to collect all treasures\n    trips = math.ceil(num_treasures / bag_capacity) * 2\n\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    special_chars = '!@#$%^&*()_+-=[]{}|;:,.<>?/`~'\n    digits = '0123456789'\n    output_str = ''\n    for char in input_str:\n        if char.lower() in vowels:\n            if char.islower():\n                output_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                output_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                output_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            else:\n                output_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n        elif char in digits:\n            output_str += str((int(char) + 1) % 10)\n        elif char in special_chars:\n            if char == '?':\n                if input_str.index(char) % 2 == 0:\n                    output_str += '!'\n                else:\n                    output_str += '?'\n            else:\n                output_str += char\n        else:\n            output_str += char\n    return output_str\n"}
{"task_id": "EvoEval/76", "completion": "\n\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = 1\n        while lst:\n            level_str = '#' * level\n            pyramid.append(level_str)\n            level += 2\n            lst = lst[level:]\n        return pyramid[::-1]\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = 1\n        while lst:\n            level_str = '#' * level\n            pyramid.append(level_str)\n            level += 2\n            lst = lst[level:]\n        return pyramid[::-1]\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = 1\n        while lst:\n            level_str = '#' * level\n            pyramid.append(level_str)\n            level += 2\n            lst = lst[level:]\n        return pyramid[::-1]\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = 1\n        while lst:\n            level_str = '#' * level\n            pyramid.append(level_str)\n            level += 2\n            lst = lst[level:]\n        return pyramid[::-1]\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = 1\n        while lst:\n            level_str = '#' * level\n            pyramid.append(level_str)\n            level += 2\n            lst = lst[level:]\n        return pyramid[::-1]\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = 1\n        while lst:\n            level_str = '#' * level\n            pyramid.append(level_str)\n            level += 2\n            lst = lst[level:]\n        return pyramid[::-1]\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        pyramid = []\n        level = "}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(n, k):\n        points = 0\n        while n > 1:\n            points += n // k\n            n //= k\n        return points\n\n    points = [calculate_points(n, k) for n in sequence]\n    sorted_sequence = [x for _, x in sorted(zip(points, sequence), reverse=True)]\n    return sorted_sequence\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(prices) < 2 or days > len(prices):\n        return 0\n    max_profit = 0\n    for i in range(len(prices) - days):\n        min_price = min(prices[i:i+days])\n        max_price = max(prices[i+days:])\n        profit = max_price - min_price\n        if profit > max_profit:\n            max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    Given a list of numbers, return a new list where each element is the sum of the previous elements in the original list.\n    \"\"\"\n    def cumulative_sum(numbers):\n        result = []\n        total = 0\n        for number in numbers:\n            total += number\n            result.append(total)\n        return result\n    \"\"\"\n    Given a list of numbers, return a new list where each element is the product of the previous elements in the original list.\n    \"\"\"\n    def cumulative_product(numbers):\n        result = []\n        total = 1\n        for number in numbers:\n            total *= number\n            result.append(total)\n        return result\n    \"\"\"\n    Given a list of numbers, return a new list where each element is the average of the previous elements in the original list.\n    \"\"\"\n    def cumulative_average(numbers):\n        result = []\n        total = 0\n        for i, number in enumerate(numbers):\n            total += number\n            result.append(total / (i+1))\n        return result\n    \"\"\"\n    Given a list of numbers, return a new list where each element is the difference between the previous and"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_order = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    zodiac_dates = {\n        \"Aries\": (3, 21, 4, 19),\n        \"Taurus\": (4, 20, 5, 20),\n        \"Gemini\": (5, 21, 6, 20),\n        \"Cancer\": (6, 21, 7, 22),\n        \"Leo\": (7, 23, 8, 22),\n        \"Virgo\": (8, 23, 9, 22),\n        \"Libra\": (9, 23, 10, 22),\n        \"Scorpio\": (10, 23, 11, 21),\n        \"Sagittarius\": (11, 22, 12, 21),\n        \"Capricorn\": (12, 22, 1, 19),\n        \"Aquarius\": (1, 20, 2, 18),\n        \"Pisces\": (2, 19, 3, 20)\n    }\n    elements = {\n        \"Fire\": 0,\n        \"Water\": 0,\n        \"Air\": 0,\n        \"Earth\": 0\n    }\n    for birthday in birthdays:\n        year, month, day = map(int, birthday.split(\"-\"))\n        for sign, dates in zodiac_dates.items():\n            if dates[0] <= month <= dates[2] and dates[1] <= day <= dates[3]:\n                elements[zodiac_signs[sign]] += 1\n    return {element: count for element, count in elements.items() if count > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_travers(tree): \n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            else:\n                dfs(node.get('left'), path)\n                dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_travers(tree): \n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            else:\n                dfs(node.get('left'), path)\n                dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_travers(tree): \n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            else:\n                dfs(node.get('left'), path)\n                dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_travers(tree): \n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            else:\n                dfs(node.get('left'), path)\n                dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_travers(tree): \n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            else:\n                dfs(node.get('left'), path)\n                dfs"}
{"task_id": "EvoEval/85", "completion": "\n    from collections import deque\n    q = deque([(0, 0, 0)])\n    visited = set()\n    while q:\n        x, y, steps = q.popleft()\n        if (x, y) == coord:\n            return steps\n        for dx, dy in [(0, 1), (1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]) and grid[nx][ny] == 0 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                q.append((nx, ny, steps + 1))\n    return -1\n"}
{"task_id": "EvoEval/86", "completion": "\n\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr or not arr[0]:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in planets.items() if population is not None and size is not None}\n    \"\"\"\n    def planet_population(planets):\n        return {planet: round(population / size, 2) for planet, (population,"}
{"task_id": "EvoEval/89", "completion": "\n    # Create a copy of the aliens array\n    remaining_aliens = aliens.copy()\n    \n    # Find the index of the alien at the aimed position\n    aimed_index = remaining_aliens.index(ray)\n    \n    # Destroy the alien at the aimed position\n    remaining_aliens.pop(aimed_index)\n    \n    # Destroy any aliens in the adjacent positions\n    if aimed_index > 0:\n        remaining_aliens.pop(aimed_index - 1)\n    if aimed_index < len(remaining_aliens) - 1:\n        remaining_aliens.pop(aimed_index + 1)\n    \n    return remaining_aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_unique_combinations(s):\n        unique_combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                unique_combinations.add(int(s[i] + s[j]))\n        return unique_combinations\n\n    s1_combinations = get_unique_combinations(s1)\n    s2_combinations = get_unique_combinations(s2)\n\n    result = 0\n    for num1 in s1_combinations:\n        for num2 in s2_combinations:\n            result += num1 * num2\n\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    \n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'On Ground':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for i in range(n):\n        layer = alphabet[i % 26] * (2 * i + 1)\n        result += layer.center(2 * n - 1) + '\\n'\n    return result\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            encoded_char = alphabet[(alphabet.index(char.lower()) + n) % 26]\n            encoded_message += encoded_char.upper() if char.isupper() else encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(spell.split(), key=len)) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m)-i-1]\n    return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North\", \"South\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        if is_prime(next_num):\n            sequence.append('prime')\n        else:\n            sequence.append(next_num)\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round in rounds:\n        for _ in range(round):\n            position = (position + music) % len(players)\n        players.pop(position)\n        position %= len(players)\n    return players\n"}
