{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    factor = 1\n    for item in items:\n        if isinstance(item, str):\n            factor *= 15\n            item = 1\n        total_cost += 50 * item\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        factor *= 1.5\n    elif location == 'International':\n        factor *= 2\n    total_cost *= factor\n    return f\"{total_cost:.2f}\"\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        if weight > 5:\n            total_cost += 10\n        total_cost += 50\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 25\n    else:\n        pass\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(char) for char in key)\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shift = key % 26\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                result += char\n        return result\n\n    return [caesar_cipher(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        res = [s[0]]\n        if len(s) > 1 and 10 <= int(s[:2]) <= 26:\n            res.append(s[:2])\n        for i in range(1, len(s)):\n            for word in helper(s[i:]):\n                res.append(s[0] + word)\n        return res\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle >= max_height:\n            lit_candles += 1\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    pass\n"}
{"task_id": "EvoEval/7", "completion": "\n    x = 0\n    y = 0\n    for i in code_sequence:\n        if i == 0:\n            y += 1\n        elif i == 1:\n            x += 1\n        elif i == 2:\n            y -= 1\n        elif i == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shang found'\n    else:\n        return 'Shangri not found'\n\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    if canvas.count('P') > 1 or canvas.count('*') % (canvas.count('-') + canvas.count('P')) == 0:\n        return 'Invalid canvas'\n    painter_index = canvas.index('P')\n    empty_spaces = canvas.count('-')\n    painted_spaces = 0\n    for i in range(painter_index, len(canvas)):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    for i in range(painter_index, -1, -1):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    if painted_spaces != empty_spaces:\n        return 'Invalid canvas'\n    return canvas\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    \r\n    for animal in animal_string.split():\r\n        if animal in animals:\r\n            if animal not in animal_count or animal_count[animal] < 2:\r\n                sounds.append(animal)\r\n                animal_count[animal] = animal_count.get(animal, 0) + 1\r\n                if len(animal_count) == 5:\r\n                    break\r\n    \r\n    return [animal_count[animal] for animal in sounds]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}Marvelous!\"\n    else:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} and {len(fruits)-2} more from {location}Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_count = Counter(flux_values).most_common(1)[0][1]\n    return sum(flux_values) * max_count\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.capitalize() if name[0].isupper() else alias.lower()\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if sum(int(digit) for digit in str(num)) == 7 and num % 7 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = sum(row.count(2) for row in m)\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] == 1:\n                danger += sum(1 for k in range(len(m[0])) if m[i][k] == 2 and k != j)\n                danger += sum(1 for k in range(len(m)) if m[k][j] == 2 and k != i)\n    return danger - vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    ascending = ','.join(str(i) for i in range(1, n + 1))\n    descending = ','.join(str(i) for i in range(n - 1, 0, -1))\n    return [ascending + descending]\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Check if all words are in the grid\n    for word in words:\n        if word not in ''.join(grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    # Constants\n    light_year = 9461.0  # in km\n    \n    # Calculate distance traveled\n    distance = t * v\n    \n    # Convert to light years\n    distance_light_years = distance / light_year\n    \n    return distance_light_years\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_numbers = [i for i in range(2, 27) if is_prime(i)]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            index = ord(char) - ord('a')\n            if index < len(prime_numbers):\n                result += str(prime_numbers[index])\n            else:\n                result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    text = text.lower()\n    word = word.lower()\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_frequency_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_sentence = sentence\n    return max_frequency, max_frequency_sentence.strip() if max_frequency_sentence else \"\"\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    directions = {(0, 1): 'right', (0, -1): 'left', (1, 0): 'down', (-1, 0): 'up'}\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0:\n                queue.append(((nx, ny), path + [directions[(dx, dy)]]))\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 0:\n        tax += min(taxable_income, 10000) * 0.15\n        taxable_income -= 10000\n    if taxable_income > 0:\n        tax += min(taxable_income, 25) * 0.25\n        taxable_income -= 25\n    if taxable_income > 0:\n        tax += min(taxable_income, 45) * 0.25\n        taxable_income -= 45\n    if taxable_income > 0:\n        tax += taxable_income * 0.3\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    pass\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day == m - 1:\n            transformation_percentages.append(0)\n        elif day < m - 1:\n            transformation_percentages.append(day * 10)\n        else:\n            transformation_percentages.append(100 - (day - m + 1) * 10)\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.startswith(\"@\") or email.endswith(\"@\"):\r\n        return False\r\n    at_index = email.index(\"@\")\r\n    if \".\" not in email[at_index + 1:]:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            result += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            result += new_char.upper() if char.isupper() else new_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \"D\": \"\ufffd\ufffd;\"\n    }\n    for emot, unicode_em in emoticons.items():\n        sentence = sentence.replace(emot, unicode_em)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    return asciiArt(n, s)\n"}
{"task_id": "EvoEval/40", "completion": "\n    from collections import defaultdict\n    import heapq\n    \n    # Create a dictionary to store the power level of each potion\n    potion_power = defaultdict(int)\n    for potion in potions:\n        name, power = potion.split()\n        potion_power[name] = int(power)\n    \n    # Create a priority queue to store the potions to mix\n    queue = [(-potion_power[potion], potion) for potion in potion_power]\n    heapq.heapify(queue)\n    \n    # Try to mix the potions to reach the target power level\n    mix_count = 0\n    mix_potion = []\n    while queue and target > 0:\n        power, potion = heapq.heappop(queue)\n        if -power <= target:\n            target -= -power\n            mix_count += 1\n            mix_potion.append(potion)\n        else:\n            heapq.heappush(queue, (power, potion))\n    \n    # If it is not possible to reach the target power level, return an empty list\n    if target > 0:\n        return []\n    \n    # Return the potions to mix in ascending order\n    return sorted(mix_potion)\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/42", "completion": "\ndef findlegendaryitem(player_input):\n    if 5 in player_input:\n        player_input.remove(5)\n        if len(player_input) == 0:\n            return True, -1\n        else:\n            player_input.sort(reverse=True)\n            return True, player_input[1]\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity\n    duration = distance / speed\n    remaining_fuel = fuel - fuel_consumption * duration\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q, w, e):\n        total_weight = sum(q)\n        if total_weight <= w:\n            return True\n        elif total_weight <= e:\n            return True\n        else:\n            return False\n    \n    # Test cases\n    print(fairy_tale_transport([5, 10, 15], 5, 20))  # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10))  # False\n    print(fairy_tale_transport([10, 20, 30], 5, 50))  # True\n    print(fairy_tale_transport([1, 2, 3], 5, 10))  # True\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 5))  # True\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 10))  # False\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 20))  # True\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 25))  # False\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 30))  # True\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 35))  # False\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 40))  # True\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 45))  # False\n    print(fairy_tale_transport([5, 10, 15, 15], 1, 50))  # True\n    print(fairy_tale_transport([5, 10, 15, 15], 1,"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hiddenmessage(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test:\n                if word[0].isalpha():\n                    secret += word[0]\n            result.append(secret.lower())\n        return result\n    \"\"\"\n    def hiddenmessage(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test:\n                if word[0].isalpha():\n                    secret += word[0]\n            result.append(secret.lower())\n        return result\n    \"\"\"\n    def hiddenmessage(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test:\n                if word[0].isalpha():\n                    secret += word[0]\n            result.append(secret.lower())\n        return result\n    \"\"\"\n    def hiddenmessage(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test:\n                if word[0].isalpha():\n                    secret += word[0]\n            result.append(secret.lower())\n        return result\n    \"\"\"\n    def hiddenmessage(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test:\n                if word[0].isalpha():\n                    secret += word[0]\n            result.append(secret.lower())\n        return result\n    \"\"\"\n    def hiddenmessage(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test:\n                if word[0].isalpha():\n                    secret += word[0]\n            result.append(secret.lower())\n        return result\n    \"\"\"\n    "}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quantity = log[\"quant\"]\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111101': 'J', '010011': 'K', '1011101101101010': 'L', '000': 'M', '1': 'N', 'U0010001': 'O', '011100110111100': 'P', '1': 'Q', '011100110111100': 'R', '011100110111100': 'S', '10000': 'T', '110001110011110': 'U', '11100': 'V', '11110': 'W', '11111': 'X', '011111': 'Y', '11100': 'Z', '10000': '0', '110001110011110': '1', '11100': '2', '11110': '3', '11111': '4', '011111': '5', '11100': '6', '11110': '7', '11111': '8', '011111': '9'}\n    decoded_message = \"\"\n    current_code = \"\"\n    for char in msg:\n        if char == \" \":\n            if current_code != \"\":\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n        elif char == \"/\":\n            if current_code != \"\":\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n            decoded_message += \" \"\n        else:\n            current_code += char\n    if current_code != \"\":\n        decoded_message += morse_code_dict[current_code]\n    return decoded_message.upper()"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    alphabet_index = 0\n    encoded_string = ''\n    \n    for char in string:\n        encoded_string += list_of_alphabets[alphabet_index % len(list_of_alphabets)]\n        alphabet_index += 1\n    \n    return encoded_string\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Calculate the maximum number of cookies that can be baked in one batch\n    max_cookies = n * m\n    # Initialize the total number of cookies baked\n    total_cookies = 0\n    # Initialize the maximum number of orders that can be fulfilled\n    max_orders = 0\n    # Iterate over the orders\n    for order in orders:\n        # If the total number of cookies baked plus the order is less than or equal to the maximum number of cookies that can be baked in one batch\n        if total_cookies + order <= max_cookies:\n            # Add the order to the total number of cookies baked\n            total_cookies += order\n            # Increment the maximum number of orders that can be fulfilled\n            max_orders += 1\n        else:\n            # If the total number of cookies baked plus the order is greater than the maximum number of cookies that can be baked in one batch\n            # Break the loop as we cannot fulfill any more orders\n            break\n    # Return the maximum number of orders that can be fulfilled\n    return max_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n            transformed = transformed.capitalize() if char.isupper() else transformed\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '!'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n            transformed = transformed.capitalize() if char.isupper() else transformed\n        elif char == '?':\n            transformed += '!' if i % 2 == 0 else '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = (i % shift) + 1\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            new_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += new_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    result = \"\"\n    for char in s:\n        if char != \" \":\n            result += morse_code_dict[char] + \" \"\n        else:\n            result += \"/ \"\n    return result.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for i, letter in enumerate(dish):\n            if letter.isalpha():\n                new_dish += magic_spell[i % len(magic_spell)]\n            else:\n                new_dish += letter\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            elif letter == ' ':\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word = 'xy' + new_word\n        else:\n            new_word = 'yz' + new_word\n        new_word = new_word[0].upper() + new_word[1:]\n        translated_phrase += new_word + ' '\n    return translated_phrase.strip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return [f\"{ingredient} {quantity}\" for ingredient, quantity in sorted_ingredients]\n"}
{"task_id": "EvoEval/60", "completion": "\n    happy_ants = 0\n    sugar_count = 0\n    for ant in ant_positions:\n        ant_position, direction = ant\n        if direction == \"right\":\n            for i in range(ant_position, path_length):\n                if i in sugar_locations:\n                    sugar_count += 1\n                    break\n        else:\n            for i in range(ant_position, -1, -1):\n                if i in sugar_locations:\n                    sugar_count += 1\n                    break\n        if sugar_count > 0:\n            happy_ants += 1\n    return happy_ants\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char.isalpha():\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                result += char\n        else:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    index = vowels.index(char.lower())\n                    if index == len(vowels) - 1:\n                        result += vowels[0].upper() if char.isupper() else vowels[0]\n                    else:\n                        result += vowels[index + 1].upper() if char.isupper() else vowels[index + 1]\n                else:\n                    index = consonants.index(char.lower())\n                    if index == 0:\n                        result += consonants[-1].upper() if char.isupper() else consonants[-1]\n                    else:\n                        result += consonants[index - 1].upper() if char.isupper() else consonants[index - 1]\n            else:\n                result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in reci.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    if p < 1:\n        return []\n    else:\n        result = [p]\n        while result[-1] > 0:\n            if result[-1] % 2 == 0:\n                result.append(result[-1] - 2)\n            else:\n                result.append(result[-1] - 3)\n        return result[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            for action, ingredient in order[food].items():\n                if action == \"remove\":\n                    if ingredient in new_ingredients:\n                        new_ingredients.remove(ingredient)\n                elif action == \"add\":\n                    new_ingredients.append(ingredient)\n            final_order[food] = new_ingredients\n        else:\n            final_order[food] = ingredients\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meal['calories']\n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return encrypted_string, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        digit_count = sum(c.isdigit() for c in string)\n        story = f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {digit_count} tales a day\"\n        result.append(story)\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the number of rows in the pyramid\n    num_rows = len(grid)\r\n\r\n    # Calculate the number of columns in the pyramid\r\n    num_cols = len(grid[0])\r\n\r\n    # Initialize the total number of trips required to collect all treasures\r\n    total_trips = 0\r\n\r\n    # Initialize the current row and column indices\r\n    row_idx = 0\r\n    col_idx = 0\r\n\r\n    # Initialize the number of treasures collected in the current trip\r\n    treasures_collected = 0\r\n\r\n    # Initialize the number of trips taken in the current trip\r\n    trips_taken = 0\r\n\r\n    # Initialize the number of treasures collected in the current chamber\r\n    treasures_in_chamber = 0\r\n\r\n    # Initialize the number of treasures collected in the current row\r\n    treasures_in_row = 0\r\n\r\n    # Initialize the number of treasures collected in the current column\r\n    treasures_in_col = 0\r\n\r\n    # Initialize the number of treasures collected in the current chamber\r\n    treasures_in_chamber = 0\r\n\r\n    # Initialize the number of treasures collected in the current row\r\n    treasures_in_row = 0\r\n\r\n    # Initialize the number of treasures collected in the current column\r\n    treasures_in_col = 0\r\n\r\n    # Initialize the number of treasures collected in the current chamber\r\n    treasures_in_chamber = 0\r\n\r\n    # Initialize the number of treasures collected in the current row\r\n    treasures_in_row = 0\r\n\r\n    # Initialize the number of treasures collected in the current column\r\n    treasures_in_col = 0\r\n\r\n    # Initialize the number of treasures collected in the current chamber\r\n    treasures_in_chamber = 0\r\n\r\n    # Initialize the number of treasures collected in the current row\r\n    treasures_in_row = 0\r\n\r\n    # Initialize the"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    return ''.join(cipher.get(c, c) for c in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\ndef createpyramid(lst):\n    if not lst:\n        return []\n    max_len = len(str(sum(lst)))\n    pyramid = []\n    for num in lst:\n        level = '#' * num\n        pyramid.append(level.center(max_len * 2 - 1))\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 0\n        else:\n            return n // k + points(n // k, k)\n    \n    return sorted([points(n, k) for n in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n\n    The time complexity of the above solution is O(n^2) which is not efficient. We can optimize it to O(n) by using a single pass approach. We can keep track of the minimum price seen so far and the maximum profit that can be made by selling the fruit at the current price. We can update the maximum profit whenever we find a price that is lower than the minimum price seen so far.\n    \"\"\"\n    min_price = prices[0]\n    max_profit = 0\n    for i in range(1, days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        else:\n            max_profit = max(max_profit, prices[i] - min_price)\n    return max_profit\n    \"\"\"\n    The time complexity of the above solution is O(n) which is more efficient than the previous solution.\n    \"\"\"\n    \"\"\"\n    The space complexity of the above solution is O(1) which is constant as we are not using any extra space that scales with the input size.\n    \"\"\"\n    \"\"\"\n    The above solution assumes that the vendor can only buy and sell the fruit once. If the vendor can buy and sell the fruit multiple times, the problem becomes more complex. In that case, we need to keep track of the minimum price seen so far and the maximum profit that can be made by selling the fruit at the current price after buying it at the minimum price seen so far. We can update the maximum profit whenever we find a price that is lower than the minimum price seen so far and the price that is higher than the maximum profit seen so far.\n    \"\"\"\n    min_price = prices[0]\n    max_profit = 0\n    for i in range(1, days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        else:\n            max"}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        start_row, start_col = next((i, j) for i, row in enumerate(map) for j, cell in enumerate(row) if cell == 'S')\n        path = [(start_row, start_col)]\n        \n        for instruction in instructions:\n            if instruction == 'up':\n                new_row = path[-1][0] - 1\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCOR\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCOR\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n        zodiac_sign = None\n        if (month == 3 and day >= 21) or (month == 4 and day <= 19):\n            zodiac_sign = \"Aries\"\n        elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n            zodiac_sign = \"Taurus\"\n        elif (month == 5 and day >= 21) or (month == 6 and day <= 21):\n            zodiac_sign = \"Gemini\"\n        elif (month == 6 and day >= 22) or (month == 7 and day <= 22):\n            zodiac_sign = \"Cancer\"\n        elif (month == 7 and day >= 23) or (month == 8 and day <= 23):\n            zodiac_sign = \"Leo\"\n        elif (month == 8 and day >= 24) or (month == 9 and day <= 22):\n            zodiac_sign = \"Virgo\"\n        elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n            zodiac_sign = \"Libra\"\n        elif (month == 10 and day >= 23) or (month"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/86", "completion": "\n\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.keys(), key=lambda x: (-m_dict[x][0], -m_dict[x][1]))\n        return sorted_movies\n\n    # Test cases\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Revenant\": [8.5, 2015]}\n    print(sort_movies_by_ratings_andrelease_date(movies_dict))  # Output: ['Interstellar', 'The Dark', 'The Revenant', 'Inception']\n\n    movies_dict = {\"Toy Story\": [8"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                new_dict[planet] = f\"{density}, {size}\"\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                new_dict[planet] = f\"{density}, {size}\"\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                new_dict[planet] = f\"{density}, {size}\"\n        return new_dict\n    \"\"\"\n    def planet_population(dict_ofplan):\n        new_dict = {}\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to lists of digits\n    digits1 = list(map(int, s1))\n    digits2 = list(map(int, s2))\n    \n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate over all unique combinations of digits from the two lists\n    for i in range(len(digits1)):\n        for j in range(len(digits2)):\n            result += digits1[i] * digits2[j]\n    \n    # Return the result\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_index = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            new_char = alphabet[new_index]\n            encoded_message += new_char.upper() if message[i].isupper() else new_char\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split())) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(sum_diag1 - sum_diag2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and lst[i] == product_of_digits(i):\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        encountered = []\n        for name, continent in humans.items():\n            if alien in continent:\n                encountered.append(name)\n        return encountered\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Initialize the list of players\n    players = list(range(1, n + 1))\n    # Initialize the current position\n    current_position = 0\n    # Loop through each round\n    for round_duration in rounds:\n        # Move the current position forward by the round duration\n        current_position = (current_position + round_duration) % n\n        # Eliminate the player at the current position\n        players.pop(current_position)\n        # If there is only one player left, break the loop\n        if len(players) == 1:\n            break\n    # Return the remaining player\n    return players[0] if len(players) == 1 else players\n"}
