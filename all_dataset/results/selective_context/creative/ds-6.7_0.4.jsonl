{"task_id": "EvoEval/0", "completion": "\n    base_shipping = 50\n    national_factor = 1\n    international_factor = 2\n    overweight_charge = 10\n    weight_per_item = 1\n    total_shipping = base_shipping\n\n    for item in items:\n        if isinstance(item, str):\n            item = weight_per_item\n        if item > 5:\n            total_shipping += (item - 5) * overweight_charge\n        total_shipping += item * base_shipping\n\n    if location == \"Local\":\n        pass\n    elif location == \"National\":\n        total_shipping *= national_factor\n    elif location == \"International\":\n        total_shipping *= international_factor\n\n    return round(total_shipping, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping = 50\n    national_factor = 1\n    international_factor = 2\n    weight_over_5kg_charge = 10\n    total_shipping = base_shipping\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        if weight > 5:\n            total_shipping += (weight - 5) * weight_over_5kg_charge\n        total_shipping += base_shipping\n    if location == \"Local\":\n        pass\n    elif location == \"International\":\n        total_shipping *= international_factor\n    else:\n        total_shipping *= national_factor\n    return round(total_shipping, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if not char.isalpha():\n                encrypted_word += char\n                continue\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n            encrypted_word += encrypted_char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    if not input_string:\n        return ['']\n    result = []\n    for i in range(1, 27):\n        if input_string[0] == str(i):\n            for suffix in magical_alphabet(input_string[1:]):\n                result.append(chr(96 + i) + suffix)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_height = candles[0]\n    lit_candles = 1\n\n    for i in range(1, len(candles)):\n        if candles[i] > max_height:\n            max_height = candles[i]\n            lit_candles += 1\n\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n    going_down = True\n\n    while len(result) < rows * cols:\n        result.append(matrix[row][col])\n        if going_down:\n            if col < cols - 1:\n                col += 1\n            else:\n                row += 1\n                going_down = False\n        else:\n            if col > 0:\n                col -= 1\n            else:\n                row += 1\n                going_down = True\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    x, y = position\n    if not (0 <= x < rows and 0 <= y < cols):\n        return grid\n    if grid[x][y] != -1:\n        return grid\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    grid[x][y] = 0\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == -1:\n            minesweeper_clicked(grid, (nx, ny))\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # your code here\n    canvas_list = list(canvas)\n    painter_position = canvas.index('P')\n    canvas_length = len(canvas)\n    painted_spaces = 0\n\n    while painter_position < canvas_length:\n        if canvas_list[painter_position] == '-':\n            canvas_list[painter_position] = '*'\n            painted_spaces += 1\n        elif canvas_list[painter_position] == '#':\n            break\n        else:\n            return 'Invalid canvas'\n\n        painter_position += 1\n\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.translate(str.maketrans('', '', st.punctuation)).lower()\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 0, 'D': 0, 'B': 0}\n    animal_count = {'C': 0, 'D': 0, 'B': 0}\n    sounds = animal_string.split()\n    result = []\n\n    for sound in sounds:\n        animal = sound[0]\n        if animal in animal_sounds.keys():\n            if animal_count[animal] < 2:\n                animal_sounds[animal] += sound.count('|')\n                animal_count[animal] += 1\n                if animal_count[animal] == 2:\n                    result.append(animal_sounds[animal])\n\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elements = [k for k, v in count_dict.items() if v == min_count]\n    return rarest_elements[0] if rarest_elements else None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.title()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [card[0] for card in hand]\n    counts = {value: values.count(value) for value in values}\n    score = 0\n\n    if sorted(counts.values()) == [1, 4]:\n        score = 25\n    elif sorted(counts.values()) == [2, 3]:\n        score = 20\n    elif sorted(counts.values()) == [1, 1, 3]:\n        score = 15\n    elif sorted(counts.values()) == [1, 1, 1, 2]:\n        score = 10\n    elif sorted(counts.values()) == [1, 1, 1, 1, 1]:\n        score = 5\n\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return sum(fib_seq)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num % 7 == 0 or '7' in str(num):\n            count += 1\n    return num\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans += 1\n\n    for v in vampires:\n        for i in range(len(m)):\n            if m[i][v[1]] == 1:\n                humans -= 1\n                break\n\n    for v in vampires:\n        for j in range(len(m[v[0]])):\n            if m[v[0]][j] == 1:\n                humans -= 1\n                break\n\n    return humans\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n+1):\n            result.append(str(i) + \",\" + str(n) + str(n-i+1)*(n-i))\n        return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Your code here\n    def is_valid(word):\n        N = len(grid)\n        for i in range(N):\n            for j in range(N):\n                if (j + len(word) <= N and set(grid[i][j:j+len(word)]) == set(word)) or \\\n                   (j - len(word) >= -1 and set(grid[i][j-len(word)+1:j+1]) == set(word)) or \\\n                   (set(grid[x][j] for x in range(i, i+len(word))) == set(word)) or \\\n                   (set(grid[x][j] for x in range(i-len(word), i)) == set(word)):\n                    return True\n        return False\n\n    return all(is_valid(word) for word in words)\n"}
{"task_id": "EvoEval/22", "completion": "\n    # Speed of light in km/s\n    c = 3 * 10**8\n\n    # Time in seconds\n    t_sec = t * 365 * 24 * 60 * 60\n\n    # Distance travelled\n    d = c * t_sec\n\n    # Distance light can travel in galaxy far\n    d_galaxy_far = d * 9461\n\n    return d_galaxy_far\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': 'h',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '(',\n        'l': ')',\n        'm': '=',\n        'n': 'o',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': 't',\n        'u': '>',\n        'v': 'u',\n        'w': '<',\n        'x': 'v',\n        'y': '{',\n        'z': '}',\n        ' ': '|'\n    }\n    alien_word = \"\"\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # split the text into sentences\n    sentences = text.split('.')\n    max_freq = 0\n    max_sentence = ''\n    # iterate over sentences\n    for sentence in sentences:\n        # count the frequency of word in sentence\n        freq = sentence.split().count(word)\n        # if frequency is more than max_freq update max_freq and max_sentence\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    # if max_freq is 0 return (0 \"\") else return (max_freq, max_sentence)\n    return (max_freq, max_sentence) if max_freq else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10:\n        return taxable_income * 0.1\n    elif taxable_income <= 35:\n        return 10 * 0.1 + (taxable_income - 10) * 0.15\n    elif taxable_income <= 70:\n        return 10 * 0.1 + 25 * 0.15 + (taxable_income - 35) * 0.25\n    else:\n        return 10 * 0.1 + 25 * 0.15 + 45 * 0.25 + (taxable_income - 70) * 0.30\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    result = set()\n    length = len(s)\n    for i in range(length):\n        for j in range(i+1, length+1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                result.add(substring)\n    return sorted(list(result))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the directions to move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Define the queue for BFS\n    queue = [(start, [])]\n\n    # Define the visited set\n    visited = set()\n\n    while queue:\n        # Dequeue the current node\n        (x, y), path = queue.pop(0)\n\n        # If the current node is the end node, return the path\n        if (x, y) == end:\n            return path + [(x, y)]\n\n        # Mark the current node as visited\n        visited.add((x, y))\n\n        # Add the neighbors to the queue\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(x, y)]))\n\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # Initialize the first row and first column to 1\n    for i in range(m+1):\n        dp[i][0] = 1\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    # Fill in the rest of the dp array\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m][n]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Initialize the seed\n    seed = seed % 2147483647\n    playlist_length = len(playlist)\n    new_playlist = playlist.copy()\n\n    for i in range(0, playlist_length, seed):\n        if \"Rock\" not in new_playlist[i]:\n            new_playlist[i], new_playlist[seed % playlist_length] = new_playlist[seed % playlist_length], new_playlist[i]\n        seed = (seed * 16807) % 2147483647\n\n    return new_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n\n    # There's only one way to reach the 0th step\n    ways[0] = 1\n\n    # For each magic stone\n    for magic_stone in magic_stones:\n        # For each step from the magic stone's power to the top\n        for i in range(magic_stone, n + 1):\n            # Add the number of ways to reach the current step to the number of ways to reach the step minus the magic stone's power\n            ways[i] += ways[i - magic_stone]\n\n    # Return the number of ways to reach the top step\n    return ways[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    if m <= n:\n        for i in range(n):\n            if i < m - 1:\n                transformation_percentages[i] = 10\n            elif i == m - 1:\n                transformation_percentages[i] = 20\n            else:\n                transformation_percentages[i] = transformation_percentages[i - 1] + 10\n                if transformation_percentages[i] > 100:\n                    transformation_percentages[i] = 100\n        for i in range(m, n):\n            transformation_percentages[i] = transformation_percentages[i - 1] - 10\n            if transformation_percentages[i] < 0:\n                transformation_percentages[i] = 0\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email and \".\" in email[email.index(\"@\")+1:]:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                new_s += vowels[(vowels.index(char)+1)%5]\n            else:\n                new_s += vowels[(vowels.index(char.lower())+1)%5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                new_s += consonants[(consonants.index(char)+1)%21]\n            else:\n                new_s += consonants[(consonants.index(char.lower())+1)%21].upper()\n        else:\n            new_s += char\n    return new_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\\U0001F600\",\n        \":(\": \"\\U0001F62D\",\n        \":D\": \"\\U0001F603\",\n        \";(\": \"\\U0001F625\",\n        \":|\": \"\\U0001F610\",\n        \":P\": \"\\U0001F60E\",\n        \":O\": \"\\U0001F62E\",\n        \":S\": \"\\U0001F615\",\n        \":*\": \"\\U0001F618\",\n        \":$\": \"\\U0001F614\",\n        \":^\": \"\\U0001F61C\",\n        \":&\": \"\\U0001F607\",\n        \":d\": \"\\U0001F603\",\n        \":<\": \"\\U0001F62C\",\n        \":>\": \"\\U0001F601\",\n        \":p\": \"\\U0001F60E\",\n        \":o\": \"\\U0001F62E\",\n        \":s\": \"\\U0001F615\",\n        \":x\": \"\\U0001F615\",\n        \":\": \"\\U0001F611\",\n        \"8)\": \"\\U0001F601\",\n        \"8|\": \"\\U0001F610\",\n        \"8D\": \"\\U0001F610\",\n        \"8O\": \"\\U0001F62E\",\n        \"8S\": \"\\U0001F615\",\n        \"8P\": \"\\U0001F60E\",\n        \"8O\": \"\\U0001F62E\",\n        \"8S\": \"\\U0001F615\",\n        \"8P\": \"\\U0001F60E\",\n        \"8)\": \"\\U0001F60"}
{"task_id": "EvoEval/39", "completion": "\n    # Split the string into a list of characters\n    chars = list(s)\n\n    # Create a list to store the ASCII art\n    art = []\n\n    # Loop through each character in the string\n    for char in chars:\n        # Convert the character to ASCII art\n        ascii_art = [char * n, char * n]\n\n        # Add the ASCII art to the list\n        art.append(ascii_art)\n\n    # Create the top and bottom of the U shape\n    top_bottom = ['*' * (len(art[0][0]) * 2), '*' * (len(art[0][0]) * 2)]\n\n    # Add the top and bottom to the ASCII art\n    art.insert(0, top_bottom)\n    art.append(top_bottom)\n\n    # Join the rows of the ASCII art into a single string\n    ascii_art = '\\n'.join(['*'.join(row) for row in art])\n\n    return ascii_art\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions, key=lambda x: (int(x.split()[1]), x))\n    left, right = 0, len(potions) - 1\n    while left < right:\n        sum_power = int(potions[left].split()[1]) + int(potions[right].split()[1])\n        if sum_power == target:\n            return [potions[left], potions[right]]\n        elif sum_power < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # get the dimensions of the array\n    rows = len(arr)\n    cols = len(arr[0])\n\n    # create a memoization table to store the minimum energy required to reach each cell\n    dp = [[float('inf')] * cols for _ in range(rows)]\n\n    # the spider starts at the top-left cell, so the minimum energy required to reach it is the value of the cell\n    dp[0][0] = arr[0][0]\n\n    # iterate over the cells in the array\n    for i in range(rows):\n        for j in range(cols):\n            # if the cell is not the top-left cell, calculate the minimum energy required to reach it\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n\n    # return the minimum energy required to reach the safe cell\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the fuel consumption per year\n    fuel_consumption = spaceship_weight * planet_gravity\n\n    # Calculate the duration of the trip\n    duration = distance / speed\n\n    # Calculate the remaining fuel after the trip\n    remaining_fuel = fuel - (fuel_consumption * duration)\n\n    # Check if the spaceship has enough fuel to reach the planet\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_hills = 0\n    for i in range(len(arr)):\n        left_hills = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_hills += 1\n            else:\n                break\n        max_hills = max(max_hills, left_hills)\n    return max_hills\n"}
{"task_id": "EvoEval/46", "completion": "\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n\n\n\n\"\"\"\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E',\n        '00100': 'F', '0000': 'G', '00101': 'H', '0111': 'I', '000': 'J',\n        '01000': 'K', '110': 'L', '00011': 'M', '00111': 'N', '00000': 'O',\n        '01111': 'P', '00010': 'Q', '101': 'R', '010': 'S', '111': 'T',\n        '001': 'U', '10010': 'V', '10000': 'W', '10111': 'X', '11000': 'Y',\n        '11100': 'Z', '11111': '0', '011111': '1', '001110': '2',\n        '000110': '3', '000010': '4', '000000': '5', '100000': '6',\n        '110000': '7', '111000': '8', '111100': '9'\n    }\n\n    words = msg.split('/')\n    decoded_msg = ''\n\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += ' '\n\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            if i % 2 == 0:\n                transformed_s += '!'\n            else:\n                transformed_s += char\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    shifted_message = ''\n    current_shift = shift\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if i % 2 == 0:\n                shift = current_shift\n            else:\n                shift = current_shift * 2\n            char = char.lower()\n            index = alphabet.index(char)\n            shifted_char = shifted_alphabet[index]\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            shifted_message += shifted_char\n        else:\n            shifted_message += char\n    return shifted_message\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..',\n        'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += '/'\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = \"\"\n        spell_index = 0\n        for letter in dish:\n            if letter.isalpha():\n                transformed_dish += chr((ord(letter) - ord('a') + spell_index) % 26 + ord('a'))\n                spell_index += 1\n            else:\n                transformed_dish += letter\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    english_to_alien = {\n        'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a',\n        'b': 'c', 'c': 'd', 'd': 'f', 'f': 'g', 'g': 'h',\n        'h': 'j', 'j': 'k', 'k': 'm', 'm': 'n', 'n': 'p',\n        'p': 'q', 'q': 'r', 'r': 's', 's': 't', 't': 'v',\n        'v': 'w', 'w': 'x', 'x': 'y', 'y': 'z', 'z': 'b'\n    }\n    alien_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        for char in word:\n            if char in vowels:\n                alien_phrase += english_to_alien[char]\n            elif char in consonants:\n                alien_phrase += english_to_alien[char]\n            elif char == ' ':\n                alien_phrase += '@'\n        if alien_phrase[-1] != '@':\n            alien_phrase += '@'\n    for i in range(len(alien_phrase)):\n        if alien_phrase[i] == '@':\n            if alien_phrase[i-1] in vowels:\n                alien_phrase = alien_phrase[:i] + 'xy' + alien_phrase[i:]\n            else:\n                alien_phrase = alien_phrase[:i] + 'yz' + alien_phrase[i:]\n    return alien_phrase.title()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return [tuple(sorted_ingredients[i] for i in range(len(sorted_ingredients)))]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants = 0\n    sugar_locations = set(sugar_locations)\n    ant_positions = list(ant_positions)\n    ant_positions.sort()\n\n    # March the ants\n    for ant_position, direction in ant_positions:\n        if direction == \"right\":\n            for i in range(ant_position, path_length):\n                if i in sugar_locations:\n                    sugar_locations.remove(i)\n                    happy_ants += 1\n                    break\n        else:\n            for i in range(ant_position, -1, -1):\n                if i in sugar_locations:\n                    sugar_locations.remove(i)\n                    happy_ants += 1\n                    break\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            transformed_string += ' '\n            continue\n        if i % 2 == 0:\n            if s[i] in vowels:\n                transformed_string += vowels[(vowels.index(s[i]) + 1) % 5]\n            elif s[i] in consonants:\n                transformed_string += consonants[(consonants.index(s[i]) - 1) % 21]\n            else:\n                transformed_string += s[i]\n        else:\n            if s[i] in vowels:\n                transformed_string += vowels[(vowels.index(s[i]) - 1) % 5]\n            elif s[i] in consonants:\n                transformed_string += consonants[(consonants.index(s[i]) + 1) % 21]\n            else:\n                transformed_string += s[i]\n    return transformed_string\n\n"}
{"task_id": "EvoEval/62", "completion": "\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if pyramid[-1] % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[:-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if i % divisor == 0 and is_prime(i)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food in order:\n        if food in menu:\n            final_order[food] = menu[food]\n            for ingredient in order[food]:\n                if ingredient[0] == \"+\":\n                    final_order[food].append(ingredient[1:])\n                elif ingredient[0] == \"-\":\n                    if ingredient[1:] in final_order[food]:\n                        final_order[food].remove(ingredient[1:])\n    return final_order\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n1, n2):\n        return sorted(str(n1)) == sorted(str(n2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n\n    return sorted(pairs)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            if arr[i+1:] == sorted(arr[i+1:]) and arr[:i+1] == sorted(arr[:i+1]):\n                return True\n            else:\n                return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted = \"\"\n    count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted[-1].lower() in vowels:\n                count += 1\n        else:\n            encrypted += char\n    return (encrypted, count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        count = 0\n        for j in i:\n            if j.isdigit():\n                count += 1\n        result.append(f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{i}' who was known for telling {count} tales a day.\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    total_chests = sum(sum(row) for row in grid)\n    chests_left = total_chests\n    chests_in_bag = 0\n\n    # While there are still chests to collect\n    while chests_left > 0:\n        # Find the chamber with the most chests\n        max_chests = max(sum(row) for row in grid)\n        max_chamber = [i for i, row in enumerate(grid) if sum(row) == max_chests][0]\n\n        # If the chamber has chests and the bag is not full\n        if max_chests > 0 and chests_in_bag < bag_capacity:\n            # Collect the chests\n            chests_in_bag += max_chests\n            chests_left -= max_chests\n            grid[max_chamber] = [0] * len(grid[max_chamber])\n\n        # If the bag is full or there are no more chests to collect\n        if chests_in_bag == bag_capacity or chests_left == 0:\n            # Empty the bag and start a new trip\n            chests_in_bag = 0\n            trips += 1\n\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    special_chars = '`~\\!@#$%^&*()-_=+[{]};:\\'\",.<>/?\\\\|`~'\n    transformed_str = ''\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            transformed_str += chr((ord(input_str[i]) - 97 + 1) % 26 + 97) if input_str[i].islower() else chr((ord(input_str[i]) - 65 + 1) % 26 + 65)\n        elif input_str[i] in consonants:\n            transformed_str += chr((ord(input_str[i]) - 97 + 1) % 22 + 98) if input_str[i].islower() else chr((ord(input_str[i]) - 65 + 1) % 22 + 66)\n        elif input_str[i] in digits:\n            transformed_str += str((int(input_str[i]) + 1) % 10)\n        elif input_str[i] in special_chars:\n            transformed_str += input_str[i]\n        elif input_str[i] == '?':\n            transformed_str += '!' if i % 2 != 0 else '?'\n    return transformed_str\n"}
{"task_id": "EvoEval/76", "completion": "\n"}
{"task_id": "EvoEval/77", "completion": "\n    from collections import Counter\n    counter = Counter(sequence)\n    res = [0] * len(sequence)\n    for i, num in enumerate(sequence):\n        while num % k == 0:\n            num /= k\n            res[i] += num\n        res[i] *= counter[num]\n    return sorted(res, reverse=True)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n):\n        res.append(mat[i][i])\n        if i != n // 2:\n            res.append(mat[i][n - i - 1])\n    return res\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not prices or days == 0:\n        return 0\n\n    max_profit = 0\n    min_price = prices[0]\n\n    for i in range(1, days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n\n\"\"\"\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    for word1, word2 in zip(word_list, word_list[1:]):\n        for c1, c2 in zip(word1, word2):\n            if alien_dict[c1] > alien_dict[c2]:\n                return \"INCORRECT\"\n            elif alien_dict[c1] < alien_dict[c2]:\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_elements = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        date = birthday.split(\"-\")[1]\n        zodiac = [key for key, value in zodiac_elements.items() if value == date][0]\n        elements[zodiac_elements[zodiac]] += 1\n    return {key: value for key, value in elements.items() if value != 0}\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n"}
{"task_id": "EvoEval/85", "completion": "\n    princess_x, princess_y = coord\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + 1)\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n    return dp[princess_x][princess_y] if dp[princess_x][princess_y] != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n\n\n\"\"\"\n    def sort_movies_byrat_andreleasedate(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark\": [8.4, 2012], \"Toy Story\": [8.3, 1995], \"Toy Story 2\": [8.3, 1999], \"Toy Story 3\": [8.3, 2010], \"Toy Story 4\": [8.3, 2019]}\n    print(sort_m_byrat_andreleasedate(movies_dict))\n\"\"\"\n"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral_coords(r1, c1, r2, c2):\n        for c in range(c1, c2 + 1):\n            yield r1, c\n        for r in range(r1 + 1, r2 + 1):\n            yield r, c2\n        if r1 < r2 and c1 < c2:\n            for c in range(c2 - 1, c1, -1):\n                yield r2, c\n            for r in range(r2, r1, -1):\n                yield r, c1\n\n    if not arr:\n        return ''\n    words = []\n    ans = []\n    r1, r2 = 0, len(arr) - 1\n    c1, c2 = 0, len(arr[0]) - 1\n    while r1 <= r2 and c1 <= c2:\n        word = ''\n        for r, c in spiral_coords(r1, c1, r2, c2):\n            word += arr[r][c]\n        words.append(word)\n        r1 += 1\n        r2 -= 1\n        c1 += 1\n        c2 -= 1\n    words.reverse()\n    for word in words:\n        ans.append(word[::-1])\n    return ''.join(ans)\n"}
{"task_id": "EvoEval/88", "completion": "\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [a for a in aliens if a != ray]\n    aliens = [a for a in aliens if a != ray - 1]\n    aliens = [a for a in aliens if a != ray + 1]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # Multiply the numbers\n    product = num1 * num2\n\n    # Convert the product to a string and return it\n    return str(product)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\" and distance > 0:\n            status = \"Moving Forward\"\n        elif action == \"Move\" and status == \"In Space\" and distance < 0:\n            status = \"Moving Backward\"\n        elif action == \"Land\" and (status == \"Moving Forward\" or status == \"Moving Backward\"):\n            status = \"In Space\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Initialize the fountain with a single layer\n    fountain = ['A']\n\n    # Initialize the alphabet\n    alphabet = 'ABCDEFGHIJKLMNOPQRGBCDEFGHI'\n\n    # Initialize the index for the alphabet\n    index = 0\n\n    # Loop through the layers of the fountain\n    for i in range(1, n):\n        # Add a new layer to the fountain\n        fountain.append(' ' * i + alphabet[index % 26] + ' ' * i)\n\n        # Increment the index for the alphabet\n        index += 1\n\n    # Join the layers of the fountain with newlines\n    fountain = '\\n'.join(fountain)\n\n    # Return the fountain\n    return fountain\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    \n    # Initialize the encoded message\n    encoded_message = ''\n    \n    # Iterate over the message\n    for i in range(len(message)):\n        # If the character is a letter\n        if message[i] in alphabet or message[i] in ALPHABET:\n            # Determine the shift\n            shift = n_values[i % len(n_values)]\n            \n            # Determine the alphabet to use\n            alpha = alphabet if message[i] in alphabet else ALPHABET\n            \n            # Shift the character\n            encoded_message += alpha[(alpha.index(message[i]) + shift) % len(alpha)]\n        else:\n            # If the character is not a letter, add it to the encoded message as is\n            encoded_message += message[i]\n    \n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    spell_list = []\n    for spell in strings:\n        words = spell.split(' ')\n        words.sort(key=len)\n        spell_list.append(' '.join(words))\n    return spell_list\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate the sum of the diagonals\n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return the absolute difference\n    return abs(sum_diag1 - sum_diag2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if i == 0 or i == 5:\n            if i == 0 and lst[i] == 0:\n                magic_indices.append(i)\n            elif i == 5 and lst[i] == 5:\n                magic_indices.append(i)\n        else:\n            product = 1\n            for digit in str(lst[i]):\n                product *= int(digit)\n            if product == i:\n                magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien_continent = None\n        alien_encounters = []\n        for human, continent in humans.items():\n            if alien in continent:\n                if alien_continent is None:\n                    alien_continent = continent\n                else:\n                    if continent.index(alien) < alien_continent.index(alien):\n                        alien_encounters.append(human)\n                        alien_continent = continent\n        return sorted(alien_encounters)\n\n    print(alien_invasion(\"Xenomorph\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\", \"Kling\": \"PeterAsiaPaulMaryEuropePaul\"}))\n    print(alien_invasion(\"PredEmily\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\", \"Kling\": \"PeterAsiaPaulMaryEuropePaul\"}))\n    print(alien_invasion(\"AlienBob\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\", \"Kling\": \"PeterAsiaPaulMaryEuropePaul\"}))\n    print(alien_invasion(\"Alice\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\", \"Kling\": \"PeterAsiaPaulMaryEuropePaul\"}))\n    print(alien_invasion(\"Bob\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\", \"Kling\": \"PeterAsiaPaulMaryEuropePaul\"}))\n    print(alien_invasion(\"Xenomorph\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\", \"Kling\": \"PeterAsiaPaulMaryEuropePaul\"}))\n    print(alien_invasion(\"Xenomorph\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\"}))\n    print(alien_invasion(\"Xenomorph\", {}))\n    print(alien_invasion(\"\", {\"John\": \"AsiaSarahEuropeMichaelNorthAnaAf\"}))\n    print(alien_invasion(123, {\"John\": \"AsiaSarahEuropeMichaelNorthAna"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [1, a, b]\n    for i in range(3, n):\n        sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round in rounds:\n        position = (position + round) % len(players)\n        del players[position]\n        position = position % len(players)\n    return players[0]\n\n"}
