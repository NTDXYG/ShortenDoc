{"task_id": "EvoEval/0", "completion": "\n    total_weight = 0\n    for item in items:\n        if isinstance(item, str):\n            total_weight += 1\n        else:\n            total_weight += item\n    base_cost = total_weight * 50\n    if location == 'Local':\n        total_cost = base_cost\n    elif location == 'International':\n        total_cost = base_cost * 2\n    else:\n        total_cost = base_cost * 1.5\n    if total_weight > 5:\n        total_cost += (total_weight - 5) * 10\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        if weight > 5:\n            total_cost += 10\n        total_cost += 50 * weight\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1\n    elif location == 'International':\n        total_cost *= 2\n    else:\n        pass\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                shifted_char = chr(((ord(char.lower()) - ord('a') + shift) % 26) + ord('a'))\n                encrypted_word += shifted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        shift = sum(ord(char) for char in key)\n    else:\n        shift = key\n\n    encrypted_words = [caesar_cipher(word, shift) for word in words]\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def magical_alph(input_string: str) -> List[str]:\n        if not input_string:\n            return ['']\n        \n        first_digit = int(input_string[0])\n        rest_string = input_string[1:]\n        \n        if first_digit == 0:\n            return []\n        \n        first_letter = chr(first_digit + ord('a') - 1)\n        \n        if len(input_string) == 1:\n            return [first_letter]\n        \n        second_digit = int(input_string[1])\n        \n        if second_digit <= 6:\n            second_letter = chr(second_digit + ord('a') - 1)\n            return [first_letter + second_letter] + magical_alph(rest_string[2:])\n        else:\n            return [first_letter] + magical_alph(rest_string[1:])\n    \n    return [''.join(combination) for combination in magical_alph(input_string)]\n"}
{"task_id": "EvoEval/4", "completion": "\n    max_height = 0\n    count = 0\n    for candle in candles:\n        if candle > max_height:\n            max_height = candle\n            count = 1\n        elif candle == max_height:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(matrix)):\n        if i % 2 == 0:\n            result.extend(matrix[i][::-1])\n        else:\n            result.extend(matrix[i])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] != 0:\n        return grid\n    grid[x][y] = 0\n    for i in range(max(0, x - 1), min(len(grid), x + 2)):\n        for j in range(max(0, y - 1), min(len(grid[0]), y + 2)):\n            if grid[i][j] == 1:\n                grid[x][y] += 1\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    if len(code_sequence) == 0:\n        return 'Shang not found'\n    if code_sequence[0] == 0 and code_sequence[-1] == 0:\n        return 'Shang found'\n    else:\n        return 'Shang not found'\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    if canvas.count('*') % (canvas.count('-') + canvas.count('P')) != 0:\n        return 'Invalid canvas'\n    painter_index = canvas.index('P')\n    painted_spaces = 0\n    for i in range(painter_index, len(canvas)):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    for i in range(painter_index, -1, -1):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    if painted_spaces % (canvas.count('-') + canvas.count('P')) != 0:\n        return 'Invalid canvas'\n    return canvas.replace('-', '*')\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lower case\n    string = string.lower().translate(str.maketrans('', '', string.punctuation))\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'me', 'D': 'wo', 'B': 'chir'}\r\n    sounds = []\r\n    animal_count = {'C': 0, 'D': 0, 'B': 0}\r\n    \r\n    for animal in animal_string.split():\r\n        if animal in animals and animal_count[animal] < 2:\r\n            sounds.append(len(animal) - 1)\r\n            animal_count[animal] += 1\r\n    \r\n    return sounds[:5]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}Marvelous!\"\n    else:\n        return f\"Oh are those {fruits[0]} from {location}Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_count = Counter(flux_values).most_common(1)[0][1]\n    sum_flux = sum(flux_values)\n    return sum_flux * max_count\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            alias += vowels[(index + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            alias += consonants[(index + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.capitalize()\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            wizard_name, wizard_magic = wizard.split()\n            wizard_magic = int(wizard_magic)\n            dragon_hp -= wizard_magic\n            if dragon_hp <= 0:\n                return wizard_name\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if num % 7 == 0 and sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                for k in range(len(m[i])):\n                    if m[i][k] == 1 and k != j:\n                        vampires += 1\n                for k in range(len(m)):\n                    if m[k][j] == 1 and k != i:\n                        vampires += 1\n    return vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    ascending = ''.join(str(i) for i in range(1, n + 1))\n    descending = ''.join(str(i) for i in range(n - 1, 0, -1))\n    return [ascending + descending]\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Check if all words are in the grid\n    for word in words:\n        if word not in grid:\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance = t * v\n    return distance\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_numbers = [i for i in range(2, 27) if is_prime(i)]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            index = ord(char) - ord('a')\n            if index < len(prime_numbers):\n                result += chr(ord('a') + prime_numbers[index])\n            else:\n                result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '(', 'l': ')', 'm': '=', 'n': 'o', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_dict[letter]\n    return translated_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    text = text.lower()\n    word = word.lower()\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    if max_frequency == 0:\n        return (0, \"\")\n    else:\n        return (max_frequency, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    directions = {(0, 1): 'right', (0, -1): 'left', (1, 0): 'down', (-1, 0): 'up'}\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0:\n                queue.append(((nx, ny), path + [directions[(dx, dy)]]))\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 0:\n        tax += min(10000, taxable_income) * 0.1\n        taxable_income -= 10000\n    if taxable_income > 0:\n        tax += min(25, taxable_income) * 0.15\n        taxable_income -= 25\n    if taxable_income > 0:\n        tax += min(45, taxable_income) * 0.25\n        taxable_income -= 45\n    if taxable_income > 0:\n        tax += taxable_income * 0.3\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    for i in range(playlist_length):\n        j = i + random.randint(0, playlist_length - i - 1)\n        playlist[i], playlist[j] = playlist[j], playlist[i]\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_stair(n - stone, magic_stones)\n    return count\n"}
{"task_id": "EvoEval/34", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email or email.index(\"@\") == 0 or email.index(\".\") < email.index(\"@\"):\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    xs = [float(x) for x in xs]\n    integral_xs = [0] + [x / (i + 1) for i, x in enumerate(xs)]\n    return integral_xs\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \":D\": \"D\ufffd\ufffd\",\n        \";)\": \"D\ufffd\ufffd;)\"\n    }\n    for emot, unicode_em in emoticons.items():\n        sentence = sentence.replace(emot, unicode_em)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the ASCII art\n    art = []\n    \n    # Create the top and bottom of the art\n    art.append(\"*\" * (n * len(s) + 2))\n    \n    # Create the middle of the art\n    for i in range(len(s)):\n        row = \"*\" + s[i] * n + \"*\"\n        art.append(row)\n    \n    # Create the bottom of the art\n    art.append(\"*\" * (n * len(s) + 2))\n    \n    # Return the art as a string\n    return \"\\n\".join(art)\n"}
{"task_id": "EvoEval/40", "completion": "\n    def mix_potion(potion, target):\n        name, power = potion.split()\n        if int(power) >= target:\n            return [potion]\n        else:\n            return []\n\n    def compare_potion(potion1, potion2):\n        if potion1[1] == potion2[1]:\n            return potion1[0] < potion2[0]\n        return potion1[1] < potion2[1]\n\n    def dfs(potions, target, path, result):\n        if target == 0:\n            result.append(path)\n            return\n        for potion in potions:\n            if target >= int(potion.split()[1]):\n                dfs(potions, target - int(potion.split()[1]), path + [potion], result)\n\n    result = []\n    dfs(potions, target, [], result)\n    if not result:\n        return []\n    return sorted(result, key=lambda x: (len(x), x))[0]\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_legitem(player_input):\n        if not player_input:\n            return None\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            unique_rarities.remove(5)\n            if unique_rarities:\n                return True, max(unique_rarities)\n            else:\n                return True, -1\n        else:\n            return False, -1\n    \n    # Test cases\n    assert find_legitem([1]) == (False, -1)\n    assert find_legitem([5]) == (True, -1)\n    assert find_legitem([1, 2, 3, 4, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5]) == (True, 4)\n    assert find_legitem([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == (True, 4)"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity\n    duration = distance / speed\n    remaining_fuel = fuel - fuel_consumption * duration\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    def can_carry(creatures, weight):\n        total_weight = sum(creatures)\n        return total_weight <= weight\n\n    unic_weight = sum(q)\n    dragons_weight = sum(w)\n    griffe_weight = sum(e)\n\n    return can_carry([unic_weight, dragons_weight, griffe_weight], w + e)\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hiddenmessage(testcases):\n        result = []\n        for test in testcases:\n            secret = ''\n            for word in test[0]:\n                for char in word:\n                    if char.isalpha():\n                        secret += char.lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hiddenmessage(testcases):\n        result = []\n        for test in testcases:\n            secret = ''\n            for word in test[0]:\n                for char in word:\n                    if char.isalpha():\n                        secret += char.lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hiddenmessage(testcases):\n        result = []\n        for test in testcases:\n            secret = ''\n            for word in test[0]:\n                for char in word:\n                    if char.isalpha():\n                        secret += char.lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hiddenmessage(testcases):\n        result = []\n        for test in testcases:\n            secret = ''\n            for word in test[0]:\n                for char in word:\n                    if char.isalpha():\n                        secret += char.lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hiddenmessage(testcases):\n        result = []\n        for test in testcases:\n            secret = ''\n            for word in test[0]:\n                for char in word:\n                    if char.isalpha():\n                        secret += char.lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hiddenmessage(testcases):\n        result = []\n        for test in testcases:\n            secret = ''\n            for word in test[0]:\n                for char in word:\n                    if char.is"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quant = log[\"quant\"]\n        if item in inventory:\n            inventory[item] += quant\n        else:\n            inventory[item] = quant\n    return {item: quant for item, quant in inventory.items() if quant > 0}\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quant = log[\"quant\"]\n        if item in inventory:\n            inventory[item] += quant\n        else:\n            inventory[item] = quant\n    return {item: quant for item, quant in inventory.items() if quant > 0}\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quant = log[\"quant\"]\n        if item in inventory:\n            inventory[item] += quant\n        else:\n            inventory[item] = quant\n    return {item: quant for item, quant in inventory.items() if quant > 0}\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quant = log[\"quant\"]\n        if item in inventory:\n            inventory[item] += quant\n        else:\n            inventory[item] = quant\n    return {item: quant for item, quant in inventory.items() if quant > 0}\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]"}
{"task_id": "EvoEval/49", "completion": "\n    pass\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'}\n    morse_text = ''\n    for char in text:\n        if char.isalpha():\n            morse_text += morse_dict[char.upper()] + ' '\n        elif char.isdigit():\n            morse_text += morse_dict[char] + ' '\n        elif char in morse_dict:\n            morse_text += morse_dict[char] + ' '\n        else:\n            morse_text += ' '\n    return morse_text.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    alphabet_index = 0\n    result = ''\n    for char in string:\n        result += list_of_alphabets[alphabet_index % len(list_of_alphabets)]\n        alphabet_index += 1\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    total_orders = sum(orders)\n    if total_orders % n == 0:\n        return total_orders // n\n    else:\n        return total_orders // n + 1\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if char.islower() else 'A'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1] if char.islower() else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'y':\n                transformed += 'b' if char.islower() else 'B'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1] if char.islower() else consonants[consonants.index(char.lower()) + 1].upper()\n        elif char == '?':\n            transformed += '!' if i % 2 == 0 else '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            new_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += new_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    morse_code = ''\n    for char in s:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    spell_index = 0\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for char in dish:\n            if char.isalpha():\n                new_dish += magic_spell[spell_index % len(magic_spell)]\n                spell_index += 1\n            else:\n                new_dish += char\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            elif letter == ' ':\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word = 'xy' + new_word\n        else:\n            new_word = 'yz' + new_word\n        translated_phrase += new_word + ' '\n    return translated_phrase.strip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return [f'{ingredient} {quantity}' for ingredient, quantity in sorted_ingredients]\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                if char.islower():\n                    result += char.upper()\n                else:\n                    result += char.lower()\n            else:\n                if char.lower() in vowels:\n                    index = vowels.index(char.lower())\n                    if index == len(vowels) - 1:\n                        result += vowels[0].upper() if char.isupper() else vowels[0]\n                    else:\n                        result += vowels[index + 1].upper() if char.isupper() else vowels[index + 1]\n                elif char.lower() in consonants:\n                    index = consonants.index(char.lower())\n                    if index == 0:\n                        result += consonants[-1].upper() if char.isupper() else consonants[-1]\n                    else:\n                        result += consonants[index - 1].upper() if char.isupper() else consonants[index - 1]\n                else:\n                    result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in reci.items():\n        converted_recipe[ingredient] = quantity * conversionfactor\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    if p < 1:\n        return []\n    else:\n        result = [p]\n        while p > 0:\n            if p % 2 == 0:\n                p -= 2\n            else:\n                p -= 3\n            result.append(p)\n        return result[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            for action, items in order[food].items():\n                if action == \"add\":\n                    new_ingredients.extend(items)\n                elif action == \"remove\":\n                    for item in items:\n                        if item in new_ingredients:\n                            new_ingredients.remove(item)\n            final_order[food] = new_ingredients\n        else:\n            final_order[food] = ingredients\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n + 1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i + 1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meal['calories']\n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or any(planet not in planets for planet in path):\r\n        return False\r\n    for i in range(len(path) - 1):\r\n        if path[i] not in planets[path[i + 1]]:\r\n            return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return encrypted_string, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for string in lst:\n        count = sum(c.isdigit() for c in string)\n        story = f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {count} tales a day.\"\n        output.append(story)\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the total number of treasures in the pyramid\n    total_treasures = sum(sum(row) for row in grid)\r\n    \r\n    # Calculate the number of trips needed to collect all treasures\r\n    trips = math.ceil(total_treasures / bag_capacity)\r\n    \r\n    return trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(c, c) for c in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\n\n    def createpyramid(lst):\n        if not lst:\n            return []\n        max_len = max(len(str(i)) for i in lst)\n        pyramid = []\n        for i in lst:\n            level = '#' * i\n            pyramid.append(level.center(max_len * 2 - 1))\n        return pyramid\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        max_len = max(len(str(i)) for i in lst)\n        pyramid = []\n        for i in lst:\n            level = '#' * i\n            pyramid.append(level.center(max_len * 2 - 1))\n        return pyramid\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        max_len = max(len(str(i)) for i in lst)\n        pyramid = []\n        for i in lst:\n            level = '#' * i\n            pyramid.append(level.center(max_len * 2 - 1))\n        return pyramid\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        max_len = max(len(str(i)) for i in lst)\n        pyramid = []\n        for i in lst:\n            level = '#' * i\n            pyramid.append(level.center(max_len * 2 - 1))\n        return pyramid\n    \"\"\"\n    def createpyramid(lst):\n        if not lst:\n            return []\n        max_len = max(len(str(i)) for i in lst)\n        "}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 1\n        else:\n            return (n // k) * points(n // k, k) + points(n % k, k)\n\n    return sorted([points(n, k) for n in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    result = []\n    n = len(mat)\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days+1):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    \"\"\"\n    def adventuregame(map, instructions):\n        start = None\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start = (i, j)\n                    break\n            if start:\n                break\n        if not start:\n            return []"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"COR\"\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCOR\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCOR\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\"Aries\": [], \"Taurus\": [], \"Gemini\": [], \"Cancer\": [], \"Leo\": [], \"Virgo\": [], \"Libra\": [], \"Scorpio\": [], \"Sagittarius\": [], \"Capricorn\": [], \"Aquarius\": [], \"Pisces\": []}\n    for date in birthdays:\n        month = int(date[5:7])\n        day = int(date[8:])\n        if month == 3 and day >= 21 or month == 4 and day <= 19:\n            zodiac_dict[\"Aries\"].append(date)\n        elif month == 4 and day >= 20 or month == 5 and day <= 20:\n            zodiac_dict[\"Taurus\"].append(date)\n        elif month == 5 and day >= 21 or month == 6 and day <= 20:\n            zodiac_dict[\"Gemini\"].append(date)\n        elif month == 6 and day >= 21 or month == 7 and day <= 22:\n            zodiac_dict[\"Cancer\"].append(date)\n        elif month == 7 and day >= 23 or month == 8 and day <= 22:\n            zodiac_dict[\"Leo\"].append(date)\n        elif month == 8 and day >= 23 or month == 9 and day <= 22:\n            zodiac_dict[\"Virgo\"].append(date)\n        elif month == 9 and day >= 23 or month == 10 and day <= 22:\n            zodiac_dict[\"Libra\"].append(date)\n        elif month == 10 and day >= 23 or month == 11 and day <= 21:\n            zodiac_dict[\"Scorpio\"].append(date)\n        elif month == 11 and day >= 22 or month == 12 and day <= 21:\n            zodiac_dict[\"Sagittarius\"].append(date)\n        elif month == 12 and day >= 22 or month == 1 and day <= 19:\n            zodiac_dict[\"Capricorn\"].append(date"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_travers(tree):\n        if not tree:\n            return []\n        if not tree.values():\n            return [[tree.keys()[0]]]\n        paths = []\n        for branch in tree.values():\n            for path in tree_travers(branch):\n                paths.append([tree.keys()[0]] + path)\n        return paths\n    \"\"\"\n    def tree_travers(tree):\n        if not tree:\n            return []\n        if not tree.values():\n            return [[tree.keys()[0]]]\n        paths = []\n        for branch in tree.values():\n            for path in tree_travers(branch):\n                paths.append([tree.keys()[0]] + path)\n        return paths\n    \"\"\"\n    def tree_travers(tree):\n        if not tree:\n            return []\n        if not tree.values():\n            return [[tree.keys()[0]]]\n        paths = []\n        for branch in tree.values():\n            for path in tree_travers(branch):\n                paths.append([tree.keys()[0]] + path)\n        return paths\n    \"\"\"\n    def tree_travers(tree):\n        if not tree:\n            return []\n        if not tree.values():\n            return [[tree.keys()[0]]]\n        paths = []\n        for branch in tree.values():\n            for path in tree_travers(branch):\n                paths.append([tree.keys()[0]] + path)\n        return paths\n    \"\"\"\n    def tree_travers(tree):\n        if not tree:\n            return []\n        if not tree.values():\n            return [[tree.keys()[0]]]\n        paths = []\n        for branch in tree.values():\n            for path in tree_travers"}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass"}
{"task_id": "EvoEval/86", "completion": "\n\n    def sort_movies_byrat_andreleasedate(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie for movie, _ in sorted_movies]\n\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Godfather\": [9.2, 1972], \"The Shawshank Redemption\": [9.3, 1994]}\n    print(sort_movies_byrat_andreleasedate(movies_dict))  # Output: ['Inception', 'Interstellar', 'The Godfather', 'The Shawshank Redemption', 'The Dark']\n    \"\"\"\n    def sort_movies_byrat_andreleasedate(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie for movie, _ in sorted_movies]\n\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark\": [9, 2008], \"Interstellar\": [8.6, 201"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    \n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planetpopulation(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] > 0 and features[1] > 0:\n                density = round(features[0] / features[1], 2)\n                new_dict[planet] = str(density) + ' 00'\n        return new_dict\n    \"\"\"\n    def planetpopulation(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] > 0 and features[1] > 0:\n                density = round(features[0] / features[1], 2)\n                new_dict[planet] = str(density) + ' 00'\n        return new_dict\n    \"\"\"\n    def planetpopulation(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] > 0 and features[1] > 0:\n                density = round(features[0] / features[1], 2)\n                new_dict[planet] = str(density) + ' 00'\n        return new_dict\n    \"\"\"\n    def planetpopulation(dict_ofplan):\n        new_dict = {}\n        for planet, features in dict_ofplan.items():\n            if len(features) == 2 and features[0] > 0 and features[1] > 0:\n                density = round(features[0] / features[1], 2)\n            "}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    for i in range(len(aliens)):\n        if aliens[i] == ray:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray - 1 or aliens[i] == ray + 1:\n            aliens.pop(i)\n            break\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to lists of digits\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n\n    # Generate all unique combinations of digits from both lists\n    combinations = []\n    for d1 in digits1:\n        for d2 in digits2:\n            combinations.append([d1, d2])\n\n    # Calculate the sum of each combination\n    sums = [sum(comb) for comb in combinations]\n\n    # Return the product of all sums\n    return reduce(lambda x, y: x * y, sums)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                if distance > 0:\n                    status = 'In Space'\n                elif distance < 0:\n                    status = 'On Ground'\n                else:\n                    return 'Invalid Action Sequence'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_position = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_position]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(sum_diag1 - sum_diag2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and lst[i] == product_of_digits(i):\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    def alien_inv(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        \n        continents = [\"Asia\", \"North\", \"South\", \"Europe\", \"Africa\"]\n        encountered = []\n        \n        for continent in continents:\n            for name, home in humans.items():\n                if home == continent:\n                    encountered.append(name)\n        \n        encountered.sort()\n        return encountered\n    \n    print(alien_inv(\"Xenomorph\", {\"John\": \"Asia\", \"Sarah\": \"Europe\", \"Michael\": \"North\", \"North\": \"Ana\", \"Ana\": \"Af\", \"Alice\": \"Af\", \"Bob\": \"Europe\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af\", \"Alice\": \"Bob\", \"Emily\": \"South\", \"Bob\": \"Europe\", \"Alice\": \"Af"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = []\n    for i in range(n):\n        if i == 0:\n            sequence.append(a)\n        elif i == 1:\n            sequence.append(b)\n        else:\n            sequence.append(sequence[i-1] + sequence[i-2])\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Create a list of players\n    players = list(range(1, n + 1))\n    # Initialize the current position\n    current = 0\n    # Loop through each round\n    for round in rounds:\n        # Move the current position forward by the round number\n        current = (current + round) % n\n        # Remove the player at the current position\n        players.pop(current)\n        # If there is only one player left, break the loop\n        if len(players) == 1:\n            break\n        # Move the current position forward by the music number\n        current = (current + music) % len(players)\n    # Return the last remaining player\n    return players[0]\n"}
