{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 50 * 1.5 * 15\n        else:\n            total_cost += 50 * 1.5\n            if item > 5:\n                total_cost += 10\n    if location == \"Local\":\n        return round(total_cost, 2)\n    elif location == \"National\":\n        return round(total_cost * 1.5, 2)\n    elif location == \"International\":\n        return round(total_cost * 2, 2)\n    else:\n        return round(total_cost, 2)  # Changed this line to return the total cost without any additional factor\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize total cost to 0\n    total_cost = 0\n    \n    # Iterate over each item in the list\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            weight = 1\n        # If the item is a float, use its value as the weight\n        elif isinstance(item, float):\n            weight = item\n        # If the item is neither a string nor a float, skip it\n        else:\n            continue\n        \n        # Add the base shipping cost to the total cost\n        total_cost += 50\n        \n        # If the item's weight is more than 5kg, add a charge of 10\n        if weight > 5:\n            total_cost += 10\n    \n    # Determine the location factor based on the location\n    if location == \"Local\":\n        factor = 1\n    elif location == \"National\":\n        factor = 1.5\n    elif location == \"International\":\n        factor = 2.5\n    else:\n        factor = 1\n    \n    # Calculate the total shipping cost by multiplying the total cost by the location factor\n    total_cost *= factor\n    \n    # Return the total shipping cost rounded to two decimal places\n    return round(total_cost, 2)  # Changed here\n"}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n    result = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 97 if char.islower() else 65\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        result.append(encrypted_word)\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    # Convert the input string to a list of integers\n    num_list = [int(digit) for digit in input_string]\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Define a helper function to generate all permutations\n    def generate_permutations(current_string, remaining_numbers):\n        # If there are no remaining numbers, add the current string to the result\n        if not remaining_numbers:\n            result.append(current_string)\n            return\n        \n        # For each number, generate all permutations\n        for i in range(len(remaining_numbers)):\n            # Get the current number\n            current_num = remaining_numbers[i]\n            \n            # Get the remaining numbers\n            remaining = remaining_numbers[:i] + remaining_numbers[i+1:]\n            \n            # Generate all permutations of the remaining numbers\n            generate_permutations(current_string + chr(96 + current_num), remaining)\n    \n    # Generate all permutations\n    generate_permutations('', num_list)\n    \n    # Return the result\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] > candles[i - 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    result = []\n    left, right = 0, len(matrix[0]) - 1\n    up, down = -1, 1\n\n    while left <= right:\n        for i in range(left, right + 1):\n            result.append(matrix[up][i])\n        up += down\n\n        for i in range(up, right + 1):\n            result.append(matrix[i][right])\n        right -= 1\n\n        if up > 0:\n            for i in range(right, left - 1, -1):\n                result.append(matrix[up][i])\n            up -= down\n\n        if left < right:\n            for i in range(up, left - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Get the x and y coordinates of the clicked cell\n    x, y = position\n    \n    # Check if the clicked cell is out of the grid\n    if x < 0 or x >= rows or y < 0 or y >= cols:\n        return grid\n    \n    # Check if the clicked cell is a mine\n    if grid[x][y] == 1:\n        return grid\n    \n    # Check if the clicked cell is already revealed\n    if grid[x][y] == 0:\n        return grid\n    \n    # Mark the clicked cell as revealed\n    grid[x][y] = 0\n    \n    # Check all adjacent cells (horizontally, vertically, and diagonally)\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the current cell\n            if dx == 0 and dy == 0:\n                continue\n            \n            # Calculate the coordinates of the adjacent cell\n            nx, ny = x + dx, y + dy\n            \n            # Check if the adjacent cell is within the grid\n            if 0 <= nx < rows and 0 <= ny < cols:\n                # Check if the adjacent cell is a mine\n                if grid[nx][ny] == 1:\n                    continue\n                \n                # Recursively reveal the adjacent cell\n                grid = minesweeper_clicked(grid, (nx, ny))\n    \n    # Return the updated grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        else:\r\n            return 'Shangri not found'\r\n    if x == 0 and y == 0:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri not found'\r\n\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into rows\n    rows = canvas.split('\\n')\n    \n    # Initialize a set to keep track of visited cells\n    visited = set()\n    \n    # Define the directions for DFS\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Perform DFS from each 'P' cell\n    for i in range(len(rows)):\n        for j in range(len(rows[i])):\n            if rows[i][j] == 'P':\n                # Mark the current cell as visited\n                visited.add((i, j))\n                \n                # Perform DFS from the current cell\n                stack = [(i, j)]\n                while stack:\n                    x, y = stack.pop()\n                    for dx, dy in directions:\n                        nx, ny = x + dx, y + dy\n                        if (0 <= nx < len(rows) and 0 <= ny < len(rows[nx]) and\n                                rows[nx][ny] == '-' and (nx, ny) not in visited):\n                            # Mark the new cell as visited and add it to the stack\n                            visited.add((nx, ny))\n                            stack.append((nx, ny))\n    \n    # Update the canvas with painted cells\n    for i in range(len(rows)):\n        for j in range(len(rows[i])):\n            if (i, j) in visited and rows[i][j] == '-':\n                rows[i] = rows[i][:j] + '*' + rows[i][j+1:]\n    \n    # Join the rows back into a string and return the result\n    return '\\n'.join(rows)\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lower case\n    string = ''.join(e for e in string if e.isalnum() or e.isspace()).lower()\n    # Split the string into words\n    words = string.split()\n    # Create a dictionary to store word frequencies\n    frequency = {}\n    # Iterate over each word\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # Otherwise, add the word to the dictionary with a count of 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Initialize an empty dictionary to store the count of each animal\n    animal_count = {}\r\n    \r\n    # Split the input string into a list of animal-sound pairs\r\n    animal_pairs = animal_string.split()\r\n    \r\n    # Initialize a counter to keep track of the total number of animals\r\n    total_animals = 0\r\n    \r\n    # Iterate over each animal-sound pair\r\n    for pair in animal_pairs:\r\n        # Check if the pair is not empty\r\n        if pair:\r\n            # Extract the animal from the pair\r\n            animal = pair[0]\r\n            \r\n            # Check if the animal is valid (i.e., it is 'C', 'D', or 'B')\r\n            if animal in ['C', 'D', 'B']:\r\n                # Increment the total number of animals\r\n                total_animals += 1\r\n                \r\n                # Check if the animal has already appeared twice before\r\n                if animal in animal_count:\r\n                    if animal_count[animal] >= 2:\r\n                        continue\r\n                    \r\n                # Increment the count of the animal in the dictionary\r\n                animal_count[animal] = animal_count.get(animal, 0) + 1\r\n                \r\n                # If the total number of animals has reached 5, break the loop\r\n                if total_animals == 5:\r\n                    break\r\n                    \r\n    # Convert the dictionary values to a list and return it\r\n    return list(animal_count.values())\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are those {', '.join(fruits[:-1])} and from {location}? Marvelous!\"\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Count the occurrence of each element in the list\n    count_dict = {}\n    for num in flux_values:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Find the element with the maximum occurrence\n    max_count = max(count_dict.values())\n    most_occurred = [num for num, count in count_dict.items() if count == max_count]\n    most_occurred.sort()  # Sort the list to get the smallest one\n\n    # Find the sum of all elements in the list\n    total_sum = sum(flux_values)\n\n    # Multiply the sum with the most occurred number\n    result = total_sum * most_occurred[0]\n\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for elem in elems:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    # Find the minimum frequency\n    min_freq = min(freq_dict.values())\n\n    # Find the rarest element(s) with the minimum frequency\n    rarest_elems = [elem for elem, freq in freq_dict.items() if freq == min_freq]\n\n    # Return the first rarest element\n    return rarest_elems[0] if rarest_elems else None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += 'e' if alias and alias[-1].lower() == 'e' else 'a' if alias and alias[-1].lower() == 'a' else 'i' if alias and alias[-1].lower() == 'i' else 'o' if alias and alias[-1].lower() == 'o' else 'u' if alias and alias[-1].lower() == 'u' else 'a'\n            else:\n                idx = consonants.index(char.lower())\n                alias += consonants[(idx + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Create a dictionary to store the count of each card value\n    card_count = {}\n    for card in hand:\n        value = card[0]\n        if value in ['J', 'Q', 'K']:\n            value = 11 if value == 'J' else 12 if value == 'Q' else 13\n        elif value == 'A':\n            value = 1\n        else:\n            value = int(value)\n        if value in card_count:\n            card_count[value] += 1\n        else:\n            card_count[value] = 1\n\n    # Initialize the score\n    score = 0\n\n    # Check for pairs, triples, four of a kind, and five of a kind\n    for value, count in card_count.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += value * 2\n        elif count == 4:\n            score += value * 3\n        elif count == 5:\n            score += value * 4\n\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return sum(fib_sequence)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard, magic in wizards:\n        dragon_hp -= magic\n        if dragon_hp <= 0:\n            return wizard\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    i = 1\n    while True:\n        if str(i) == '0' * (n - 1) + str(i % 7):\n            return i\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Initialize a variable to store the count of humans in danger\n    humans_in_danger = 0\n    \n    # Iterate over each row in the matrix\n    for i in range(len(m)):\n        # Iterate over each cell in the row\n        for j in range(len(m[i])):\n            # Check if the cell is a human\n            if m[i][j] == 1:\n                # Check if there is a vampire in the same row\n                if 2 in m[i]:\n                    # If there is a vampire in the same row, increment the count of humans in danger\n                    humans_in_danger += 1\n                # Check if there is a vampire in the same column\n                elif 2 in [m[k][j] for k in range(len(m))]:\n                    # If there is a vampire in the same column, increment the count of humans in danger\n                    humans_in_danger += 1\n    \n    # Return the count of humans in danger\n    return humans_in_danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Get the size of the grid\n    n = len(grid)\n    \n    # Define a helper function to check if a word can be found in the grid\n    def can_find_word(word):\n        # Check if the word can be found horizontally\n        for i in range(n):\n            for j in range(n - len(word) + 1):\n                if ''.join(grid[i][j:j+len(word)]) == word:\n                    return True\n        \n        # Check if the word can be found vertically\n        for i in range(n - len(word) + 1):\n            for j in range(n):\n                if ''.join([grid[i+k][j] for k in range(len(word))]) == word:\n                    return True\n        \n        # Check if the word can be found diagonally (top-left to bottom-right)\n        for i in range(n - len(word) + 1):\n            for j in range(n - len(word) + 1):\n                if ''.join([grid[i+k][j+k] for k in range(len(word))]) == word:\n                    return True\n        \n        # Check if the word can be found diagonally (bottom-left to top-right)\n        for i in range(n - len(word) + 1):\n            for j in range(len(word) - 1, n):\n                if ''.join([grid[i+k][j-k] for k in range(len(word))]) == word:\n                    return True\n        \n        # If the word cannot be found in any direction, return False\n        return False\n    \n    # Check if all words can be found in the grid\n    for word in words:\n        if not can_find_word(word):\n            return False\n    \n    # If all words can be found in the grid, return True\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = []\n    num = 2\n    while len(primes) < 26:\n        if all(num % p > 0 for p in primes):\n            primes.append(num)\n        num += 1\n\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += str(primes[ord(char) - 97])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict.get(char, '') for char in english_word.lower())  # Convert to lowercase to handle case-insensitive translation\n"}
{"task_id": "EvoEval/25", "completion": "\n    words = text.split()\r\n    word_count = {}\r\n    max_count = 0\r\n    max_sentence = \"\"\r\n    for i in range(len(words)):\r\n        if words[i] == \".\":\r\n            sentence = \" \".join(words[:i+1])\r\n            for w in words[:i+1]:\r\n                if w in word_count:\r\n                    word_count[w] += 1\r\n                else:\r\n                    word_count[w] = 1\r\n            max_count = max(max_count, word_count[word])\r\n            max_sentence = sentence\r\n    if word in word_count:\r\n        return (word_count[word], max_sentence)\r\n    else:\r\n        return (0, \"\")\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a queue for BFS, enqueue the start position\n    queue = [(start, [])]\n    # Create a set to store visited positions\n    visited = set([start])\n    # Define the possible movements (up, down, left, right)\n    movements = [(0, 1, 'right'), (0, -1, 'left'), (1, 0, 'down'), (-1, 0, 'up')]\n    while queue:\n        # Dequeue the next position and the path that led to it\n        (x, y), path = queue.pop(0)\n        # If this is the end position, return the path\n        if (x, y) == end:\n            return path\n        # For each possible movement\n        for dx, dy, direction in movements:\n            # Calculate the new position\n            nx, ny = x + dx, y + dy\n            # If the new position is inside the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 0) and ((nx, ny) not in visited):\n                # Mark the new position as visited\n                visited.add((nx, ny))\n                # Enqueue the new position and the updated path\n                queue.append(((nx, ny), path + [direction]))\n    # If the end position was not found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Define the tax rates and deductions\n    tax_rates = [(0, 0.0), (10000, 0.0), (25000, 0.15), (50000, 0.25), (float('inf'), 0.3)]\n    deductions = [(0, 0.0), (1000, 0.1), (3000, 0.2), (float('inf'), 0.3)]\n\n    # Calculate the taxable income\n    taxable_income = income - deductions[0][1] * min(income, deductions[0][0])\n\n    # Apply the tax rates\n    tax = 0\n    for i in range(len(tax_rates) - 1):\n        if taxable_income > tax_rates[i][0]:\n            tax += (tax_rates[i+1][0] - tax_rates[i][0]) * tax_rates[i+1][1]\n        else:\n            tax += (taxable_income - tax_rates[i][0]) * tax_rates[i+1][1]\n            break\n\n    # Apply the deductions\n    for i in range(len(deductions) - 1):\n        if deductions[i][0] < taxable_income:\n            taxable_income -= deductions[i][1] * min(taxable_income, deductions[i][0])\n        else:\n            taxable_income -= deductions[i][1] * (deductions[i][0] - deductions[i-1][0])\n            break\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    n = len(s)\n    # Initialize a 2D table to store whether each substring is a palindrome or not\n    dp = [[False] * n for _ in range(n)]\n    # Initialize a set to store unique palindrome substrings\n    pal_substrings = set()\n    # Iterate over all possible substrings\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            # If the substring has a length of 1, it's a palindrome\n            if length == 1:\n                dp[i][j] = True\n            # If the substring has a length of 2, it's a palindrome if the characters are the same\n            elif length == 2:\n                dp[i][j] = s[i] == s[j]\n            # If the substring has a length greater than 2, it's a palindrome if the first and last characters are the same and the substring in between is a palindrome\n            else:\n                dp[i][j] = s[i] == s[j] and dp[i + 1][j - 1]\n            # If the substring is a palindrome, add it to the set\n            if dp[i][j]:\n                pal_substrings.add(s[i:j + 1])\n    # Return the list of unique palindrome substrings, sorted in ascending order\n    return sorted(list(pal_substrings))"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the possible movements in the maze (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Create a queue for BFS, containing the start point\n    queue = [(start, [start])]\n    \n    # Create a set to store the visited points\n    visited = set([start])\n    \n    while queue:\n        # Dequeue the next point\n        (x, y), path = queue.pop(0)\n        \n        # If this is the end point, return the path\n        if (x, y) == end:\n            return path\n        \n        # For each possible movement\n        for dx, dy in movements:\n            nx, ny = x + dx, y + dy\n            \n            # If the new point is inside the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 1) and ((nx, ny) not in visited):\n                # Mark the new point as visited\n                visited.add((nx, ny))\n                \n                # Enqueue the new point\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    \n    # If no path is found, return an empty list\n    return []  # This line is not needed, but it's here to make the code compile\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # There is only one way to reach any cell in the first row or first column\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for j in range(n + 1):\n        dp[0][j] = 1\n    \n    # Fill in the rest of the 2D array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # The number of unique paths to a cell is the sum of the number of unique paths to the cell above it and the cell to its left\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    \n    # The number of unique paths to the bottom-right cell is stored in the bottom-right cell of the 2D array\n    return dp[m][n]\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    new_playlist = sorted(playlist)\n    seed = seed\n    for i in range(playlist_length):\n        if \"Rock\" not in new_playlist[i]:\n            new_index = (seed * 16807) % 2147483647 % playlist_length\n            new_playlist[i], new_playlist[new_index] = new_playlist[new_index], new_playlist[i]\n            seed = (seed * 16807) % 2147483647\n    return new_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\r\n    dp[0] = 1\r\n    for i in range(1, n + 1):\r\n        for stone in magic_stones:\r\n            if i >= stone:\r\n                dp[i] += dp[i - stone]\r\n    return dp[n]\r\n\r\n\r"}
{"task_id": "EvoEval/34", "completion": "\n    # Initialize an empty list to store transformation percentages\n    transformation_percentages = []\n    \n    # Calculate transformation percentage for each day in the cycle\n    for day in range(1, n + 1):\n        # If it's the most intense day, double the transformation percentage from the previous day\n        if day == m:\n            # If it's the first day, set the transformation percentage to 10\n            if day == 1:\n                transformation_percentage = 10\n            else:\n                transformation_percentage = transformation_percentages[-1] * 2\n            # Ensure the transformation percentage does not exceed 100\n            transformation_percentage = min(transformation_percentage, 100)\n        # If it's before the most intense day, increase the transformation percentage by 10\n        elif day < m:\n            transformation_percentage = transformation_percentages[-1] + 10\n            # Ensure the transformation percentage does not exceed 100\n            transformation_percentage = min(transformation_percentage, 100)\n        # If it's after the most intense day, decrease the transformation percentage by 10\n        else:\n            transformation_percentage = transformation_percentages[-1] - 10\n            # Ensure the transformation percentage is not less than 0\n            transformation_percentage = max(transformation_percentage, 0)\n        \n        # Append the transformation percentage to the list\n        transformation_percentages.append(int(transformation_percentage))\n    \n    # Return the list of transformation percentages\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or email.count(\"@\") > 1 or email.count(\".\") < 1:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    integral_coefficients = [0] * n\n    integral_coefficients[0] = xs[0]\n    for i in range(1, n):\n        integral_coefficients[i] = xs[i] / (i + 1)\n    return integral_coefficients\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    punctuation = '.,!?:;\\'\\\"'\n    digits = '0123456789'\n    result = ''\n    for char in s:\n        if char in vowels:\n            if char.islower():\n                result += 'e'\n            else:\n                result += 'E'\n        elif char in consonants:\n            if char.islower():\n                result += chr((ord(char) - ord('a') + 1) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + 1) % 26 + ord('A'))\n        elif char in punctuation:\n            result += char\n        elif char in digits:\n            result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \"\ufffd\ufffd\",\n        \":|\": \"\ufffd\ufffd\",\n        \":/\": \"\ufffd\ufffd\",\n        \":S\": \"\ufffd\ufffd\",\n        \":L\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":)\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \":P\": \"\ufffd\ufffd\",\n        \":O\": \""}
{"task_id": "EvoEval/39", "completion": "\n    # First, we create the top and bottom frames of the ASCII art\n    frame = \"*\" * (n * len(s) + 3)\n    \n    # Then, we create the first row of the ASCII art\n    ascii_art = \"*\" + \"*\" * n + \"*\\n\"\n    \n    # Next, we create the middle rows of the ASCII art\n    for i in range(n):\n        # For each row, we add the first character of the frame, then the characters of the string repeated n times, and finally the last character of the frame\n        ascii_art += \"*\" + s * n + \"*\\n\"\n    \n    # Finally, we add the last row of the ASCII art, which is the same as the first row\n    ascii_art += \"*\" + \"*\" * n + \"*\"\n    \n    # We return the complete ASCII art\n    return frame + \"\\n\" + ascii_art + frame\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions.sort(key=lambda x: (int(x[1]), x[0]))\n    target = 0\n    result = []\n    for potion in potions:\n        if target >= int(potion[1]):\n            continue\n        while target < int(potion[1]):\n            target += int(potion[1])\n            result.append(potion[0])\n    if target == 0:\n        return []\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows, cols = len(arr), len(arr[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = arr[0][0]\n    for i in range(rows):\n        for j in range(cols):\n            if arr[i][j] == 0:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return min(dp[-1])  # return the minimum energy required to reach the safe cell\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player has acquired a legendary item\n    if 5 in player_input:\n        # If the player has acquired a legendary item, remove it from the list\n        player_input.remove(5)\n        # Sort the list in descending order\n        player_input.sort(reverse=True)\n        # Return True and the rarity of the second most valuable item\n        return True, player_input[1] if len(player_input) > 1 else -1\n    # If the player has not acquired a legendary item, return False and None\n    return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    trip_duration = distance / speed\n    \n    # Check if the spaceship can reach the planet\n    if fuel >= trip_duration:\n        # Calculate the fuel consumption for the trip\n        fuel_consumption = (spaceship_weight * planet_gravity) * trip_duration\n        \n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        \n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if the spaceship cannot reach the planet\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q,w,e):\n        return sum(q) <= w + e\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    max_view = 0\n    for i in range(n):\n        view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                view += 1\n            elif arr[j] == arr[i]:\n                view += 1\n                break\n            else:\n                break\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                view += 1\n            elif arr[j] == arr[i]:\n                view += 1\n                break\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hiddenmessage(test_cases):\n        secret = \"Take the cannoli.\"\n        result = []\n        for case in test_cases:\n            words = [word.replace(',', '').replace('.', '').replace('?', '').replace('!', '').replace('\\'', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace('?', '').replace"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quant']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}  # Filter out items with quantity 0 or less\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111101', 'K': '010011', 'L': '1011101', 'M': '1101011', 'N': '1110111', 'O': '0001111', 'P': '01101111', 'Q': '1111011', 'R': '1110111', 'S': '1111011', 'T': '01111', 'U': '0010001', 'V': '011100110111100', 'W': '011100110111100', 'X': '1111001', 'Y': '1111001', 'Z': '1111111', '1': '01111', '2': '00111000110000100000', '3': '10000', '4': '110001110011110', '5': '011111', '6': '00111000110000100000', '7': '10000', '8': '110001110011110', '9': '011111', '0': '0000000'\n    }\n    msg = msg.split('/')\n    decoded_msg = ''\n    for word in msg:\n        word = word.split()\n        for char in word:\n            decoded_msg += list(morse_code.keys())[list(morse_code.values()).index(char)]\n    return decoded_msg\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'}\n    text = text.upper()\n    morse = ''\n    for char in text:\n        if char != ' ':\n            morse += morse_code[char] + ' '\n        else:\n            morse += '  '\n    return morse.strip()  # remove leading/trailing spaces\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[ord(char) - ord('a')]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # First, sort the orders in descending order to maximize the number of orders fulfilled\n    orders.sort(reverse=True)\n    \n    # Initialize the total number of orders fulfilled to 0\n    total_orders = 0\n    \n    # Initialize the remaining capacity of the oven to 0\n    remaining_capacity = 0\n    \n    # Iterate over each order\n    for order in orders:\n        # If the order is greater than the remaining capacity, we cannot fulfill this order\n        if order > remaining_capacity:\n            # So, we add the order to the total number of orders fulfilled\n            total_orders += 1\n            # And reset the remaining capacity to the order\n            remaining_capacity = order\n        # If the order is less than or equal to the remaining capacity, we can fulfill this order\n        else:\n            # So, we subtract the order from the remaining capacity\n            remaining_capacity -= order\n    \n    # Return the total number of orders fulfilled\n    return total_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i, c in enumerate(s):\n        if c in vowels:\n            if i % 2 == 0:\n                if c.isupper():\n                    result += chr(ord(c) + 1)\n                else:\n                    result += chr(ord(c) + 1)\n            else:\n                if c.isupper():\n                    result += chr(ord(c) - 1)\n                else:\n                    result += chr(ord(c) - 1)\n        elif c.isalpha():\n            if c.isupper():\n                result += chr((ord(c) - ord('A') + 1) % 26 + ord('A'))\n            else:\n                result += chr((ord(c) - ord('a') + 1) % 26 + ord('a'))\n        else:\n            result += c\n        if i % 2 == 0 and c == '?':\n            result = result[:-1] + '!' + result[-1]\n        elif i % 2 != 0 and c == '!':\n            result = result[:-1] + '?' + result[-1]\n    return result\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift = 0\n    for char in message:\n        if char.isalpha():\n            shift += 1\n            shift %= 26\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    words = s.split()\n    morse_code = ''\n    for word in words:\n        for char in word:\n            morse_code += morse_code_dict.get(char, '') + ' '\n        morse_code += '/ '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += magic_spell[i % len(magic_spell)]\n        new_menu[transformed_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in earth_phrase:\n        if char in vowels:\n            if char == 'a':\n                result += 'e'\n            elif char == 'e':\n                result += 'i'\n            elif char == 'i':\n                result += 'o'\n            elif char == 'o':\n                result += 'a'\n            elif char == 'u':\n                result += 'a'\n        elif char in consonants:\n            if char == 'z':\n                result += 'b'\n            else:\n                idx = consonants.index(char)\n                result += consonants[idx + 1]\n        elif char == ' ':\n            result += '@'\n        elif char.isalpha():\n            if char.isupper():\n                result += char\n            else:\n                result += char.upper()\n                if char in vowels:\n                    result += 'xy'\n                else:\n                    result += 'yz'\n    return result\n"}
{"task_id": "EvoEval/59", "completion": "\n    # First, we sort the dictionary items based on the number of recipes in descending order and then by the ingredient name in ascending order\n    sorted_items = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Then, we create a list of tuples where each tuple contains the ingredient and the number of recipes\n    result = [(f\"{ingredient} {count}\") for ingredient, count in sorted_items]\n    \n    # Finally, we return the result\n    return result\n"}
{"task_id": "EvoEval/60", "completion": "\n    sugar_locations = set(sugar_locations)\n    happy_ants_count = 0\n    for ant_position, direction in ant_positions:\n        while ant_position < path_length:\n            if ant_position in sugar_locations:\n                happy_ants_count += 1\n            if direction == \"left\":\n                ant_position += 1\n            else:\n                ant_position -= 1\n    return happy_ants_count"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 1:\n                if c.islower():\n                    result.append(c.upper())\n                else:\n                    result.append(c.lower())\n            else:\n                if c.lower() in vowels:\n                    if c.lower() == 'a':\n                        result.append('e')\n                    elif c.lower() == 'e':\n                        result.append('i')\n                    elif c.lower() == 'i':\n                        result.append('o')\n                    elif c.lower() == 'o':\n                        result.append('u')\n                    elif c.lower() == 'u':\n                        result.append('a')\n                else:\n                    if c.lower() == 'b':\n                        result.append('z')\n                    elif c.lower() == 'c':\n                        result.append('y')\n                    elif c.lower() == 'd':\n                        result.append('x')\n                    elif c.lower() == 'f':\n                        result.append('v')\n                    elif c.lower() == 'g':\n                        result.append('b')\n                    elif c.lower() == 'h':\n                        result.append('n')\n                    elif c.lower() == 'j':\n                        result.append('m')\n                    elif c.lower() == 'k':\n                        result.append('l')\n                    elif c.lower() == 'l':\n                        result.append('k')\n                    elif c.lower() == 'm':\n                        result.append('j')\n                    elif c.lower() == 'n':\n                        result.append('h')\n                    elif c.lower() == 'p':\n                        result.append('s')\n                    elif c.lower() == 'q':\n                        result.append('r')\n                    elif c.lower() == 'r':\n                        result.append('q')\n                    elif c.lower() == 's':\n                        result.append('p')\n                    elif c.lower() == 't':\n                        result.append('u')\n                    elif c.lower() == 'v':\n                        result.append('f')\n                    elif c.lower() == 'w':\n                        result.append('c')\n                    elif c.lower() == 'x':\n                        result.append('d')\n                    elif c.lower() == 'y':\n                        result.append('g')\n                    elif c.lower() == 'z':\n                        result.append('b')\n        else:\n            result.append(c)\n    return ''.join(result)Python"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in reci.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n    return pyramid[::-1]  # Return the list in reverse order\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Create a copy of the original menu to avoid modifying it directly\n    final_order = menu.copy()\n    \n    # Iterate over each food item in the order\n    for food, ingredients in order.items():\n        # If the food item is in the menu\n        if food in final_order:\n            # If there are ingredients to be removed\n            if \"remove\" in ingredients:\n                # Remove the ingredients to be removed from the final order\n                final_order[food] = [i for i in final_order[food] if i not in ingredients[\"remove\"]]\n            # If there are ingredients to be added\n            if \"add\" in ingredients:\n                # Add the ingredients to be added to the final order\n                final_order[food].extend(ingredients[\"add\"])\n    \n    # If the order dictionary is empty, return the original menu\n    if not order:\n        return menu\n    \n    # Return the final order\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_nums = [i for i in range(1, n + 1) if is_prime(i)]\n    prime_anagrams = []\n    for i in range(len(prime_nums)):\n        for j in range(i + 1, len(prime_nums)):\n            if is_anagram(prime_nums[i], prime_nums[j]):\n                prime_anagrams.append((prime_nums[i], prime_nums[j]))\n    prime_anagrams.sort()\n    return prime_anagrams\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        result[customer] = sum(meal['calories'] for meal in meals.get(customer, []))\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        if arr[0] > arr[1]:\n            return False\n        return True\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            if i == 0:\n                return False\n            if i == n - 2:\n                return True\n            if arr[i + 1] > arr[i + 2]:\n                return True\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the indices of the cards\n    card_indices = {card: i for i, card in enumerate(cards)}\n    \n    # Iterate over the cards\n    for i in range(len(cards)):\n        # For each card, iterate over the remaining cards\n        for j in range(i + 1, len(cards)):\n            # If the product of the two cards equals the magic number\n            if cards[i] * cards[j] == magicNumber:\n                # Return the indices of the two cards\n                return (card_indices[cards[i]], card_indices[cards[j]])\n    \n    # If no pair of cards multiplies to the magic number, return \"No magic today\"\n    return \"No magic today\"  # This line is not needed, but it's here to make the code compile\n"}
{"task_id": "EvoEval/70", "completion": "\n    # Check if the path list is empty or if the planet does not exist in the dictionary\n    if not path or path[0] not in planets or path[-1] not in planets:\r\n        return False\r\n\r\n    # Iterate over the path list\n    for i in range(len(path) - 1):\r\n        # Check if the current planet connects directly to the next planet\r\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\r\n            return False\r\n\r\n    # If the function has not returned False, the path is valid\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    result = \"\"\n    vow_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if char.lower() in 'aeiou':\n                vow_count += 1\n        else:\n            result += char\n    return result, vow_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i, string in enumerate(lst):\n        count = sum(c.isdigit() for c in string)\n        story = f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {count} tales a day\"\n        output.append(story)\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables to keep track of the total number of treasures and the number of trips\n    total_treasures = 0\r\n    num_trips = 0\r\n\r\n    # Iterate over each chamber in the pyramid\n    for chamber in grid:\r\n        # Count the number of treasures in the current chamber\r\n        num_treasures = chamber.count(1)\r\n        # Add the number of treasures in the current chamber to the total number of treasures\r\n        total_treasures += num_treasures\r\n\r\n        # Calculate the number of trips needed to collect all treasures in the current chamber\r\n        # This is done by dividing the number of treasures by the bag capacity and rounding up to the nearest integer\r\n        # We add 1 to the result because we need to make a separate trip to enter the pyramid\r\n        num_trips += math.ceil(num_treasures / bag_capacity) + 1\r\n\r\n    # Return the total number of trips needed to collect all treasures\r\n    return num_trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            idx = (vowels.index(char) + 1) % len(vowels)\n            result += vowels[idx]\n        elif char in consonants:\n            idx = (consonants.index(char) + 1) % len(consonants)\n            result += consonants[idx]\n        elif char in digits:\n            idx = (int(char) + 1) % 10\n            result += str(idx)\n        elif char == '?':\n            if i % 2 == 0:\n                result += '!'\n            else:\n                result += '?'\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    level = 0\n    while lst:\n        level += 1\n        level_sum = sum(lst)\n        level_str = '#' * level_sum\n        pyramid.append(level_str)\n        lst = [x - 1 for x in lst if x > 1]\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    # Initialize an empty list to store the total points for each number in the sequence\n    total_points = []\n    \n    # Iterate over each number in the sequence\n    for num in sequence:\n        # Initialize a variable to store the total points for the current number\n        points = 0\n        \n        # Initialize a variable to store the current divisor\n        divisor = num\n        \n        # Continue dividing the number by k until it reaches 1\n        while divisor > 1:\n            # Add the current number to the total points\n            points += num\n            \n            # Divide the number by k\n            divisor //= k\n        \n        # Add the total points for the current number to the list\n        total_points.append(points)\n    \n    # Sort the list in decreasing order\n    total_points.sort(reverse=True)\n    \n    # Return the sorted list\n    return total_points\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                pattern.append(mat[i][j])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize a list to store the maximum profit for each day\n    max_profit = [0] * (days + 1)\r\n    # Iterate over each day\n    for i in range(1, days + 1):\r\n        # Initialize the maximum profit for the current day to 0\r\n        max_profit[i] = 0\r\n        # Iterate over each previous day\n        for j in range(i):\r\n            # Calculate the profit if the vendor buys the fruit on the current day and sells it on the next day\r\n            profit = prices[i - 1] - prices[j - 1] + max_profit[j]\r\n            # Update the maximum profit for the current day\r\n            max_profit[i] = max(max_profit[i], profit)\r\n    # Return the maximum profit for the last day\r\n    return max_profit[days]\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    start_row = None\n    start_col = None\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                start_row = i\n                start_col = j\n                break\n        if start_row is not None:\n            break\n    path = [(start_row, start_col)]\n    for instruction in instructions:\n        new_row = start_row\n        new_col = start_col\n        if instruction == 'up' and start_row > 0 and map[start_row - 1][start_col] != 'X':\n            new_row -= 1\n        elif instruction == 'down' and start_row < len(map) - 1 and map[start_row + 1][start_col] != 'X':\n            new_row += 1\n        elif instruction == 'left' and start_col > 0 and map[start_row][start_col - 1] != 'X':\n            new_col -= 1\n        elif instruction == 'right' and start_col < len(map[0]) - 1 and map[start_row][start_col + 1] != 'X':\n            new_col += 1\n        if map[new_row][new_col] == 'E':\n            return path\n        if (new_row, new_col) != (start_row, start_col):\n            path.append((new_row, new_col))\n        start_row = new_row\n        start_col = new_col\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Create a dictionary to store the mapping of alien characters to their corresponding English characters\n    alien_map = {}\n    for i, char in enumerate(alien_dictionary):\n        alien_map[char] = i\n\n    # Iterate over the list of words\n    for i in range(len(word_list) - 1):\n        # Get the current and next words\n        current_word = word_list[i]\n        next_word = word_list[i + 1]\n\n        # Initialize two pointers, one for each word\n        j = 0\n        k = 0\n\n        # Compare the characters of the two words\n        while j < len(current_word) and k < len(next_word):\n            # If the current character of the current word is less than the current character of the next word, return \"INCORRECT\"\n            if alien_map[current_word[j]] < alien_map[next_word[k]]:\n                break\n            # If the current character of the current word is greater than the current character of the next word, return \"INCORRECT\"\n            elif alien_map[current_word[j]] > alien_map[next_word[k]]:\n                return \"INCORRECT\"\n            # Move to the next character in both words\n            j += 1\n            k += 1\n        # If the current word is a prefix of the next word, return \"INCORRECT\"\n        if j < len(current_word) and k < len(next_word):\n            return \"INCORRECT\"\n\n    # If the function hasn't returned \"INCORRECT\" by now, the list of words is sorted correctly, so return \"CORRECT\"\n    return \"CORRECT\" if len(word_list) > 0 else \"CORRECT\"  # Return \"CORRECT\" even if the list is empty\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Initialize an empty dictionary to store the count of each element\n    elements = {'Fire': 0, 'Water': 0, 'Air': 0, 'Earth': 0}\n    \n    # Loop through each birthday in the list\n    for birthday in birthdays:\n        # Extract the month and day from the birthday string\n        month, day = birthday.split('-')[1:3]\n        \n        # Determine the zodiac sign based on the month and day\n        if (int(month) == 3 and int(day) >= 21) or (int(month) == 4 and int(day) <= 19):\n            # Aries is Fire\n            elements['Fire'] += 1\n        elif (int(month) == 4 and int(day) >= 20) or (int(month) == 5 and int(day) <= 20):\n            # Taurus is Earth\n            elements['Earth'] += 1\n        elif (int(month) == 5 and int(day) >= 21) or (int(month) == 6 and int(day) <= 20):\n            # Gemini is Air\n            elements['Air'] += 1\n        elif (int(month) == 6 and int(day) >= 21) or (int(month) == 7 and int(day) <= 22):\n            # Cancer is Water\n            elements['Water'] += 1\n        elif (int(month) == 7 and int(day) >= 23) or (int(month) == 8 and int(day) <= 22):\n            # Leo is Fire\n            elements['Fire'] += 1\n        elif (int(month) == 8 and int(day) >= 23) or (int(month) == 9 and int(day) <= 22):\n            # Virgo is Earth\n            elements['Earth'] += 1\n        elif (int(month) == 9 and int(day) >= 23) or (int(month) == 10 and int(day) <= 22):\n            # Libra is Air\n            elements['Air'] += 1\n        elif (int(month) == 10 and int(day) >= 23) or (int(month) == 11 and int(day) <= 21):\n            # Scorpio is Water\n            elements['Water'] += 1\n        elif (int(month) == 11 and int(day) >= 22) or (int(month) == 12"}
{"task_id": "EvoEval/83", "completion": "\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in 'aeiouAEIOU':\n            left += 1\n        elif s[right] not in 'aeiouAEIOU':\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)Python"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_travers(tree):\n        def dfs(node, path):\n            if not node:\n                return []\n            if not node:\n                return [path]\n            left_paths = dfs(node.get(2, {}), path + [2])\n            right_paths = dfs(node.get(3, {}), path + [3])\n            return left_paths + right_paths\n        return dfs(tree, [1])\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}}, 7: {}}}\n    assert tree_travers(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 7]]\n    tree = {7: {}, 8: {9: {}}}\n    assert tree_travers(tree) == [[7], [8, 9]]\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}}}, 7: {}}\n    assert tree_travers(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 7]]\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}}}, 7: {8: {9: {}}}}\n    assert tree_travers(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 7, 8, 9]]\n    print(\"Both tests pass\")  # Add this line to print a success message\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Create a 2D array to store the minimum number of moves to reach each cell\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    \n    # Initialize the first cell as 0, since we are already at the starting point\n    dp[0][0] = 0\n    \n    # Fill the first row\n    for j in range(1, cols):\n        if grid[0][j] == 0:\n            dp[0][j] = dp[0][j-1] + 1\n        else:\n            dp[0][j] = float('inf')\n    \n    # Fill the first column\n    for i in range(1, rows):\n        if grid[i][0] == 0:\n            dp[i][0] = dp[i-1][0] + 1\n        else:\n            dp[i][0] = float('inf')\n    \n    # Fill the rest of the grid\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if grid[i][j] == 0:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = float('inf')\n    \n    # If the princess's coordinate is out of bounds, return -1\n    if coord[0] < 0 or coord[0] >= rows or coord[1] < 0 or coord[1] >= cols:\n        return -1\n    \n    # Return the minimum number of moves to reach the princess\n    return dp[coord[0]][coord[1]] if dp[coord[0]][coord[1]] != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Sort the movies based on ratings and release year\n    sorted_movies = sorted(m_dict, key=lambda x: (-m_dict[x][0], -m_dict[x][1]))\n    # Return the sorted list of movie names\n    return sorted_movies\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result  # return the result as a string\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(planet_dict):\n        result = {}\n        for planet, features in planet_dict.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = f\"{density:.2f}\"\n        return result\n    \"\"\"\n    def planet_population(planet_dict):\n        result = {}\n        for planet, features in planet_dict.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = f\"{density:.2f}\"\n        return result\n    \"\"\"\n    def planet_population(planet_dict):\n        result = {}\n        for planet, features in planet_dict.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = f\"{density:.2f}\"\n        return result\n    \"\"\"\n    def planet_population(planet_dict):\n        result = {}\n        for planet, features in planet_dict.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = f\"{density:.2f}\"\n        return result\n    \"\"\"\n    def planet_population(planet_dict):\n        result = {}\n        for planet, features in planet_dict.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = f\"{density:.2f}\"\n        return result\n    \"\"\"\n    def"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(set(aliens))  # remove duplicates and sort the list\n    aliens = [alien for alien in aliens if alien % 2 == 0]  # keep only even positions\n    aliens = [alien for alien in aliens if alien != ray]  # remove the alien at the aimed position\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the input strings to lists of integers\n    s1 = [int(digit) for digit in s1]\n    s2 = [int(digit) for digit in s2]\n\n    # Generate all possible combinations of digits from the two numbers\n    combinations = [(a, b) for a in s1 for b in s2]\n\n    # Calculate the sum of each combination\n    sums = [a + b for a, b in combinations]\n\n    # Return the sum of all unique sums\n    return sum(set(sums))  # Use set to remove duplicates\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        elif status == 'On Ground' and action == 'Land':\n            status = 'On Ground'\n        elif status == 'On Ground' and action == 'Move':\n            status = 'On Ground'\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        elif status == 'In Space' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = ''\n    for i in range(1, n + 1):\n        layer = ''\n        for j in range(1, 2 * i):\n            if j == i:\n                layer += 'A'\n            else:\n                layer += chr(64 + (j - i + i - 1) % 26)\n        result += layer.center(2 * i - 1) + '\\n'\n    return result[:-1]  # remove the last newline character\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            shift = n_values[i % len(n_values)]\n            if message[i].isupper():\n                result += chr((ord(message[i]) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(message[i]) - 97 + shift) % 26 + 97)\n        else:\n            result += message[i]\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(word.split(), key=len)) for word in strings]  # Your code here\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m) - i - 1] for i in range(len(m)))\n    return abs(diagonal1 - diagonal2)  # return the absolute difference between the two diagonals\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and lst[i] != 0 and lst[i] == 1:\n            magic_indices.append(i)\n    return sorted(magic_indices)  # Return a sorted list of magic indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Check if the alien name is a string and the humans dictionary is a dictionary\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    \n    # Check if the alien name is valid (not empty)\n    if not alien:\n        return []\n    \n    # Define the order of the continents\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North\", \"South\"]\n    \n    # Initialize an empty list to store the human names that will encounter the alien\n    human_names = []\n    \n    # Iterate over the continents in the order they are invaded\n    for continent in continents:\n        # Check if the alien is in the current continent\n        if continent in humans.get(alien, \"\"):\n            # Add the human names in the current continent to the list\n            human_names.extend(humans.keys())\n    \n    # Return the list of human names, sorted by the order of their encounter\n    return sorted(human_names)\n    "}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + i)\n    for i in range(n):\n        if sequence[i] > 1:\n            is_prime = True\n            for j in range(2, int(sequence[i]**0.5) + 1):\n                if sequence[i] % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i, round in enumerate(rounds):\n        for _ in range(round):\n            music_speed = music\n            if len(players) == 1:\n                break\n            if len(players) == 2:\n                music_speed = 1\n            position = players.pop(0)\n            players.insert(music_speed - 1, position)\n    return players\n"}
