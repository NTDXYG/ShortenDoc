{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    multiplier = 1.0\n    \n    for item in items:\n        if isinstance(item, str):\n            multiplier *= 1.5\n        else:\n            if item > 5:\n                base_cost += 10.0\n            base_cost += item * multiplier\n    \n    if location == 'Local':\n        pass\n    elif location == 'National':\n        multiplier *= 1.5\n    elif location == 'International':\n        multiplier *= 2.5\n    \n    total_cost = base_cost * multiplier\n    return f\"{total_cost:.2f}\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0\n        if weight > 5:\n            base_cost += 10.0\n        total_cost += base_cost\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                shift = key % 26\n                if char.islower():\n                    encrypted_word += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    encrypted_word += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word, -key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if int(s[0]) == 0:\n            return []\n        res = [chr(int(s[0]) + ord('a') - 1)]\n        if len(s) > 1 and int(s[:2]) <= 26:\n            res.append(chr(int(s[:2]) + ord('a') - 1))\n        return [r + c for r in helper(s[1:]) for c in res]\n    \n    return helper(input_string)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    lit_candles = 1\n    for candle in candles[1:]:\n        if candle > max_height:\n            max_height = candle\n            lit_candles += 1\n    return lit_candles\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0 and row < len(matrix) - 1:\n            row += 1\n        elif row == 0 and col < len(matrix[0]) - 1:\n            col += 1\n        elif col < len(matrix[0]) - 1 and row < len(matrix) - 1:\n            row += 1\n            col += 1\n        else:\n            if row < len(matrix) - 1:\n                row += 1\n            else:\n                col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    if canvas.count('P') > 1 or (canvas.count('*') - canvas.count('P')) % (canvas.count('-') - canvas.count('P')) != 0:\n        return 'Invalid canvas'\n    painter_index = canvas.index('P')\n    empty_spaces = canvas.count('-')\n    painted_spaces = canvas.count('*')\n    if (empty_spaces - painted_spaces) % (painter_index + 1) != 0:\n        return 'Invalid canvas'\n    painted_spaces_needed = (empty_spaces - painted_spaces) // (painter_index + 1)\n    new_canvas = canvas[:painter_index] + '*' * painted_spaces_needed + canvas[painter_index + 1:]\n    return new_canvas\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    \r\n    for animal in animal_string.split():\r\n        if animal[0] in animals and animal_count.get(animal[0], 0) < 2:\r\n            sounds.append(animal.count('|'))\r\n            animal_count[animal[0]] = animal_count.get(animal[0], 0) + 1\r\n    \r\n    return sounds[:5]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}?Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}?Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]}, {fruits[1]} and from {location}?Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    sum_values = sum(flux_values)\n    return sum_values * max_occurrence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.capitalize() if name.istitle() else alias.lower()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [int(card[:-1]) for card in hand]\n    counts = Counter(values)\n    max_count = max(counts.values())\n    if max_count == 5:\n        return 52\n    elif max_count == 4:\n        return sum(values) * 3\n    elif max_count == 3:\n        return sum(values) * 2\n    elif max_count == 2:\n        return sum(values)\n    else:\n        return 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if sum(int(digit) for digit in str(num)) == 7 and num % 7 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    vampires = sum(row.count(2) for row in m)\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[0])):\n            if m[i][j] == 1:\n                for k in range(len(m[0])):\n                    if m[i][k] == 2 and k != j:\n                        danger += 1\n                for l in range(len(m)):\n                    if m[l][j] == 2 and l != i:\n                        danger += 1\n    return danger - vampires\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    ascending = [str(i) for i in range(1, n+1)]\n    descending = [str(i) for i in range(n-1, 0, -1)]\n    return [','.join(ascending), ','.join(descending)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(row, word):\n        return word in ''.join(row)\n\n    def is_word_in_column(column, word):\n        return word in ''.join(column)\n\n    for row in grid:\n        for word in words:\n            if not is_word_in_row(row, word):\n                break\n        else:\n            continue\n        break\n    else:\n        return True\n\n    for column in zip(*grid):\n        for word in words:\n            if not is_word_in_column(column, word):\n                break\n        else:\n            continue\n        break\n    else:\n        return True\n\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 165, in <module>\n  File \"<string>\", line 163, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_years = 9.461 * 10**12\n    distance_traveled = t * v\n    return distance_traveled / light_years\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 124, in <module>\n  File \"<string>\", line 122, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in prime_cipher\n            result += str(primes[ord(char) - ord('a')])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_dict[letter]\n    return translated_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence.strip() if max_sentence else \"\"\r\n\nword_frequency_analysis(\"Hello world.I love this world.\", \"world\") # (2, \"Hello world\")\nword_frequency_analysis(\"This is the best day.I love this day because's sunny.\", \"day\") # (2, \"This is the best\")\nword_frequency_analysis(\"This is a test.Testing is fun.\", \"test\") # (1, \"This is a\")\nword_frequency_analysis(\"Welcome the world coding.\", \"python\") # (0, \"\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"test\") # (1, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"is\") # (2, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"fun\") # (1, \"Testing is fun\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"This\") # (1, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"a\") # (1, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"test.\") # (1, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"is.\") # (1, \"Testing is fun\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"fun.\") # (1, \"Testing is fun\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"This.\") # (1, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"a.\") # (1, \"This is a\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"test..\") #", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0:\n                queue.append(((nx, ny), path + [get_direction(dx, dy)]))\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 65, in <module>\n  File \"<string>\", line 63, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 34, in pathfinder\n                queue.append(((nx, ny), path + [get_direction(dx, dy)]))\nNameError: name 'get_direction' is not defined\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n\n    return sorted(list(palindromes))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    # Your implementation here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_staircase(n - stone, magic_stones)\n    return count\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for i in range(n):\n        if i == m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] * 2 if i > 0 else 20))\n        else:\n            transformation_percentages.append(min(100, max(0, transformation_percentages[-1] + (10 if i < m - 1 else -10))))\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 35, in werewolf_transformation\n            transformation_percentages.append(min(100, max(0, transformation_percentages[-1] + (10 if i < m - 1 else -10))))\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.startswith(\"@\") or email.endswith(\"@\"):\r\n        return False\r\n    if email.count(\"@\") != 1:\r\n        return False\r\n    username, domain = email.split(\"@\")\r\n    if \".\" not in domain or domain.startswith(\".\") or domain.endswith(\".\"):\r\n        return False\r\n    if domain.count(\".\") != 1:\r\n        return False\r\n    return True\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n    return transformed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the ASCII art\n    art = []\n    # Add the top and bottom borders\n    art.append(\"*\" * (n + 2))\n    # Add the middle rows\n    for char in s:\n        art.append(\"*\" + char * n + \"*\")\n    # Add the bottom border\n    art.append(\"*\" * (n + 2))\n    # Return the ASCII art as a string\n    return \"\\n\".join(art)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Find the starting point (0,0) and the ending point (m-1,n-1)\n    m, n = len(arr), len(arr[0])\n    start = (0, 0)\n    end = (m-1, n-1)\n    \n    # Initialize a priority queue to store the cells to be visited\n    queue = [(0, start)]\n    \n    # Initialize a dictionary to store the minimum energy required to reach each cell\n    min_energy = {start: 0}\n    \n    # Initialize a set to store the visited cells\n    visited = set()\n    \n    # Define the directions in which the spider can jump\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Start the BFS\n    while queue:\n        energy, (i, j) = heapq.heappop(queue)\n        \n        # If the current cell is the ending point, return the minimum energy required\n        if (i, j) == end:\n            return energy\n        \n        # If the current cell has already been visited, skip it\n        if (i, j) in visited:\n            continue\n        \n        # Mark the current cell as visited\n        visited.add((i, j))\n        \n        # Explore the neighboring cells\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            \n            # Check if the neighboring cell is within the grid and not visited\n            if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                # Calculate the energy required to jump to the neighboring cell\n                new_energy = energy + arr[ni][nj]\n                \n                # If the neighboring cell has not been visited or the new energy is lower than the current minimum energy, update the minimum energy and add the neighboring cell to the priority queue\n                if (ni, nj) not in min_energy or new_energy < min_energy[(ni, nj)]:\n                    min_energy[(ni, nj)] = new_energy\n                    heapq.heappush(queue", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 78\n                    heapq.heappush(queue\n    heapq.heappush(queue\n                  ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\ndef find_legendary_item(player_input):\n    rarity_count = {}\n    for rarity in player_input:\n        if rarity == 5:\n            return True, -1\n        if rarity in rarity_count:\n            rarity_count[rarity] += 1\n        else:\n            rarity_count[rarity] = 1\n    if 5 in rarity_count:\n        return True, max(rarity_count, key=rarity_count.get)\n    return False, None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 1\n    if fuel_consumption > fuel:\n        return 'Insufficient fuel'\n    else:\n        remaining_fuel = fuel - fuel_consumption\n        return round(remaining_fuel, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\ndef fairy_tale_transport(q,w,e):\n    total_weight = sum(q)\n    if total_weight <= w + e:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''\n            for word in case:\n                secret += word[0].lower()\n            if 'the' in secret or 'a' in secret or 'an' in secret or 'and' in secret or 'or' in secret or 'for' in secret or 'of' in secret or 'to' in secret or 'in' in secret or 'at' in secret or 'on' in secret or 'by' in secret or 'with' in secret or 'from' in secret or 'as' in secret or 'but' in secret or 'if' in secret or 'because' in secret or 'while' in secret or 'until' in secret or 'before' in secret or 'after' in secret or 'since' in secret or 'unless' in secret or 'until' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or '", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 29\n            if 'the' in secret or 'a' in secret or 'an' in secret or 'and' in secret or 'or' in secret or 'for' in secret or 'of' in secret or 'to' in secret or 'in' in secret or 'at' in secret or 'on' in secret or 'by' in secret or 'with' in secret or 'from' in secret or 'as' in secret or 'but' in secret or 'if' in secret or 'because' in secret or 'while' in secret or 'until' in secret or 'before' in secret or 'after' in secret or 'since' in secret or 'unless' in secret or 'until' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or '\n    if 'the' in secret or 'a' in secret or 'an' in secret or 'and' in secret or 'or' in secret or 'for' in secret or 'of' in secret or 'to' in secret or 'in' in secret or 'at' in secret or 'on' in secret or 'by' in secret or 'with' in secret or 'from' in secret or 'as' in secret or 'but' in secret or 'if' in secret or 'because' in secret or 'while' in secret or 'until' in secret or 'before' in secret or 'after' in secret or 'since' in secret or 'unless' in secret or 'until' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or 'unless' in secret or '\nnSyntaxError: unterminated string literal (detected at line 29)\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quantity = log[\"quantity\"]\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n        return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '1011': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '10000': '5', '11000': '6', '11100': '7', '11110': '8', '11111': '9'}\n    decoded_message = \"\"\n    current_code = \"\"\n    for char in msg:\n        if char == \" \":\n            if current_code != \"\":\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n        elif char == \"/\":\n            if current_code != \"\":\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n            decoded_message += \" \"\n        else:\n            current_code += char\n    if current_code != \"\":\n        decoded_message += morse_code_dict[current_code]\n    return decoded_message.upper()", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 159, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 42, in morse_decoder\n                decoded_message += morse_code_dict[current_code]\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    total_orders = sum(orders)\n    if total_orders % n == 0:\n        return total_orders // n\n    else:\n        return total_orders // n + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                result += 'a' if i % 2 == 0 else '!'\n            else:\n                result += vowels[vowels.index(char.lower()) + 1] if i % 2 == 0 else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                result += 'b' if i % 2 == 0 else '!'\n            else:\n                result += consonants[consonants.index(char.lower()) + 1] if i % 2 == 0 else consonants[consonants.index(char.lower()) + 1].upper()\n        elif char == '?':\n            result += '!' if i % 2 == 0 else '?'\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = (i % shift) + 1\n            if char.islower():\n                encrypted_message += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                encrypted_message += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            encrypted_message += char\n    return encrypted_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    result = \"\"\n    for char in s:\n        if char != \" \":\n            result += morse_code_dict[char] + \" \"\n        else:\n            result += \"/ \"\n    return result.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''.join([magic_spell[i % len(magic_spell)] for i, letter in enumerate(dish)])\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n                if letter == 'z':\n                    new_word = 'b'\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new_word.capitalize() + '@'\n    return translated_phrase[:-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return [f'{ingredient[:-1]} {quantity}' if ingredient[-1].isdigit() else ingredient for ingredient, quantity in sorted_ingredients]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/60", "completion": "\n    sugar_count = 0\n    happy_ants_count = 0\n    for ant in ant_positions:\n        ant_position, ant_direction = ant\n        if ant_direction == \"right\":\n            for i in range(ant_position, path_length):\n                if i in sugar_locations:\n                    sugar_count += 1\n                    break\n        else:\n            for i in range(ant_position, -1, -1):\n                if i in sugar_locations:\n                    sugar_count += 1\n                    break\n        if sugar_count > 0:\n            happy_ants_count += 1\n    return happy_ants_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                else:\n                    result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n            else:\n                result += char\n        else:\n            result += char.swapcase()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in reci.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 133, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 20, in recipe_converter\n    for ingredient, quantity in reci.items():\nNameError: name 'reci' is not defined\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in new_ingredients:\n                        new_ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    if ingredient not in new_ingredients:\n                        new_ingredients.append(ingredient)\n            final_order[food] = new_ingredients\n        else:\n            final_order[food] = ingredients\n    return final_order\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n + 1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i + 1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meal['calories']\n    return total_calories\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i + 1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        digit_count = sum(c.isdigit() for c in string)\n        creature_name = string[:digit_count]\n        tales_count = string[digit_count:]\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{creature_name}' who was known for telling {digit_count} tales a day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    num_trips = 0\n    num_chests = 0\n    num_chambers = len(grid)\n    num_columns = len(grid[0])\n    \n    # Count the total number of treasures in the pyramid\n    for chamber in grid:\n        num_chests += sum(chamber)\n    \n    # If the bag can carry all the treasures, return 0\n    if num_chests <= bag_capacity:\n        return 0\n    \n    # Calculate the number of trips needed to collect all treasures\n    for chamber in grid:\n        for chest in chamber:\n            if chest == 1:\n                num_trips += math.ceil(num_chests / bag_capacity)\n                break\n    \n    return num_trips\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 166, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    return ''.join(cipher.get(c, c) for c in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        \n        max_length = sum(lst)\n        pyramid = []\n        \n        for num in lst:\n            level = '#' * num\n            pyramid.append(level)\n        \n        return pyramid\n    \n    # Test cases\n    print(create_pyramid([3, 2, 1]))  # Output: ['#', '##', '###']\n    print(create_pyramid([5, 4, 2]))  # Output: ['#####', '####', '###']\n    print(create_pyramid([]))        # Output: []\n    print(create_pyramid([1, 1, 1, 1]))  # Output: ['####', '####', '####', '####']\n    print(create_pyramid([2, 3, 4, 5]))  # Output: ['#####', '####', '###', '##']\n    print(create_pyramid([6, 7, 8, 9]))  # Output: ['#########', '########', '######', '#####']\n    print(create_pyramid([10, 11, 12, 13]))  # Output: ['###########', '##########', '#########', '########', '######']\n    print(create_pyramid([14, 15, 16, 17]))  # Output: ['############', '############', '###########', '##########', '#########']\n    print(create_pyramid([18, 19, 20, 21]))  # Output: ['##############', '#############', '############', '###########', '##########']\n    print(create_pyramid([22, 23, 24, 25]))  # Output: ['###############', '##############', '#############', '############', '###########']\n    print(create_pyramid([26, 27, 28, 29]))  # Output: ['################', '################', '###############', '##############', '########", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(n, k):\n        points = 0\n        while n > 1:\n            if n % k == 0:\n                n //= k\n                points += 1\n            else:\n                break\n        return points\n\n    sequence.sort(reverse=True)\n    points_list = [count_points(num, k) for num in sequence]\n    return points_list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    x_pattern = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                x_pattern.append(mat[i][j])\n    return x_pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[j] > prices[i]:\n                max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n        start_row, start_col = next((i, j) for i, row in enumerate(map) for j, cell in enumerate(row) if cell == 'S')\n        end_row, end_col = next((i, j) for i, row in enumerate(map) for j, cell in enumerate(row) if cell == 'E')\n        path = [(start_row, start_col)]\n        \n        for instruction in instructions:\n            if instruction == 'up' and start_row > 0 and map[start_row - 1][start_col] != 'X':\n                start_row -= 1\n            elif instruction == 'down' and start_row < len(map) - 1 and map[start_row + 1][start_col] != 'X':\n                start_row += 1\n            elif instruction == 'left' and start_col > 0 and map[start_row][start_col - 1] != 'X':\n                start_col -= 1\n            elif instruction == 'right' and start_col < len(map[0]) - 1 and map[start_row][start_col + 1] != 'X':\n                start_col += 1\n            \n            path.append((start_row, start_col))\n            \n            if start_row == end_row and start_col == end_col:\n                break\n        \n        return path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 164, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        if 3 <= month <= 19:\n            sign = \"Aries\"\n        elif 4 <= month <= 20:\n            sign = \"Taurus\"\n        elif 5 <= month <= 20:\n            sign = \"Gemini\"\n        elif 6 <= month <= 20:\n            sign = \"Cancer\"\n        elif 7 <= month <= 22:\n            sign = \"Leo\"\n        elif 8 <= month <= 22:\n            sign = \"Virgo\"\n        elif 9 <= month <= 22:\n            sign = \"Libra\"\n        elif 10 <= month <= 22:\n            sign = \"Scorpio\"\n        elif 11 <= month <= 21:\n            sign = \"Sagittarius\"\n        elif 12 <= month <= 21:\n            sign = \"Capricorn\"\n        elif 1 <= month <= 19:\n            sign = \"Aquarius\"\n        elif 2 <= month <= 18:\n            sign = \"Pisces\"\n        elements[zodiac_signs[sign]] += 1\n    return {element: count for element, count in elements.items() if count > 0}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 191, in <module>\n  File \"<string>\", line 189, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\ndef sort_movies_by_ratings_and_release_date(movies_dict):\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 25, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_plan):\n        result = {}\n        for planet, features in dict_of_plan.items():\n            if len(features) == 2 and all(isinstance(feature, (int, type(None))) for feature in features):\n                population, size = features\n                if population is not None and size is not None and size > 0:\n                    density = round(population / size, 2)\n                    result[f\"{planet} {density}\"] = density\n        return result\n\n    # Test cases\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}))  # {'Earth 466.67': 466.67}\n    print(planet_population({}))  # {}\n    print(planet_population({\"J\": [None, 64000000]}))  # {}\n    print(planet_population({\"Ven\": [500000000, None]}))  # {}\n    print(planet_population({\"Saturn\": [5000000000, 11600000], \"Neptune\": [10000000000, 49500000]}))  # {'Saturn 430.43': 430.43, 'Neptune 202.01': 202.01}\n    print(planet_population({\"Mercury\": [300000000, 4879], \"Uranus\": [8000000000, 28750]}))  # {'Mercury 61.07': 61.07, 'Uranus 277.78': 277.78}\n    print(planet_population({\"Pluto\": [1000000000, 2379]}))  # {'Pluto 416.67': 416.67}\n    print(planet_population({\"Jupiter\": [10000000000, 139822000]}))  # {'Jupiter 714.29': 714.29}\n    print(planet_population({\"Eris\": [100000000000, 100000]}))  # {'Eris 10000.", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    for i in range(len(aliens)):\n        if aliens[i] == ray:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray - 1:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray + 1:\n            aliens.pop(i)\n            break\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        fountain += layer + '\\n'\n    return fountain.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_position = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_position]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0:\n            product = 1\n            for digit in str(abs(lst[i])):\n                product *= int(digit)\n            if product == i:\n                magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 140, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if lst[i] % i == 0:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\ndef alien_invasion(alien, humans):\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encountered = []\n    for continent in continents:\n        for name, home in humans.items():\n            if home == continent and name not in encountered:\n                encountered.append(name)\n    return encountered\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    next_num = 3\n    while len(sequence) < n:\n        next_sum = sum(sequence[-2:]) + next_num\n        sequence.append(next_sum)\n        next_num += 1\n\n    for i in range(2, len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence[:n]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round_duration in rounds:\n        position = (position + round_duration * music) % n\n        players.pop(position)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in musical_chairs\n        players.pop(position)\nIndexError: pop index out of range\n", "passed": false}
