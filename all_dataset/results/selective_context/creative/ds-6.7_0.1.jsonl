{"task_id": "EvoEval/0", "completion": "\n    # Define the base shipping cost\n    base_cost = 5.0\n\n    # Define the location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n\n    # Get the location factor\n    location_factor = location_factors.get(location, 1.0)\n\n    # Initialize the total cost\n    total_cost = 0.0\n\n    # Iterate over the items\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            item = 1.0\n\n        # Calculate the item's shipping cost\n        item_cost = base_cost + (10.0 if item > 5.0 else 0.0)\n\n        # Add the item's cost to the total cost\n        total_cost += item_cost\n\n    # Calculate the total shipping cost\n    total_shipping_cost = total_cost * location_factor\n\n    # Return the total shipping cost rounded to two decimal places as a string\n    return \"{:.2f}\".format(total_shipping_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Define the base shipping cost and the additional charge\n    base_cost = 5.0\n    additional_charge = 10.0\n\n    # Define the location factors\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n\n    # Get the location factor\n    location_factor = location_factors.get(location, 1.0)\n\n    # Initialize the total cost\n    total_cost = 0.0\n\n    # Calculate the total cost for each item\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            item = 1.0\n\n        # Calculate the item's shipping cost\n        item_cost = base_cost\n        if item > 5.0:\n            item_cost += additional_charge\n\n        # Add the item's cost to the total cost\n        total_cost += item_cost\n\n    # Apply the location factor to the total cost\n    total_cost *= location_factor\n\n    # Return the total cost rounded to two decimal places\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int, path: str, res: List[str]):\n        if index == len(s):\n            res.append(path)\n            return\n        helper(s, index + 1, path + chr((int(s[index]) - 1) % 26 + 97), res)\n        if index + 1 < len(s) and s[index:index + 2] <= '26':\n            helper(s, index + 2, path + chr((int(s[index:index + 2]) - 1) % 26 + 97), res)\n    res = []\n    helper(input_string, 0, '', res)\n    return res\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_height = candles[0]\n    lit_candles = 1\n\n    for candle in candles[1:]:\n        if candle >= max_height:\n            lit_candles += 1\n            max_height = candle\n\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:  # moving diagonally up\n            if col == cols - 1:  # if at the right end, move down\n                row += 1\n            elif row == 0:  # if at the top, move right\n                col += 1\n            else:  # move up and left\n                row -= 1\n                col += 1\n        else:  # moving diagonally down\n            if row == rows - 1:  # if at the bottom, move right\n                col += 1\n            elif col == 0:  # if at the left end, move down\n                row += 1\n            else:  # move down and right\n                row += 1\n                col -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # get the dimensions of the grid\n    rows, cols = len(grid), len(grid[0])\n    x, y = position\n\n    # check if the position is out of the grid\n    if not (0 <= x < rows and 0 <= y < cols):\n        return grid\n\n    # if the cell is a mine, return the initial grid\n    if grid[x][y] == 1:\n        return grid\n\n    # if the cell is already revealed, return the initial grid\n    if grid[x][y] == 0:\n        return grid\n\n    # if the cell is an unknown cell, change it to 0 and all adjacent cells to 0\n    grid[x][y] = 0\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] != 1:\n                grid[nx][ny] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas_list = list(canvas)\n    painter_count = canvas.count('P')\n    empty_space_count = canvas.count('-')\n    wall_count = canvas.count('#')\n    if painter_count != 1:\n        return 'Invalid canvas'\n    else:\n        painter_index = canvas.index('P')\n        canvas_list[painter_index] = '*'\n        for i in range(painter_index + 1, len(canvas_list)):\n            if canvas_list[i] == '-':\n                canvas_list[i] = '*'\n            elif canvas_list[i] == '#':\n                break\n            else:\n                continue\n        for i in range(painter_index - 1, -1, -1):\n            if canvas_list[i] == '-':\n                canvas_list[i] = '*'\n            elif canvas_list[i] == '#':\n                break\n            else:\n                continue\n    painted_space_count = canvas_list.count('*')\n    if empty_space_count != painted_space_count:\n        return 'Invalid canvas'\n    else:\n        return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.translate(str.maketrans('', '', st.punctuation)).lower()\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = animal_string.split()\n    animal_counts = {}\n    for sound in animal_sounds:\n        animal = sound[0]\n        if animal not in 'CDb':\n            continue\n        if animal in animal_counts:\n            if len(animal_counts) < 5:\n                animal_counts[animal] += 1\n        else:\n            animal_counts[animal] = 1\n        if len(animal_counts) == 5:\n            break\n    return list(animal_counts.values())\n"}
{"task_id": "EvoEval/11", "completion": "\n    fruit_str = \", \".join(fruits)\n    return f\"Oh, are those {fruit_str} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    for elem in elems:\n        if count_dict[elem] == min_count:\n            return elem\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            index = vowels.index(char)\n            alias += vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            alias += consonants[(index+1)%21]\n    return alias.upper()\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    pair = False\n    triple = False\n    four_of_a_kind = False\n    for count in value_counts.values():\n        if count == 2:\n            pair = True\n        elif count == 3:\n            triple = True\n        elif count == 4:\n            four_of_a_kind = True\n    if four_of_a_kind:\n        score += 4 * int(max(value_counts.keys()))\n    elif triple:\n        score += 2 * int(max(value_counts.keys()))\n    elif pair:\n        score += int(max(value_counts.keys()))\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return sum(fib_seq)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 0\n    while count < n:\n        num += 7\n        if sum(int(i) for i in str(num)) == 7:\n            count += 1\n    return num\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    vampires = []\n    humans = []\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n    danger = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                danger += 1\n                break\n    return danger\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n + 1):\n            result.append(\",\".join(str(j) for j in list(range(1, i + 1)) + list(range(i, 0, -1))))\n        return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, row, col, direction):\n        for i in range(len(word)):\n            if direction == 'right':\n                if col + len(word) > len(grid) or grid[row][col + i] != word[i]:\n                    return False\n            elif direction == 'left':\n                if col - len(word) < 0 or grid[row][col - i] != word[i]:\n                    return False\n            elif direction == 'down':\n                if row + len(word) > len(grid) or grid[row + i][col] != word[i]:\n                    return False\n            elif direction == 'up':\n                if row - len(word) < 0 or grid[row - i][col] != word[i]:\n                    return False\n        return True\n\n    def find_word(word):\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                if check_word(word, row, col, 'right'):\n                    return True\n                if check_word(word, row, col, 'left'):\n                    return True\n                if check_word(word, row, col, 'down'):\n                    return True\n                if check_word(word, row, col, 'up'):\n                    return True\n        return False\n\n    for word in words:\n        if not find_word(word):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    # convert time to seconds\n    t = t * 365 * 24 * 60 * 60\n    # convert velocity to km/s\n    v = v / 3600\n    # calculate distance\n    d = v * t\n    # convert distance to light years\n    d = d / (9.461 * 10**12)\n    return d\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '&',\n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=',\n        'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<',\n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    alien_word = \"\"\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n\n    # Initialize the frequency and sentence variables\n    frequency = 0\n    sentence = \"\"\n\n    # Loop through each sentence\n    for s in sentences:\n        # Count the frequency of the word in the sentence\n        freq = s.split().count(word)\n        # If the frequency is greater than the current frequency, update the frequency and sentence\n        if freq > frequency:\n            frequency = freq\n            sentence = s\n\n    # If the frequency is still 0, return (0, \"\")\n    if frequency == 0:\n        return (0, \"\")\n    else:\n        return (frequency, sentence)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 125000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 170000:\n        return (taxable_income - 125000) * 0.25 + 3750\n    else:\n        return (taxable_income - 170000) * 0.30 + 11250\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n    return sorted(list(palindromes))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the directions to move in the maze\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Initialize the queue with the start point and the path to that point\n    queue = [(start, [start])]\n\n    # Initialize a set to keep track of visited points\n    visited = set()\n\n    while queue:\n        # Get the current point and path\n        (x, y), path = queue.pop(0)\n\n        # If the current point is the end point, return the path\n        if (x, y) == end:\n            return path\n\n        # Mark the current point as visited\n        visited.add((x, y))\n\n        # Check all the directions\n        for dx, dy in directions:\n            # Calculate the new point\n            nx, ny = x + dx, y + dy\n\n            # If the new point is within the maze and is a valid point (not a wall), add it to the queue\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # Initialize the first row and first column to 1\n    for i in range(m+1):\n        dp[i][0] = 1\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    # Fill in the rest of the dp array\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m][n]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import re\n\n    def swap(playlist, i, seed):\n        if \"Rock\" not in playlist[i]:\n            playlist[i], playlist[seed % len(playlist)] = playlist[seed % len(playlist)], playlist[i]\n        return playlist\n\n    seed = 7\n    playlist = [song for song in playlist if \"Rock\" not in song]\n    for i in range(len(playlist)):\n        seed = (seed * 16807) % 2147487\n        playlist = swap(playlist, i, seed)\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    if m > 1:\n        for i in range(1, m):\n            transformation[i] = transformation[i - 1] + 10\n        for i in range(m, n):\n            transformation[i] = transformation[i - 1] - 10\n    else:\n        for i in range(1, n):\n            transformation[i] = transformation[i - 1] + 10\n    transformation[m - 1] = 20\n    return transformation\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email:\n        if email.index(\"@\") == 0 or email.index(\"@\") == len(email) - 1:\n            return False\n        if \".\" in email[email.index(\"@\") + 1:]:\n            return True\n    return False\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_string = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_string += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_string += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_string += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        else:\n            transformed_string += char\n    return transformed_string\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\\U0001F600\",\n        \":(\": \"\\U0001F62D\",\n        \":D\": \"\\U0001F602\",\n        \";)\" : \"\\U0001F601\"\n    }\n\n    for emoticon, emoticon_unicode in emoticons.items():\n        sentence = sentence.replace(emoticon, emoticon_unicode)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    result = []\n    for i in range(n):\n        row = \"*\" + s * n + \"*\"\n        result.append(row)\n    frame = \"*\" * len(row)\n    result = [frame] + result + [frame]\n    return result\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0] + ' ' + potion.split()[1]) for potion in potions]\n    potions.sort(key=lambda x: (int(x.split()[1]), x))\n    potions_dict = {potion.split()[0]: int(potion.split()[1]) for potion in potions}\n    result = []\n    for potion in potions:\n        if int(potion.split()[1]) == target:\n            result.append(potion)\n            return result\n        elif int(potion.split()[1]) > target:\n            continue\n        else:\n            target -= int(potion.split()[1])\n            result.append(potion)\n    if sum(int(potion.split()[1]) for potion in result) != target:\n        return []\n    return result\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # \u52a8\u6001\u89c4\u5212\n    m, n = len(arr), len(arr[0])\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + arr[0][i]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the fuel consumption\n    fuel_consumption = distance * speed * planet_gravity * 0.1\n\n    # check if the spaceship has enough fuel to reach the planet\n    if fuel_consumption > fuel:\n        return 'Insufficient fuel'\n\n    # calculate the remaining fuel\n    remaining_fuel = fuel - fuel_consumption\n\n    # return the remaining fuel rounded to 2 decimal points\n    return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    total_view = min(left_max[i], right_max[i]) for i in range(n)]\n    return sum(total_view)\n\n"}
{"task_id": "EvoEval/46", "completion": "\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I',\n        '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1',\n        '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9',\n        '11111': '0'\n    }\n    words = msg.split('/')\n    decoded_msg = ''\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += ' '\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n\n    return ' '.join(' '.join(morse_code[i.upper()] for i in word) for word in text.split(' '))\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i].isupper():\n                transformed_string += vowels[(vowels.index(s[i])+1)%5].upper()\n            else:\n                transformed_string += vowels[(vowels.index(s[i])+1)%5]\n        elif s[i] in consonants:\n            if s[i].isupper():\n                transformed_string += consonants[(consonants.index(s[i])+1)%21].upper()\n            else:\n                transformed_string += consonants[(consonants.index(s[i])+1)%21]\n        elif s[i] == '?':\n            if i%2 == 0:\n                transformed_string += '!'\n            else:\n                transformed_string += '?'\n        else:\n            transformed_string += s[i]\n    return transformed_string\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    shifted_alphabet_upper = shifted_alphabet.upper()\n    result = ''\n    current_shift = shift\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += shifted_alphabet[alphabet.index(char)]\n            else:\n                result += shifted_alphabet_upper[alphabet.upper().index(char)]\n            current_shift += 1\n            if current_shift == len(alphabet):\n                current_shift = 0\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n\n    morse_code = \"\"\n    for char in s:\n        morse_code += morse_code_dict[char] + \" \"\n\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        spell_index = 0\n        for letter in dish:\n            new_dish += magic_spell[spell_index % len(magic_spell)]\n            spell_index += 1\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    earth_phrase = earth_phrase.split(\" \")\n    alien_phrase = \"\"\n    for word in earth_phrase:\n        new_word = \"\"\n        for char in word:\n            if char in vowels:\n                index = vowels.index(char)\n                new_word += vowels[(index+1)%5]\n            elif char in consonants:\n                index = consonants.index(char)\n                new_word += consonants[(index+1)%21]\n            else:\n                new_word += \" \"\n        if word[0] in vowels:\n            new_word += \"xy\"\n        else:\n            new_word += \"yz\"\n        new_word = new_word[0].upper() + new_word[1:]\n        alien_phrase += new_word + \" \"\n    return alien_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    result = []\n    for key, value in ingredient_dict.items():\n        result.append((key[:2] + ' ' + str(value), key))\n\n    result.sort(key=lambda x: (-int(x[0].split()[1]), x[0]))\n    return result\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize the sugar locations and the ants' positions\n    sugar_locations = set(sugar_locations)\n    ants = []\n    for pos, direction in ant_positions:\n        ants.append([pos, direction])\n\n    # Initialize the count of happy ants\n    happy_ants = 0\n\n    # March the ants\n    for i in range(path_length):\n        for ant in ants:\n            if ant[0] in sugar_locations:\n                happy_ants += 1\n                sugar_locations.remove(ant[0])\n            if ant[1] == \"right\":\n                ant[0] += 1\n            else:\n                ant[0] -= 1\n            if ant[0] < 0 or ant[0] >= path_length:\n                ants.remove(ant)\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            transformed_string += ' '\n        elif i % 2 == 0:\n            transformed_string += s[i].swapcase()\n        else:\n            if s[i].lower() in vowels:\n                transformed_string += vowels[(vowels.index(s[i].lower())+1)%5]\n            else:\n                transformed_string += consonants[(consonants.index(s[i].lower())-1)%21]\n    return transformed_s\n"}
{"task_id": "EvoEval/62", "completion": "\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        p = p - 2 if p % 2 == 0 else p - 3\n    return layers[::-1]\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [n for n in range(start, end + 1) if is_prime(n) and is_divisible(n, divisor)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, changes in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            for action, ingredients in changes.items():\n                if action == \"add\":\n                    for ingredient in ingredients:\n                        final_order[food].append(ingredient)\n                elif action == \"remove\":\n                    for ingredient in ingredients:\n                        if ingredient in final_order[food]:\n                            final_order[food].remove(ingredient)\n        else:\n            final_order[food] = \"Food not on the menu\"\n    if not order:\n        final_order = menu\n    return final_order\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepper\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def are_anagrams(n1, n2):\n        return sorted(str(n1)) == sorted(str(n2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Your code goes here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return arr[i] < arr[(i+2)%n] or arr[i] < arr[(i-1)%n]\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_string = \"\"\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n            if encrypted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{s}' who was known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    chests = 0\n    chest_count = 0\n    # Iterate over the grid\n    for row in grid:\n        for cell in row:\n            # If the cell contains a chest\n            if cell == '1':\n                chest_count += 1\n    # While there are chests to collect\n    while chest_count > 0:\n        # If the bag is not full\n        if chests < bag_capacity:\n            # Add a chest to the bag\n            chests += 1\n            chest_count -= 1\n            # Increment the number of trips\n            trips += 1\n        # If the bag is full\n        else:\n            # Empty the bag\n            chests = 0\n            # Increment the number of trips\n            trips += 1\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Your code here\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    digits = \"0123456789\"\n    special_chars = \"., \"\n    transformed_str = \"\"\n\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            transformed_str += vowels[(vowels.index(char) + 1) % len(vowels)] if i % 2 == 0 else vowels[(vowels.index(char) - 1) % len(vowels)]\n        elif char in consonants:\n            transformed_str += consonants[(consonants.index(char) + 1) % len(consonants)] if i % 2 == 0 else consonants[(consonants.index(char) - 1) % len(consonants)]\n        elif char in digits:\n            transformed_str += digits[(digits.index(char) + 1) % len(digits)]\n        elif char == \"?\":\n            transformed_str += \"!\" if i % 2 != 0 else \"?\"\n        else:\n            transformed_str += char\n\n    return transformed_str\n\n"}
{"task_id": "EvoEval/76", "completion": "\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = {num: sum(map(lambda x: x // num, sequence)) for num in sequence}\n    return sorted(points.items(), key=lambda x: x[1], reverse=True)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n):\n        pattern.append(mat[i][i])\n        pattern.append(mat[i][n - i - 1])\n    return pattern\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(prices) < 2 or days < 2:\n        return 0\n\n    min_price = prices[0]\n    max_profit = 0\n\n    for i in range(1, days):\n        max_profit = max(max_profit, prices[i] - min_price)\n        min_price = min(min_price, prices[i])\n\n    return max_profit if max_profit > 0 else 0\n\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        # Define the directions\n        directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n\n        # Find the start position\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start = (i, j)\n\n        # Initialize the path and current position\n        path = [start]\n        current = start\n\n        # Process the instructions\n        for instruction in instructions:\n            # Calculate the new position\n            dx, dy = directions[instruction]\n            new_x, new_y = current[0] + dx, current[1] + dy\n\n            # Check if the new position is valid\n            if 0 <= new_x < len(map) and 0 <= new_y < len(map[0]) and map[new_x][new_y] != 'X':\n                # Update the current position and the path\n                current = (new_x, new_y)\n                path.append(current)\n\n                # Check if the player has found the end\n                if map[new_x][new_y] == 'E':\n                    return path\n\n        return path\n\n    return adventure_game(map, instructions)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    for word1, word2 in zip(word_list, word_list[1:]):\n        for c1, c2 in zip(word1, word2):\n            if alien_dict[c1] > alien_dict[c2]:\n                return \"INCORRECT\"\n            elif alien_dict[c1] < alien_dict[c2]:\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {\"Aries\": \"Fire\", \"Taurus\": \"Earth\", \"Gemini\": \"Air\", \"Cancer\": \"Water\", \"Leo\": \"Fire\", \"Virgo\": \"Earth\", \"Libra\": \"Air\", \"Scorpio\": \"Water\", \"Sagittarius\": \"Fire\", \"Capricorn\": \"Earth\", \"Aquarius\": \"Air\", \"Pisces\": \"Water\"}\n    elements_dict = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month_day = birthday.split('-')[1]\n        for zodiac, element in zodiac_dict.items():\n            if month_day >= zodiac[0] and month_day <= zodiac[1]:\n                elements_dict[element] += 1\n    return {k: v for k, v in elements_dict.items() if v > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n"}
{"task_id": "EvoEval/85", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')]*cols for _ in range(rows)]\n    dp[0][0] = 0\n    queue = [(0, 0, 0)]\n    directions = [(0, 1), (1, 0)]\n    while queue:\n        x, y, step = queue.pop(0)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and step + 1 < dp[nx][ny]:\n                dp[nx][ny] = step + 1\n                queue.append((nx, ny, step + 1))\n    if dp[coord[0]-1][coord[1]-1] == float('inf'):\n        return -1\n    else:\n        return dp[coord[0]-1][coord[1]-1]\n"}
{"task_id": "EvoEval/86", "completion": "\n"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral_coords(r1, c1, r2, c2):\n        for c in range(c1, c2 + 1):\n            yield r1, c\n        for r in range(r1 + 1, r2 + 1):\n            yield r, c2\n        if r1 < r2 and c1 < c2:\n            for c in range(c2 - 1, c1, -1):\n                yield r2, c\n            for r in range(r2, r1, -1):\n                yield r, c1\n\n    if not arr:\n        return ''\n\n    ans = []\n    r1, r2 = 0, len(arr) - 1\n    c1, c2 = 0, len(arr[0]) - 1\n    while r1 <= r2 and c1 <= c2:\n        for r, c in spiral_coords(r1, c1, r2, c2):\n            ans.append(arr[r][c])\n        r1 += 1\n        r2 -= 1\n        c1 += 1\n        c2 -= 1\n    return ''.join(ans)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n\n\"\"\"\n"}
{"task_id": "EvoEval/89", "completion": "\n    # Your code here\n    aliens = [a for a in aliens if a != ray and a != ray - 1 and a != ray + 1]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # Initialize the result\n    result = 0\n\n    # Loop through each digit in the first number\n    for digit1 in str(num1):\n        # Loop through each digit in the second number\n        for digit2 in str(num2):\n            # Add the product of the digits to the result\n            result += int(digit1) * int(digit2)\n\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\":\n            pass\n        elif action == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = alphabet[i%26] * (2*i+1)\n        result.append(layer.center(2*n-1))\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the encoded message\n    encoded_message = ''\n\n    # Iterate over the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet to use\n            alpha = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position\n            new_pos = (alpha.index(char) + n_values[i % len(n_values)]) % len(alpha)\n\n            # Add the new character to the encoded message\n            encoded_message += alpha[new_pos]\n        else:\n            # Add the character to the encoded message\n            encoded_message += char\n\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(), key=lambda word: (len(word), spell.split().index(word))))\n        for spell in strings\n    ]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate the sum of the diagonals\n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return the absolute difference\n    return abs(sum_diag1 - sum_diag2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 or i % lst[i] == 0:\n            magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + i + 1)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n\n    for round in rounds:\n        current_position = (current_position + (round * music)) % len(players)\n        players.pop(current_position)\n\n    return players\n\n"}
