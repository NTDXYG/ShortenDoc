{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    factor = 1.0\n    has_string = False\n    for item in items:\n        if isinstance(item, str):\n            if not has_string:\n                factor *= 1.5\n                has_string = True\n            item = 1.0\n        total_cost += 5.0 + item\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    return \"{:.2f}\".format(total_cost * factor)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        total_cost += 5.0 + (weight - 5.0) * 10.0\n    \n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        return 0.0\n    \n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word.lower():\n            if char.isalpha():\n                shift = key if isinstance(key, int) else sum(ord(c) for c in key)\n                encrypted_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        res = [s[0]]\n        if len(s) > 1 and 10 <= int(s[:2]) <= 26:\n            res.append(s[:2])\n        for i in range(1, len(s)):\n            res += [s[i]] + helper(s[i+1:])\n        return res\n    \n    return helper(input_string)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    \n    lit_candles = 1\n    max_height = candles[0]\n    \n    for height in candles[1:]:\n        if height > max_height:\n            lit_candles += 1\n            max_height = height\n    \n    return lit_candles\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n        return grid\n    if grid[x][y] != -1:\n        return grid\n    grid[x][y] = 0\n    for i in range(max(0, x-1), min(len(grid), x+2)):\n        for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n            if grid[i][j] == 1:\n                grid[x][y] += 1\n    if grid[x][y] == 0:\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == -1:\n                    minesweeper_clicked(grid, (i, j))\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 161, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    if canvas.count('*') % (canvas.count('-') + canvas.count('P')) != 0:\n        return 'Invalid canvas'\n    painter_index = canvas.index('P')\n    painted_spaces = 0\n    for i in range(painter_index, len(canvas)):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    return canvas[:painter_index] + '*' * painted_spaces + canvas[painter_index+painted_spaces:]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_count = {'C': 0, 'D': 0, 'B': 0}\r\n    result = []\r\n    for animal in animal_string.split():\r\n        if animal[0] in animal_dict and animal_count[animal[0]] < 2:\r\n            result.append(animal.count('|'))\r\n            animal_count[animal[0]] += 1\r\n        if len(result) == 5:\r\n            break\r\n    return result\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location} Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {fruits[0]} and from {location} Marvelous!\"\n    else:\n        return f\"Oh are those {fruits[0]} and {fruits[1]} from {location} Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_occurrence = Counter(flux_values).most_common(1)[0][1]\n    sum_flux_values = sum(flux_values)\n    return sum_flux_values * max_occurrence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 123, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # 1 is the sum of the first two numbers in the sequence\n        for i in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if sum(int(digit) for digit in str(num)) == 7 and num % 7 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for row in m:\n        for cell in row:\n            if cell == 2:\n                vampires += 1\n    return vampires\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n\n    return [','.join(pattern)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(row, word):\n        return word in ''.join(row)\n\n    def is_word_in_column(column, word):\n        return word in ''.join(column)\n\n    for word in words:\n        if not any(is_word_in_row(row, word) for row in grid) and not any(is_word_in_column(column, word) for column in zip(*grid)):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    # Conversion factor from km to light years\n    km_to_ly = 9.461e12\n    \n    # Calculate the distance traveled in km\n    distance_km = t * v\n    \n    # Convert the distance to light years\n    distance_ly = distance_km / km_to_ly\n    \n    return distance_ly\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in prime_cipher\n            result += str(primes[ord(char) - ord('a')])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '#', 'h': '$', 'i': '^', 'j': '(', 'k': ')', 'l': '=', 'm': 'o', 'n': '?', 'o': ':', 'p': ';', 'q': '`', 'r': '~', 's': '>', 't': '<', 'u': '{', 'v': '}', 'w': '[', 'x': ']', 'y': '|', 'z': 'z'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_dict[letter]\n    return translated_word\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\r\n    max_frequency = 0\r\n    max_sentence = \"\"\r\n    for sentence in sentences:\r\n        words = sentence.split()\r\n        frequency = words.count(word)\r\n        if frequency > max_frequency:\r\n            max_frequency = frequency\r\n            max_sentence = sentence\r\n    return max_frequency, max_sentence.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 50, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 40, in _check_maze\n        for move in solution_path:\nTypeError: 'NoneType' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                substrings.add(s[i:j])\n\n    return sorted(list(substrings))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    paths = [[0 for _ in range(n)] for _ in range(m)]\n\n    # The number of unique paths to the top-left cell is 1\n    paths[0][0] = 1\n\n    # Fill in the first row and first column with the number of unique paths to the cell above or to the left\n    for i in range(1, m):\n        paths[i][0] = paths[i-1][0]\n    for j in range(1, n):\n        paths[0][j] = paths[0][j-1]\n\n    # Fill in the rest of the array with the number of unique paths to each cell\n    for i in range(1, m):\n        for j in range(1, n):\n            paths[i][j] = paths[i-1][j] + paths[i][j-1]\n\n    # The number of unique paths to the bottom-right cell is the value in the last cell of the array\n    return paths[m-1][n-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\r\n        return 1\r\n    if n < 0:\r\n        return 0\r\n    ways = 0\r\n    for stone in magic_stones:\r\n        ways += magical_staircase(n - stone, magic_stones)\r\n    return ways\r\n\r", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day == m - 1:\n            transformation_percentages.append(0)\n        elif day < m - 1:\n            transformation_percentages.append(day * 10)\n        else:\n            transformation_percentages.append(transformation_percentages[-1] - 10)\n    transformation_percentages[m - 1] = 100\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email:\r\n        return False\r\n    if email.index(\"@\") == 0 or email.index(\".\") < email.index(\"@\"):\r\n        return False\r\n    return True\r\n\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    next_vowel = {vowels[i]: vowels[(i + 1) % len(vowels)] for i in range(len(vowels))}\n    next_consonant = {consonants[i]: consonants[(i + 1) % len(consonants)] for i in range(len(consonants))}\n    result = []\n\n    for char in s:\n        if char.lower() in vowels:\n            new_char = next_vowel[char.lower()]\n            result.append(new_char.upper() if char.isupper() else new_char)\n        elif char.lower() in consonants:\n            new_char = next_consonant[char.lower()]\n            result.append(new_char.upper() if char.isupper() else new_char)\n        else:\n            result.append(char)\n\n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\",\n        \":(\": \"\ufffd\",\n        \";)\": \"\ufffd\",\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    return \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 27\n    return \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\\n    return \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\n\" + \"*\" + s * n + \"*\" + \"\\n\" + \"*\" + \"*\" * (n + 2) + \"*\" + \"\\\nnSyntaxError: unterminated string literal (detected at line 28)\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    legendary_item = False\r\n    second_most_valuable = -1\r\n    rarities = set()\r\n    for rarity in player_input:\r\n        if rarity == 5:\r\n            legendary_item = True\r\n        elif rarity > 1:\r\n            rarities.add(rarity)\r\n    if legendary_item:\r\n        if len(rarities) > 0:\r\n            second_most_valuable = max(rarities)\r\n    return legendary_item, second_most_valuable\r\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the fuel consumption for the trip\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * distance / speed\n    \n    # Check if there is enough fuel for the trip\n    if fuel >= fuel_consumption:\n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel'\n        return 'Insufficient fuel'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\r\n    if total_weight <= w + e:\r\n        return True\r\n    else:\r\n        return False\r\n\r", "result": "passed", "passed": true}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view + 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            secret_message += word[0].lower()\n        result.append(secret_message)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101010', 'R': '000', 'S': '1', 'T': '0', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '10000', '6': '11000', '7': '11100', '8': '11110', '9': '11111'\n    }\n    decoded_message = \"\"\n    word = \"\"\n    for char in msg:\n        if char == \" \":\n            decoded_message += morse_code[word]\n            word = \"\"\n        else:\n            word += char\n    decoded_message += morse_code[word]\n    return decoded_message.upper()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in morse_decoder\n            decoded_message += morse_code[word]\nKeyError: '010101/01'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', \n                       'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', \n                       'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', \n                       'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', \n                       'Y': '-.--', 'Z': '--..', ' ': '  '}\n    \n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    # Initialize the maximum number of orders to 0\n    max_orders = 0\n    # Initialize the current batch size to 0\n    current_batch_size = 0\n    # Initialize the current batch orders to 0\n    current_batch_orders = 0\n    # Iterate over the orders\n    for order in orders:\n        # If adding the current order would exceed the batch size, start a new batch\n        if current_batch_size + order > n:\n            # If the current batch has orders, add it to the maximum number of orders\n            if current_batch_orders > 0:\n                max_orders += 1\n            # Reset the current batch size and orders\n            current_batch_size = order\n            current_batch_orders = 1\n        else:\n            # If adding the current order would not exceed the batch size, add it to the current batch\n            current_batch_size += order\n            current_batch_orders += 1\n    # Add the last batch to the maximum number of orders if it has orders\n    if current_batch_orders > 0:\n        max_orders += 1\n    # Return the maximum number of orders\n    return max_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 167, in <module>\n  File \"<string>\", line 165, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n            transformed = transformed.capitalize() if char.isupper() else transformed\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '!'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n            transformed = transformed.capitalize() if char.isupper() else transformed\n        else:\n            transformed += '!' if i % 2 == 0 else char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            shifted_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += shifted_char\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    morse_code = ''\n    for char in s:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            elif letter == ' ':\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word = 'xy' + new_word\n        else:\n            new_word = 'yz' + new_word\n        new_word = new_word.capitalize()\n        translated_phrase += new_word + ' '\n    return translated_phrase.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 != 0:  # odd index\n            if char.isalpha():\n                if char.lower() in vowels:\n                    # replace vowel with next vowel in sequence\n                    vowel_index = (vowels.index(char.lower()) + 1) % len(vowels)\n                    new_char = vowels[vowel_index]\n                    result += new_char.upper() if char.isupper() else new_char\n                else:\n                    # replace consonant with preceding consonant\n                    consonant_index = (consonants.index(char.lower()) - 1) % len(consonants)\n                    new_char = consonants[consonant_index]\n                    result += new_char.upper() if char.isupper() else new_char\n            else:\n                result += char\n        else:  # even index\n            result += char.upper() if char.islower() else char.lower()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\r\n    while pyramid[-1] > 0:\r\n        if pyramid[-1] % 2 == 0:\r\n            pyramid.append(pyramid[-1] - 2)\r\n        else:\r\n            pyramid.append(pyramid[-1] - 3)\r\n    return pyramid[:-1]  # remove the last element which is 0 or negative\r\n\r", "result": "passed", "passed": true}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    \n    final_order = {}\n    for food, details in menu.items():\n        if food in order:\n            new_details = details.copy()\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in new_details:\n                        new_details.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    new_details.append(ingredient)\n            final_order[food] = new_details\n        else:\n            final_order[food] = details\n    return final_order\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meal['calories']\n    return total_calories\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n    \n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return encrypted_string, vowel_count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        result.append(f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{i}' who was known for telling {count} tales a day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Your code here\r\n    # Initialize variables\r\n    num_trips = 0\r\n    num_chests = 0\r\n    # Count the number of chests in the pyramid\r\n    for row in grid:\r\n        num_chests += sum(row)\r\n    # Calculate the number of trips needed to collect all chests\r\n    while num_chests > 0:\r\n        num_trips += math.ceil(num_chests / bag_capacity)\r\n        num_chests = 0\r\n    return num_trips\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    # Your code here\n    if not s:\n        return ''\n    else:\n        return ''.join([cipher.get(i, i) for i in s])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    max_len = sum(lst)\n    pyramid = []\n    for num in lst:\n        pyramid.append('#' * num)\n    return pyramid[::-1]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        return sum(n // (k ** i) for i in range(1, n // k + 1))\n\n    return sorted(sequence, key=lambda x: points(x, k), reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\r\n    for i in range(days):\r\n        for j in range(i + 1, days + 1):\r\n            profit = prices[j] - prices[i]\r\n            if profit > max_profit:\r\n                max_profit = profit\r\n    return max_profit\r\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in find_fruitful_days\n            profit = prices[j] - prices[i]\r\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    alien_dict = {char: index for index, char in enumerate(alien_dictionary)}\n    \n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_dict = {\n        \"Aries\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Gemini\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Cancer\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Leo\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Libra\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Scorpio\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Sagittarius\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Capricorn\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Aquarius\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0},\n        \"Pisces\": {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    }\n\n    if not birthdays:\n        return None\n\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n\n        if 3 < month < 5:\n            zodiac_dict[\"Aries\"][\"Fire\"] += 1\n        elif 4 < month < 6:\n            zodiac_dict[\"Gemini\"][\"Air\"] += 1\n        elif 5 < month < 7:\n            zodiac_dict[\"Cancer\"][\"Water\"] += 1\n        elif 6 < month < 8:\n            zodiac_dict[\"Leo\"][\"Fire\"] += 1\n        elif 7 < month", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 61\n        elif 7 < month\n    elif 7 < month\n                  ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in tree_traversal\n    dfs(tree, [])\n  File \"<string>\", line 29, in dfs\n            paths.append(path + [node['value']])\nKeyError: 'value'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    \n    top = 0\n    bottom = len(arr) - 1\n    left = 0\n    right = len(arr[0]) - 1\n    result = ''\n    \n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        \n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        \n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        \n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if len(features) == 2 and all(isinstance(feature, (int, type(None))) for feature in features):\n            population, size = features\n            if population is not None and size is not None:\n                density = round(population / size, 2)\n                result[planet] = f\"{density}\"\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    for i in range(len(aliens)):\n        if aliens[i] == ray:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray - 1:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray + 1:\n            aliens.pop(i)\n            break\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = ''\n        for j in range(2*i+1):\n            if j == i or j == 2*i:\n                layer += 'A'\n            else:\n                layer += alphabet[(i+j)%26]\n        fountain += layer.center(2*n-1) + '\\n'\n    return fountain[:-1]  # Remove the last newline character\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    encountered = []\n    for continent in [\"Asia\", \"Africa\", \"Europe North America\", \"South America\"]:\n        for human, home in humans.items():\n            if home == continent:\n                encountered.append(human)\n    return encountered\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    prime_indices = [i for i, num in enumerate(sequence) if is_prime(num)]\n    for index in prime_indices:\n        sequence[index] = 'prime'\n\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
