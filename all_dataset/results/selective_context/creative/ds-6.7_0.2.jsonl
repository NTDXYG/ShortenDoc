{"task_id": "EvoEval/0", "completion": "\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 25}\n    base_cost = 50\n    extra_cost = 10\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item = 1\n            base_cost *= 1.5\n            extra_cost *= 1.5\n        weight = item\n        if weight > 5:\n            total_cost += base_cost + extra_cost\n        else:\n            total_cost += base_cost\n    total_cost *= location_factor.get(location, 1)\n    return \"{:.2f}\".format(total_cost)\n"}
{"task_id": "EvoEval/1", "completion": "\n    location_factor = {\"Local\": 1, \"National\": 1.5, \"International\": 25}\n    base_cost = 50\n    additional_cost = 10\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        if weight > 5:\n            total_cost += base_cost + additional_cost\n        else:\n            total_cost += base_cost\n    total_cost *= location_factor.get(location, 1)\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if not char.isalpha():\n                encrypted_word += char\n                continue\n            ascii_val = ord(char.lower())\n            if type(key) == str:\n                key = sum([ord(c) for c in key])\n            shift = (ascii_val - 97 + key) % 26 + 97\n            encrypted_char = chr(shift) if char.islower() else chr(shift).upper()\n            encrypted_word += encrypted_char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int) -> List[str]:\n        if index == len(s):\n            return ['']\n        result = []\n        for next_string in helper(s, index + 1):\n            result.append(next_string)\n            if index < len(s) - 1:\n                result.append(chr(int(s[index:index + 2]) + 96) + next_string)\n        return result\n    return [''.join(x) for x in helper(input_string, 0)]\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    count = 1\n    tallest = candles[0]\n\n    for candle in candles[1:]:\n        if candle > tallest:\n            count += 1\n            tallest = candle\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:  # moving diagonally up\n            if col == cols - 1:  # if at the right end, move down\n                row += 1\n            elif row == 0:  # if at the top, move right\n                col += 1\n            else:  # move up and left\n                row -= 1\n                col += 1\n        else:  # moving diagonally down\n            if row == rows - 1:  # if at the bottom, move right\n                col += 1\n            elif col == 0:  # if at the left end, move down\n                row += 1\n            else:  # move down and right\n                row += 1\n                col -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # get the dimensions of the grid\n    n_rows = len(grid)\n    n_cols = len(grid[0])\n\n    # get the coordinates of the clicked cell\n    x, y = position\n\n    # check if the clicked cell is out of the grid\n    if x < 0 or x >= n_rows or y < 0 or y >= n_cols:\n        return grid\n\n    # if the clicked cell is a mine, return the initial grid\n    if grid[x][y] == 1:\n        return grid\n\n    # if the clicked cell is already revealed, return the initial grid\n    if grid[x][y] == 0:\n        return grid\n\n    # if the clicked cell is an unknown cell, reveal it and all adjacent cells\n    grid[x][y] = 0\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n_rows and 0 <= ny < n_cols and grid[nx][ny] != 1:\n                grid[nx][ny] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri La found'\n    else:\n        return 'Shangri La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into lines\n    lines = canvas.split('\\n')\n\n    # Initialize variables\n    painter_pos = None\n    wall_count = 0\n    empty_count = 0\n    painted_count = 0\n\n    # Iterate over each line\n    for i in range(len(lines)):\n        line = lines[i]\n\n        # Iterate over each character in the line\n        for j in range(len(line)):\n            char = line[j]\n\n            # If the character is the painter, update the painter position and increment the wall count\n            if char == 'P':\n                if painter_pos is not None:\n                    return 'Invalid canvas'\n                painter_pos = (i, j)\n                wall_count += 1\n            # If the character is a wall, increment the wall count\n            elif char == '#':\n                wall_count += 1\n            # If the character is empty, increment the empty count\n            elif char == '-':\n                empty_count += 1\n\n        # If the line ends with a wall, increment the wall count\n        if line.endswith('#'):\n            wall_count += 1\n\n    # If the painter position is not found, return the canvas as it is\n    if painter_pos is None:\n        return canvas\n\n    # Calculate the number of painted spaces\n    painted_count = empty_count - wall_count\n\n    # If the painted count is not even, return 'Invalid canvas'\n    if painted_count % 2 != 0:\n        return 'Invalid canvas'\n\n    # Update the painter position with the painted character\n    lines[painter_pos[0]] = lines[painter_pos[0]][:painter_pos[1]] + '*' + lines[painter_pos[0]][painter_pos[1] + 1:]\n\n    # Return the updated canvas\n    return '\\n'.join(lines)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.translate(str.maketrans('', '', st.punctuation)).lower()\n    words = string.split()\n    word_freq = {word: words.count(word) for word in words}\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 0, 'D': 0, 'B': 0}\n    animal_counts = []\n    sound_count = 0\n    animal_string = animal_string.split()\n\n    for animal in animal_string:\n        if animal[0] in animal_sounds and animal_sounds[animal[0]] < 2:\n            sound_count = animal.count('|')\n            animal_sounds[animal[0]] += 1\n            animal_counts.append(sound_count)\n\n        if len(animal_counts) == 5:\n            break\n\n    return animal_counts\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    sum_flux_values = sum(flux_values)\n    return most_common * sum_flux_values\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    for elem in elems:\n        if count_dict[elem] == min_count:\n            return elem\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            alias += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            alias += consonants[(consonants.index(char) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.title()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    pair = False\n    triple = False\n    four = False\n    for count in value_counts.values():\n        if count == 2:\n            pair = True\n            score += 2\n        elif count == 3:\n            triple = True\n            score += 6\n        elif count == 4:\n            four = True\n            score += 12\n        elif count == 5:\n            score += 20\n    if pair and triple:\n        score += sum([int(card[0])*2 for card in hand if value_counts[card[0]] == 2])\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    fib_seq = [0, 1]\n    for i in range(2, n+1):\n        fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n    return sum(fib_seq)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 0\n    while count < n:\n        num += 7\n        if sum(int(i) for i in str(num)) == 7:\n            count += 1\n    return num\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    vampires = []\n    humans = []\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    count = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                count += 1\n                break\n    return count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        result = []\n        for i in range(1, n + 1):\n            result.append(\",\".join(map(str, list(range(1, i + 1)) + list(range(i, 0, -1)))))\n        return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, grid, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def crossword_validator(grid, words):\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                for direction in directions:\n                    for word in words:\n                        if check_word(word, grid, row, col, direction):\n                            return True\n        return False\n\n    return crossword_validator(grid, words)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    # calculate distance in km\n    distance = t * v\n    # convert distance to light years\n    distance_in_light_years = distance / 9.461e12\n    return distance_in_light_years\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '1',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n    alien_word = \"\"\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # split the text into sentences\n    sentences = text.split('.')\n    sentences = [sentence.strip() for sentence in sentences]\n\n    # count the frequency of the word in each sentence\n    word_freq_in_sentences = [(sentence, sentence.split().count(word)) for sentence in sentences]\n\n    # find the sentence with the max frequency of the word\n    max_freq_sentence = max(word_freq_in_sentences, key=lambda x: x[1], default=(0, \"\"))\n\n    return (max_freq_sentence[1], max_freq_sentence[0]) if max_freq_sentence[1] > 0 else (0, \"\")\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0\n    elif taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 12500:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 17000:\n        return 2500 + (taxable_income - 12500) * 0.25\n    else:\n        return 7500 + (taxable_income - 17000) * 0.30\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if s == s[::-1]]\n    return sorted(list(set(palindromes)))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Initialize the queue with the start point and the path\n    queue = [(start, [start])]\n    # Initialize the set of visited points\n    visited = set()\n\n    while queue:\n        # Get the current point and path\n        (x, y), path = queue.pop(0)\n        # If the current point is the end point, return the path\n        if (x, y) == end:\n            return path\n        # Mark the current point as visited\n        visited.add((x, y))\n        # Add the neighbors of the current point to the queue\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    # If no path is found, return an empty list\n    return []\n\nmaze = [[1,0,1,1,1], [1,0,0,0,1], [1,1,1,0,1], [1,0,0,0,1], [1,1,1,1,1]]\nstart = (0,0)\nend = (4, 4)"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    # Initialize the first row and first column to 1\n    for i in range(m+1):\n        dp[i][0] = 1\n    for j in range(n+1):\n        dp[0][j] = 1\n\n    # Fill in the rest of the dp array\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[m][n]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import re\n\n    def swap(playlist, i, seed):\n        if \"Rock\" not in playlist[i]:\n            playlist[i], playlist[seed % len(playlist)] = playlist[seed % len(playlist)], playlist[i]\n        return playlist\n\n    playlist = [re.sub(r\"\\s*Rock\\s*\", \"\", song) for song in playlist]\n    for i in range(len(playlist)):\n        playlist = swap(playlist, i, seed)\n        seed = (seed * 16807) % 21477\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    for i in range(n):\n        if i < m - 1:\n            transformation[i] = transformation[i - 1] + 10 if transformation[i - 1] < 100 else 100\n        elif i == m - 1:\n            transformation[i] = transformation[i - 1] * 2 if transformation[i - 1] < 100 else 100\n        else:\n            transformation[i] = transformation[i - 1] - 10 if transformation[i - 1] > 0 else 0\n    return transformation\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email:\n        if email.index(\"@\") == 0 or email.index(\"@\") == len(email) - 1:\n            return False\n        if \".\" in email[email.index(\"@\") + 1:]:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_string = \"\"\n    for char in s:\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_string += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_string += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_string += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        else:\n            transformed_string += char\n    return transformed_string\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude42\",\n        \":(\": \"\ud83d\ude41\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude02\"\n    }\n    words = sentence.split()\n    translated_words = []\n    for word in words:\n        if word in emoticons:\n            translated_words.append(emoticons[word])\n        else:\n            translated_words.append(word)\n    return \" \".join(translated_words)\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the ASCII art\n    art = []\n\n    # Add the top frame\n    art.append('*' * (n * len(s) + n))\n\n    # Add the middle part\n    for _ in range(n):\n        row = '*'\n        for char in s:\n            row += char * n\n        row += '*'\n        art.append(row)\n\n    # Add the bottom frame\n    art.append('*' * (n * len(s) + n))\n\n    return art\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions.sort(key=lambda x: (int(x[2]), x[0]))\n    result = []\n    total = 0\n    for potion in potions:\n        if total + int(potion[2]) <= target:\n            result.append(' '.join(potion[:2]))\n            total += int(potion[2])\n        elif total + int(potion[2]) > target and total <= target:\n            result.append(' '.join(potion[:2]))\n            return result\n    return result if total == target else []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the fuel consumption\n    fuel_consumption = distance * speed * planet_gravity * 0.01\n\n    # check if the spaceship has enough fuel to reach the planet\n    if fuel_consumption > fuel:\n        return 'Insufficient fuel'\n    else:\n        # calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    count = 0\n    for i in range(1, n-1):\n        count += min(left_max[i], right_max[i]) - arr[i]\n    return count+n\n"}
{"task_id": "EvoEval/46", "completion": "\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E',\n        '0010': 'F', '110': 'G', '0000': 'H', '0111': 'I', '101': 'J',\n        '1100': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O',\n        '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T',\n        '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y',\n        '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7',\n        '11100': '8', '11110': '9', '11111': '0'\n    }\n\n    words = msg.split('/')\n    decoded_msg = ''\n\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += ' '\n\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n    return ' '.join(''.join(morse_code[i.upper()] for i in word) for word in text.split(' '))\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = []\n    for i in range(len(string)):\n        result.append(list_of_alphabets[i % len(list_of_alphabets)])\n    return ''.join(result)\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            is_upper = char.isupper()\n            char = char.lower()\n            if char in vowels:\n                transformed_s += vowels[(vowels.index(char) + 1) % len(vowels)].upper() if is_upper else vowels[(vowels.index(char) + 1) % len(vowels)]\n            else:\n                transformed_s += consonants[(consonants.index(char) + 1) % len(consonants)].upper() if is_upper else consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == '?':\n            transformed_s += '!' if i % 2 == 0 else '?'\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shifted_alphabet = alphabet[shift:] + alphabet[:shift]\n    shifted_alphabet_upper = shifted_alphabet.upper()\n\n    result = ''\n    current_shift = shift\n\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                result += shifted_alphabet[alphabet.index(char) - shift]\n            else:\n                result += shifted_alphabet_upper[alphabet.upper().index(char) - shift]\n            current_shift += 1\n        else:\n            result += char\n\n    return result\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..'\n    }\n\n    words = s.split(' ')\n    morse_code = ''\n\n    for word in words:\n        for letter in word:\n            morse_code += morse_code_dict[letter] + ' '\n        morse_code = morse_code.rstrip() + ' / '\n\n    return morse_code.rstrip(' / ')\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = \"\"\n        spell_index = 0\n        for letter in dish:\n            if letter.isalpha():\n                transformed_dish += magic_spell[spell_index % len(magic_spell)]\n                spell_index += 1\n            else:\n                transformed_dish += letter\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans = str.maketrans(vowels, 'eioua')\n    trans2 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans3 = str.maketrans(' ', '@')\n    trans4 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans5 = str.maketrans(vowels, 'eioua')\n    trans6 = str.maketrans(' ', '@')\n    trans7 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans8 = str.maketrans(vowels, 'eioua')\n    trans9 = str.maketrans(' ', '@')\n    trans10 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans11 = str.maketrans(vowels, 'eioua')\n    trans12 = str.maketrans(' ', '@')\n    trans13 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans14 = str.maketrans(vowels, 'eioua')\n    trans15 = str.maketrans(' ', '@')\n    trans16 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans17 = str.maketrans(vowels, 'eioua')\n    trans18 = str.maketrans(' ', '@')\n    trans19 = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzb')\n    trans20 = str.maketrans(vowels, '"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize the sugar locations\n    sugar_locations = set(sugar_locations)\n\n    # Initialize the ant positions and directions\n    ants = [(pos, dir) for pos, dir in ant_positions]\n\n    # Initialize the happy ants count\n    happy_ants = 0\n\n    # March the ants\n    for i in range(len(ants)):\n        pos, dir = ants[i]\n        if dir == \"right\":\n            for j in range(pos + 1, path_length):\n                if j in sugar_locations:\n                    happy_ants += 1\n                    sugar_locations.remove(j)\n                    break\n        else:\n            for j in range(pos - 1, -1, -1):\n                if j in sugar_locations:\n                    happy_ants += 1\n                    sugar_locations.remove(j)\n                    break\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 0:\n                new_s += c.swapcase()\n            else:\n                if c.lower() in vowels:\n                    new_s += vowels[(vowels.index(c.lower())+1)%5]\n                else:\n                    new_s += consonants[(consonants.index(c.lower())-1)%21]\n        else:\n            new_s += c\n    return new_s\n"}
{"task_id": "EvoEval/62", "completion": "\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        layers.append(p)\n    return layers[::-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [i for i in range(start, end + 1) if is_prime(i) and i % divisor == 0]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, instructions in order.items():\n        if food in menu:\n            final_order[food] = list(menu[food])\n            for action, ingredients in instructions.items():\n                if action == \"add\":\n                    for ingredient in ingredients:\n                        if ingredient not in final_order[food]:\n                            final_order[food].append(ingredient)\n                elif action == \"remove\":\n                    for ingredient in ingredients:\n                        if ingredient in final_order[food]:\n                            final_order[food].remove(ingredient)\n    if not final_order:\n        final_order = menu\n    return final_order\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepper\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            result[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Your code here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n            if encrypted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, word in enumerate(lst):\n        count = sum(c.isdigit() for c in word)\n        result.append(f\"Once upon, in a kingdom far away, lived a magical creature with the name of '{word}' who was known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    chests = 0\n    rows = len(grid)\n    cols = len(grid[0])\n\n    # Loop through the grid\n    for i in range(rows):\n        for j in range(cols):\n            # If a chest is found\n            if grid[i][j] == 1:\n                # Increment the number of chests\n                chests += 1\n\n    # Calculate the number of trips\n    trips = math.ceil(chests / bag_capacity)\n\n    return trips\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    transformed_str = \"\"\n    for i in range(len(input_str)):\n        char = input_str[i]\n        if char.isalpha():\n            if char.lower() in vowels:\n                transformed_str += chr((ord(char) - 97 + 1) % 5 + 97) if char.islower() else chr((ord(char) - 65 + 1) % 5 + 65)\n            else:\n                transformed_str += chr((ord(char) - 97 + 1) % 21 + 97) if char.islower() else chr((ord(char) - 65 + 1) % 21 + 65)\n        elif char.isdigit():\n            transformed_str += str((int(char) + 1) % 10)\n        elif char in \".,;:\":\n            transformed_str += char\n        elif char == \"?\":\n            transformed_str += \"!\" if i % 2 != 0 else \"?\"\n    return transformed_str\n"}
{"task_id": "EvoEval/76", "completion": "\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n):\n        cnt = 0\n        while n % k == 0:\n            n /= k\n            cnt += 1\n        return cnt\n\n    sequence.sort(reverse=True)\n    return [points(n) for n in sequence]\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n):\n        res.append(mat[i][i])\n        res.append(mat[i][n - i - 1])\n    if n % 2 == 0:\n        res = res[:-1]\n    return res\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(prices) < 2 or days < 1:\n        return 0\n\n    max_profit = 0\n    min_price = prices[0]\n\n    for i in range(1, days):\n        max_profit = max(max_profit, prices[i] - min_price)\n        min_price = min(min_price, prices[i])\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCOR\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCOR\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_elements = {\n        'aries': 'fire',\n        'taurus': 'earth',\n        'gemini': 'air',\n        'cancer': 'water',\n        'leo': 'fire',\n        'virgo': 'earth',\n        'libra': 'air',\n        'scorpio': 'water',\n        'sagittarius': 'fire',\n        'capricorn': 'earth',\n        'aquarius': 'air',\n        'pisces': 'water'\n    }\n    elements = {'fire': 0, 'earth': 0, 'air': 0, 'water': 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:])\n        zodiac_sign = list(zodiac_elements.keys())[list(zodiac_elements.values()).index(birthday[4:7].lower())]\n        if (month == 3 and day >= 21 and day <= 41) or (month == 4 and day <= 19):\n            elements['fire'] += 1\n        elif (month == 4 and day >= 20 and day <= 50) or (month == 5 and day <= 20):\n            elements['earth'] += 1\n        elif (month == 5 and day >= 21 and day <= 60) or (month == 6 and day <= 20):\n            elements['air'] += 1\n        elif (month == 6 and day >= 21 and day <= 72) or (month == 7 and day <= 22):\n            elements['water'] += 1\n        elif (month == 7 and day >= 23 and day <= 82) or (month == 8 and day <= 22):\n            elements['fire'] += 1\n        elif (month == 8 and day >= 23 and day <= 92) or (month == 9 and day <= 22):\n            elements['earth'] += 1\n        elif (month == 9 and day >= 23 and day <= 102) or (month == 10 and day <= 22):\n            elements['air'] += 1\n        elif (month == 10 and"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n"}
{"task_id": "EvoEval/85", "completion": "\n    princess_x, princess_y = coord\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')]*cols for _ in range(rows)]\n    dp[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j]+1)\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1]+1)\n    return dp[princess_x-1][princess_y-1] if dp[princess_x-1][princess_y-1] != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral_coords(r1, c1, r2, c2):\n        for c in range(c1, c2 + 1):\n            yield r1, c\n        for r in range(r1 + 1, r2 + 1):\n            yield r, c2\n        if r1 < r2 and c1 < c2:\n            for c in range(c2 - 1, c1, -1):\n                yield r2, c\n            for r in range(r2, r1, -1):\n                yield r, c1\n\n    if not arr:\n        return ''\n\n    ans = []\n    r1, r2 = 0, len(arr) - 1\n    c1, c2 = 0, len(arr[0]) - 1\n    while r1 <= r2 and c1 <= c2:\n        ans.append(''.join(arr[r][c] for r, c in spiral_coords(r1, c1, r2, c2)))\n        r1 += 1\n        r2 -= 1\n        c1 += 1\n        c2 -= 1\n    return ''.join(ans)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n\n\"\"\"\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if abs(i - ray) > 1]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # Calculate the product\n    product = num1 * num2\n\n    # Convert the product to a string and split into individual digits\n    digits = [int(d) for d in str(product)]\n\n    # Return the sum of the digits\n    return sum(digits)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\" and status == \"On Ground\":\n            status = \"In Space\"\n        elif action == \"Move\" and status == \"In Space\":\n            pass\n        elif action == \"Land\" and status == \"In Space\":\n            status = \"On Ground\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = alphabet[i%26] * (2*i+1)\n        fountain += layer.center(2*n-1) + '\\n'\n    return fountain.rstrip('\\n')\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the encoded message\n    encoded_message = ''\n\n    # Loop through the message\n    for i in range(len(message)):\n        # If the character is a letter\n        if message[i] in alphabet or message[i] in ALPHABET:\n            # Determine the alphabet to use\n            alpha = alphabet if message[i] in alphabet else ALPHABET\n\n            # Calculate the new position\n            new_pos = (alpha.index(message[i]) + n_values[i % len(n_values)]) % 26\n\n            # Add the new character to the encoded message\n            encoded_message += alpha[new_pos]\n        else:\n            # Add the character to the encoded message\n            encoded_message += message[i]\n\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    spell_list = []\n    for spell in strings:\n        words = spell.split(' ')\n        words.sort(key=len)\n        spell_list.append(' '.join(words))\n    return spell_list\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate the sum of the diagonals\n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return the absolute difference\n    return abs(sum_diag1 - sum_diag2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 or product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + 1)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for i in range(len(rounds)):\n        current_position = (current_position + rounds[i] * music) % len(players)\n        players.pop(current_position)\n        if current_position == len(players):\n            current_position = 0\n    return players\n\n"}
