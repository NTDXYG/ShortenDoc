{"task_id": "EvoEval/0", "completion": "\n    # Initialize the total cost to 0\n    total_cost = 0\n    \n    # Initialize a flag to track if a string item has been encountered\n    string_item_encountered = False\n    \n    # Iterate over each item in the list\n    for item in items:\n        # If the item is a string, consider its weight as 1kg and set the flag to True\n        if isinstance(item, str):\n            item_weight = 1.0\n            string_item_encountered = True\n        # If the item is a float, consider its weight as the item itself\n        elif isinstance(item, float):\n            item_weight = item\n        # If the item is neither a string nor a float, raise a ValueError\n        else:\n            raise ValueError(\"Invalid item type\")\n        \n        # Calculate the base shipping cost for the item\n        base_cost = 50\n        \n        # If the item's weight is more than 5kg, add an additional charge\n        if item_weight > 5:\n            base_cost += 10\n        \n        # If a string item has been encountered, multiply the base cost by 1.5\n        if string_item_encountered:\n            base_cost *= 1.5\n        \n        # Add the base cost to the total cost\n        total_cost += base_cost\n    \n    # Apply the location factor to the total cost\n    if location == \"Local\":\n        pass\n    elif location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 25\n    else:\n        pass\n    \n    # Return the total shipping cost rounded to two decimal places as a string\n    return \"{:.2f}\".format(total_cost)  # Use format() instead of f-string for Python 3.6 compatibility\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize the total cost to 0\n    total_cost = 0\n    \n    # Define the location factors\n    location_factors = {\n        \"Local\": 1,\n        \"National\": 1.5,\n        \"International\": 25\n    }\n    \n    # Get the location factor\n    factor = location_factors.get(location, 1)\n    \n    # Iterate over each item in the list\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            weight = 1\n        # If the item is a float, use its value as the weight\n        elif isinstance(item, float):\n            weight = item\n        # If the item is neither a string nor a float, skip it\n        else:\n            continue\n        \n        # Calculate the base cost for the item\n        base_cost = 50\n        \n        # If the item's weight is more than 5kg, add an additional charge\n        if weight > 5:\n            base_cost += 10\n        \n        # Add the base cost to the total cost\n        total_cost += base_cost\n    \n    # Multiply the total cost by the location factor\n    total_cost *= factor\n    \n    # Return the total shipping cost rounded to two decimal places\n    return round(total_cost, 2)  # Changed here\n"}
{"task_id": "EvoEval/2", "completion": "\n    # Convert the key to an integer\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n    \n    # Initialize an empty list to store the encrypted words\n    encrypted_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize an empty string to store the encrypted word\n        encrypted_word = \"\"\n        \n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is a letter\n            if char.isalpha():\n                # Find the position of the character in the alphabet\n                position = ord(char.lower()) - ord('a')\n                \n                # Shift the position by the key\n                new_position = (position + key) % 26\n                \n                # If the original character was uppercase, convert the encrypted character to uppercase\n                if char.isupper():\n                    encrypted_word += chr(new_position + ord('A'))\n                else:\n                    encrypted_word += chr(new_position + ord('a'))\n            else:\n                # If the character is not a letter, leave it as is\n                encrypted_word += char\n        \n        # Add the encrypted word to the list\n        encrypted_words.append(encrypted_word)\n    \n    # Return the list of encrypted words\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    if not input_string:\n        return []\n\n    def backtrack(start, path):\n        if start == len(input_string):\n            result.append(''.join(path))\n            return\n        for i in range(int(input_string[start])):\n            path.append(chr(96 + i))\n            backtrack(start + 1, path)\n            path.pop()\n\n    result = []\n    backtrack(0, [])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    count = 1\n    for height in candles[1:]:\n        if height > max_height:\n            max_height = height\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n    result = []\n    left, right = 0, len(matrix[0]) - 1\n    for row in matrix:\n        if left > right:\n            break\n        # Traverse from left to right\n        for i in range(left, right + 1):\n            result.append(row[i])\n        left += 1\n        right -= 1\n        # Traverse from right to left\n        for i in range(right, left - 1, -1):\n            result.append(row[i])\n        left += 1\n        right -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Get the x and y coordinates of the clicked cell\n    x, y = position\n    \n    # Check if the clicked cell is out of the grid\n    if x < 0 or x >= rows or y < 0 or y >= cols:\n        return grid\n    \n    # Check if the clicked cell is a mine\n    if grid[x][y] == 1:\n        return grid\n    \n    # Check if the clicked cell is already revealed\n    if grid[x][y] == 0:\n        return grid\n    \n    # Mark the clicked cell as revealed\n    grid[x][y] = 0\n    \n    # Check all adjacent cells (horizontal, vertical, and diagonal)\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the current cell\n            if dx == 0 and dy == 0:\n                continue\n            \n            # Calculate the coordinates of the adjacent cell\n            nx, ny = x + dx, y + dy\n            \n            # Check if the adjacent cell is out of the grid\n            if nx < 0 or nx >= rows or ny < 0 or ny >= cols:\n                continue\n            \n            # Check if the adjacent cell is a mine\n            if grid[nx][ny] == 1:\n                continue\n            \n            # Recursively reveal the adjacent cell\n            grid = minesweeper_clicked(grid, (nx, ny))\n    \n    # Return the updated grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Initialize the current position at (0,0)\n    current_position = [0, 0]\r\n    # Iterate over each direction in the code sequence\r\n    for direction in code_sequence:\r\n        # Update the current position based on the direction\r\n        if direction == 0:\r\n            current_position[1] += 1\r\n        elif direction == 1:\r\n            current_position[0] += 1\r\n        elif direction == 2:\r\n            current_position[1] -= 1\r\n        elif direction == 3:\r\n            current_position[0] -= 1\r\n        # If the current position is back at the starting point, return 'Shang found'\r\n        if current_position == [0, 0]:\r\n            return 'Shang found'\r\n    # If the sequence does not lead back to the starting point, return 'Shangri not found'\r\n    return 'Shangri not found'  # Changed the return statement to match the problem description\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into rows\n    rows = canvas.split('\\n')\n    \n    # Initialize a set to keep track of visited cells\n    visited = set()\n    \n    # Define the directions for DFS\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Perform DFS from each 'P' cell\n    for i in range(len(rows)):\n        for j in range(len(rows[i])):\n            if rows[i][j] == 'P':\n                # Mark the current cell as visited\n                visited.add((i, j))\n                \n                # Perform DFS from the current cell\n                stack = [(i, j)]\n                while stack:\n                    x, y = stack.pop()\n                    for dx, dy in directions:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < len(rows) and 0 <= ny < len(rows[nx]) and rows[nx][ny] == '-' and (nx, ny) not in visited:\n                            # Mark the new cell as visited and add it to the stack\n                            visited.add((nx, ny))\n                            stack.append((nx, ny))\n    \n    # Update the canvas with painted cells\n    for i in range(len(rows)):\n        for j in range(len(rows[i])):\n            if (i, j) in visited and rows[i][j] == '-':\n                rows[i] = rows[i][:j] + '*' + rows[i][j+1:]\n    \n    # Join the rows back into a string\n    updated_canvas = '\\n'.join(rows)\n    \n    # Check if there are multiple 'P' or the number of painted spaces divides the empty spaces evenly\n    if updated_canvas.count('P') > 1 or updated_canvas.count('*') % (updated_canvas.count('-') + updated_canvas.count('*')) == 0:\n        return 'Invalid canvas'\n    \n    return updated_canvas\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lower case\n    string = ''.join(e for e in string if e.isalnum() or e.isspace()).lower()\n    # Split the string into words\n    words = string.split()\n    # Create a dictionary to store the frequency of each word\n    frequency = {}\n    # Iterate over each word in the list of words\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # If the word is not in the dictionary, add it with a count of 1\n        else:\n            frequency[word] = 1\n    # Return the dictionary of word frequencies\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Initialize an empty dictionary to store the count of each animal\n    animal_count = {}\r\n    # Initialize an empty list to store the count of each animal in the order they appear\n    result = []\r\n    # Split the input string into a list of animal-sound pairs\n    animal_pairs = animal_string.split()\r\n    # Iterate over each animal-sound pair\r\n    for pair in animal_pairs:\r\n        # Check if the pair is not empty\r\n        if pair:\r\n            # Get the animal and sound from the pair\r\n            animal, sound = pair[0], pair[1:].count('|')\r\n            # Check if the animal is valid and has not appeared twice before\r\n            if animal in ['C', 'D', 'B'] and animal not in animal_count or animal_count[animal] < 2:\r\n                # Increment the count of the animal in the dictionary\r\n                animal_count[animal] = animal_count.get(animal, 0) + 1\r\n                # Append the count of the animal to the result list\r\n                result.append(sound)\r\n                # Check if the total count of animals has reached 5\r\n                if len(result) == 5:\r\n                    # Break the loop as we have reached the limit\r\n                    break\r\n    # Return the result list\r\n    return result\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    # Check if the list of fruits has only one element\n    if len(fruits) == 1:\n        # If it has only one element, return the message with the singular form of the fruit\n        return f\"Oh, are those {fruits[0]} from {location}?Marvelous!\"\n    # Check if the list of fruits has two elements\n    elif len(fruits) == 2:\n        # If it has two elements, return the message with the two fruits\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}?Marvelous!\"\n    # If the list of fruits has more than two elements\n    else:\n        # Return the message with the first fruit, the word \"and\", and the rest of the fruits\n        return f\"Oh, are those {fruits[0]}, and {', '.join(fruits[1:-1])} and from {location}?Marvelous!\"\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Count the occurrence of each element in the list\n    count_dict = {}\n    for num in flux_values:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with the maximum occurrence\n    max_count = max(count_dict.values())\n    \n    # If there are multiple elements with the maximum occurrence, select the smallest one\n    most_occurred_num = min([num for num, count in count_dict.items() if count == max_count])\n    \n    # Find the sum of all elements in the list\n    total_sum = sum(flux_values)\n    \n    # Multiply the sum of all elements with the most occurred number\n    energy_signature = total_sum * most_occurred_num\n    \n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elems = [elem for elem, count in count_dict.items() if count == min_count]\n    return min(rarest_elems)  # return the first rarest element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = (vowels.index(char.lower()) + 1) % len(vowels)\n                alias += vowels[index]\n            else:\n                index = (consonants.index(char.lower()) + 1) % len(consonants)\n                alias += consonants[index]\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Create a dictionary to store the count of each card value\n    card_count = {}\n    for card in hand:\n        value = card[0]\n        if value in 'JQK':\n            value = 11 if value == 'J' else 12 if value == 'Q' else 13\n        elif value == 'A':\n            value = 1\n        else:\n            value = int(value)\n        if value in card_count:\n            card_count[value] += 1\n        else:\n            card_count[value] = 1\n\n    # Calculate the score based on the count of each card value\n    score = 0\n    for value, count in card_count.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += value * 2\n        elif count == 4:\n            score += value * 3\n        elif count == 5:\n            score += value * 4\n\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return sum(fib_sequence)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard, magic in wizards:\n        dragon_hp -= magic\n        if dragon_hp <= 0:\n            return wizard\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    i = 1\n    while True:\n        if sum(int(digit) for digit in str(i)) == 7 and i % 7 == 0:\n            return i\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Initialize a variable to store the count of humans in danger\n    humans_in_danger = 0\n    \n    # Iterate over each row in the matrix\n    for i in range(len(m)):\n        # Iterate over each cell in the row\n        for j in range(len(m[i])):\n            # Check if the cell is a human\n            if m[i][j] == 1:\n                # Check if there is a vampire in the same row\n                if 2 in m[i]:\n                    # If there is a vampire in the same row, increment the count of humans in danger\n                    humans_in_danger += 1\n                # Check if there is a vampire in the same column\n                elif any(m[k][j] == 2 for k in range(len(m))):\n                    # If there is a vampire in the same column, increment the count of humans in danger\n                    humans_in_danger += 1\n    \n    # Return the count of humans in danger\n    return humans_in_danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Create a set of words for efficient lookups\n    word_set = set(words)\n    \n    # Iterate over each row in the grid\n    for row in grid:\n        # Iterate over each word in the word set\n        for word in word_set:\n            # Check if the word is in the row\n            if word in ''.join(row):\n                # If the word is found, remove it from the set\n                word_set.remove(word)\n    \n    # Iterate over each column in the grid\n    for col_idx in range(len(grid[0])):\n        # Iterate over each word in the word set\n        for word in word_set:\n            # Check if the word is in the column\n            if all(grid[row_idx][col_idx] == word[i] for i, row_idx in enumerate(range(len(grid))) if i < len(word)):\n                # If the word is found, remove it from the set\n                word_set.remove(word)\n    \n    # If there are no words left in the set, return True\n    return len(word_set) == 0\n"}
{"task_id": "EvoEval/22", "completion": "\n    # Define the conversion factor from km to light years\n    light_year_km = 9.461 * (10 ** 12)\n    \n    # Calculate the distance traveled in km\n    distance_km = v * t\n    \n    # Convert the distance from km to light years\n    distance_ly = distance_km / light_year_km\n    \n    return distance_ly\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += str(nth_prime(ord(char) - 96))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for char in english_word:\n        alien_word += alien_dict.get(char, '')\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    words = text.split()\r\n    word_count = {}\r\n    max_count = 0\r\n    max_sentence = \"\"\r\n    for i in range(len(words)):\r\n        if words[i].endswith(\".\"):\r\n            sentence = \" \".join(words[i - 1:words.index(words[i]) + 1])\r\n            if words[i] in word_count:\r\n                word_count[words[i]] += 1\r\n            else:\r\n                word_count[words[i]] = 1\r\n            if word_count[words[i]] > max_count:\r\n                max_count = word_count[words[i]]\r\n                max_sentence = sentence\r\n    if word in word_count:\r\n        return (word_count[word], max_sentence)\r\n    else:\r\n        return (0, \"\")\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if the start and end are the same\n    if start == end:\n        return []\n\n    # Get the number of rows and columns in the maze\n    rows, cols = len(maze), len(maze[0])\n\n    # Create a visited set to keep track of visited cells\n    visited = set()\n\n    # Create a stack to store the path\n    stack = [(start, [])]\n\n    # Define the possible directions\n    directions = [(0, 1, 'right'), (0, -1, 'left'), (1, 0, 'down'), (-1, 0, 'up')]\n\n    while stack:\n        # Get the current cell and path\n        (x, y), path = stack.pop()\n\n        # If the current cell is the end, return the path\n        if (x, y) == end:\n            return path\n\n        # Mark the current cell as visited\n        visited.add((x, y))\n\n        # Explore the neighbors\n        for dx, dy, direction in directions:\n            nx, ny = x + dx, y + dy\n\n            # Check if the neighbor is within the maze and is not a wall\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0 and (nx, ny) not in visited:\n                # Add the neighbor to the stack\n                stack.append(((nx, ny), path + [direction]))\n\n    # If the path does not exist, return an empty list\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate the taxable income by subtracting the deductions from the income\n    taxable_income = income - deductions\n    \n    # Initialize the tax amount to 0\n    tax_amount = 0\n    \n    # Calculate the tax for the first $10000 of income (tax-free)\n    tax_amount += 0\n    \n    # Calculate the tax for the next $25 of income (15% tax rate)\n    tax_amount += (10000 + 25) * 0.15\n    \n    # Calculate the tax for the next $45 of income (25% tax rate)\n    tax_amount += (10000 + 25 + 45) * 0.25\n    \n    # Calculate the tax for any income over $130 (30% tax rate)\n    tax_amount += max(0, taxable_income - 10000 - 25 - 45) * 0.30\n    \n    # Return the total tax amount\n    return tax_amount\n"}
{"task_id": "EvoEval/29", "completion": "\n    # Initialize an empty set to store unique palindrome substrings\n    pal_substrings = set()\n    \n    # Iterate over the string with two nested loops to generate all substrings\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            # Extract the substring\n            substring = s[i:j]\n            \n            # Check if the substring is a palindrome\n            if substring == substring[::-1]:\n                # Add the palindrome substring to the set\n                pal_substrings.add(substring)\n    \n    # Convert the set to a list and sort it in ascending order\n    pal_substrings = sorted(list(pal_substrings))\n    \n    return pal_substrings\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the possible movements in the maze (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Create a queue for BFS, containing the start point\n    queue = [(start, [start])]\n    \n    # Create a set to store visited points\n    visited = set([start])\n    \n    while queue:\n        # Dequeue the next point and its path\n        (x, y), path = queue.pop(0)\n        \n        # If this is the end point, return the path\n        if (x, y) == end:\n            return path\n        \n        # For each possible movement\n        for dx, dy in movements:\n            nx, ny = x + dx, y + dy\n            \n            # If the new point is within the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 1) and ((nx, ny) not in visited):\n                # Mark the new point as visited and enqueue it with its path\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    \n    # If no path is found, return an empty list\n    return []"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * n for _ in range(m)]\n    \n    # There is only one way to reach each cell in the first row and first column\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    \n    # Fill in the rest of the 2D array\n    for i in range(1, m):\n        for j in range(1, n):\n            # The number of unique paths to each cell is the sum of the number of unique paths to the cell above it and the cell to its left\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    # The number of unique paths to the bottom-right cell is stored in the bottom-right cell of the 2D array\n    return dp[m-1][n-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    sorted_playlist = sorted(playlist)\n    seed = seed\n    for i in range(playlist_length):\n        if \"Rock\" in sorted_playlist[i]:\n            continue\n        swap_index = (seed % playlist_length)\n        if swap_index == i:\n            continue\n        sorted_playlist[i], sorted_playlist[swap_index] = sorted_playlist[swap_index], sorted_playlist[i]\n        seed = (seed * 16807) % 21477\n    return sorted_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\r\n    ways[0] = 1  # There is 1 way to reach the 0th step (i.e., don't move)\r\n    # For each magic stone power\r\n    for power in magic_stones:\r\n        # For each step from the power to the top of the staircase\r\n        for i in range(power, n + 1):\r\n            # The number of ways to reach this step is the sum of the number of ways to reach the previous steps\r\n            ways[i] += ways[i - power]\r\n    # The number of ways to reach the top of the staircase is stored in the last element of the list\r\n    return ways[n]  # Return the number of ways to reach the top of the staircase\r\n\r"}
{"task_id": "EvoEval/34", "completion": "\n    # Initialize an empty list to store the transformation percentages\n    transformation_percentages = []\n    \n    # Initialize the current transformation percentage to 0\n    current_transformation = 0\n    \n    # Loop over each day in the cycle\n    for day in range(1, n + 1):\n        # If the day is the most intense day, double the current transformation percentage\n        if day == m:\n            current_transformation = min(current_transformation * 2, 100)\n        # If the day is before the most intense day, increase the current transformation percentage by 10\n        elif day < m:\n            current_transformation = min(current_transformation + 10, 100)\n        # If the day is after the most intense day, decrease the current transformation percentage by 10\n        else:\n            current_transformation = max(current_transformation - 10, 0)\n        \n        # Append the current transformation percentage to the list\n        transformation_percentages.append(int(current_transformation))\n    \n    # Return the list of transformation percentages\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\":\r\n        return False\r\n    at_index = email.index(\"@\")\r\n    if \".\" not in email[at_index + 1:]:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]  # The constant of integration is set to zero\n    for i in range(1, len(xs)):\n        integral_coefficients.append(xs[i - 1] / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for char in s:\n        if char in vowels:\n            idx = vowels.index(char)\n            if char.isupper():\n                result += vowels[(idx + 1) % 5].upper()\n            else:\n                result += vowels[(idx + 1) % 5]\n        elif char in consonants:\n            idx = consonants.index(char)\n            if char.isupper():\n                result += consonants[(idx + 1) % 21].upper()\n            else:\n                result += consonants[(idx + 1) % 21]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\"\n    }\n    for emot in emoticons:\n        sentence = sentence.replace(emot, emoticons[emot])\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create the top and bottom frames\n    frame = \"*\" * (n * len(s) + 3)\n    # Create the first row of the ASCII art\n    ascii_art = \"*\" + s * n + \"*\\n\"\n    # Create the middle rows of the ASCII art\n    for i in range(n):\n        ascii_art += \"*\" + s[i % len(s)] * n + \"*\\n\"\n    # Create the last row of the ASCII art\n    ascii_art += frame\n    return ascii_art\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions.sort(key=lambda x: (int(x[1]), x[0]))\n    target = 0\n    result = []\n    for potion in potions:\n        if target + int(potion[1]) <= target:\n            continue\n        if target + int(potion[1]) == target:\n            result.append(potion[0] + \" \" + potion[1])\n            break\n        result.append(potion[0] + \" \" + potion[1])\n        target += int(potion[1])\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows = len(arr)\n    cols = len(arr[0])\n    visited = [[False for _ in range(cols)] for _ in range(rows)]\n    queue = [(0, 0, 0)]\n    visited[0][0] = True\n    while queue:\n        x, y, energy = queue.pop(0)\n        if arr[x][y] == 0:\n            return energy\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny]:\n                queue.append((nx, ny, energy + arr[nx][ny]))\n                visited[nx][ny] = True\n    return -1  # No safe cell found\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player has acquired a legendary item\n    if 5 in player_input:\n        # If the player has acquired a legendary item, remove it from the list\n        player_input.remove(5)\n        # Sort the list in descending order to find the second most valuable item\n        player_input.sort(reverse=True)\n        # Return True and the rarity of the second most valuable item\n        return True, player_input[1] if len(player_input) > 1 else -1\n    # If the player has not acquired a legendary item, return False and None\n    return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    trip_duration = distance / speed\n    \n    # Check if the spaceship can reach the planet\n    if trip_duration <= fuel:\n        # Calculate the fuel consumption for the trip\n        fuel_consumption = (spaceship_weight * planet_gravity * 0.1) * trip_duration\n        \n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        \n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if the spaceship cannot reach the planet\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    return sum(q) <= w + e\n"}
{"task_id": "EvoEval/45", "completion": "\n    if not arr:\n        return 0\n    max_view = 0\n    stack = []\n    for i in range(len(arr)):\n        while stack and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        if stack:\n            max_view = max(max_view, i - stack[-1])\n        stack.append(i)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_message = \"Take the cannoli.\"\n        result = []\n        for case in test_cases:\n            words = [word.replace(',', '').replace('.', '').replace('?', '').replace('!', '').lower() for word in case]\n            secret = ''\n            for word in words:\n                if secret_message in word:\n                    secret += word[0]\n            result.append(secret)\n        return result\n    # Test the function\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))  # ['ho', 'egbdf']\n    print(hidden_message([['apple', 'Ban', 'grape', 'kiwi', 'melon'], ['Take the cannoli.', 'bgkm']]))  # ['a', 'b']\n    print(hidden_message(['This', 'is', '?a', 'test', 'case??', 'hi']))  # ['t', 'i', 'a', 't', 'h']\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??', 'hi'], ['Take the cannoli.']]))  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['t', 'Take the cannoli.']  # ['"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}  # Filter out items with quantity 0 or less\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0',\n        'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111',\n        'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111',\n        'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',\n        'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011',\n        'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001',\n        '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110',\n        '0': '11111'\n    }\n    msg = msg.split('/')\n    decoded_msg = ''\n    for word in msg:\n        word = word.split()\n        for char in word:\n            decoded_msg += list(morse_code.keys())[list(morse_code.values()).index(char)]\n    return decoded_msg\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ' ': ' '}\n    result = ''\n    for char in text.upper():\n        if char in morse_code:\n            result += morse_code[char] + ' '\n    return result.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i, char in enumerate(string):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # First, sort the orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize the count of fulfilled orders\n    fulfilled_orders = 0\n    \n    # Initialize the remaining capacity of the oven\n    remaining_capacity = n\n    \n    # Iterate over the sorted orders\n    for order in orders:\n        # If the order can be fulfilled with the remaining capacity, increment the count of fulfilled orders and reset the remaining capacity\n        if order <= remaining_capacity:\n            fulfilled_orders += 1\n            remaining_capacity = n\n        # If the order cannot be fulfilled with the remaining capacity, increment the count of batches and reset the remaining capacity\n        else:\n            # Calculate the number of batches needed to fulfill the order\n            batches_needed = (order - 1) // n + 1\n            \n            # If the number of batches needed is less than or equal to the maximum number of batches, increment the count of fulfilled orders and reset the remaining capacity\n            if batches_needed <= m:\n                fulfilled_orders += 1\n                remaining_capacity = n\n            # If the number of batches needed is more than the maximum number of batches, break the loop\n            else:\n                break\n    \n    # Return the count of fulfilled orders\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, c in enumerate(s):\n        if c in vowels:\n            idx = (vowels.index(c) + 1) % len(vowels)\n            result += vowels[idx]\n        elif c in consonants:\n            idx = (consonants.index(c) + 1) % len(consonants)\n            result += consonants[idx]\n        elif c == '?':\n            if i % 2 == 0:\n                result += '!'\n            else:\n                result += '?'\n        else:\n            result += c\n    return result\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift = 0\n    for char in message:\n        if char.isalpha():\n            shift += 1\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    morse_code = ''\n    for char in s:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += magic_spell[i % len(magic_spell)]\n        new_menu[transformed_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    earth_phrase = earth_phrase.replace(' ', '@')\n    words = earth_phrase.split('@')\n    translated_words = []\n    for word in words:\n        if word[0] in vowels:\n            translated_word = word[0].upper() + word[1:] + 'xy'\n        else:\n            translated_word = word[0].upper() + word[1:] + 'yz'\n        for i in range(len(word)):\n            if word[i] in vowels:\n                if word[i] == 'a':\n                    translated_word = translated_word.replace(word[i], 'e')\n                elif word[i] == 'e':\n                    translated_word = translated_word.replace(word[i], 'i')\n                elif word[i] == 'i':\n                    translated_word = translated_word.replace(word[i], 'o')\n                elif word[i] == 'o':\n                    translated_word = translated_word.replace(word[i], 'u')\n                elif word[i] == 'u':\n                    translated_word = translated_word.replace(word[i], 'a')\n            else:\n                if word[i] == 'z':\n                    translated_word = translated_word.replace(word[i], 'b')\n                else:\n                    translated_word = translated_word.replace(word[i], consonants[consonants.index(word[i]) + 1])\n        translated_words.append(translated_word)\n    return '@'.join(translated_words)  # return the translated phrase with '@' as the separator"}
{"task_id": "EvoEval/59", "completion": "\n    # First, we sort the dictionary items based on the number of recipes in descending order and then by the ingredient in ascending order\n    sorted_items = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Then, we create a list of tuples where the first element of each tuple is an ingredient and the second is a number of recipes\n    result = [(ingredient, num_recipes) for ingredient, num_recipes in sorted_items]\n    \n    # Finally, we return the result\n    return result\n"}
{"task_id": "EvoEval/60", "completion": "\n    sugar_locations = set(sugar_locations)\n    happy_ants_count = 0\n    for position, direction in ant_positions:\n        while position < path_length:\n            if position in sugar_locations:\n                happy_ants_count += 1\n            if direction == \"right\":\n                position += 1\n            else:\n                position -= 1\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 1:\n                if c.islower():\n                    result.append(c.upper())\n                else:\n                    result.append(c.lower())\n            else:\n                if c.lower() in vowels:\n                    if c.lower() == 'a':\n                        result.append('e')\n                    elif c.lower() == 'e':\n                        result.append('i')\n                    elif c.lower() == 'i':\n                        result.append('o')\n                    elif c.lower() == 'o':\n                        result.append('u')\n                    elif c.lower() == 'u':\n                        result.append('a')\n                else:\n                    if c.lower() == 'b':\n                        result.append('z')\n                    elif c.lower() == 'c':\n                        result.append('b')\n                    elif c.lower() == 'd':\n                        result.append('y')\n                    elif c.lower() == 'f':\n                        result.append('x')\n                    elif c.lower() == 'g':\n                        result.append('v')\n                    elif c.lower() == 'h':\n                        result.append('u')\n                    elif c.lower() == 'j':\n                        result.append('t')\n                    elif c.lower() == 'k':\n                        result.append('s')\n                    elif c.lower() == 'l':\n                        result.append('r')\n                    elif c.lower() == 'm':\n                        result.append('q')\n                    elif c.lower() == 'n':\n                        result.append('p')\n                    elif c.lower() == 'p':\n                        result.append('n')\n                    elif c.lower() == 'q':\n                        result.append('m')\n                    elif c.lower() == 'r':\n                        result.append('l')\n                    elif c.lower() == 's':\n                        result.append('k')\n                    elif c.lower() == 't':\n                        result.append('j')\n                    elif c.lower() == 'u':\n                        result.append('h')\n                    elif c.lower() == 'v':\n                        result.append('g')\n                    elif c.lower() == 'w':\n                        result.append('f')\n                    elif c.lower() == 'x':\n                        result.append('d')\n                    elif c.lower() == 'y':\n                        result.append('c')\n                    elif c.lower() == 'z':\n                        result.append('b')\n        else:\n            result.append(c)\n    return ''.join(result)Python"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in reci.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n    return pyramid[::-1]  # Return the list in reverse order\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in new_ingredients:\n                        new_ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    if ingredient not in new_ingredients:\n                        new_ingredients.append(ingredient)\n            final_order[food] = new_ingredients\n        else:\n            final_order[food] = ingredients\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_nums = [i for i in range(2, n) if is_prime(i)]\n    prime_anagrams = []\n    for i in range(len(prime_nums)):\n        for j in range(i + 1, len(prime_nums)):\n            if is_anagram(prime_nums[i], prime_nums[j]):\n                prime_anagrams.append((prime_nums[i], prime_nums[j]))\n    return sorted(prime_anagrams)  # sort based on the first number in each tuple, then the second number\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        result[customer] = sum(meal['calories'] for meal in meals.get(customer, []))\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(arr)\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        if arr[0] <= arr[1]:\n            return True\n        else:\n            return False\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            # check if it is possible to get sorted array\n            # by rotating and swapping\n            if arr[0] > arr[1]:\n                return False\n            if arr[n - 1] < arr[n - 2]:\n                return False\n            if arr[i] > arr[i + 1]:\n                return False\n            if arr[i + 1] > arr[i + 2]:\n                return False\n            if arr[i] > arr[i + 2]:\n                return False\n            if arr[i + 2] > arr[i + 3]:\n                return False\n            if arr[i] > arr[i + 3]:\n                return False\n            if arr[i + 3] > arr[i + 4]:\n                return False\n            if arr[i] > arr[i + 4]:\n                return False\n            if arr[i + 4] > arr[i + 5]:\n                return False\n            if arr[i] > arr[i + 5]:\n                return False\n            if arr[i + 5] > arr[i + 6]:\n                return False\n            if arr[i] > arr[i + 6]:\n                return False\n            if arr[i + 6] > arr[i + 7]:\n                return False\n            if arr[i] > arr[i + 7]:\n                return False\n            if arr[i + 7] > arr[i + 8]:\n                return False\n            if arr[i] > arr[i + 8]:\n                return False\n            if arr[i + 8] > arr[i + 9]:\n                return False\n            if arr[i] > arr[i + 9]:\n                return False\n            if arr[i + 9] > arr[i + 10]:\n                return False\n            if arr[i] > arr[i + 10]:\n                return False\n            if arr[i + 10] > arr[i + 11]:\n                return False\n            if arr[i] > arr[i + 11]:\n                return False\n            if arr[i + 11] > arr[i + 12"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the indices of the cards\n    card_indices = {card: i for i, card in enumerate(cards)}\n    \n    # Iterate over the cards\n    for i in range(len(cards)):\n        # For each card, iterate over the remaining cards\n        for j in range(i + 1, len(cards)):\n            # If the product of the two cards equals the magic number, return their indices\n            if cards[i] * cards[j] == magicNumber:\n                return (card_indices[cards[i]], card_indices[cards[j]])\n    \n    # If no pair of cards multiplies to the magic number, return \"No magic today\"\n    return \"No magic today\"  # This line is unreachable, but it's here to satisfy the linter\n"}
{"task_id": "EvoEval/70", "completion": "\n    # Check if the path list is empty or if the planet does not exist in the dictionary\n    if not planets or not path or path[0] not in planets or path[-1] not in planets:\r\n        return False\r\n\r\n    # Iterate over the path list\n    for i in range(len(path) - 1):\r\n        # Check if the current planet connects directly to the next planet\r\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\r\n            return False\r\n\r\n    # If the function has not returned False, the path is valid\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    result = \"\"\n    vow_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if char.lower() in 'aeiou':\n                vow_count += 1\n        else:\n            result += char\n    return result, vow_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i, string in enumerate(lst):\n        count = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {count} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the total number of treasures in the pyramid\r\n    total_treasures = sum(sum(row) for row in grid)\r\n    \r\n    # Calculate the number of trips needed to collect all treasures\r\n    # We use the ceiling of the division of total_treasures by bag_capacity to get the number of trips\r\n    # We add 1 to account for the trip to enter the pyramid\r\n    trips = math.ceil(total_treasures / bag_capacity) + 1\r\n    \r\n    return trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string 's'\n    for char in s:\n        # Check if the character exists in the cipher dictionary\n        if char in cipher:\n            # If it exists, append its corresponding value to the result string\n            result += cipher[char]\n        else:\n            # If it does not exist, append the character as it is to the result string\n            result += char\n    \n    # Return the resulting string\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    punctuation = \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"\n    result = ''\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            idx = (vowels.index(char) + 1) % len(vowels)\n            result += vowels[idx]\n        elif char in consonants:\n            idx = (consonants.index(char) + 1) % len(consonants)\n            result += consonants[idx]\n        elif char in digits:\n            result += str((int(char) + 1) % 10)\n        elif char in punctuation:\n            if i % 2 == 0 and char == '?':\n                result += '!'\n            else:\n                result += char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    level = 0\n    total = 0\n    for num in lst:\n        total += num\n        level += 1\n        pyramid.append('#' * total)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    # Initialize a list to store the points for each number in the sequence\n    points = []\n    \n    # Iterate over each number in the sequence\n    for num in sequence:\n        # Initialize a variable to store the points for the current number\n        total_points = 0\n        \n        # While the number is divisible by k, add the number of times it can be divided by k to the total points\n        while num % k == 0:\n            total_points += 1\n            num //= k\n        \n        # Append the total points for the current number to the list\n        points.append(total_points)\n    \n    # Sort the list of points in decreasing order\n    points.sort(reverse=True)\n    \n    # Return the sorted list of points\n    return points\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if (i == 0 and j == 0) or (i == n - 1 and j == n - 1) or (i == 0 and j == n - 1) or (i == n - 1 and j == 0):\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize a list to store the maximum profit for each day\n    max_profit = [0] * (days + 1)\r\n    # Iterate over each day\n    for i in range(1, days + 1):\r\n        # Initialize the maximum profit for the current day to 0\r\n        max_profit[i] = 0\r\n        # Iterate over each previous day\n        for j in range(1, i + 1):\r\n            # Calculate the profit if the vendor buys the fruit on the current day and sells it on the previous day\r\n            profit = prices[i - 1] - prices[j - 1] + max_profit[j - 1]\r\n            # Update the maximum profit for the current day\r\n            max_profit[i] = max(max_profit[i], profit)\r\n    # Return the maximum profit for the last day\r\n    return max_profit[days] if max_profit[days] > 0 else 0\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the player's position and path\n    start_row, start_col = next((i, j) for i, row in enumerate(map) for j, cell in enumerate(row) if cell == 'S')\n    path = [(start_row, start_col)]\n    # Initialize the current position\n    current_row, current_col = start_row, start_col\n    # Process each instruction\n    for instruction in instructions:\n        # Get the new position based on the instruction\n        if instruction == 'up' and current_row > 0 and map[current_row - 1][current_col] != 'X':\n            new_row, new_col = current_row - 1, current_col\n        elif instruction == 'down' and current_row < len(map) - 1 and map[current_row + 1][current_col] != 'X':\n            new_row, new_col = current_row + 1, current_col\n        elif instruction == 'left' and current_col > 0 and map[current_row][current_col - 1] != 'X':\n            new_row, new_col = current_row, current_col - 1\n        elif instruction == 'right' and current_col < len(map[0]) - 1 and map[current_row][current_col + 1] != 'X':\n            new_row, new_col = current_row, current_col + 1\n        else:\n            # If the instruction is invalid, stay in the current position\n            new_row, new_col = current_row, current_col\n        # If the new position is the end 'E', return the path\n        if map[new_row][new_col] == 'E':\n            return path\n        # If the new position is not a wall, update the current position and add it to the path\n        if map[new_row][new_col] != 'X':\n            current_row, current_col = new_row, new_col\n            path.append((current_row, current_col))\n    # If the list of instructions ends before the player finds 'E', return the player's path so far\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Create a dictionary to store the order of the alien alphabet\n    alien_dict = {}\n    for i, char in enumerate(alien_dictionary):\n        alien_dict[char] = i\n\n    # Iterate over the list of words\n    for i in range(len(word_list) - 1):\n        # If the current word is longer than the next word, it's not sorted\n        if len(word_list[i]) > len(word_list[i + 1]):\n            return \"INCOR\"\n        # If the current word is not a prefix of the next word, it's not sorted\n        if not word_list[i + 1].startswith(word_list[i]):\n            # Check if the current word is lexicographically larger than the next word\n            for j in range(min(len(word_list[i]), len(word_list[i + 1]))):\n                if alien_dict[word_list[i][j]] > alien_dict[word_list[i + 1][j]]:\n                    return \"INCOR\"\n                elif alien_dict[word_list[i][j]] < alien_dict[word_list[i + 1][j]]:\n                    break\n            else:\n                # If the current word is lexicographically larger than the next word, it's not sorted\n                return \"INCOR\"\n    return \"CORRECT\"  # Return \"CORRECT\" if the list is sorted\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Define the zodiac signs and their corresponding elements\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n\n    # Initialize a dictionary to store the count of birthdays for each element\n    element_count = {}\n\n    # Iterate over each birthday in the list\n    for birthday in birthdays:\n        # Extract the month and day from the birthday\n        month, day = birthday.split(\"-\")[1:3]\n\n        # Determine the zodiac sign based on the month and day\n        for sign, dates in zodiac_signs.items():\n            if (month == \"03\" and 21 <= int(day) <= 31) or (month == \"04\" and 1 <= int(day) <= 19):\n                zodiac_sign = sign\n                break\n            elif (month == \"05\" and 1 <= int(day) <= 20):\n                zodiac_sign = sign\n                break\n            elif (month == \"06\" and 1 <= int(day) <= 20):\n                zodiac_sign = sign\n                break\n            elif (month == \"07\" and 1 <= int(day) <= 22):\n                zodiac_sign = sign\n                break\n            elif (month == \"08\" and 1 <= int(day) <= 22):\n                zodiac_sign = sign\n                break\n            elif (month == \"09\" and 1 <= int(day) <= 22):\n                zodiac_sign = sign\n                break\n            elif (month == \"10\" and 1 <= int(day) <= 22):\n                zodiac_sign = sign\n                break\n            elif (month == \"11\" and 1 <= int(day) <= 21):\n                zodiac_sign = sign\n                break\n            elif (month == \"12\" and 1 <= int(day) <= 19):\n                zodiac_sign = sign\n                break\n\n        # Increment the count for the corresponding element\n        if zodiac_sign in element_count:\n            element_count[zodiac_sign]"}
{"task_id": "EvoEval/83", "completion": "\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in 'aeiouAEIOU':\n            left += 1\n        elif s[right] not in 'aeiouAEIOU':\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n    return ''.join(s)Python"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return []\n            if not node:\n                return [path]\n            left_paths = dfs(node[0], path + [node[0]])\n            right_paths = dfs(node[1], path + [node[1]])\n            return left_paths + right_paths\n        return dfs(tree, [])\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]\n    tree = {1: {4: {}, 5: {8: {}}}, 3: {7: {2: {}}}}\n    assert tree_traversal(tree) == [[1, 4], [1, 5, 8], [1, 3, 7, 2], [1, 3, 7]]\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]\n    tree = {1: {4: {}, 5: {8: {}}}, 3: {7: {2: {}}}}\n    assert tree_traversal(tree) == [[1, 4], [1, 5, 8], [1, 3, 7, 2], [1, 3, 7]]  # noqa: E501\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]  # noqa: E501\n    tree = {1: {4: {}, 5: {8: {}}}, 3: {7: {2: {}}}}\n    assert tree_traversal(tree) == [[1, 4],"}
{"task_id": "EvoEval/85", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Create a visited matrix to keep track of visited cells\n    visited = [[False]*cols for _ in range(rows)]\n    \n    # Define the possible movements (right, down)\n    movements = [(0, 1), (1, 0)]\n    \n    # Define the heuristic function (Manhattan distance)\n    def heuristic(row, col):\n        return abs(row - coord[0]) + abs(col - coord[1])\n    \n    # Define the A* search function\n    def a_star_search(row, col):\n        # Create a priority queue to store the cells to be visited\n        queue = [(0, row, col)]\n        \n        # Create a dictionary to store the cost of reaching each cell\n        cost = {(row, col): 0}\n        \n        # Create a dictionary to store the parent of each cell\n        parent = {(row, col): None}\n        \n        # While the queue is not empty\n        while queue:\n            # Get the cell with the minimum cost from the queue\n            _, row, col = min(queue)\n            queue.remove((cost[(row, col)], row, col))\n            \n            # If the cell is the princess's coordinate, return the cost\n            if (row, col) == coord:\n                return cost[(row, col)]\n            \n            # Mark the cell as visited\n            visited[row][col] = True\n            \n            # For each possible movement\n            for dr, dc in movements:\n                nr, nc = row + dr, col + dc\n                \n                # If the new cell is within the grid and not visited\n                if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc]:\n                    # If the new cell is not a monster\n                    if grid[nr][nc] == 0:\n                        # Calculate the new cost\n                        new_cost = cost[(row, col)] + 1\n                        \n                        # If the new cell has not been visited before or the new cost is less than the previous cost\n                        if (nr, nc) not in cost or new_cost < cost[(nr, nc)]:\n                            # Update the cost and parent of the new cell\n                            cost[(nr, nc)] = new_cost\n                            parent[(nr, nc)] = (row, col)\n                            \n                            # Add the new cell to the queue\n                            queue"}
{"task_id": "EvoEval/86", "completion": "\n    # Sort the movies based on ratings and release year\n    sorted_movies = sorted(m_dict, key=lambda x: (-m_dict[x][0], -m_dict[x][1]))\n    # Return the sorted list of movie names\n    return sorted_movies\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        # top row\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        # right column\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        # bottom row\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        # left column\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result  # return the result as a string\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n       "}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(set(aliens))  # remove duplicates and sort the list\n    aliens = [alien for alien in aliens if alien % 2 == 0]  # keep only even aliens\n    aliens = [alien for alien in aliens if alien != ray]  # remove the alien at the aimed position\n    aliens = [alien for alien in aliens if abs(alien - ray) > 1]  # remove aliens in adjacent positions\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        if len(s) == 1:\n            return [[int(s)]]\n        combinations = []\n        for i in range(len(s)):\n            first_digit = s[i]\n            rest = s[:i] + s[i+1:]\n            for combination in get_combinations(rest):\n                combinations.append([int(first_digit)] + combination)\n                combinations.append(combination + [int(first_digit)])\n        return combinations\n\n    def sum_combinations(combinations):\n        return sum(sum(combination) for combination in combinations)\n\n    s1_combinations = get_combinations(s1)\n    s2_combinations = get_combinations(s2)\n    return sum_combinations(s1_combinations) * sum_combinations(s2_combinations)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            pass\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        elif status == 'On Ground' and action == 'Land':\n            return 'Invalid Action Sequence'\n        elif status == 'In Space' and action == 'Launch':\n            return 'Invalid Action Sequence'\n        elif status == 'On Ground' and action == 'Move':\n            return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each layer\n    for i in range(1, n + 1):\n        # Calculate the width of the current layer\n        width = 2 * i - 1\n        # Calculate the number of letters in the current layer\n        num_letters = min(i, 26)\n        # Loop through each letter in the current layer\n        for j in range(1, num_letters + 1):\n            # Calculate the position of the current letter\n            pos = width // 2 - j + 1\n            # Add the current letter to the result string, centered\n            result += ' ' * pos + chr(64 + j) + ' ' * (width - pos - 1)\n        # Add a newline character to the result string\n        result += '\\n'\n    # Return the result string\n    return result.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        if message[i] == \" \":\n            result += \" \"\n        else:\n            n = n_values[i % len(n_values)]\n            if message[i].isupper():\n                result += chr((ord(message[i]) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(message[i]) - 97 + n) % 26 + 97)\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(word.split(), key=len)) for word in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m) - i - 1] for i in range(len(m)))\n    return abs(diagonal1 - diagonal2)  # return the absolute difference between the two diagonals\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % (i + 1) == 0:\n            product = 1\n            for digit in str(abs(lst[i])):\n                product *= int(digit)\n            if product == i + 1:\n                magic_indices.append(i)\n    return sorted(magic_indices)  # Return a list of magic indices, sorted in ascending order.  # If there is no magic index in the list, return an empty list.  # Note: Indices are 0-based.  # Example: Input: lst = [0, 7, -6, 12, -20, 5, -7] Output: [5]  # Explanation: At index 0, value is 0, which is a multiple of 0, and the product of the digits equals the index. At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = 5.  # At index 5, 5 and (5 = "}
{"task_id": "EvoEval/97", "completion": "\n    # Check if the alien name is valid\n    if not isinstance(alien, str) or alien == \"\":\n        return []\n    \n    # Check if the humans dictionary is valid\n    if not isinstance(humans, dict):\n        return []\n    \n    # Define the order of continents\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the continents\n    for continent in continents:\n        # Check if the alien is in the current continent\n        if alien in continent:\n            # Iterate over the humans dictionary\n            for human, location in humans.items():\n                # Check if the human is in the current continent\n                if location == continent:\n                    # Add the human to the result list\n                    result.append(human)\n    \n    # Return the result list\n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2] + i)\n    prime_numbers = [num for num in sequence if is_prime(num)]\n    for num in prime_numbers:\n        sequence[sequence.index(num)] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        for i in range(round):\n            players.insert(0, players.pop())\n        players.pop()\n    return players\n"}
