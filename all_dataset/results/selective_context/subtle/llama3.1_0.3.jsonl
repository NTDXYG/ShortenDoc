{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Initialize an empty string to build the current group\n    current_group = ''\n    \n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == '(':\n            balance += 1\n            # If the balance is 1, it means we are starting a new group, so add the current group to the list and reset it\n            if balance == 1:\n                if current_group:\n                    separated_groups.append(current_group)\n                current_group = ''\n        # If the character is a close parenthesis, decrement the balance\n        elif char == ')':\n            balance -= 1\n            # If the balance is 0, it means we have closed the current group, so add it to the list\n            if balance == 0:\n                current_group += char\n                separated_groups.append(current_group)\n                current_group = ''\n        # If the character is not a parenthesis, add it to the current group\n        else:\n            current_group += char\n    \n    # Return the list of separated groups\n    return separated_groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Initialize a list to store the absolute differences\n    absolute_differences = []\n\n    # Iterate over the list of numbers\n    for num in numbers:\n        # Calculate the absolute difference between the current number and the median\n        absolute_difference = abs(num - median)\n        # Append the absolute difference to the list\n        absolute_differences.append(absolute_difference)\n\n    # Sort the list of absolute differences in ascending order\n    absolute_differences.sort()\n\n    # Calculate the median of the list of absolute differences\n    mad = absolute_differences[len(absolute_differences) // 2] if len(absolute_differences) % 2 else (absolute_differences[len(absolute_differences) // 2 - 1] + absolute_differences[len(absolute_differences) // 2]) / 2\n\n    # Return the median absolute deviation\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            stack.pop()\n            depth -= 1\n        else:\n            if stack:\n                result.append(max_depth)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum += num\n            product *= num\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        if num < min_val:\n            min_val = num\n        result.append(min_val)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        prefix = ''\n        for i in range(len(string)):\n            if is_palindrome(string[:i+1]):\n                prefix = string[:i+1]\n        return prefix + make_palindrome(string[len(prefix):])[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore\n\n"}
{"task_id": "EvoEval/13", "completion": "\nReturn the greatest common divisor of a and b\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        \"\"\"Return the least common multiple of a and b\"\"\"\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Define a dictionary to map the notes to their corresponding beats\n    note_beats = {'o': 4, '|': 2, '.|': 1, 'o.': 4, 'o|': 4, 'o.|': 4, '.o': 1, '|o': 2, '.o|': 1, '.o.': 1, 'o.o': 4, 'o.o|': 4, 'o.o.': 4, 'o.|o': 4, 'o.|o.': 4, 'o.|o|': 4, 'o.|o.o': 4, 'o.|o.o|': 4, 'o.|o.o.': 4, 'o.|o.o.o': 4, 'o.|o.o.o|': 4, 'o.|o.o.o.': 4, 'o.|o.o.o.o': 4, 'o.|o.o.o.o|': 4, 'o.|o.o.o.o.': 4, 'o.|o.o.o.o.o': 4, 'o.|o.o.o.o.o|': 4, 'o.|o.o.o.o.o.': 4, 'o.|o.o.o.o.o.o': 4, 'o.|o.o.o.o.o.o|': 4, 'o.|o.o.o.o.o.o.': 4, 'o.|o.o.o.o.o.o.o': 4, 'o.|o.o.o.o.o.o.o|': 4, 'o.|o.o.o.o.o.o.o.': 4, 'o.|o.o.o.o.o.o.o.o': 4, 'o.|o.o.o.o.o.o.o.o|': 4, 'o.|o.o.o.o.o.o.o.o.': 4, 'o.|o.o.o.o.o.o.o.o.o': 4, 'o.|o.o.o.o.o.o.o.o.o|': 4, 'o.|o.o.o.o.o.o.o.o.o.': 4, 'o.|o.o.o.o.o.o.o.o.o.o': 4, 'o.|o.o.o.o.o.o.o.o.o.o|': 4, 'o.|o.o.o.o.o.o.o.o.o.o.': 4, 'o.|o.o.o.o.o.o.o.o.o.o.o': 4, 'o.|o.o.o"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += len(substring)\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the string into a list of numbers\n    num_list = numbers.split()\n    \n    # Define a dictionary to map string numbers to integers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Sort the list of numbers based on their integer values\n    sorted_num_list = sorted(num_list, key=lambda x: num_dict[x], reverse=True)\n    \n    # Join the sorted list back into a string\n    sorted_str = ' '.join(sorted_num_list)\n    \n    return sorted_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list to store the numbers that occur only once\n    unique_numbers = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_numbers.append(num)\n\n    # Sort the list in descending order\n    unique_numbers.sort(reverse=True)\n\n    return unique_numbers\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join('u' if c.islower() else c for c in string)\n    elif exclusive_case == 'upper':\n        return ''.join('u' if c.isupper() else c for c in string)\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # <--- changed here\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([num for num in l if num > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"At least two coefficients are required to find a zero.\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient is required to find a zero.\")\n    return -xs[1] / xs[0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0], reverse=True)[i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 != 0 else sorted([l[i] for i in range(len(l)) if i % 2 == 0], reverse=True)[0] for i in range(len(l))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if b > n:\n            return None\n        if b % 2 == 0:\n            continue\n        for i in range(3, int(b ** 0.5) + 1, 2):\n            if b % i == 0:\n                break\n        else:\n            return b\n"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the list in ascending order\n    l.sort()\n    # We iterate over the list with three nested loops\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                # We check if the current three elements sum to ten\n                if l[i] + l[j] + l[k] == 10:\n                    # If they do, we return True\n                    return True\n    # If we have iterated over the entire list and haven't found three elements that sum to ten, we return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(\"\".join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b + 1\n    return str(b)  # return string representation\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] <= l[i + 1]:\n            decreasing = False\n        if l[i] >= l[i + 1]:\n            increasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    if n == 0:\n        return []\n    if n == 1:\n        return []\n    if n == 2:\n        return [xs[1]]\n    return [xs[i] * i for i in range(1, n)] + [xs[n - 1]] + derivative(xs[:-1])\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return -1\n    else:\n        a, b, c = 0, 0, -1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b - c\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    return ''.join([char for char in s if char in 'aeiou'])  # This line has been modified\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression and islower() method to filter out non-lowercase characters\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings, each representing a type of fruit and its quantity\n    fruits = s.split(', ')\n    \n    # Initialize a dictionary to store the total quantity of each fruit\n    fruit_quantities = {}\n    \n    # Iterate over each fruit in the list\n    for fruit in fruits:\n        # Split the fruit string into a name and a quantity\n        name, quantity = fruit.split(' ')\n        \n        # Convert the quantity to an integer\n        quantity = int(quantity)\n        \n        # Add the fruit to the dictionary\n        fruit_quantities[name] = quantity\n    \n    # Calculate the total quantity of all fruits\n    total_fruits = n - 1\n    \n    # Subtract the quantity of apples and oranges from the total\n    mangoes = total_fruits - fruit_quantities['apples'] - fruit_quantities['oranges']\n    \n    # Return the quantity of mangoes\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    min_odd = float('inf')\n    min_odd_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 != 0 and num < min_odd:\n            min_odd = num\n            min_odd_index = i\n    return [min_odd_index, min_odd] if min_odd != float('inf') else []\n"}
{"task_id": "EvoEval/69", "completion": "\n    return min([i for i in set(lst) if lst.count(i) >= i], default=-1)\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    return [max_val] + strange_sort_list(lst) + [min_val] + strange_sort_list(lst)\n"}
{"task_id": "EvoEval/71", "completion": "\n    a, b, c = sides\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    # Check if the list is balanced (i.e., it is a palindrome)\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of the elements in the list\n    total = sum(q)\n    \n    # Calculate the maximum possible weight\n    max_weight = len(q) * (max(q) + 1)\n    \n    # Check if the sum is less than the maximum possible weight\n    if total < max_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    if n % 2 == 0:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n    else:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid + 1:]\n    return sum(abs(a - b) for a, b in zip(left, right)) + (mid + 1) // 2\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        def total_chars(lst):\n            return sum(len(s) for s in lst)\n        if total_chars(lst1) > total_chars(lst2):\n            return lst1\n        elif total_chars(lst1) < total_chars(lst2):\n            return lst2\n        else:\n            return lst2\n    return total_match(lst1, lst2)"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    return round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the set of non-prime hex digits\n    non_prime_hex = set('02468ACE')\n    \n    # Initialize a counter for non-prime hex digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is in the set of non-prime hex digits\n        if char in non_prime_hex:\n            # If it is, increment the counter\n            count += 1\n    \n    # Return the count of non-prime hex digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) > 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # First, we sort the grades in descending order\n    grades.sort(reverse=True)\n    # Then, we create a list to store the letter grades\n    letter_grades = []\n    # We iterate over the grades\n    for grade in grades:\n        # If the grade is greater than 3.7, it's an A+\n        if grade > 3.7:\n            letter_grades.append('A+')\n        # If the grade is greater than 3, it's an A\n        elif grade > 3:\n            letter_grades.append('A')\n        # If the grade is greater than 2.7, it's a B+\n        elif grade > 2.7:\n            letter_grades.append('B+')\n        # If the grade is greater than 2, it's a B\n        elif grade > 2:\n            letter_grades.append('B')\n        # If the grade is greater than 1.7, it's a C+\n        elif grade > 1.7:\n            letter_grades.append('C+')\n        # If the grade is greater than 1, it's a C\n        elif grade > 1:\n            letter_grades.append('C')\n        # If the grade is greater than 0.7, it's a D+\n        elif grade > 0.7:\n            letter_grades.append('D+')\n        # If the grade is greater than 0, it's a D\n        elif grade > 0:\n            letter_grades.append('D')\n        # If the grade is less than or equal to 0, it's an F\n        else:\n            letter_grades.append('F')\n    # Finally, we return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))  # return True if the length is prime, otherwise return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**(n-1) + 10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-2) and i < 10**(n-1) + 10**(n-1):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-2) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-2) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-2) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-1) + 10**(n-2) and i < 10**n:\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1)"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the number to a string to easily access each digit\n    str_N = str(N)\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]  # [2:] is used to remove the '0x' prefix\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)  # join the words back together with spaces in between\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Check if the sum of the first and last element is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        # Sort the array in ascending order\n        array.sort()\n    else:\n        # Sort the array in descending order\n        array.sort(reverse=True)\n\n    # Remove duplicates by converting the array to a set and then back to a list\n    array = list(set(array))\n\n    # Sort the array in ascending order\n    array.sort()\n\n    return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n    return None\n"}
{"task_id": "EvoEval/91", "completion": "\n    return S.count('I am experiencing boredom') + S.count('I am bored') + S.count('I am so bored') + S.count('I am so boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('I am boooored') + S.count('"}
{"task_id": "EvoEval/92", "completion": "\n    return (x + abs(y) + abs(z)) % 1 == 0 and (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y))\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                encoded_char = chr((ord(char) - 65 + 3) % 26 + 65)\n            else:\n                encoded_char = chr((ord(char) - 97 + 3) % 26 + 97)\n            if encoded_char in vowels:\n                encoded_char = vowels[(vowels.index(encoded_char) + 3) % 5]\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = None\n    for num in lst:\n        if is_prime(num):\n            if min_prime is None or num < min_prime:\n                min_prime = num\n    if min_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(min_prime))  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # Convert the prime number to a string, iterate over each character (digit), convert it back"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the dictionary has less than 3 keys\n    if len(dict) < 3:\n        return False\n\n    # Check if all keys are strings\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n\n    # Check if all keys are in lower or title case\n    for key in dict:\n        if not key.islower() and not key.istitle():\n            return False\n\n    # If all checks pass, return True\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    return primes[::-1]  # Return the list in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # First, we need to extract the unit digits from the input numbers\n    a_unit_digit = a % 10\n    b_unit_digit = b % 10\n    \n    # Then, we multiply the unit digits\n    product = a_unit_digit * b_unit_digit\n    \n    # Finally, we return the product\n    return product % 10  # We use the modulo operator to get the unit digit of the product\n\u200b"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        # Convert the string to a float\n        num = float(value)\n        \n        # Round the number towards zero\n        return round(num)\n"}
