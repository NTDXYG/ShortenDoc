{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n            else:\n                break\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not numbers:\n        raise ValueError(\"The input list is empty\")\n\n    median = sorted(numbers)[len(numbers) // 2]\n    deviations = [abs(number - median) for number in numbers]\n    mad = sorted(deviations)[len(deviations) // 2]\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n        elif char == ' ':\n            result.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(min(result[-1], numbers[i]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = strings[0]\n    for s in strings:\n        if len(s) < len(shortest_str):\n            shortest_str = s\n    return shortest_str\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o.': 2, 'o..': 1, 'o...': 0.5}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    result.sort(reverse=True)\n    return result\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x], reverse=True)\n    return ' '.join(numbers_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n    min_diff = float(\"inf\")\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([x for x in l if x > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"First coefficient must not be zero\")\n    if xs[1] == 0:\n        raise ValueError(\"Second coefficient must not be zero\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"Polynomial must have opposite signs at ends\")\n    if len(xs) > 2 and xs[2] == 0:\n        raise ValueError(\"Third coefficient must not be zero\")\n    if len(xs) > 3 and xs[3] == 0:\n        raise ValueError(\"Fourth coefficient must not be zero\")\n    if len(xs) > 4 and xs[4] == 0:\n        raise ValueError(\"Fifth coefficient must not be zero\")\n    if len(xs) > 5 and xs[5] == 0:\n        raise ValueError(\"Sixth coefficient must not be zero\")\n    if len(xs) > 6 and xs[6] == 0:\n        raise ValueError(\"Seventh coefficient must not be zero\")\n    if len(xs) > 7 and xs[7] == 0:\n        raise ValueError(\"Eighth coefficient must not be zero\")\n    if len(xs) > 8 and xs[8] == 0:\n        raise ValueError(\"Ninth coefficient must not be zero\")\n    if len(xs) > 9 and xs[9] == 0:\n        raise ValueError(\"Tenth coefficient must not be zero\")\n    if len(xs) > 10 and xs[10] == 0:\n        raise ValueError(\"Eleventh coefficient must not be zero\")\n    if len(xs) > 11 and xs[11] == 0:\n        raise ValueError(\"Twelfth coefficient must not be zero\")\n    if len(xs) > 12 and xs[12] == 0:\n        raise ValueError(\"Thirteenth coefficient must not be zero\")\n    if len(xs) > 13 and xs[13] == 0:\n        raise ValueError(\"Fourteenth coefficient must not be zero\")\n    if len(xs) > 14 and xs[14] == 0:\n        raise ValueError(\"Fifteenth coefficient must not be zero\")\n    if len(xs) > 15 and xs[15] == 0:\n        raise ValueError(\"Sixteenth coefficient must not be zero\")\n    if len(xs) > 16 and xs[16] == "}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    for i in range(0, len(l), 3):\n        l[i:i+3] = sorted(l[i:i+3], reverse=True)\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)) and fib(i) % 2 != 0:\n            count += 1\n        i += 1\n    if count == n:\n        return fib(i-1)\n    else:\n        return None"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return 0\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return int(\"\".join(str(d) for d in digits[::-1]))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        fib = [0, 1]\n        for i in range(2, n+1):\n            fib.append(fib[i-1] + fib[i-2])\n        return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x <= t for x in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1) and set(s0) == set(s1)"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return []\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-3) + 2*fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s.lower() if c in 'aeiou')\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) - ord('a') + 1 for c in s.lower() if c.isalpha())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # your code goes here\n    # split the string into a list of words\n    words = s.split()\n    # find the index of the word \"apples\"\n    apples_index = words.index(\"apples\")\n    # find the index of the word \"oranges\"\n    oranges_index = words.index(\"oranges\")\n    # find the number of apples and oranges\n    apples = int(words[apples_index - 1])\n    oranges = int(words[oranges_index - 1])\n    # calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [(i, x) for i, x in enumerate(arr) if x % 2 != 0]\n    if not odd_values:\n        return []\n    min_odd_value = min(odd_values, key=lambda x: x[1])\n    return [min_odd_value[0], min_odd_value[1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # Write your code here\n    # Create a dictionary to store the frequency of each number\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Find the smallest integer with frequency greater than 1\n    smallest = float('inf')\n    for num, freq in frequency.items():\n        if freq > 1 and num < smallest:\n            smallest = num\n    \n    # If no such integer exists, return -1\n    if smallest == float('inf'):\n        return -1\n    \n    return smallest\n"}
{"task_id": "EvoEval/70", "completion": "\n    return sorted(lst, key=lambda x: (-x, x))\n"}
{"task_id": "EvoEval/71", "completion": "\n\n    def triangle_area(a, b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c))"}
{"task_id": "EvoEval/72", "completion": "\n\n    def will_it_fly(q):\n        if len(q) == 0:\n            return False\n        if len(q) == 1:\n            return False\n        if len(q) == 2:\n            if q[0] == q[1]:\n                return True\n            else:\n                return False\n        if q[0] == q[-1]:\n            return will_it_fly(q[1:-1])\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q):\n        if len(q) == 0:\n            return False\n        if len(q) == 1:\n            return False\n        if len(q) == 2:\n            if q[0] == q[1]:\n                return True\n            else:\n                return False\n        if q[0] == q[-1]:\n            return will_it_fly(q[1:-1])\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q):\n        if len(q) == 0:\n            return False\n        if len(q) == 1:\n            return False\n        if len(q) == 2:\n            if q[0] == q[1]:\n                return True\n            else:\n                return False\n        if q[0] == q[-1]:\n            return will_it_fly(q[1:-1])\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q):\n        if len(q) == 0:\n            return False\n        if len(q) == 1:\n            return False\n        if len(q) == 2:\n            if q[0] == q[1]:\n                return True\n            else:\n                return False\n        if q[0] == q[-1]:\n            return will_it_fly(q[1:-1])\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q):\n        if len(q) == 0:\n            return False\n        if len(q) =="}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[3] or arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        elif arr[0] == arr[4] or arr[1] == arr[3]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        elif arr[0] == arr[5] and arr[1] == arr[4] or arr[2] == arr[3]:\n            return 1\n        elif arr[0] == arr[5] or arr[1] == arr[4] or arr[2] == arr[3]:\n            return 2\n        else:\n            return 3\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        elif arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] or arr[3] == arr[3]:\n            return 1\n        elif arr[0] == arr[6] and arr[1] == arr[5] or arr[2] == arr[4] or arr[3] == arr[3]:\n            return 2\n        elif arr[0] == arr"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) == 0 and len(lst2) == 0:\n            return []\n        elif len(lst1) == 0:\n            return lst2\n        elif len(lst2) == 0:\n            return lst1\n        else:\n            total1 = sum(len(s) for s in lst1)\n            total2 = sum(len(s) for s in lst2)\n            if total1 > total2:\n                return lst1\n            elif total1 < total2:\n                return lst2\n            else:\n                return lst2\n    return total_match(lst1, lst2)"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            while x % i == 0:\n                x //= i\n            if x == 1:\n                return True, i\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(-100, 100):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n"}
{"task_id": "EvoEval/78", "completion": "\n    return sum(1 for i in num if i in '0459AE')\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n\n\ngrades = [4, 3, 1.7, 5]"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string.replace(\" \", \"\"))\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 10**(n-1) * 2\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(reverse=True)\n    for row in result:\n        row[1] = sorted(row[1])\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the given array\n    sorted_array = array.copy()\n    \n    # Remove any duplicate values from the array\n    sorted_array = list(set(sorted_array))\n    \n    # Sort the array in ascending order\n    sorted_array.sort()\n    \n    # Return the sorted array\n    return sorted_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_alphabet = encrypted_alphabet * 2\n    encrypted_text = ''\n    for char in s:\n        if char.lower() in alphabet:\n            if char.isupper():\n                encrypted_text += encrypted_alphabet[alphabet.index(char.lower())].upper()\n            else:\n                encrypted_text += encrypted_alphabet[alphabet.index(char)]\n        else:\n            encrypted_text += char\n    return encrypted_text\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n    return None\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    return len(re.findall(r'[.?!]', S))\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if abs(x) == abs(y) + abs(z) or abs(x) == abs(y) - abs(z) or abs(x) == abs(y) + abs(z) or abs(x) == abs(y) - abs(z):\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for i, letter in enumerate(message):\n        if letter.lower() in vowels:\n            encoded_message += message[i+3]\n        else:\n            encoded_message += letter\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a) % 10 * abs(b) % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper() and s.index(c) % 2 == 0)\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n    def closest_integer(number):\n        return int(number) + (1 if number - int(number) >= 0.5 else -1)\n    \"\"\"\n   "}
