{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n            else:\n                break\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = statistics.median(numbers)\n    deviations = [abs(number - median) for number in numbers]\n    mad = statistics.median(deviations)\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [delimeter] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n    result.append(max_depth)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum1 = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum1 += num\n            product *= num\n    return sum1, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(min(result[-1], numbers[i]))\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a[::-1], b[::-1]))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = strings[0]\n    for s in strings:\n        if len(s) < len(shortest_str):\n            shortest_str = s\n    return shortest_str\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == '|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    beats.sort(reverse=True)\n    return beats\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x], reverse=True)\n    return ' '.join(numbers_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    min_diff = float(\"inf\")\n    closest_pair = None\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"First coefficient must be non-zero\")\n    if xs[1] == 0:\n        raise ValueError(\"Second coefficient must be non-zero\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"First and second coefficients must have opposite signs\")\n    return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l.sort(key=lambda x: x % 3 == 0, reverse=True)\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0 and str(i).count('8') > 0)\n"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    count = 0\n    i = 0\n    while count < n:\n        fib_num = fib(i)\n        if fib_num % 2 != 0 and is_prime(fib_num):\n            count += 1\n        i += 1\n    if count == n:\n        return fib_num\n    else:\n        return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"0\"\n    else:\n        fib = [0, 0, 0]\n        for i in range(3, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        else:\n            return l[len(l) // 2]"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x <= t for x in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    return False\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - 1\n"}
{"task_id": "EvoEval/64", "completion": "\n    return s.count('a')+s.count('e')+s.count('i')+s.count('o')+s.count('u')\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[shift:] + x_str[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s.lower() if c.isalpha())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # your code goes here\n    fruits = s.split(', ')\n    apples = int(fruits[0].split(' ')[0])\n    oranges = int(fruits[1].split(' ')[0])\n    return n - apples - oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_nodes = [(i, node) for i, node in enumerate(arr) if node % 2 != 0]\n    if not odd_nodes:\n        return []\n    min_odd_node = min(odd_nodes, key=lambda x: (x[1], x[0]))\n    return [min_odd_node[0], min_odd_node[1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(lst)+1):\n        if c[i] > i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n    \"\"\"\n    def strange_sort_list(lst"}
{"task_id": "EvoEval/71", "completion": "\n\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n    \"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * ("}
{"task_id": "EvoEval/72", "completion": "\n\n    def willitfly(qw ''' Write returns True object q will,The object q will fly if's balanced (it is a palrom list), the sum elements an even and is less the maximum possible weight wExample will_itfly([1 5 \ufffd\ufffd\ufffd False # 1+ is less the maximum possible weight, but it unbalancedwill_itfly([3 2 1 \ufffd\ufffd\ufffd False # it's balanced, 3+2 is more the maximum possible weightwill_itfly([3 2 9 \ufffd\ufffd True # 3+ is less the maximum possible weight, and it balancedwill_itfly([3 5 \ufffd\ufffd\ufffd False # 3 is less the maximum possible weight, and it balanced, but the sum 3 odd'''\n    \"\"\"\n    def will_it_fly(q, w):\n        if sum(q) % 2 == 0 and sum(q) <= w and q == q[::-1]:\n            return True\n        else:\n            return False\n    \"\"\"\n    def willitfly(qw ''' Write returns True object q will,The object q will fly if's balanced (it is a palrom list), the sum elements an even and is less the maximum possible weight wExample will_itfly([1 5 \ufffd\ufffd\ufffd False # 1+ is less the maximum possible weight, but it unbalancedwill_itfly([3 2 1 \ufffd\ufffd\ufffd False # it's balanced, 3+2 is more the maximum possible weightwill_itfly([3 2 9 \ufffd\ufffd True # 3+ is less the maximum possible weight, and it balancedwill_itfly([3 5 \ufffd\ufffd\ufffd False # 3 is less the maximum possible weight, and it balanced, but the sum 3 odd'''\n    \"\"\"\n    def will_it_fly(q, w):\n        if sum(q) % 2 == 0 and sum(q) <= w and q == q[::-1]:\n            return True\n        else:\n            return False\n    \"\"\"\n    def willitfly(qw ''' Write returns True object q will,The object q will fly if's balanced (it is a palrom list), the sum elements an even and is less the maximum possible weight wExample will_itfly([1 5 \ufffd\ufffd\ufffd False # 1+"}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 8:\n        if arr[0] == arr[7] and arr[1] == arr[6] and arr[2] == arr[5] and arr[3] == arr[4]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 9:\n        if arr[0] == arr[8] and arr[1] == arr[7] and arr[2] == arr[6] and arr[3] == arr[5] and arr[4] == arr[4]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 10:\n        if arr[0] == arr[9] and arr[1] == arr[8] and arr[2] == arr[7] and arr[3] == arr[6] and arr[4] == arr[5]:\n            return 0\n        else:\n            return 1\n    if len(arr) == "}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) == 0 and len(lst2) == 0:\n            return []\n        elif len(lst1) == 0:\n            return lst2\n        elif len(lst2) == 0:\n            return lst1\n        else:\n            total1 = sum(len(s) for s in lst1)\n            total2 = sum(len(s) for s in lst2)\n            if total1 > total2:\n                return lst1\n            elif total1 < total2:\n                return lst2\n            else:\n                return lst2\n    print(total_match([], []))\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))\n    print(total_match(['hiadmin'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi']))\n    print(total_match(['1', '2', ',', ''], ['1', '2', ',', '']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hhi'], ['hi"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    for i in range(1, x + 1):\n        if n ** i == x:\n            return True, i\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(1, int(a**0.5)+1):\n            if i**3 == a:\n                return"}
{"task_id": "EvoEval/78", "completion": "\n    hex = \"0123456789ABCDEF\"\n    prime = \"2357\"\n    return sum(i in prime for i in num)\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n\n\ngrades = [4, 3, 1.7, 0.5]"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 2)) + starts_one_ends(n - 1)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(reverse=True)\n    for i in range(len(result)):\n        for j in range(i + 1, len(result)):\n            if result[i][0] == result[j][0]:\n                if result[i][1] > result[j][1]:\n                    result[i], result[j] = result[j], result[i]\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the given array\n    sorted_array = array.copy()\n    \n    # Sort the copy of the array\n    sorted_array.sort()\n    \n    # Remove any duplicate values from the array\n    sorted_array = list(set(sorted_array))\n    \n    # Return the sorted array\n    return sorted_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for char in s:\n        if char.lower() in alphabet:\n            if char.isupper():\n                encrypted_string += encrypted_alphabet[alphabet.index(char.lower())].upper()\n            else:\n                encrypted_string += encrypted_alphabet[alphabet.index(char)]\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    return len(re.findall(r'\\bI am bored\\b', S, re.I))\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for i, char in enumerate(message):\n        if char.lower() in vowels:\n            encoded_message += chr((ord(char.lower()) - ord('a') + 3) % 26 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict.keys()) < 3:\n        return False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key != key.lower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == n:\n                break\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a % 10 * b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 1 and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "EvoEval/99", "completion": "\n    if value == 0:\n        return 0\n    elif value < 0:\n        return int(value) - 1\n    else:\n        return int(value) + 1"}
