{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            depth += 1\n            current_group.append(char)\n        elif char == \")\":\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(\"\".join(current_group))\n                current_group = []\n\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 != 0 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    mad = [abs(x - median) for x in numbers]\n    return median(mad)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    result = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n        elif char == ' ':\n            if max_depth > 0:\n                result.append(max_depth)\n            max_depth = 0\n    if max_depth > 0:\n        result.append(max_depth)\n\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    current_min = numbers[0]\n    for num in numbers:\n        if num < current_min:\n            current_min = num\n        min_list.append(current_min)\n    return min_list\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[::-i] + string[i:]\n\n    return string[::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = min(strings, key=len)\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // greatest_common_divisor(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    distinct_characters = set(string)\n    return len(distinct_characters)\n"}
{"task_id": "EvoEval/17", "completion": "\n    beats = []\n    for note in music_string.split(' '):\n        if note == 'o':\n            beats.append(4)\n        elif note == '|':\n            beats.append(2)\n        elif note == '.':\n            beats.append(1)\n    return sorted(beats, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers) - 1):\n        current_diff = abs(numbers[i + 1] - numbers[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    result = [num for num, count in count_dict.items() if count == 1]\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ', '.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    positive_numbers = [num for num in l if num > 0]\n    positive_numbers.sort()\n    return positive_numbers\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"Polynomial must have at least two coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Polynomial must have non-zero leading coefficient\")\n    low = -1000\n    high = 1000\n    while high - low > 1e-10:\n        mid = (low + high) / 2\n        if poly(xs, low) * poly(xs, mid) <= 0:\n            high = mid\n        else:\n            low = mid\n    return low\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list of elements at indices divisible by 3\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort the list in descending order\n    div_by_three.sort(reverse=True)\n    # Create a new list l'\n    l_prime = []\n    # Iterate over the original list l\n    for i in range(len(l)):\n        # If the index is divisible by 3, use the sorted list\n        if i % 3 == 0:\n            l_prime.append(div_by_three.pop(0))\n        # Otherwise, use the original list\n        else:\n            l_prime.append(l[i])\n    return l_prime\n"}
{"task_id": "EvoEval/34", "completion": "\n    unique_elements = []\n    for i in l:\n        if i not in unique_elements:\n            unique_elements.append(i)\n    unique_elements.sort(reverse=True)\n    return unique_elements\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_num = l[0]\n    for num in l:\n        if num < min_num:\n            min_num = num\n    return min_num\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_generator():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib_num in fib_generator():\n        if fib_num % 2 == 0:\n            continue\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n**2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 10:\n        return int(str(x), base)\n    else:\n        return change_base(x // base, 10) * 10 + x % base\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"0\"\n    elif n == 3:\n        return \"1\"\n    else:\n        a, b, c, d = 0, 0, 0, 1\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return str(d)\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    # Convert lists to sets to remove duplicates and find common elements\n    common_elements = set(l1).intersection(set(l2))\n    # Sort the common elements in descending order and return\n    return sorted(common_elements, reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return -1\n    else:\n        a, b, c = 0, 1, -1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    return x[shift:] + x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    total_fruits = n + 1\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n    \n    #please upvote me it would encourage me alot\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd_nodes = [(i, x) for i, x in enumerate(arr) if x % 2 == 1]\n    if not odd_nodes:\n        return []\n    return list(min(odd_nodes, key=lambda x: (x[1], x[0])))\n"}
{"task_id": "EvoEval/69", "completion": "\n\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(freq):\n        if i <= freq[i]:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    from collections import Counter\n    freq = Counter(lst)\n    for i in sorted(f"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        result = []\n        while lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n            if lst:\n                result.append(min(lst))\n                lst.remove(min(lst))\n        return result\n    \n    # Test cases\n    print(strange_sort_list([1]))  # Output: [1]\n    print(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\n    print(strange_sort_list([1, 2, 3, 4]))  # Output: [4, 1, 3, 2]\n    print(strange_sort_list([5, 3, 1, 2, 4]))  # Output: [5, 1, 4, 2, 3]\n    print(strange_sort_list([10, 20, 30, 40, 50, 60]))  # Output: [60, 10, 50, 20, 40, 30]\n    print(strange_sort_list([-5, -1, -6, -2]))  # Output: [-1, -6, -2, -5]\n    print(strange_sort_list([0, 0, 0, 0]))  # Output: [0, 0, 0, 0]\n    print(strange_sort_list([1, 3, 2, 4]))  # Output: [4, 1, 3, 2]\n    print(strange_sort_list([1, 2, 3, 4, 5]))  # Output: [5, 1, 4, 2, 3]\n    print(strange_sort_list([1, 2, 3, 4, 5, 6]))  # Output: [6, 1, 5, 2, 4, 3]\n    print(strange_sort_list([1, 2, 3, 4, 5, 6, 7]))  #"}
{"task_id": "EvoEval/71", "completion": "\n\n    import math\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n            return round(area, 3)\n        else:\n            return -1\n    # Test cases\n    print(triangle_area(3, 4, 6))  # Output: 6.0\n    print(triangle_area(10, 10, 10))  # Output: 43.3\n    print(triangle_area(1, 2, 3))  # Output: -1\n    \"\"\"\n    import math\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n            return round(area, 3)\n        else:\n            return -1\n    # Test cases\n    print(triangle_area(3, 4, 6))  # Output: 6.0\n    print(triangle_area(10, 10, 10))  # Output: 43.3\n    print(triangle_area(1,"}
{"task_id": "EvoEval/72", "completion": "\n\n    def willitflyqw ' Write returns True object q willThe object q will fly if balanced (it is a palrom list), the sum an even and is less the maximum possible weight wExample will_itfly([ 5 \ufffd\ufffd False # 1+ is less the maximum possible weight, unbalancedwill_itfly([3 1 \ufffd\ufffd\ufffd False # it balanced 3+ more the maximum possible weightwill_itfly([3 9 \ufffd\ufffd True # 3+ is less the maximum possible weight, it balancedwill_itfly([3 5 \ufffd\ufffd False # 3 is less maximum possible weight it balanced, but sum 3 odd'''\n    \"\"\"\n    def will_itfly(q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is even and less than or equal to w\n        return sum(q) % 2 == 0 and sum(q) <= w\n    \"\"\"\n    def willitflyqw ' Write returns True object q willThe object q will fly if balanced (it is a palrom list), the sum an even and is less the maximum possible weight wExample will_itfly([ 5 \ufffd\ufffd False # 1+ is less the maximum possible weight, unbalancedwill_itfly([3 1 \ufffd\ufffd\ufffd False # it balanced 3+ more the maximum possible weightwill_itfly([3 9 \ufffd\ufffd True # 3+ is less the maximum possible weight, it balancedwill_itfly([3 5 \ufffd\ufffd False # 3 is less maximum possible weight it balanced, but sum 3 odd'''\n    \"\"\"\n    def will_itfly(q, w):\n        # Check if the list is a palindrome\n        if q != q[::-1]:\n            return False\n        # Check if the sum of the elements is even and less than or equal to w\n        return sum("}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        # Calculate the total number of characters in each list\n        total_chars_lst1 = sum(len(s) for s in lst1)\n        total_chars_lst2 = sum(len(s) for s in lst2)\n        \n        # Return the list with the greater total number of characters\n        if total_chars_lst1 > total_chars_lst2:\n            return lst1\n        elif total_chars_lst2 > total_chars_lst1:\n            return lst2\n        else:\n            return lst2  # Return the second list if the totals are equal\n    \n    # Test cases\n    assert total_match([], []) == []\n    assert total_match(['hiadmin'], ['hIHi']) == ['hiadmin']\n    assert total_match(['hiadminhi', 'hi', 'admin', 'project'], ['hhi', 'hi']) == ['hiadminhi']\n    assert total_match(['1', '2', ','], ['1']) == ['1']\n    \n    print(\"All test cases passed.\")\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            factors += 1\n    return factors == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True, power\n        power += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs(a)\n        root = round(a ** (1/3))\n        return root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        a = abs("}
{"task_id": "EvoEval/78", "completion": "\n    count = 0\n    for i in num:\n        if i in ['0', '4', '9', 'A']:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the letter grades based on the GPA\n    letter_grades = {\n        4: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -1: 'E'\n    }\n\n    # Convert the numerical grades to letter grades\n    letter_grade_list = []\n    for gpa in grades:\n        for key, value in letter_grades.items():\n            if gpa > key:\n                letter_grade_list.append(value)\n                break\n\n    return letter_grade_list\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(' ', '')\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * (10 ** (n - 2))\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Your code here\n    return hex(sum(int(digit) for digit in str(N)))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    array = list(set(array))\n    if (array[0] + array[-1]) % 2 == 1:\n        array.sort()\n    else:\n        array.sort(reverse=True)\n    return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    shift = 2\n    encrypted_s = ''\n    for char in s:\n        if char in encrypted_alphabet:\n            encrypted_s += encrypted_alphabet[(encrypted_alphabet.index(char) + shift) % 26]\n        else:\n            encrypted_s += char\n    return encrypted_s\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        max_num = max(lst)\n        lst.remove(max_num)\n        return max(lst) if lst else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    count = 0\n    for i in range(len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            if S[i-1] == 'I' and S[i-2] == ' ' and S[i-3] == 'b' and S[i-4] == 'o' and S[i-5] == 'r' and S[i-6] == 'e' and S[i-7] == 'd' and S[i-8] == ' ':\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the vowel 3 places ahead\n                new_char = vowels[(vowels.index(char.lower()) + 3) % len(vowels)]\n                # Swap case\n                encoded_char = new_char.swapcase()\n            else:\n                # Swap case\n                encoded_char = char.swapcase()\n        else:\n            encoded_char = char\n        encoded_message += encoded_char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_values = [num for num in lst if is_prime(num)]\n    if not prime_values:\n        return 0\n    smallest_prime = min(prime_values)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    lower_case = 0\n    upper_case = 0\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_case += 1\n            elif key.isupper():\n                upper_case += 1\n    if lower_case == len(dict) or upper_case == len(dict):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) * (b % 10)\n    pass"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i].isupper():\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(number_str):\n        number = float(number_str)\n        if number > 0 and number - int(number) == 0.5:\n            return int(number) + 1\n        elif number < 0 and number - int(number) == -0.5:\n            return int(number) - 1\n        else:\n            return int(number)\n\n    # Test cases\n    print(closest_integer(\"10\"))  # Output: 10\n    print(closest_integer(\"15.3\"))  # Output: 15\n    print(closest_integer(\"14.5\"))  # Output: 14\n    print(closest_integer(\"-14.5\"))  # Output: -15\n    \"\"\"\n    def closest_integer(number_str):\n        number = float(number_str)\n        if number > 0 and number - int(number) == 0.5:\n            return int(number) + 1\n        elif number < 0 and number - int(number) == -0.5:\n            return int(number) - 1\n        else:\n            return int(number)\n\n    # Test cases\n    print(closest_integer(\"10\"))  # Output: 10\n    print(closest_integer(\"15.3\"))  # Output: 15\n    print(closest_integer(\"14.5\"))  # Output: 14\n    print(closest_integer"}
