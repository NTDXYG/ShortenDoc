{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = max([abs(i - median) for i in numbers])\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    interspersed = []\n    for i in range(len(numbers)):\n        interspersed.append(numbers[i])\n        if i != len(numbers) - 1:\n            interspersed.append(delimeter)\n    return interspersed\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(paren_string: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in paren_string:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    paren_string = paren_string.replace(' ', '')\n    depths = []\n    i = 0\n    while i < len(paren_string):\n        if paren_string[i] == '(':\n            j = i\n            while j < len(paren_string) and paren_string[j] != ')':\n                j += 1\n            depths.append(get_max_depth(paren_string[i:j+1]))\n            i = j\n        else:\n            i += 1\n    return depths\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum1 = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum1 += num\n            product *= num\n    return (sum1, product)\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_so_far = float('inf')\n    for num in numbers:\n        min_so_far = min(min_so_far, num)\n        result.append(min_so_far)\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(a) != len(b):\n        raise ValueError(\"Strings must be of equal length\")\n\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == '|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_numbers = ()\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (numbers[i + 1], numbers[i])\n\n    return closest_numbers[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [i for i in values if isinstance(i, int) and i % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    xs = [1, -2, -3, 1]\n    return round(poly(xs, 1), 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    div_three = [i for i in range(len(l)) if i % 3 == 0]\n    div_three_values = [l[i] for i in div_three]\n    div_three_values.sort(reverse=True)\n    for i, value in zip(div_three, div_three_values):\n        l[i] = value\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int):\n        return str(n).count(str(digit))\n\n    result = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            result += count_digit(i, 8)\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fib(n: int) -> bool:\n        x = 0\n        y = 1\n        while y < n:\n            z = x + y\n            x = y\n            y = z\n        return y == n\n\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        if is_fib(i) and is_prime(i):\n            count += 1\n    return i if i % 2 == 0 else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return 10 * change_base(x // base, base) + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0 0'\n    elif n == 2:\n        return '0 0 2'\n    elif n == 3:\n        return '0 0 2 0'\n    else:\n        fib_sequence = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n        return ' '.join(str(num) for num in fib_sequence)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    text = text.replace(' ', '')\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1 % p\n    else:\n        return (modp(n - 1, p, q) * modp(n - 1, p, q)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 5\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        for i in range(1, len(l)):\n            if l[i] != l[i - 1]:\n                return False\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i - 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] >= l[i - 1]:\n                return False\n        return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [value for value in l1 if value in l2]\n    return sorted(list(set(common_list)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)] + [xs[i] * (len(xs) - 1) for i in range(len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return -1\n    else:\n        fibfib_list = [0, 0, -1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[i-3] + fibfib_list[i-2] - fibfib_list[i-1])\n        return fibfib_list[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    length = len(x_str)\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isdigit():\n            sum += int(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_apples = int(fruits[0].split(\" \")[0])\n    total_oranges = int(fruits[1].split(\" \")[0])\n    total_fruits = total_apples + total_oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    smallest_odd_value = float('inf')\n    smallest_odd_index = float('inf')\n    for i, num in enumerate(arr):\n        if num % 2 != 0 and num < smallest_odd_value:\n            smallest_odd_value = num\n            smallest_odd_index = i\n    return [smallest_odd_index, smallest_odd_value]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        from collections import Counter\n        c = Counter(lst)\n        for i in range(1, max(lst)+1):\n            if i not in c:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 2, 1]))  # 1\n    print(search([1, 2, 3, 3, 4, 4, 4]))  # 15\n    print(search([5, 5, 5, 5, 5]))  # -1\n    print(search([1, 2, 3, 4, 5]))  # 6\n    print(search([1, 1, 1, 1, 1]))  # 2\n    print(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 11\n    print(search([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))  # 10\n    print(search([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))  # 21\n    print(search([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))  # 20\n\n"}
{"task_id": "EvoEval/70", "completion": "\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(qw):\n        if isinstance(qw, list) and all(isinstance(i, (int, bool)) for i in qw):\n            if all(i % 2 == 0 for i in qw):\n                return sum(qw) <= max(qw)\n            else:\n                return False\n        else:\n            return False\n\n    print(will_it_fly(qw))\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n\n    changes = count_changes(arr)\n    for i in range(len(arr)):\n        if arr[i] != arr[-i - 1]:\n            arr[-i - 1] = arr[i]\n            return 1 + count_changes(arr)\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        lst1_chars = sum(len(i) for i in lst1)\n        lst2_chars = sum(len(i) for i in lst2)\n        if lst1_chars > lst2_chars:\n            return lst2\n        else:\n            return lst1\n\n    print(total_match([], []))\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))\n    print(total_match(['hiadmin', 'hihi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hihi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hihi', 'admin', 'project']))\n    print(total_match(['hiadmin', 'hihi', 'admin', 'project']))\n\n\ntotal_match()\n\n\nA: Here is a Python solution for the problem:\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i) and is_prime(a//i):\n                return True\n        return False\n\n    return is_multiply_prime(a)\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return (True, 0)\n    if x == 2:\n        return (True, 1)\n    if x == 3:\n        return (True, 2)\n    if x == 4:\n        return (True, 3)\n    if x == 8:\n        return (True, 4)\n    if x == 2**3:\n        return (True, 5)\n    if x == 2**4:\n        return (True, 6)\n    if x == 2**5:\n        return (True, 7)\n    if x == 2**6:\n        return (True, 8)\n    if x == 2**7:\n        return (True, 9)\n    if x == 2**8:\n        return (True, 10)\n    if x == 2**9:\n        return (True, 11)\n    if x == 2**10:\n        return (True, 12)\n    if x == 2**11:\n        return (True, 13)\n    if x == 2**12:\n        return (True, 14)\n    if x == 2**13:\n        return (True, 15)\n    if x == 2**14:\n        return (True, 16)\n    if x == 2**15:\n        return (True, 17)\n    if x == 2**16:\n        return (True, 18)\n    if x == 2**17:\n        return (True, 19)\n    if x == 2**18:\n        return (True, 20)\n    if x == 2**19:\n        return (True, 21)\n    if x == 2**20:\n        return (True, 22)\n    if x == 2**21:\n        return (True, 23)\n    if x == 2**22:\n        return (True, 24)\n    if x == 2**23:\n        return (True, 25)\n    if x == 2**24:\n        return (True, 26)\n    if x == "}
{"task_id": "EvoEval/77", "completion": "\n\n\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = int(round(a ** (1. / 3.)))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = int(round(a ** (1. / 3.)))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = int(round(a ** (1. / 3.)))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        cube_root = int(round(a ** (1. / 3.)))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n           "}
{"task_id": "EvoEval/78", "completion": "\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for i in num:\n        if i in hex_dict:\n            count += hex_dict[i]\n        else:\n            return 0\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) % 4 != 0:\n        return False\n\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade == 3.0:\n                result.append('A')\n            elif grade == 2.0:\n                result.append('B+')\n            elif grade == 1.0:\n                result.append('B')\n            elif grade == 0.0:\n                result.append('C')\n            else:\n                result.append('F')\n        return result\n\n    return grade_equation(grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=lambda x: [ord(c) for c in x], reverse=True)\n    return ' '.join(words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    lst = [ [i for sublist in lst for i in sublist] ]\n    lst.sort(reverse=True)\n    result = []\n    for i in range(len(lst)):\n        if lst[i] == x:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    array.sort()\n    if sum(array[0], array[-1]) % 2 == 0:\n        return array\n    else:\n        return array[::-1]\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                encrypted_string += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted_string += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_num = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_num:\n            second_max = max_num\n            max_num = num\n        elif num > second_max:\n            second_max = num\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.')\n    count = 0\n    for sentence in S:\n        if 'bom' in sentence.lower():\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n        if x == abs(y + z) or y == abs(x + z) or z == abs(x + y):\n            return True\n        else:\n            return False\n\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(-2, 1, True))  # True\n    print(any_int(6, -2.2, 2))  # True\n    print(any_int(-2, 2, 2))  # False\n    print(any_int(3, 2, 2))  # False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for i in range(len(message)):\n        if message[i] in vowels:\n            if i < len(message) - 2 and message[i+1] in vowels and message[i+2] in vowels:\n                encoded_message += message[i]\n                encoded_message += chr(ord(message[i]) + 2)\n            else:\n                encoded_message += message[i]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum_of_digits(smallest_prime)\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    def sum_of_digits(n):\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        return sum\n\n    return sum_of_digits(a) * sum_of_digits(b)\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n"}
