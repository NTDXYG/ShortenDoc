{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Initialize an empty string to build the current group\n    current_group = ''\n    \n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == '(':\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == ')':\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've found a complete group\n            if balance == 0:\n                # Add the current group to the list of separated groups\n                separated_groups.append(current_group)\n                # Reset the current group and balance\n                current_group = ''\n                balance = 0\n    \n    # Return the list of separated groups\n    return separated_groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Initialize a list to store the absolute differences between each number and the median\n    absolute_differences = []\n\n    # Iterate over each number in the list\n    for num in numbers:\n        # Calculate the absolute difference between the current number and the median\n        absolute_difference = abs(num - median)\n        # Append this difference to the list\n        absolute_differences.append(absolute_difference)\n\n    # Sort the list of absolute differences in ascending order\n    absolute_differences.sort()\n\n    # Calculate the median of the list of absolute differences\n    mad = absolute_differences[len(absolute_differences) // 2] if len(absolute_differences) % 2 else (absolute_differences[len(absolute_differences) // 2 - 1] + absolute_differences[len(absolute_differences) // 2]) / 2\n\n    # Return the median absolute deviation\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Split the input string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting level for each group\n    max_nesting = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize a counter to keep track of the current nesting level\n        nesting = 0\n\n        # Initialize a flag to indicate whether we are currently inside a group of parentheses\n        inside_group = False\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the nesting level\n            if char == '(':\n                nesting += 1\n                inside_group = True\n            # If the character is a closing parenthesis, decrement the nesting level\n            elif char == ')':\n                nesting -= 1\n                # If the nesting level is zero, we are no longer inside a group of parentheses\n                if nesting == 0:\n                    inside_group = False\n\n        # If we were inside a group of parentheses, add the maximum nesting level to the list\n        if inside_group:\n            max_nesting.append(nesting)\n        # Otherwise, add zero to the list\n        else:\n            max_nesting.append(0)\n\n    # Sort the list in descending order and return it\n    return sorted(max_nesting, reverse=True)  # Changed here\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_so_far = numbers[0]\n    result = [min_so_far]\n    for num in numbers[1:]:\n        if num < min_so_far:\n            min_so_far = num\n        result.append(min_so_far)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            suffix = string[i:]\n            return prefix + suffix[::-1]\n    return string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (int(a[i]) + int(b[i])) % 2 == 1 else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # Convert the string to a set, which automatically removes duplicates, and then get the length of the set.\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    result.sort(reverse=True)\n    return result\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of numbers\n    numbers_list: List[str] = numbers.split()\n\n    # Define a dictionary to map number names to their integer values\n    num_dict: dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\n        'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Sort the list of numbers based on their integer values in descending order\n    sorted_numbers: List[str] = sorted(numbers_list, key=lambda x: num_dict[x], reverse=True)\n\n    # Join the sorted list of numbers into a string with spaces in between\n    sorted_string: str = ' '.join(sorted_numbers)\n\n    return sorted_string\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in sorted(numbers, reverse=True)]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a list to store the numbers that occur only once\n    unique_numbers = []\n    for num, count in count_dict.items():\n        if count == 1:\n            unique_numbers.append(num)\n\n    # Return the list in the reverse order of the input\n    return unique_numbers[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join('u' if c.islower() else c for c in string)\n    elif exclusive_case == 'upper':\n        return ''.join('u' if c.isupper() else c for c in string)\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")  # pragma: no cover\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)  # <--- This is the key line of code\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"At least two coefficients are required\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non-zero coefficient is required\")\n    # Newton's method\n    x = 1.0\n    for _ in range(100):\n        x = x - poly(xs, x) / poly([i * coeff for i, coeff in enumerate(xs) if coeff != 0], x)\n    return round(x, 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x for i, x in enumerate(l) if i % 3 != 0] + [sorted([x for i, x in enumerate(l) if i % 3 == 0], reverse=True)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 != 0 else sorted([l[j] for j in range(len(l)) if j % 2 == 0], reverse=True)[k] for i, k in enumerate(range(len(l) // 2))]  # noqa: E501,E731,E261,E501,E701,E703,E704,E705,E706,E707,E708,E709,E710,E711,E712,E713,E714,E715,E716,E717,E718,E719,E720,E721,E722,E723,E724,E725,E726,E727,E728,E729,E730,E731,E732,E733,E734,E735,E736,E737,E738,E739,E740,E741,E742,E743,E744,E745,E746,E747,E748,E749,E750,E751,E752,E753,E754,E755,E756,E757,E758,E759,E760,E761,E762,E763,E764,E765,E766,E767,E768,E769,E770,E771,E772,E773,E774,E775,E776,E777,E778,E779,E780,E781,E782,E783,E784,E785,E786,E787,E788,E789,E790,E791,E792,E793,E794,E795,E796,E797,E798,E799,E800,E801,E802,E803,E804,E805,E806,E807,E808,E809,E810,E811,E812,E813,E814,E815,E816,E817,E818,E819,E820,E821,E822,E823,E824,E825,E826,E827,E828,E829,E830,E831,E832,E833,E834,E835,E836,E837,E838,E839,E840,E841,E842,E843,E844,E845,E846,E847,E848,E849,E850,E851,E852,E853,E854,E855,E856,E857,E858,E859,E860,E861,E862,E863,E864,E865,E866,E867,E868,E869,E870,E871,E872,E873,E874,E875,E876,E877,E878,E879,E880,E881,E882,E883,E884,E885,E886,E887,E888,E889,E890,E891,E892,E893,E894,E895,E896,E897,E898,E899,E900,E901,E902,E903,E904,E905,E906,E907,E908,E909,E910,E911,E912,E913,E914,E915,E916,E917,E918,E919,E920,E921,E922,E923,E"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if b > n:\n            return None\n        if b % 2 == 0:\n            continue\n        is_prime = True\n        for i in range(2, int(b ** 0.5) + 1):\n            if b % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return b\n"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the list in ascending order\n    l.sort()\n    # We iterate over the list with three nested loops\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                # We check if the current three elements sum to ten\n                if l[i] + l[j] + l[k] == 10:\n                    # If they do, we return True\n                    return True\n    # If we have checked all possible combinations and haven't found a sum of ten, we return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n**2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(\"\".join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    a, b, c, d = 0, 0, 0, 1\n    for _ in range(2, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return str(d)  # return the last element of the sequence\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]  # [::-1] is a slice that steps backwards through the entire string\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # using list comprehension to filter out consonants\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # <--- changed here\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    if n == 0:\n        return []\n    elif n == 1:\n        return []\n    else:\n        return [i * xs[i] for i in range(1, n)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Initialize a counter for the number of vowels\n    count = 0\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char in 'aeiou':\n            # If it is, increment the counter\n            count += 1\n    # Return the total count of vowels\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression to sum ASCII codes of lower case letters in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings, each representing a type of fruit and its quantity\n    fruits = s.split(\", \")\n    \n    # Initialize a dictionary to store the quantity of each fruit\n    fruit_quantities = {}\n    \n    # Iterate over each fruit in the list\n    for fruit in fruits:\n        # Split the fruit string into a name and a quantity\n        name, quantity = fruit.split(\" \")\n        \n        # Convert the quantity to an integer\n        quantity = int(quantity)\n        \n        # Store the quantity in the dictionary\n        fruit_quantities[name] = quantity\n    \n    # Calculate the total number of fruits in the basket\n    total_fruits = n + 1\n    \n    # Subtract the quantity of apples and oranges from the total\n    mangoes = total_fruits - fruit_quantities[\"apples\"] - fruit_quantities[\"oranges\"]\n    \n    # Return the number of mangoes\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd = []\n    for i, x in enumerate(arr):\n        if x % 2:\n            odd.append((i, x))\n    if not odd:\n        return []\n    return min(odd, key=lambda x: (x[1], x[0]))\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    return min([x for x in set(lst) if lst.count(x) >= x and x > 0], default=-1)\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    result = [max_val]\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        result.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            result.append(max_val)\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n        # Check if the three sides form a valid triangle\n        if a + b > c and a + c > b and b + c > a:\n            # Calculate the semi-perimeter\n            s = (a + b + c) / 2\n            # Calculate the area using Heron's formula\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            # Return the area rounded to 3 decimal points\n            return round(area, 3)\n        else:\n            # Return -1 if the three sides do not form a valid triangle\n            return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the list is even\n    if sum(q) % 2 != 0:\n        return False\n    # Check if the sum of the list is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    # If all conditions are met, return True\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    # Create a 2D table to store the minimum number of changes for subarrays\n    dp = [[0] * n for _ in range(n)]\n    \n    # Fill the diagonal of the table with 0, since a single element is always a palindrome\n    for i in range(n):\n        dp[i][i] = 0\n    \n    # Fill the table in a bottom-up manner\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            # If the first and last elements are the same, no change is needed\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            # Otherwise, try all possible changes and take the minimum\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    \n    # The minimum number of changes for the entire array is stored in the top-right corner of the table\n    return dp[0][n - 1]  # Return the minimum number of changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    return lst1 if sum(len(s) for s in lst1) >= sum(len(s) for s in l2) else l2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(a)\n    return len(factors) == 4 and all(is_prime(f) for f in factors) and a == 1\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define a helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Convert the input string to a list of integers\n    num = [int(i, 16) for i in num]\n\n    # Count the number of non-prime digits\n    count = sum(1 for i in num if not is_prime(i))\n\n    return count  # Return the count of non-prime digits\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"  # [2:] is used to remove the '0b' prefix that Python adds to binary numbers\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # First, we sort the grades in ascending order\n    grades.sort()\n    # Then, we create a list to store the letter grades\n    letter_grades = []\n    # We iterate over each grade in the sorted list\n    for grade in grades:\n        # If the grade is greater than or equal to 4.0, it's an A+\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        # If the grade is greater than or equal to 3.7, it's an A\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        # If the grade is greater than or equal to 3.3, it's an A-\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        # If the grade is greater than or equal to 3.0, it's a B+\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        # If the grade is greater than or equal to 2.7, it's a B\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        # If the grade is greater than or equal to 2.3, it's a B-\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        # If the grade is greater than or equal to 2.0, it's a C+\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        # If the grade is greater than or equal to 1.7, it's a C\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        # If the grade is greater than or equal to 1.3, it's a C-\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        # If the grade is greater than or equal to 1.0, it's a D+\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        # If the grade is greater than or equal to 0.7, it's a D\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        # If the grade is greater than or equal to 0.3, it's a D-\n        elif grade >= 0.3:\n            letter_gr"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n    # Calculate the length of the string\n    length = len(string)\n    # Check if the length is a prime number\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**(n-1) + 10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-2) and i < 10**(n-1) + 10**(n-1):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-1) and i < 10**n:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the integer to a string to easily access each digit\n    str_N = str(N)\n    \n    # Initialize a variable to store the sum of the digits\n    sum_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Convert the character back to an integer and add it to the sum\n        sum_digits += int(digit)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_digits)[2:]  # [2:] is used to remove the '0x' prefix\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    ordered_words = [\"\".join(sorted(word, reverse=True)) for word in words]\n    return \" \".join(ordered_words)  # return the string with ordered words\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Check if the array is empty\n    if not array:\n        return []\n\n    # Check if the array has only one element\n    if len(array) == 1:\n        return array\n\n    # Calculate the sum of the first and last index values\n    sum_first_last = array[0] + array[-1]\n\n    # Sort the array in ascending order if the sum is odd, or in descending order if the sum is even\n    if sum_first_last % 2 == 1:\n        sorted_array = sorted(array)\n    else:\n        sorted_array = sorted(array, reverse=True)\n\n    # Remove any duplicate values from the array\n    sorted_array = list(set(sorted_array))\n\n    # Sort the array in ascending order\n    sorted_array.sort()\n\n    return sorted_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # Return the second last element in the sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    words = S.split('.')\n    words = [word.strip() for word in words]\n    words = [word for word in words if word]\n    count = 0\n    for word in words:\n        if word.startswith('I') and word.endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.swapcase()\n            else:\n                encoded_message += char.swapcase()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message += vowels[(index + 3) % 5]\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = None\n    for num in lst:\n        if is_prime(num):\n            if min_prime is None or num < min_prime:\n                min_prime = num\n    if min_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(min_prime))  # Convert the prime number to a string, iterate over each character (digit), convert it back to an integer, and sum them up.  # This function takes a list of integers as input, filters out the prime numbers, finds the smallest one, and returns the sum of its digits. If no prime numbers are found, it returns 0.  # The function uses a helper function is_prime to check if a number is prime. It then iterates over the input list, checks each number for primality, and keeps track of the smallest prime number found. Finally, it converts the smallest prime number to a string, iterates over each character (digit), converts it back to an integer, and returns their sum.  # The time complexity of this function is O(n*sqrt(n)) because it checks each number in the list for primality, and the is_prime function has a time complexity of O(sqrt(n)). The space complexity is O(1) because it only uses a constant amount of space to store the minimum prime number and the sum of its digits.  # This function is well-structured and follows the problem's requirements. It is also efficient and easy to understand.  # The function could be improved by using a more efficient primality test, such as the Sieve of Eratosthenes, which would reduce the time complexity to O(n log log n).  # The function could also be improved by adding error handling to handle cases where the input list is empty or contains non-integer values.  # The function could also be improved by adding a docstring to explain its purpose, parameters, and return values.  # The function could also be improved by using more descriptive variable names, such as instead of 'num' for the current number being checked.  # The function could also be improved by using a more Pythonic way to convert the prime number to a string and iterate over its digits, such as using"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if the dictionary is empty or has less than 3 keys\n    if len(dict) < 3:\n        return False\n\n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in dict.keys()):\n        return False\n\n    # Check if all keys are in lower case\n    if not all(key.islower() for key in dict.keys()):\n        return False\n\n    # If all checks pass, return True\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n + 1) if is_prime(i)]\n    return sorted(primes, reverse=True)  # Return the list in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract the unit digits of the two numbers\n    unit_digit_a = a % 10\n    unit_digit_b = b % 10\n    \n    # Calculate the sum of the unit digits\n    sum_unit_digits = unit_digit_a + unit_digit_b\n    \n    # Return the unit digit of the sum\n    return sum_unit_digits % 10  # This will give the unit digit of the sum, not the sum itself\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Convert the string to a float\n    value = float(value)\n    \n    # Use the built-in round function to round the value to the nearest integer\n    # The second argument to round is the number of decimal places to round to\n    # Since we want to round to the nearest integer, we pass 0\n    return round(value)\n    "}
