{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                if not stack:\n                    result.append(''.join(stack))\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    for operation in operations:\n        if operation < 0:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum(abs(i - median) for i in numbers) / length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    interspersed = []\n    for i in range(len(numbers)):\n        interspersed.append(numbers[i])\n        if i != len(numbers) - 1:\n            interspersed.append(delimeter)\n    return interspersed\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    depths = [get_max_depth(group) for group in groups]\n    return depths\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return sum_num, product_num\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    min_num = numbers[0]\n    result = [min_num]\n\n    for num in numbers[1:]:\n        min_num = min(min_num, num)\n        result.append(min_num)\n\n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform the XOR operation\n    result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    return result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    distinct_chars = set(string)\n    return len(distinct_chars)\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    unique_notes = set()\n    for note in notes:\n        if note == 'o':\n            unique_notes.add(4)\n        elif note == '| half two ':\n            unique_notes.add(2)\n        elif note == 'quater note one':\n            unique_notes.add(1)\n    return sorted(list(unique_notes), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_numbers = None\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (numbers[i + 1], numbers[i])\n\n    return closest_numbers[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [i for i in values if isinstance(i, int) and i % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def factorize_helper(n: int, factors: List[int]) -> List[int]:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if i not in factors:\n                    factors.append(i)\n                if n // i not in factors:\n                    factors.append(n // i)\n                return factorize_helper(n // i, factors)\n        factors.append(n)\n        return factors\n\n    return factorize_helper(n, [])\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in reversed(numbers):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return list(reversed(result))\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return [i for i in l if i > 0]\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return poly([0]*len(xs), 0)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(0, len(l), 3)]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(0, len(l), 3):\n        l[i] = l_prime[j]\n        j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int):\n        return str(n).count(str(digit))\n\n    result = []\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count = count_digit(i, 8)\n            result.append(count)\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    l_prime[::2] = even_indices_values\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i > n:\n            return None\n        elif is_prime(fib_i):\n            return fib_i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+2 for i in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    if not l:\n        return False\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    fib_sequence = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n    return str(fib_sequence[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p, q) ** 2) % p\n    else:\n        return (2 * modp(n // 2, p, q) % p) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    else:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(list(set(common_list)), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    while n % 2 == 0:\n        n = n / 2\n    if n == 1:\n        return 2\n\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            n = n / i\n        i += 2\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return m + sum_to_n(n-1, m+1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\" or bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\" or bracket == \")\":\n            if not stack:\n                return False\n            else:\n                last_open_bracket = stack.pop()\n                if bracket == \"]\" and last_open_bracket != \"[\" or bracket == \"}\" and last_open_bracket != \"{\" or bracket == \")\" and last_open_bracket != \"(\":\n                    return False\n    if stack:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)] + [xs[i] * (len(xs) - 1) for i in range(len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return -1\n    else:\n        a, b, c = 0, 1, -1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    shift %= len(digits)\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    total_fruits = apples + oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    def smallest_odd_value(arr):\n        smallest_odd_value = float('inf')\n        smallest_odd_index = float('inf')\n        for i, num in enumerate(arr):\n            if num % 2 != 0 and num < smallest_odd_value:\n                smallest_odd_value = num\n                smallest_odd_index = i\n        return smallest_odd_index, smallest_odd_value\n\n    if not arr:\n        return []\n    else:\n        return [smallest_odd_value(arr)]\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for i in range(1, max(freq.keys())+2):\n            if i not in freq:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 1]))  # 1\n    print(search([1, 2, 3, 3, 4, 4]))  # 5\n    print(search([5, 5, 4]))  # -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        lst.sort(reverse=True)\n        result = []\n        while lst:\n            result.append(lst.pop(0))\n            if lst:\n                result.append(lst.pop())\n        return result\n\n    print(strange_sort_list([1]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([5, 5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\nstrangesort_list()\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n        # check if the sides form a valid triangle\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n\n        # calculate the area\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n        # return the area rounded to 3 decimal points\n        return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q):\n        if sum(q) % 2 == 0:\n            if all(q[i] <= q[i+1] for i in range(len(q)-1)):\n                return True\n        return False\n\n    print(will_it_fly([5, 4, 3, 2, 1])) # False\n    print(will_it_fly([3, 1, 2])) # False\n    print(will_it_fly([3, 9, 3])) # True\n    print(will_it_fly([3, 5, 3])) # True\n    print(will_it_fly([3, 3, 3])) # True\n    print(will_it_fly([3, 5, 3, 3])) # False\n    print(will_it_fly([3, 3, 3, 3])) # True\n    print(will_it_fly([3, 5, 3, 3, 3])) # False\n    print(will_it_fly([3, 3, 3, 3, 3])) # True\n    print(will_it_fly([3, 5, 3, 3, 3, 3])) # False\n    print(will_it_fly([3, 3, 3, 3, 3, 3])) # True\n    print(will_it_fly([3, 5, 3, 3, 3, 3, 3])) # False\n    print(will_it_fly([3, 3, 3, 3, 3, 3, 3])) # True\n    print(will_it_fly([3, 5, 3, 3, 3, 3, 3, 3])) # False\n    print(will_it_fly([3, 3, 3, 3, 3, 3, 3, 3])) # True\n    print(will_it_fly([3, 5, 3, 3, 3, 3, 3, 3, 3])) # False\n    print(will_it_fly([3, 3, 3,"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n\n    changes = count_changes(arr)\n    for i in range(len(arr)):\n        if arr[i] != arr[-i - 1]:\n            arr[-i - 1] = arr[i]\n            return changes - count_changes(arr)\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) == 0 and len(lst2) == 0:\n            return []\n        elif len(lst1) == 0:\n            return lst2\n        elif len(lst2) == 0:\n            return lst1\n        else:\n            total1 = sum(len(i) for i in lst1)\n            total2 = sum(len(i) for i in lst2)\n            if total1 > total2:\n                return lst2\n            else:\n                return lst1\n\n    print(total_match([], []))\n    print(total_match(['hiadmin'], ['hIHi']))\n    print(total_match(['hihiadmin', 'hi'], ['hihi', 'hi']))\n    print(total_match(['1', '2', ','], ['1', '2', ',']))\n\n\ntotal_match([], []) \ufffd\ufffd\ufffd []\ntotal(['hiadmin'], ['hIHi']) \ufffd ['hiadmin']\ntotal(hiadminhi',hi',admin',project' \ufffd ['hihiadmin',']\ntotal'hhi',hi' \ufffdadmin']\ntotal4'], ['1',2',',' \ufffd ['1']\n\nThe function total_match() takes two lists of strings as input. If both lists are empty, it returns an empty list. If one of the lists is empty, it returns the other list. If both lists are not empty, it calculates the total number of characters in each list and returns the list with the greater total.\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i) and is_prime(a//i):\n                return True\n        return False\n\n    return is_multiply_prime(a)\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return (True, 0)\n    if x == 2:\n        return (True, 1)\n    if x == 4:\n        return (True, 2)\n    if x == 8:\n        return (True, 3)\n    if x == 16:\n        return (True, 4)\n    if x == 32:\n        return (True, 5)\n    if x == 64:\n        return (True, 6)\n    if x == 128:\n        return (True, 7)\n    if x == 256:\n        return (True, 8)\n    if x == 512:\n        return (True, 9)\n    if x == 1024:\n        return (True, 10)\n    if x == 2048:\n        return (True, 11)\n    if x == 4096:\n        return (True, 12)\n    if x == 8192:\n        return (True, 13)\n    if x == 16384:\n        return (True, 14)\n    if x == 32768:\n        return (True, 15)\n    if x == 65536:\n        return (True, 16)\n    if x == 131072:\n        return (True, 17)\n    if x == 262144:\n        return (True, 18)\n    if x == 524288:\n        return (True, 19)\n    if x == 1048576:\n        return (True, 20)\n    if x == 2097152:\n        return (True, 21)\n    if x == 4194304:\n        return (True, 22)\n    if x == 8388608:\n        return (True, 23)\n    if x == 16777216:\n        return (True, 24)\n    if x == 33554432:\n        return (True"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        return a == round(a ** (1. / 3)) ** 3\n\n    print(iscube(1))\n    print(iscube(-64))\n    print(iscube(0))\n    print(iscube(180))\n    \"\"\"\n    def iscube(a):\n        return a == round(a ** (1. / 3)) ** 3\n\n    print(iscube(1))\n    print(iscube(-64))\n    print(iscube(0))\n    print(iscube(180))\n    \"\"\"\n    def iscube(a):\n        return a == round(a ** (1. / 3)) ** 3\n\n    print(iscube(1))\n    print(iscube(-64))\n    print(iscube(0))\n    print(iscube(180))\n    \"\"\"\n    def iscube(a):\n        return a == round(a ** (1. / 3)) ** 3\n\n    print(iscube(1))\n    print(iscube(-64))\n    print(iscube(0))\n    print(iscube(180))\n    \"\"\"\n    def iscube(a):\n        return a == round(a ** (1. / 3)) ** 3\n\n    print(iscube(1))\n    print(iscube(-64))\n    print(iscube(0))\n    print(iscube(180))\n    \"\"\"\n    def iscube(a):\n        return a == round(a ** (1. / 3)) ** 3\n\n    print(iscube(1))\n    print(iscube(-64))\n    print(iscube(0))\n    print(iscube(180))\n    \"\"\"\n    def iscube(a):\n        return a == round("}
{"task_id": "EvoEval/78", "completion": "\n    hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_prime = ['2', '3', '5', '7', 'B', 'C', 'E']\n    count = 0\n    for i in num:\n        if i in hex_dict:\n            if i not in hex_prime:\n                count += 1\n        else:\n            return 0\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) % 4 != 0:\n        return False\n\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        letter_grades = []\n        for grade in grades:\n            if grade > 37 and grade <= 3:\n                letter_grades.append('A+')\n            elif grade > 3 and grade <= 3.7:\n                letter_grades.append('A')\n            elif grade > 2.7 and grade <= 3:\n                letter_grades.append('B+')\n            elif grade > 2 and grade <= 2.7:\n                letter_grades.append('B')\n            elif grade > 1.7 and grade <= 2:\n                letter_grades.append('C+')\n            elif grade > 1.3 and grade <= 1.7:\n                letter_grades.append('C')\n            elif grade > 1 and grade <= 1.3:\n                letter_grades.append('D')\n            else:\n                letter_grades.append('F')\n        return letter_grades\n\n    return grade_equation(grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = 0\n    for char in string:\n        if char != ' ':\n            length += 1\n\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit, 16) for digit in str(n))\n\n    return sum_digits(N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(reverse=True)\n    return ' '.join(words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    lst = [ [i for sublist in lst for i in sublist] ]\n    lst.sort(reverse=True)\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort(key=lambda x: x[1])\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    array.sort()\n    if sum(array[0], array[-1]) % 2 == 0:\n        return array\n    else:\n        return array[::-1]\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.isupper():\n                encrypted += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                encrypted += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    for i in range(len(lst) - 1, 0, -1):\n        if lst[i] > lst[i - 1]:\n            for j in range(i + 1, len(lst)):\n                if lst[j] > lst[i - 1]:\n                    return lst[i - 1], lst[j]\n    return None\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    # Split the string into sentences\n    sentences = S.split('.')\n\n    # Initialize count of boredom\n    boredom_count = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Remove leading and trailing whitespace\n        sentence = sentence.strip()\n\n        # Check if sentence is empty\n        if sentence:\n            # Check if sentence starts with a capital letter\n            if sentence[0].isupper():\n                boredom_count += 1\n\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            if index < 2:\n                encoded_message += char\n            else:\n                encoded_message += chr(ord(char) - 3)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    smallest_prime = None\n    for num in lst:\n        if is_prime(num) and (smallest_prime is None or num < smallest_prime):\n            smallest_prime = num\n\n    return sum_of_digits(smallest_prime)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    a_str = str(a)\n    b_str = str(b)\n    a_len = len(a_str)\n    b_len = len(b_str)\n    result = [0] * (a_len + b_len)\n\n    for i in range(a_len - 1, -1, -1):\n        for j in range(b_len - 1, -1, -1):\n            result[i + j + 1] += int(a_str[i]) * int(b_str[j])\n            result[i + j] += result[i + j + 1] // 10\n            result[i + j + 1] %= 10\n\n    result = ''.join(map(str, result))\n    result = result.lstrip('0')\n    return result if result else '0'\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(num_str):\n        num_str = num_str.split()\n        num1 = int(num_str[0])\n        num2 = int(num_str[1])\n        if num1 < num2:\n            return num1, num1\n        else:\n            return num2, num2\n\n    print(closest_integer(\"14.5\"))\n\n\nA: Here is a Python solution for the problem:\n\n"}
