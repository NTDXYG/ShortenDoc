{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    current_string = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current_string:\n                stack.append(current_string)\n                current_string = \"\"\n            stack.append(char)\n        elif char == \")\":\n            current_string += char\n            if not stack or stack[-1] != \"(\":\n                raise ValueError(\"Mismatched parentheses\")\n            while len(stack) > 1 and stack[-1] != \"(\":\n                current_string = stack.pop() + current_string\n                stack.pop()\n            stack.pop()\n            if current_string:\n                result.append(current_string)\n                current_string = \"\"\n        elif char != \" \":\n            raise ValueError(\"Invalid character\")\n    if stack:\n        raise ValueError(\"Mismatched parentheses\")\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median_([abs(x - median) for x in numbers])\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    max_depth = 0\n    cur_depth = 0\n    depth_list = []\n    for char in paren_string:\n        if char == '(':\n            cur_depth += 1\n            if cur_depth > max_depth:\n                max_depth = cur_depth\n        elif char == ')':\n            cur_depth -= 1\n    depth_list = [max_depth] * max_depth\n    return depth_list\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            sum_numbers += num\n            product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(prefix):\n            return string + suffix[::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    # YOUR CODE HERE\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    distinct_characters = set(string)\n    return len(distinct_characters)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o.':\n            beats.append(2)\n        elif note == 'o..':\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(' '), key=lambda x: num_dict[x], reverse=True))\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 1:\n        return \"Number must be greater than 0\"\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(reversed(numbers))\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case not in ['lower', 'upper']:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n    flipped_string = ''\n    for char in string:\n        if char.islower() and exclusive_case == 'lower':\n            flipped_string += char.upper()\n        elif char.isupper() and exclusive_case == 'upper':\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n\n    return flipped_string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ', '.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    a, b, c = xs[0], xs[1], xs[2]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = l.copy()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime[i] = sorted(l[i] for i in range(len(l)) if i % 3 != 0, reverse=True)\n    return l_prime\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indicies = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indicies], reverse=True)\n    result = [l[i] if i % 2 != 0 else even_values.pop(0) for i in range(len(l))]\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if fib_num % 2 != 0 and is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n - 1\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1 or n == 2:\n        return '0'\n    elif n == 3:\n        return '2'\n    elif n == 4:\n        return '1'\n    else:\n        a, b, c, d = '0', '0', '2', '1'\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, str(int(a) + int(b) + int(c))\n        return d\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels or not char.isalpha()])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x+y+1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    fib_numbers = [0, 1]\n    for i in range(2, n + 1):\n        fib_numbers.append(fib_numbers[i - 1] + fib_numbers[i - 2])\n    return fib_numbers[n]\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack[-1] != \"[\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return -1\n    else:\n        fib = [0, 1, 1, 2, -1]\n        for i in range(5, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]*2 - fib[i-5])\n        return fib[n]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_fruits = int(n)\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    mangoes = int(fruits[2].split(\" \")[0])\n    return total_fruits - 1 - apples - oranges - mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = float('inf')\n    smallest_index = -1\n    for i, node in enumerate(arr):\n        for digit in str(node):\n            digit = int(digit)\n            if digit % 2 == 1 and digit < smallest_odd:\n                smallest_odd = digit\n                smallest_index = i\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_index, smallest_odd]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        count = {}\n        for num in lst:\n            if num in count:\n                count[num] += 1\n            else:\n                count[num] = 1\n        for num in range(1, len(lst) + 2):\n            if num not in count or count[num] <= num:\n                return num\n        return -1\n\n    print(search([4, 1, 2, 1]))  # 3\n    print(search([1, 2, 3, 3, 4, 4]))  # 5\n    print(search([5, 5, 4]))  # 1\n    print(search([1, 2, 3, 4]))  # 5\n    print(search([1, 1, 1, 1, 1, 1]))  # 6\n    print(search([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort(lst):\n        if len(lst) == 0:\n            return []\n        elif len(lst) == 1:\n            return [max(lst), min(lst), lst[0]]\n        else:\n            max_val = max(lst)\n            min_val = min(lst)\n            lst.remove(max_val)\n            lst.remove(min_val)\n            return [max_val] + [min_val] + strange_sort(lst)\n\n    return strange_sort(lst)\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\n    print(triangle_area(3, 4, 6))\n    print(triangle_area(10, 10, 10))\n    print(triangle_area(3, 4, 10))\n    print(triangle_area(7, 24, 25))\n    print(triangle_area(5, 12, 13))\n    print(triangle_area(10, 15, 30))\n    print(triangle_area(3, 3, 3))\n    print(triangle_area(4, 4, 5))\n    print(triangle_area(7, 24, 25))\n    print(triangle_area(5, 12, 13))\n    print(triangle_area(10, 15, 30))\n    print(triangle_area(3, 3, 3))\n    print(triangle_area(4, 4, 5))\n    print(triangle_area(7, 24, 25))\n    print(triangle_area(5, 12, 13))\n    print(triangle_area(10, 15, 30))\n    print(triangle_area(3, 3, 3))\n    print(triangle_area(4, 4, 5))\n    print(triangle_area(7, 24, 25))\n    print(triangle_area(5, 12, 13))\n    print(triangle_area(10, 15, 30))\n    print(triangle_area(3, 3, 3))\n    print(triangle_area(4, 4, 5))\n    print(triangle_area(7, 24, 2"}
{"task_id": "EvoEval/72", "completion": "\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    prefix = [0] * n\n    suffix = [0] * n\n    for i in range(n):\n        prefix[i] = arr[i]\n        suffix[i] = arr[n - i - 1]\n    for i in range(1, n):\n        prefix[i] = min(prefix[i], prefix[i - 1])\n    for i in range(n - 2, -1, -1):\n        suffix[i] = min(suffix[i], suffix[i + 1])\n    ans = float('inf')\n    for i in range(n - 1):\n        if prefix[i] <= suffix[i + 1]:\n            ans = min(ans, i + 1)\n    for i in range(n - 1, 0, -1):\n        if suffix[i] <= prefix[i - 1]:\n            ans = min(ans, n - i)\n    return ans\n\n"}
{"task_id": "EvoEval/74", "completion": "\n\n\n    print(total_match([], []))  # []\n    print(total_match(['hiadmin'], ['hIHi']))  # ['hiadmin']\n    print(total_match(['hihiadmin', 'hihi'], ['admin', 'project']))  # ['hihiadmin', 'hihi']\n    print(total_match(['hhi', 'hi'], ['admin']))  # ['admin']\n    print(total_match(['1', '2', ',', '4'], ['1']))  # ['1']\n\n\"\"\"\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n\n    if len(factors) < 4:\n        return False\n\n    for i in range(len(factors)):\n        for j in range(i + 1, len(factors)):\n            for k in range(j + 1, len(factors)):\n                for l in range(k + 1, len(factors)):\n                    if factors[i] * factors[j] * factors[k] * factors[l] == a:\n                        return True\n\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1 or x == 0:\n        return False, None\n    power = 0\n    while n ** power < x:\n        power += 1\n    return n ** power == x, power if n ** power == x else None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_values = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    prime_hex = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for i in num:\n        if hex_values[i] in prime_hex:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    binary = '0'*(8-len(binary)%8) + binary if len(binary)%8 else binary\n    binary_8bit = [binary[i:i+8] for i in range(0, len(binary), 8)]\n    return 'db' + 'bd'.join(binary_8bit) + 'bd'\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == 4\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_equation = {4:'A+', 3:'A', 2:'A-', 1:'B+', 0:'B', -1:'B-', -2:'C+', -3:'C', -4:'C-'}\n    grades = [grade_equation[round((gpa - 1)/0.3)] for gpa in grades]\n    return grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces\n    string = string.replace(\" \", \"\")\n    # Calculate length\n    length = len(string)\n    # Check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(1, n):\n        count += 2 * 9 * 10 ** (i - 1)\n    return count\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_digits = sum(int(digit, 16) for digit in hex_num)\n    # return the sum as a hexadecimal number\n    return hex(sum_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(el for i, el in enumerate(lst) if i % 2 == 0 and el % 2 == 1)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        result.append(word[::-1])\n    return ' '.join(result)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if sum([array[0], array[-1]]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    table = str.maketrans(alphabet, encrypted_alphabet)\n    return s.translate(table)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if max(lst) == max_val:\n        return None\n    else:\n        return max_val\n"}
{"task_id": "EvoEval/91", "completion": "\n    boredom_sentences = [\"The sky\", \"The sun\", \"I am\", \"I'm\", \"I\u2019m\", \"I\u2019m experiencing\", \"I\u2019m experiencing boredom\", \"I\u2019m experiencing a\", \"I\u2019m experiencing a sense\", \"I\u2019m experiencing a sense of\", \"I\u2019m experiencing a sense of boredom\", \"I\u2019m experiencing a sense of being\", \"I\u2019m experiencing a sense of being bored\", \"I\u2019m experiencing a sense of being boredom\", \"I\u2019m experiencing a sense of being boredom.\"]\n    count = 0\n    for sentence in boredom_sentences:\n        if sentence in S:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for i in range(len(message)):\n        if message[i] in vowels:\n            if i+3 < len(message):\n                encoded_message += chr((ord(message[i+3])-65+26)%26+65) if message[i+3].isupper() else chr((ord(message[i+3])-97+26)%26+97)\n            else:\n                encoded_message += chr((ord(message[i-3])-65+26)%26+65) if message[i-3].isupper() else chr((ord(message[i-3])-97+26)%26+97)\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        return sum(int(digit) for digit in str(min(primes)))\n    else:\n        return 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    lower_count = 0\n    upper_count = 0\n    for key in dict.keys():\n        if key.islower():\n            lower_count += 1\n        elif key.isupper():\n            upper_count += 1\n        else:\n            return False\n    return lower_count >= 3 or upper_count >= 3\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, -1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    # convert the numbers to strings\n    a = str(a)\n    b = str(b)\n\n    # get the last digit of each number\n    last_digit_a = int(a[-1])\n    last_digit_b = int(b[-1])\n\n    # multiply the last digit of each number\n    result = last_digit_a * last_digit_b\n\n    # return the last digit of the result\n    return result % 10\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 1 and s[i] in vowels)\n\n"}
{"task_id": "EvoEval/99", "completion": "\n"}
