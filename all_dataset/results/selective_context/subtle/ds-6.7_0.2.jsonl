{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    groups = []\n    stack = []\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            if not stack:\n                start = i\n            stack.append(c)\n        elif c == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start:i+1])\n    return groups\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = round(number - integer_part, 2)\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance <= 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median(abs(x - median) for x in numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    max_level = 0\n    level = 0\n    levels = []\n    for char in paren_string:\n        if char == '(':\n            level += 1\n            if level > max_level:\n                max_level = level\n        elif char == ')':\n            level -= 1\n    paren_string = paren_string.split()\n    for group in paren_string:\n        level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n        levels.append(level)\n    levels.sort(reverse=True)\n    levels.append(max_level)\n    return levels\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            sum_numbers += num\n            product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(min(result[-1], numbers[i]))\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:].zfill(len(a))[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Compute the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Compute the least common multiple of a and b\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.replace('o|', '1')\n    music_string = music_string.replace('.|', '2')\n    music_string = music_string.replace('|', '4')\n    music_string = music_string.replace('o', '4')\n    music_string = music_string.replace('.', '2')\n    music_string = music_string.replace(' ', '')\n    music_list = list(music_string)\n    music_list = [int(i) for i in music_list]\n    music_list = list(set(music_list))\n    music_list.sort(reverse=True)\n    return music_list\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i + 1], numbers[i])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    diff = max_num - min_num\n    return [(max_num - num) / diff for num in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 1:\n        return \"Input must be a positive integer\"\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while (divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.reverse()\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.lower() + string.upper().swapcase()[len(string.lower()):]\n    else:\n        raise ValueError(\"Invalid exclusive_case. It should be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    a, b, c = xs[0], xs[1], xs[2]\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = l[:]\n    l_third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_third.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime[i] = l_third.pop(0)\n    return l_prime\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    even_index_values.sort(reverse=True)\n    result = [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fib(n: int) -> bool:\n        if n < 2:\n            return True\n        a, b = 0, 1\n        while b <= n:\n            if b == n:\n                return True\n            a, b = b, a+b\n        return False\n\n    i = 0\n    j = 1\n    count = 0\n    while count < n:\n        if is_prime(j) and is_fib(j) and j % 2 != 0:\n            count += 1\n        i, j = j, i+j\n    return j if count == n else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum < 10:\n                left += 1\n            elif current_sum > 10:\n                right -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+2 for i in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * base + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n    if n == 4:\n        return '3'\n    fib = [0, 0, 2, 0, 3]\n    for i in range(5, n + 1):\n        fib.append(fib[i - 1] + fib[i - 3] - 3 + i)\n    return str(fib[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        else:\n            return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (pow(2, n + q, p) - 1) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x+y+1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"Negative arguments are not allowed\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack.pop() != \"[\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_nums = [0, 0, 1]\n        for i in range(3, n + 1):\n            fib_nums.append(fib_nums[i - 1] + fib_nums[i - 3] - fib_nums[i - 2])\n        return fib_nums[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    # convert the integer to a string\n    x = str(x)\n\n    # if shift is greater than the number of digits in x, return the reversed string\n    if shift > len(x):\n        return x[::-1]\n\n    # otherwise, perform the circular shift\n    else:\n        return x[shift:] + x[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    total_fruits = int(s[4])\n    mangoes = total_fruits - 1 - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = [float('inf'), float('inf')]\n    for i, n in enumerate(arr):\n        if n % 2 == 1 and n < smallest_odd[1]:\n            smallest_odd = [i, n]\n    return smallest_odd if smallest_odd[1] != float('inf') else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in range(1, max(lst)+2):\n            if num not in freq or freq[num] <= num:\n                return num\n        return -1\n\n    print(search([4, 1, 2, 2, 3, 1]))  # 1\n    print(search([1, 2, 3, 3, 4, 4, 4]))  # 1\n    print(search([5, 5, 4, 4, 4]))  # -1\n    print(search([5, 5, 4, 4, 4]))  # -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop(-1))\n            if lst:\n                result.append(lst.pop(0))\n        return result\n\n    print(strange_sort_list([1, 2, 3, 4]))  # [4, 1, 3, 2]\n    print(strange_sort_list([5, 5, 5, 5]))  # [5, 5, 5, 5]\n    print(strange_sort_list([]))  # []\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\n    print(triangle_area(3, 4, 5))  # 6.000\n    print(triangle_area(10, 1, 1))  # -1\n    print(triangle_area(3, 4, 5))  # 6.000\n    print(triangle_area(7, 24, 25))  # 84.000\n    print(triangle_area(5, 12, 13))  # 30.000\n    print(triangle_area(10, 1, 1))  # -1\n    print(triangle_area(1, 1, 1))  # 0.433\n    print(triangle_area(10, 10, 10))  # 43.301\n    print(triangle_area(3, 3, 3))  # 3.905\n    print(triangle_area(7, 24, 25))  # 84.000\n    print(triangle_area(5, 12, 13))  # 30.000\n    print(triangle_area(10, 1, 1))  # -1\n    print(triangle_area(1, 1, 1))  # 0.433\n    print(triangle_area(10, 10, 10))  # 43.301\n    print(triangle_area(3, 3, 3))  # 3.905\n    print(triangle_area(7, 24, 25))  # 84.000\n    print(triangle_area(5, 12, 13"}
{"task_id": "EvoEval/72", "completion": "\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/74", "completion": "\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n\n    if len(factors) != 4:\n        return False\n\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    return product == a\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    elif x < 1 or n < 1:\n        return False, None\n    else:\n        power = 0\n        while n ** power < x:\n            power += 1\n        return n ** power == x, power if n ** power == x else None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_values = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31}\n\n    count = 0\n    for i in num:\n        if hex_values[i] not in primes:\n            count += 1\n\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    binary = binary.zfill(8)\n    binary = binary.replace('0', 'db').replace('1', 'bd')\n    return binary\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i + 4])) != 4:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B0', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D', 0.7: 'D-', 0.0: 'E'}\n    return [grade_scale[grade] for grade in sorted(grades)]\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces\n    string = string.replace(\" \", \"\")\n\n    # Calculate length\n    length = len(string)\n\n    # Check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * starts_one_ends(n - 1)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_digits = sum(int(digit, 16) for digit in hex_num)\n    # convert the sum to hexadecimal\n    hex_sum = hex(sum_digits)[2:]\n    return hex_sum\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    anti_shuffled = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(anti_shuffled)\n"}
{"task_id": "EvoEval/87", "completion": "\n    coords = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                coords.append((i, j))\n    coords.sort(key=lambda x: (-x[0], x[1]))\n    return coords\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    mapping = str.maketrans(alphabet, encrypted_alphabet)\n    return s.translate(mapping)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "EvoEval/91", "completion": "\n    boredoms = S.split('.')\n    count = 0\n    for sentence in boredoms:\n        if 'I am experiencing boredom' in sentence:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    vowels_upper = 'AEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += vowels[(vowels.index(char) + 3) % 5]\n        elif char in vowels_upper:\n            encoded_message += vowels_upper[(vowels_upper.index(char) + 3) % 5]\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if primes:\n        return sum(int(digit) for digit in str(min(primes)))\n    else:\n        return 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.islower():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    return (a % 10) * (b % 10)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i].isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n"}
