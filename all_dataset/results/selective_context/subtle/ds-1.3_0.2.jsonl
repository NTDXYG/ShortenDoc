{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    int_part = int(number)\n    dec_part = number - int_part\n\n    return int_part, dec_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length//2]\n        median2 = numbers[length//2 - 1]\n        mad = abs(median1 - median2)\n    else:\n        median = numbers[length//2]\n        mad = abs(median - median)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum1 = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum1 += num\n            product *= num\n    return (sum1, product)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros to make them the same length\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    # Convert the result back to string and reverse it\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Find the greatest common divisor of a and b\n    def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n        return x\n\n    # Return the least common multiple\n    return (a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(beats, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num])[::-1])\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i+1], numbers[i])\n    return result[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [i for i in values if isinstance(i, int) and i % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return poly(xs[1:], x)\n\n    def find_zero(f, df, x0, epsilon=1e-5):\n        x = x0\n        while abs(f(x)) > epsilon:\n            x = x - f(x) / df(x)\n        return x\n\n    return find_zero(f, df, 0)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(len(l)) if i % 3 != 0]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime[j]\n            j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    def fb(n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('8')\n        return count\n\n    return fb(n)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(n: int) -> bool:\n        x = 0\n        y = 1\n        while y < n:\n            z = x + y\n            x = y\n            y = z\n        return y == n\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(i) and is_fibonacci(i):\n            count += 1\n        i += 1\n    return i if is_prime(i-1) and is_fibonacci(i-1) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0'\n    elif n == 3:\n        return '2'\n    else:\n        fib_sequence = [0, 0, 0, 2]\n        for i in range(4, n+1):\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + i)\n        return str(fib_sequence[-1])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    text = text.replace(' ', '')\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1 % p\n    else:\n        return (2 ** (n + q)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        for i in range(1, len(l)):\n            if l[i] != l[i-1]:\n                return False\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i-1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] >= l[i-1]:\n                return False\n        return True\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(list(set(common_list)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    # First, we check if n is divisible by 2, if it is, we divide n by 2 and repeat the process.\n    while n % 2 == 0:\n        n = n / 2\n\n    # n is now odd, so we can skip one element (Note i = i +2)\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            n = n / i\n\n    return int(n)\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * (i - 1) for i in xs]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift %= num_digits\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_fruits = sum(int(fruit.split(\" \")[0]) for fruit in fruits)\n    total_apples = sum(int(fruit.split(\" \")[1]) for fruit in fruits)\n    total_oranges = sum(int(fruit.split(\" \")[2]) for fruit in fruits)\n    mango_fruits = n - total_fruits\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    def pluck(arr):\n        odd_values = [i for i in arr if i % 2 != 0]\n        if odd_values:\n            smallest_odd_value = min(odd_values)\n            smallest_odd_value_index = arr.index(smallest_odd_value)\n            return [smallest_odd_value_index, smallest_odd_value]\n        else:\n            return []\n\n    print(pluck([4,35]))\n    print(pluck([1,2]))\n    print(pluck([]))\n    print(pluck([5, 1, 3, 0, 4, 2]))\n\npluck()\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n\n    def search(lst):\n        count = Counter(lst)\n        for i in range(1, max(lst)+1):\n            if i in count and count[i] > i:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([5, 5, 4, 4, 4]))\n\nsearch([4, 1, 2, 2, 3, 1])\nsearch([5, 5, 4, 4, 4])\n\nThe function search() takes a list of integers as input and returns the smallest integer that is greater than zero and has a frequency greater than the value of the integer itself. If no such value exists, it returns -1.\n\nThe Counter() function from the collections module is used to count the frequency of each integer in the list.\n\nThe for loop iterates over the integers from 1 to the maximum value in the list. If the current integer is in the count dictionary and its frequency is greater than the value of the integer itself, it returns the current integer.\n\nIf no such integer is found, the function returns -1.\n\nThe print statements at the end of the code are used to test the function with the provided examples.\n"}
{"task_id": "EvoEval/70", "completion": "\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_itfly(q, w):\n        if sum(q) > w:\n            return False\n        if sum(q) == w:\n            if is_palindrome(q):\n                return True\n            else:\n                return False\n        if sum(q) < w:\n            return False\n\n    def is_palindrome(q):\n        return q == q[::-1]\n\n    print(will_itfly([1], 5))\n    print(will_itfly([3, 2, 3], 1))\n    print(will_itfly([3, 2, 3], 9))\n    print(will_itfly([3], 5))\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        i = 0\n        j = n - 1\n        while i < j:\n            if arr[i] != arr[j]:\n                count += 1\n            i += 1\n            j -= 1\n        return count\n\n    # Test cases\n    print(smallest_change([1,2,5,4,7,9,6])) # 4\n    print(smallest_change([1,2,3,2,1])) # 1\n    print(smallest_change([0,1,2,2,1,0])) # 0\n    print(smallest_change([9,8,7,6,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,4,5,6,7,8,9])) # 0\n    print(smallest_change([1,2,3,4,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,4,5,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,4,5,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,4,4,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,2,1])) # 0\n    print(smallest_change([1,2,3,2,1,2,3,2,1,0])) # 1\n    print(smallest_change([1,2,3,2,1,2,3,2,1,0,0])) # 1\n    print(smallest_change([1,2,3,2,1,2,3,2,1,0,0,0])) # 1\n   "}
{"task_id": "EvoEval/74", "completion": "\n\nThe function total_match() takes two lists of strings as input. It calculates the total number of characters in each list using the sum() function and len() function. If the total number of characters in the first list is greater than the second list, it returns the first list. If the total number of characters in the first list is less than the second list, it returns the second list. If the two lists have the same number of characters, it returns the second list.\n\nThe function is then called with a few test cases to demonstrate its correctness.\n\nThe function is expected to return the list with the most characters, as per the problem statement.\n\nThe function is expected to handle the case where the input lists are empty. In this case, the function should return an empty list.\n\nThe function is expected to handle the case where the input lists have the same number of characters. In this case, the function should return the"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_multiply_prime(a):\n        for i in range(2, a):\n            if a % i == 0 and is_prime(i) and is_prime(a//i):\n                return True\n        return False\n\n    return is_multiply_prime(a)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == 2:\n        return True, 1\n    if x == 3:\n        return True, 2\n    if x == 4:\n        return False, None\n    if x < 4:\n        return False, None\n\n    i = 0\n    while x % n == 0:\n        x /= n\n        i += 1\n\n    return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        c = a ** (1./3.)\n        return c == int(c)\n\n    print(iscube(1), iscube(2), iscube(-1), iscube(64), iscube(0), iscube(180), iscube(False))\n\nThe function iscube(a) checks if a is a cube of some positive integer number. It does this by taking the cube root of a and checking if it equals the integer version of the cube root. If it does, the function returns True; otherwise, it returns False.\n\nThe function iscube(a) also handles negative numbers by returning False.\n\nThe last line of the function iscube(a) is a test to see if the function is working correctly.\n\nThe function iscube(a) is called with a variety of inputs to test its functionality.\n\nThe print statement at the end of the function iscube(a) is used to display the results of the function for a variety of inputs.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube.\n\nThe function iscube(a) is a simple function that checks if a number is a cube"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    dec_to_hex = {v:k for k,v in hex_to_dec.items()}\n    count = 0\n    for char in num:\n        if char in dec_to_hex:\n            count += dec_to_hex[char]\n        else:\n            return 0\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return [(lambda grade: {4: 'A+', 3: 'A', 2: 'A-', 1: 'B+', 0.7: 'B', 0.5: 'B-', 0: 'C+', 0.3: 'C', 0.0: 'C-'}[grade])() for grade in grades]\n\n    print(grade_equation([4., 3, 1.7, 2, 3.5]))\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = 0\n    for char in string:\n        if char != ' ':\n            length += 1\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s, key=lambda x: -ord(x)))\n\n    words = s.split(' ')\n    sorted_words = [sort_string(word) for word in words]\n    return ' '.join(sorted_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    array.sort()\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.reverse()\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def rotate(s):\n        return s[1:] + s[:1]\n\n    return ''.join(rotate(i) for i in s)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.')\n    count = 0\n    for sentence in S:\n        if 'I' in sentence and 'am' in sentence and 'bored' in sentence:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return x == abs(y - z) or y == abs(x - z) or z == abs(x - y)\n        else:\n            return False\n\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # False\n    print(any_int(-2, 1, 3))  # True\n    print(any_int(3, -2, 2))  # False\n    print(any_int(3.6, -2.2, 2))  # True\n    print(any_int(-2.2, 1, 3))  # False\n    print(any_int(3, 2, 2.0))  # False\n    print(any_int(3, 2, 2.0))  # False\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int(3, 2, 2))  # True\n    print(any_int("}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if index < len(vowels) - 1:\n                encoded_message += vowels[index + 3]\n            else:\n                encoded_message += vowels[0]\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum_of_digits(smallest_prime)\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    keys = dict.keys()\n    if len(keys) < 3:\n        return False\n    for key in keys:\n        if not isinstance(key, str):\n            return False\n        if not key.islower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    def sum_units(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum_units(a) * sum_units(b)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n"}
