{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n            else:\n                break\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # Calculate the median of the input numbers\n    median = sorted(numbers)[len(numbers) // 2]\n\n    # Calculate the absolute differences between each number and the median\n    absolute_differences = [abs(number - median) for number in numbers]\n\n    # Calculate the median of the absolute differences\n    mad = sorted(absolute_differences)[len(absolute_differences) // 2]\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [delimeter] + [delimeter, *numbers]\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n        elif char == ' ':\n            result.append(max_depth)\n            max_depth = 0\n            current_depth = 0\n    result.append(max_depth)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum1 = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum1 += num\n            product *= num\n    return sum1, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_value = float('inf')\n    for number in numbers:\n        min_value = min(min_value, number)\n        result.append(min_value)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // greatest_common_divisor(a, b)"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == 'o.':\n            beats.append(1)\n    beats.sort(reverse=True)\n    return beats\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x], reverse=True)\n    return ' '.join(numbers_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n\n    return closest_pair\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        return string.swapcase()"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"xs[0] must not be zero\")\n    if xs[1] == 0:\n        raise ValueError(\"xs[1] must not be zero\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"xs[0] and xs[1] must have opposite signs\")\n    return -xs[0] / xs[1]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l.sort(key=lambda x: x % 3 == 0, reverse=True)\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)) and fib(i) % 2 != 0:\n            count += 1\n        i += 1\n    if count == n:\n        return fib(i-1)\n    else:\n        return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be non-negative\")\n    if x == 0:\n        return 0\n    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x //= base\n    return int(\"\".join(str(d) for d in digits[::-1]))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return \"Not a triangle\"\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0'\n    else:\n        fib = [0, 0, 0]\n        for i in range(3, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        return str(fib[n])\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        else:\n            return l[len(l) // 2]"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x <= t for x in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s.lower() if c in 'aeiou')\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s.lower() if c.isalpha())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of words\n    words = s.split()\n\n    # Initialize variables to store the number of apples and oranges\n    apples = 0\n    oranges = 0\n\n    # Iterate through the list of words\n    for word in words:\n        # If the word is \"apples\", increment the apples variable\n        if word == \"apples\":\n            apples += 1\n        # If the word is \"oranges\", increment the oranges variable\n        elif word == \"oranges\":\n            oranges += 1\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [x for x in arr if x % 2 != 0]\n    if not odd_values:\n        return []\n    min_odd_value = min(odd_values)\n    min_index = arr.index(min_odd_value)\n    return [min_index, min_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(lst)+1):\n        if c[i] > i:\n            return i\n    return -1"}
{"task_id": "EvoEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    else:\n        return [max(lst)] + strange_sort_list([i for i in lst if i != max(lst)])\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a[0] + a[1] > a[2] and a[0] + a[2] > a[1] and a[1] + a[2] > a[0]:\n        p = (a[0] + a[1] + a[2]) / 2\n        return round((p * (p - a[0]) * (p - a[1]) * (p - a[2])) ** 0.5, 3)\n    else:\n        return -1"}
{"task_id": "EvoEval/72", "completion": "\n    def will_itfly(q, w):\n        if len(q) % 2 == 0 and sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    print(will_itfly([1], 5))\n    print(will_itfly([3, 2, 3], 1))\n    print(will_itfly([3, 2, 3], 9))\n    print(will_itfly([3], 5))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1000000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10000000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100000000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1000000000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10000000000))\n    print(will_itfly([3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 100"}
{"task_id": "EvoEval/73", "completion": "\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) == 0 and len(lst2) == 0:\n            return []\n        elif len(lst1) == 0:\n            return lst2\n        elif len(lst2) == 0:\n            return lst1\n        else:\n            total1 = sum(len(s) for s in lst1)\n            total2 = sum(len(s) for s in lst2)\n            if total1 > total2:\n                return lst1\n            elif total1 < total2:\n                return lst2\n            else:\n                return lst2\n\n    print(total_match([], []))  # []\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))  # ['hi', 'admin']\n    print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # ['hihi', 'admin', 'project']\n    print(total_match('hiadmin', ['hIhi', 'hi']))  # ['hiadmin']\n    print(total_match(['1', '2', '3', '4'], ['1', '2', '3', '4', '5']))  # ['1', '2', '5']\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    for i in range(1, x):\n        if x ** i == n:\n            return True, i\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n        return False\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        for i in range(0, a+1):\n            if i**3 == a:\n                return True\n       "}
{"task_id": "EvoEval/78", "completion": "\n    return sum([1 for i in num if i in '14689ACE'])\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.0:\n            letter_grades.append('C')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 2)) + starts_one_ends(n - 1)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the given array\n    sorted_array = array.copy()\n    \n    # Sort the copy of the array in ascending order\n    sorted_array.sort()\n    \n    # Check if the sum of the first and last index values is odd\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 1:\n        # If the sum is odd, sort the array in ascending order\n        sorted_array.sort()\n    else:\n        # If the sum is even, sort the array in descending order\n        sorted_array.sort(reverse=True)\n    \n    # Remove any duplicate values from the array\n    sorted_array = list(set(sorted_array))\n    \n    return sorted_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_string = ''\n    for char in s:\n        if char.lower() in alphabet:\n            if char.isupper():\n                encrypted_string += encrypted_alphabet[alphabet.index(char.lower())].upper()\n            else:\n                encrypted_string += encrypted_alphabet[alphabet.index(char)]\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n"}
{"task_id": "EvoEval/91", "completion": "\n    return sum(1 for word in S.split() if word.startswith(\"I\") and word.endswith(\"bom\"))\n\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n                return True\n        return False\n    \"\"\"\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n                return True\n        return False\n    \"\"\"\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n                return True\n        return False\n    \"\"\"\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n                return True\n        return False\n    \"\"\"\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n                return True\n        return False\n    \"\"\"\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y):\n            if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n                return True\n        return False\n    \"\"\"\n    def any_int(x, y, z):\n        if x == abs(y) + abs(z) or"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            encoded_message += chr(ord(char) + 3)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str) or not key.islower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a % 10 * b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 1 and s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        if value == 0:\n            return 0\n        elif value < 0:\n            return int(value) - 1\n        else:\n            return int(value) + 1\n    return closest_integer(value)"}
