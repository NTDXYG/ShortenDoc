{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length//2]\n        median2 = numbers[length//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = numbers[length//2]\n    mad = sum(abs(i - median) for i in numbers) / length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    non_negative_numbers = [num for num in numbers if num >= 0]\n    sum_of_numbers = sum(non_negative_numbers)\n    product_of_numbers = 1\n    for num in non_negative_numbers:\n        product_of_numbers *= num\n    return (sum_of_numbers, product_of_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    xor_result = ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n    # Reverse the result\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    pass\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    result = []\n    for note in music_string:\n        if 'o' in note:\n            result.append(4)\n        elif 'o|' in note:\n            result.append(2)\n        elif '.' in note:\n            result.append(1)\n    return sorted(result, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x])[::-1])\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_numbers = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (numbers[i + 1], numbers[i])\n    return closest_numbers[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    rescaled.sort(reverse=True)\n    return rescaled\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    pass\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return [n * (-1)**(n-1) / (2 * n - 1) for n in range(1, len(xs) + 1) if xs[n-1] != 0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(len(l)) if i % 3 != 0]\n    l_prime.sort(reverse=True)\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime[j]\n            j += 1\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def fb(n: int):\n        count = 0\n        for i in range(1, n):\n            if i % 11 == 0 or i % 13 == 0:\n                count += str(i).count('8')\n        return count\n\n    return fb(n)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    l_prime[::2] = even_indices_values\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse cycling in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_fibonacci(n: int) -> bool:\n        x = 0\n        y = 1\n        while y < n:\n            z = x + y\n            x = y\n            y = z\n        return y == n\n\n    i = 0\n    while True:\n        if is_prime(i) and is_fibonacci(i):\n            if i % 2 == 0:\n                return None\n            if i == n - 1:\n                return i\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] + l[j] == 1:\n            return True\n        elif l[i] + l[j] > 1:\n            j -= 1\n        else:\n            i += 1\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '0'\n    elif n == 3:\n        return '0'\n    else:\n        fib_sequence = [0, 0, 0, 0]\n        for i in range(4, n + 1):\n            fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n        return str(fib_sequence[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    text = text.replace(' ', '')\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1 % p\n    else:\n        return (2 ** (n + q)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return s0 == s1 and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i-1]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] >= l[i-1]:\n                return False\n    return True\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(list(set(common_list)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    # Handle the case where n is a prime number\n    if n % 2 == 0:\n        return 2\n\n    # Start from 2 and check for factors\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n\n    # If no factors found, n is a prime number\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    derivative_list = []\n    for i in range(1, len(xs)):\n        derivative_list.append(i * xs[i])\n    return derivative_list[::-1]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    else:\n        fibfib_list = [0, 0, 0]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-3] + fibfib_list[-2] - fibfib_list[-1])\n        return fibfib_list[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    def circular(x):\n        return str(x)\n\n    digits = list(str(x))\n    shift %= len(digits)\n    return ''.join(digits[-shift:] + digits[:-shift])\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    total_fruits = apples + oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    def pluck(arr):\n        odd_values = [i for i in arr if i % 2 != 0]\n        if odd_values:\n            smallest_odd_value = min(odd_values)\n            smallest_odd_value_index = arr.index(smallest_odd_value)\n            return [smallest_odd_value_index, smallest_odd_value]\n        else:\n            return []\n\n    print(pluck([5, 1, 3, 0, 4, 2]))\n    print(pluck([1,2]))\n    print(pluck([4,3,5]))\n    print(pluck([]))\n    print(pluck([5, 1, 3, 0, 4, 2]))\n\npluck()\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n\n    def search(lst):\n        count = Counter(lst)\n        for i in range(1, max(count)+1):\n            if i in count and count[i] > i:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 2, 3, 1])) # 1\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # 1\n    print(search([5, 5, 4, 4])) # -1\n\nsearch([4, 1, 2, 2, 3, 1])\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])\nsearch([5, 5, 4, 4])\n\nThe function search() uses the Counter class from the collections module to count the frequency of each number in the list. It then iterates over the numbers from 1 to the maximum number in the list, checking if the number is in the count dictionary and if its frequency is greater than its value. If it finds such a number, it returns it. If it doesn't find any such number, it returns -1.\n\nThe time complexity of the function is O(n), where n is the length of the list, because it needs to iterate over the list once. The space complexity is O(1), because it uses a constant amount of space to store the count dictionary.\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        result = []\n        while lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n            if lst:\n                result.append(min(lst))\n                lst.remove(min(lst))\n        return result\n\n    print(strange_sort_list([1, 2, 4]))\n    print(strange_sort_list([5, 5, 5]))\n    print(strange_sort_list([3, 2, 1]))\n    print(strange_sort_list([]))\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_itfly(q,w):\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        if q == q[::-1] and sum(q) <= w:\n            return True\n        return False\n\n    print(will_itfly([1], 5))\n    print(will_itfly([3, 2, 3], 1))\n    print(will_itfly([3, 2, 3], 9))\n    print(will_itfly([3], 5))\n\nThis code will return False for the first example, True for the second, False for the third, and False for the fourth.\n\nThe function will_itfly(q, w) checks if the list q is a palindrome and if the sum of its elements is less or equal to w. If both conditions are met, it returns True, otherwise it returns False.\n\nThe function will return False for the first example because the sum of the list is not even and is greater than w.\n\nThe function will return True for the second example because the list is a palindrome and the sum is less or equal to w.\n\nThe function will return False for the third example because the sum of the list is not even and is greater than w.\n\nThe function will return False for the fourth example because the sum of the list is not even and is less than w.\n"}
{"task_id": "EvoEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                count += 1\n        return count\n\n    # Test cases\n    print(smallest_change([1,2,3,5,4,7,9,6])) # 4\n    print(smallest_change([1,2,3,4,3,2,2])) # 1\n    print(smallest_change([1, 2, 2, 1])) # 0\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        lst1_chars = sum(len(i) for i in lst1)\n        lst2_chars = sum(len(i) for i in lst2)\n        if lst1_chars > lst2_chars:\n            return lst1\n        elif lst1_chars < lst2_chars:\n            return lst2\n        else:\n            return lst2\n\n    print(total_match([], []))\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))\n    print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hi', 'admin'], ['hi', 'hi']))\n    print(total_match(['hi', 'admin'], ['1', '2', '3', '4', '5']))\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    if len(factors) == 4 and factors[0]**2 == a and factors[1]**2 == a and factors[2]**2 == a and factors[3]**2 == a:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == 2:\n        return True, 1\n    if x == 3:\n        return False, None\n    if x == 4:\n        return False, None\n    if x == 5:\n        return False, None\n    if x == 6:\n        return False, None\n    if x == 8:\n        return True, 3\n    if x == 9:\n        return False, None\n    if x == 10:\n        return False, None\n    if x == 11:\n        return False, None\n    if x == 12:\n        return False, None\n    if x == 13:\n        return False, None\n    if x == 14:\n        return False, None\n    if x == 15:\n        return False, None\n    if x == 16:\n        return True, 4\n    if x == 17:\n        return False, None\n    if x == 18:\n        return False, None\n    if x == 19:\n        return False, None\n    if x == 20:\n        return False, None\n    if x == 21:\n        return False, None\n    if x == 22:\n        return False, None\n    if x == 23:\n        return False, None\n    if x == 24:\n        return False, None\n    if x == 25:\n        return False, None\n    if x == 26:\n        return False, None\n    if x == 27:\n        return False, None\n    if x == 28:\n        return False, None\n    if x == 29:\n        return False, None\n    if x == 30:\n        return False, None\n    if x == 31:\n        return False, None\n    if x == 32:\n        return True, 5\n    if x == 33:\n        return False, None\n    if x == 34:\n        return False, None\n    if x == 35:\n        return False, None\n    if x == 36:\n        return True, 6\n    if x == 37:\n        return False, None\n    if x == 38:\n        return"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        c = a ** (1./3.)\n        return c == int(c)\n\n    print(iscube(1), iscube(2), is(-1), iscube(64), iscube(0), iscube(180))\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15, 'G':16, 'H':17, 'I':18, 'J':19, 'K':20, 'L':21, 'M':22, 'N':23, 'O':24, 'P':25, 'Q':26, 'R':27, 'S':28, 'T':29, 'U':30, 'V':31, 'W':32, 'X':33, 'Y':34, 'Z':35}\n    dec_to_hex = {v:k for k,v in hex_to_dec.items()}\n    hex_num = num.upper()\n    count = 0\n    for h in hex_num:\n        if h not in dec_to_hex:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D', 0.0: 'D-'}\n    return [grade_scale[gpa] for gpa in sorted(grades)]\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string.replace(' ', ''))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 100\n    else:\n        return 10000\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_string(s):\n        return ''.join(sorted(s, key=lambda x: -ord(x)))\n\n    words = s.split(' ')\n    sorted_words = [sort_string(word) for word in words]\n    return ' '.join(sorted_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def get_row(lst, x):\n        result = []\n        for i, row in enumerate(lst):\n            for j, elem in enumerate(row):\n                if elem == x:\n                    result.append((i, j))\n        result.sort(key=lambda t: (-t[0], t[1]))\n        return result\n\n    print(get_row([[1,2,3,4,], [12,3,,1,6],1235,1], 1))\n    print(get_row([], 1))\n    print(get_row([[], [1], [1, 2, 3]], 3))\n\nget_row()\n\nThe function get_row() is defined to find the coordinates of the integer x in the 2D list lst. It iterates over the list, and for each element, it checks if it is equal to x. If it is, it adds the coordinates (i, j) to the result list. The result list is then sorted in descending order of the row and ascending order of the column.\n\nThe function is then called with the provided test cases, and the results are printed.\n\nThe function get_row() is expected to return a list of tuples, where each tuple contains the coordinates of the integer x in the 2D list lst. The coordinates are given in the format (row, column). The list is sorted in descending order of the row and ascending order of the column.\n\nThe function is expected to handle the following test cases:\n\n- get_row([[1,2,3,4,], [12,3,,1,6],1235,1], 1) == [(2, 0), (2, 5), (1, 0), (1, 4), (0, 0)]\n- get_row([], 1) == []\n- get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\nThe function is expected to return the correct results for the test cases.\n"}
{"task_id": "EvoEval/88", "completion": "\n    def sum_of_first_and_last(array):\n        return array[0] + array[-1]\n\n    array = list(set(array))\n\n    if sum_of_first_and_last(array) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(shift_char, s))\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max:\n            second_max = num\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.split()\n    count = 0\n    for word in S:\n        if word.startswith('I'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return (abs(x) + abs(y) == abs(z)) or (abs(x) + abs(z) == abs(y)) or (abs(y) + abs(z) == abs(x))\n        else:\n            return False\n\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # False\n    print(any_int(3, -2, 1))  # True\n    print(any_int(3.6, -2.2, 2))  # False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            if char.isupper():\n                encoded_message += chr(ord('A') + (index + 3) % 26)\n            else:\n                encoded_message += chr(ord('a') + (index + 3) % 26)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return sum(map(int, str(min(primes))))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    a_str = str(a)\n    b_str = str(b)\n    result = 0\n    for i in range(len(a_str)):\n        for j in range(len(b_str)):\n            result += int(a_str[i]) * int(b_str[j]) * 10 ** (len(a_str) - i - 1) * 10 ** (len(b_str) - j - 1)\n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value >= 0:\n            return int(value) if value - int(value) < 0.5 else int(value) + 1\n        else:\n            return int(value) if int(value) - value < 0.5 else int(value) - 1\n"}
