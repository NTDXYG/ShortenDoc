{"task_id": "valid/0", "completion": "\n    # Define the rules\n    rules = {\n        \"positive\": [\"good\", \"great\", \"excellent\", \"amazing\"],\n        \"negative\": [\"bad\", \"terrible\", \"horrible\", \"awful\"],\n        \"neutral\": [\"okay\", \"average\", \"mediocre\", \"mediocre\"]\n    }\n\n    # Initialize the sentiment score\n    sentiment_score = 0\n\n    # Split the text into words\n    words = text.split()\n\n    # Check each word against the rules\n    for word in words:\n        if word in rules[\"positive\"]:\n            sentiment_score += 1\n        elif word in rules[\"negative\"]:\n            sentiment_score -= 1\n\n    # Determine the sentiment based on the score\n    if sentiment_score > 0:\n        return \"positive\"\n    elif sentiment_score < 0:\n        return \"negative\"\n    else:\n        return \"neutral\"\n"}
{"task_id": "valid/1", "completion": "\n    frozens = frozenset(s)\n    return frozens\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON list.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/6", "completion": "\n    if base == 1:\n        return 0\n    if n == 1:\n        return 1\n    if base < n:\n        return -1\n    \n    log_val = 1\n    while log_val < n:\n        log_val *= base\n    \n    if log_val == n:\n        return log_val\n    else:\n        return -1\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"e{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, it's not unique\n        if char in unique_chars:\n            return False\n        # Add the character to the set\n        unique_chars.add(char)\n\n    # If we reach here, all characters were unique\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    \n    # Replace multiple consecutive whitespaces with a single space\n    text = ' '.join(text.split())\n    \n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Convert to lowercase\n    text = text.lower()\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b' + re.escape(word1) + r'\\b.*\\b' + re.escape(word2) + r'\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('#'):\n            line = line[1:].strip()\n            if 'tabstop' in line:\n                settings['tabstop'] = int(line.split('=')[1].strip())\n            elif 'expandtab' in line:\n                settings['expandtab'] = line.split('=')[1].strip() == 'true'\n            elif 'shiftwidth' in line:\n                settings['shiftwidth'] = int(line.split('=')[1].strip())\n            elif 'softtabstop' in line:\n                settings['softtabstop'] = int(line.split('=')[1].strip())\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    count = 0\n    while num != 0:\n        num //= 10\n        count += 1\n    return count\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse both lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine both lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name nested dictionary\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in matrix):\n        return \"Input is not a valid matrix\"\n    \n    # Check if the matrix is square\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return (rows, cols, False)\n    \n    # Calculate the sum of diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(rows))\n    \n    return (rows, cols, diagonal_sum)\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(char.lower() for char in s if char.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i + 1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i + 1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    sum_numeric = 0\n    for i in range(len(ts)):\n        if ts[i].isdigit():\n            sum_numeric += int(ts[i])\n    return sum_numeric\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return 0\n    \n    # Initialize sum\n    total_sum = 0\n    \n    # Iterate over the array\n    for num in arr:\n        # Check if the element is a number\n        if isinstance(num, (int, float)):\n            total_sum += num\n        else:\n            raise ValueError(\"Array contains non-numeric value\")\n    \n    return total_sum\n"}
{"task_id": "valid/37", "completion": "\n    # Load the JSON data\n    data = json.loads(json_data)\n\n    # Extract the neighborhood names\n    neighborhoods = [neighborhood['name'] for neighborhood in data]\n\n    # Sort the neighborhoods alphabetically\n    neighborhoods.sort()\n\n    # Return the sorted list of neighborhoods\n    return neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize result as maximum possible\n    min_sum = float('inf')\n\n    # Fix the first element and find the minimum\n    # sum combination with the remaining elements\n    for i in range(n):\n        current_sum = arr[i]\n        current_min = arr[i]\n        for j in range(i + 1, n):\n            current_sum += arr[j]\n            current_min = min(current_min, arr[j])\n\n            # Update the minimum sum if the current\n            # sum is less than the minimum sum\n            min_sum = min(min_sum, current_sum - current_min)\n\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if total votes is 100\n    if sum(votes.values()) != 100:\n        return \"Error: Total votes must be 100\"\n\n    # Calculate and display percentage votes each, rounded to two decimal places\n    results = {}\n    for cand, votes in votes.items():\n        percentage = round((votes / 100) * 100, 2)\n        results[cand] = percentage\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Check if the date string is in DD-MM format\n        if len(date_string) == 5 and date_string[2] == '-':\n            day, month = date_string.split('-')\n            month = month.capitalize()\n            date_object = datetime.strptime(date_string, '%d-%b')\n            return date_object.strftime('%B %d %Y')\n\n        # Check if the date string is in DDMYY format\n        elif len(date_string) == 6 and date_string[2] == 'M':\n            day, month, year = date_string.split('M')\n            month = month.capitalize()\n            date_object = datetime.strptime(date_string, '%d%b%Y')\n            return date_object.strftime('%B %d %Y')\n\n        else:\n            raise ValueError(\"Invalid date format. Please use DD-MM or DDMYY format.\")\n\n    except ValueError as e:\n        return str(e)\n\n"}
{"task_id": "valid/42", "completion": "\n    # Check if the new name has a valid extension\n    if newname.split('.')[-1] not in allowed_type:\n        return False\n    # Check if the old name exists\n    if not os.path.exists(oldname):\n        return False\n    # Check if the new name already exists\n    if os.path.exists(newname):\n        return False\n    return True\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, tuple):\n            result.append(remove_uneven(i))\n        elif isinstance(i, int):\n            if i % 2 == 0:\n                result.append(i)\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                result.append(i)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # Add accuracy data to the histogram\n    for i, acc in enumerate(accs):\n        histogram_data[generation][i].append(acc)\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over the first array and update the count in the dictionary\n    for num in arr[0]:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate over the second array and check if each number is in the dictionary\n    # If it is, decrement the count, otherwise return False\n    for num in arr[1]:\n        if num in count_dict:\n            count_dict[num] -= 1\n            if count_dict[num] < 0:\n                return False\n        else:\n            return False\n\n    # If all numbers are in the dictionary with a count of 0, return True\n    return True\n"}
{"task_id": "valid/50", "completion": "\n    # Define the URL patterns\n    url_patterns = [\n        r'^competition/$',\n        r'^competition/(?P<competition_id>\\d+)/$',\n    ]\n\n    # Iterate through the URL patterns and check if the URL matches any pattern\n    for pattern in url_patterns:\n        if re.match(pattern, url):\n            # If a match is found, return the corresponding view function\n            if pattern == r'^competition/$':\n                return 'competition_list_view'\n            elif pattern == r'^competition/(?P<competition_id>\\d+)/$':\n                return 'competition_detail_view'\n\n    # If no match is found, return a default view function\n    return 'default_view'\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"The concatenation of strings is a common operation in programming.\"\n    string1 = \"To achieve this, we can use the '+' operator or the join() method.\"\n    string2 = \"Here is an example of how to use the '+' operator:\"\n    string3 = \"string1 + string2\"\n    concatenated_string = string1 + string2\n    return sentence + \" \" + concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict_item in list_of_dicts:\n        for key, value in dict_item.items():\n            if key.startswith(\"price_\"):\n                price_sum += value\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        list2.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisorviewpost\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        location = file_path.split('/')[1]\n        if location in config_files:\n            config_files[location].append(file_path)\n        else:\n            config_files[location] = [file_path]\n    return config_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    # Create a new list to store the incremented values\n    incremented_list = []\n\n    # Iterate over each value in the original list\n    for value in list:\n        # Increment the value by 1\n        incremented_value = value + 1\n\n        # Append the incremented value to the new list\n        incremented_list.append(incremented_value)\n\n    # Return the new list with incremented values\n    return incremented_list\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        if num ** 0.5 == int(num ** 0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in given dictionary: \")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \"World\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'\\W+', '', string)\n        # Capitalize the string\n        string = string.upper()\n        result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    import re\n    bold_text = re.findall(r'<b>(.*?)</b>', html_code)\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the price of each item\n    prices = {\n        \"coke\": 1.5,\n        \"chips\": 1.0,\n        \"candy\": 0.75\n    }\n\n    # Check if the item is available\n    if item not in prices:\n        return \"Item not available\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < prices[item]:\n        return \"Insufficient funds\"\n\n    # Calculate the change to return\n    change = money_inserted - prices[item]\n\n    # Update the stock of the item\n    # For simplicity, we'll assume the stock is unlimited\n\n    return f\"Here is your {item} and your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a variable\n    my_var = 10\n\n    # Validate the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n\n    # Return the variable\n    return my_var\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize the text using regular expression\n    tokens = re.findall(r'\\b\\w+\\b', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_by_3_7 = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_by_3_7:\n        return \"No numbers divisible by both 3 and 7 found.\"\n\n    average = sum(divisible_by_3_7) / len(divisible_by_3_7)\n    max_value = max(divisible_by_3_7)\n    min_value = min(divisible_by_3_7)\n\n    print(f\"Average: {average}\")\n    print(f\"Maximum: {max_value}\")\n    print(f\"Minimum: {min_value}\")\n\n    number_counts = {}\n    for num in divisible_by_3_7:\n        if num in number_counts:\n            number_counts[num] += 1\n        else:\n            number_counts[num] = 1\n\n    print(\"Number occurrences:\")\n    for num, count in number_counts.items():\n        print(f\"{num}: {count}\")\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for number in numbers:\n        sum += number\n    average = sum / len(numbers)\n    return average, sum\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    \n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numeric values\")\n    \n    min_value = min(time_series)\n    max_value = max(time_series)\n    \n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    # Create a dictionary to store the count of related articles for each entry\n    related_articles_count = {}\n\n    # Iterate over each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Get the related articles for the current entry\n        related_articles = entry['related_articles']\n\n        # Iterate over each related article and increment its count in the dictionary\n        for related_article in related_articles:\n            if related_article in related_articles_count:\n                related_articles_count[related_article] += 1\n            else:\n                related_articles_count[related_article] = 1\n\n    # Return the dictionary containing the count of related articles for each entry\n    return related_articles_count\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    odd_sum = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 != 0:\n            odd_sum += num\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return odd_sum / odd_count\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n"}
{"task_id": "valid/97", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n < 0:\n        return \"-\" + dec_to_ternary(-n)\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowel_count_dict = {}\n    for pal in palindrome_tuples:\n        vowel_count = sum(1 for char in pal if char.lower() in 'aeiou')\n        vowel_count_dict[pal] = vowel_count\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Your implementation here\n    return modified_string\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in unique_elements:\n            return True\n        # Add the current number to the set\n        unique_elements.add(num)\n\n    # If no pair sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package, version = dependency.split('_')\n        version_number = int(version.split('_')[0])\n        if package not in latest_versions or version_number > latest_versions[package]:\n            latest_versions[package] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categories = {\n        \"Natural causes\": [],\n        \"Accidental causes\": [],\n        \"Mental health issues\": [],\n        \"Diseases\": [],\n        \"Other\": []\n    }\n\n    for cause in causes:\n        action, result = cause.split(\" \")\n        if action == \"died\":\n            if result == \"naturally\":\n                categories[\"Natural causes\"].append(cause)\n            elif result == \"accidentally\":\n                categories[\"Accidental causes\"].append(cause)\n            elif result == \"mental\":\n                categories[\"Mental health issues\"].append(cause)\n            elif result == \"disease\":\n                categories[\"Diseases\"].append(cause)\n            else:\n                categories[\"Other\"].append(cause)\n\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    # Your implementation here\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"Error: {num} is not a number.\")\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if current_num == n:\n        return\n    elif current_num % 2 == 0:\n        print(f\"Thank you for the {current_num}th even number!\")\n        print_thank_you(n, current_num + 1)\n    else:\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            count = 0\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    digits = set(str(num, base))\n    return len(digits) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_text = \"Usage: python cli.py [OPTIONS]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_text += f\"  {option}\\t{description}\\n\"\n    return help_text\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ''.join('1' if bit == '0' else '0' for bit in sample_bitset)\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subseq_len = len(subsequence)\n    for i in range(len(sequence)):\n        if sequence[i:i+subseq_len] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on energy values\n    num_electrons = sum(ados[i] * grid_energies[i] for i in range(dos_grid_size))\n\n    # Adjust the number of doping levels\n    doping_levels = [num_electrons + dope]\n\n    return num_electrons, doping_levels\n"}
{"task_id": "valid/127", "completion": "\n    # Convert the tuple to a set to remove duplicates, then convert back to a tuple\n    result = tuple(set(tuple_to_process))\n    return result\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    result = [0] * n\n    result[0] = arr[0]\n    result[n - 1] = arr[n - 1]\n    for i in range(1, n - 1):\n        result[i] = max(arr[i], arr[i + 1])\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return fruit_list\n\nfruit_list = [\"apple\", \"orange\", \"banana\", \"grape\", \"mango\"]"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    # Your code here\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    # Your code here\n    n_str = n_str[::-1]\n    carry = 0\n    result = \"\"\n    for i in range(len(n_str)):\n        doubled = int(n_str[i]) * 2 + carry\n        carry = doubled // 10\n        result += str(doubled % 10)\n    if carry:\n        result += str(carry)\n    return result[::-1]\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.5, 0.0, 0.0),\n        \"position2\": (0.0, 0.5, 0.0),\n        \"position3\": (0.0, 0.0, 0.5)\n    }\n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        if zoom_level == 1:\n            return \"The quiz system allows multiple answers and the zoom level is set to 1.\"\n        elif zoom_level == 2:\n            return \"The quiz system allows multiple answers and the zoom level is set to 2.\"\n        else:\n            return \"The quiz system allows multiple answers and the zoom level is set to an unknown value.\"\n    else:\n        if zoom_level == 1:\n            return \"The quiz system does not allow multiple answers and the zoom level is set to 1.\"\n        elif zoom_level == 2:\n            return \"The quiz system does not allow multiple answers and the zoom level is set to 2.\"\n        else:\n            return \"The quiz system does not allow multiple answers and the zoom level is set to an unknown value.\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    modified_sentence = \"\"\n    for char in sentence:\n        if char not in vowels:\n            modified_sentence += char\n    return modified_sentence\n"}
{"task_id": "valid/146", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/147", "completion": "\n    max_value = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_value = max(max_value, find_max_in_dict(value))\n        else:\n            max_value = max(max_value, value)\n    return max_value\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 4 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
