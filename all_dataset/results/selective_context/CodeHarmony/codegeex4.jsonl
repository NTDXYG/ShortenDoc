{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        'sports': ['football', 'basketball', 'tennis', 'golf', 'baseball'],\n        'politics': ['election', 'government', 'policy', 'law', 'president'],\n        'technology': ['computer', 'software', 'hardware', 'internet', 'phone'],\n        'entertainment': ['movie', 'music', 'television', 'actor', 'actress'],\n        'business': ['stock', 'finance', 'economy', 'company', 'investment']\n    }\n\n    # Classify text\n    for category, keywords in categories.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n\n    # If text does not match any category\n    return 'uncategorized'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments = ['piano', 'guitar', 'drums', 'cello', 'flute', 'saxophone', 'violin', 'trumpet', 'clarinet', 'trombone']\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string.\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        return sum(int(digit) for digit in str(n)) % 3 == 0\n    return False\n"}
{"task_id": "valid/6", "completion": "\n    return pow(base, n, 2**32)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError as e:\n        raise ValueError(\"Invalid JSON string\") from e\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters were unique\n    return True\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        return \"Error: Text too long\"\n    else:\n        return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers\n    text = ''.join(i for i in text if not i.isdigit())\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create a list to store the disassembled sentence\n    disassembled_sentence = []\n\n    # Iterate over the words\n    for word in words:\n        # Check if the word is a noun\n        if is_noun(word):\n            # Add the noun to the disassembled sentence\n            disassembled_sentence.append(word)\n        # Check if the word is a verb\n        elif is_verb(word):\n            # Add the verb to the disassembled sentence\n            disassembled_sentence.append(word)\n        # Check if the word is an adjective\n        elif is_adjective(word):\n            # Add the adjective to the disassembled sentence\n            disassembled_sentence.append(word)\n        # Check if the word is an adverb\n        elif is_adverb(word):\n            # Add the adverb to the disassembled sentence\n            disassembled_sentence.append(word)\n        # If the word is not a noun, verb, adjective, or adverb, add it to the disassembled sentence as is\n        else:\n            disassembled_sentence.append(word)\n\n    # Return the disassembled sentence\n    return disassembled_sentence\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of list1\n    list1 = list1[::-1]\n    # Reverse the elements of list2\n    list2 = list2[::-1]\n    # Combine the elements of list1 and list2\n    combined_list = list1 + list2\n    # Sort the elements of combined_list in ascending order\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            return get_nested_dictionary_value(value)\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    try:\n        num = float(num)\n        if num < 0:\n            return \"Error: Negative number\"\n        else:\n            return num ** 0.5\n    except ValueError:\n        return \"Error: Invalid input\"\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    columns = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, columns)))\n    is_square = rows == columns\n    return rows, columns, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict) and key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    pass"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize the sum\n    total_sum = 0\n\n    # Iterate over the characters in the string\n    i = 0\n    while i < len(ts):\n        # Check if the current character is a digit\n        if ts[i].isdigit():\n            # Extract the numeric substring\n            num_str = \"\"\n            while i < len(ts) and ts[i].isdigit():\n                num_str += ts[i]\n                i += 1\n            # Convert the numeric substring to an integer and add it to the sum\n            total_sum += int(num_str)\n        else:\n            i += 1\n\n    return total_sum\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if all elements in the array are numerical\n    if all(isinstance(x, (int, float)) for x in arr):\n        # Compute the sum of all elements in the array\n        return sum(arr)\n    else:\n        # Return an error message if the array contains non-numerical values\n        return \"Error: Array contains non-numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = [neighborhood['name'] for neighborhood in json_data]\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum sum as infinity\n    min_sum = float('inf')\n\n    # Initialize the left and right pointers\n    left = 0\n    right = n - 1\n\n    # Iterate until the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the sum of the current pair\n        current_sum = arr[left] + arr[right]\n\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, abs(current_sum))\n\n        # Move the left pointer to the right if the current sum is negative\n        if current_sum < 0:\n            left += 1\n        # Move the right pointer to the left if the current sum is positive\n        elif current_sum > 0:\n            right -= 1\n        # If the current sum is zero, return it as the minimum sum\n        else:\n            return 0\n\n    # Return the minimum sum\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for c in p:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    # Create a dictionary to store the vote counts for each candidate\n    vote_counts = {}\n    total_votes = 0\n\n    # Iterate over the votes list\n    for vote in votes:\n        candidate_name = vote[0]\n        number_of_votes = vote[1]\n\n        # Add the number of votes to the total\n        total_votes += number_of_votes\n\n        # If the candidate is already in the dictionary, add the number of votes to their count\n        if candidate_name in vote_counts:\n            vote_counts[candidate_name] += number_of_votes\n        # Otherwise, add the candidate to the dictionary with their number of votes\n        else:\n            vote_counts[candidate_name] = number_of_votes\n\n    # Calculate the percentage votes for each candidate\n    for candidate_name, vote_count in vote_counts.items():\n        percentage_votes = (vote_count / total_votes) * 100\n        vote_counts[candidate_name] = round(percentage_votes, 2)\n\n    # Return the vote counts and percentages\n    return vote_counts\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Parse the date string\n        date_object = datetime.strptime(date_string, \"%d-%b-%Y\")\n        # Format the date in the standardized format\n        standardized_date = date_object.strftime(\"%B %d %Y\")\n        return standardized_date\n    except ValueError:\n        # Raise an error if the date is not valid\n        raise ValueError(\"Invalid date format or date is not feasible\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # Check if the new file name has a valid extension\n    if not newname.endswith(allowed_type):\n        return False\n\n    # Check if the old file name is the same as the new file name\n    if oldname == newname:\n        return False\n\n    # Check if the new file name already exists\n    if os.path.exists(newname):\n        return False\n\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, int) or isinstance(item, float):\n            if item % 2 == 0:\n                result.append(item)\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    histogram_data[generation] = accs\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language ::\"):\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate through the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create an empty list to store the counts\n    counts = []\n\n    # Iterate through the dictionary and add the counts to the list\n    for num, count in count_dict.items():\n        counts.append(count)\n\n    # Return the list of counts\n    return counts\n"}
{"task_id": "valid/50", "completion": "\n    # URL patterns\n    urlpatterns = [\n        path('home/', views.home_view, name='home'),\n        path('competitions/', views.competition_view, name='competitions'),\n    ]\n\n    # Function to match URL to view\n    def match_url_to_view(url):\n        for pattern in urlpatterns:\n            if re.match(pattern.regex.pattern, url):\n                return pattern.name\n        return None\n\n    # Test cases\n    assert match_url_to_view('/home/') == 'home'\n    assert match_url_to_view('/competitions/') == 'competitions'\n    assert match_url_to_view('/nonexistent/') is None\n    assert match_url_to_view('/home/subpage/') is None\n    assert match_url_to_view('/competitions/subpage/') is None\n    assert match_url_to_view('/home/subpage/subsubpage/') is None\n    assert match_url_to_view('/competitions/subpage/subsubpage/') is None\n    assert match_url_to_view('/home/subpage/subsubpage/subsubsubpage/') is None\n    assert match_url_to_view('/competitions/subpage/subsubpage/subsubsubpage/') is None\n    assert match_url_to_view('/home/subpage/subsubpage/subsubsubpage/subsubsubsubpage/') is None\n    assert match_url_to_view('/competitions/subpage/subsubpage/subsubsubpage/subsubsubsubpage/') is None\n    assert match_url_to_view('/home/subpage/subsubpage/subsubsubpage/subsubsubsubpage/subsubsubsubsubpage/') is None\n    assert match_url_to_view('/competitions/subpage/subsubpage/subsubsubpage/subsubsubsubpage/subsubsubsubsubpage/') is None\n    assert match_url_to_view('/home/subpage/subsubpage/subsubsubpage/subsubsubsubpage/subsubsubsubsubpage/subsubsubsubsubsubpage/') is None\n    assert match_url_to_view('/competitions/subpage/subsubpage/subsubsubpage/subsubsubsubpage/subsubsubsubsubpage/subsubsubsubsubsubpage/') is None\n    assert match_url_to_view('/home/subpage/subsubpage/subsubsubpage/subsubsubsubpage/subsubsubsubsubpage/subsubsubsubsubsubpage/subsubsubsubsubsubsubpage/') is None\n    assert match_url_to_view('/competitions/subpage/subsubpage/subsubsubpage/subsubsubsubpage/subsubsubsubsubpage/subsubsubsub"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world!\"\n    return string + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict_ in list_of_dicts:\n        for key in dict_.keys():\n            if key.startswith(\"price\"):\n                price_sum += dict_[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = []\n    for element in list1:\n        if element in list2:\n            intersection.append(element)\n            list2.remove(element)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        func.route = request_method\n        return func\n    return decorator\n\nHere is a Python solution using a decorator to match incoming API requests to the appropriate endpoint handler based on the request method (GET or POST):\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n\n    for file_path in file_paths:\n        # Extract the directory path and file name\n        directory, file_name = os.path.split(file_path)\n\n        # Determine the category based on the directory path\n        if 'global' in directory:\n            categorized_files['global'].append(file_name)\n        elif 'environment' in directory:\n            categorized_files['environment'].append(file_name)\n        elif 'service' in directory:\n            categorized_files['service'].append(file_name)\n        elif 'application' in directory:\n            categorized_files['application'].append(file_name)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    return sorted([a, b, c, d, e])[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    timeDifference = timeEnd - timeStart\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['WHITE', 'RED', 'GREEN']\n    current_index = colors.index(color)\n    next_index = (current_index + 1) % len(colors)\n    return colors[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha():\n                if char.lower() == target.lower():\n                    return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict:\n        print(key)\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \" is a great person.\"\n    result = f\"{name}{phrase}\"\n    return result\n"}
{"task_id": "valid/70", "completion": "\n    def capitalize_and_remove_special(strings):\n        result = []\n        for string in strings:\n            capitalized = string.capitalize()\n            cleaned = re.sub(r'\\W+', '', capitalized)\n            result.append(cleaned)\n        return result\n\n    return capitalize_and_remove_special\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    start_tag = '<b>'\n    end_tag = '</b>'\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_text.append(html_code[start_index + len(start_tag):end_index])\n        start_index = end_index + len(end_tag)\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    items = {\"Coke\": 1.00, \"Pepsi\": 1.50, \"Sprite\": 1.20, \"Water\": 0.50}\n    if item not in items:\n        return \"Invalid item\"\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n    change = round(money_inserted - items[item], 2)\n    items[item] -= 1\n    return f\"Here is your {item}, your change is {change}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string.decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    import matplotlib.pyplot as plt\n    x = [1, 2, 3, 0, 5, 0, 7, 8, 0, 10]\n    plt.stem(x)\n    plt.show()\n    return [i for i, value in enumerate(x) if value != 0]"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_variable = 10\n\n    # Validate the variable\n    if isinstance(my_variable, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    elif isinstance(element, frozenset):\n        return \"Frozenset\"\n    elif isinstance(element, type(None)):\n        return \"None\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n    merged = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            merged.append(arr[i])\n    return merged\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern\n    pattern = r\"\\b\\w+\\b\"\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    tokens = re.findall(pattern, text)\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7 found in the list.\"\n    \n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in set(divisible_numbers)}\n    \n    return {\n        \"Average\": average,\n        \"Max Value\": max_value,\n        \"Min Value\": min_value,\n        \"Occurrences\": occurrences\n    }\n"}
{"task_id": "valid/84", "completion": "\n    # split the sentence into words\n    words = sentence.split()\n\n    # create a dictionary to store the frequency of each word\n    word_freq = {}\n\n    # iterate through the words and count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 1\n    factorial = 1\n    for i in range(1, decimal_places + 1):\n        factorial *= i\n        e += 1 / factorial\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    return average, sum(numbers)\n\nnumbers = [1, 2, 3, 4, 5]\naverage, total = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty.\")\n    min_value = time_series[0]\n    max_value = time_series[0]\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains non-numerical values.\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    max_index = lst.index(max_value)\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return not set(list1).isdisjoint(list2)\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf-8').decode('utf-8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    total = 0\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num\n            count += 1\n    average = total / count\n    return total, average\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b"}
{"task_id": "valid/97", "completion": "\n    # Create a dictionary to store the command descriptions\n    command_descriptions = {}\n\n    # Iterate over the mapping and create the command descriptions\n    for command, description in mapping.items():\n        command_descriptions[command] = description\n\n    # Create the bot description\n    bot_description = f\"You are tasked creating a Discord bot can manage and play music in a server The bot should have the ability provide information its features a web app for managing personal playlists and server settings Additionally the bot should categorize commands and provide help information for each command\\n\\n**Commands**\\n\\n\"\n\n    # Add the command descriptions to the bot description\n    for command, description in command_descriptions.items():\n        bot_description += f\"`{command}`: {description}\\n\"\n\n    return bot_description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(-n)\n    else:\n        return int(str(n), 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1][1:] for file_name in file_names)"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    # Check if the string is empty\n    if not s:\n        return s\n\n    # Initialize an empty string to store the modified version\n    modified_string = \"\"\n\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char.lower() in \"aeiou\":\n            # Convert the vowel to uppercase\n            modified_string += char.upper()\n        else:\n            # Append the character as it is\n            modified_string += char\n\n    # Return the modified string\n    return modified_string\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the numbers we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version = dependency\n        version_date = version.split('_')[-1]\n        if package_name not in latest_versions or version_date > latest_versions[package_name]:\n            latest_versions[package_name] = version_date\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categories = {\n        \"accident\": [],\n        \"suicide\": [],\n        \"natural causes\": [],\n        \"unknown\": []\n    }\n\n    for cause in causes:\n        action, result, location = cause.split(\" \")\n        if action in categories:\n            categories[action].append(cause)\n        else:\n            categories[\"unknown\"].append(cause)\n\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        result = [num ** exp for num in num_list]\n        return result\n    except TypeError:\n        print(\"Error: Invalid input. Please enter a list of numbers and an exponent.\")\n        return None\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1 or not isinstance(n, int):\n        print(\"Please enter a positive integer.\")\n        return\n    if current_num > n:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return \"\"\n    else:\n        if s[0].lower() in \"aeiou\":\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: myapp [OPTIONS]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence) - len(subsequence) + 1):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    if h == 0:\n        return 0\n    if h < 0:\n        h = -h\n        if t < 0:\n            t = -t\n        else:\n            return -1\n    if t < 0:\n        t = -t\n        return -1\n    return h // t\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy] * np.exp(-energy / (2 * kB * temperature))\n\n    # Adjust the number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two pointers, one at the start and one at the end of the array\n    left = 0\n    right = len(arr) - 1\n    # Create a new array to store the rearranged elements\n    rearranged = []\n    # Iterate through the array, placing the larger element at the start and the smaller element at the end\n    while left <= right:\n        rearranged.append(arr[right])\n        rearranged.append(arr[left])\n        left += 1\n        right -= 1\n    return rearranged\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(min(3, len(lst))):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    output_string = ', '.join(sorted_fruit_list)\n\n    return output_string\n\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\nfrom django.db import migrations, models\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        digit = int(n_str[i])\n        temp = digit * 2 + carry\n        carry = temp // 10\n        result.append(str(temp % 10))\n    if carry > 0:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.1, 0.2, 0.3),\n        \"position2\": (0.4, 0.5, 0.6),\n        \"position3\": (0.7, 0.8, 0.9),\n    }\n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    if len(common_elements) == 0:\n        return 0\n    else:\n        return reduce(lambda x, y: x * y, common_elements)\n"}
{"task_id": "valid/143", "completion": "\n    # The first configuration is whether the quiz allows multiple answers. This is determined by the allow_multiple_answer variable, which is a boolean value. If allow_multiple_answer is True, the quiz allows multiple answers. Otherwise, it does not.\n    # The second configuration is the zoom level of the quiz. This is determined by the zoom_level variable, which is an integer value. The zoom level determines the level of difficulty of the quiz. A higher zoom level means a more difficult quiz.\n    # The code snippet provided is a function that takes two parameters: allow_multiple_answer and zoom_level. The function returns a string that describes the behavior of the quiz system based on these two configurations.\n    # If allow_multiple_answer is True and zoom_level is greater than 5, the function returns \"This quiz allows multiple answers and is a difficult quiz.\"\n    # If allow_multiple_answer is True and zoom_level is less than or equal to 5, the function returns \"This quiz allows multiple answers and is an easy quiz.\"\n    # If allow_multiple_answer is False and zoom_level is greater than 5, the function returns \"This quiz does not allow multiple answers and is a difficult quiz.\"\n    # If allow_multiple_answer is False and zoom_level is less than or equal to 5, the function returns \"This quiz does not allow multiple answers and is an easy quiz.\"\n    # The function uses a series of if-elif-else statements to determine the behavior of the quiz system based on the two configurations.\n    if allow_multiple_answer and zoom_level > 5:\n        return \"This quiz allows multiple answers and is a difficult quiz.\"\n    elif allow_multiple_answer and zoom_level <= 5:\n        return \"This quiz allows multiple answers and is an easy quiz.\"\n    elif not allow_multiple_answer and zoom_level > 5:\n        return \"This quiz does not allow multiple answers and is a difficult quiz.\"\n    else:\n        return \"This quiz does not allow multiple answers and is an easy quiz.\""}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    def is_alphabetic_key(key):\n        return all(c.isalpha() for c in key)\n\n    def merge(a, b):\n        merged = {}\n        for key in set(a.keys()).union(b.keys()):\n            if key in a and key in b:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merged[key] = merge(a[key], b[key])\n                else:\n                    merged[key] = b[key]\n            elif key in a:\n                merged[key] = a[key]\n            else:\n                merged[key] = b[key]\n        return merged\n\n    def sort_keys(obj):\n        return {k: sort_keys(v) if isinstance(v, dict) else v for k, v in sorted(obj.items())}\n\n    a = {k.strip(): v for k, v in a.items() if is_alphabetic_key(k)}\n    b = {k.strip(): v for k, v in b.items() if is_alphabetic_key(k)}\n\n    merged = merge(a, b)\n    sorted_merged = sort_keys(merged)\n\n    return sorted_merged\n\na = {'a 1,b 2,nested {'x 5, 6}} bc 3 'd 4nestedy 7,z}}\nb = {'a 1,b 2,nested {'x 5, 6}} bc 3 'd 4nestedy 7,z}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    elif string == \"\":\n        return \"\"\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    # Check if n is greater than the length of the list\n    if n > len(lst):\n        return lst\n    # Use heapq.nsmallest to find the N smallest items\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 1 == 0 and x > 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
