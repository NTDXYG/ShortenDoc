{"task_id": "valid/0", "completion": "\n    # Define the rules\n    rules = [\n        {\"category\": \"politics\", \"keywords\": [\"government\", \"election\", \"politics\"]},\n        {\"category\": \"sports\", \"keywords\": [\"football\", \"basketball\", \"sports\"]},\n        {\"category\": \"entertainment\", \"keywords\": [\"movie\", \"music\", \"entertainment\"]},\n    ]\n\n    # Initialize the category\n    category = \"unknown\"\n\n    # Iterate over the rules\n    for rule in rules:\n        # Check if any of the keywords are in the text\n        if any(keyword in text.lower() for keyword in rule[\"keywords\"]):\n            # If a keyword is found, update the category\n            category = rule[\"category\"]\n            break\n\n    return category\n"}
{"task_id": "valid/1", "completion": "\n    frozens = frozenset(s)\n    return frozens\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        # Try to parse the JSON string\n        json_data = json.loads(json_string)\n        # Convert the JSON data to a list of dictionaries\n        list_of_dicts = [dict(item) for item in json_data]\n        return list_of_dicts\n    except json.JSONDecodeError:\n        # If the input is not a valid JSON string, raise a ValueError\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    # Check if the input is a number and not negative\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    # Check if the number is divisible by 5\n    if n % 5 != 0:\n        return False\n\n    # Calculate the sum of the digits of the number\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # Check if the sum of the digits is divisible by 3\n    if sum_of_digits % 3 != 0:\n        return False\n\n    # If all conditions are met, return True\n    return True\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif n == base:\n        return 1\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    text = text.strip()\n    words = text.split()\n    return ' '.join(words)\n"}
{"task_id": "valid/13", "completion": "\n    # Convert the text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = re.compile(r'\\b(' + re.escape(word1) + '|' + re.escape(word2) + r')\\b')\n    return bool(pattern.search(text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(sublist) for sublist in array]\n"}
{"task_id": "valid/16", "completion": "\n    # Split the comment into lines\n    lines = comment.split('\\n')\n    \n    # Initialize an empty dictionary to store the settings\n    settings = {}\n    \n    # Iterate over each line\n    for line in lines:\n        # Remove any leading or trailing whitespace\n        line = line.strip()\n        \n        # Check if the line starts with a setting\n        if line.startswith('set'):\n            # Split the line into parts\n            parts = line.split()\n            \n            # Check if the line is a setting\n            if len(parts) > 1 and parts[1] in ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']:\n                # Extract the value\n                value = parts[2]\n                \n                # Add the setting to the dictionary\n                settings[parts[1]] = value\n    \n    # Return the settings\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    # Base case: if the number is 0, there are no digits\n    if num == 0:\n        return 0\n    # Recursive case: count the digits in the number without the last digit\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    \n    # Combine the elements of the two lists\n    combined_list = reversed_list1 + reversed_list2\n    \n    # Sort the elements in ascending order\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to a string to easily reverse it\n    num_str = str(num)\n    \n    # Initialize the closest palindrome and the difference between the number and the closest palindrome\n    closest_pal = num\n    min_diff = abs(num - closest_pal)\n    \n    # Iterate over all numbers from num to num + 1\n    for i in range(num, num + 1):\n        # Convert the number to a string to easily reverse it\n        str_i = str(i)\n        \n        # Check if the number is a palindrome\n        if str_i == str_i[::-1]:\n            # Calculate the difference between the number and the palindrome\n            diff = abs(num - i)\n            \n            # If the difference is smaller than the current minimum difference, update the closest palindrome and the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n                closest_pal = i\n                \n    # Return the closest palindrome\n    return closest_pal\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Get the number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Check if the matrix is square\n    is_square = num_rows == num_cols\n    \n    # Initialize the sum of the diagonal elements\n    diagonal_sum = 0\n    \n    # Iterate over the rows and columns to calculate the sum of the diagonal elements\n    for i in range(num_rows):\n        diagonal_sum += matrix[i][i]\n    \n    # Return the required information\n    return num_rows, num_cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table rows\n    table_rows = []\n    \n    # Calculate the number of rows needed to display all buttons\n    num_rows = -(-len(buttons) // num_columns)  # Ceiling division\n    \n    # Iterate over the range of rows\n    for i in range(num_rows):\n        # Initialize an empty list to store the current row\n        row = []\n        \n        # Iterate over the range of columns\n        for j in range(num_columns):\n            # Calculate the index of the current button\n            index = i * num_columns + j\n            \n            # If the index is within the bounds of the buttons list, add the button to the row\n            if index < len(buttons):\n                # Assuming each button is a dictionary with a 'text' key and an 'action' key\n                button = buttons[index]\n                row.append({'text': button['text'], 'action': button['action']})\n        \n        # Add the current row to the table rows\n        table_rows.append(row)\n    \n    # Return the table rows\n    return table_rows\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - len(alphabet) + 1):\n        if s[i:i+len(alphabet)] == alphabet:\n            return True\n    return False\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Initialize an empty string to build the current numeric substring\n    current_num = \"\"\n    \n    # Iterate over each character in the input string\n    for char in ts:\n        # If the character is a digit, add it to the current numeric substring\n        if char.isdigit():\n            current_num += char\n        # If the character is not a digit and the current numeric substring is not empty\n        elif current_num:\n            # Add the current numeric substring to the total sum\n            total_sum += int(current_num)\n            # Reset the current numeric substring\n            current_num = \"\"\n    \n    # If the string ends with a numeric substring, add it to the total sum\n    if current_num:\n        total_sum += int(current_num)\n    \n    # Return the total sum\n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array must only contain numerical values\")\n\n    # Compute the sum of all elements in the array\n    total = sum(arr)\n\n    return total\n"}
{"task_id": "valid/37", "completion": "\n    # First, we load the JSON data into a Python dictionary\n    data = json.loads(json_data)\n    \n    # Then, we extract the neighborhood names from the dictionary\n    neighborhood_names = [neighborhood['name'] for neighborhood in data]\n    \n    # Finally, we sort the neighborhood names in alphabetical order and return the result\n    return sorted(neighborhood_names)\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        # Calculate the absolute sum of the current pair\n        abs_sum = abs(arr[i] + arr[i + 1])\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, abs_sum)\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n    \n    # Iterate over each vote in the list\n    for vote in votes:\n        # Extract the candidate name and vote count from the tuple\n        cand_name, num_votes = vote\n        \n        # Check if the candidate name is a string and the vote count is a positive integer\n        if not isinstance(cand_name, str) or not cand_name.isalpha() or not isinstance(num_votes, int) or num_votes <= 0:\n            raise ValueError(\"Invalid vote format\")\n        \n        # Check if the candidate name is within the allowed length\n        if len(cand_name) > 10:\n            raise ValueError(\"Candidate name too long\")\n        \n        # Check if the vote count is within the allowed range\n        if num_votes > 1000:\n            raise ValueError(\"Vote count too high\")\n        \n        # Check if the total number of votes exceeds 100\n        if sum(votes[i][1] for i in range(len(votes))) > 100:\n            raise ValueError(\"Total number of votes exceeds 100\")\n        \n        # Add the candidate to the results dictionary if they are not already there\n        if cand_name not in results:\n            results[cand_name] = 0\n        \n        # Increment the candidate's vote count\n        results[cand_name] += num_votes\n    \n    # Calculate the percentage of votes for each candidate\n    for cand_name in results:\n        results[cand_name] = (results[cand_name] / sum(results.values())) * 100\n    \n    # Round the percentages to two decimal places\n    for cand_name in results:\n        results[cand_name] = round(results[cand_name], 2)\n    \n    # Return the results dictionary\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    # Define the possible date formats\n    date_formats = [\"%d-%m-%Y\", \"%d-%b-%y\"]\n\n    # Try to parse the date string with each possible format\n    for date_format in date_formats:\n        try:\n            # Attempt to parse the date string\n            date = datetime.strptime(date_string, date_format)\n\n            # If the date is valid, return it in the standardized format\n            return date.strftime(\"%B %d, %Y\")\n        except ValueError:\n            # If the date string does not match the current format, continue to the next one\n            continue\n\n    # If none of the formats match, raise a ValueError\n    raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YY.\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # Define a list of allowed file types\n    allowed_types = ['txt', 'pdf', 'doc', 'docx', 'jpg', 'png', 'gif', 'mp3', 'mp4', 'mov', 'avi']\n    \n    # Get the file extension from the new file name\n    new_extension = newname.split('.')[-1]\n    \n    # Check if the new file name has a valid extension\n    if new_extension in allowed_types:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        if isinstance(num, int) or isinstance(num, float):\n            return num % 2 == 0\n        elif isinstance(num, str):\n            try:\n                return float(num) % 2 == 0\n            except ValueError:\n                return False\n        else:\n            raise TypeError(\"Input must be a number or a string\")\n\n    def remove_uneven(lst):\n        new_lst = []\n        for item in lst:\n            if isinstance(item, tuple):\n                new_lst.append(remove_uneven(item))\n            elif isinstance(item, list):\n                new_lst.append(remove_uneven(item))\n            elif is_even(item):\n                new_lst.append(item)\n        return new_lst\n\n    return remove_uneven(lst)  # return the result of the recursive function\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    # Create a copy of the original histogram data\n    hist = histogram_data.copy()\n    \n    # Add the accuracy data to the hist data\n    hist[generation] = accs\n    \n    # Return the updated hist data\n    return hist\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language, _, _ = classifier.split(\" :: \")\n            unique_languages.add(language)\n    return len(unique_languages)  # Return the count of unique languages\n\n"}
{"task_id": "valid/49", "completion": "\n    # Initialize an empty dictionary to store the count of each number\n    count_dict = {}\n    \n    # Iterate over each number in the array\n    for num in arr:\n        # If the number is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n    \n    # Convert the dictionary into a list of tuples and return it\n    return list(count_dict.items())\n"}
{"task_id": "valid/50", "completion": "\n    # Define a regular expression pattern to match URLs\n    pattern = re.compile(r'^/video/(\\d+)/$')\n\n    # Check if the URL matches the pattern\n    match = pattern.match(url)\n\n    # If the URL matches, return the corresponding view function\n    if match:\n        # Get the video ID from the URL\n        video_id = match.group(1)\n\n        # Return the view function for the video detail page\n        return 'video_detail'\n\n    # If the URL does not match, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    return list[:position] + [item] + list[position:]\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    return string + \" \" + sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary.keys():\n            if key.startswith(\"price_\"):\n                # Extract the digit part from the key\n                digit_part = \"\".join(filter(str.isdigit, key))\n                # Convert the digit part to an integer\n                digit = int(digit_part)\n                # Add the price value to the sum\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    # Convert the lists to sets for efficient intersection calculation\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection between the two sets\n    intersection = set1.intersection(set2)\n    \n    # Remove common elements from the second list\n    list2 = [element for element in list2 if element not in intersection]\n    \n    # Return the intersection and the updated list2\n    return list(intersection), list2\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request_method == 'GET':\n                return func(request, *args, **kwargs)\n            elif request_method == 'POST':\n                return func(request, *args, **kwargs)\n            else:\n                return \"Invalid request method\"\n        return wrapper\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a == b:\n        return a\n    elif a > b:\n        return gcd_recursive(a - b, b)\n    else:\n        return gcd_recursive(a, b - a)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        \n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        \n        # If the directory path is not in the categorized_files dictionary, add it\n        if dir_path not in categorized_files:\n            categorized_files[dir_path] = []\n        \n        # Add the file name to the list of files in the directory path\n        categorized_files[dir_path].append(file_name)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Calculate the time difference by subtracting the start time from the end time\n    timeDifference = timeEnd - timeStart\n    # Return the calculated time difference\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    # Base case: If the start index is greater than the end index, the target is not in the array.\n    if start > end:\n        return False\n\n    # Calculate the middle index of the array.\n    mid = (start + end) // 2\n\n    # If the middle element is equal to the target, return True.\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half of the array.\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half of the array.\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color not in colors:\n        return \"Invalid color\"\n    index = colors.index(color)\n    return colors[(index + 1) % len(colors)]  # Use the modulus operator to cycle back to the start of the list when we reach the end\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n"}
{"task_id": "valid/65", "completion": "\n    # Initialize a flag to track if a perfect square is found\n    has_perfect_square = False\n\n    # Iterate over the range of integers\n    for num in range(start, end + 1):\n        # Check if the number is a perfect square\n        root = int(num ** 0.5)\n        if root * root == num:\n            # If a perfect square is found, set the flag to True and break the loop\n            has_perfect_square = True\n            break\n\n    # Return the flag indicating whether a perfect square was found\n    return has_perfect_square\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary are:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \"Hello, my name is {} and I am {} years old.\"\n    concatenated_string = phrase.format(name, age)\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    # Define a pattern that matches any special characters\n    pattern = re.compile(r'[^a-zA-Z0-9\\s]')\n\n    # Use a list comprehension to filter out strings with special characters and capitalize the rest\n    return [s.capitalize() for s in strings if not pattern.search(s)]\n\n"}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i + 4\n            end = html_code.find('</b>', start)\n            if end != -1:\n                bold_text.append(html_code[start:end])\n                i = end + 4\n            else:\n                i = len(html_code)\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"1\": {\"name\": \"Coke\", \"price\": 1.00},\n        \"2\": {\"name\": \"Pepsi\", \"price\": 1.50},\n        \"3\": {\"name\": \"Water\", \"price\": 0.50},\n    }\n\n    # Check if the item is in stock\n    if item not in items:\n        return \"Item not found\"\n\n    # Check if the user has enough money\n    if money_inserted < items[item][\"price\"]:\n        return \"Insufficient funds\"\n\n    # Calculate change\n    change = money_inserted - items[item][\"price\"]\n\n    # Update stock\n    items[item][\"stock\"] -= 1\n\n    # Return change and update stock\n    return f\"Thank you for your purchase! Your change is ${change:.2f}. The vending machine now has {items[item]['stock']} {items[item]['name']}s left in stock.\"\n"}
{"task_id": "valid/74", "completion": "\n    # Combine the two lists into one\n    merged_list = list1 + list2\n    \n    # Convert the list to a set to remove duplicates\n    merged_set = set(merged_list)\n    \n    # Convert the set back to a list and return it\n    return list(merged_set)\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]  # Return the indices of the nonzero entries in the vector\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    value = 10\n\n    # Validate the value\n    if value == 10:\n        print(\"The value is valid\")\n    else:\n        print(\"The value is not valid\")\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    word_list = list(word)\n    # Use random.shuffle to rearrange the list of characters\n    random.shuffle(word_list)\n    # Join the list of characters back into a string\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            merged_arr[-1] += arr[i]\n        else:\n            merged_arr.append(arr[i])\n\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text using regular expression\n    tokens = re.findall(r'\\w+|[^\\w\\s]', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    # Filter the list to include only numbers that are divisible by both 3 and 7\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    # Calculate the average of the divisible numbers\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    \n    # Find the maximum and minimum values among the divisible numbers\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    \n    # Count the occurrences of each unique number divisible by both 3 and 7\n    occurrences = {}\n    for num in divisible_numbers:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n    \n    # Display the results\n    print(f\"Average of numbers divisible by both 3 and 7: {average}\")\n    print(f\"Maximum value among numbers divisible by both 3 and 7: {max_value}\")\n    print(f\"Minimum value among numbers divisible by both 3 and 7: {min_value}\")\n    print(\"Occurrences of each unique number divisible by both 3 and 7:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        word = word.lower()\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    highest_frequency_word = [word for word, freq in frequency.items() if freq == max_frequency]\n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    # Initialize the value of e to 0\n    e = 0.0\n    # Initialize the factorial of 0 to 1\n    factorial = 1.0\n    # Initialize the denominator to 1\n    denominator = 1.0\n    # Loop through the series until the desired decimal place is reached\n    while True:\n        # Calculate the next term in the series\n        term = 1 / (factorial * denominator)\n        # Add the term to e\n        e += term\n        # Increment the denominator\n        denominator += 1\n        # Check if the desired decimal place has been reached\n        if denominator > 10 ** decimal_places:\n            break\n        # Increment the factorial\n        factorial *= denominator\n    # Return the calculated value of e\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_numbers = sum(numbers)\n    return average, sum_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numeric values\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = {}\n    for article in encyclopedia:\n        related_articles[article] = 0\n        for other_article in encyclopedia:\n            if article != other_article:\n                if is_related(article, other_article):\n                    related_articles[article] += 1\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    # Define the bot description\n    description = \"A Discord bot that can manage and play music in a server.\"\n    \n    # Define the features of the bot\n    features = {\n        \"Music Management\": \"The bot can manage and play music in a server.\",\n        \"Web App\": \"The bot has a web app for managing personal play and server settings.\",\n        \"Command Categorization\": \"The bot categorizes commands and provides help information for each command.\"\n    }\n    \n    # Define the command categories\n    categories = {\n        \"Music\": [\"play\", \"pause\", \"stop\", \"skip\"],\n        \"Settings\": [\"server_settings\", \"personal_settings\"],\n        \"Help\": [\"help\"]\n    }\n    \n    # Define the help information for each command\n    help_info = {\n        \"play\": \"Play a song in the server.\",\n        \"pause\": \"Pause the current song in the server.\",\n        \"stop\": \"Stop the current song in the server.\",\n        \"skip\": \"Skip the current song in the server.\",\n        \"server_settings\": \"Manage server settings.\",\n        \"personal_settings\": \"Manage personal settings.\",\n        \"help\": \"Get help information for a command.\"\n    }\n    \n    # Create a mapping of the bot description, features, categories, and help information\n    mapping = {\n        \"description\": description,\n        \"features\": features,\n        \"categories\": categories,\n        \"help_info\": help_info\n    }\n    \n    return mapping\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define the grade scale\n    grade_scale = {\n        0: \"F\",\n        1: \"F\",\n        1.5: \"F\",\n        2: \"D\",\n        2.5: \"D\",\n        3: \"C\",\n        3.5: \"C\",\n        4: \"B\",\n        4.5: \"B\",\n        5: \"A\"\n    }\n    \n    # Use a ternary operator to determine the letter grade\n    letter_grade = \"F\" if numerical_grade < 0 else grade_scale.get(numerical_grade, \"Invalid grade\")\n    \n    # Calculate the GPA\n    gpa = round(numerical_grade / 5, 2)\n    \n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Initialize total price to 0\n    total = 0\n    \n    # Iterate over each item in the listing\n    for item in listing:\n        # Add the price of the item to the total\n        total += item['price']\n    \n    # Return the total price\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_vowel_count = {palindrome: sum(1 for char in palindrome.lower() if char in vowels) for palindrome in palindrome_tuples}\n    return palindrome_vowel_count\n"}
{"task_id": "valid/104", "completion": "\n    # Remove leading and trailing whitespaces from the string\n    s = s.strip()\n    \n    # If the string is empty, return an empty string\n    if not s:\n        return \"\"\n    \n    # If the string has a length of 1, return the string as it is\n    if len(s) == 1:\n        return s\n    \n    # If the string has a length of 2, swap the characters and return the result\n    if len(s) == 2:\n        return s[1] + s[0]\n    \n    # If the string has a length greater than 2, return the first and last characters of the string\n    return s[0] + s[-1]\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version = dependency\n        # Extract the date from the version number\n        date = version[7:15]\n        # If the package is not in the dictionary or the current version is newer than the stored version, update the dictionary\n        if package_name not in latest_versions or date > latest_versions[package_name][7:15]:\n            latest_versions[package_name] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the categorized causes of death\n    categorized = {}\n    \n    # Loop through each cause of death\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(\" \", 1)\n        \n        # If the action is not already in the dictionary, add it\n        if action not in categorized:\n            categorized[action] = []\n        \n        # Add the cause to the list of causes for the action\n        categorized[action].append(result)\n    \n    # Return the dictionary of categorized causes of death\n    return categorized\n"}
{"task_id": "valid/108", "completion": "\n    # Remove spaces from the input name\n    name = name.replace(\" \", \"\")\n    \n    # Convert the name to lower case\n    name = name.lower()\n    \n    # Replace any remaining spaces with hyphens\n    name = name.replace(\" \", \"-\")\n    \n    # Return the generated code name\n    return name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Import the string module\n    import string\n    \n    # Use the translate method to remove punctuations\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    elif current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n - 1, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    # Convert the number to a string to easily access each digit\n    num_str = str(num)\n    \n    # Check if all digits are the same\n    return len(set(num_str)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    # Base case: if the string is empty, return it as is\n    if not s:\n        return s\n\n    # If the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0] in 'aeiouAEIOU':\n        return remove_vowels_recursive(s[1:])\n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python application.py [options]\\n\"\n    for option, description in options:\n        help_message += f\"-{option[0]}: {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for val in Val:\n        if val in count_dict:\n            count_dict[val] += 1\n        else:\n            count_dict[val] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Initialize quotient to 0\n    quotient = 0\n    \n    # Make a copy of the dividend\n    temp = h\n    \n    # While the dividend is greater than or equal to the divisor\n    while temp >= t:\n        # Subtract the divisor from the dividend\n        temp -= t\n        \n        # Increment the quotient\n        quotient += 1\n    \n    # Return the quotient\n    return quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum(num for num in input_list if num % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    # Initialize a counter for consonants\n    consonant_count = 0\n    # Define the set of vowels\n    vowels = set(\"aeiouAEIOU\")\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is a letter and not a vowel\n        if char.isalpha() and char not in vowels:\n            # If it's a consonant, increment the counter\n            consonant_count += 1\n    # Return the total count of consonants\n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the number of electrons\n    num_electrons = 0\n    \n    # Iterate over the grid energies and ADOS values\n    for energy, ados in zip(grid_energies, ados):\n        # Calculate the number of electrons at the current energy\n        num_electrons += ados * (1 + dope * (energy - 0.5))\n        \n        # Adjust the number of electrons based on the doping level\n        num_electrons = max(0, num_electrons)\n    \n    # Return the total number of electrons\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Initialize the result array\n    result = []\n    \n    # Alternate between the smallest and largest elements to maximize the difference\n    while left <= right:\n        result.append(arr[left])\n        if left != right:\n            result.append(arr[right])\n        left += 1\n        right -= 1\n    \n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for elem in lst:\n        sublists += [sublist + [elem] for sublist in sublists]\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n    # First, we need to import the necessary modules\n    from django.db import migrations, models\n\n    # We define the migration class\n    class Migration(migrations.Migration):\n        # We specify the dependencies for this migration\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        # We define the operations for this migration\n        operations = [\n            # We use the AlterField operation to alter the field\n            migrations.AlterField(\n                model_name='committeemember',\n                name=field_name,\n                field=models.CharField(max_length=255),\n            ),\n        ]\n\n    # We return the migration class\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the sum of the common elements\n    common_elements_sum = sum(common_elements)\n    \n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # Calculate the forecast period by taking 1% of the dataset length and rounding it up to the nearest integer\n    forecast_period = math.ceil(dataset_length * 0.01)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index of the page\n    start_index = (page_number - 1) * items_per_page\n    \n    # Calculate the end index of the page\n    end_index = start_index + items_per_page\n    \n    # Slice the list to get the items for the current page\n    paginated_items = items[start_index:end_index]\n    \n    return paginated_items\n\n"}
{"task_id": "valid/140", "completion": "\n    n = n_str\n    result = ''\n    carry = 0\n    for i in range(len(n)-1, -1, -1):\n        digit = int(n[i])\n        double_digit = digit * 2 + carry\n        result = str(double_digit % 10) + result\n        carry = double_digit // 10\n    if carry:\n        result = str(carry) + result\n    return result\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'home': [0.0, 0.0, 0.0],\n        'up': [0.0, 0.0, 1.0],\n        'down': [0.0, 0.0, -1.0],\n        'left': [-1.0, 0.0, 0.0],\n        'right': [1.0, 0.0, 0.0],\n        'forward': [0.0, 1.0, 0.0],\n        'backward': [0.0, -1.0, 0.0]\n    }\n\n    return presets.get(preset_name, [0.0, 0.0, 0.0])  # Return the preset coordinates or default to [0.0, 0.0, 0.0] if preset_name is not found\n"}
{"task_id": "valid/142", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the common elements and multiply them together\n    for element in common_elements:\n        product *= element\n    \n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Define the quiz system behavior based on the configurations\n    if allow_multiple_answer:\n        if zoom_level == 1:\n            return \"Quiz system allows multiple answers and has a low zoom level\"\n        elif zoom_level == 2:\n            return \"Quiz system allows multiple answers and has a medium zoom level\"\n        else:\n            return \"Quiz system allows multiple answers and has a high zoom level\"\n    else:\n        if zoom_level == 1:\n            return \"Quiz system does not allow multiple answers and has a low zoom level\"\n        elif zoom_level == 2:\n            return \"Quiz system does not allow multiple answers and has a medium zoom level\"\n        else:\n            return \"Quiz system does not allow multiple answers and has a high zoom level\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    def merge(a, b):\n        result = {}\n        for key in a:\n            if key.isalpha():\n                if isinstance(a[key], dict):\n                    result[key] = merge(a[key], b.get(key, {}))\n                else:\n                    result[key] = a[key]\n        for key in b:\n            if key.isalpha():\n                if key in result:\n                    if isinstance(b[key], dict) and isinstance(result[key], dict):\n                        result[key] = merge(result[key], b[key])\n                    else:\n                        result[key] = b[key]\n                else:\n                    if isinstance(b[key], dict):\n                        result[key] = merge({}, b[key])\n                    else:\n                        result[key] = b[key]\n        return result\n\n    return merge(a, b)  # return the merged object\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_val = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                max_val = max(max_val, find_max_in_dict(value))\n            else:\n                max_val = max(max_val, value)\n        return max_val\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*' in the string\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0 and x % 11 == 0 and x % 13 == 0 and x % 17 == 0 and x % 19 == 0 and x % 23 == 0 and x % 29 == 0 and x % 31 == 0 and x % 37 == 0 and x % 41 == 0 and x % 43 == 0 and x % 47 == 0 and x % 53 == 0 and x % 59 == 0 and x % 61 == 0 and x % 67 == 0 and x % 71 == 0 and x % 73 == 0 and x % 79 == 0 and x % 83 == 0 and x % 89 == 0 and x % 97 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
