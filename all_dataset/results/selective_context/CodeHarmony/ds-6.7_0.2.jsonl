{"task_id": "valid/0", "completion": "\n    # Import necessary libraries\n    import pandas as pd\n    from sklearn.feature_extraction.text import CountVectorizer\n    from sklearn.naive_bayes import MultinomialNB\n    from sklearn.model_selection import train_test_split\n    from sklearn.metrics import accuracy_score\n\n    # Load the dataset\n    data = pd.read_csv('spam.csv', encoding='latin-1')\n    data = data.drop([\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis=1)\n    data = data.rename(columns={\"v1\":\"label\", \"v2\":\"text\"})\n\n    # Preprocessing\n    data['label_num'] = data.label.map({'ham':0, 'spam':1})\n    X = data.text\n    y = data.label_num\n\n    # Split the data\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n    # Vectorization\n    vectorizer = CountVectorizer()\n    X_train_dtm = vectorizer.fit_transform(X_train)\n    X_test_dtm = vectorizer.transform(X_test)\n\n    # Model\n    nb = MultinomialNB()\n    nb.fit(X_train_dtm, y_train)\n    y_pred_class = nb.predict(X_test_dtm)\n\n    # Evaluation\n    print(accuracy_score(y_test, y_pred_class))\n\n    # Prediction\n    text = [text]\n    text_dtm = vectorizer.transform(text)\n    pred = nb.predict(text_dtm)\n\n    if pred[0] == 0:\n        return 'ham'\n    else:\n        return 'spam'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Saxophone', 'Violin', 'Cello']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError as e:\n        raise ValueError(\"Invalid JSON string: {}\".format(e))\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(i) for i in str(n)) % 3 == 0:\n        return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return (n ** (1.0 / base))\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed_json = json.loads(json_str)\n        pprint.pprint(parsed_json)\n    except ValueError as e:\n        print(\"Invalid JSON: {}\".format(e))\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{' + key + '}}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%y')\n    result = date_object + timedelta(days=days)\n    return result.strftime('%y')\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove digits\n    text = ''.join([i for i in text if not i.isdigit()])\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n\ntext = \"Hello, World!! This is a test 123.\""}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    layer_sums = [sum(sum(layer) for layer in array)]\n    return layer_sums\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num\n\n    lower = num - 1\n    while not is_palindrome(lower):\n        lower -= 1\n\n    upper = num + 1\n    while not is_palindrome(upper):\n        upper += 1\n\n    if abs(num - lower) <= abs(num - upper):\n        return lower\n    else:\n        return upper\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n\n    if key in json_data:\n        return json_data[key] == value\n    else:\n        return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the buttons\n    button_table = []\n\n    # Iterate over the buttons in chunks of num_columns\n    for i in range(0, len(buttons), num_columns):\n        # Append the current chunk of buttons to the button_table\n        button_table.append(buttons[i:i+num_columns])\n\n    # Return the button_table\n    return button_table\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i + 1]):\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    sum = 0\n    for i in arr:\n        if isinstance(i, (int, float)):\n            sum += i\n        else:\n            raise ValueError(\"Array should only contain numerical values\")\n    return sum\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted([neighborhood['name'] for neighborhood in neighborhoods])\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = abs(arr[l] + arr[r])\n        if sum < min_sum:\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if arr[l] + arr[r] < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for i in p:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the vote counts\n    vote_counts = {}\n\n    # Iterate over the list of votes\n    for vote in votes:\n        # Extract the candidate name and the vote count\n        cand_name, vote_count = vote\n\n        # If the candidate is not in the dictionary, add them with their vote count\n        if cand_name not in vote_counts:\n            vote_counts[cand_name] = vote_count\n        # If the candidate is already in the dictionary, add the vote count to their existing count\n        else:\n            vote_counts[cand_name] += vote_count\n\n    # Calculate the total number of votes\n    total_votes = sum(vote_counts.values())\n\n    # Initialize an empty dictionary to store the percentage votes\n    percentage_votes = {}\n\n    # Iterate over the vote counts dictionary\n    for cand_name, vote_count in vote_counts.items():\n        # Calculate the percentage of votes for the candidate\n        percentage = (vote_count / total_votes) * 100\n\n        # Round the percentage to two decimal places\n        percentage = round(percentage, 2)\n\n        # Add the candidate and their percentage votes to the percentage votes dictionary\n        percentage_votes[cand_name] = percentage\n\n    # Return the percentage votes dictionary\n    return percentage_votes\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if \"-\" in date_string:\n            if len(date_string.split(\"-\")) != 3:\n                raise ValueError\n            day, month, year = map(int, date_string.split(\"-\"))\n            date = datetime(year, month, day)\n        else:\n            if len(date_string) != 6:\n                raise ValueError\n            day = int(date_string[:2])\n            month = int(date_string[2:4])\n            year = int(date_string[4:])\n            date = datetime(year, month, day)\n\n        return date.strftime(\"%B %d %Y\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MM-YY or DDMYY format.\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.bmp', '.jpeg']\n    if oldname.split('.')[-1] in allowed_extensions:\n        if newname.split('.')[-1] in allowed_extensions:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            if n.isdigit():\n                return int(n) % 2 == 0\n            else:\n                return False\n        elif isinstance(n, (int, float)):\n            return n % 2 == 0\n        else:\n            return False\n\n    def remove_uneven_from_list(lst):\n        return [remove_uneven_from_list(i) if isinstance(i, list) else i for i in lst if is_even(i)]\n\n    return remove_uneven_from_list(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data.append({\"generation\": generation, \"accuracy\": accs})\n    return histogram_data\n\n\nhistogram_data = []\ngeneration = 1\naccs = 0.98\n\nhistogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)"}
{"task_id": "valid/47", "completion": "\n    return re.match(r'^\\w{5}$', string) is not None\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \".join(classifier.split(\" :: \")[2:]) not in unique_languages:\n            unique_languages.add(\" :: \".join(classifier.split(\" :: \")[2:]))\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return [count_dict[num] for num in arr]\n\n"}
{"task_id": "valid/50", "completion": "\n    url_patterns = [\n        (r'^competitions/$', 'competitions_view'),\n        (r'^competitions/(?P<competition_id>\\d+)/$', 'competition_detail_view'),\n    ]\n\n    for pattern, view in url_patterns:\n        if re.match(pattern, url):\n            return view\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string_to_concat = \"Hello, \"\n    sentence = \"world!\"\n    concated_string = string_to_concat + sentence\n    return concated_string\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                try:\n                    sum_price += float(dict[key])\n                except ValueError:\n                    continue\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_view_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_path = file_path.split('/')\n        if dir_path[0] not in config_files:\n            config_files[dir_path[0]] = [file_path]\n        else:\n            config_files[dir_files[0]].append(file_path)\n    return config_files\n\n\nfile_paths = ['/etc/nginx/nginx.conf', '/etc/nginx/sites-available/default', '/etc/nginx/sites-enabled/default', '/var/www/html/index.html']"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n\n    if array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [x + 1 for x in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i ** 0.5 == int(i ** 0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello, \"\n    phrase = \"World!\"\n    conc_string = f\"{string}{phrase}\"\n    return conc_string\n\n"}
{"task_id": "valid/70", "completion": "\n    special_characters = re.compile('[^A-Za-z0-9 ]')\n    result = []\n    for string in strings:\n        if not special_characters.search(string):\n            result.append(string.upper())\n    return result\n\n\nstrings = [\"Hello\", \"world\", \"@test\", \"123\", \"$test\", \"another_test\"]"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n            else:\n                break\n        else:\n            break\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the stock and prices\n    stock = {\"Coke\": 1.5, \"Sprite\": 1.5, \"Fanta\": 1.5, \"Water\": 1.0, \"Juice\": 2.0}\n    change = {1: 0, 0.5: 0, 0.2: 0, 0.1: 0, 0.05: 0, 0.02: 0, 0.01: 0}\n\n    # Check if item is in stock\n    if item in stock:\n        # Check if enough money was inserted\n        if money_inserted >= stock[item]:\n            # Calculate change\n            change_to_return = money_inserted - stock[item]\n            # Update stock\n            stock[item] = 0\n            # Calculate change\n            while change_to_return > 0:\n                if change_to_return >= 1 and 1 in change:\n                    change_to_return -= 1\n                    change[1] += 1\n                elif change_to_return >= 0.5 and 0.5 in change:\n                    change_to_return -= 0.5\n                    change[0.5] += 1\n                elif change_to_return >= 0.2 and 0.2 in change:\n                    change_to_return -= 0.2\n                    change[0.2] += 1\n                elif change_to_return >= 0.1 and 0.1 in change:\n                    change_to_return -= 0.1\n                    change[0.1] += 1\n                elif change_to_return >= 0.05 and 0.05 in change:\n                    change_to_return -= 0.05\n                    change[0.05] += 1\n                elif change_to_return >= 0.02 and 0.02 in change:\n                    change_to_return -= 0.02\n                    change[0.02] += 1\n                elif change_to_return >= 0.01:\n                    change_to_return -= 0.01\n                    change[0.01] += 1\n\n            return f\"Here is your {item} and your"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n\n    Design a function assigns a specific value a variable and valid it.\n    \"\"\"\n    # Assign a value to a variable\n    my_var = 10\n\n    # Validate the value\n    if my_var > 0:\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    return ''.join(random.sample(word, len(word)))\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != result[-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\w+', text)\n    return tokens\n\ntext = \"This is a sample text for tokenization\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7\"\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    minimum = min(divisible_numbers)\n    maximum = max(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n    return f\"Average: {average}\\nMinimum: {minimum}\\nMaximum: {maximum}\\nOccurrences: {occurrences}\"\n\n\nnumbers = [3, 7, 10, 21, 21, 21, 14, 28]"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    highest_frequency = max(word_count.values())\n    for word, count in word_count.items():\n        if count == highest_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(100):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty\")\n    min_value = float('inf')\n    max_value = float('-inf')\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"The time series should only contain numeric values\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd if count_odd != 0 else 0\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    lst.sort(reverse=True)\n    if n <= len(lst):\n        return lst[n-1]\n    else:\n        return None\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}"}
{"task_id": "valid/97", "completion": "\n\n    **Discord Music Bot**\n\n    **Features**\n    - Play music from YouTube, SoundCloud, and more\n    - Manage and control music playback with commands\n    - Server-wide settings for music playback\n    - Personal settings for music playback\n    - Help command to provide information about each command\n\n    **Commands**\n    {mapping}\n\n    **Web App**\n    - Manage personal play and server settings\n    - View server statistics\n    - Invite the bot to your server\n\n    **Support**\n    - If you have any questions or need help, feel free to ask in our support server.\n    \"\"\"\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names if '.' in file_name)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age <= 12:\n        return \"Child\"\n    elif 13 <= age <= 19:\n        return \"Teen\"\n    elif 20 <= age <= 59:\n        return \"Adult\"\n    else:\n        return \"Senior Citizen\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade > 100 or numerical_grade < 0:\n        return \"Invalid numerical grade\"\n\n    letter_grade = 'A' if numerical_grade >= 90 else \\\n                   'B' if numerical_grade >= 80 else \\\n                   'C' if numerical_grade >= 70 else \\\n                   'D' if numerical_grade >= 60 else 'F'\n\n    gpa = 4.0 if letter_grade == 'A' else \\\n          3.0 if letter_grade == 'B' else \\\n          2.0 if letter_grade == 'C' else \\\n          1.0 if letter_grade == 'D' else 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n\n"}
{"task_id": "valid/104", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        if arr[i] in s:\n            return True\n        s.add(arr[i])\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    from operator import itemgetter\n\n    def extract_version_number(version):\n        return int(version.split('_')[0])\n\n    def extract_date(version):\n        return version.split('_')[2:]\n\n    def compare_dates(date1, date2):\n        return date1 > date2\n\n    def compare_version_numbers(version1, version2):\n        return version1 > version2\n\n    latest_versions = {}\n\n    for dependency in dependencies:\n        package, version = itemgetter(0, 1)(dependency)\n        version_number = extract_version_number(version)\n        date = extract_date(version)\n\n        if package in latest_versions:\n            latest_version_number, latest_date = itemgetter(0, 1)(latest_versions[package])\n\n            if compare_version_numbers(version_number, latest_version_number) and compare_dates(date, latest_date):\n                latest_versions[package] = (version_number, date)\n        else:\n            latest_versions[package] = (version_number, date)\n\n    return [(package, f'000{version_number}_auto_{\"_\".join(date)}') for package, (version_number, date) in latest_versions.items()]\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action in causes_dict:\n            causes_dict[action].append(result)\n        else:\n            causes_cause = [result]\n            causes_dict[action] = causes_cause\n    return causes_dict\n\n\ncauses = [\"kill zombie\", \"shoot arrow\", \"stab dragon\", \"shoot arrow\", \"kill zombie\", \"kill dragon\"]"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be of type list and integer respectively\")\n\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n-1, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n\noptions = [(\"-v\", \"Verbose mode\"), (\"-o FILE\", \"Output to FILE\"), (\"-d\", \"Run in debug mode\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n\n\nVal = [1, 2, 3, 4, 5, 1, 2, 1, 3, 1, 4, 1, 5, 1]"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(c in vowels for c in s)\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\nsequence = \"Please find the number occurrences this string\"\nsubsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero\"\n    else:\n        return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd_numbers = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum_odd_numbers += i\n    return sum_odd_numbers\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    count = 0\n    for char in string.lower():\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    energy_threshold = 0.5\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        if energy > energy_threshold:\n            num_electrons += 1\n\n    # Adjust number of electrons based on doping levels\n    num_electrons += ados * dope\n\n    # Adjust number of electrons based on density of states (DOS)\n    num_electrons += len(grid_energies) / dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    temp = [0] * n\n    small, large = 0, n - 1\n    flag = True\n    for i in range(n):\n        if flag:\n            temp[i] = arr[large]\n            large -= 1\n        else:\n            temp[i] = arr[small]\n            small += 1\n        flag = bool(1 - flag)\n    for i in range(n - 1):\n        arr[i] = abs(temp[i] - temp[i + 1])\n    arr[-1] = abs(temp[-1] - temp[0])\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '{': '}', '[': ']'}\n    for char in string:\n        if char in parentheses.keys():\n            stack.append(char)\n        elif char in parentheses.values():\n            if not stack or parentheses[stack.pop()] != char:\n                return False\n    return not stack\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n\n    # Calculate the forecast period\n    forecast_period = math.ceil(0.01 * dataset_length)\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize carry\n    carry = 0\n    # Initialize result\n    result = ''\n    # Iterate over the string in reverse order\n    for digit in n_str[::-1]:\n        # Convert digit to integer and double it\n        temp = int(digit)*2 + carry\n        # If the result is greater than 9, set carry to 1 and append the remainder to the result\n        if temp > 9:\n            carry = 1\n            result += str(temp % 10)\n        # If the result is not greater than 9, set carry to 0 and append the result to the result\n        else:\n            carry = 0\n            result += str(temp)\n    # If there is a carry left, append it to the result\n    if carry:\n        result += str(carry)\n    # Return the reversed result\n    return result[::-1]\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (-1.0, -1.0, -1.0),\n        \"preset3\": (2.0, 2.0, 2.0),\n        \"preset4\": (-2.0, -2.0, -2.0),\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Allowing multiple answers\")\n    else:\n        print(\"Not allowing multiple answers\")\n\n    if zoom_level > 0:\n        print(f\"Zoom level is set to {zoom_level}\")\n    else:\n        print(\"Zoom level is not set\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    def is_valid_key(key):\n        return all(char.isalpha() for char in key)\n\n    def merge_dicts(dict1, dict2):\n        merged = {**dict1}\n        for key, value in dict2.items():\n            if key in merged and isinstance(value, dict) and isinstance(merged[key], dict):\n                merged[key] = merge_dicts(merged[key], value)\n            else:\n                merged[key] = value\n        return merged\n\n    merged = merge_dicts(a, b)\n\n    return {k: v for k, v in sorted(merged.items()) if is_valid_key(k)}\n\n\na = {'a 1': 1, 'b 2': 2, 'nested': {'x 5': 5, 'y': 7}, 'z': 4}\nb = {'bc': 3, 'd': 4, 'nested': {'y': 6, 'z': 8}, 'x 5': 9}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Error: The dictionary is empty\"\n    except TypeError:\n        return \"Error: The input is not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return sqrt(x) == int(sqrt(x))\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
