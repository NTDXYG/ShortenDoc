{"task_id": "valid/0", "completion": "\n    # TODO: Implement this function\n    pass\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drum', 'Flute', 'Saxophone', 'Trumpet', 'Violin', 'Cello']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(i) for i in str(n)) % 3 == 0:\n        return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON: {}\".format(e))\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{{' + key + '}}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y%m%d')\n    new_date_object = date_object + timedelta(days=days)\n    return new_date_object.strftime('%Y%m%d')\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10:\n        return \"Text is too long\"\n    else:\n        return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n\n"}
{"task_id": "valid/15", "completion": "\n    layer_sums = [sum(sum(layer) for layer in array)]\n    return layer_sums\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('// vim:'):\n            line = line.replace('// vim:', '').strip()\n            for setting in line.split(','):\n                key, value = setting.split('=')\n                settings[key.strip()] = value.strip()\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num\n\n    lower = num - 1\n    while not is_palindrome(lower):\n        lower -= 1\n\n    upper = num + 1\n    while not is_palindrome(upper):\n        upper += 1\n\n    if abs(num - lower) <= abs(num - upper):\n        return lower\n    else:\n        return upper\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sum_diagonal = 0\n    is_square = rows == cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                sum_diagonal += matrix[i][j]\n\n    return rows, cols, sum_diagonal, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data:\n        return json_data[key] == value\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        table.append(buttons[i:i+num_columns])\n    return table\n\n\nbuttons = ['button1', 'button2', 'button3', 'button4', 'button5', 'button6', 'button7', 'button8', 'button9', 'button10', 'button11', 'button12']\nnum_columns = 4"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] in s and alphabet[i + 1] in s:\n            if s.index(alphabet[i + 1]) < s.index(alphabet[i]):\n                return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    sum = 0\n    for i in arr:\n        if isinstance(i, (int, float)):\n            sum += i\n        else:\n            raise ValueError(\"Invalid value in array: {}\".format(i))\n    return sum\n"}
{"task_id": "valid/37", "completion": "\n    data = json.loads(json_data)\n    data.sort(key=lambda x: x['name'])\n    return data\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n\narr = [1, 60, -10, 70, -80, 85]\nn = len(arr)"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Calculate the total number of votes\n    total_votes = sum(votes)\n\n    # Calculate the results for each candidate\n    for candidate, vote_count in votes:\n        percentage_votes = round((vote_count / total_votes) * 100, 2)\n        results[candidate] = {\"votes\": vote_count, \"percentage\": percentage_votes}\n\n    return results\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if len(date_string) == 5:\n            day, month, year = int(date_string[:2]), date_string[2:4], int(date_string[4:])\n        elif len(date_string) == 7:\n            day, month, year = int(date_string[:2]), int(date_string[2:4]), int(date_string[4:])\n            if month > 12:\n                raise ValueError\n        else:\n            raise ValueError\n\n        date_obj = datetime(year, month, day)\n        return date_obj.strftime('%B %d %Y')\n\n    except ValueError:\n        return \"Invalid date\"\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.bmp', '.jpeg']\n    if oldname.split('.')[-1] not in allowed_extensions:\n        return False\n    if newname.split('.')[-1] not in allowed_extensions:\n        return False\n    if oldname == newname:\n        return False\n    if allowed_type not in newname:\n        return False\n    return True\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        try:\n            return int(n) % 2 == 0\n        except ValueError:\n            return False\n\n    def remove_uneven_from_tuple(tup):\n        return tuple(x for x in tup if isinstance(x, (int, str)) and (isinstance(x, str) or is_even(x)))\n\n    if isinstance(lst, tuple):\n        return remove_uneven_from_tuple(lst)\n    else:\n        return [remove_uneven_from_tuple(x) if isinstance(x, tuple) else x for x in lst]\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    for acc in accs:\n        histogram_data.append({\"generation\": generation, \"accuracy\": acc})\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.match(r'^\\w{5}$', string) is not None\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    url_to_view_map = {\n        r'^$': 'home',\n        r'^videos/$': 'videos',\n        r'^videos/(?P<video_id>\\d+)/$': 'video_detail',\n        r'^videos/add/$': 'video_add',\n        r'^videos/(?P<video_id>\\d+)/edit/$': 'video_edit',\n        r'^videos/(?P<video_id>\\d+)/delete/$': 'video_delete',\n        r'^videos/(?P<video_id>\\d+)/comment/$': 'video_comment',\n        r'^videos/(?P<video_id>\\d+)/rate/$': 'video_rate',\n        r'^users/$': 'users',\n        r'^users/add/$': 'user_add',\n        r'^users/(?P<user_id>\\d+)/$': 'user_detail',\n        r'^users/(?P<user_id>\\d+)/edit/$': 'user_edit',\n        r'^users/(?P<user_id>\\d+)/delete/$': 'user_delete',\n    }\n\n    for pattern, view_name in url_to_view_map.items():\n        if re.match(pattern, url):\n            return view_name\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string1 = \"Hello\"\n    string2 = \"World\"\n    sentence = \"{} {}\".format(string1, string2)\n    return sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                sum_price += dict[key]\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list1 = [value for value in list1 if value not in intersection]\n    return intersection, list1\n\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(f):\n        def wrapper(*args, **kwargs):\n            if request_method == 'GET':\n                return f(*args, **kwargs)\n            else:\n                return \"Unsupported request method\"\n        return wrapper\n    return decorator\n\n@route_request('GET')"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n\n    for file_path in file_paths:\n        dir_name = os.path.dirname(file_path)\n\n        if dir_name not in config_files:\n            config_files[dir_name] = []\n\n        config_files[dir_name].append(file_path)\n\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    # convert time to seconds\n    timeStart_seconds = timeStart % 100 * 60 + timeStart // 100 * 3600\n    timeEnd_seconds = timeEnd % 100 * 60 + timeEnd // 100 * 3600\n\n    # calculate time difference\n    timeDifference_seconds = timeEnd_seconds - timeStart_seconds\n\n    # convert seconds back to original format\n    hours = timeDifference_seconds // 3600\n    minutes = (timeDifference_seconds % 3600) // 60\n    seconds = timeDifference_seconds % 60\n\n    return hours * 100 + minutes\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n\n    if array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3}"}
{"task_id": "valid/69", "completion": "\n    string1 = \"Hello\"\n    string2 = \"World\"\n    phrase = f\"{string1} {string2}\"\n    return phrase\n\n"}
{"task_id": "valid/70", "completion": "\n    special_characters = re.compile('[^A-Za-z0-9 ]')\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = special_characters.sub('', string)\n        # Capitalize the first letter of each word\n        string = ' '.join([word.capitalize() for word in string.split(' ')])\n        result.append(string)\n    return result\n\n\nstrings = ['hello world', 'HELLO WORLD', 'hElLO wOrLd', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456', '123456',"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    end_index = 0\n    bold_texts = []\n\n    while start_index < len(html_code):\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index + len(start_tag))\n        if end_index == -1:\n            break\n        bold_texts.append(html_code[start_index + len(start_tag):end_index])\n        start_index = end_index + len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the cost of each item\n    item_cost = {\n        'cola': 1.00,\n        'chips': 0.50,\n        'candy': 0.65\n    }\n\n    # Define the stock of each item\n    item_stock = {\n        'cola': 10,\n        'chips': 10,\n        'candy': 10\n    }\n\n    # Check if the item is in stock\n    if item_stock[item] <= 0:\n        return 'Item out of stock'\n\n    # Check if the money inserted is enough\n    if money_inserted < item_cost[item]:\n        return 'Not enough money'\n\n    # Calculate the change\n    change = money_inserted - item_cost[item]\n\n    # Update the stock\n    item_stock[item] -= 1\n\n    return change\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    non_zero_indices = [i for i, x in enumerate(vector) if x != 0]\n    return non_zero_indices\n\n"}
{"task_id": "valid/78", "completion": "\n\n    Design a function assigns specific variable and valid it.\n    \"\"\"\n    # Assign variables\n    a = 10\n    b = 20\n    c = 30\n\n    # Validate variables\n    if a < b and b < c:\n        print(\"Variables are assigned and validated successfully.\")\n    else:\n        print(\"Variables are not assigned or validated successfully.\")\n\n\nassign_and_validate()\n\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != result[-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\w+', text)\n    return tokens\n\ntext = \"This is a sample text for tokenization\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n\n    print(f\"Average: {average}\")\n    print(f\"Max: {max_value}\")\n    print(f\"Min: {min_value}\")\n    print(\"Occurrences:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n\n\nnumbers = [3, 7, 10, 21, 28, 35, 70, 140]\nfind_divisible_numbers(numbers)\n<jupyter_output>\nAverage: 105.0\nMax: 140\nMin: 21\nOccurrences:\n21: 1\n35: 1\n70: 1\n140: 1\n<jupyter_text>\nThe function find_divisible_numbers takes a list of integers as input. It first creates a list of numbers that are divisible by both 3 and 7 using a list comprehension. It then calculates the average of these numbers, finds the maximum and minimum values, and creates a set of unique numbers. It then creates a dictionary where the keys are the unique numbers and the values are the number of occurrences of each number in the list. Finally, it prints the average, maximum, minimum, and occurrences.\n<jupyter_code>\nnumbers = [3, 7, 10, 21, 28, 35, 70, 140]\nfind_divisible_numbers(numbers)\n<jupyter_output>\nAverage: 105.0\nMax: 14"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(100):\n        euler_number += (1 / math.factorial(i))\n    euler_number = round(euler_number, decimal_places)\n    return euler_number\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    min_value = float('inf')\n    max_value = float('-inf')\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains nonnumeric value\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd if count_odd != 0 else 0\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n-1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n"}
{"task_id": "valid/97", "completion": "\n    description = \"**Discord Music Bot**\\n\\n\"\n    description += \"**Features:**\\n\"\n    for command, info in mapping.items():\n        description += f\"**{command}**: {info}\\n\"\n    description += \"\\n**Commands:**\\n\"\n    description += \"`help`: Provides information about the bot's features and commands.\\n\"\n    description += \"`play`: Plays a song from YouTube or SoundCloud.\\n\"\n    description += \"`pause`: Pauses the current song.\\n\"\n    description += \"`resume`: Resumes the current song.\\n\"\n    description += \"`stop`: Stops the current song and clears the queue.\\n\"\n    description += \"`skip`: Skips the current song.\\n\"\n    description += \"`queue`: Shows the current queue of songs.\\n\"\n    description += \"`volume`: Changes the volume of the bot.\\n\"\n    description += \"`np`: Shows the currently playing song.\\n\"\n    description += \"`leave`: Makes the bot leave the voice channel.\\n\"\n    description += \"`join`: Makes the bot join the voice channel.\\n\"\n    description += \"`server`: Shows the server settings.\\n\"\n    description += \"`settings`: Manages the server settings.\\n\"\n    return description\n\n\nmapping = {\n    \"help\": \"Provides information about the bot's features and commands.\",\n    \"play\": \"Plays a song from YouTube or SoundCloud.\",\n    \"pause\": \"Pauses the current song.\",\n    \"resume\": \"Resumes the current song.\",\n    \"stop\": \"Stops the current song and clears the queue.\",\n    \"skip\": \"Skips the current song.\",\n    \"queue\": \"Shows the current queue of songs.\",\n    \"volume\": \"Changes the volume of the bot.\",\n    \"np\": \"Shows the currently playing song.\",\n    \"leave\": \"Makes the bot leave the voice channel.\",\n    \"join\": \"Makes the bot join the voice channel.\",\n    \"server\": \"Shows the server settings.\",\n    \"settings\": \"Manages the server settings.\","}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        res = ''\n        while n:\n            n, r = divmod(n, 3)\n            res = str(r) + res\n        return res\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Young Adult\"\n    elif 30 <= age < 50:\n        return \"Adult\"\n    elif 50 <= age < 65:\n        return \"Mid-Age Adult\"\n    else:\n        return \"Senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowels_dict = {}\n\n    for pal in palindrome_tuples:\n        count = 0\n        for letter in pal:\n            if letter in vowels:\n                count += 1\n        vowels_dict[pal] = count\n\n    return vowels_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    # Your code here\n    s = s.replace(' ', '')\n    s = s.lower()\n    return s\n\n"}
{"task_id": "valid/105", "completion": "\n    sum_set = set()\n    for num in arr:\n        if num in sum_set:\n            return True\n        sum_set.add(-num)\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    import re\n\n    def extract_version(version):\n        match = re.search(r'\\d+', version)\n        return int(match.group())\n\n    latest_versions = {}\n\n    for dependency in dependencies:\n        package, version = dependency\n        version_number = extract_version(version)\n\n        if package not in latest_versions or version_number > extract_version(latest_versions[package][1]):\n            latest_versions[package] = (version_number, version)\n\n    return list(latest_versions.values())\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in causes_dict:\n            causes_dict[action] = []\n        causes_dict[action].append(result)\n    return causes_dict\n\n\ncauses = [\"killed by fire\", \"drowned by water\", \"stabbed by a knife\", \"crushed by a car\", \"poisoned by a dagger\", \"bitten by a bee\", \"burned by a match\", \"run over by a truck\"]"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Both inputs should be list and integer respectively\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        print(\"Please provide a positive integer\")\n        return\n    if current_num == n:\n        return\n    print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    str_num = str(num)\n    first_digit = str_num[0]\n    return all(digit == first_digit for digit in str_num)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = 'aeiouAEIOU'\n    if not s:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_text = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_text += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_text\n\n\noptions = [(\"-h\", \"Show this help message\"), (\"-v\", \"Verbose mode\"), (\"-o FILE\", \"Output to FILE\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\n\nVal = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(c in vowels for c in s)\n\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\n\nsequence = \"Please find number occurrences string\"\nsubsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero\"\n    else:\n        return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    num_doping_levels = 0\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        num_electrons += energy / 1000\n\n    # Adjust number of doping levels\n    for ado in ados:\n        num_doping_levels += ado * 1000\n\n    # Calculate density of states (DOS)\n    dos_grid = [0] * dos_grid_size\n    for i in range(len(grid_energies)):\n        dos_grid[i % dos_grid_size] += grid_energies[i] * 1000\n\n    # Return the results\n    return num_electrons, num_doping_levels, dos_grid\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    temp = [0] * n\n    small, large = 0, n - 1\n    flag = True\n    for i in range(n):\n        if flag:\n            temp[i] = arr[large]\n            large -= 1\n        else:\n            temp[i] = arr[small]\n            small += 1\n        flag = bool(1 - flag)\n    for i in range(n - 1):\n        arr[i] = abs(temp[i] - temp[i + 1])\n    arr[-1] = abs(temp[-1] - temp[0])\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '{': '}', '[': ']'}\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n\nfruit_list = ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    return f\"python manage.py makemigrations {app_name} --alter field {model_name}.{field_name}\"\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    return math.ceil(len(df) * 0.01)\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        temp = int(n_str[i]) * 2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        result.append(str(temp))\n    if carry:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (-1.0, -1.0, -1.0),\n        \"preset3\": (0.5, 0.5, 0.5),\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Allow multiple answers\")\n    else:\n        print(\"Disallow multiple answers\")\n\n    if zoom_level > 0:\n        print(f\"Zoom level is set to {zoom_level}\")\n    else:\n        print(\"Zoom level is not set\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in a.keys():\n        if isinstance(a[key], dict):\n            if isinstance(b[key], dict):\n                merged[key] = merge_objects(a[key], b[key])\n            else:\n                merged[key] = a[key]\n        else:\n            merged[key] = a[key]\n\n    for key in b.keys():\n        if isinstance(b[key], dict):\n            if key not in a:\n                merged[key] = b[key]\n        else:\n            if key not in a:\n                merged[key] = b[key]\n\n    return dict(sorted(merged.items()))\n\n\na = {'a': 1, 'b': {'x': 5, 'y': 6}, 'c': 3, 'd': 7}\nb = {'a': 2, 'b': {'x': 10, 'z': 8}, 'c': 5, 'e': 9}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Error: Dictionary is empty\"\n    except TypeError:\n        return \"Error: Invalid input. Please provide a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and gcd(x, 10) == 1 and sqrt(x) % 1 == 0\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
