{"task_id": "valid/0", "completion": "\n    # Import necessary libraries\n    import pandas as pd\n    from sklearn.feature_extraction.text import TfidfVectorizer\n    from sklearn.naive_bayes import MultinomialNB\n    from sklearn.pipeline import make_pipeline\n\n    # Load the data\n    data = pd.read_csv('data.csv')\n\n    # Create a model based on Multinomial Naive Bayes\n    model = make_pipeline(TfidfVectorizer(), MultinomialNB())\n\n    # Train the model with the data\n    model.fit(data['text'], data['category'])\n\n    # Predict the category of the input text\n    category = model.predict([text])[0]\n\n    return category\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drum', 'Flute', 'Saxophone', 'Trumpet', 'Violin', 'Cello']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(i) for i in str(n)) % 3 == 0:\n        return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(e)\n\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npretty_print_json(json_str)\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{' + key + '}}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%y')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%y')\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10:\n        return \"Text is too long\"\n    else:\n        return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove leading and trailing spaces\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n"}
{"task_id": "valid/15", "completion": "\n    sum_list = [sum(i) for i in array]\n    return sum_list\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('// vim:'):\n            line = line.replace('// vim:', '')\n            options = line.split(' ')\n            for option in options:\n                if '=' in option:\n                    key, value = option.split('=')\n                    settings[key] = value\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split(' ')\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    else:\n        return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num\n\n    lower = num - 1\n    while not is_palindrome(lower):\n        lower -= 1\n\n    upper = num + 1\n    while not is_palindrome(upper):\n        upper += 1\n\n    if abs(num - lower) <= abs(num - upper):\n        return lower\n    else:\n        return upper\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    # Get the number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Initialize sum of diagonal elements\n    sum_diagonal = 0\n\n    # Check if matrix is square\n    is_square = num_rows == num_cols\n\n    # Calculate sum of diagonal elements\n    for i in range(num_rows):\n        sum_diagonal += matrix[i][i]\n\n    return num_rows, num_cols, sum_diagonal, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data:\n        return json_data[key] == value\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the HTML code for each row\n    rows = []\n\n    # Loop through the buttons in chunks of num_columns\n    for i in range(0, len(buttons), num_columns):\n        # Initialize an empty list to store the HTML code for each cell in the row\n        cells = []\n\n        # Loop through the buttons in the current chunk\n        for button in buttons[i:i+num_columns]:\n            # Generate the HTML code for the button and add it to the cells list\n            cells.append(f'<button onclick=\"{button[1]}\">{button[0]}</button>')\n\n        # Join the cells list into a single string, separated by spaces, and add it to the rows list\n        rows.append(' '.join(cells))\n\n    # Join the rows list into a single string, separated by line breaks, and return the result\n    return '<br>'.join(rows)\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] in s and alphabet[i + 1] in s:\n            continue\n        else:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    words = words.split()\n    for i in range(len(words)):\n        words[i] = words[i][:-1] + words[i][-1].upper()\n    return words\n"}
{"task_id": "valid/36", "completion": "\n    sum = 0\n    for i in arr:\n        if isinstance(i, (int, float)):\n            sum += i\n        else:\n            raise ValueError(\"Array should only contain numerical values\")\n    return sum\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted([neighborhood['name'] for neighborhood in neighborhoods])\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n\narr = [1, 60, -10, 70, -80, 85]\nn = len(arr)"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the vote counts\n    vote_counts = {}\n\n    # Iterate over the list of votes\n    for vote in votes:\n        # If the candidate is not in the dictionary, add them with a vote count of 1\n        if vote not in vote_counts:\n            vote_counts[vote] = 1\n        # If the candidate is already in the dictionary, increment their vote count by 1\n        else:\n            vote_counts[vote] += 1\n\n    # Calculate the total number of votes\n    total_votes = sum(vote_counts.values())\n\n    # Initialize an empty dictionary to store the percentage of votes for each candidate\n    vote_percentages = {}\n\n    # Iterate over the vote counts dictionary\n    for candidate, count in vote_counts.items():\n        # Calculate the percentage of votes for the candidate and round to two decimal places\n        vote_percentage = round(count / total_votes * 100, 2)\n        # Add the candidate and their percentage of votes to the vote percentages dictionary\n        vote_percentages[candidate] = vote_percentage\n\n    # Return the vote counts and vote percentages dictionaries\n    return vote_counts, vote_percentages\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if len(date_string) == 8:\n            date = datetime.strptime(date_string, \"%d-%m%y\")\n        elif len(date_string) == 7:\n            date = datetime.strptime(date_string, \"%d%m%y\")\n        else:\n            raise ValueError\n\n        return date.strftime(\"%B %d %Y\")\n    except ValueError:\n        return \"Invalid date\"\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.bmp', '.jpeg']\n    if oldname.split('.')[-1] in allowed_extensions:\n        if newname.split('.')[-1] in allowed_extensions:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def process(n):\n        if isinstance(n, tuple):\n            return remove_uneven(n)\n        else:\n            return n if is_numeric(n) and is_even(n) else None\n\n    return tuple(filter(None, map(process, lst)))\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data[\"accuracy\"].append(accs)\n    histogram_data[\"generation\"].append(generation)\n    return histogram_data\n\n\nhistogram_data = {\"accuracy\": [], \"generation\": []}\ngeneration = 10\naccs = 0.95\n"}
{"task_id": "valid/47", "completion": "\n    return re.match(r'^\\w{5}$', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \".join(classifier.split(\" :: \")[:2]) == \"Programming Language\":\n            unique_languages.add(classifier.split(\" :: \")[-1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    url_to_view_map = {\n        r'^$': 'home',\n        r'^videos/$': 'videos',\n    }\n\n    for pattern, view_name in url_to_view_map.items():\n        if re.match(pattern, url):\n            return view_name\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello, \"\n    sentence = \"world!\"\n    conc_string = string + sentence\n    return conc_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict.keys():\n            if \"price\" in key:\n                try:\n                    sum_price += float(dict[key])\n                except ValueError:\n                    continue\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4, 5]"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_advisor_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        dir_name = os.path.dirname(file_path)\n        if dir_name not in config_files:\n            config_files[dir_name] = []\n        config_files[dir_name].append(file_path)\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n\n    if array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \"World\"\n    conc = f\"{string} {phrase}\"\n    return conc\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'[^A-Za-z0-9 ]+', '', string)\n        # Capitalize the first letter of each word\n        string = ' '.join(word[0].upper() + word[1:] for word in string.split())\n        result.append(string)\n    return result\n\nstrings = [\"hello world\", \"HELLO WORLD\", \"hElLO wOrLd\", \"123456\", \"123456\", \"@hello world\", \"hello@world\", \"hello_world\", \"hello-world\", \"hello world123\", \"hello.world\", \"hello world!\"]"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        'cola': 1.00,\n        'chips': 0.50,\n        'candy': 0.65\n    }\n\n    # Define the stock of each item\n    stock = {\n        'cola': 10,\n        'chips': 10,\n        'candy': 10\n    }\n\n    # Check if the item is in the list\n    if item not in items:\n        return 'Item not available'\n\n    # Check if the money inserted is enough\n    if money_inserted < items[item]:\n        return 'Insufficient money'\n\n    # Check if the item is in stock\n    if stock[item] <= 0:\n        return 'Item out of stock'\n\n    # Calculate the change\n    change = money_inserted - items[item]\n\n    # Update the stock\n    stock[item] -= 1\n\n    return f'Enjoy your {item} and your change is ${change:.2f}'\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n\n    Design a function assigns specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = 10\n\n    # Validate the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function assigns specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = [1, 2, 3, 4, 5]\n\n    # Validate the variable\n    if isinstance(my_var, list):\n        print(\"The variable is a list.\")\n    else:\n        print(\"The variable is not a list.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function assigns specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n    # Validate the variable\n    if isinstance(my_var, dict):\n        print(\"The variable is a dictionary.\")\n    else:\n        print(\"The variable is not a dictionary.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function assigns specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = (1, 2, 3, 4, 5)\n\n    # Validate the variable\n    if isinstance(my_var, tuple):\n        print(\"The variable is a tuple.\")\n    else:\n        print(\"The variable is not a tuple.\")\n\nassign_and_validate()def assign_and_validate():\n"}
{"task_id": "valid/79", "completion": "\n    return ''.join(random.sample(word, len(word)))\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != merged_arr[-1]:\n            merged_arr.append(arr[i])\n\n    return merged_arr\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\w+', text.lower())\n    return tokens\n\ntext = \"This is a sample text for tokenization\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7\"\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    minimum = min(divisible_numbers)\n    maximum = max(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n    return f\"Average: {average}\\nMinimum: {minimum}\\nMaximum: {maximum}\\nOccurrences: {occurrences}\"\n\n\nnumbers = [3, 7, 10, 21, 21, 21, 14, 28]"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(100000):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty\")\n    min_value = float('inf')\n    max_value = float('-inf')\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"The time series contains nonnumeric values\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    avg_odd = sum_odd / count_odd if count_odd != 0 else 0\n    return sum_odd, avg_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}\n"}
{"task_id": "valid/97", "completion": "\n    description = \"**Discord Music Bot**\\n\\n\"\n    description += \"This bot is designed to manage and play music in a Discord server. It provides the following features:\\n\\n\"\n\n    for command, info in mapping.items():\n        description += f\"**{command}** - {info['description']}\\n\"\n        description += f\"Usage: `{info['usage']}`\\n\\n\"\n\n    description += \"For more information on each command, type `.help <command>`\"\n\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"kid\"\n    elif 18 <= age < 30:\n        return \"young adult\"\n    elif 30 <= age < 50:\n        return \"adult\"\n    elif 50 <= age < 70:\n        return \"middle-aged\"\n    else:\n        return \"senior\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n\nnumerical_grade = int(input(\"Enter numerical grade: \"))\nletter_grade, gpa = calculate_grade_and_gpa(numerical_grade)"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        count = 0\n        for letter in palindrome:\n            if letter in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n\n    return palindrome_dict\n\n\npalindromes = ('level', 'radar', 'deed', 'hello', 'python')"}
{"task_id": "valid/104", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        if arr[i] in s:\n            return True\n        s.add(arr[i])\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    from collections import defaultdict\n\n    versions = defaultdict(list)\n    for dependency in dependencies:\n        package, version = dependency\n        version_number = int(version.split('_')[0])\n        versions[package].append(version_number)\n\n    latest_versions = {}\n    for package, version_numbers in versions.items():\n        latest_version_number = max(version_numbers)\n        latest_version = f'000{latest_version_number}_auto{latest_version_number:04}'\n        latest_versions[package] = latest_version\n\n    return latest_versions\n\n\ndependencies = [('package1', '0001_auto20200101_12'),\n                ('package1', '0002_auto20200102_13'),\n                ('package2', '0001_auto20200101_12'),\n                ('package1', '0003_auto20200103_14'),\n                ('package2', '0002_auto20200102_13')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in causes_dict:\n            causes_dict[action] = []\n        causes_dict[action].append(result)\n    return causes_dict\n\n\ncauses = [\"kill zombie\", \"shoot gun\", \"drive car\", \"build bunker\", \"burn fire\", \"drive car\", \"kill zombie\", \"build bunker\", \"shoot gun\"]"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be of type list and integer respectively\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        print(\"Please enter a positive integer\")\n        return\n    if current_num == n:\n        return\n    print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    str_num = str(num)\n    first_digit = str_num[0]\n    return all(digit == first_digit for digit in str_num)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n\noptions = [(\"-v\", \"Verbose mode\"), (\"-o FILE\", \"Output to FILE\"), (\"-d\", \"Run in debug mode\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return set(s.lower()).issubset(vowels)\n\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\nsequence = \"Please find number occurrences this string\"\nsubsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    # Your code here\n    return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd_numbers = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum_odd_numbers += i\n    return sum_odd_numbers\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    num_doping_levels = 0\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        num_electrons += energy / 1000\n\n    # Adjust number of doping levels\n    for ado in ados:\n        num_doping_levels += ado * 1000\n\n    # Calculate density of states (DOS)\n    dos_grid = [0] * dos_grid_size\n    for i in range(len(grid_energies)):\n        dos_grid[i % dos_grid_size] += grid_energies[i]\n\n    # Calculate total number of electrons\n    total_electrons = num_electrons + num_doping_levels\n\n    return total_electrons, dos_grid\n\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    i = 1\n    while i < len(arr):\n        if i + 1 < len(arr):\n            if arr[i+1] - arr[i] > arr[i] - arr[i-1]:\n                arr[i+1], arr[i] = arr[i], arr[i+1]\n            i += 2\n        else:\n            break\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '{': '}', '[': ']'}\n\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return fruit_list\n\nfruit_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    return f\"python manage.py makemigrations {app_name} --alter {model_name} {field_name}\"\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    res = []\n    carry = 0\n    for digit in reversed(n_str):\n        temp = int(digit)*2 + carry\n        if temp >= 10:\n            carry = 1\n            temp -= 10\n        else:\n            carry = 0\n        res.append(str(temp))\n    if carry:\n        res.append(str(carry))\n    return ''.join(reversed(res))\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": [0.0, 0.0, 0.0],\n        \"preset1\": [1.0, 1.0, 1.0],\n        \"preset2\": [2.0, 2.0, 2.0],\n        \"preset3\": [3.0, 3.0, 3.0],\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n\nThe function quiz_system_behavior takes two parameters: allow_multiple_answer and zoom_level.\n\nIf allow_multiple_answer is True, it prints \"Allow multiple answers\". Otherwise, it prints \"Only one answer allowed\".\n\nIf zoom_level is greater than 0, it prints \"Zoom level is set to {zoom_level}\". Otherwise, it prints \"Zoom level is not set\".\n\nThe function is then called with four different sets of parameters.\n\"\"\"\n\n\"\"\"\nOutput:\nAllow multiple answers\nZoom level is set to 10\nOnly one answer allowed\nZoom level is not set\n\"\"\"\n\n\"\"\"\nThe function is working as expected. It prints the appropriate message based on the values of the parameters.\n\"\"\"\n\n\"\"\"\nThe function quiz_system_behavior takes two parameters: allow_multiple_answer and zoom_level.\n\nIf allow_multiple_answer is True, it prints \"Allow multiple answers\". Otherwise, it prints \"Only one answer allowed\".\n\nIf zoom_level is greater than 0, it prints \"Zoom level is set to {zoom_level}\". Otherwise, it prints \"Zoom level is not set\".\n\nThe function is then called with four different sets of parameters.\n\"\"\"\n\n\"\"\"\nOutput:\nAllow multiple answers\nZoom level is set to 10\nOnly one answer allowed\nZoom level is not set\n\"\"\"\n\n\"\"\"\nThe function is working as expected. It prints the appropriate message based on the values of the parameters.\n\"\"\"\n\n\"\"\"\nThe function quiz_system_behavior takes two parameters: allow_multiple_answer and zoom_level.\n\nIf allow_multiple"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(s):\n        return all(c.isalpha() or c.isspace() for c in s)\n\n    def merge(a, b, path=None):\n        if path is None:\n            path = []\n        for k in b:\n            if not is_alpha(k):\n                continue\n            if k in a:\n                if isinstance(a[k], dict) and isinstance(b[k], dict):\n                    merge(a[k], b[k], path + [k])\n                elif a[k] == b[k]:\n                    pass  # same leaf value\n                else:\n                    a[k] = b[k]\n            else:\n                a[k] = b[k]\n        return a\n\n    merged = merge({}, a)\n    merge(merged, b)\n\n    return {k: merged[k] for k in sorted(merged)}\n\na = {'a 1': 'b', 'nested': {'x': [5, 6]}, 'bc': 3, 'dny': 7}\nb = {'a 2': 'c', 'nested': {'y': [8, 9]}, 'ef': 10, 'gh': 11}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Error: Dictionary is empty\"\n    except TypeError:\n        return \"Error: Invalid input. Please provide a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*').replace('a', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    c, r = 0, sqrt(x)\n    while r*r < x:\n        c, r = c+1, r+1\n    return c*c*c == x\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
