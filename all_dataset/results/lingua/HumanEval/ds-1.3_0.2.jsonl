{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    differences = [abs(x - mean) for x in numbers]\n    mad = sum(differences) / len(numbers)\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    result = ''\n    for i in range(max_len):\n        if a_bin[i] == b_bin[i]:\n            result += '0'\n        else:\n            result += '1'\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[0:i+1] for i in range(len(string))]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num]))\n"}
{"task_id": "HumanEval/20", "completion": "\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                result = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    positive_numbers = [num for num in l if num > 0]\n    return positive_numbers\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    return round(poly(xs, 1), 2)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Your code here\n    return [l[i] if i % 3 == 0 else sorted(l[i*3:i*3+3])[2] for i in range(len(l))]\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    def count_sevens(n: int):\n        return str(n).count('7')\n\n    def count_divisible(n: int, divisor: int):\n        return sum(1 for i in range(1, n) if i % divisor == 0)\n\n    return sum(count_sevens(i) * count_divisible(i, 11) * count_divisible(i, 13) for i in range(1, n))\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # undo the cycling in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    count, fib_num = 0, 0\n    i = 1\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib_num\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum_ = l[i] + l[left] + l[right]\n            if sum_ == 0:\n                return True\n            elif sum_ < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_list.append(fib_list[-1] + fib_list[-2] + fib_list[-3] + fib_list[-4])\n        return fib_list[-1]\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    if p == 1:\n        return n\n    else:\n        return n % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    no_vowels_text = ''\n    for char in text:\n        if char not in vowels:\n            no_vowels_text += char\n    return no_vowels_text\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    if sorted(s0) == sorted(s1):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    bracket_map = {\"<\": \">\", \">\": \"<\"}\n\n    for bracket in brackets:\n        if bracket in bracket_map:\n            stack.append(bracket)\n        elif len(stack) == 0 or bracket_map[stack.pop()] != bracket:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return common_list\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n+1))\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    derivative_coefficients = []\n    for i in range(1, len(xs)):\n        derivative_coefficients.append(i * xs[i])\n    return derivative_coefficients\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n        return fibfib_list[-1]\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiouyAEIOUY\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    def reverse(s):\n        return s[::-1]\n\n    def shift_right(s, shift):\n        return s[-shift:] + s[:-shift]\n\n    s = str(x)\n    if shift > len(s):\n        return reverse(s)\n    else:\n        return shift_right(s, shift)\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split()\n    total_fruits = int(fruits[-2])\n    total_apples = int(fruits[-1].split(\" \")[0])\n    total_oranges = total_fruits - total_apples\n    mango_fruits = total_fruits - total_oranges - n\n    return mango_fruits\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values, key=lambda x: (x[1], x[0]))\n        return [smallest_even_value[1], smallest_even_value[0]]\n    else:\n        return []\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(lst)+1):\n        if i in c and c[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    # Your code here\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return area rounded to 2 decimal points\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst, w):\n        return sum_of_elements(lst) <= w\n\n    return is_balanced(q, w) and is_palindrome(q)\n"}
{"task_id": "HumanEval/73", "completion": "\n    def count_changes(arr, start, end):\n        changes = 0\n        while start < end:\n            if arr[start] != arr[end]:\n                changes += 1\n            start += 1\n            end -= 1\n        return changes\n\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += count_changes(arr, i, len(arr) - i - 1)\n        else:\n            changes += count_changes(arr, i, len(arr) - i - 2)\n    return changes\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return sum(len(i) for i in lst)\n\n    return lst1 if count_chars(lst1) <= count_chars(lst2) else lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    else:\n        return x**(1/n) == int(x**(1/n))\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a == round(a ** (1. / 3)) ** 3\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    dec_to_hex = {value: key for key, value in hex_to_dec.items()}\n    hex_num = num.upper()\n    count = 0\n    for i in range(2, len(hex_num)):\n        if hex_num[i] in hex_to_dec:\n            dec_num = hex_to_dec[hex_num[i]]\n            if dec_num in [2, 3, 5, 7, 11, 13, 17]:\n                count += 1\n        else:\n            return 0\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else ('A' if grade == 3.7 else ('B' if grade == 3.3 else ('B-' if grade == 3.0 else ('C+' if grade == 1.7 else ('C' if grade == 1.3 else ('C-' if grade == 1.0 else ('D+' if grade == 0.7 else 'D'))))))))\n\n    return [grade_equation(grade) for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 9 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    def sum_of_digits(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n = n // 10\n        return sum\n\n    return bin(sum_of_digits(N))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=ord)\n    return ' '.join(words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (x[0], -x[1]))\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return array\n\n    sum_first_last = sum(array[0], array[-1])\n\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first = lst[0]\n    second = None\n    for i in lst:\n        if i < first:\n            second = i\n            break\n    if second is None:\n        return None\n    for i in lst:\n        if i > second and i < first:\n            second = i\n    if second is None:\n        return None\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    S = S.split('.')\n    boredom_count = 0\n    for sentence in S:\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    return is_integer(x) and is_integer(y) and is_integer(z)\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += chr(ord(char) + 2).upper()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    return sum(sum_of_digits(prime) for prime in primes)\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(n) if is_prime(i)]\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    return abs(a*b) % 10\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    def is_float(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def round_to_nearest(n):\n        if n >= 0:\n            return int(n + 0.5)\n        else:\n            return int(n - 0.5)\n\n    if is_float(value):\n        value = float(value)\n        if value < 0:\n            return round_to_nearest(value - 0.5)\n        else:\n            return round_to_nearest(value + 0.5)\n    else:\n        return int(value)\n\n"}
{"task_id": "HumanEval/100", "completion": "\n    def next_odd(n):\n        return n + 1 if n % 2 != 0 else n\n\n    def next_even(n):\n        return n + 2 if n % 2 == 0 else n\n\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:\n            pile.append(next_even(pile[-1]))\n        else:\n            pile.append(next_odd(pile[-1]))\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \"\").split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            return y - 1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        total = 0\n        for i in range(n, m + 1):\n            total += i\n        avg = round(total / (m - n + 1))\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def is_even_digit(n):\n        return set(str(n)) == {'0', '2', '4', '6', '8'}\n\n    return sorted([x for x in x if is_even_digit(x)])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    def to_name(num):\n        if num == 1:\n            return \"One\"\n        elif num == 2:\n            return \"Two\"\n        elif num == 3:\n            return \"Three\"\n        elif num == 4:\n            return \"Four\"\n        elif num == 5:\n            return \"Five\"\n        elif num == 6:\n            return \"Six\"\n        elif num == 7:\n            return \"Seven\"\n        elif num == 8:\n            return \"Eight\"\n        elif num == 9:\n            return \"Nine\"\n        else:\n            return \"\"\n\n    def sort_arr(arr):\n        arr.sort()\n        return arr\n\n    def reverse_arr(arr):\n        return arr[::-1]\n\n    def to_str_arr(arr):\n        return [to_name(i) for i in arr]\n\n    if not arr:\n        return []\n\n    arr = sort_arr(arr)\n    arr = reverse_arr(arr)\n    return to_str_arr(arr)\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_to(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to(i) for i in range(1, n+1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n            while num:\n                if num % 10 > 0:\n                    count += 1\n                num //= 10\n        else:\n            while num:\n                if num % 10 > 0:\n                    count += 1\n                num //= 10\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if all(arr[i] >= arr[j] for j in range(i + 1, len(arr))):\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def can_exchange(lst1, lst2):\n        for i in range(len(lst1)):\n            if not is_even(lst1[i]) and is_even(lst2[i]):\n                return False\n        return True\n\n    return \"YES\" if can_exchange(lst1, lst2) else \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    hist = {}\n    for letter in test.split():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [\"the number of odd elements in string {} of input.\".format(i) for i in range(len(lst))]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_buckets(grid, capacity):\n        n = len(grid)\n        m = len(grid[0])\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            for j in range(m - 1, -1, -1):\n                if grid[i][j] == 0:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n                else:\n                    l = r = cnt = 0\n                    while i + l < n and grid[i + l][j] == 1:\n                        cnt += 1\n                        l += 1\n                    while j + r < m and grid[i][j + r] == 1:\n                        r += 1\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) + cnt\n        return dp[0][0]\n\n    return max_buckets(grid, capacity)\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    s1, s2 = lst\n    if not is_balanced(s1) or not is_balanced(s2):\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    arr.sort()\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n    if not date:\n        return False\n    if not re.match(\"\\d{2}-\\d{2}-\\d{4}\", date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product)\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    path = []\n    min_path = [float('inf')]*n\n    min_path_index = -1\n\n    def dfs(x, y, k):\n        nonlocal min_path_index\n        if k == 0:\n            return True\n        if x < 0 or y < 0 or x >= n or y >= n or visited[x][y]:\n            return False\n        if grid[x][y] < min_path[x]:\n            min_path[x] = grid[x][y]\n            min_path_index = x\n        visited[x][y] = True\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            if dfs(x + dx, y + dy, k - 1):\n                return True\n        visited[x][y] = False\n        return False\n\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            dfs(i, j, k - 1)\n            visited[i][j] = False\n\n    path.append(grid[min_path_index][min_path_index])\n    min_path[min_path_index] = float('inf')\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            dfs(i, j, k - 1)\n            visited[i][j] = False\n    return path\n"}
{"task_id": "HumanEval/130", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    def tri(n):\n        if n == 0:\n            return 3\n        elif n % 2 == 0:\n            return 1 + n // 2\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\n    return [tri(i) for i in range(n + 1)]\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for d in odd_digits:\n            product *= d\n        return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    elif txt[-1].isalpha():\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    return (max(neg_lst) if neg_lst else None, min(pos_lst) if pos_lst else None)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(s):\n        s = s.replace(\",\", \".\")\n        if \".\" in s:\n            return float(s)\n        else:\n            return int(s)\n\n    def compare(a, b):\n        if isinstance(a, str) and isinstance(b, str):\n            return convert_to_float(a) if convert_to_float(a) > convert_to_float(b) else convert_to_float(b)\n        elif isinstance(a, str):\n            return convert_to_float(a)\n        elif isinstance(b, str):\n            return convert_to_float(b)\n        else:\n            return a if a > b else b\n\n    return compare(a, b)\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "\n    if \"  \" in text:\n        return text.replace(\"  \", \"-\")\n    elif \"   \" in text:\n        return text.replace(\"   \", \"-\")\n    else:\n        return text.replace(\" \", \"-\")\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n    if len(file_name) > 3 and file_name[-4:].lower() == '.txt' and re.match('^[a-zA-Z][a-zA-Z0-9]*$', file_name[:-4]):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def simplify_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        divisor = gcd(numerator, denominator)\n        return str(numerator // divisor) + '/' + str(denominator // divisor)\n\n    return simplify_fraction(x) == simplify_fraction(n)\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(n):\n        return str(n)[-1] in '13579' and str(n)[-2] in '13579'\n\n    return len([n for n in nums if is_special(n)])\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets_orbits = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1, index2 = planets_orbits.index(planet1), planets_orbits.index(planet2)\n    if index1 < index2:\n        return tuple(planets_orbits[index1+1:index2])\n    elif index1 > index2:\n        return tuple(planets_orbits[index2+1:index1])\n    else:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    def list_sort(lst):\n        lst = [i for i in lst if len(i) % 2 == 0]\n        lst.sort(key=lambda x: (len(x), x))\n        return lst\n\n    print(list_sort([\"aa\", \"a\", \"aaa\"]))\n    print(list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]))\n\n\nsorted_list_sum()\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return y\n    else:\n        return x\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(guess[i]-game[i]) for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.replace(\" \", \"\")\n    strength = float('-inf')\n    strongest_extension = None\n\n    for extension in extensions:\n        extension_name = extension.replace(\" \", \"\")\n        cap = sum(1 for c in extension_name if c.isupper())\n        sm = sum(1 for c in extension_name if c.islower())\n        current_strength = cap - sm\n        if current_strength > strength:\n            strength = current_strength\n            strongest_extension = extension_name\n\n    return f'{class_name}.{strongest_extension}'\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    def is_rotation(a, b):\n        return b in a + a\n\n    return any(is_rotation(a, b) for b in (b, b[1:] + b[0]) for a in (a, a[1:] + a[0]))\n\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        'm', 'cm', 'd', 'cd',\n        'c', 'xc', 'l', 'xl',\n        'x', 'ix', 'v', 'iv',\n        'i'\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if any side is zero\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Check if any side is equal to the sum of the other two\n    if a == b + c or b == a + c or c == a + b:\n        return True\n\n    return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_word = \"\"\n    for word in words:\n        if len(set(word)) > len(max_unique_word):\n            max_unique_word = word\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if operator[0] == '+':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result += operator[i] + operand[i]\n    elif operator[0] == '-':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result -= operator[i] + operand[i]\n    elif operator[0] == '*':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result *= operator[i] + operand[i]\n    elif operator[0] == '//':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result //= operator[i] + operand[i]\n    elif operator[0] == '**':\n        result = operand[0]\n        for i in range(1, len(operand)):\n            result **= operator[i] + operand[i]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for i in s:\n        if i.isalpha():\n            result = i.swapcase() + result\n        else:\n            result = s[::-1]\n            break\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n"}
