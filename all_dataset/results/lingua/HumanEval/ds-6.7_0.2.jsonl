{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i+1] - numbers[i] < threshold:\n            return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if temp:\n                stack.append(temp)\n                temp = \"\"\n            stack.append(char)\n        else:\n            stack.append(char)\n            if len(stack) - stack.count(\"(\") == stack.count(\")\"):\n                while stack:\n                    temp += stack.pop(0)\n                result.append(temp)\n                temp = \"\"\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    groups = paren_string.split()\n    for group in groups:\n        stack = []\n        max_len = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                stack.pop()\n                if len(stack) > max_len:\n                    max_len = len(stack)\n        result.append(max_len)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    music_string = music_string.split()\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    return [notes[note] for note in music_string]\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    a, b, c = xs[-3:]\n    return (-b + math.sqrt(b * b - 4 * a * c)) / (2 * a)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    div_by_three.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = div_by_three.pop(0)\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_index_values = sorted([l[i] for i in range(0, len(l), 2)])\n    result = l.copy()\n    for i, value in enumerate(even_index_values):\n        result[2 * i] = value\n    return result\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_left = i + 1\n        l_right = len(l) - 1\n        while l_left < l_right:\n            l_sum = l[i] + l[l_left] + l[l_right]\n            if l_sum < 0:\n                l_left += 1\n            elif l_sum > 0:\n                l_right -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [a + b for a, b in zip(l, l[1:])]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 3):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    if n == 0:\n        return 0\n    if p == 1:\n        return 0\n    return (n % p + p) % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return xs[1:][::]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_3 = 0\n        fibfib_n_2 = 0\n        fibfib_n_1 = 1\n        for _ in range(2, n):\n            fibfib_n = fibfib_n_1 + fibfib_n_2 + fibfib_n_3\n            fibfib_n_3 = fibfib_n_2\n            fibfib_n_2 = fibfib_n_1\n            fibfib_n_1 = fibfib_n\n        return fibfib_n_1\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    # split the string to get the number of apples and oranges\n    apples, oranges = map(int, s.split()[2::2])\n    # subtract the number of apples and oranges from the total number of fruits to get the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    return min(even_nodes, key=lambda x: (x[1], x[0])) if even_nodes else []\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    max_freq = max(c.values())\n    for k, v in sorted(c.items(), reverse=True):\n        if v >= max_freq:\n            return k\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        result = [lst[0]]\n        lst.pop(0)\n        lst.sort(reverse=True)\n        result.append(lst[0])\n        lst.pop(0)\n        while len(lst) > 0:\n            result.append(lst[-1])\n            lst.pop(-1)\n            if len(lst) > 0:\n                result.append(lst[0])\n                lst.pop(0)\n        return result\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    lst1_count = sum(len(i) for i in lst1)\n    lst2_count = sum(len(i) for i in lst2)\n    if lst1_count < lst2_count:\n        return lst1\n    elif lst1_count > lst2_count:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            a = a / i\n            if a in primes:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return True\n    if x == 1:\n        return True\n    if x == 0:\n        return True\n    if n == 0:\n        return False\n    i = 1\n    while i <= x:\n        i *= n\n        if i == x:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    x = round(a ** (1. / 3))\n    return x * x * x == a\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    return sum(hex_num in prime_hex for hex_num in num)\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', -0.6: 'E'}\n    return [grade_dict.get(i) for i in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    return 2 * (n - 1)\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary = bin(N)[2:]\n    sum_of_digits = sum(int(digit) for digit in binary)\n    return bin(sum_of_digits)[2:]\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        new_word = ''.join(sorted(word))\n        result.append(new_word)\n    return ' '.join(result)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if (array[0] + array[-1]) % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2*2) % 26 +  ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    min1 = min2 = float('inf')\n    for x in lst:\n        if x <= min1:\n            min1, min2 = x, min1\n        elif x < min2:\n            min2 = x\n    return min2 if min2 != float('inf') else None\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    return sum(1 for word in S.split() if word.startswith('I'))\n"}
{"task_id": "HumanEval/92", "completion": "\n    return any(i == x + y + z - i for i in [x, y, z])\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    return sum_digits(max(primes))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Your code here\n    product = a * b\n    while product >= 10:\n        product = product % 10\n    return product\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    import math\n    return round(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(n + 2 * i)\n        else:\n            pile.append(n + 2 * i)\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \" \").split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def is_even_digit(n):\n        return all(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if is_even_digit(num)])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    num_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [num_names[i] for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    return arr\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    def sum_to_n(n):\n        return n * (n + 1) // 2\n\n    return [factorial(i) if i % 2 == 0 else sum_to_n(i) for i in range(1, n + 1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * (sum(map(int, str(abs(num))[1:])))\n        else:\n            num = sum(map(int, str(num)))\n        if num > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    # your code here\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            count += 1\n    return count <= 1\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [i for i in lst1 if i % 2 != 0]\n    even_lst2 = [i for i in lst2 if i % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    # your code here\n    test = test.split()\n    histogram_dict = {}\n    for letter in test:\n        if letter in histogram_dict:\n            histogram_dict[letter] += 1\n        else:\n            histogram_dict[letter] = 1\n    return histogram_dict\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    for i in c:\n        s = s.replace(i, '')\n    return (s, s == s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    def odd_numbers(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"the number of odd elements {odd_numbers(s)}n str{odd_numbers(s)}ng {i+1} of {len(lst)}nput.\" for i, s in enumerate(lst)]\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # flatten the grid\n    wells = [i for sublist in grid for i in sublist]\n    # sort the wells in descending order\n    wells.sort(reverse=True)\n    # initialize the bucket count\n    bucket_count = 0\n    # iterate over the wells\n    for well in wells:\n        # calculate the number of buckets needed to empty the well\n        buckets_needed = math.ceil(well / capacity)\n        # increment the bucket count by the number of buckets needed\n        bucket_count += buckets_needed\n    # return the bucket count\n    return bucket_count\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    s1, s2 = lst\n    stack = []\n    for i in s1+s2:\n        if i == '(':\n            stack.append(i)\n        elif i == ')' and stack:\n            stack.pop()\n        else:\n            return 'No'\n    return 'Yes' if not stack else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Your code here\n    arr.sort()\n    return arr[-k:]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    # sort the array in ascending order\n    arr.sort()\n    # return the sum of the first k elements\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([i for i in collatz if i % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    # your code here\n    pass\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst)\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # if the intersection is valid (start <= end)\n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n\n        # check if the length of the intersection is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n    else:\n        product = 1\n        for i in arr:\n            if i < 0:\n                product *= -1\n            elif i > 0:\n                product *= 1\n            else:\n                return 0\n        return sum([abs(i) for i in arr]) * product\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    cells = sorted((grid[i][j], i, j) for i in range(n) for j in range(n))\n    dp[cells[0][1]][cells[0][2]][0] = cells[0][0]\n\n    for l in range(1, k + 1):\n        for _, x, y in cells:\n            for dx, dy in moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n:\n                    dp[x][y][l] = min(dp[x][y][l], dp[nx][ny][l - 1])\n        for _, x, y in cells:\n            if dp[x][y][k] != float('inf'):\n                return dp[x][y][k:]\n\n    return dp[cells[0][1]][cells[0][2]][k:]\n\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 3]\n    if n == 2:\n        return [0, 3, 2]\n    if n == 3:\n        return [0, 3, 2, 8]\n    tri_seq = [0, 3, 2, 8]\n    for i in range(4, n + 1):\n        if i % 2 == 0:\n            tri_seq.append(1 + i // 2)\n        else:\n            tri_seq.append(tri_seq[-1] + tri_seq[-2] + tri_seq[-3])\n    return tri_seq\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    digits = [int(x) for x in str(n)]\n    odd_digits = [x for x in digits if x % 2 != 0]\n    if len(odd_digits) == 0:\n        return 0\n    else:\n        product = 1\n        for x in odd_digits:\n            product *= x\n        return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum(math.ceil(i) ** 2 for i in lst)\n\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    if txt[-1].isalpha():\n        return False\n    if len(txt.split()) > 1:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i - 1\n    return -1\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    if not neg:\n        largest_neg = None\n    else:\n        largest_neg = max(neg)\n    if not pos:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos)\n    return (largest_neg, smallest_pos)\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        b = float(b)\n\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        return fact * special_factorial(n - 1)\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    # your code here\n    text = text.replace(\"  \", \"-\")\n    text = text.replace(\" \", \"_\")\n    if text[0] == \" \":\n        text = text.replace(text[0], \"_\", 1)\n    if text[-1] == \" \":\n        text = text.replace(text[-1], \"_\", 1)\n    return text\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\\.txt$|^[a-zA-Z][a-zA-Z0-9]{0,2}\\.exe$|^[a-zA-Z][a-zA-Z0-9]{0,2}\\.dll$'\n    if re.fullmatch(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # calculate the numerator and denominator of the simplified fraction\n    new_num = x_num * n_num\n    new_den = x_den * n_den\n\n    # check if the simplified fraction is a whole number\n    return new_num % new_den == 0\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n        return sum(int(digit) for digit in str(n))\n\n    return sorted(nums, key=sum_digits)\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    planet1_position = planets[planet1]\n    planet2_position = planets[planet2]\n\n    if planet1_position > planet2_position:\n        planet1_position, planet2_position = planet2_position, planet1_position\n\n    return tuple(planet for planet, position in planets.items() if position > planet1_position and position < planet2_position)\n\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out odd length strings\n    lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    lst.sort()\n    lst.sort(key=len)\n\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 if i > 0 and i % 2 != 0 else 0 for i in lst])\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(s-g) for s,g in zip(game,guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strengths = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions]\n    strongest_ext = extensions[strengths.index(max(strengths))]\n    return f\"{class_name}.{strongest_ext}\"\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]\n    return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # your code here\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if number <= need:\n        if number + remaining >= need:\n            return [number + need, (number + remaining) - need]\n        else:\n            return [number + remaining, 0]\n    else:\n        return [-1, \"Invalid input\"]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Your code here\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    # your code here\n    res = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                res += i.upper()\n            else:\n                res += i.lower()\n        else:\n            res += i\n    return res[::-1]\n\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n"}
