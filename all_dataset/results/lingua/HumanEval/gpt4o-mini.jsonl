{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    result = []\n    stack = []\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                current_group = []\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n    \n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    if not numbers:\n        return 0.0\n\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean_value) for x in numbers) / len(numbers)\n    \n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    levels = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        levels.append(max_depth)\n    return levels\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = sum(numbers)\n    total_product = 1 if numbers else 0\n    for number in numbers:\n        total_product *= number\n    return total_sum, total_product\n"}
{"task_id": "HumanEval/9", "completion": "\n    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if not string:\n        return \"\"\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix before the palindromic suffix\n            return string + string[:i][::-1]\n    \n    return string + string[::-1]  # In case no palindromic suffix is found\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    \n    max_length = max(len(s) for s in strings)\n    longest_strings = [s for s in strings if len(s) == max_length]\n    \n    return longest_strings[0] if longest_strings else None\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    note_durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    for note in notes:\n        if note in note_durations:\n            beats.append(note_durations[note])\n    \n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow overlapping\n    \n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to their corresponding numeric values\n    numeric_values = [num_dict[word] for word in words]\n    \n    # Sort the numeric values\n    sorted_values = sorted(numeric_values)\n    \n    # Convert sorted numeric values back to words\n    sorted_words = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in sorted_values]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    numbers = sorted(set(numbers))  # Remove duplicates and sort the list\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i - 1], numbers[i])\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    if not numbers:\n        return []\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = {}\n    result = []\n    \n    for number in numbers:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    \n    for number in numbers:\n        if seen[number] == 1:\n            result.append(number)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    # Find the largest non-zero coefficient\n    largest_non_zero = max([abs(coeff) for coeff in xs if coeff != 0])\n    \n    # Use a simple method to find a root, such as the bisection method\n    def bisection_method(a, b, tol=1e-7):\n        if poly(xs, a) * poly(xs, b) >= 0:\n            raise ValueError(\"The function must have different signs at the endpoints a and b.\")\n        while (b - a) / 2.0 > tol:\n            midpoint = (a + b) / 2.0\n            if poly(xs, midpoint) == 0:\n                return midpoint\n            elif poly(xs, a) * poly(xs, midpoint) < 0:\n                b = midpoint\n            else:\n                a = midpoint\n        return (a + b) / 2.0\n\n    # Initial guesses for the bisection method\n    a = -largest_non_zero * 2\n    b = largest_non_zero * 2\n\n    return round(bisection_method(a, b), 2)\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    divisible_by_three.sort()\n    \n    # Create a new list to hold the result\n    result = l[:]\n    \n    # Replace elements at indices divisible by 3 with sorted elements\n    for i, value in zip(range(len(result)), divisible_by_three):\n        if i % 3 == 0:\n            result[i] = value\n            \n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    \n    result = l[:]\n    for i, value in enumerate(even_indices):\n        result[i * 2] = value\n    \n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_sequence = [0, 1]\n    prime_fibs = []\n\n    while len(prime_fibs) < n:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n\n    return prime_fibs[n - 1]\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + (n - 3) + fib4(n - 4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    if p <= 0:\n        raise ValueError(\"p must be a positive integer\")\n    return n % p\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)\n"}
{"task_id": "HumanEval/52", "completion": "\n    return [num for num in l if num < t]\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(set(s0)) == sorted(set(s1))\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for char in brackets:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    if not l:\n        return True\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    for i in range(2, n + 1):\n        while n % i == 0:\n            if is_prime(i):\n                largest_factor = i\n            n //= i\n    return largest_factor\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * coeff for i, coeff in enumerate(xs) if i > 0]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + (n - 2) + (n - 3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    s = s.lower()\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'aeiou':\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    str_x = str(x)\n    n = len(str_x)\n    shift = shift % n  # Normalize shift to avoid unnecessary full rotations\n    if shift == 0:\n        return str_x\n    return str_x[-shift:] + str_x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(char) for char in s if char.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Split the input string to extract the number of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])  # First part is the number of apples\n    oranges = int(parts[2])  # Third part is the number of oranges\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            index = i\n    \n    if index == -1:\n        return []\n    \n    return [smallest_even, index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n\n    # Create a list of integers that have a frequency greater than or equal to their value\n    valid_numbers = [num for num, freq in frequency.items() if freq >= num]\n\n    # Return the greatest integer from the valid numbers or -1 if none exist\n    return max(valid_numbers) if valid_numbers else -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Append the minimum\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))  # Append the maximum\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    total_weight = sum(q)\n    is_balanced = (q == q[::-1])\n    \n    if is_balanced and total_weight <= w:\n        return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    if len(lst1) == len(lst2):\n        return lst1\n    \n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    if a >= 100:\n        return False\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    from itertools import combinations\n    for combo in combinations(primes, 3):\n        if combo[0] * combo[1] * combo[2] == a:\n            return True\n            \n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    \n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) == 3:\n            return True\n    return False\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.3:\n            letter_grades.append('A-')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.3:\n            letter_grades.append('B-')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.3:\n            letter_grades.append('C-')\n        elif gpa >= 1.0:\n            letter_grades.append('D+')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    return 10 ** (n - 2)\n"}
{"task_id": "HumanEval/84", "completion": "\n    digit_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(digit_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    return sorted(result, key=lambda coord: (coord[0], -coord[1]))\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    first, last = array[0], array[-1]\n    sorted_array = sorted(array)\n    \n    if first % 2 == 1 and last % 2 == 1:\n        return sorted_array\n    else:\n        return sorted_array[::-1]\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = []\n    for char in s:\n        if char.isalpha():\n            # Shift character by 2 positions in the alphabet\n            shifted = chr((ord(char) - ord('a') + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encrypted.append(shifted)\n        else:\n            encrypted.append(char)  # Non-alphabetic characters remain unchanged\n    return ''.join(encrypted)\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    \n    if len(unique_lst) < 2:\n        return None\n    \n    return unique_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    import re\n\n    # Split the string into sentences using regex to account for '.', '?', and '!'\n    sentences = re.split(r'[.!?]', S)\n\n    # Count sentences that start with \"I\" (case insensitive)\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().lower().startswith('i'))\n\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return x == y + z or y == x + z or z == x + y\n"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def replace_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.islower():\n                return chr(((ord(c) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                return chr(((ord(c) - ord('A') + 2) % 26) + ord('A'))\n        return c\n\n    encoded_message = ''.join(replace_vowel(swap_case(c)) for c in message)\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    \n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    product = a * b\n    return (product % 10) * (product // 10 % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):  # Iterate over even indices\n        if s[i] in 'AEIOU':  # Check if the character is an uppercase vowel\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    lower = int(num)\n    upper = lower + 1\n\n    if abs(num - lower) < abs(num - upper):\n        return lower\n    elif abs(num - lower) > abs(num - upper):\n        return upper\n    else:\n        # Equidistant case\n        return upper if num > 0 else lower\n"}
{"task_id": "HumanEval/100", "completion": "\n    stones = []\n    for i in range(n):\n        if n % 2 == 0:\n            stones.append(n + 2 * i)\n        else:\n            stones.append(n + 2 * i + 1)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "\n    return [word.strip() for word in s.replace(',', ' ').split() if word]\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    return y - 1 if y > x else -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total / count\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted(set(num for num in x if all(digit in '02468' for digit in str(num))))\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    \n    # Filter out strange numbers (not between 1 and 9)\n    arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the array\n    arr.sort()\n    \n    # Reverse the sorted array\n    arr.reverse()\n    \n    # Mapping of digits to their names\n    digit_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Replace each digit with its name\n    result = [digit_to_name[x] for x in arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum of numbers from 1 to i\n            sum_numbers = sum(range(1, i + 1))\n            result.append(sum_numbers)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    count = 0\n    for num in arr:\n        if num < 0:\n            count += sum_of_digits(num)\n        else:\n            count += sum_of_digits(num)\n    \n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n\n    return count <= 1\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_count = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    available_evens = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count <= available_evens:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    from collections import Counter\n\n    if not test:\n        return {}\n\n    letters = test.split()\n    count = Counter(letters)\n    return dict(count)\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Remove characters from s that are in c\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [sum(1 for char in s if char in '13579') for s in lst]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x) if x >= 0 else (float('inf'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    def is_consonant(c):\n        return c.lower() in 'bcdfghjklmnpqrstvwxyz'\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    found_consonant = False\n\n    for char in word:\n        if char in vowels:\n            if found_consonant:\n                closest_vowel = char\n                break\n        else:\n            if closest_vowel == \"\":\n                found_consonant = True\n\n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    # Check both concatenation orders\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    if k == 0:\n        return []\n    \n    sorted_arr = sorted(arr)\n    return sorted_arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    sum_of_two_digits = 0\n    for i in range(k):\n        if 10 <= arr[i] < 100:\n            sum_of_two_digits += arr[i]\n    return sum_of_two_digits\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)  # Include the last term, which is 1\n\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    \n    seen = set()\n    for i in range(len(lst)):\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i])\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start >= end:\n        return \"NO\"\n    \n    length = end - start\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    total_sum = 0\n    for num in arr:\n        if num > 0:\n            total_sum += num\n        elif num < 0:\n            total_sum -= num\n    \n    return total_sum\n"}
{"task_id": "HumanEval/129", "completion": "\n    from collections import deque\n\n    def is_valid(x, y):\n        return 0 <= x < len(grid) and 0 <= y < len(grid[0])\n\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    min_path = None\n\n    def bfs(start_x, start_y):\n        nonlocal min_path\n        queue = deque([(start_x, start_y, [grid[start_x][start_y]])])\n        \n        while queue:\n            x, y, path = queue.popleft()\n            if len(path) == k:\n                if min_path is None or path < min_path:\n                    min_path = path\n                continue\n            \n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if is_valid(nx, ny):\n                    queue.append((nx, ny, path + [grid[nx][ny]]))\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            bfs(i, j)\n\n    return min_path\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n < 0:\n        return []\n    \n    tribonacci_sequence = []\n    \n    for i in range(n + 1):\n        if i == 1:\n            tribonacci_sequence.append(3)\n        elif i == 2:\n            tribonacci_sequence.append(2)\n        elif i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])\n    \n    return tribonacci_sequence\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(x) ** 2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    return txt[-1].isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\n    if not arr:\n        return -1\n    \n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            max_index = i\n    \n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    \n    # Convert inputs to float for comparison\n    try:\n        a_float = float(str(a).replace(',', '.'))\n        b_float = float(str(b).replace(',', '.'))\n    except ValueError:\n        return max(a, b, key=str)\n\n    return a if a_float > b_float else b\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8 or n % 2 != 0:\n        return False\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 1:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    import re\n    \n    # Replace multiple spaces with a single underscore\n    text = re.sub(r'\\s{2,}', '_', text)\n    \n    # Replace leading and trailing spaces with an underscore\n    text = text.strip().replace(' ', '_')\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    # Check if the file name starts with a letter and contains a dot\n    if not re.match(r'^[a-zA-Z]', file_name) or '.' not in file_name:\n        return 'No'\n\n    # Split the file name into name and extension\n    name, extension = file_name.rsplit('.', 1)\n\n    # Check if the name is not empty and the extension is valid\n    if not name or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Count the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n\n    # Check if the digit count is more than three\n    if digit_count > 3:\n        return 'No'\n\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    return result_numerator % result_denominator == 0\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if last_digit % 2 == 1:  # Check if last digit is odd\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n\n    return triples\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(planets[start_index + 1:end_index])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            total += num ** 2\n            \n    return total\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(g - s) if g != s else 0 for s, g in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(b) > len(a):\n        return False\n    \n    # Create a concatenated version of the first word\n    doubled_a = a + a\n    \n    # Check if the second word is a substring of the doubled first word\n    return b in doubled_a\n"}
{"task_id": "HumanEval/155", "completion": "\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n\n    return ''.join(result)\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if (unique_count > max_unique_count) or (unique_count == max_unique_count and word < max_word):\n            max_word = word\n            max_unique_count = unique_count\n\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        total_eaten = number + need\n        remaining_after = remaining - need\n    else:\n        total_eaten = number + remaining\n        remaining_after = 0\n\n    return [total_eaten, remaining_after]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator list length must be one less than operand list length.\")\n    \n    result = operand[0]\n    \n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        else:\n            raise ValueError(f\"Invalid operator: {operator[i]}\")\n    \n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    if any(c.isalpha() for c in s):\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n    else:\n        return s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash\n"}
{"task_id": "HumanEval/163", "completion": "\n    10, 12, 14]\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
