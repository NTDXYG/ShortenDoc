{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    stack = []\n    groups = []\n    group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            group += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                group += char\n            else:\n                groups.append(group)\n                group = ''\n        else:\n            group += char\n    if group:\n        groups.append(group)\n    return groups\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        if result and result[-2] != delimeter:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            level = len(stack)\n            stack.pop()\n            result.append(level)\n    return result\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        sum_numbers += number\n        product_numbers *= number\n    return sum_numbers, product_numbers\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    if not numbers:\n        return []\n    max_so_far = numbers[0]\n    result = [max_so_far]\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string + string[:i][::-1]):\n            return string + string[:i][::-1]\n    return string\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)  # type: ignore\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)  # Return the absolute value of the GCD\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string))  # Convert string to set to remove duplicates and count the number of elements in the set"}
{"task_id": "HumanEval/17", "completion": "\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return result\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    # Split the input string into a list of numbers\n    numbers_list = numbers.split()\n    \n    # Convert the list of strings into a list of integers\n    numbers_list = [int(num) for num in numbers_list]\n    \n    # Sort the list of integers in ascending order\n    numbers_list.sort()\n    \n    # Convert the sorted list of integers back into a list of strings\n    numbers_list = [str(num) for num in numbers_list]\n    \n    # Join the list of strings into a single string with spaces in between\n    sorted_numbers = ' '.join(numbers_list)\n    \n    return sorted_numbers\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    i = n\n    while i > 1:\n        if n % i == 0:\n            return i\n        i -= 1\n    return n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(dict.fromkeys(numbers))\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join([char.swapcase() for char in string])\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [string for string in strings if string.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) == 0:\n        return 0.0\n    if len(xs) == 1:\n        return -xs[0]\n    if len(xs) == 2:\n        return -xs[1] / xs[0]\n    if len(xs) == 3:\n        return -xs[2] / xs[1]\n    if len(xs) == 4:\n        return -xs[3] / xs[2]\n    if len(xs) == 5:\n        return -xs[4] / xs[3]\n    if len(xs) == 6:\n        return -xs[5] / xs[4]\n    if len(xs) == 7:\n        return -xs[6] / xs[5]\n    if len(xs) == 8:\n        return -xs[7] / xs[6]\n    if len(xs) == 9:\n        return -xs[8] / xs[7]\n    if len(xs) == 10:\n        return -xs[9] / xs[8]\n    if len(xs) == 11:\n        return -xs[10] / xs[9]\n    if len(xs) == 12:\n        return -xs[11] / xs[10]\n    if len(xs) == 13:\n        return -xs[12] / xs[11]\n    if len(xs) == 14:\n        return -xs[13] / xs[12]\n    if len(xs) == 15:\n        return -xs[14] / xs[13]\n    if len(xs) == 16:\n        return -xs[15] / xs[14]\n    if len(xs) == 17:\n        return -xs[16] / xs[15]\n    if len(xs) == 18:\n        return -xs[17] / xs[16]\n    if len(xs) == 19:\n        return -xs[18] / xs[17]\n    if len(xs) == 20:\n        return -xs[19] / xs[18]\n    if len(xs) == 21:\n        return -xs[20] / xs[19]\n    if len(xs) == 22:\n        return -xs[21] / xs[20]\n    if len(xs) == 23:\n        return -xs[22] / xs[21]\n    if len(xs) == 24:\n        return -xs[23] / xs"}
{"task_id": "HumanEval/33", "completion": "\n    return [x for i, x in enumerate(l) if i % 3 != 0] + [x for i, x in enumerate(l) if i % 3 == 0]  # return sorted list with indicies not divisible by three first and indicies divisible by three second\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    return [l[i] if i % 2 == 0 else l[i] for i in range(len(l))]\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        a, b = 2, 3\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/40", "completion": "\n    # Check if the list has at least three elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Iterate over the list\n    for i in range(len(l) - 2):\n        # Initialize two pointers\n        left, right = i + 1, len(l) - 1\n\n        # Iterate until the two pointers meet\n        while left < right:\n            # Calculate the sum of the three elements\n            total = l[i] + l[left] + l[right]\n\n            # If the sum is zero, return True\n            if total == 0:\n                return True\n            # If the sum is less than zero, move the left pointer to the right\n            elif total < 0:\n                left += 1\n            # If the sum is greater than zero, move the right pointer to the left\n            else:\n                right -= 1\n\n    # If no triple sum to zero, return False\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Iterate over the range from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # For each car moving left to right, check for collisions with cars moving right to left\n        for j in range(1, n + 1):\n            # If the cars collide, increment the number of collisions\n            if i + j == n + 1:\n                collisions += 1\n    \n    # Return the total number of collisions\n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + (n-2)*(n-3) + (n-4)\n"}
{"task_id": "HumanEval/47", "completion": "\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return n % p\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])  # remove vowels from the text\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "HumanEval/58", "completion": "\n    return [value for value in l1 if value in l2]\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "\n    n = len(xs)\n    derivative = [0] * n\n    for i in range(1, n):\n        derivative[i - 1] = i * xs[i]\n    return derivative\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (n-1) + (n-2) + (n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiouy'\n    return sum(1 for char in s if char in vowels and s.endswith(char))  # count vowels at the end of the string\n"}
{"task_id": "HumanEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())  # using generator expression to sum ASCII codes of upper case letters in string s\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Split the string into a list of words\n    words = s.split()\n    # Initialize variables to keep track of the total number of fruits and the number of apples and oranges\n    total_fruits = 0\n    apples = 0\n    oranges = 0\n    # Iterate over the list of words\n    for i in range(len(words)):\n        # If the word is a number, convert it to an integer and add it to the total number of fruits\n        if words[i].isdigit():\n            total_fruits += int(words[i])\n        # If the word is 'apples', increment the number of apples\n        elif words[i] == 'apples':\n            apples += int(words[i+1])\n        # If the word is 'oranges', increment the number of oranges\n        elif words[i] == 'oranges':\n            oranges += int(words[i+1])\n    # Return the total number of fruits minus the number of apples and oranges\n    return total_fruits - apples - oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    smallest_value = float('inf')\n    smallest_index = -1\n    for i, node in enumerate(arr):\n        if node % 2 == 0 and node < smallest_value:\n            smallest_value = node\n            smallest_index = i\n    return [smallest_value, smallest_index] if smallest_index != -1 else []  # Return the smallest even value and its index, or an empty list if no even values are found.  # Time complexity: O(n) where n is the number of nodes in the array.  # Space complexity: O(1) as we only use a constant amount of space to store the smallest value and its index. "}
{"task_id": "HumanEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_freq = max(freq.values())\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= max_freq:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    min_lst = [x for x in lst if x == min_val]\n    max_lst = [x for x in lst if x == max_val]\n    return min_lst + [x for x in lst if x != min_val and x != max_val] + max_lst\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return area\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    return q == w and len(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    # create a 2D table to store the minimum number of changes\n    dp = [[0] * n for _ in range(n)]\n    # fill the diagonal of the table with 0\n    for i in range(n):\n        dp[i][i] = 0\n    # fill the table in a bottom-up manner\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            # if the current element is equal to the corresponding element from the end\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                # otherwise, try all possible changes and take the minimum\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]  # return the minimum number of changes for the entire array\n"}
{"task_id": "HumanEval/74", "completion": "\n    # Convert all strings to lower case\n    lst1 = [i.lower() for i in lst1]\n    lst2 = [i.lower() for i in lst2]\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the first list\n    for i in lst1:\n        # Initialize a flag to check if the string is found in the second list\n        found = False\n        \n        # Iterate over the second list\n        for j in lst2:\n            # Check if the string is found in the second list\n            if i == j:\n                # If the string is found, add it to the result list and set the flag to True\n                result.append(i)\n                found = True\n                break\n        \n        # If the string is not found in the second list, add it to the result list\n        if not found:\n            result.append(i)\n    \n    # Return the result list\n    return result\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n        if len(factors) == 3:\n            break\n    return len(factors) == 3\n"}
{"task_id": "HumanEval/76", "completion": "\n    return n ** int(n ** (1. / x)) == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a ** (1. / 3.) % 1 == 0  # a^(1/3) % 1 == 0 means a is a perfect cube\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    if not num:\n        return 0\n    return len(num) - 1\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) != 3:\n        return False\n    return len(set(s)) == 3\n"}
{"task_id": "HumanEval/81", "completion": "\n    grade_equation = {\n        'A+': 3.7,\n        'A': 3.3,\n        'A-': 3.0,\n        'B+': 2.7,\n        'B': 2.3,\n        'B-': 2.0,\n        'C+': 1.7,\n        'C': 1.3,\n        'C-': 1.0,\n        'D+': 0.7,\n        'D': 0.0,\n        'D-': 0.0,\n        'E': 0.0\n    }\n    return [letter for letter, value in grade_equation.items() if value >= max(grades)]\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))  # return True if length is prime, False otherwise\n"}
{"task_id": "HumanEval/83", "completion": "\n    return 9 * (10 ** (n - 2)) - 9 * (10 ** (n - 3)) + 1\n"}
{"task_id": "HumanEval/84", "completion": "\n    # Convert N to binary and remove the '0b' prefix\n    binary = bin(N)[2:]\n    \n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Iterate over each character in the binary string\n    for digit in binary:\n        # Add the integer value of the digit to the total sum\n        total_sum += int(digit)\n    \n    # Convert the total sum to binary and remove the '0b' prefix\n    binary_sum = bin(total_sum)[2:]\n    \n    # Return the binary sum as a string\n    return binary_sum\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 == 0])\n"}
{"task_id": "HumanEval/86", "completion": "\n    return ' '.join(sorted(s.split(), key=ord))  # split string into words, sort them based on ASCII value, and join them back with spaces in between\n"}
{"task_id": "HumanEval/87", "completion": "\n    if not lst or not lst[0]:\n        return []\n    row = [i for i, x in enumerate(lst[0]) if x == x]\n    return [(i, j) for i, sub_lst in enumerate(lst) for j, x in enumerate(sub_lst) if x == x and (i, j) not in row]\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    # Create a copy of the array to avoid modifying the original array\n    array_copy = array.copy()\n    \n    # Check if the array is empty\n    if len(array_copy) == 0:\n        return array_copy\n    \n    # Check if the array has only one element\n    if len(array_copy) == 1:\n        return array_copy\n    \n    # Check if the array has an even number of elements\n    if len(array_copy) % 2 == 0:\n        # Sort the array in descending order\n        array_copy.sort(reverse=True)\n    else:\n        # Sort the array in ascending order\n        array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            encrypted += chr((ord(char) - ascii_offset + 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1] if lst[0] != lst[1] else None\n"}
{"task_id": "HumanEval/91", "completion": "\n    words = S.split()\n    count = 0\n    for word in words:\n        if word.startswith(\"I\") and word.endswith(('.', '?', '!')):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return (x + y == z) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"}
{"task_id": "HumanEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n    return max_prime\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(2, n):\n        # Assume number is prime until shown it is not. \n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    # Extract the unit digits of the two numbers\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Calculate the product of the unit digits\n    product = a_unit * b_unit\n\n    # Return the product\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return round(value) if value >= 0 else round(value) - 1\n"}
{"task_id": "HumanEval/100", "completion": "\n    if n == 1:\n        return [1]\n    else:\n        return [n] + make_a_pile(n - 1) + make_a_pile(n - 1)\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \" \").split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    else:\n        return y\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n < m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)[2:]  # [2:] to remove '0b' prefix\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if i % 2 == 0])  # return sorted list of even numbers\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    arr.sort()\n    arr.reverse()\n    return [get_name(num) for num in arr if 1 <= num <= 9]\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    return [factorial(i) if i % 2 == 0 else i for i in range(1, n + 1)]\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_palindromes = []\n    odd_palindromes = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes.append(i)\n        else:\n            odd_palindromes.append(i)\n    return tuple(even_palindromes), tuple(odd_palindromes)  # return tuple of even and odd palindromes\n"}
{"task_id": "HumanEval/108", "completion": "\n    return sum(1 for num in arr if num < 0 and any(int(digit) > 0 for digit in str(abs(num))))\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Check if lst1 has any odd numbers\n    if any(num % 2 != 0 for num in lst1):\n        # If lst1 has any odd numbers, check if lst2 has enough even numbers to replace them\n        if sum(1 for num in lst2 if num % 2 == 0) >= sum(1 for num in lst1 if num % 2 != 0):\n            # If lst2 has enough even numbers, return \"YES\"\n            return \"YES\"\n        else:\n            # If lst2 does not have enough even numbers, return \"NO\"\n            return \"NO\"\n    else:\n        # If lst1 has no odd numbers, return \"YES\"\n        return \"YES\"  # This line is not necessary, but it's here to make the code more explicit\n"}
{"task_id": "HumanEval/111", "completion": "\n    hist = {}\n    for letter in test.split():\n        if letter in hist:\n            hist[letter] += 1\n        else:\n            hist[letter] = 1\n    return hist\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Create a copy of the string s\n    s_copy = s\n    # Remove all occurrences of c from s_copy\n    s_copy = s_copy.replace(c, '')\n    # Check if the resulting string is a palindrome\n    return (s_copy, s_copy == s_copy[::-1])  # Return a tuple with the resulting string and a boolean indicating whether it's a palindrome\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [sum(int(digit) % 2 for digit in string) for string in lst]  # count odd digits in each string\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    n = len(grid)\n    m = len(grid[0])\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                res += math.ceil((m - j) / capacity)\n    return res\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n"}
{"task_id": "HumanEval/117", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        if len(word) >= n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 1):\n        if word[i] not in vowels and word[i + 1] not in vowels:\n            for vowel in vowels:\n                if vowel in word[i:i + 2]:\n                    return vowel\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    stack = []\n    for s in lst:\n        if s == '(':\n            stack.append(s)\n        elif s == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'No'\n    return 'Yes' if not stack else 'No'  # return 'Yes' if stack is empty, 'No' otherwise\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Return the first k elements of the sorted array\n    return arr[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)  # sum odd elements at even positions"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([num for num in collatz if num % 2 != 0])  # return sorted list of odd numbers in collatz sequence\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    # Split the date string into month, day, and year\n    month, day, year = date.split('-')\n    \n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the month is valid (between 1 and 12)\n    if not 1 <= int(month) <= 12:\n        return False\n    \n    # Check if the day is valid for the given month\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not 1 <= int(day) <= 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not 1 <= int(day) <= 30:\n            return False\n    elif int(month) == 2:\n        if not 1 <= int(day) <= 29:\n            return False\n    \n    # If all checks pass, the date is valid\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower()) % 26\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst) and len(lst) > 1 and len(set(lst)) == len(lst)  # return True if list is sorted and has no duplicates, False otherwise\n"}
{"task_id": "HumanEval/127", "completion": "\n    start1, end1 = interval1\n    start2, end2 = interval2\n    # find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    # check if the intersection is valid\n    if intersection_start <= intersection_end:\n        # calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n        # check if the length is a prime number\n        if is_prime(intersection_length):\n            return \"YES\"\n    return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    result = 1\n    for num in arr:\n        result *= num\n    return result\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    m = len(grid[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_heap = []\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            min_heap.append((grid[i][j], i, j, 0))\n    heapq.heapify(min_heap)\n    while min_heap:\n        val, x, y, step = heapq.heappop(min_heap)\n        if (x, y, step) in visited:\n            continue\n        visited.add((x, y, step))\n        if step == k:\n            return [val]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m:\n                heapq.heappush(min_heap, (grid[nx][ny], nx, ny, step + 1))\n    return []\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    else:\n        tri_sequence = [3, 2]\n        for i in range(2, n):\n            if i % 2 == 0:\n                tri_sequence.append(1 + i / 2)\n            else:\n                tri_sequence.append(-1 + 2 + i)\n        return tri_sequence\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(math.ceil(i))**2 for i in lst)  # using list comprehension and math.ceil to round up each element and then square it and sum the results\n"}
{"task_id": "HumanEval/134", "completion": "\n    # check if the string is empty\n    if not txt:\n        return False\n    # get the last character of the string\n    last_char = txt[-1]\n    # check if the last character is a letter\n    if last_char.isalpha():\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return 0\n    if n == 2:\n        if arr[0] < arr[1]:\n            return 1\n        else:\n            return -1\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            return i - 1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    if not lst:\n        return (None, None)\n    if all(x < 0 for x in lst):\n        return (None, min(lst))\n    if all(x > 0 for x in lst):\n        return (max(lst), None)\n    return (max(lst), min(lst))  # return max and min of the list\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n == sum([i for i in range(2, n, 2)])\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 0:\n        return \"Error: Input must be a non-negative integer.\"\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    text = text.replace(\"  \", \"_\")\n    while \"  \" in text:\n        text = text.replace(\"  \", \"_\")\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) == 0:\n        return 'No'\n    if not file_name[0].isalpha():\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    if file_name.split('.')[0].isdigit() and file_name.split('.')[0].count('0') > 3:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  # if all conditions met return 'Yes' else return 'No'  #"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(i**2 if i % 3 == 0 else i**3 if i % 4 != 0 and i % 3 != 0 else i for i in lst)  # <--- changed here\n"}
{"task_id": "HumanEval/143", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Filter out words that are not prime numbers\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # Sort the prime words\n    prime_words.sort()\n    \n    # Join the prime words back into a sentence\n    result = ' '.join(prime_words)\n    \n    return result\n"}
{"task_id": "HumanEval/144", "completion": "\n    # Split the input strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the greatest common divisor of the numerator and denominator\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    # Calculate the greatest common divisor of the numerator and denominator\n    gcd_xn = gcd(x_num, x_den)\n    gcd_n = gcd(n_num, n_den)\n    \n    # Simplify the fractions\n    x_num //= gcd_xn\n    x_den //= gcd_xn\n    n_num //= gcd_n\n    n_den //= gcd_n\n    \n    # Check if the simplified fractions are equal\n    return x_num * n_den == n_num * x_den\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))  # use sorted function with custom key function that calculates the sum of digits of the absolute value of each number\n"}
{"task_id": "HumanEval/146", "completion": "\n    return len([num for num in nums if num > 10 and num % 2 != 0 and num % 10 in [1, 3, 5, 7, 9]])  # return count of numbers that meet the conditions\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    return triples\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1 + 1:index2])  # [index1 + 1:index2]  # [index1 + 1:index2]"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings of odd lengths\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list of even length words first by length and then alphabetically\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    \n    return sorted_words\n"}
{"task_id": "HumanEval/150", "completion": "\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum(num for num in lst if num % 2 != 0 and num >= 0)  # sum of odd numbers ignoring negative integers\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(a - b) for a, b in zip(game, guess)]\n\n"}
{"task_id": "HumanEval/153", "completion": "\n    # Calculate the strength of each extension\n    strengths = [(ext, len([c for c in ext if c.isupper()]) - len([c for c in ext if c.islower()])) for ext in extensions]\n    \n    # Find the strongest extension(s)\n    max_strength = max(strengths, key=lambda x: x[1])[1]\n    strongest_extensions = [ext for ext, strength in strengths if strength == max_strength]\n    \n    # Return the strongest extension(s) in the format ClassName.StrongestExtensionName\n    return f\"{class_name}.{strongest_extensions[0]}\" if strongest_extensions else class_name\n"}
{"task_id": "HumanEval/154", "completion": "\n    return a in b or b in a\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)  # return a tuple with even and odd counts\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()  # return lowercase\n"}
{"task_id": "HumanEval/157", "completion": "\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    return max(words, key=lambda word: (len(set(word)), word))  # using set to remove duplicates and len to count unique characters\n"}
{"task_id": "HumanEval/159", "completion": "\n    # Calculate the total number of carrots eaten\n    total_eaten = number + need\n    \n    # Calculate the number of carrots left\n    carrots_left = remaining - need\n    \n    # Return the total number of carrots eaten and the number of carrots left\n    return [total_eaten, carrots_left]  # Return a list with the total eaten and remaining carrots\n"}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator list length must be one less than operand list length\")\n    if not all(isinstance(x, int) for x in operand):\n        raise ValueError(\"All operands must be integers\")\n    if not all(isinstance(x, str) for x in operator):\n        raise ValueError(\"All operators must be strings\")\n    if not all(x in ['+', '-', '*', '/', '**'] for x in operator):\n        raise ValueError(\"Invalid operator. Only +, -, *, /, ** are allowed\")\n    if not all(0 <= x for x in operand[:-1]):\n        raise ValueError(\"All operands except the last one must be non-negative\")\n    if len(operator) == 0:\n        return operand[-1]\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    return s[::-1].swapcase()  # using slicing and swapcase() function to reverse the string and swap the case of each character\n"}
{"task_id": "HumanEval/162", "completion": "\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n"}
