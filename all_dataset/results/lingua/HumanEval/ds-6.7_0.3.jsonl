{"task_id": "HumanEval/0", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    # Remove spaces from the string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize variables\n    stack = []\n    groups = []\n    current_group = \"\"\n\n    # Iterate over the string\n    for char in paren_string:\n        if char == \"(\":\n            # Open brace found, add to the current group\n            current_group += char\n            stack.append(char)\n        elif char == \")\":\n            # Close brace found, add to the current group\n            current_group += char\n            stack.pop()\n            # If the stack is empty, a group is complete\n            if not stack:\n                groups.append(current_group)\n                current_group = \"\"\n\n    return groups\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_depth = 0\n    depths = []\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            current_depth -= 1\n\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            current_depth -= 1\n            if current_depth == max_depth:\n                depths.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n\n    return depths\n\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_num = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    max_length = len(max(strings, key=len))\n    return [s for s in strings if len(s) == max_length][0]\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n+1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    i = n - 1\n    while i > 0:\n        if n % i == 0:\n            return i\n        i -= 1\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while(divisor <= n):\n        if (n % divisor) == 0:\n            factors.append(divisor)\n            n = n / divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return \"\".join(char.upper() if char.islower() else char.lower() for char in string)\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [n for n in l if n > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) < 3:\n        raise ValueError(\"Polynomial must have at least 3 coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"Last coefficient must not be zero\")\n\n    a, b, c = xs[-3:]\n    return newton_raphson(a, b, c)\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    div_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_div_by_three = sorted([l[i] for i in div_by_three])\n    for i, j in zip(div_by_three, sorted_div_by_three):\n        l[i] = j\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    result = []\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    for i, v in zip(even_indices, even_values):\n        l[i] = v\n    return l\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    fib_nums = [2, 3, 5]\n    fib_next = 8\n    prime_count = 3\n    while prime_count < n:\n        if is_prime(fib_next):\n            fib_nums.append(fib_next)\n            prime_count += 1\n        fib_next = fib_nums[-1] + fib_nums[-2]\n    return fib_nums[-1]\n\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        l_left = i + 1\n        l_right = len(l) - 1\n        while l_left < l_right:\n            l_sum = l[i] + l[l_left] + l[l_right]\n            if l_sum < 0:\n                l_left += 1\n            elif l_sum > 0:\n                l_right -= 1\n            else:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x+1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    num_set = set(l)\n    for num in l:\n        if -num in num_set:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while x:\n        result = digits[x % base] + result\n        x = x // base\n    return result\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return fib4(0)\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "HumanEval/49", "completion": "\n    return n % p\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    s0 = ''.join(sorted(s0))\n    s1 = ''.join(sorted(s1))\n    return s0 == s1\n\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_minus_1 = 1\n        fibfib_n_minus_2 = 0\n        fibfib_n_minus_3 = 0\n        for _ in range(3, n + 1):\n            fibfib_n = fibfib_n_minus_1 + fibfib_n_minus_2 + fibfib_n_minus_3\n            fibfib_n_minus_3 = fibfib_n_minus_2\n            fibfib_n_minus_2 = fibfib_n_minus_1\n            fibfib_n_minus_1 = fibfib_n\n        return fibfib_n\n\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in s:\n        if i.lower() in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    total_fruits = int(s[4])\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even:\n            smallest_even = num\n            smallest_even_index = i\n    if smallest_even == float('inf'):\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, len(lst) + 1):\n        if c[i] >= i:\n            return i\n    return -1\n\n"}
{"task_id": "HumanEval/70", "completion": "\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val] + lst + [max_val]\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    else:\n        return True\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    i, j = 0, n - 1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count\n"}
{"task_id": "HumanEval/74", "completion": "\n    # your code here\n    len1 = sum(len(i) for i in lst1)\n    len2 = sum(len(i) for i in lst2)\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for prime in primes:\n        if a % prime == 0:\n            count += 1\n    return count == 3\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    i = 2\n    while i <= x:\n        if i ** n == x:\n            return True\n        i += 1\n    return False\n\n"}
{"task_id": "HumanEval/77", "completion": "\n    x = round(a ** (1. / 3))\n    return x * x * x == a\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if int(digit, 16) in primes:\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"db\"\n\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', 0.0: 'E'}\n    return [grade_dict[grade] for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    return n-2\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary_num = bin(N)[2:]\n    sum_digits = sum(int(digit) for digit in binary_num)\n    return bin(sum_digits)[2:]\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    result = []\n    for word in words:\n        chars = list(word)\n        chars.sort(key=lambda x: (x.isupper(), x.islower(), x))\n        result.append(''.join(chars))\n    return ' '.join(result)\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        if array[0] % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            char = char.lower()\n            ascii_offset = ord('a')\n            new_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n            encrypted += new_char.upper() if char.isupper() else new_char\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    lst.sort()\n    if len(lst) < 2:\n        return None\n    return lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.') + S.split('?') + S.split('s')\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n\n"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return True\n    elif isinstance(x, int) and isinstance(y, int) and not isinstance(z, int):\n        return x == y + z\n    elif isinstance(x, int) and not isinstance(y, int) and isinstance(z, int):\n        return x == y + z\n    elif not isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return y == x + z\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, float):\n        return x == y + z\n    elif isinstance(x, float) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z\n    elif isinstance(x, int) and isinstance(y, float) and isinstance(z, int):\n        return x == y + z\n    elif isinstance(x, int) and isinstance(y, int) and isinstance(z, float):\n        return x == y + z\n    else:\n        return False\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += chr(ord(char) + 2).upper()\n            else:\n                if char.islower():\n                    encoded_message += chr(ord(char) + 2)\n                else:\n                    encoded_message += chr(ord(char) + 2).lower()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(map(int, str(n)))\n\n    return sum(sum_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "HumanEval/95", "completion": "\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    a = a if a > 0 else -a\n    b = b if b > 0 else -b\n    product = a * b\n    while product > 9:\n        product = sum(int(digit) for digit in str(product))\n    return product\n\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n\n"}
{"task_id": "HumanEval/99", "completion": "\n    import math\n    return round(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    result = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            n += 2 * i\n        else:\n            n += 2 * i\n        result.append(n)\n    return result\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \"\").split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    else:\n        return (x + y) // 2\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if len(set(str(i))) == len(str(i))])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    num_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = [num_to_name.get(i, \"\") for i in arr if i > 0 and i < 10]\n    arr.sort(key=len, reverse=True)\n    return arr\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    def sum_numbers(n):\n        if n == 1:\n            return 1\n        else:\n            return n + sum_numbers(n - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result\n\n"}
{"task_id": "HumanEval/107", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            while num != 0:\n                digit = num % 10\n                if digit < 0:\n                    count += 1\n                num //= 10\n        else:\n            while num != 0:\n                digit = num % 10\n                if digit < 0:\n                    count += 1\n                num //= 10\n    return count\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1)%len(arr)]:\n            count += 1\n    return count <= 1\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [i for i in lst1 if i % 2 != 0]\n    even_lst2 = [i for i in lst2 if i % 2 == 0]\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    histogram = {}\n    words = test.split()\n    for word in words:\n        if word in histogram:\n            histogram[word] += 1\n        else:\n            histogram[word] = 1\n    return histogram\n"}
{"task_id": "HumanEval/112", "completion": "\n    for i in c:\n        s = s.replace(i, '', s.count(i))\n    return (s, s == s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(count)\n    return result\n\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    # count the number of empty wells\n    empty_wells = sum(row.count(0) for row in grid)\n    # return the number of buckets needed\n    return math.ceil(empty_wells / capacity)\n\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: bin(x).count('1'))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    vowels = \"aeiou\"\n    words = s.split()\n    result = []\n\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter.lower() not in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n\n    return result\n\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_good(s):\n        cnt = 0\n        for ch in s:\n            if ch == '(':\n                cnt += 1\n            else:\n                if cnt == 0:\n                    return False\n                cnt -= 1\n        return cnt == 0\n\n    return 'Yes' if is_good(lst[0] + lst[1]) else 'No'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Your code here\n    arr.sort(reverse=True)\n    return arr[:k]\n\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "HumanEval/122", "completion": "\n    # sort the array in ascending order\n    arr.sort()\n    # return the sum of the first k elements\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([i for i in collatz if i % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    try:\n        month, day, year = map(int, date.split('-'))\n        if (month == 4 or month == 6 or month == 9 or month == 11) and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif month > 12 or day > 31 or day < 1 or month < 1:\n            return False\n        else:\n            return True\n    except:\n        return False\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    words = txt.split()\n    if len(words) > 1:\n        return []\n    elif len(words) == 1:\n        word = words[0]\n        if ',' in word:\n            return word.split(',')\n        else:\n            return sum(1 for c in word if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst)\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    # find the intersection of the two intervals\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n\n    # if the intersection is valid (start <= end)\n    if intersection_start <= intersection_end:\n        intersection_length = intersection_end - intersection_start + 1\n\n        # check if the length is a prime number\n        if intersection_length < 2:\n            return \"NO\"\n        for i in range(2, int(intersection_length ** 0.5) + 1):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n    else:\n        sum_magnitudes = 0\n        product_signs = 1\n        for num in arr:\n            if num > 0:\n                product_signs *= 1\n                sum_magnitudes += num\n            elif num < 0:\n                product_signs *= -1\n                sum_magnitudes += -num\n            else:\n                return 0\n        return product_signs * sum_magnitudes\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n    moves = [(0, 1), (1, 0)]\n    for s in range(1, n * n):\n        for kk in range(min(s, k) + 1):\n            i, j = divmod(s, n)\n            for di, dj in moves:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n:\n                    for kkk in range(kk + 1):\n                        dp[ni][nj][kk] = min(dp[ni][nj][kk], dp[i][j][kk - kkk] + grid[ni][nj])\n    res = min(dp[n - 1][n - 1])\n    return res if res < float('inf') else -1\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(-1 + -2 + (i + 1))\n        return tri_seq\n\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum(math.ceil(i)**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    txt = txt.strip()\n    if len(txt) == 0:\n        return False\n    if txt[-1].isalpha():\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/135", "completion": "\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] >= arr[i + 1]:\n            return -1\n    return arr.index(max(arr))\n\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n\n    return largest_negative, smallest_positive\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        if \".\" in a:\n            a = float(a.replace(\",\", \".\"))\n        else:\n            a = int(a.replace(\",\", \"\"))\n    elif isinstance(a, float):\n        a = str(a).replace(\".\", \",\")\n    elif isinstance(a, int):\n        a = str(a)\n\n    if isinstance(b, str):\n        if \".\" in b:\n            b = float(b.replace(\",\", \".\"))\n        else:\n            b = int(b.replace(\",\", \"\"))\n    elif isinstance(b, float):\n        b = str(b).replace(\".\", \",\")\n    elif isinstance(b, int):\n        b = str(b)\n\n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 4 == 0\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        fact = 1\n        for i in range(1, n + 1):\n            fact *= i\n        return fact\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\")\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    pattern = r'^[a-zA-Z][0-9]{0,3}\\.[a-z]{3}$'\n\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    if x_den == 0 or n_den == 0:\n        raise ValueError('Denominator cannot be zero')\n\n    x_val = x_num / x_den\n    n_val = n_num / n_den\n\n    return x_val * n_val == int(x_val * n_val)\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n        return sum(map(int, str(n)))\n\n    return sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and (abs(num) % 10 in [1, 3, 5, 7, 9]):\n            count += 1\n    return count\n\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    if planets[planet1] > planets[planet2]:\n        planet1, planet2 = planet2, planet1\n\n    return tuple(planets.keys())[planets[planet1]+1:planets[planet2]]\n\n"}
{"task_id": "HumanEval/149", "completion": "\n    lst = [i for i in lst if len(i) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n\n"}
{"task_id": "HumanEval/150", "completion": "\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    else:\n        return sum([i**2 if i > 0 and i % 2 != 0 else 0 for i in lst])\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(i-j) if i != j else 0 for i, j in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strengths = [sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in extensions]\n    strongest_ext = extensions[strengths.index(max(strengths))]\n    return f'{class_name}.{strongest_ext}'\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    if a == b:\n        return True\n    elif len(b) > len(a):\n        return False\n    else:\n        for i in range(len(a) - len(b) + 1):\n            if a[i:i+len(b)] == b or a[i:i+len(b)] == b[::-1]:\n                return True\n        return False\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n"}
{"task_id": "HumanEval/157", "completion": "\n    # your code here\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n"}
{"task_id": "HumanEval/158", "completion": "\n    words.sort()\n    for word in words:\n        if len(set(word)) > 1:\n            return word\n    return \"\"\n\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\n"}
{"task_id": "HumanEval/161", "completion": "\n    # your code here\n    res = \"\"\n    for i in s:\n        if i.isalpha():\n            if i.islower():\n                res += i.upper()\n            else:\n                res += i.lower()\n        else:\n            res += i\n    return res[::-1]\n\n"}
{"task_id": "HumanEval/162", "completion": "\n    import hashlib\n    if text == \"\":\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\n"}
