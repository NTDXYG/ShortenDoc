{"task_id": "MBPP/11", "completion": "\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return ''.join(s)\n\n"}
{"task_id": "MBPP/12", "completion": "\n    # Create a list to store the sum of each row\n    sum_rows = [sum(row) for row in M]\n\n    # Create a list of tuples where each tuple is (sum, row)\n    sum_row_pairs = list(zip(sum_rows, M))\n\n    # Sort the list of tuples\n    sum_row_pairs.sort()\n\n    # Extract the sorted matrix\n    M_sorted = [row for _, row in sum_row_pairs]\n\n    return M_sorted\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(10)\n\n"}
{"task_id": "MBPP/14", "completion": "\n    # formula for volume of triangular prism is 1/2 * base area * height\n    base_area = (1/2) * b * h\n    volume = base_area * l\n    return volume\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall('[a-z]+', text)\n\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+_[a-z]+', text)\n\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n\n"}
{"task_id": "MBPP/20", "completion": "\n    # Your code here\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/21", "completion": "\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i*n)\n    return multiples\n\n"}
{"task_id": "MBPP/22", "completion": "\n    nums_set = set()\n    for num in nums:\n        if num in nums_set:\n            return num\n        nums_set.add(num)\n    return -1\n\n"}
{"task_id": "MBPP/23", "completion": "\n    return max(sum(i) for i in list1)\n\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal, i, n = 0, 0, 0\n    while binary != 0:\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary//10\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    for i in arr:\n        if arr.count(i) == 1:\n            product *= i\n    return product\n\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(item in test_list for item in K)\n\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d+', '', i) for i in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for element in arr:\n        res = res ^ element\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 3]\nn = len(arr)"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+2, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    count = collections.Counter(nums)\n    heap = []\n    for num, freq in count.items():\n        heapq.heappush(heap, (freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return [i[1] for i in heap]\n\n\nnums = [1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]\nk = 2"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return max_prime\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return 0\n    else:\n        return (N % 2 + 10 * decimal_To_Binary(N // 2))\n\n"}
{"task_id": "MBPP/34", "completion": "\n    # Your code here\n    for i in range(N):\n        if ar[i] != i+1:\n            return i+1\n    return N+1\n\n"}
{"task_id": "MBPP/35", "completion": "\n    return n*(n+1)//2\n\n"}
{"task_id": "MBPP/36", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "MBPP/37", "completion": "\n    mixed_list.sort(key=lambda x: (isinstance(x, str), x))\n    return mixed_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_odd_list = [i for i in list1 if i % 2 == 0 or i % 2 != 0]\n    return even_odd_list[0] / even_odd_list[1]\n\n"}
{"task_id": "MBPP/39", "completion": "\n    counter = Counter(S)\n    max_heap = []\n    for char, freq in counter.items():\n        max_heap.append((-freq, char))\n    heapq.heapify(max_heap)\n\n    result = []\n    while len(max_heap) > 1:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char2])\n        if freq1 < -1:\n            heapq.heappush(max_heap, (freq1+1, char1))\n        if freq2 < -1:\n            heapq.heappush(max_heap, (freq2+1, char2))\n\n    if max_heap:\n        result.append(max_heap[0][1])\n\n    return ''.join(result)\n\n"}
{"task_id": "MBPP/40", "completion": "\n    return Counter(chain(*nums))\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Creating an empty dictionary\n    d = {}\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # If element already exists in dictionary then increase its count\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n\n    # Traverse through dictionary and find sum of repeated elements\n    sum = 0\n    for i in d:\n        if d[i] > 1:\n            sum += i\n\n    return sum\n\n"}
{"task_id": "MBPP/43", "completion": "\n    patterns = '^[a-z]+_[a-z]+$'\n    if re.search(patterns,  text):\n        return 'Found a match!'\n    else:\n        return('Not matched!!')\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^[a-zA-Z]*\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n\n"}
{"task_id": "MBPP/47", "completion": "\n    # Initialize the last digit of factorial of A and B\n    last_digit_A = 1\n    last_digit_B = 1\n\n    # Calculate the last digit of factorial of A\n    for i in range(1, A+1):\n        last_digit_A = (last_digit_A * i) % 10\n\n    # Calculate the last digit of factorial of B\n    for i in range(1, B+1):\n        last_digit_B = (last_digit_B * i) % 10\n\n    # Calculate the last digit of factorial of B divided by factorial of A\n    last_digit_B_div_A = (last_digit_B // last_digit_A) % 10\n\n    return last_digit_B_div_A\n\n"}
{"task_id": "MBPP/48", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/49", "completion": "\n    return [nums[i][0] for i in range(N)]\n\n"}
{"task_id": "MBPP/50", "completion": "\n    min_length = min(input_list, key=lambda x: len(x))\n    return len(min_length)\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Equilateral\"\n    else:\n        return \"Not equilateral\"\n\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) > 1:\n        return str[0] == str[-1]\n    else:\n        return \"String is too short\"\n\n"}
{"task_id": "MBPP/54", "completion": "\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n\n"}
{"task_id": "MBPP/56", "completion": "\n\n    return n == rev(n) * 2 - 1\n\n"}
{"task_id": "MBPP/57", "completion": "\n    arr.sort(reverse=True)\n    return int(\"\".join(map(str, arr)))\n\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x ^ y) < 0\n\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (3 * n - 2)\n\n"}
{"task_id": "MBPP/60", "completion": "\n    # Initialize result\n    dp = [1]*n\n    hash_map = {}\n\n    # Compute optimized subsequence values\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i]-arr[j]) <= 1 and dp[j]+1 > dp[i]:\n                dp[i] = dp[j]+1\n\n    # Find maximum value in dp[] and index of it in arr[]\n    max_val = max(dp)\n    index = dp.index(max_val)\n\n    # Store elements in hash_map\n    hash_map[max_val] = [arr[index]]\n\n    # Trace back elements in arr[]\n    while max_val > 1:\n        for i in range(index-1, -1, -1):\n            if dp[i] == max_val-1 and abs(arr[index]-arr[i]) <= 1:\n                hash_map[max_val].insert(0, arr[i])\n                max_val -= 1\n                index = i\n                break\n\n    # Return subsequence\n    return hash_map[max_max]\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Create a dictionary to store the count of substrings\n    substr_count = defaultdict(int)\n\n    # Traverse through the string\n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == (j - i + 1):\n                substr_count[sum_digits] += 1\n\n    return substr_count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[2])\n\n\nsubjectmarks = [('English', 'John', 88), ('Science', 'Adam', 92), ('Maths', 'Sonia', 76)]"}
{"task_id": "MBPP/65", "completion": "\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))\n\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n\n"}
{"task_id": "MBPP/70", "completion": "\n    result = []\n    for i in range(len(Input)):\n        if len(Input[i]) == k:\n            result.append(Input[i])\n    return result\n\n\nInput = [(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13, 14), (15,)]\nk = 2"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i - j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/73", "completion": "\n    delimiters = [' ', ',', ';']\n    regex_pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(regex_pattern, text)\n\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors) - 1):\n        if colors[i] != colors[i + 1]:\n            return False\n        if patterns[i] >= patterns[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for tup in test_list:\n        for num in tup:\n            if num % K == 0:\n                result.append(tup)\n                break\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    # Your code here\n    return m*n\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even_sum += int(i)\n        else:\n            odd_sum += int(i)\n    return even_sum - odd_sum\n\n"}
{"task_id": "MBPP/78", "completion": "\n    # Initialize result\n    count = 0\n\n    # Traverse through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Count set bits in the current number\n        setBitsCount = bin(i).count(\"1\")\n\n        # If count of set bits is odd, increment count\n        if setBitsCount % 2 == 1:\n            count += 1\n\n    return count\n\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 == 1\n\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n\n"}
{"task_id": "MBPP/83", "completion": "\n    return sum(ord(c) for c in strr) % 256\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[1:]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r ** 2\n\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (2 * n - 1)\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\n"}
{"task_id": "MBPP/89", "completion": "\n    # convert N to string\n    N = str(N)\n    # find the length of N\n    length = len(N)\n    # if length of N is 1, return -1\n    if length == 1:\n        return -1\n    # convert N to list\n    N = list(N)\n    # find the first digit that is smaller than the next digit\n    for i in range(length-2, -1, -1):\n        if N[i] > N[i+1]:\n            break\n    else:\n        return -1\n    # find the smallest digit that is larger than N[i]\n    j = i+1\n    while j < length and N[j] >= N[i]:\n        j += 1\n    # swap N[i] and N[j]\n    N[i], N[j] = N[j], N[i]\n    # reverse the digits after i\n    N[i+1:] = N[i+1:][::-1]\n    # convert N back to string\n    N = ''.join(N)\n    # return the result\n    return int(N)\n"}
{"task_id": "MBPP/90", "completion": "\n    # Your code here\n    max_len = max(len(word) for word in list1)\n    return max_len\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/92", "completion": "\n    n = str(n)\n    if len(n) < 3:\n        return False\n    else:\n        for i in range(2, len(n)):\n            if n[i] == n[i-1] == n[i-2]:\n                return False\n        return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if sum(lst[i:j]) == sum(lst) / 2:\n                if j-i < min_length:\n                    min_length = j-i\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n\n"}
{"task_id": "MBPP/98", "completion": "\n    return sum(numbers) / len(numbers)\n\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n // 2)\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n    if length == 1:\n        return num\n    elif length % 2 == 0:\n        half = num[:length//2]\n        next_half = str(int(half) + 1)\n        if len(next_half) < len(half):\n            return half + half[::-1]\n        else:\n            return next_half + next_half[::-1]\n    else:\n        half = num[:length//2]\n        next_half = str(int(half) + 1)\n        if len(next_half) < len(half):\n            return half + num[length//2] + half[::-1]\n        else:\n            return next_half + num[length//2] + half[::-1]\n\n"}
{"task_id": "MBPP/101", "completion": "\n    arr.sort()\n    return arr[k-1]\n\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    return (n * eulerian_num(n - 1, m) + eulerian_num(n, m - 1))\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if i % 16 == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for i in [num1, num2, num3]:\n        if i:\n            heapq.heappush(heap, (i.pop(0), i))\n\n    res = []\n    while heap:\n        num, iterator = heapq.heappop(heap)\n        res.append(num)\n        if iterator:\n            heapq.heappush(heap, (iterator.pop(0), iterator))\n    return res\n\n\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [0, 12, 14, 16, 18]\n"}
{"task_id": "MBPP/109", "completion": "\n    # Initialize count of rotations\n    count = 0\n\n    # Traverse through the string\n    for i in range(n):\n        # If the character is '1'\n        if s[i] == '1':\n            # Increment the count\n            count += 1\n\n    # Return the count\n    return count\n\n"}
{"task_id": "MBPP/110", "completion": "\n    test_list.sort()\n    result = []\n    last_val = strt_val\n    for val in test_list:\n        if last_val < val - 1:\n            result.append((last_val, val - 1))\n        last_val = val + 1\n    if last_val < stop_val:\n        result.append((last_val, stop_val))\n    return result\n\n"}
{"task_id": "MBPP/111", "completion": "\n    if not all(isinstance(i, list) for i in nestedlist):\n        raise ValueError(\"All elements in the input list must be lists\")\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n\n"}
{"task_id": "MBPP/112", "completion": "\n    # Write your code here\n    radius = diameter / 2\n    perimeter = 2 * 3.142 * radius\n    perimeter += height\n    return perimeter\n\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    return [(i, Counter(test_list)[i]) for i in test_list]\n\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(not d for d in list1)\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list]\n\n"}
{"task_id": "MBPP/118", "completion": "\n    return list(string)\n\n"}
{"task_id": "MBPP/119", "completion": "\n    # Initialize starting index\n    start = 0\n\n    # Traverse the given array\n    for i in range(0, n, 2):\n\n        # If current element is not\n        # equal to next element then\n        # return the current element\n        if (i+1 == n or arr[i] != arr[i+1]):\n            return arr[i]\n\n        # If arr[i] is equal to arr[i+1]\n        # then increment index by 2 to\n        # check next pair\n\n"}
{"task_id": "MBPP/120", "completion": "\n    list1.sort()\n    return max(list1[0][0]*list1[0][1], list1[-1][0]*list1[-1][1])\n\n"}
{"task_id": "MBPP/121", "completion": "\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or check_triplet(A, n - 1, sum, count)\n\n"}
{"task_id": "MBPP/122", "completion": "\n    # initializing smart number count\n    smart_count = 0\n\n    # initializing number\n    num = 0\n\n    # loop until we get n smart numbers\n    while smart_count < n:\n        num += 1\n\n        # if num is a perfect square, it's not a smart number\n        if num == int(num ** 0.5) ** 2:\n            continue\n\n        # check if num is a perfect cube\n        if num == int(num ** (1. / 3.)) ** 3:\n            continue\n\n        # if num is not a perfect square or cube, it's a smart number\n        smart_count += 1\n\n    return num\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(i for i in range(1, n) if n % i == 0)\n\n    return sum(i for i in range(1, limit) if i != d(i) and i == d(d(i)))\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a+bj)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize count of 0s and 1s\n    count_zero = 0\n    count_one = 0\n\n    # Initialize max difference\n    max_diff = 0\n\n    # Traverse through the given string\n    for i in range(0, n):\n        if (string[i] == '0'):\n            count_zero += 1\n        else:\n            count_one += 1\n\n        # Update max_diff if count of 1s minus count of 0s is more than max_diff\n        if (count_one - count_zero > max_diff):\n            max_diff = count_one - count_zero\n\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    return result if (x > 0 and y > 0) or (x < 0 and y < 0) else -result\n\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n\n"}
{"task_id": "MBPP/129", "completion": "\n    # check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]):\n        return False\n\n    # calculate the sum of the first row\n    magic_constant = sum(my_matrix[0])\n\n    # check rows\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # check columns\n    for col in range(len(my_matrix[0])):\n        if sum(my_matrix[i][col] for i in range(len(my_matrix))) != magic_constant:\n            return False\n\n    # check diagonals\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != magic_constant:\n        return False\n    if sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))) != magic_constant:\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = max(count_dict.values())\n    max_nums = [num for num, count in count_dict.items() if count == max_count]\n    return max_nums, max_count\n\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = 'aeiou'\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return ''.join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n\n\ntup1 = ('h', 'e', 'l', 'l', 'o')"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        arr.pop()\n    return arr[-1] % 2 == 0\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*n-1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 150:\n        bill = 25 + ((units - 50) * 0.75)\n    elif units <= 250:\n        bill = 100 + ((units - 150) * 1.20)\n    else:\n        bill = 220 + ((units - 250) * 1.50)\n    return bill\n\n\nunits = int(input(\"Enter the number of units consumed: \"))"}
{"task_id": "MBPP/137", "completion": "\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n\n"}
{"task_id": "MBPP/139", "completion": "\n    import math\n    return 2 * math.pi * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    count_dict = {}\n    for tup in test_list:\n        for item in tup:\n            count_dict[item] = count_dict.get(item, 0) + 1\n    return [item for item, count in count_dict.items() if count == 1]\n\n"}
{"task_id": "MBPP/141", "completion": "\n    curr_size = len(nums)\n\n    while curr_size > 0:\n        # Find index of the max element in the list\n        max_idx = nums.index(max(nums[:curr_size]))\n\n        # If max element is not at the end, flip the list to move it to the end\n        if max_idx != curr_size - 1:\n            nums = nums[max_idx::-1] + nums[max_idx + 1:]\n\n        # Flip the list to move the current maximum element to its correct position\n        nums = nums[:curr_size - 1:-1] + nums[:curr_size]\n\n        curr_size -= 1\n\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    # Create a set for each list to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    set3 = set(list3)\n\n    # Use the intersection method to find common elements\n    common_elements = set1.intersection(set2).intersection(set3)\n\n    # Count the number of common elements\n    count = len(common_elements)\n\n    return count\n\n"}
{"task_id": "MBPP/143", "completion": "\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += abs(arr[i] - arr[i + 1])\n    return sum\n\n"}
{"task_id": "MBPP/145", "completion": "\n    arr.sort()\n    return max(abs(arr[i] - arr[i - 1]) for i in range(1, n))\n\n"}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for i in str1:\n        total += ord(i)\n    return total\n\n"}
{"task_id": "MBPP/147", "completion": "\n    # Start from the bottom of the triangle and move upwards\n    for i in range(m-1, -1, -1):\n        for j in range(i+1):\n            # For each element, add the maximum of the two elements below it\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    # The top element will now be the maximum path sum\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    str_x = str(x)\n    len_x = len(str_x)\n    half_x = len_x // 2\n    first_half = int(str_x[:half_x])\n    second_half = int(str_x[half_x:])\n    return sum(map(int, str(first_half))) + sum(map(int, str(second_half)))\n\n"}
{"task_id": "MBPP/149", "completion": "\n    # Initialize result\n    dp = [1] * n\n    res = 1\n\n    # Compute optimized LDS values in\n    # bottom up manner\n    for i in range(1, n):\n        # Check for all j's less than i\n        for j in range(0, i):\n            # If absolute difference is 1 and\n            # current element is greater than previous\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n                res = max(res, dp[i])\n\n    return res\n\n"}
{"task_id": "MBPP/150", "completion": "\n    # Write your code here\n    pass\n\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) == 0:\n        return x\n    elif len(x) == 1:\n        return x\n    else:\n        middle = len(x) // 2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a, b)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    x_vertex = -b / (2 * a)\n    y_vertex = c - (b ** 2) / (4 * a)\n    return (x_vertex, y_vertex)\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] == N:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "MBPP/155", "completion": "\n    # convert number to binary\n    binary = bin(n)[2:]\n\n    # toggle even bits\n    toggled_binary = ''.join(['1' if i % 2 == 0 else bit for i, bit in enumerate(binary)])\n\n    # convert back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n\n\ntuple_str = ('1', '2', '3', '4', '5')"}
{"task_id": "MBPP/157", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(list1)]\n\n"}
{"task_id": "MBPP/158", "completion": "\n    arr.sort()\n    ans = float('inf')\n    for i in range(n - k + 1):\n        ans = min(ans, arr[i + k - 1] - arr[i])\n    return ans\n\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in ['December', 'January', 'February']:\n        season = 'Winter'\n    elif month in ['March', 'April', 'May']:\n        season = 'Spring'\n    elif month in ['June', 'July', 'August']:\n        season = 'Summer'\n    else:\n        season = 'Autumn'\n\n    if days == 28:\n        print(f'{month} has 28 days. It is {season} month.')\n    elif days == 30:\n        print(f'{month} has 30 days. It is {season} month.')\n    elif days == 31:\n        print(f'{month} has 31 days. It is {season} month.')\n    else:\n        print('Invalid number of days.')\n\n\nmonth_season('February', 28)\nmonth_season('April', 30)\nmonth_season('June', 31)\nmonth_season('September', 31)\nmonth_season('December', 31)\nmonth_season('January', 31)\nmonth_season('March', 31)\nmonth_season('May', 31)\nmonth_season('July', 31)\nmonth_season('August', 31)\nmonth_season('October', 31)\nmonth_season('November', 30)\nmonth_season('February', 30)\nmonth_season('February', 31)\nmonth_season('April', 31)\nmonth_season('June', 30)\nmonth_season('July', 30)\nmonth_season('September', 30)\nmonth_season('November', 31)\nmonth_season('October', 30)\nmonth_season('December', 30)\nmonth_season('January', 30)\nmonth_season('March', 30)\nmonth_season('May', 30)\nmonth_season('August', 30)\nmonth_season('October', 31)\nmonth_season('November', 30)\nmonth_season('December', 31)\nmonth_season('January', 31)\nmonth_"}
{"task_id": "MBPP/160", "completion": "\n    x = n // a\n    y = (n - a * x) // b\n    return x, y\n\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2) + sum_series(n-4)\n\n"}
{"task_id": "MBPP/163", "completion": "\n    return (s * l**2) / (4 * tan(pi/s))\n"}
{"task_id": "MBPP/164", "completion": "\n    result = 0\n    for i in range(1, n):\n        if n % i == 0:\n            result += i\n    return result\n\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower() or str1[i] == str1[i].upper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    # Initialize result\n    cnt = 0\n\n    # Create a map to store frequency of each element\n    freq = [0] * 32\n    for i in range(N):\n        for j in range(32):\n            if ((A[i] >> j) & 1):\n                freq[j] += 1\n\n    # Iterate through all elements of array\n    for i in range(N):\n\n        # Find all pairs with xor of elements as even\n        for j in range(32):\n\n            # If j'th bit of A[i] is set\n            if ((A[i] >> j) & 1):\n\n                # Find all elements with j'th bit as not set\n                cnt += (1 << j) * (N - freq[j])\n\n                # Find all elements with j'th bit as set\n                cnt += (1 << j) * freq[j]\n\n    # Return total count of pairs with xor as even\n    return cnt\n\n"}
{"task_id": "MBPP/167", "completion": "\n    if (n and not(n & (n - 1))):\n        return n\n\n    while(n > 0):\n        n >>= 1\n\n    return 1 << (n + 1)\n\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n\n"}
{"task_id": "MBPP/172", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'\\W+','', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses = {'(': ')', '[': ']', '{': '}'}\n    for char in str1:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R):\n        for j in range(i+1, R+1):\n            if lcm(i, j) < R:\n                return [i, j]\n    return []\n"}
{"task_id": "MBPP/178", "completion": "\n    return [i for i in patterns if re.search(i, text)]\n\n\npatterns = ['cat', 'dog', 'bird']\ntext = 'I have a cat. My cat is very cute. There is a dog near my house. I saw a bird yesterday.'\n"}
{"task_id": "MBPP/179", "completion": "\n    def is_keith(n, s):\n        if n not in s:\n            s.add(n)\n            n = sum(int(i) for i in str(n))\n        else:\n            return False\n        return True\n\n    s = set()\n    return is_keith(x, s)\n\n"}
{"task_id": "MBPP/180", "completion": "\n    # Radius of earth in kilometers\n    R = 6371\n\n    # Convert degrees to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n\n    # Difference between longitudes\n    dlon = elon - slon\n\n    # Difference between latitudes\n    dlat = elat - slat\n\n    # Haversine formula\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * acos(a)\n\n    # Distance\n    distance = R * c\n\n    return distance\n\n"}
{"task_id": "MBPP/181", "completion": "\n    prefix = \"\"\n    len1 = len(str1)\n    len2 = len(str2)\n    i = 0\n    j = 0\n    while i <= len1 - 1 and j <= len2 - 1:\n        if str1[i] != str2[j]:\n            break\n        prefix = prefix + str1[i]\n        i += 1\n        j += 1\n    return prefix\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_char = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'\\d', string)\n\n    return uppercase, lowercase, special_char, numeric_values\n\n\nstring = \"Hello World123!\"\nuppercase, lowercase, special_char, numeric_values = find_character(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    arr.sort()\n    count = 0\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n\n"}
{"task_id": "MBPP/185", "completion": "\n    # y = ax^2 + bx + c\n    # The vertex of a parabola is at (h, k) where h = -b/(2a) and k = c - b^2/(4a)\n    # The focus of a parabola is at (h, k - h^2/(4a))\n    h = -b/(2*a)\n    k = c - (b**2)/(4*a)\n    focus = (h, k - h**2/(4*a))\n    return focus\n"}
{"task_id": "MBPP/186", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n\ntext = \"I love Python, Java, C++ and JavaScript\"\npatterns = [\"Python\", \"Java\", \"C++\", \"JavaScript\"]"}
{"task_id": "MBPP/187", "completion": "\n    if m == 0 or n == 0:\n        return []\n    elif X[m-1] == Y[n-1]:\n        return longest_common_subsequence(X, Y, m-1, n-1) + [X[m-1]]\n    else:\n        lcs1 = longest_common_subsequence(X, Y, m-1, n)\n        lcs2 = longest_common_subsequence(X, Y, m, n-1)\n        if len(lcs1) > len(lcs2):\n            return lcs1\n        else:\n            return lcs2\n\n"}
{"task_id": "MBPP/188", "completion": "\n    i = 0\n    while i*i <= n:\n        j = 0\n        while j*j <= n:\n            if i*i * j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n"}
{"task_id": "MBPP/189", "completion": "\n    arr = [i for i in arr if i > 0]\n    arr.sort()\n    if len(arr) == 0 or arr[0] != 1:\n        return 1\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 1:\n            return arr[i] + 1\n    return arr[-1] + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    integral_points = 0\n    for i in range(x1, x2+1):\n        for j in range(y1, y2+1):\n            integral_points += 1\n    return integral_points\n"}
{"task_id": "MBPP/191", "completion": "\n    month_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in month_30_days:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/192", "completion": "\n    has_letter = any(char.isalpha() for char in str)\n    has_number = any(char.isdigit() for char in str)\n    return has_letter and has_number\n\n"}
{"task_id": "MBPP/193", "completion": "\n    res = []\n    for i in test_tup:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal, i, n = 0, 0, str(n)\n    while i < len(n):\n        decimal = decimal + int(n[len(n) - 1 - i]) * pow(8, i)\n        i += 1\n    return decimal\n\n"}
{"task_id": "MBPP/195", "completion": "\n    for i in range(0, n):\n        if (arr[i] == x):\n            return i\n    return -1\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    # your code here\n    return tuple(a**b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # semi-major axis of the ellipse\n    a_prime = a / 2\n    # semi-minor axis of the ellipse\n    b_prime = b / 2\n\n    # semi-perimeter of the ellipse\n    s = math.pi * (3*(a_prime + b_prime) - math.sqrt((3*a_prime + b_prime)*(a_prime + 3*b_prime)))\n\n    # area of the ellipse\n    area_ellipse = math.pi * a_prime * b_prime\n\n    # area of the largest triangle inscribed in the ellipse\n    area_triangle = s * s / (4 * math.pi)\n\n    return area_triangle\n\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while n:\n        n >>= 1\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_indexes = [index for index, value in enumerate(list1) if value == max_value]\n    return max_indexes\n\n"}
{"task_id": "MBPP/201", "completion": "\n    return len(set(lst)) <= 1\n\n"}
{"task_id": "MBPP/202", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/203", "completion": "\n    # convert numbers to binary\n    bin_n1 = format(n1, 'b')\n    bin_n2 = format(n2, 'b')\n\n    # calculate the length of binary representation\n    len_n1 = len(bin_n1)\n    len_n2 = len(bin_n2)\n\n    # make the length of binary representation equal\n    if len_n1 < len_n2:\n        bin_n1 = bin_n1.zfill(len_n2)\n    elif len_n2 < len_n1:\n        bin_n2 = bin_n2.zfill(len_n1)\n\n    # calculate hamming distance\n    hamming_distance = 0\n    for i in range(len(bin_n1)):\n        if bin_n1[i] != bin_n2[i]:\n            hamming_distance += 1\n\n    return hamming_distance\n\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n\n"}
{"task_id": "MBPP/206", "completion": "\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(str(test_tup[i]) + str(test_tup[i + 1]))\n    return tuple(result)\n\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n\n    # Create a table to store results of sub-problems\n    dp = [[0 for k in range(n+1)] for x in range(n+1)]\n\n    # Build table in bottom up manner and return last entry\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            # (j-i) > LCSRe[i-1][j-1] to remove overlapping\n            if str[i-1] == str[j-1] and i != j:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n\n    return dp[n][n]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n\n"}
{"task_id": "MBPP/209", "completion": "\n    smallest = hq.heappop(heap)\n    hq.heappush(heap, a)\n    return smallest\n\nheap = [21, 1, 45, 33, 12, 9]\nhq.heapify(heap)"}
{"task_id": "MBPP/210", "completion": "\n    charRe = re.compile(r'[^a-zA-Z0-9 ]')\n    string = charRe.search(string)\n    return not bool(string)\n"}
{"task_id": "MBPP/211", "completion": "\n    # Initialize result\n    count = 0\n\n    # Traverse through every bit\n    while (n):\n        # If current bit is set, increment count\n        if (n & 1):\n            count += 1\n\n        # Right shift n by 1\n        n = n >> 1\n\n    return count\n\n"}
{"task_id": "MBPP/212", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.pow(i, 4)\n    return sum\n\n"}
{"task_id": "MBPP/213", "completion": "\n    # your code here\n    return test_tup1 + test_tup2\n\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list += alist[i] * [alist[i+1]]\n    return decoded_list\n\n"}
{"task_id": "MBPP/216", "completion": "\n    return all(item in list2 for item in list1)\n\n"}
{"task_id": "MBPP/217", "completion": "\n    # Initialize an empty character set\n    char_set = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is already present in char_set, return it\n        if i in char_set:\n            return i\n\n        # Else add current character to char_set\n        char_set.add(i)\n\n    # If no repeated character found, return 'None'\n    return None\n\n"}
{"task_id": "MBPP/218", "completion": "\n    return -1 if A == 0 or B == 0 or A == B else 1 + min_Operations(A//2, B) if A % 2 == 0 and A > B else 1 + min_Operations(A*2, B) if A < B else 1 + min_Operations(A//2, B)\n\n"}
{"task_id": "MBPP/219", "completion": "\n    test_tup = list(test_tup)\n    test_tup.sort()\n    return tuple(test_tup[:K]), tuple(test_tup[-K:])\n\n"}
{"task_id": "MBPP/220", "completion": "\n    special_chars = [',', '.']\n    for char in special_chars:\n        text = re.sub(char, ':', text, n)\n    return text\n\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    return len(set(map(type, test_tuple))) <= 1\n\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n        count += 1\n\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n % 2\n        n //= 2\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return arr[0]\n\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid-1)\n    return find_Min(arr, mid+1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n\n"}
{"task_id": "MBPP/228", "completion": "\n    # Your code here\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/229", "completion": "\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            j = j + 1\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n\n"}
{"task_id": "MBPP/231", "completion": "\n    for i in range(n - 1, -1, -1):\n        for j in range(0, i):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]\n\n\ntriangle = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    latsurf_cylinder = 2 * math.pi * r * h\n    return latsurf_cylinder\n\n"}
{"task_id": "MBPP/234", "completion": "\n    return l**3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary[i] = '1'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    # Initialize the count of triangles\n    count = 0\n\n    # Initialize the side of the triangle\n    side = 1\n\n    # Loop until the side of the triangle is less than or equal to N\n    while side <= N:\n        # Calculate the number of triangles that can be formed with the current side\n        num_triangles = (N - side) // (2 * side)\n\n        # Update the count of triangles\n        count += num_triangles\n\n        # Update the side of the triangle\n        side += 1\n\n    # Return the count of triangles\n    return count\n\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    return {k: v for k, v in count.items() if v > 1}\n\n"}
{"task_id": "MBPP/238", "completion": "\n    return sum(i * (len(str) - i) + 1 for i in range(len(str)))\n\n"}
{"task_id": "MBPP/239", "completion": "\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, m + 1):\n        dp[i] = 2 * dp[i - 1]\n        if i - 2 >= 0:\n            dp[i] += dp[i - 2]\n    return dp[n]\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1:] = list2\n    return list1\n\n"}
{"task_id": "MBPP/241", "completion": "\n    array_3d = [['*' * o for _ in range(n)] for _ in range(m)]\n    return array_3d\n\n\nm = 3\nn = 4\no = 5"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: lst.count(x))\n\n"}
{"task_id": "MBPP/244", "completion": "\n    # find next perfect square\n    next_square = math.sqrt(N) + 1\n    return int(next_square * next_square)\n\n"}
{"task_id": "MBPP/245", "completion": "\n    # Initializing the dp arrays\n    dp1 = [0]*n\n    dp2 = [0]*n\n\n    # Initialize maximum sum\n    max_sum = float('-inf')\n\n    # Initialize dp1 and dp2\n    for i in range(n):\n        dp1[i] = arr[i]\n        dp2[i] = arr[i]\n\n    # Compute maximum sum increasing sub-sequence\n    for i in range(1, n):\n        for j in range(i):\n            if (arr[i] > arr[j] and dp1[i] < dp1[j] + arr[i]):\n                dp1[i] = dp1[j] + arr[i]\n\n    # Compute maximum sum decreasing sub-sequence\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if (arr[i] > arr[j] and dp2[i] < dp2[j] + arr[i]):\n                dp2[i] = dp2[j] + arr[i]\n\n    # Compute maximum sum bi-tonic sub-sequence\n    for i in range(n):\n        max_sum = max(max_sum, dp1[i]+dp2[i]-arr[i])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    # Initial guess\n    x = number / 2.0\n\n    while True:\n        # Improved guess\n        y = (x + number / x) / 2.0\n\n        # Check if guess is good enough\n        if abs(y - x) < 0.000001:\n            return y\n\n        # Update guess\n        x = y\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n"}
{"task_id": "MBPP/248", "completion": "\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + (harmonic_sum(n - 1))\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n\narray_nums1 = [1, 2, 3, 4, 5]\narray_nums2 = [2, 4, 6, 8, 10]"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n\n"}
{"task_id": "MBPP/251", "completion": "\n    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n"}
{"task_id": "MBPP/252", "completion": "\n    try:\n        real = numbers[0]\n        imag = numbers[1]\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.atan2(imag, real)\n        return (magnitude, angle)\n    except Exception as e:\n        return str(e)\n\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*|\\be\\w*', text, re.I)\n\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\ncolors = ['red', 'blue', 'green']\nn = 2\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)\n\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n\n"}
{"task_id": "MBPP/259", "completion": "\n    # your code here\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/260", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(num):\n        return num * num + 1\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n        num = newman_shanks_williams(num)\n        if is_prime(num):\n            count += 1\n    return num\n\n"}
{"task_id": "MBPP/261", "completion": "\n    result = tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/262", "completion": "\n    return list1[:L], list1[L:]\n\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age / 7\n\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**2\n    return sum\n\n"}
{"task_id": "MBPP/268", "completion": "\n    return n*(n+1)/2\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n\n"}
{"task_id": "MBPP/272", "completion": "\n    return [i[-1] for i in test_list]\n\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(i - j for i, j in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum = 0\n\n    # Loop through all binomial coefficients\n    for i in range(n // 2 + 1):\n\n        # Calculate binomial coefficient\n        coeff = math.comb(n, i)\n\n        # If index is even, add to sum\n        if i % 2 == 0:\n            sum += coeff\n\n    return sum\n\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == n:\n                return i\n        return -1\n"}
{"task_id": "MBPP/276", "completion": "\n    from math import pi\n    return pi * r**2 * h\n\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v > n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/279", "completion": "\n    return n*(7*n-5)//2\n"}
{"task_id": "MBPP/280", "completion": "\n    pos = 0\n    found = False\n\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n    return found\n\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) < i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/286", "completion": "\n    # Initialize result\n    res = -1\n\n    # Compute sum of all array elements\n    total_sum = sum(a)\n\n    # Compute sum of k*(sum of array elements)\n    k_total_sum = total_sum * k\n\n    # Initialize current sum as 0\n    curr_sum = 0\n\n    # Traverse through the array\n    for i in range(n):\n\n        # Add current element to current sum\n        curr_sum += a[i]\n\n        # If current sum becomes greater than or equal to k_total_sum, update result\n        if curr_sum >= k_total_sum:\n            res = max(res, curr_sum)\n\n        # If current sum becomes less than 0, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return res\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\n"}
{"task_id": "MBPP/288", "completion": "\n    # Initialize result\n    res = 0\n\n    # Compute inverse of all array elements\n    for i in range(N):\n        res = (res + pow(arr[i], P-2, P)) % P\n\n    return res\n\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 366\n            else:\n                return 365\n        else:\n            return 366\n    else:\n        return 365\n\n"}
{"task_id": "MBPP/290", "completion": "\n    return max(list1, key=len)\n\n"}
{"task_id": "MBPP/291", "completion": "\n    # if there are no posts or no colors, there are no ways\n    if n == 0 or k == 0:\n        return 0\n    # if there is only one post, there are k ways\n    if n == 1:\n        return k\n    # if there are only two posts, there are k*k ways\n    if n == 2:\n        return k * k\n\n    # dp[i] will be storing count of ways for i posts\n    dp = [0] * (n + 1)\n\n    # for 1st post, there are k ways\n    dp[1] = k\n\n    # for 2nd post, there are k*k ways\n    dp[2] = k * k\n\n    # for i-th post, there are 2 ways either paint it same as (i-1)th post or different\n    # so total ways are dp[i-1]*k + dp[i-2]*(k-1)\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        quotient = n / m\n        return quotient\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n\n"}
{"task_id": "MBPP/294", "completion": "\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the sum of each tuple\n    sum_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for tup in stdata:\n        # Add the sum of the tuple to the corresponding key in the dictionary\n        sum_dict[tup[0]] += sum(tup[1:])\n\n    # Return the maximum sum\n    return max(sum_dict.values())\n"}
{"task_id": "MBPP/300", "completion": "\n    dp = [[0]*2 for _ in range(n+1)]\n    dp[0][0] = dp[0][1] = 1\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0] + dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n][0] + dp[n][1]\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        if len(d) == 0:\n            return 1\n        else:\n            return max(dict_depth(v) for v in d.values()) + 1\n    else:\n        return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    # Your code here\n    count = 0\n    while (n):\n        count += 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/303", "completion": "\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                inversions += 1\n    return inversions\n\n"}
{"task_id": "MBPP/304", "completion": "\n    # Rotate array to the left by rotations\n    arr = arr[rotations:] + arr[:rotations]\n\n    # Find the element at the given index\n    element = arr[index]\n\n    return element\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if re.match('^p', word)]\n\n\nwords = ['python', 'programming', 'problem', 'pair', 'parrot', 'pizza']"}
{"task_id": "MBPP/306", "completion": "\n    if index == 0:\n        return a[0]\n    max_sum = 0\n    for i in range(index - 1, -1, -1):\n        if a[i] < a[index] and a[index] - a[i] <= k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    if m > n or m < 0 or n > len(tuplex):\n        return ()\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    # Merge two lists\n    nums = nums1 + nums2\n    # Sort the list\n    nums.sort()\n    # Return the last N numbers\n    return nums[-N:]\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    # convert number to binary\n    binary = bin(n)[2:]\n    # find the position of the leftmost unset bit\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            # set the bit\n            binary = binary[:i] + '1' + binary[i+1:]\n            break\n    # convert back to decimal\n    return int(binary, 2)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n\n"}
{"task_id": "MBPP/313", "completion": "\n    pos_list = [i for i in list1 if i > 0]\n    return pos_list\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or not n:\n        return 0\n\n    dp = [0] * n\n    dp[:2] = grid[0][:2]\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-2] + grid[0][i], dp[i-1])\n\n    for i in range(1, 2):\n        new_dp = [0] * n\n        new_dp[0] = max(dp[0], grid[i][0])\n        for j in range(1, n):\n            new_dp[j] = max(new_dp[j-1], dp[j]) + grid[i][j]\n        dp, new_dp = new_dp, dp\n\n    return dp[-1]\n\n"}
{"task_id": "MBPP/315", "completion": "\n    str = str.split()\n    even_len_words = [word for word in str if len(word) % 2 == 0]\n    if even_len_words:\n        return max(even_len_words, key=len)\n    return \"No even length word found\"\n\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(len(list(group)), value) for value, group in groupby(alist)]\n\n"}
{"task_id": "MBPP/318", "completion": "\n    # Initialize the maximum volume\n    max_vol = 0\n\n    # Loop through all possible combinations of sides\n    for a in range(1, s//2+1):\n        for b in range(a, (s-a)//2+1):\n            for c in range(b, s-a-b+1):\n                # Calculate the volume of the cuboid\n                vol = a * b * c\n                # Update the maximum volume if the current volume is larger\n                max_vol = max(max_vol, vol)\n\n    return max_vol\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    words = re.findall(pattern, text)\n    return words\n\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = sum([i**2 for i in range(1, n+1)])\n    square_of_sum = sum(range(1, n+1))**2\n    return square_of_sum - sum_of_squares\n\n"}
{"task_id": "MBPP/321", "completion": "\n    # Initialize the list of demlo numbers\n    demlo_numbers = []\n\n    # Iterate over the range from 1 to the given number\n    for i in range(1, s+1):\n        # Check if the number is a demlo number\n        if i % 3 == 0 and i % 2 == 0:\n            demlo_numbers.append(i)\n\n    # Return the list of demlo numbers\n    return demlo_numbers\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_indices = [i for i, val in enumerate(list1) if val == min_val]\n    return min_indices\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[n - 1]\n    for i in range(n - 1, out_of_place, -1):\n        arr[i] = arr[i - 1]\n    arr[out_of_place] = temp\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[::2])\n\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum number of squares sum equal to i\n    dp = [0, 1, 2, 3]\n\n    for i in range(4, n + 1):\n        # Initialize the minimum number of squares sum equal to i as i (i.e., 1^2 + ... + 1^2)\n        dp.append(i)\n\n        # For each j from 1 to i\n        for j in range(1, i):\n            # If j^2 is greater than i, break the loop\n            if j * j > i:\n                break\n\n            # Update the minimum number of squares sum equal to i as the minimum of the current value and dp[i - j * j] + 1\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    str1 = ' '.join(test_list)\n    str1 = str1.lower()\n    str1 = str1.split()\n    dict1 = defaultdict(int)\n    for i in str1:\n        dict1[i] += 1\n    max_value = max(dict1.values())\n    max_keys = [k for k, v in dict1.items() if v == max_value]\n    return max_keys\n\n\ntest_list = ['Hello', 'world', 'hello', 'world', 'hello', 'world', 'python', 'python', 'python', 'java', 'java', 'java']"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/328", "completion": "\n    list1 = list1[m:n] + list1[:m]\n    return list1\n\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n\n\ntext = \"Hello world, this is a three character long word, but this is a five character long word.\""}
{"task_id": "MBPP/331", "completion": "\n    return bin(n).count('0') - 1\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key = lambda x: x[1])\n\nsub_li = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]"}
{"task_id": "MBPP/334", "completion": "\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return \"Not a valid triangle\"\n    else:\n        return \"Valid triangle\"\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n / 2 * (2 * a + (n - 1) * d)\n\n"}
{"task_id": "MBPP/336", "completion": "\n    month_31_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']\n    month_30_days = ['April', 'June', 'September', 'November']\n    if monthname1 in month_31_days:\n        return 31\n    elif monthname1 in month_30_days:\n        return 30\n    elif monthname1 == 'February':\n        return 28\n    else:\n        return \"Invalid month name\"\n\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b(?=\\W*$)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[0]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/339", "completion": "\n    divisor = []\n    for i in range(1, min(x, y) + 1):\n        if x % i == 0 and y % i == 0:\n            divisor.append(i)\n    return max(divisor)\n\n"}
{"task_id": "MBPP/340", "completion": "\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(s)\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    max_val = float('-inf')\n\n    for i, l in enumerate(list):\n        if l:\n            heappush(min_heap, Node(l[0], i, 0))\n            max_val = max(max_val, l[0])\n\n    min_range = float('inf')\n    result = [0, 0]\n\n    while len(min_heap) == len(list):\n        node = heappop(min_heap)\n        if max_val - node.value < min_range:\n            min_range = max_val - node.value\n            result = [node.value, max_val]\n\n        if len(list[node.list_num]) > node.index + 1:\n            next_node = Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heappush(min_heap, next_node)\n            max_val = max(max_val, next_node.value)\n\n    return result\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i*j) % 2 != 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 0:\n        return 0\n    if k == 1:\n        return 1\n    if n < k:\n        return zigzag(n, n)\n    else:\n        return 1 + zigzag(n - k, k + 1)\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # Your code here\n    return m*n\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0:\n        return 1\n    if r == 0:\n        return 0\n    return bin_coff(n - 1, r) + bin_coff(n, r - 1)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    for i in string:\n        if i != '0' and i != '1':\n            return False\n    return True\n\n"}
{"task_id": "MBPP/350", "completion": "\n    # your code goes here\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] == s[right]:\n            left += 1\n            right -= 1\n        else:\n            break\n    return right - left + 1\n\n"}
{"task_id": "MBPP/351", "completion": "\n    # Creating an empty hash table\n    hash_map = {}\n\n    # Traverse through the given array\n    for i in range(n):\n\n        # If element already exists in hash_map, increment its count\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n\n        # Else add element to hash_map\n        else:\n            hash_map[arr[i]] = 1\n\n        # If count of the element is equal to k, return the element\n        if hash_map[arr[i]] == k:\n            return arr[i]\n\n    return -1\n\n"}
{"task_id": "MBPP/352", "completion": "\n    # Create an empty set\n    st = set()\n\n    # Traverse through the given string\n    for i in str:\n\n        # If current character is already present in set, return False\n        if i in st:\n            return False\n\n        # Else add current character to set\n        st.add(i)\n\n    # If all characters are unique, return True\n    return True\n\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n\n"}
{"task_id": "MBPP/355", "completion": "\n    # The number of rectangles in a circle is given by the formula:\n    # n = 4 * (pi * r^2)\n    # We can use the math library to get the value of pi\n    import math\n    return 4 * (math.pi * radius ** 2)\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - a - b\n\n"}
{"task_id": "MBPP/357", "completion": "\n    max_val = max(test_list, key=lambda item: item[1])\n    return max_val\n\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n\nnums1 = [10, 20, 30, 40, 50]\nnums2 = [2, 4, 0, 10, 15]\n"}
{"task_id": "MBPP/359", "completion": "\n    # write your code here\n    import math\n    d = b**2 - 4*a*c\n    if d < 0:\n        return False\n    elif d == 0:\n        x = -b / (2*a)\n        return x == b/a\n    else:\n        x1 = (-b + math.sqrt(d)) / (2*a)\n        x2 = (-b - math.sqrt(d)) / (2*a)\n        return x1 == b/a or x2 == b/a\n\n"}
{"task_id": "MBPP/360", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n - 1) + get_carol(n - 2)\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    max_occurrences = max(num_dict.values())\n    max_nums = [num for num, occurrences in num_dict.items() if occurrences == max_occurrences]\n    return max_nums, max_occurrences\n\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x+K, y+K, z+K) for x, y, z in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flips = 0\n    for i in range(len(ch) - 1):\n        if ch[i] == ch[i + 1]:\n            flips += 1\n    return flips\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n"}
{"task_id": "MBPP/366", "completion": "\n    product_list = [list_nums[i]*list_nums[i+1] for i in range(len(list_nums)-1)]\n    return max(product_list)\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    height_diff = get_height(root.left) - get_height(root.right)\n    if abs(height_diff) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return tuple(test_tup * N)\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x[1]))\n\n\nprice = [('item1', '14.99'), ('item2', '9.99'), ('item3', '19.99')]"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return right_element + 1\n    if left_element != A[left_element]:\n        return left_element\n\n    mid_element = (left_element + right_element) // 2\n    if A[mid_element] == mid_element:\n        return smallest_missing(A, mid_element + 1, right_element)\n    return smallest_missing(A, left_element, mid_element)\n\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    else:\n        result = []\n        for perm in permute_string(str[1:]):\n            for i in range(len(str)):\n                result.append(perm[:i] + str[0] + perm[i:])\n        return result\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    # initializing empty dictionary\n    res = {}\n\n    # iterating over tuple elements\n    for tup in test_tup:\n        # checking if element exists as key in dictionary\n        if tup in res:\n            # if exists, incrementing its value by 1\n            res[tup] += 1\n        else:\n            # if not exists, adding it to dictionary with value 1\n            res[tup] = 1\n\n    # initializing empty list\n    result = []\n\n    # iterating over dictionary items\n    for key, value in res.items():\n        # if value is more than 1, appending custom value to list\n        if value > 1:\n            result.append((\"replica\", key))\n        else:\n            # if value is 1, appending original value to list\n            result.append(key)\n\n    return tuple(result)\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    return test_list[-1:] + test_list[:-1]\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n\n"}
{"task_id": "MBPP/380", "completion": "\n    multilist = [[0 for col in range(colnum)] for row in range(rownum)]\n    return multilist\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n\n\ndata = [[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]]\nindex = 1"}
{"task_id": "MBPP/382", "completion": "\n    left = 0\n    right = len(A) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\n"}
{"task_id": "MBPP/383", "completion": "\n    binary = bin(n)[2:]\n    binary = list(binary)\n    for i in range(len(binary)):\n        if i % 2 != 0:\n            if binary[i] == '0':\n                binary[i] = '1'\n            else:\n                binary[i] = '0'\n    return int(''.join(binary), 2)\n\n"}
{"task_id": "MBPP/384", "completion": "\n    min_val = min(arr)\n    return arr.count(min_val)\n\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    return get_perrin(n - 1) + get_perrin(n - 2)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    open_brackets = []\n    swap_count = 0\n    for bracket in s:\n        if bracket == '[':\n            open_brackets.append(bracket)\n        else:\n            if len(open_brackets) > 0:\n                open_brackets.pop()\n            else:\n                swap_count += 1\n                open_brackets.append('[')\n    swap_count += len(open_brackets)\n    return swap_count\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # convert hexadecimal to decimal\n    decimal = int(N, 16)\n\n    # check if the number is even or odd\n    if decimal % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/388", "completion": "\n    i = 0\n    while (1 << i) <= n:\n        i += 1\n    return 1 << (i - 1)\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_0 = 2\n    lucas_1 = 1\n    for _ in range(2, n + 1):\n        lucas_0, lucas_1 = lucas_1, lucas_0 + lucas_1\n    return lucas_1\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n\n"}
{"task_id": "MBPP/391", "completion": "\n    return [{l1[i]: {l2[i]: l3[i]}} for i in range(len(l1))]\n\n\nl1 = ['a', 'b', 'c']\nl2 = ['x', 'y', 'z']\nl3 = [1, 2, 3]\n"}
{"task_id": "MBPP/392", "completion": "\n    if n < 12:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    max_length = max(input_list, key=lambda x: len(x))\n    return max_length\n\n"}
{"task_id": "MBPP/394", "completion": "\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    # your code here\n    result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return result\n\n"}
{"task_id": "MBPP/400", "completion": "\n    from collections import Counter\n    return Counter(test_list)\n\n"}
{"task_id": "MBPP/401", "completion": "\n    # initializing empty list\n    res = []\n\n    # iterate through the tuples\n    for i in range(0, len(test_tup1)):\n        # initializing empty list\n        temp = []\n        for j in range(0, len(test_tup1[i])):\n            # adding elements of tuples\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        res.append(tuple(temp))\n    return tuple(res)\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    numerator = 1\n    for i in range(0 , r):\n        numerator = (numerator * (n - i)) % p\n    denominator = 1\n    for i in range(1, r + 1):\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "MBPP/405", "completion": "\n    return tuplex in tuple1\n\ntuplex = \"p\"\ntuple1 = (\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")"}
{"task_id": "MBPP/406", "completion": "\n    # convert the number to binary\n    binary = bin(x)[2:]\n\n    # count the number of 1s in the binary representation\n    count = binary.count('1')\n\n    # if the count is even, return 0 (even parity)\n    if count % 2 == 0:\n        return 0\n    # if the count is odd, return 1 (odd parity)\n    else:\n        return 1\n\n"}
{"task_id": "MBPP/407", "completion": "\n    num_list = [int(i) for i in str(n)]\n    for i in range(len(num_list) - 1, 0, -1):\n        if num_list[i] > num_list[i - 1]:\n            num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n            return int(''.join(map(str, num_list)))\n    return -1\n\n"}
{"task_id": "MBPP/408", "completion": "\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n            push(i + 1, 1)\n    return pairs\n"}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) == 0:\n        return None\n    min_product = list1[0][0] * list1[0][1]\n    min_tuple = list1[0]\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n            min_tuple = tup\n    return min_tuple\n\n"}
{"task_id": "MBPP/410", "completion": "\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n\n"}
{"task_id": "MBPP/411", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n"}
{"task_id": "MBPP/412", "completion": "\n    return [i for i in l if i % 2 == 0]\n\n"}
{"task_id": "MBPP/413", "completion": "\n    return [i[n] for i in list1]\n\n"}
{"task_id": "MBPP/414", "completion": "\n    return any(value in list1 for value in list2)\n\n"}
{"task_id": "MBPP/415", "completion": "\n    arr.sort()\n    return max(arr[-1]*arr[-2], arr[0]*arr[1])\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + breakSum(n-1)\n"}
{"task_id": "MBPP/417", "completion": "\n    return [(i[0], sum(x[1] for x in Input if x[0] == i[0])) for i in Input]\n\n"}
{"task_id": "MBPP/418", "completion": "\n    max_len = max(len(sub) for sub in lst)\n    return max_len\n\n"}
{"task_id": "MBPP/419", "completion": "\n    list1 = [round(num) for num in list1]\n    return sum(list1) * len(list1)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"}
{"task_id": "MBPP/421", "completion": "\n    # initializing string\n    str1 = ''\n\n    # using join() to concatenate string\n    str1 = ' '.join(test_tup)\n\n    # return concatenated string\n    return str1\n\n"}
{"task_id": "MBPP/422", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"}
{"task_id": "MBPP/423", "completion": "\n    gold_table = [[0 for _ in range(m)] for _ in range(n)]\n\n    for col in range(n-1, -1, -1):\n        for row in range(m):\n            if col == n - 1:\n                right = 0\n            else:\n                right = gold_table[row][col+1]\n\n            if row == 0 or col == n - 1:\n                right_up = 0\n            else:\n                right_up = gold_table[row-1][col+1]\n\n            if row == m - 1 or col == n - 1:\n                right_down = 0\n            else:\n                right_down = gold_table[row+1][col+1]\n\n            gold_table[row][col] = gold[row][col] + max(right, right_up, right_down)\n\n    max_gold = gold_table[0][0]\n    for i in range(1, m):\n        max_gold = max(max_gold, gold_table[i][0])\n\n    return max_gold\n\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    p = re.compile('(\\d{4})-(\\d{2})-(\\d{2})')\n    m = p.match(dt)\n    if m:\n        return '{}-{}-{}'.format(m.group(3), m.group(2), m.group(1))\n    else:\n        return dt\n\n"}
{"task_id": "MBPP/428", "completion": "\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    return abs(b**2 - 4*a*c)**0.5\n"}
{"task_id": "MBPP/431", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2 * height\n\n"}
{"task_id": "MBPP/433", "completion": "\n    return [i > number for i in arr]\n\n"}
{"task_id": "MBPP/434", "completion": "\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n\n"}
{"task_id": "MBPP/436", "completion": "\n    neg_list = [i for i in list1 if i < 0]\n    return neg_list\n\n"}
{"task_id": "MBPP/437", "completion": "\n    return str1[::2]\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n\n"}
{"task_id": "MBPP/440", "completion": "\n    # Define the regular expression for adverbs\n    adverb_regex = r'\\b(?:very|just|so|fairly|too)\\b'\n\n    # Find all matches in the text\n    matches = re.finditer(adverb_regex, text)\n\n    # Create a list to store the positions of the matches\n    positions = []\n\n    # Loop through the matches and add their positions to the list\n    for match in matches:\n        positions.append(match.start())\n\n    # Return the list of positions\n    return positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"}
{"task_id": "MBPP/443", "completion": "\n    # Initialize the largest negative number to the smallest possible integer\n    largest_neg = -999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:K] for t in test_list]\n\n\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)]\nK = 3"}
{"task_id": "MBPP/445", "completion": "\n    res = tuple(i*j for i, j in zip(test_tup1, test_tup2))\n    return res\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(lst)\n    return {i: count[i] for i in tup}\n\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        perrin = [0, 1, 1]\n        for i in range(3, n + 1):\n            perrin.append(perrin[i - 2] + perrin[i - 3])\n        return sum(perrin)\n\n"}
{"task_id": "MBPP/449", "completion": "\n    # calculate area of triangle\n    area = abs(((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))\n\n    # if area is zero, then points are collinear\n    if area == 0:\n        return \"Points are collinear\"\n    else:\n        return \"Points form a triangle\"\n\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [i[::-1] for i in stringlist]\n\n"}
{"task_id": "MBPP/457", "completion": "\n    # Your code here\n    return min(len(sublist) for sublist in lst)\n\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]+', '', str1)\n\n"}
{"task_id": "MBPP/460", "completion": "\n    return [i[0] for i in lst]\n\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1) + 1):\n        result.extend(combinations(list1, i))\n    return result\n\n"}
{"task_id": "MBPP/463", "completion": "\n    if len(arr) == 0:\n        return 0\n\n    max_end_here = arr[0]\n    min_end_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_end_here, min_end_here = min_end_here, max_end_here\n\n        max_end_here = max(arr[i], max_end_here * arr[i])\n        min_end_here = min(arr[i], min_end_here * arr[i])\n\n        max_so_far = max(max_so_far, max_end_here)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return all(value == values[0] for value in values)\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    return oct(deciNum)[2:]\n\n"}
{"task_id": "MBPP/468", "completion": "\n    # Initialize maximum and minimum product for current element\n    max_end = arr[0]\n    min_end = arr[0]\n\n    # Initialize maximum product\n    max_product = arr[0]\n\n    # Traverse through the array. Following steps are\n    # performed for every element arr[i]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_end, min_end = min_end, max_end\n\n        max_end = max(arr[i], max_end * arr[i])\n        min_end = min(arr[i], min_end * arr[i])\n\n        # Max Product of array.\n        max_product = max(max_product, max_end)\n\n    return max_product\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if k >= n // 2:\n        return sum(price[i] - price[i - 1] for i in range(1, n) if price[i] > price[i - 1])\n\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = max(dp[i - 1][j], max((price[i] - price[x] + dp[x - 1][j - 1] for x in range(i))))\n\n    return dp[-1][-1]\n\n"}
{"task_id": "MBPP/470", "completion": "\n    res = []\n    for i in range(len(test_tup) - 1):\n        res.append(test_tup[i] + test_tup[i + 1])\n    return tuple(res)\n\n"}
{"task_id": "MBPP/471", "completion": "\n    # Initialize result\n    res = 1\n\n    # Compute the remainder of the product of all elements in the array\n    # divided by n\n    for i in range(lens):\n        res = (res * arr[i]) % n\n\n    return res\n\n"}
{"task_id": "MBPP/472", "completion": "\n    return sorted(l) == list(range(min(l), max(l) + 1))\n\n"}
{"task_id": "MBPP/473", "completion": "\n    result = []\n    for i in test_list1:\n        for j in test_list2:\n            if set(i) == set(j):\n                result.append(i)\n    return result\n\n\ntest_list1 = [(7, 1, 3), (4, 8, 2), (9, 6, 5), (1, 3, 7)]\ntest_list2 = [(7, 3, 1), (2, 4, 8), (6, 9, 5), (3, 7, 1)]"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return Counter(dict1)\n\n"}
{"task_id": "MBPP/476", "completion": "\n    # sort the array\n    nums.sort()\n    # return the sum of the first and last elements\n    return nums[0] + nums[-1]\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]+', '', str1)\n\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n /= 10\n    return int(n)\n\n"}
{"task_id": "MBPP/480", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return max(dict, key=dict.get)\n\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n\nset = [3, 1, 5, 9, 12]\nsum = 22\nn = len(set)"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z]+[a-z]*'\n    return re.findall(pattern, text)\n\n"}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    i = 1\n    while True:\n        if factorial(i) % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    return [i for i in test_list1 if i not in test_list2]\n\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return \"Invalid input\"\n    fact_n = 1\n    for i in range(1, n+1):\n        fact_n *= i\n\n    fact_r = 1\n    for i in range(1, r+1):\n        fact_r *= i\n\n    fact_n_r = 1\n    for i in range(1, n-r+1):\n        fact_n_r *= i\n\n    return fact_n // (fact_r * fact_n_r)\n\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n\n"}
{"task_id": "MBPP/488", "completion": "\n    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a * a) / 4\n\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    return arr.count(max_val)\n\n"}
{"task_id": "MBPP/490", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r ** n) / (1 - r)\n\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while(first <= last and not found):\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\t\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the center of the hexagon\n    centerx = (startx + endx) / 2\n    centery = (starty + endy) / 2\n\n    # Calculate the angle of the hexagon\n    angle = math.atan2(endy - starty, endx - startx)\n\n    # Calculate the points of the hexagon\n    points = []\n    for i in range(6):\n        x = centerx + radius * math.cos(angle + i * 2 * math.pi / 6)\n        y = centery + radius * math.sin(angle + i * 2 * math.pi / 6)\n        points.append((x, y))\n\n    return points\n\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(''.join(str(i) for i in test_tup), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n\n"}
{"task_id": "MBPP/496", "completion": "\n    heapq.heapify(nums)\n    return heapq.nsmallest(n, nums)\n\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h ** 2 + r ** 2))\n\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return sum(nums)\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum\n\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    count = A.count(0)\n    A = [i for i in A if i != 0]\n    return A + [0]*count\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 0:\n        return 1\n    return n * permutation_coefficient(n - 1, k) / k\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n\n\nlist1 = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nremovewords = ['apple', 'date']\n"}
{"task_id": "MBPP/508", "completion": "\n    return all(i in l2 for i in l1)\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        sum += i\n        count += 1\n    return sum/count\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    res = 0\n    prefix_log = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] * arr[i - 1]\n        prefix_log[i] = prefix_log[i - 1] + math.log(arr[i - 1])\n    for i in range(1, n + 1):\n        if dp[i] < k:\n            res += i\n        else:\n            # find the largest j < i such that dp[j] * 2^(i-j) < k\n            # which is equivalent to find the largest j < i such that prefix_log[j] + log(2) * (i - j) < log(k)\n            j = binary_search(prefix_log, i, math.log(k) - math.log(2))\n            res += i - j\n    return res\n\n"}
