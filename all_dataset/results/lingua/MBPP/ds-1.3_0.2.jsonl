{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence < last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    else:\n        return s[:last_occurrence] + s[last_occurrence + 1:]\n"}
{"task_id": "MBPP/12", "completion": "\n    # Get the number of rows and columns\n    rows, cols = len(M), len(M[0])\n\n    # Create a new matrix to hold the sorted rows\n    sorted_M = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    # Sort the rows of the matrix\n    for i in range(rows):\n        for j in range(cols):\n            sorted_M[i][j] = M[j][i]\n\n    return sorted_M\n"}
{"task_id": "MBPP/13", "completion": "\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Get the 10 most common words\n    common_words = word_counts.most_common(10)\n\n    return common_words\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input. Length, Breadth and Height should be positive.\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split('(?=[a-z])', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.sub(r'([a-z]+)_+([a-z]+)', lambda m: m.group(1).lower() + '_' + m.group(2).lower(), text)\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    list1 = [False] * NO_OF_CHARS\n    ans = []\n\n    for char in string:\n        list1[ord(char)] = True\n\n    for char in string:\n        if not list1[ord(char)]:\n            ans.append(char)\n\n    return ''.join(ans)\n\n"}
{"task_id": "MBPP/19", "completion": "\n    # convert list to set to remove duplicates\n    arraynums_set = set(arraynums)\n\n    # if the length of the set is not equal to the length of the list,\n    # it means there are duplicates\n    if len(arraynums) != len(arraynums_set):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    elif x == 42:"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(n, m*n, n)]\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for sublist in list1:\n        max_sum += max(sublist)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    return int(binary, 2)\n\n"}
{"task_id": "MBPP/25", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the product of non-repeated elements\n    product = 1\n    for key, value in freq.items():\n        if value == 1:\n            product *= key\n\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(i) == K for i in test_list)\n"}
{"task_id": "MBPP/27", "completion": "\n    return [''.join(re.sub(r'\\d', '', s) for s in list) for s in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k == 1:\n        return n\n    if k == n-k:\n        return n-k\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"}
{"task_id": "MBPP/29", "completion": "\n    res = [0]*32\n    for i in range(0, arr_size):\n        bit = (arr[i] & 1)\n        res[bit] = res[bit] + 1\n    res[0] = arr_size - res[0]\n    res[1] = arr_size - res[1]\n    res[2] = arr_size - res[2]\n    res[3] = arr_size - res[3]\n    res[4] = arr_size - res[4]\n    res[5] = arr_size - res[5]\n    res[6] = arr_size - res[6]\n    res[7] = arr_size - res[7]\n    res[8] = arr_size - res[8]\n    res[9] = arr_size - res[9]\n    res[10] = arr_size - res[10]\n    res[11] = arr_size - res[11]\n    res[12] = arr_size - res[12]\n    res[13] = arr_size - res[13]\n    res[14] = arr_size - res[14]\n    res[15] = arr_size - res[15]\n    res[16] = arr_size - res[16]\n    res[17] = arr_size - res[17]\n    res[18] = arr_size - res[18]\n    res[19] = arr_size - res[19]\n    res[20] = arr_size - res[20]\n    res[21] = arr_size - res[21]\n    res[22] = arr_size - res[22]\n    res[23] = arr_size - res[23]\n    res[24] = arr_size - res[24]\n    res[25] = arr_size - res[25]\n    res[26] = arr_size - res[26]\n    res[27] = arr_size - res[27]\n    res[28] ="}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = collections.Counter(nums)\n\n    # Create a heap queue with the count of each number\n    heap = [(-count, num) for num, count in count_dict.items()]\n\n    # Heapify the queue\n    heapq.heapify(heap)\n\n    # Dequeue the top k numbers from the heap\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N >= 1:\n        decimal_To_Binary(N // 2)\n        print(N % 2, end = '')\n"}
{"task_id": "MBPP/34", "completion": "\n    # Initialize missing as False\n    missing = False\n\n    # Initialize result\n    res = -1\n\n    # Traverse array\n    for i in range(N):\n\n        # If current element is not at the correct position\n        if (ar[i] != i + 1):\n            missing = True\n            res = i + 1\n            break\n\n    # If missing number is not found\n    if (missing == False):\n        res = N + 1\n\n    return res\n"}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    else:\n        return n * (n + 1) * (n + 2) // 6\n\n"}
{"task_id": "MBPP/36", "completion": "\n    def find_Nth_Digit_in_Fraction(numerator, denominator, N):\n        if numerator % denominator == 0:\n            return numerator // denominator\n        else:\n            return -1\n\n    def find_Nth_Digit_in_Decimal(n, N):\n        if n == 0:\n            return 0\n        else:\n            return (n * 10 + find_Nth_Digit_in_Decimal(n, N - 1)) // 10\n\n    def find_Nth_Digit_in_Fraction_Recursive(numerator, denominator, N):\n        if denominator % numerator == 0:\n            return find_Nth_Digit_in_Fraction(numerator, denominator // N, N)\n        else:\n            return find_Nth_Digit_in_Fraction_Recursive(numerator, denominator * 10, N)\n\n    if N % 2 == 0:\n        return find_Nth_Digit_in_Decimal(p, N)\n    else:\n        return find_Nth_Digit_in_Fraction_Recursive(p, q, N)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate integers and strings\n    ints = [i for i in mixed_list if isinstance(i, int)]\n    strs = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort integers\n    ints.sort()\n\n    # Combine sorted integers and strings\n    sorted_list = ints + strs\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    for i in list1:\n        if i % 2 == 0:\n            for j in list1:\n                if j % 2 != 0:\n                    return i / j\n    return \"No odd number found\"\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Count the number of characters that appear an odd number of times\n    odd_count = sum(1 for c in count.values() if c % 2)\n\n    # If more than one character appears an odd number of times, return False\n    if odd_count > 1:\n        return False\n\n    # If more than one character appears an even number of times, return False\n    if any(c % 2 == 0 for c in count.values()):\n        return False\n\n    return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n\nnums = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty dictionary\n    freq = {}\n\n    # Traverse through the array\n    for i in range(0, n):\n        if (arr[i] in freq):\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Traverse through the dictionary\n    for key in freq:\n        if (freq[key] > 1):\n            print(\"Element \", key, \" repeats \", freq[key], \" times\")\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^[A-Za-z0-9_]+\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(set(data)) == len(data)\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = factorial(A) % 10\n    last_digit_B = factorial(B) % 10\n\n    return last_digit_B == last_digit_A\n"}
{"task_id": "MBPP/48", "completion": "\n    return n ^ 0xAAAAAAAA\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for i in range(N):\n        result.append(nums[i][0])\n    return result\n"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y == z:\n        return \"Triangle is equilateral\"\n    else:\n        return \"Triangle is not equilateral\"\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/54", "completion": "\n    if len(my_list) == 0:\n        return my_list\n\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n < 0:\n        return False\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if n == 4:\n        return True\n    if n == 5:\n        return False\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return False\n    if n == 10:\n        return True\n    if n == 11:\n        return False\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return True\n    if n == 15:\n        return False\n    if n == 16:\n        return True\n    if n == 17:\n        return False\n    if n == 18:\n        return True\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return False\n    if n == 22:\n        return True\n    if n == 23:\n        return False\n    if n == 24:\n        return True\n    if n == 25:\n        return False\n    if n == 26:\n        return True\n    if n == 27:\n        return False\n    if n == 28:\n        return True\n    if n == 29:\n        return False\n    if n == 30:\n        return True\n    if n == 31:\n        return False\n    if n == 32:\n        return True\n    if n == 33:\n        return False\n    if n == 34:\n        return True\n    if n == 35:\n        return False\n    if n == 36:\n        return True\n    if n == 37:\n        return False\n    if n == 38:\n        return True\n    if n == 39:\n        return False\n    if n == 40:\n        return True\n    if n == 41:\n        return False\n    if n == "}
{"task_id": "MBPP/57", "completion": "\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # initialize result\n    res = ''\n\n    # iterate over the array\n    for i in range(n):\n        # add the current digit to the result\n        res += str(arr[i])\n\n    # return the result\n    return int(res)\n"}
{"task_id": "MBPP/58", "completion": "\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (7 * n - 5) / 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[j] - arr[i]) == max_len:\n                max_len += 1\n    return max_len\n"}
{"task_id": "MBPP/61", "completion": "\n    count_dict = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if sum(int(x) for x in substring) == len(substring):\n                count_dict[substring] += 1\n    return sum(count_dict.values())\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return \"Invalid input. List should have at least two elements.\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    return len([i for i in list if i > 0])\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n\n    return bell[n]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    for i in range(len(Input)):\n        if len(Input[i]) != k:\n            return False\n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(gap // 2, 1)\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return False\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"}
{"task_id": "MBPP/73", "completion": "\n    pattern = re.compile(r'[,;:\\n]')\n    return pattern.split(text)\n"}
{"task_id": "MBPP/74", "completion": "\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    # calculate area of rectangle\n    area = m * n\n\n    # calculate number of squares in rectangle\n    squares = area // 4\n\n    return squares\n"}
{"task_id": "MBPP/77", "completion": "\n    sum_even = 0\n    sum_odd = 0\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n    return sum_even - sum_odd\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n - 1) * (n - 2) // 6\n\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    return sum(ord(c) for c in strr)\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        sequence = [2, 1]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[n-1]\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (9 * n - 7) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    return {**dict1, **dict2, **dict3}\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\nlist1 = [1, 2, 3, 2, 1, 3, 2, 1, 1, 2, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1]"}
{"task_id": "MBPP/89", "completion": "\n    # convert N to string\n    N = str(N)\n    # find the length of the string\n    length = len(N)\n    # if the length is 1, return the number itself\n    if length == 1:\n        return N\n    # find the first pair of two numbers that are different from each other\n    for i in range(length - 1):\n        if N[i] < N[i + 1]:\n            # return the number formed by the two numbers\n            return N[:i] + N[i + 1:]\n    # if no such pair is found, return the number with the largest digit\n    return N[0] * (length - 1)\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(len(word) for word in list1)\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    # convert the number to string\n    str_n = str(n)\n\n    # check if the string has odd number of digits\n    if len(str_n) % 2 == 0:\n        return False\n\n    # check if the string has two consecutive same digits\n    for i in range(len(str_n) - 1):\n        if str_n[i] == str_n[i + 1]:\n            return False\n\n    return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return min(enumerate(test_list), key=itemgetter(1))[0]\n"}
{"task_id": "MBPP/95", "completion": "\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    return numbers[0] * len(numbers)\n\n\nnumbers = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n"}
{"task_id": "MBPP/100", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num + 1\n\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return \"Invalid k\"\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    word = re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return m + 1\n    elif m == 0:\n        return n + 1\n    elif n == 1 and m == 1:\n        return 2\n    else:\n        return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R+1):\n        if 'x' in str(i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for num in [num1, num2, num3]:\n        for n in num:\n            heapq.heappush(heap, n)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n"}
{"task_id": "MBPP/109", "completion": "\n    # count of rotations\n    count = 0\n    # check if the string is not empty\n    if s:\n        # check if the string is odd\n        if len(s) % 2 != 0:\n            # if the string is odd, then it can be rotated to odd\n            # so increment the count\n            count += 1\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_list = []\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            missing_list.append(i)\n    return missing_list\n"}
{"task_id": "MBPP/111", "completion": "\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))\n"}
{"task_id": "MBPP/112", "completion": "\n    import math\n    radius = diameter / 2\n    perimeter = 2 * math.pi * radius * (radius + height)\n    return perimeter\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n\ntest_list = [(1, 2, 3, 2, 2), (3, 4, 5, 5, 5, 5)]"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n"}
{"task_id": "MBPP/117", "completion": "\n    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            print(f\"{i} is not convertible to float\")\n    return float_list\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    if n < 1:\n        return None\n\n    # Initialize result\n    result = 0\n\n    # Traverse through array elements\n    for i in range(0, n):\n        # XOR operation\n        result = result ^ arr[i]\n\n    return result\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    max_tuple = ()\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n                max_tuple = (list1[i], list1[j])\n    return max_product, max_tuple\n\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (A[i] + A[j] + A[k] == sum):\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and sum is \", sum)\n    if (count == 0):\n        print(\"No such triplet found\")\n"}
{"task_id": "MBPP/122", "completion": "\n    # Initialize the list of smart numbers\n    smart_numbers = [0, 1, 2, 2]\n\n    # If n is less than 4, return the nth number\n    if n < 4:\n        return smart_numbers[n]\n\n    # If n is 4, return 2\n    if n == 4:\n        return 2\n\n    # If n is greater than 4, calculate the nth smart number\n    for i in range(4, n+1):\n        # Calculate the i-th smart number\n        smart_numbers.append(smart_numbers[i-1] + smart_numbers[i-2] + smart_numbers[i-3])\n\n    # Return the nth smart number\n    return smart_numbers[n]\n"}
{"task_id": "MBPP/123", "completion": "\n\n        Helper function to calculate sum of divisors of a number.\n        \"\"\"\n        result = 1\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                if i * (n // i) == n:\n                    result += i + n // i\n                else:\n                    result += i\n                i += 1\n        return result\n\n    result = 0\n    for i in range(2, limit + 1):\n        sum_i = sum_divisors(i)\n        if sum_i > i and sum_divisors(sum_i) == i:\n            result += i\n    return result\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a + b * 1j)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize result\n    res = 0\n\n    # Count the number of 0s and 1s in the given string\n    count_0 = string.count('0')\n    count_1 = string.count('1')\n\n    # If there is only one type of number, return 0\n    if count_0 == count_1 == n:\n        return 0\n\n    # If there is only one type of number, return the difference\n    if count_0 == count_1:\n        return abs(count_0 - count_1)\n\n    # If there are more than one type of number, return the difference\n    # between the number of 0s and 1s\n    return abs(count_0 - count_1)\n\n"}
{"task_id": "MBPP/126", "completion": "\n\n        Write python function to find common divisors of two given numbers.\n        \"\"\"\n        return [i for i in range(1, n1 + 1) if n1 % i == 0 and n2 % i == 0]\n\n    return sum(common_divisors(a, b))\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n\n        Check if a matrix is a magic square.\n        \"\"\"\n        def sum_rows_cols(matrix):\n            \"\"\"\n            Calculate the sum of elements in each row and column.\n            \"\"\"\n            row_sums = [sum(row) for row in matrix]\n            col_sums = [sum(column) for column in zip(*matrix)]\n            return row_sums, col_sums\n\n        def sum_diagonals(matrix):\n            \"\"\"\n            Calculate the sum of elements in the main and secondary diagonals.\n            \"\"\"\n            main_diagonal_sum = sum(matrix[i][i] for i in range(len(matrix)))\n            secondary_diagonal_sum = sum(matrix[i][len(matrix)-i-1] for i in range(len(matrix)))\n            return main_diagonal_sum, secondary_diagonal_sum\n\n        row_sums, col_sums = sum_rows_cols(matrix)\n        main_diagonal_sum, secondary_diagonal_sum = sum_diagonals(matrix)\n\n        if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and len(set(row_sums)) == 1:\n            return True\n        else:\n            return False\n\n    if is_magic_square(my_matrix):\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\"\n"}
{"task_id": "MBPP/130", "completion": "\n    # Create a dictionary to store the frequency of each number\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Find the numbers with maximum frequency\n    max_freq_nums = [num for num, freq in freq_dict.items() if freq == max_freq]\n\n    return max_freq_nums\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    for i in range(p):\n        if arr[n-1] % 2 == 0:\n            print(\"Last element of array is even after\", p, \"operations.\")\n        else:\n            print(\"Last element of array is odd after\", p, \"operations.\")\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*10**(n-1) + 1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.75\n    else:\n        bill = 100 * 0.75 + (units - 100) * 1.20\n    return bill\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n\n    return True\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for tup in test_list:\n        for item in tup:\n            if tup.count(item) == 1:\n                result.append(item)\n    return result\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(arr, k):\n        for i in range(k//2):\n            arr[i], arr[k-i-1] = arr[k-i-1], arr[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        max_index = i\n        for j in range(i, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        flip(nums, max_index)\n        flip(nums, i)\n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    return len(Input)\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n"}
{"task_id": "MBPP/145", "completion": "\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n"}
{"task_id": "MBPP/147", "completion": "\n    for i in range(m-2, -1, -1):\n        for j in range(i+1):\n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n    return tri[0][0]\n"}
{"task_id": "MBPP/148", "completion": "\n    x = str(x)\n    n = len(x)\n    if n == 1:\n        return int(x)\n    else:\n        return int(x[0]) + sum_digits_single(int(x[1:]))\n\n"}
{"task_id": "MBPP/149", "completion": "\n    dp = [1]*n\n    prev = [-1]*n\n    max_length = 1\n    max_index = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == 1 and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n                prev[i] = j\n        if dp[i] > max_length:\n            max_length = dp[i]\n            max_index = i\n\n    # print longest subsequence\n    i = max_index\n    subsequence = []\n    while i >= 0:\n        subsequence.append(arr[i])\n        i = prev[i]\n    subsequence.reverse()\n    return subsequence\n"}
{"task_id": "MBPP/150", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left_half = merge_sort(x[:mid])\n    right_half = merge_sort(x[mid:])\n    return merge(left_half, right_half)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    # calculate the discriminant\n    D = b**2 - 3*a*c\n\n    # check if discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b + D**0.5) / (2*a)\n        root2 = (-b - D**0.5) / (2*a)\n\n        return root1, root2\n\n    else:\n        # if discriminant is negative, the parabola has no real roots\n        return None\n"}
{"task_id": "MBPP/154", "completion": "\n    if N < len(nums):\n        return nums[N]\n    else:\n        return None\n"}
{"task_id": "MBPP/155", "completion": "\n    return n ^ 0xAAAAAAAA\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(g))-1) for k,g in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Calculate the sum of all elements in the array\n    total_sum = sum(arr)\n\n    # If total sum is less than k, it's impossible to make all elements equal\n    if total_sum < k:\n        return -1\n\n    # Calculate the target sum for each element\n    target_sum = total_sum // n\n\n    # Calculate the number of operations required\n    operations = 0\n    for i in range(n):\n        if arr[i] > target_sum:\n            operations += arr[i] - target_sum\n\n    return operations\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 12 or month == 1 or month == 2) or (month == 3 and days < 20):\n        print(\"Winter\")\n    elif (month == 3 or month == 4 or month == 5) or (month == 6 and days < 20):\n        print(\"Spring\")\n    elif (month == 6 or month == 7 or month == 8) or (month == 9 and days < 20):\n        print(\"Summer\")\n    elif (month == 9 or month == 10 or month == 11) or (month == 12 and days < 20):\n        print(\"Autumn\")\n    else:\n        print(\"Invalid month or day\")\n"}
{"task_id": "MBPP/160", "completion": "\n    for x in range(1, n+1):\n        if (a*x) % b == n:\n            return x, (n - (a*x)) // b\n    return -1, -1\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n\n"}
{"task_id": "MBPP/162", "completion": "\n    sum = 0\n    x = n\n    while x >= 0:\n        sum += x\n        x -= 2\n    return sum\n"}
{"task_id": "MBPP/163", "completion": "\n    if s < 0 or l < 0:\n        return \"Invalid input. Side length and side should be non-negative.\"\n    else:\n        return (s * l) / (4 * tan(pi / s))\n"}
{"task_id": "MBPP/164", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n"}
{"task_id": "MBPP/165", "completion": "\n    count_list = [0]*26\n    for char in str1:\n        if 'a' <= char <= 'z':\n            count_list[ord(char) - ord('a')] += 1\n        elif 'A' <= char <= 'Z':\n            count_list[ord(char) - ord('A')] += 1\n    return count_list\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n+1):\n            pell_numbers.append(2*pell_numbers[i-1] + pell_numbers[i-2])\n        return pell_numbers[n]\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    count = 0\n    for i in s:\n        if i == 'std':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for i in l:\n        if i[0] in d:\n            d[i[0]].append(i[1])\n        else:\n            d[i[0]] = [i[1]]\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def find_lcm(l, r):\n        result = []\n        for i in range(l, r + 1):\n            for j in range(i + 1, r + 1):\n                if gcd(i, j) == 1:\n                    result.append(lcm(i, j))\n        return result\n\n    return find_lcm(L, R)\n\n"}
{"task_id": "MBPP/178", "completion": "\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 5 == 0:\n        return False\n    if x % 7 == 0:\n        return False\n    if x % 11 == 0:\n        return False\n    if x % 13 == 0:\n        return False\n    if x % 17 == 0:\n        return False\n    if x % 19 == 0:\n        return False\n    if x % 23 == 0:\n        return False\n    if x % 29 == 0:\n        return False\n    if x % 31 == 0:\n        return False\n    if x % 37 == 0:\n        return False\n    if x % 41 == 0:\n        return False\n    if x % 43 == 0:\n        return False\n    if x % 47 == 0:\n        return False\n    if x % 53 == 0:\n        return False\n    if x % 59 == 0:\n        return False\n    if x % 61 == 0:\n        return False\n    if x % 67 == 0:\n        return False\n    if x % 71 == 0:\n        return False\n    if x % 73 == 0:\n        return False\n    if x % 79 == 0:\n        return False\n    if x % 83 == 0:\n        return False\n    if x % 89 == 0:\n        return False\n    if x % 97 == 0:\n        return False\n    return True\n\n"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    min_len = min(len(str1), len(str2))\n    result = \"\"\n    for i in range(min_len):\n        if str1[i] == str2[i]:\n            result += str1[i]\n        else:\n            break\n    return result\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^A-Za-z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return uppercase_letters, lowercase_letters, special_characters, numeric_values\n\n\nstring = \"Hello123!\"\nuppercase_letters, lowercase_letters, special_characters, numeric_values = find_character(string)\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if discriminant is positive, zero or negative\n    if D > 0:\n        # two distinct real roots\n        x1 = (-b - (D**0.5)) / (2*a)\n        x2 = (-b + (D**0.5)) / (2*a)\n        return (x1, x2)\n    elif D == 0:\n        # one real root\n        x = -b / (2*a)\n        return (x,)\n    else:\n        # no real roots\n        return ()\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n        else:\n            print(f\"Not found: {pattern}\")\n\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0]*(n+1) for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return False\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            for j in range(i, int(n**0.5) + 1):\n                if i*j == n:\n                    return True\n        return False\n"}
{"task_id": "MBPP/189", "completion": "\n    i = 0\n    while i < n:\n        if arr[i] <= 0 or arr[i] > n:\n            arr.pop(i)\n            n -= 1\n        else:\n            i += 1\n    missing_nums = []\n    for i in range(1, n + 1):\n        if i not in arr:\n            missing_nums.append(i)\n    return missing_nums\n\n\narr = [0, 10, 2, -10, -20, 1, 7, 8, 9]\nn = len(arr)"}
{"task_id": "MBPP/190", "completion": "\n    count = 0\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            if x.is_integer() and y.is_integer():\n                count += 1\n    return count\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n"}
{"task_id": "MBPP/195", "completion": "\n    l = 0\n    r = n - 1\n    res = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            res = mid\n            r = mid - 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return res\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    result = []\n    for tup in [test_tup1, test_tup2]:\n        for num in tup:\n            if isinstance(num, tuple):\n                result.append(num[0]**num[1])\n            else:\n                result.append(num)\n    return tuple(result)\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major axis of the ellipse\n    semi_major_axis = math.sqrt(a**2 / math.pi)\n\n    # Calculate the semi-minor axis of the ellipse\n    semi_minor_axis = math.sqrt(b**2 / math.pi)\n\n    # Calculate the area of the triangle\n    area = 0.5 * a * b\n\n    # Calculate the hypotenuse of the triangle\n    hypotenuse = math.sqrt(semi_major_axis**2 + semi_minor_axis**2)\n\n    # Calculate the area of the triangle\n    triangle_area = 0.5 * semi_major_axis * semi_minor_axis\n\n    # Calculate the area of the largest triangle that can be inscribed in the ellipse\n    largest_triangle_area = area - triangle_area\n\n    return largest_triangle_area\n"}
{"task_id": "MBPP/199", "completion": "\n    i = 0\n    while n > 0:\n        n = n >> 1\n        i += 1\n    return i\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    max_positions = [i for i, x in enumerate(list1) if x == max_value]\n    return max_positions\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return all(x == lst[0] for x in lst)\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([i for i in str1 if int(i) % 2 != 0])\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x = bin(n1)[2:].zfill(32)\n    y = bin(n2)[2:].zfill(32)\n    return sum(el1 != el2 for el1, el2 in zip(x, y))\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n"}
{"task_id": "MBPP/206", "completion": "\n    return tuple(str(i) + str(j) for i, j in test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for gap in range(n):\n        for i in range(n-gap):\n            j = i+gap\n            if gap == 0:\n                dp[i][j] = 1\n            elif str[i] == str[j]:\n                dp[i][j] = 1 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^-?\\d+\\.\\d{1,2}$'\n    if re.match(pattern, num):\n        return True\n    return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapify(heap)\n    hq.heappush(heap, a)\n    return heap\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile(r'[a-z0-9]')\n    return bool(pattern.fullmatch(string))\n"}
{"task_id": "MBPP/211", "completion": "\n    def count_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n\n    count = 0\n    for i in range(1, n+1):\n        if count_bits(i) == n:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n+1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/214", "completion": "\n    degree = radian * (180 / math.pi)\n    return degree\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Convert the numbers to binary\n    A_bin = bin(A)[2:]\n    B_bin = bin(B)[2:]\n\n    # Calculate the length of the binary representation\n    len_A = len(A_bin)\n    len_B = len(B_bin)\n\n    # Calculate the difference in length\n    diff_len = abs(len_A - len_B)\n\n    # Calculate the number of operations\n    operations = diff_len // 2\n\n    return operations\n"}
{"task_id": "MBPP/219", "completion": "\n    # Check if the tuple is not empty\n    if not test_tup:\n        return None\n\n    # Extract the first k elements\n    k_elements = test_tup[:K]\n\n    # Check if k elements are not empty\n    if not k_elements:\n        return None\n\n    # Extract the maximum and minimum elements\n    max_element = max(k_elements)\n    min_element = min(k_elements)\n\n    return max_element, min_element\n"}
{"task_id": "MBPP/220", "completion": "\n    # Replace maximum n occurrences of spaces, commas, dots with colon\n    text = re.sub(r'\\s+', ':', text, n)\n    text = re.sub(r',', ':', text, n)\n    text = re.sub(r'\\.', ':', text, n)\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return False\n    return True\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    majority_element = -1\n\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n        else:\n            if (count > (n / 2)):\n                majority_element = x\n            count = 0\n\n    if (count > (n / 2)):\n        majority_element = x\n\n    if (majority_element == -1):\n        print(\"There is no majority element\")\n    else:\n        print(\"Majority element is\", majority_element)\n\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[low] >= arr[mid]:\n        return find_Min(arr, low, mid - 1)\n\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if bin(i) == bin(i).zfill(n.bit_length()):\n            return False\n    return True\n"}
{"task_id": "MBPP/229", "completion": "\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n"}
{"task_id": "MBPP/231", "completion": "\n    # Initialize maximum sum\n    max_sum = 0\n\n    # Traverse through the triangle\n    for i in range(n):\n        for j in range(i+1):\n            # Update maximum sum if current number is greater than maximum sum\n            if tri[i][j] > max_sum:\n                max_sum = tri[i][j]\n\n    return max_sum\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    return n | (n & (2 << 1))\n"}
{"task_id": "MBPP/236", "completion": "\n    # If N is less than K, return -1\n    if N < K:\n        return -1\n\n    # If N is equal to K, return 1\n    if N == K:\n        return 1\n\n    # If N is greater than K, return N/2\n    if N > K:\n        return N//2\n"}
{"task_id": "MBPP/237", "completion": "\n    # Count occurrences of each record\n    count_dict = Counter(test_list)\n\n    # Check if all records occur the same number of times\n    for key, value in count_dict.items():\n        if value != len(test_list) / len(count_dict):\n            return False\n    return True\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/239", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * get_total_number_of_sequences(m, n - 1)\n\n"}
{"task_id": "MBPP/240", "completion": "\n    if len(list1) != len(list2):\n        return \"Error: Lists are not the same length\"\n    else:\n        list1[-1] = list2\n        return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(n)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if int(root + 0.5) ** 2 == N:\n        return int(root + 1) ** 2\n    else:\n        return int(root + 1) ** 2\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize maximum sum\n    max_sum = arr[0]\n\n    # Initialize current sum\n    curr_sum = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    # Check if the number is negative\n    if number < 0:\n        return \"Error: Number cannot be negative\"\n\n    # Initialize guess\n    guess = number / 2.0\n\n    # Babylonian method\n    for i in range(100):\n        better_guess = (guess + number / guess) / 2.0\n        if abs(guess - better_guess) < 0.00001:\n            return better_guess\n        guess = better_guess\n\n    return guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    return L[0][n - 1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    list.insert(0, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    result = []\n    for number in numbers:\n        r, theta = number\n        x = r * cmath.cos(theta)\n        y = r * cmath.sin(theta)\n        result.append((x, y))\n    return result\n\nnumbers = [(5, 0.78), (3, 1.3), (2, 4)]"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[ae]\\w*\\b', text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog\""}
{"task_id": "MBPP/255", "completion": "\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\n    result = list(combinations_with_replacement(colors, n))\n    return result\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/257", "completion": "\n    # Swap the values of a and b\n    a, b = b, a\n\n    return a, b\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return (max(test_tup1), max(test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        for i in range(4, n + 1):\n            if all(i % p > 0 for p in primes[:int(i ** 0.5) + 1]):\n                primes.append(i)\n        return primes[n - 1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    try:\n        return tuple(el1/el2 for el1, el2 in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed\"\n    except TypeError:\n        return \"Error: Both elements in tuples should be numbers\"\n"}
{"task_id": "MBPP/262", "completion": "\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    # Calculate dog's age in dog's years\n    dog_age_in_dog_years = h_age * 7\n    return dog_age_in_dog_years\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n"}
{"task_id": "MBPP/268", "completion": "\n    if n <= 0:\n        return 0\n    else:\n        return n + find_star_num(n - 1)\n\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n"}
{"task_id": "MBPP/271", "completion": "\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n"}
{"task_id": "MBPP/272", "completion": "\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    # Initialize sum\n    sum_even_coeff = 0\n\n    # Loop through even index binomial coefficients\n    for i in range(0, n+1, 2):\n        sum_even_coeff += math.comb(n, i)\n\n    return sum_even_coeff\n"}
{"task_id": "MBPP/275", "completion": "\n    return (a[n % m] if m > 0 else None)\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    volume = math.pi * r**2 * h\n    return volume\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += i.count(test_tup[0])\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n + (n-1) + (n-2)\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    if n < 0:\n        return \"Invalid input\"\n    str_n = str(n)\n    freq_dict = {}\n    for i in str_n:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/284", "completion": "\n    for i in list:\n        if i != element:\n            return False\n    return True\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/286", "completion": "\n    # Calculate the sum of the first k elements\n    sum_k_elements = sum(a[:k])\n    current_sum = sum_k_elements\n    max_sum = sum_k_elements\n\n    # Subtract the first k elements and add the next element\n    for i in range(k, n):\n        current_sum = current_sum - a[i - k] + a[i]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/288", "completion": "\n    # Initialize result\n    result = [0]*N\n\n    # Traverse through array elements\n    for i in range(N):\n        # Compute result[i]\n        result[i] = pow(arr[i], P-2, P)\n\n    return result\n"}
{"task_id": "MBPP/289", "completion": "\n    # Initialize count of odd days\n    odd_days = 0\n\n    # Loop through each month in the year\n    for month in range(1, 13):\n        # Loop through each day in the month\n        for day in range(1, 32):\n            # Check if the day is odd\n            if day % 2 != 0:\n                odd_days += 1\n\n    # Return the count of odd days\n    return odd_days\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length_list = []\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_length_list = l\n    return max_length_list\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * n\n    dp[0] = k\n    dp[1] = k * k\n\n    for i in range(2, n):\n        dp[i] = dp[i - 1] + dp[i - 2] * (k - 1)\n\n    return dp[n - 1]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        quotient = n / m\n        return quotient\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/298", "completion": "\n    return [i for i in l1 if i in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a dictionary to store the aggregate values\n    aggregate_dict = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for tup in stdata:\n        # Calculate the aggregate value for each tuple\n        aggregate = sum(tup)\n        # Add the aggregate to the dictionary\n        aggregate_dict[tup] = aggregate\n\n    # Find the maximum aggregate\n    max_aggregate = max(aggregate_dict.values())\n\n    # Find the tuple with the maximum aggregate\n    max_tuple = [k for k, v in aggregate_dict.items() if v == max_aggregate]\n\n    return max_tuple\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 ** n\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + (max(d.values(), key=dict_depth) if d else 0)\n    return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    # Find the most significant bit number\n    msb_num = n >> (32 - 1)\n\n    # Set the bit\n    n |= (1 << msb_num)\n\n    return n\n"}
{"task_id": "MBPP/303", "completion": "\n    # count the number of inversions\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                inversions += 1\n    return inversions\n\n"}
{"task_id": "MBPP/304", "completion": "\n    n = len(arr)\n    rotations = rotations % n\n    index = index % n\n    new_index = (index - rotations) % n\n    return arr[new_index]\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if n == 0 or k == 0:\n        return 0\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = a[i]\n\n    for i in range(1, n):\n        for j in range(i-1, -1, -1):\n            dp[j][i] = max(a[j] + dp[j+1][i], dp[j][i-1])\n\n    return dp[0][n-1]\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[m:n]\n"}
{"task_id": "MBPP/308", "completion": "\n    # sort the lists\n    nums1.sort()\n    nums2.sort()\n\n    # initialize result\n    result = []\n\n    # iterate over the lists\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        # if the product of the current elements in nums1 and nums2 is less than N,\n        # add the product to the result\n        if nums1[i] * nums2[j] < N:\n            result.append(nums1[i] * nums2[j])\n            i += 1\n            j += 1\n        # if the product is greater than N, move the pointer in the list with the larger value\n        elif nums1[i] * nums2[j] > N:\n            j += 1\n        else:\n            i += 1\n\n    return result\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n"}
{"task_id": "MBPP/311", "completion": "\n    if n & (n + 1) == 0:\n        return n + 1\n    else:\n        return n & ~(n & -n)\n\n"}
{"task_id": "MBPP/312", "completion": "\n    if r <= 0 or h <= 0:\n        return \"Invalid input\"\n    else:\n        return (1/3) * math.pi * r**2 * h\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp2 = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    max_sum = dp[0][0]\n\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = dp[i-1][j] + grid[i][j]\n            if j > 0:\n                dp2[i][j] = max(dp2[i-1][j-1], dp[i-1][j]) + grid[i][j]\n            else:\n                dp2[i][j] = dp[i-1][j] + grid[i][j]\n            max_sum = max(max_sum, dp2[i][j])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    if even_words:\n        return max(even_words, key=len)\n    else:\n        return None\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    def max_volume_helper(sides):\n        if len(sides) == 1:\n            return sides[0]**3\n        else:\n            return max(sides[0]*sides[1]*max_volume_helper(sides[2:]),\n                       sides[0]*sides[2]*max_volume_helper(sides[1:]))\n\n    sides = [int(i) for i in s.split()]\n    sides.sort()\n    return max_volume_helper(sides)\n\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n\ntext = \"This is a test string. This is only a test.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_squares - sum_of_numbers\n\n"}
{"task_id": "MBPP/321", "completion": "\n    if s < 0:\n        return \"Invalid input\"\n    elif s == 0:\n        return 0\n    else:\n        demlo_num = 1\n        while s > 0:\n            demlo_num *= 2\n            s -= 1\n        return demlo_num\n\n"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    min_pos = [i for i, x in enumerate(list1) if x == min_val]\n    return min_pos\n"}
{"task_id": "MBPP/323", "completion": "\n    if n == 1:\n        return arr\n\n    if n == 2:\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n        return arr\n\n    if n > 2:\n        for i in range(n // 2):\n            arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i]\n        return right_rotate(arr, n - 1, out_of_place + 1, cur + 1)\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n\n"}
{"task_id": "MBPP/325", "completion": "\n    dp = [0] + [float('inf')]*n\n    for i in range(1, n+1):\n        dp[i] = min(dp[i-1]+1)\n        for j in range(i-1, -1, -1):\n            dp[i] = min(dp[i], dp[i-j]*j)\n    return dp[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_counts = defaultdict(int)\n    for word in test_list:\n        word_counts[word] += 1\n\n    max_count = max(word_counts.values())\n    most_occurred_words = [word for word, count in word_counts.items() if count == max_count]\n\n    return most_occurred_words\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return \"The triangle is isosceles.\"\n    else:\n        return \"The triangle is not isosceles.\"\n"}
{"task_id": "MBPP/328", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "MBPP/329", "completion": "\n    return list.count(-1)\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = re.compile(r'\\b\\w{3,5}\\b')\n    return pattern.findall(text)\n\ntext = \"Hello, my name is John Doe. I live in New York.\""}
{"task_id": "MBPP/331", "completion": "\n    # Convert the number to binary and count the number of unset bits\n    return bin(n).count('0')\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'(\\b\\w+\\b)$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    return None\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    if x > y:\n        start = y\n        end = x\n    else:\n        start = x\n        end = y\n\n    for i in range(start, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n\n    return -1\n\n"}
{"task_id": "MBPP/340", "completion": "\n    lst.sort()\n    return sum(lst[:3])\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(list(s)))\n"}
{"task_id": "MBPP/342", "completion": "\n    heap = []\n    for i in range(len(list)):\n        heappush(heap, Node(list[i][0], i, 0))\n\n    min_range = float('inf')\n    max_val = float('-inf')\n\n    while heap:\n        node = heappop(heap)\n        current_range = node.value - max_val\n        if current_range < min_range:\n            min_range = current_range\n            min_list_num = node.list_num\n            min_index = node.index\n        if node.index + 1 < len(list[node.list_num]):\n            next_value = list[node.list_num][node.index + 1]\n            max_val = max(max_val, next_value)\n            heappush(heap, Node(next_value, node.list_num, node.index + 1))\n\n    return min_list_num, min_index, min_index + 1, min_range\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = \"0123456789\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    digits_count = 0\n    letters_count = 0\n    for i in s:\n        if i in digits:\n            digits_count += 1\n        elif i in letters:\n            letters_count += 1\n    return digits_count, letters_count\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m+1):\n        if i % 2 != 0:\n            count += bin(i).count('1')\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    return (n + k - 1) % 2 == 0\n\n"}
{"task_id": "MBPP/347", "completion": "\n    # calculate area of rectangle\n    area = m * n\n\n    # calculate number of squares in rectangle\n    squares = area // 4\n\n    return squares\n"}
{"task_id": "MBPP/348", "completion": "\n    if n == 0 and r == 0:\n        return 1\n    if n == 0 or r == 0:\n        return 0\n    return bin_coff(n-1, r-1) + bin_coff(n-1, r)\n\n"}
{"task_id": "MBPP/349", "completion": "\n    try:\n        int(string, 2)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/350", "completion": "\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return ''.join(stack)\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n"}
{"task_id": "MBPP/353", "completion": "\n    if n < len(list1[0]):\n        for i in list1:\n            del i[n]\n    else:\n        print(\"Column index out of range\")\n    return list1\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 1:\n        return a\n    else:\n        return tn_ap(a, n-1, d) + d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n\n    # Number of rectangles in a circle is 4 * pi * r^2\n    # We can calculate the number of rectangles by dividing the area of the circle by the area of a rectangle\n    # The area of a rectangle is given by 1/2 * length * width\n    # The length and width of a rectangle are given by sqrt(2) * r\n\n    # Calculate the area of the circle\n    circle_area = 4 * math.pi * radius ** 2\n\n    # Calculate the area of a rectangle\n    rectangle_area = 0.5 * radius * radius * math.sqrt(2)\n\n    # Calculate the number of rectangles\n    num_rectangles = circle_area / rectangle_area\n\n    return int(num_rectangles)\n"}
{"task_id": "MBPP/356", "completion": "\n    c = 180 - (a + b)\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y, nums1, nums2))\n\n"}
{"task_id": "MBPP/359", "completion": "\n    import cmath\n\n    # calculate the discriminant\n    d = (b**2) - (4*a*c)\n\n    # find two solutions\n    sol1 = (-b-cmath.sqrt(d))/(2*a)\n    sol2 = (-b+cmath.sqrt(d))/(2*a)\n\n    # check if any of the solutions is a root of the quadratic equation\n    if (sol1.real == sol2.real) or (sol1.imag == sol2.imag):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/360", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return n + get_carol(n - 1)\n\n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i != []]\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    max_occurrence = max(list(count.values()))\n    max_occurrence_items = [k for k, v in count.items() if v == max_occurrence]\n    return max_occurrence_items\n"}
{"task_id": "MBPP/363", "completion": "\n    return [i + K for i in test_list]\n\n"}
{"task_id": "MBPP/364", "completion": "\n    flip_count = 0\n    for i in range(len(ch) - 1):\n        if ch[i] == ch[i + 1]:\n            flip_count += 1\n    return flip_count\n\n"}
{"task_id": "MBPP/365", "completion": "\n    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, current_product)\n    return max_product\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n    else:\n        return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [(i, x) for i, x in enumerate(test_tup) for _ in range(N)]\n\n"}
{"task_id": "MBPP/369", "completion": "\n    lateral_surface_area = 2 * (l*w + w*h + h*l)\n    return lateral_surface_area\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: float(x[1]))\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] != left_element:\n        return left_element\n    elif A[-1] != right_element:\n        return right_element\n\n    for i in range(len(A) - 1):\n        if A[i+1] - A[i] > 1:\n            return A[i] + 1\n\n    return -1\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        first = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(first + p)\n    return perms\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n\n"}
{"task_id": "MBPP/376", "completion": "\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Create a list to store the result\n    result = []\n\n    # Iterate over the tuple\n    for element in test_tup:\n        # If the element is not in the set, add it to the set and append it to the result list\n        if element not in unique_set:\n            unique_set.add(element)\n            result.append(element)\n        # If the element is in the set, add the custom value to the result list\n        else:\n            result.append('custom_value')\n\n    # Convert the list to a tuple and return it\n    return tuple(result)\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        return test_list[1:] + [test_list[0]]\n    return test_list\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0]*colnum for _ in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    def is_rotated(A, mid, low, high):\n        if A[low] <= A[mid] and A[mid] <= A[high]:\n            return True\n        if A[low] <= A[high] and A[high] <= A[mid]:\n            return True\n        return False\n\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if is_rotated(A, mid, low, high):\n            return mid\n        if A[low] <= A[mid]:\n            if A[low] <= A[high]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if A[mid] <= A[high]:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n    return -1\n"}
{"task_id": "MBPP/383", "completion": "\n    # Convert the number to binary and toggle odd bits\n    binary = bin(n)[2:]\n    toggled_binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n\n    # Convert the toggled binary back to decimal\n    toggled_number = int(toggled_binary, 2)\n\n    return toggled_number\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 2 * get_perrin(n - 1) + 1\n\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    swap_count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swap_count += 1\n    return swap_count + len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return power - 1\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    lucas_numbers = [2, 1]\n\n    for i in range(2, n + 1):\n        lucas_numbers.append(sum(lucas_numbers[-2:]))\n\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for d1, d2, d3 in zip(l1, l2, l3):\n        result.append({**d1, **d2, **d3})\n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    def f(n):\n        if n == 1:\n            return 1\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n\n    return f(n)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n"}
{"task_id": "MBPP/395", "completion": "\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in str1:\n        if count[char] == 1:\n            return char\n\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c\n"}
{"task_id": "MBPP/398", "completion": "\n    def sum_of_digits_helper(num):\n        if num == 0:\n            return 0\n        else:\n            return num % 10 + sum_of_digits_helper(num // 10)\n\n    return [sum_of_digits_helper(num) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(i^j for i, j in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n\ntest_list = [(1,2), (2,3), (1,2), (3,4), (1,2), (3,4), (1,2), (3,4), (1,2), (3,4)]"}
{"task_id": "MBPP/401", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of same length\"\n\n    result = ()\n    for t1, t2 in zip(test_tup1, test_tup2):\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result += (add_nested_tuples(t1, t2),)\n        else:\n            result += (t1 + t2,)\n    return result\n"}
{"task_id": "MBPP/402", "completion": "\n    if (r < 0 or r > n):\n        return 0\n    res = 1\n    for i in range(r):\n        res = (res * (n - i)) % p\n        res = (res * pow(i + 1, p - 2, p)) % p\n    return res\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # convert number to string\n    str_n = str(n)\n    # find the first decreasing digit\n    for i in range(len(str_n) - 1, 0, -1):\n        if str_n[i] < str_n[i - 1]:\n            break\n    else:  # no decreasing digit found, all digits are in ascending order\n        return None\n\n    # find the first digit that is larger than the one before it\n    for i in range(len(str_n) - 1, 0, -1):\n        if str_n[i] > str_n[i - 1]:\n            break\n\n    # swap the two found digits\n    str_n = list(str_n)\n    str_n[i - 1], str_n[i] = str_n[i], str_n[i - 1]\n\n    # sort the digits after the first decreasing digit\n    str_n[i:] = sorted(str_n[i:])\n\n    return int(''.join(str_n))\n\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2:\n        return []\n\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                pairs.append((num1, num2))\n            else:\n                break\n\n    return pairs\n\n\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    min_tuple = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n                min_tuple = (list1[i], list1[j])\n\n    return min_tuple\n\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    s1 = re.sub('(.)([_](.)?(?=[A-Z][a-z]+[0-9]*))', r'\\1\\2\\3', word)\n    s2 = re.sub('([_](.)?([A-Z][a-z]+[0-9]*))', r'_\\1\\2', s1)\n    return s2.lower()\n"}
{"task_id": "MBPP/412", "completion": "\n    return [num for num in l if num % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[n-1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/415", "completion": "\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product = max(max_product, min_so_far * arr[i])\n            min_product = min(min_product, max_so_far * arr[i])\n        else:\n            max_so_far = max(arr[i], max_so_far * arr[i])\n            min_so_far = min(arr[i], min_so_far * arr[i])\n\n        max_product = max(max_product, max_so_far)\n        min_product = min(min_product, min_so_far)\n\n    return max_product\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n, breakSum(n-1) + breakSum(n-2) + 1, breakSum(n-3) + 2)\n\n"}
{"task_id": "MBPP/417", "completion": "\n    common_first_element = []\n    for tup in Input:\n        common_first_element.append(tup[0])\n    return common_first_element\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                max_length = len(lst[j])\n            elif len(lst[i]) == len(lst[j]) and lst[i] > lst[j]:\n                max_length = len(lst[i])\n    return max_length\n"}
{"task_id": "MBPP/419", "completion": "\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    return total_sum * len(list1)\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/423", "completion": "\n    if m <= 0 or n <= 0:\n        return 0\n    if m == 1 and n == 1:\n        return gold[0][0]\n    if not gold[0]:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = gold[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i - 1][0] + gold[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + gold[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + gold[i][j]\n    return dp[m - 1][n - 1]\n\n\ngold = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nm = 3\nn = 3"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(s[-1] for s in test_tuple)\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n"}
{"task_id": "MBPP/427", "completion": "\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        return match.group(3) + '-' + match.group(2) + '-' + match.group(1)\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n\n        for i in range(gap,n):\n\n            temp = my_list[i]\n\n            j = i\n            while  j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/430", "completion": "\n    # calculate the discriminant\n    D = b**2 - 4*a*c\n\n    # check if discriminant is positive\n    if D >= 0:\n        x1 = (-b - (D**0.5)) / (2*a)\n        x2 = (-b + (D**0.5)) / (2*a)\n        return x1, x2\n    else:\n        return \"No real solution\"\n"}
{"task_id": "MBPP/431", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "MBPP/432", "completion": "\n    # calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n    # calculate the median\n    median = (area * 2) / (base1 + base2)\n    return median\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = re.compile(r'b+')\n    return pattern.search(text) is not None\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([i for i in str1 if i.isdigit()])\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] > test_list[i + 1]:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = r'\\badv\\b'\n    matches = re.finditer(pattern, text)\n    positions = [match.start() for match in matches]\n    return positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    return [tuple(i[k:] for i in test_list) for k in K]\n"}
{"task_id": "MBPP/445", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of equal length\"\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n\n    return result\n\n"}
{"task_id": "MBPP/446", "completion": "\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    return tup_count & lst_count\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x**3, nums))\n"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the area of the triangle\n    def area(x1, y1, x2, y2, x3, y3):\n        return abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0)\n\n    # Check if the points are collinear\n    def collinear(x1, y1, x2, y2, x3, y3):\n        return (x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) == 0\n\n    # Check if the triangle is valid\n    def valid(x1, y1, x2, y2, x3, y3):\n        return not collinear(x1, y1, x2, y2, x3, y3)\n\n    return valid(x1, y1, x2, y2, x3, y3)\n"}
{"task_id": "MBPP/450", "completion": "\n    return [s[l:l+5] for s in str]\n\nstr_list = ['Hello', 'World', 'Python', 'Programming', 'Practice']"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(' ', '', text1)\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i and (n // i) % 2 == 0:\n                sum += n // i\n    return sum\n"}
{"task_id": "MBPP/454", "completion": "\n    word_list = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return word_list\n\ntext = \"Hello, I am a zebra. Zebra is a type of animal. I like to ride zebra.\""}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n"}
{"task_id": "MBPP/461", "completion": "\n    return sum(1 for c in str if c.isupper())\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remaining = list1[:i] + list1[i+1:]\n            for c in combinations_list(remaining):\n                result.append([m] + c)\n        return result\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = current_max = current_min = arr[0]\n    max_subarray = [arr[0]]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_max, current_min = current_min, current_max\n\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n\n        max_product = max(max_product, current_max)\n\n        if current_min == arr[i]:\n            max_subarray = [arr[i]]\n        elif current_min * arr[i] == max_product:\n            max_subarray.append(arr[i])\n\n    return max_subarray, max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return len(set(values)) == 1\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):\n        return mid\n\n    elif (mid > 0 and arr[mid - 1] > arr[mid]):\n        return find_peak_util(arr, low, mid - 1, n)\n\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return \"0\"\n    octNum = \"\"\n    while deciNum != 0:\n        octNum = str(deciNum % 8) + octNum\n        deciNum = deciNum // 8\n    return octNum\n"}
{"task_id": "MBPP/468", "completion": "\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], temp * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n\n    # Initialize the dp table\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    # Initialize the dp[0][0] to 0\n    for i in range(n):\n        dp[0][i] = 0\n\n    # Initialize the dp[i][0] to 0 for i > 0\n    for i in range(1, k+1):\n        dp[i][0] = 0\n\n    # Fill the dp table\n    for i in range(1, k+1):\n        max_so_far = dp[i][0] - price[0]\n        for j in range(1, n):\n            max_so_far = max(max_so_far, dp[i-1][j] - price[j])\n            dp[i][j] = max(dp[i][j-1], max_so_far + price[j])\n\n    return dp[k][n-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return tuple(a + b for a, b in test_tup)\n"}
{"task_id": "MBPP/471", "completion": "\n    result = []\n    for i in range(lens):\n        result.append(arr[i] % n)\n    return result\n"}
{"task_id": "MBPP/472", "completion": "\n    sorted_list = sorted(l)\n    for i in range(len(l)):\n        if l[i] != sorted_list[i]:\n            return False\n    return True\n"}
{"task_id": "MBPP/473", "completion": "\n    return tuple(set(test_list1) & set(test_list2))\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(nums)\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (max_count < count[ord(i)]):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/483", "completion": "\n    i = 1\n    while True:\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        if factorial % x == 0:\n            return i\n        i += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    result = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result.append(t1)\n    for t2 in test_list2:\n        if t2 not in test_list1:\n            result.append(t2)\n    return result\n"}
{"task_id": "MBPP/485", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    max_palindrome = -1\n    for i in range(len(n)):\n        for j in range(i + 1, len(n) + 1):\n            num = int(''.join(n[i:j]))\n            if is_palindrome(num) and num > max_palindrome:\n                max_palindrome = num\n    return max_palindrome\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n or r < 0:\n        return 0\n    else:\n        return fact(n) / (fact(r) * fact(n - r))\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    apothem = a / (2 * math.tan(math.pi/5))\n    area = 0.5 * (5 * math.tan(math.pi/5) * a * a)\n    return area\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    freq = arr.count(max_val)\n    return freq\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    dx = endx - startx\n    dy = endy - starty\n    distance = math.sqrt(dx**2 + dy**2)\n\n    # Calculate the number of sides\n    sides = int(distance / (2 * radius))\n\n    # Calculate the angle between each side\n    angle = math.pi / 3\n\n    # Calculate the coordinates\n    coordinates = []\n    for i in range(sides + 1):\n        x = startx + dx * (1 - i / sides) * math.cos(i * angle)\n        y = starty + dy * (1 - i / sides) * math.sin(i * angle)\n        coordinates.append((x, y))\n\n    return coordinates\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(str(test_tup), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    # Create a min heap from the list\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, num)\n\n    # Pop smallest integers from the heap\n    smallest_nums = []\n    for _ in range(n):\n        smallest_nums.append(hq.heappop(min_heap))\n\n    return smallest_nums\n"}
{"task_id": "MBPP/497", "completion": "\n    # surface area of cone = 1/3 * pi * r^2 * h\n    return 1/3 * math.pi * r**2 * h\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i \n    return gcd\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n"}
{"task_id": "MBPP/503", "completion": "\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n\n"}
{"task_id": "MBPP/504", "completion": "\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Split array into two parts: non-zero and zero\n    # Then concatenate the two parts\n    return [i for i in A if i != 0] + [i for i in A if i == 0]\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n or k < 0:\n        return 0\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if l1 == l2:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            if product < k:\n                count += 1\n    return count\n\n"}
