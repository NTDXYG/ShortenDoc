{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence == -1:  # Character not found\n        return s\n\n    if first_occurrence == last_occurrence:  # Character occurs only once\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/12", "completion": "\n    return sorted(M, key=lambda row: sum(row))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/13", "completion": "\n    word_count = Counter(words)\n    return dict(word_count.most_common())\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/14", "completion": "\n    base_area = (l * b) / 2  # Area of the triangular base\n    volume = base_area * h   # Volume of the prism\n    return volume\n", "result": "passed", "passed": true}
{"task_id": "MBPP/15", "completion": "\n    return re.findall(r'[a-z]+', text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate(\"AbCd\")==['bC','d']\nAssertionError\n", "passed": false}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+(?:_[a-z]+)*', text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate(\"aab_cbbbc\")==('Found a match!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n", "result": "passed", "passed": true}
{"task_id": "MBPP/18", "completion": "\n    char_count = [0] * NO_OF_CHARS\n\n    # Count characters in the second string\n    for char in string[1]:\n        char_count[ord(char)] += 1\n\n    # Create a result list for characters not in the second string\n    result = []\n\n    # Append characters from the first string that are not in the second string\n    for char in string[0]:\n        if char_count[ord(char)] == 0:\n            result.append(char)\n\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 25, in check\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nNameError: name 'remove_dirty_chars' is not defined\n", "passed": false}
{"task_id": "MBPP/19", "completion": "\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n", "result": "passed", "passed": true}
{"task_id": "MBPP/20", "completion": "\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n", "result": "passed", "passed": true}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(m, n + 1) if i % n == 0]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(4,3)== [3,6,9,12]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([1, 2, 3, 4])==-1\nAssertionError\n", "passed": false}
{"task_id": "MBPP/23", "completion": "\n    if not list1 or not all(isinstance(i, list) for i in list1):\n        return 0\n\n    max_sum = float('-inf')\n    \n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n", "result": "passed", "passed": true}
{"task_id": "MBPP/24", "completion": "\n    decimal = 0\n    binary_str = str(binary)[::-1]\n    for index, digit in enumerate(binary_str):\n        decimal += int(digit) * (2 ** index)\n    return decimal\n", "result": "passed", "passed": true}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    seen = set()\n    \n    for num in arr:\n        if num not in seen:\n            product *= num\n            seen.add(num)\n    \n    return product\n", "result": "passed", "passed": true}
{"task_id": "MBPP/26", "completion": "\n    return all(len(tup) == K for tup in test_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d+', '', item) for item in list]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/29", "completion": "\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\nNameError: name 'count_Substring_With_Equal_Ends' is not defined\n", "passed": false}
{"task_id": "MBPP/31", "completion": "\n    if k <= 0 or not nums:\n        return []\n\n    count = collections.Counter(nums)\n    heap = []\n\n    for num, freq in count.items():\n        heapq.heappush(heap, (freq, num))\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    return sorted(num for freq, num in heap)\n", "result": "timed out", "passed": false}
{"task_id": "MBPP/32", "completion": "\n    if n <= 1:\n        return None\n\n    # Initialize the largest prime factor\n    largest_prime = None\n\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n", "result": "passed", "passed": true}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return \"0\"\n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N //= 2\n    return binary\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(10) == 1010\nAssertionError\n", "passed": false}
{"task_id": "MBPP/34", "completion": "\n    # Calculate the expected sum of the first N natural numbers\n    expected_sum = N * (N + 1) // 2\n    \n    # Calculate the actual sum of the elements in the array\n    actual_sum = sum(ar)\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    missing_number = expected_sum - actual_sum\n    \n    return missing_number\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate([1,2,3,5],4) == 4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/35", "completion": "\n    if n <= 0:\n        return 0\n    return n * (n + 1) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(4) == 20\nAssertionError\n", "passed": false}
{"task_id": "MBPP/36", "completion": "\n    # Calculate the decimal representation of the fraction p/q\n    decimal_representation = str(p / q).split('.')\n    \n    # If there is no decimal part or N is larger than the length of the decimal part\n    if len(decimal_representation) < 2 or N > len(decimal_representation[1]):\n        return -1  # Return -1 if Nth digit does not exist\n    \n    # Return the Nth digit in the decimal part\n    return int(decimal_representation[1][N - 1])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/37", "completion": "\n    # Separate integers and strings\n    integers = [item for item in mixed_list if isinstance(item, int)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort both lists\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted lists\n    return integers + strings\n", "result": "passed", "passed": true}
{"task_id": "MBPP/38", "completion": "\n    for number in list1:\n        if number % 2 == 0:\n            even = number\n            break\n    else:\n        even = None\n\n    for number in list1:\n        if number % 2 != 0:\n            odd = number\n            break\n    else:\n        odd = None\n\n    if even is not None and odd is not None:\n        return even / odd\n    else:\n        return None\n", "result": "passed", "passed": true}
{"task_id": "MBPP/39", "completion": "\n    if not S:\n        return \"\"\n\n    # Count the frequency of each character\n    char_count = Counter(S)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n\n    result = []\n    prev_char = None\n    prev_count = 0\n\n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n\n        # If there was a previous character, push it back to the heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n\n        # Update the previous character and its count\n        prev_char = char\n        prev_count = count + 1  # Decrease the count\n\n    rearranged_string = ''.join(result)\n    return rearranged_string if len(rearranged_string) == len(S) else \"\"\n", "result": "passed", "passed": true}
{"task_id": "MBPP/40", "completion": "\n    return Counter(nums)\n", "result": "timed out", "passed": false}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/42", "completion": "\n    seen = set()\n    repeated_sum = 0\n    \n    for num in arr:\n        if num in seen:\n            repeated_sum += num\n        else:\n            seen.add(num)\n    \n    return repeated_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate([1,2,3,1,1,4,5,6],8) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'[a-z_]+'\n    return re.findall(pattern, text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(\"aab_cbbbc\") == 'Found a match!'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'^\\b\\w+'\n    match = re.match(pattern, text)\n    return match.group(0) if match else None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(\" python\")==('Not matched!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/45", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\nNameError: name 'get_gcd' is not defined\n", "passed": false}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/47", "completion": "\n    if A == 0:\n        return 1 if B >= 0 else 0\n    if B == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, A + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit if B >= last_digit else 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate(6,8) == 6\nAssertionError\n", "passed": false}
{"task_id": "MBPP/48", "completion": "\n    result = 0\n    for i in range(n):\n        if i % 2 == 1:  # Check if the bit position is odd\n            result |= (1 << i)  # Set the odd bit\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(10) == 15\nAssertionError\n", "passed": false}
{"task_id": "MBPP/49", "completion": "\n    for sublist in nums:\n        if len(sublist) > N:\n            return sublist[N]\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=len) if input_list else None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nAssertionError\n", "passed": false}
{"task_id": "MBPP/51", "completion": "\n    return x == y == z\n", "result": "passed", "passed": true}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n", "result": "passed", "passed": true}
{"task_id": "MBPP/53", "completion": "\n    if len(str) == 0:\n        return True\n    return str[0] == str[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(\"abcda\") == \"Equal\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/54", "completion": "\n    if not my_list:\n        return my_list\n\n    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_elements = max_val - min_val + 1\n\n    # Initialize count array\n    count = [0] * range_of_elements\n    output = [0] * len(my_list)\n\n    # Store the count of each number\n    for number in my_list:\n        count[number - min_val] += 1\n\n    # Change count[i] so that it contains the actual position of this number in output[]\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    for number in reversed(my_list):\n        output[count[number - min_val] - 1] = number\n        count[number - min_val] -= 1\n\n    return output\n", "result": "passed", "passed": true}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/56", "completion": "\n    Check if the number n is one less than twice its reverse.\n    \"\"\"\n    rev_n = rev(n)\n    return n == 2 * rev_n - 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 23)\n", "passed": false}
{"task_id": "MBPP/57", "completion": "\n    # Convert the array of digits to strings for sorting\n    arr = list(map(str, arr))\n    \n    # Sort the array based on custom comparator\n    arr.sort(key=lambda x: x*10, reverse=True)\n    \n    # Join the sorted array to form the largest number\n    largest_num = ''.join(arr)\n    \n    # Return the largest number as an integer\n    return int(largest_num)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/58", "completion": "\n    return (x < 0 < y) or (y < 0 < x)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/59", "completion": "\n    return n * (3 * n - 2)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/60", "completion": "\n    if n == 0:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 22, in check\n    assert candidate([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nAssertionError\n", "passed": false}
{"task_id": "MBPP/61", "completion": "\n    count = 0\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == (j - i + 1):\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/62", "completion": "\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n", "result": "passed", "passed": true}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nAssertionError\n", "passed": false}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/68", "completion": "\n    if not A:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n", "result": "passed", "passed": true}
{"task_id": "MBPP/69", "completion": "\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i + n] == s:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "MBPP/70", "completion": "\n    result = []\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i]) == len(Input[j]) and Input[i] != Input[j]:\n                result.append((Input[i], Input[j]))\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nNameError: name 'get_equal' is not defined\n", "passed": false}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 27, in <module>\n  File \"<string>\", line 23, in check\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/72", "completion": "\n    return (n % 4 == 0) or (n % 4 == 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(15) == True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/73", "completion": "\n    return re.split(r'[;,\\s]+', text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nAssertionError\n", "passed": false}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n", "result": "passed", "passed": true}
{"task_id": "MBPP/75", "completion": "\n    return [tup for tup in test_list if all(x % K == 0 for x in tup)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/76", "completion": "\n    return (m * (m + 1) * n * (n + 1)) // 4\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(4,3) == 20\nAssertionError\n", "passed": false}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    \n    return even_sum - odd_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate (12345) == False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 != 0\n", "result": "passed", "passed": true}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n", "result": "passed", "passed": true}
{"task_id": "MBPP/81", "completion": "\n    return tuple(zip(test_tup1, test_tup2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n", "result": "passed", "passed": true}
{"task_id": "MBPP/83", "completion": "\n    if not strr:\n        return None\n    \n    char_count = {}\n    \n    for char in strr:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count % 2 != 0:\n            return char\n    \n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 27, in <module>\n  File \"<string>\", line 23, in check\n    assert candidate(\"abc\") == \"f\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/84", "completion": "\n    if n < 1:\n        return None\n    elif n == 1 or n == 2:\n        return n\n    else:\n        seq = [0] * (n + 1)\n        seq[1], seq[2] = 1, 2\n        for i in range(3, n + 1):\n            seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        return seq[n]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate(10) == 6\nAssertionError\n", "passed": false}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/86", "completion": "\n    return n * (2 * n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(10) == 271\nAssertionError\n", "passed": false}
{"task_id": "MBPP/87", "completion": "\n    return dict(ct.ChainMap(dict1, dict2, dict3))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/88", "completion": "\n    return dict(collections.Counter(list1))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/89", "completion": "\n    if N <= 0:\n        return None\n    \n    # Start from N-1 and find the closest smaller number\n    for n in range(N-1, -1, -1):\n        if n < N:\n            return n\n", "result": "passed", "passed": true}
{"task_id": "MBPP/90", "completion": "\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/91", "completion": "\n    return sub_str in str1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/92", "completion": "\n    str_n = str(n)\n    if len(str_n) < 2:\n        return True  # A single digit is considered undulating\n\n    for i in range(1, len(str_n)):\n        if str_n[i] == str_n[i - 1]:\n            return False\n        if (i > 1 and \n            (str_n[i] == str_n[i - 2] or \n             str_n[i - 1] == str_n[i - 2])):\n            return False\n\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate(\"1212121\") == True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n", "result": "passed", "passed": true}
{"task_id": "MBPP/94", "completion": "\n    return min(range(len(test_list)), key=itemgetter(0))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n  File \"<string>\", line 8, in index_minimum\n    return min(range(len(test_list)), key=itemgetter(0))\nTypeError: 'int' object is not subscriptable\n", "passed": false}
{"task_id": "MBPP/95", "completion": "\n    if not lst:\n        return []\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for start in range(len(lst)):\n        for end in range(start + 1, len(lst) + 1):\n            sublist = lst[start:end]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([[1],[1,2]]) == 1\nAssertionError\n", "passed": false}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/97", "completion": "\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n  File \"<string>\", line 7, in frequency_lists\n        if item in frequency:\nTypeError: unhashable type: 'list'\n", "passed": false}
{"task_id": "MBPP/98", "completion": "\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n", "result": "passed", "passed": true}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n\n    if num == '9' * length:\n        return str(int(num) + 2)\n\n    half_length = (length + 1) // 2\n    left_half = num[:half_length]\n    if length % 2 == 0:\n        palindrome = left_half + left_half[::-1]\n    else:\n        palindrome = left_half + left_half[-2::-1]\n\n    if palindrome > num:\n        return palindrome\n\n    left_half = str(int(left_half) + 1)\n    if length % 2 == 0:\n        return left_half + left_half[::-1]\n    else:\n        return left_half + left_half[-2::-1]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 32, in check\n    assert candidate(99)==101\nAssertionError\n", "passed": false}
{"task_id": "MBPP/101", "completion": "\n    if k < 1 or k > n:\n        return None  # k is out of bounds\n\n    # Sort the array\n    arr.sort()\n\n    # Return the k-th element (1-based index)\n    return arr[k - 1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([12,3,5,7,19], 5, 2) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/102", "completion": "\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate('python_program')=='PythonProgram'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/103", "completion": "\n    if m == 0:\n        return 1 if n > 0 else 0\n    if n == 0:\n        return 0\n    \n    return (m * eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 1, m))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(3, 1) == 4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/105", "completion": "\n    return sum(1 for item in lst if item is True)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/106", "completion": "\n    return [x + y for x, y in zip(test_list, test_tup)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for num in range(L, R + 1):\n        if all(c in '0123456789abcdef' for c in hex(num)[2:]):\n            count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(2,4) == 0\nAssertionError\n", "passed": false}
{"task_id": "MBPP/108", "completion": "\n    min_heap = []\n    for num in num1:\n        heapq.heappush(min_heap, num)\n    for num in num2:\n        heapq.heappush(min_heap, num)\n    for num in num3:\n        heapq.heappush(min_heap, num)\n\n    while min_heap:\n        yield heapq.heappop(min_heap)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        # Rotate the string\n        rotated = s[i:] + s[:i]\n        # Convert to integer and check if odd\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/110", "completion": "\n    return [x for x in range(strt_val, stop_val + 1) if x not in test_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/111", "completion": "\n    if not nestedlist:\n        return []\n\n    common_elements = set(nestedlist[0])\n\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n\n    return list(common_elements)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    return 2 * 3.14159 * radius + 2 * height\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate(2,4) == 12\nAssertionError\n", "passed": false}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "MBPP/114", "completion": "\n    freq = Counter(test_list)\n    return [(item, freq[item]) for item in test_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/115", "completion": "\n    return all(not d for d in list1 if isinstance(d, dict))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate([{1,2},{},{}])==False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list if isinstance(i, (int, float, str)) and str(i).replace('.', '', 1).isdigit()]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n", "result": "passed", "passed": true}
{"task_id": "MBPP/119", "completion": "\n    left, right = 0, n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # Check if mid is even or odd\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n\n    return arr[left]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n\n    return max_pair\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n  File \"<string>\", line 10, in max_product_tuple\n            product = list1[i] * list1[j]\nTypeError: can't multiply sequence by non-int of type 'tuple'\n", "passed": false}
{"task_id": "MBPP/121", "completion": "\n    A.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count.append((A[i], A[left], A[right]))\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 22, in check\n    assert candidate([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n  File \"<string>\", line 12, in check_triplet\n                count.append((A[i], A[left], A[right]))\nAttributeError: 'int' object has no attribute 'append'\n", "passed": false}
{"task_id": "MBPP/122", "completion": "\n    if n < 1 or n > MAX:\n        return \"Input must be between 1 and {}\".format(MAX)\n\n    # A smart number is defined as a number that is either a prime number or a perfect square\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_perfect_square(num):\n        root = int(num**0.5)\n        return root * root == num\n\n    if is_prime(n) or is_perfect_square(n):\n        return \"{} is a smart number\".format(n)\n    else:\n        return \"{} is not a smart number\".format(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 34, in <module>\n  File \"<string>\", line 30, in check\n    assert candidate(1) == 30\nAssertionError\n", "passed": false}
{"task_id": "MBPP/123", "completion": "\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = set()\n    \n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/124", "completion": "\n    # Calculate the angle of the complex numbers a and b\n    angle_a = cmath.phase(a)\n    angle_b = cmath.phase(b)\n    \n    # Return the difference in angles\n    return angle_b - angle_a\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate(2,1j)==0.4636476090008061\nAssertionError\n", "passed": false}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n\n        # Calculate the current difference\n        current_diff = count_1 - count_0\n        max_diff = max(max_diff, current_diff)\n\n        # Reset counts if the difference becomes negative\n        if current_diff < 0:\n            count_0 = 0\n            count_1 = 0\n\n    return max_diff\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 27, in check\n    assert candidate(\"11000010001\", 11) == 6\nAssertionError\n", "passed": false}
{"task_id": "MBPP/126", "completion": "\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisors = [i for i in range(1, gcd(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(10,15) == 6\n  File \"<string>\", line 11, in sum\n    return sum(common_divisors)\nTypeError: sum() missing 1 required positional argument: 'b'\n", "passed": false}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    \n    if y < 0:\n        result = -result\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/128", "completion": "\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n", "result": "passed", "passed": true}
{"task_id": "MBPP/129", "completion": "\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum(my_matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum or sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n", "result": "passed", "passed": true}
{"task_id": "MBPP/130", "completion": "\n    frequency = defaultdict(int)\n    \n    for num in nums:\n        frequency[num] += 1\n    \n    max_freq = max(frequency.values())\n    max_items = [num for num, freq in frequency.items() if freq == max_freq]\n    \n    return max_items, max_freq\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str_list)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/134", "completion": "\n    for _ in range(p):\n        if n % 2 == 0:\n            arr[-1] += 1\n        else:\n            arr[-1] -= 1\n        n += 1\n\n    return \"Even\" if arr[-1] % 2 == 0 else \"Odd\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert check_last([5,7,10],3,1) == \"ODD\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/135", "completion": "\n    return n * (2 * n - 1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/136", "completion": "\n    if units <= 100:\n        bill = units * 1.5\n    elif units <= 300:\n        bill = (100 * 1.5) + (units - 100) * 2.5\n    else:\n        bill = (100 * 1.5) + (200 * 2.5) + (units - 300) * 3.5\n\n    return bill\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(75)==246.25\nAssertionError\n", "passed": false}
{"task_id": "MBPP/137", "completion": "\n    if not nums:\n        return 0.0\n    \n    zeroes = nums.count(0)\n    return zeroes / len(nums)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nAssertionError\n", "passed": false}
{"task_id": "MBPP/138", "completion": "\n    if n < 1:\n        return False\n    return (n & (n - 1)) == 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(10) == True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(10)==62.830000000000005\nAssertionError\n", "passed": false}
{"task_id": "MBPP/140", "completion": "\n    return [item for item in test_list if test_list.count(item) == 1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/141", "completion": "\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the order of the first k elements in sublist.\"\"\"\n        return sublist[:k][::-1] + sublist[k:]\n\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:i]\n        max_index = nums.index(max(nums[0:i]))\n        \n        # If the max element is not already in the correct position\n        if max_index != i - 1:\n            # If the max element is not at the start, flip it to the front\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            # Now flip it to its correct position\n            nums = flip(nums, i)\n    \n    return nums\n", "result": "passed", "passed": true}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for item1 in list1:\n        for item2 in list2:\n            for item3 in list3:\n                if item1 == item2 == item3:\n                    count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/143", "completion": "\n    return [list(item) for item in Input if isinstance(item, tuple)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/144", "completion": "\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "MBPP/145", "completion": "\n    if n < 2:\n        return 0\n\n    max_element = max(arr)\n    min_element = min(arr)\n\n    return max_element - min_element\n", "result": "passed", "passed": true}
{"task_id": "MBPP/146", "completion": "\n    total = 0\n    for char in str1:\n        total += ord(char)\n    return total\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate(\"python\")==112\nAssertionError\n", "passed": false}
{"task_id": "MBPP/147", "completion": "\n    # Create a 2D list to store the maximum path sums\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Initialize the bottom row of dp with the last row of the triangle\n    for j in range(n):\n        dp[m - 1][j] = tri[m - 1][j]\n    \n    # Fill the dp array from bottom to top\n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = tri[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    \n    # The maximum path sum will be at the top of the triangle\n    return dp[0][0]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nAssertionError\n", "passed": false}
{"task_id": "MBPP/148", "completion": "\n    str_x = str(x)\n    mid = len(str_x) // 2\n    part1 = str_x[:mid]\n    part2 = str_x[mid:]\n\n    sum_part1 = sum(int(digit) for digit in part1)\n    sum_part2 = sum(int(digit) for digit in part2)\n\n    return max(sum_part1, sum_part2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert sum_digits_twoparts(35)==17\nNameError: name 'sum_digits_twoparts' is not defined\n", "passed": false}
{"task_id": "MBPP/149", "completion": "\n    if n == 0:\n        return 0\n\n    # Initialize an array to store the length of the longest subsequence\n    dp = [1] * n\n\n    # Fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # The length of the longest subsequence will be the maximum value in dp\n    return max(dp)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/150", "completion": "\n    sequence = [a]\n    while True:\n        next_value = sequence[-1] + b\n        if next_value == c:\n            return True\n        elif next_value > c:\n            return False\n        sequence.append(next_value)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(1,7,3) == True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/151", "completion": "\n    while q != 0:\n        p, q = q, p % q\n    return p == 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert is_coprime(17,13) == True\nNameError: name 'is_coprime' is not defined\n", "passed": false}
{"task_id": "MBPP/152", "completion": "\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/153", "completion": "\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (x_vertex, y_vertex)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/154", "completion": "\n    if not nums or N < 0 or N >= len(nums[0]):\n        return []\n\n    return [row[N] for row in nums if len(row) > N]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/155", "completion": "\n    # Create a mask with even bits set to 1\n    mask = 0xAAAAAAAA  # This is 10101010... in binary (32 bits)\n    \n    # Toggle the even bits using XOR\n    return n ^ mask\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(10) == 0\nAssertionError\n", "passed": false}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(x) for x in tuple_str)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n  File \"<string>\", line 5, in tuple_int_str\n    return tuple(int(x) for x in tuple_str)\n  File \"<string>\", line 5, in <genexpr>\n    return tuple(int(x) for x in tuple_str)\nTypeError: int() argument must be a string, a bytes-like object or a real number, not 'tuple'\n", "passed": false}
{"task_id": "MBPP/157", "completion": "\n    if not list1:\n        return []\n\n    encoded = []\n    for key, group in groupby(list1):\n        count = len(list(group))\n        encoded.append((key, count))\n    \n    return encoded\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/158", "completion": "\n    min_val = min(arr)\n    ops = 0\n    \n    for num in arr:\n        ops += abs(num - min_val) // k\n    \n    return ops\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([4,2,6,8],4,3) == -1\nAssertionError\n", "passed": false}
{"task_id": "MBPP/159", "completion": "\n    if month in [12, 1, 2]:\n        season = \"Winter\"\n    elif month in [3, 4, 5]:\n        season = \"Spring\"\n    elif month in [6, 7, 8]:\n        season = \"Summer\"\n    elif month in [9, 10, 11]:\n        season = \"Fall\"\n    else:\n        return \"Invalid month\"\n\n    if (month == 3 and days < 20) or (month == 6 and days >= 21):\n        season = \"Winter\" if month == 3 else \"Spring\"\n    elif (month == 6 and days < 21) or (month == 9 and days >= 22):\n        season = \"Spring\" if month == 6 else \"Summer\"\n    elif (month == 9 and days < 22) or (month == 12 and days >= 21):\n        season = \"Summer\" if month == 9 else \"Fall\"\n    \n    return season\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 26, in check\n    assert candidate('January',4)==('winter')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/160", "completion": "\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return x, y\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/161", "completion": "\n    return [item for item in list1 if item not in list2]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/162", "completion": "\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/163", "completion": "\n    if s < 3:\n        return 0  # Not a polygon\n    return (s * l**2) / (4 * tan(pi / s))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/164", "completion": "\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total == n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert areEquivalent(36,57) == False\nNameError: name 'areEquivalent' is not defined\n", "passed": false}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].lower() == str1[i].upper():\n            count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(\"xbcefg\") == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/167", "completion": "\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n", "result": "passed", "passed": true}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n", "result": "passed", "passed": true}
{"task_id": "MBPP/170", "completion": "\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid index range\")\n    \n    return sum(list1[m:n+1])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n", "result": "passed", "passed": true}
{"task_id": "MBPP/172", "completion": "\n    return {char: s.count(char) for char in set(s) if char in 'std'}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(\"letstdlenstdporstd\") == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^a-zA-Z0-9]', '', text)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/174", "completion": "\n    result = {}\n    for key, value in l:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses_map = {')': '(', '}': '{', ']': '['}\n\n    for char in str1:\n        if char in parentheses_map.values():\n            stack.append(char)\n        elif char in parentheses_map.keys():\n            if not stack or stack.pop() != parentheses_map[char]:\n                return False\n\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n", "result": "passed", "passed": true}
{"task_id": "MBPP/177", "completion": "\n    from math import gcd\n\n    def lcm(x, y):\n        return (x * y) // gcd(x, y)\n\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return (i, j)\n    \n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(2,6) == (2,4)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/178", "completion": "\n    matches = []\n    for pattern in patterns:\n        found = re.findall(pattern, text)\n        matches.extend(found)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(['language'],'python language')==('Matched!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/179", "completion": "\n    if x < 1:\n        return False\n\n    digits = list(map(int, str(x)))\n    n = len(digits)\n    sequence = digits.copy()\n\n    while True:\n        next_num = sum(sequence[-n:])\n        if next_num == x:\n            return True\n        elif next_num > x:\n            return False\n        sequence.append(next_num)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/180", "completion": "\n    # Convert latitude and longitude from degrees to radians\n    slat_rad = radians(slat)\n    slon_rad = radians(slon)\n    elat_rad = radians(elat)\n    elon_rad = radians(elon)\n\n    # Haversine formula\n    dlon = elon_rad - slon_rad\n    dlat = elat_rad - slat_rad\n\n    a = sin(dlat / 2)**2 + cos(slat_rad) * cos(elat_rad) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, max(-1, a**0.5)))  # Ensure the value is within the valid range for acos\n\n    # Radius of the Earth in kilometers (mean radius)\n    radius_earth_km = 6371.0\n\n    # Calculate the distance\n    distance = radius_earth_km * c\n    return distance\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 29, in check\n    assert candidate(23.5,67.5,25.5,69.5)==12179.372041317429\nAssertionError\n", "passed": false}
{"task_id": "MBPP/181", "completion": "\n    min_length = min(len(str1), len(str2))\n    common_prefix = []\n    \n    for i in range(min_length):\n        if str1[i] == str2[i]:\n            common_prefix.append(str1[i])\n        else:\n            break\n            \n    return ''.join(common_prefix)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nNameError: name 'common_prefix' is not defined\n", "passed": false}
{"task_id": "MBPP/182", "completion": "\n    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special_characters = re.findall(r'[^a-zA-Z0-9]', string)\n    numeric_values = re.findall(r'[0-9]', string)\n\n    return {\n        'uppercase': uppercase,\n        'lowercase': lowercase,\n        'special_characters': special_characters,\n        'numeric_values': numeric_values\n    }\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nAssertionError\n", "passed": false}
{"task_id": "MBPP/183", "completion": "\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n    count = 0\n\n    # Iterate through each element in the set\n    for num in unique_elements:\n        # Check if the pair (num, num + k) exists\n        if (num + k) in unique_elements:\n            count += 1\n\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate([2, 4, 1, 3, 4], 5, 2) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/184", "completion": "\n    return [x for x in list if x > num]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([220, 330, 500],200)==True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/185", "completion": "\n    # The focus of a parabola given by the equation y = ax^2 + bx + c is at the point (h, k + p)\n    # where h = -b/(2a) and p = 1/(4a)\n    \n    h = -b / (2 * a)\n    k = a * h**2 + b * h + c\n    p = 1 / (4 * a)\n    \n    focus = (h, k + p)\n    return focus\n", "result": "passed", "passed": true}
{"task_id": "MBPP/186", "completion": "\n    matches = []\n    for pattern in patterns:\n        found = re.findall(pattern, text)\n        matches.extend(found)\n    return matches\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/187", "completion": "\n    # Create a 2D array to store lengths of longest common subsequence.\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the L table in bottom-up fashion\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Length of LCS is in L[m][n]\n    index = L[m][n]\n\n    # Create a string to store the LCS\n    lcs = [''] * (index + 1)\n    lcs[index] = ''\n\n    # Start from the bottom right corner of the L table\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(lcs)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 45, in <module>\n  File \"<string>\", line 41, in check\n    assert candidate(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/188", "completion": "\n    def is_product_of_two_squares(n):\n        if n < 0:\n            return False\n        for a in range(int(n**0.5) + 1):\n            b_squared = n - a**2\n            if b_squared >= 0 and (b_squared**0.5).is_integer():\n                return True\n        return False\n\n    return is_product_of_two_squares(n)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate(25) == False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/189", "completion": "\n    # Move each number to its right place\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            # Swap arr[i] with arr[arr[i] - 1]\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n\n    # Find the first missing positive\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n\n    return n + 1\n", "result": "passed", "passed": true}
{"task_id": "MBPP/190", "completion": "\n    # Calculate the number of integral points inside the square\n    if x1 > x2 or y1 > y2:\n        return 0\n    \n    # The number of integral points inside the square is given by the area of the square\n    # minus the points on the boundary\n    integral_points = (x2 - x1 - 1) * (y2 - y1 - 1)\n    \n    return max(0, integral_points)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/191", "completion": "\n    thirty_day_months = [\"April\", \"June\", \"September\", \"November\"]\n    if monthname3 in thirty_day_months:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "MBPP/192", "completion": "\n    return any(char.isdigit() for char in str) and any(char.isalpha() for char in str)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/193", "completion": "\n    return tuple(dict.fromkeys(test_tup))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/194", "completion": "\n    decimal = 0\n    power = 0\n    while n > 0:\n        digit = n % 10\n        decimal += digit * (8 ** power)\n        n //= 10\n        power += 1\n    return decimal\n", "result": "passed", "passed": true}
{"task_id": "MBPP/195", "completion": "\n    low, high = 0, n - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1  # continue to search in the left half\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/197", "completion": "\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major and semi-minor axes\n    a = abs(a)\n    b = abs(b)\n\n    # The area of the largest triangle inscribed in an ellipse is given by the formula:\n    # Area = (3 * \u03c0 * a * b) / 4\n    area = (3 * math.pi * a * b) / 4\n\n    return area\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(4,2)==10.392304845413264\nAssertionError\n", "passed": false}
{"task_id": "MBPP/199", "completion": "\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/200", "completion": "\n    if not list1:\n        return []\n\n    max_value = max(list1)\n    return [index for index, value in enumerate(list1) if value == max_value]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/201", "completion": "\n    return len(set(lst)) == 1\n", "result": "passed", "passed": true}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([char for i, char in enumerate(str1) if i % 2 != 0])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(\"python\")==(\"pto\")\nAssertionError\n", "passed": false}
{"task_id": "MBPP/203", "completion": "\n    return bin(n1 ^ n2).count('1')\n", "result": "passed", "passed": true}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/205", "completion": "\n    inversion_count = 0\n    n = len(test_tup)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_tup[i] > test_tup[j]:\n                inversion_count += 1\n                \n    return inversion_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert candidate((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/206", "completion": "\n    return tuple(''.join(test_tup[i:i+2]) for i in range(len(test_tup) - 1))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    # Create a 2D array to store lengths of longest repeating subsequence\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the dp array\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/209", "completion": "\n    if heap:\n        hq.heappop(heap)  # Remove the smallest element\n    hq.heappush(heap, a)  # Insert the new item\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/210", "completion": "\n    pattern = r'^[a-zA-Z0-9-]*$'\n    return bool(re.match(pattern, string))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1 << n):\n        if bin(i).count('1') == n:\n            count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(3) == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n + 1))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/213", "completion": "\n    return tuple(str(a) + str(b) for a, b in zip(test_tup1, test_tup2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/215", "completion": "\n    decoded = []\n    i = 0\n    while i < len(alist):\n        count = alist[i]\n        value = alist[i + 1]\n        decoded.extend([value] * count)\n        i += 2\n    return decoded\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n  File \"<string>\", line 10, in decode_list\n        decoded.extend([value] * count)\nTypeError: can't multiply sequence by non-int of type 'list'\n", "passed": false}
{"task_id": "MBPP/216", "completion": "\n    for sublist in list1:\n        if not set(sublist).issubset(set(list2)):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n  File \"<string>\", line 6, in check_subset_list\n        if not set(sublist).issubset(set(list2)):\nTypeError: 'int' object is not iterable\n", "passed": false}
{"task_id": "MBPP/217", "completion": "\n    char_set = set()\n    for char in str:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(\"python\") == '\\0'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/218", "completion": "\n    if A == B:\n        return 0\n\n    operations = 0\n    while A != B:\n        if A > B:\n            A = math.floor(A / 2)\n        else:\n            B = math.floor(B / 2)\n        operations += 1\n\n    return operations\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 23, in check\n    assert candidate(4,10) == 4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/219", "completion": "\n    if not test_tup or K <= 0:\n        return ()\n    \n    sorted_tup = sorted(test_tup)\n    min_k = tuple(sorted_tup[:K])\n    max_k = tuple(sorted_tup[-K:])\n    \n    return min_k, max_k\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/220", "completion": "\n    # Define a regex pattern to match spaces, commas, dots, and colons\n    pattern = r'[ ,.:]'\n    \n    # Use re.findall to find all occurrences of the pattern\n    matches = re.findall(pattern, text)\n    \n    # Count the number of matches\n    count = len(matches)\n    \n    # If the count is less than or equal to n, return the original text\n    if count <= n:\n        return text\n    \n    # Replace only the first n occurrences of the matched characters\n    def replace_match(match):\n        nonlocal n\n        if n > 0:\n            n -= 1\n            return ''  # Replace with an empty string\n        return match.group(0)  # Return the original character if n is exhausted\n    \n    # Use re.sub with a custom replacement function\n    result = re.sub(pattern, replace_match, text)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 39, in <module>\n  File \"<string>\", line 35, in check\n    assert candidate('Python language, Programming language.',2)==('Python:language: Programming language.')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n", "result": "passed", "passed": true}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/223", "completion": "\n    # Count occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Check if count is greater than n/2\n    return count > n // 2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/225", "completion": "\n    if low == high:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    # Check if mid is the minimum\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n\n    # Check if mid-1 is the minimum\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    # Decide whether to go to the left half or the right half\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, high)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 25, in check\n    assert candidate([1,2,3,4,5],0,4) == 1\n  File \"<string>\", line 20, in find_Min\n        return find_Min(arr, low, mid - 1)\n        return find_Min(arr, low, mid - 1)\n  File \"<string>\", line 20, in find_Min\n        return find_Min(arr, low, mid - 1)\n        return find_Min(arr, low, mid - 1)\n  File \"<string>\", line 22, in find_Min\n        return find_Min(arr, mid + 1, high)\n        return find_Min(arr, mid + 1, high)\n        return find_Min(arr, mid + 1, high)\n  File \"<string>\", line 22, in find_Min\n        return find_Min(arr, mid + 1, high)\n        return find_Min(arr, mid + 1, high)\n        return find_Min(arr, mid + 1, high)\n  File \"<string>\", line 22, in find_Min\n        return find_Min(arr, mid + 1, high)\n        return find_Min(arr, mid + 1, high)\n        return find_Min(arr, mid + 1, high)\n  [Previous line repeated 977 more times]\nRecursionError: maximum recursion depth exceeded\n", "passed": false}
{"task_id": "MBPP/226", "completion": "\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r + 1):\n        if n & (1 << i) == 0:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate(4,1,2) == True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/229", "completion": "\n    negative = [x for x in arr if x < 0]\n    positive = [x for x in arr if x >= 0]\n    return negative + positive\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(' ', char)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/231", "completion": "\n    # Start from the second to last row and move upwards\n    for row in range(n - 2, -1, -1):\n        for col in range(row + 1):\n            # Update the current cell with the maximum sum of the two possible paths below it\n            tri[row][col] += max(tri[row + 1][col], tri[row + 1][col + 1])\n    \n    # The top element now contains the maximum sum\n    return tri[0][0]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/233", "completion": "\n    return 2 * 3.14159 * r * h\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(10,5)==314.15000000000003\nAssertionError\n", "passed": false}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n", "result": "passed", "passed": true}
{"task_id": "MBPP/235", "completion": "\n    result = 0\n    for i in range(32):  # Assuming a 32-bit integer\n        if i % 2 == 0:  # Check if the bit position is even\n            result |= (1 << i)  # Set the even bit in the result\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(10) == 10\nAssertionError\n", "passed": false}
{"task_id": "MBPP/236", "completion": "\n    if N < K:\n        return 0\n\n    # Calculate the number of triangles that can be formed\n    count = 0\n    for i in range(K, N + 1):\n        count += (N - i + 1) * (N - i + 2) // 2\n\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert candidate(4,2) == 7\nAssertionError\n", "passed": false}
{"task_id": "MBPP/237", "completion": "\n    # Create a Counter object to count occurrences of each tuple\n    occurrences = Counter(test_list)\n    \n    # Create a list to store the results\n    result = []\n    \n    # Iterate through the counted occurrences\n    for item, count in occurrences.items():\n        result.append((item, count))\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nAssertionError\n", "passed": false}
{"task_id": "MBPP/238", "completion": "\n    n = len(str)\n    return n * (n + 1) // 2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/239", "completion": "\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        next_value = current * 2\n        while next_value <= m:\n            total += count_sequences(next_value, length + 1)\n            next_value += 1\n        return total\n\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n\n    return total_sequences\n", "result": "passed", "passed": true}
{"task_id": "MBPP/240", "completion": "\n    if not list1 or not list2:\n        return list1\n    \n    list1[-1] = list2[-1]\n    return list1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/241", "completion": "\n    return [[[ '*' for _ in range(o)] for _ in range(n)] for _ in range(m)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/243", "completion": "\n    from collections import Counter\n\n    # Count the occurrences of each element in the list\n    count = Counter(lst)\n\n    # Sort the list based on the occurrence count and then by the element itself\n    sorted_list = sorted(lst, key=lambda x: (count[x], x))\n\n    return sorted_list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert candidate([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/244", "completion": "\n    if N < 0:\n        return 0  # The next perfect square after a negative number is 0\n    root = math.isqrt(N)  # Get the integer square root of N\n    next_square = (root + 1) ** 2  # Calculate the next perfect square\n    return next_square\n", "result": "passed", "passed": true}
{"task_id": "MBPP/245", "completion": "\n    # Function to calculate the maximum sum increasing subsequence\n    def max_sum_increasing_subsequence(arr):\n        dp = arr.copy()\n        for i in range(1, len(arr)):\n            for j in range(i):\n                if arr[i] > arr[j]:\n                    dp[i] = max(dp[i], dp[j] + arr[i])\n        return dp\n\n    # Function to calculate the maximum sum decreasing subsequence\n    def max_sum_decreasing_subsequence(arr):\n        dp = arr.copy()\n        for i in range(len(arr) - 2, -1, -1):\n            for j in range(len(arr) - 1, i, -1):\n                if arr[i] > arr[j]:\n                    dp[i] = max(dp[i], dp[j] + arr[i])\n        return dp\n\n    # Calculate maximum sum increasing subsequence\n    inc_sum = max_sum_increasing_subsequence(arr)\n    \n    # Calculate maximum sum decreasing subsequence\n    dec_sum = max_sum_decreasing_subsequence(arr)\n\n    # Calculate maximum sum bi-tonic subsequence\n    max_bi_tonic_sum = 0\n    for i in range(n):\n        max_bi_tonic_sum = max(max_bi_tonic_sum, inc_sum[i] + dec_sum[i] - arr[i])\n\n    return max_bi_tonic_sum\n", "result": "passed", "passed": true}
{"task_id": "MBPP/246", "completion": "\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    \n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            break\n        guess = next_guess\n    \n    return guess\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate(2)==1.414213562373095\nAssertionError\n", "passed": false}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequence\n    dp = [[0] * n for _ in range(n)]\n\n    # All characters of a single character are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table\n    for length in range(2, n + 1):  # length of substring\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # Reconstruct the longest palindromic subsequence\n    index = dp[0][n - 1]\n    lps_str = [''] * index\n    i, j = 0, n - 1\n\n    while i <= j:\n        if str[i] == str[j]:\n            lps_str[index - 1] = str[i]\n            i += 1\n            j -= 1\n            index -= 1\n        elif dp[i][j - 1] > dp[i + 1][j]:\n            j -= 1\n        else:\n            i += 1\n\n    # Fill the second half of the lps_str\n    for k in range(len(lps_str) // 2):\n        lps_str[index] = lps_str[k]\n        index += 1\n\n    return ''.join(lps_str)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 52, in <module>\n  File \"<string>\", line 48, in check\n    assert candidate(\"TENS FOR TENS\") == 5 \nAssertionError\n", "passed": false}
{"task_id": "MBPP/248", "completion": "\n    if n < 1:\n        return 0\n    return harmonic_sum(n - 1) + 1 / n\n", "result": "passed", "passed": true}
{"task_id": "MBPP/249", "completion": "\n    return list(set(array_nums1) & set(array_nums2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/251", "completion": "\n    return [element] + list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nAssertionError\n", "passed": false}
{"task_id": "MBPP/252", "completion": "\n    polar_coordinates = []\n    for number in numbers:\n        r, theta = cmath.polar(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(1) == (1.0, 0.0)\n  File \"<string>\", line 9, in convert\n    for number in numbers:\nTypeError: 'int' object is not iterable\n", "passed": false}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\b[aA]\\w*|\\b[eE]\\w*', text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate(\"python programe\")==['ame']\nAssertionError\n", "passed": false}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n    \n    primes = [True] * n\n    primes[0] = primes[1] = False  # 0 and 1 are not prime numbers\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    \n    return sum(primes)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/257", "completion": "\n    return b, a\n", "result": "passed", "passed": true}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/259", "completion": "\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nAssertionError\n", "passed": false}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        return None\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_prime(num):\n            count += 1\n    return num\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate(3) == 7 \n  File \"<string>\", line 12, in newman_prime\n        if is_prime(num):\nNameError: name 'is_prime' is not defined\n", "passed": false}
{"task_id": "MBPP/261", "completion": "\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/262", "completion": "\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be between 0 and the length of the list.\")\n    \n    return list1[:L], list1[L:]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/263", "completion": "\n    merged = d1.copy()  # Start with a copy of the first dictionary\n    merged.update(d2)   # Update with the second dictionary\n    return merged\n", "result": "passed", "passed": true}
{"task_id": "MBPP/264", "completion": "\n    if h_age < 0:\n        return \"Age cannot be negative\"\n    elif h_age == 0:\n        return 0\n    else:\n        return 16 * h_age + 31\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(12)==61\nAssertionError\n", "passed": false}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i + step] for i in range(0, len(S), step)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nAssertionError\n", "passed": false}
{"task_id": "MBPP/266", "completion": "\n    return 4 * (l ** 2)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/267", "completion": "\n    return sum(i**2 for i in range(1, n*2, 2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(3) == 37\nAssertionError\n", "passed": false}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/270", "completion": "\n    total_sum = 0\n    for i in range(n):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "MBPP/271", "completion": "\n    return sum(i**5 for i in range(1, n + 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(2) == 1056\nAssertionError\n", "passed": false}
{"task_id": "MBPP/272", "completion": "\n    return [t[-1] for t in test_list if isinstance(t, tuple) and len(t) > 0]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/274", "completion": "\n    sum_coeff = 0\n    for k in range(0, n + 1, 2):\n        sum_coeff += math.comb(n, k)\n    return sum_coeff\n", "result": "passed", "passed": true}
{"task_id": "MBPP/275", "completion": "\n    if n == 1:\n        return 0\n    else:\n        return (get_Position(a, n - 1, m) + a) % n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([2,5,4],3,2) == 2\n  File \"<string>\", line 11, in get_Position\n        return (get_Position(a, n - 1, m) + a) % n\n        return (get_Position(a, n - 1, m) + a) % n\n  File \"<string>\", line 11, in get_Position\n        return (get_Position(a, n - 1, m) + a) % n\n        return (get_Position(a, n - 1, m) + a) % n\nTypeError: unsupported operand type(s) for +: 'int' and 'list'\n", "passed": false}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * r**2 * h\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate(10,5)==1570.7500000000002\nAssertionError\n", "passed": false}
{"task_id": "MBPP/277", "completion": "\n    return {key: value for key, value in dict.items() if value > n}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nAssertionError\n", "passed": false}
{"task_id": "MBPP/278", "completion": "\n    return {x: sum(1 for y in test_tup if y == x) for x in set(test_tup)}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((1, 5, 7, (4, 6), 10) ) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/279", "completion": "\n    if n < 1:\n        return None\n    return n * (4 * n - 3)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/280", "completion": "\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return index\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x: x[0] - x[1], zip(nums1, nums2)))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/283", "completion": "\n    digit_count = [0] * 10\n    \n    # Count the frequency of each digit in the number\n    for digit in str(n):\n        digit_count[int(digit)] += 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if digit_count[i] > i:\n            return False\n            \n    return True\n", "result": "passed", "passed": true}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'a(b{2,3})'\n    if re.search(pattern, text):\n        return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(\"ac\")==('Not matched!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/286", "completion": "\n    # Create the modified array by repeating the original array k times\n    modified_array = a * k\n    \n    # Initialize variables to find the maximum subarray sum using Kadane's algorithm\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in modified_array:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n", "result": "passed", "passed": true}
{"task_id": "MBPP/287", "completion": "\n    return sum(i**2 for i in range(1, n + 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(2) == 20\nAssertionError\n", "passed": false}
{"task_id": "MBPP/288", "completion": "\n    def mod_inverse(a, p):\n        return pow(a, p - 2, p)\n\n    count = 0\n    for num in arr:\n        if num % P != 0:  # Ensure the number is not divisible by P\n            count += 1\n            mod_inv = mod_inverse(num, P)\n            print(f\"Modular inverse of {num} mod {P} is {mod_inv}\")\n\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate([ 1, 6, 4, 5 ], 4, 7) == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/289", "completion": "\n    return N % 7\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(100) == 5\nAssertionError\n", "passed": false}
{"task_id": "MBPP/290", "completion": "\n    if not list1:\n        return 0\n    return max(len(lst) for lst in list1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nAssertionError\n", "passed": false}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # For n > 2\n    same = k  # Ways to paint the last post the same color as the previous one\n    diff = k * (k - 1)  # Ways to paint the last post a different color\n\n    for i in range(3, n + 1):\n        new_same = diff  # Last post same as previous means previous must be different\n        new_diff = (same + diff) * (k - 1)  # Last post different can be from both cases\n\n        same = new_same\n        diff = new_diff\n\n    return same + diff\n", "result": "passed", "passed": true}
{"task_id": "MBPP/292", "completion": "\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return n // m\n", "result": "passed", "passed": true}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/294", "completion": "\n    if not listval:\n        return None\n    \n    max_value = None\n    \n    for item in listval:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    \n    return max_value\n", "result": "passed", "passed": true}
{"task_id": "MBPP/295", "completion": "\n    return sum(i for i in range(1, number + 1) if number % i == 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(8)==7\nAssertionError\n", "passed": false}
{"task_id": "MBPP/296", "completion": "\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/297", "completion": "\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n", "result": "passed", "passed": true}
{"task_id": "MBPP/298", "completion": "\n    return [item for sublist in l1 for item in sublist if item in l2]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n  File \"<string>\", line 5, in intersection_nested_lists\n    return [item for sublist in l1 for item in sublist if item in l2]\n  File \"<string>\", line 5, in <listcomp>\n    return [item for sublist in l1 for item in sublist if item in l2]\nTypeError: 'int' object is not iterable\n", "passed": false}
{"task_id": "MBPP/299", "completion": "\n    aggregate = defaultdict(int)\n    \n    for key, value in stdata:\n        aggregate[key] += value\n    \n    max_key = max(aggregate, key=aggregate.get)\n    return (max_key, aggregate[max_key])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    \n    # Initialize a 2D array to store the counts\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    \n    # Base case: one way to have a sum of 0 with 0 bits\n    dp[0][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(n + 1):\n            # If we add a 0\n            dp[i][j] += dp[i - 1][j]\n            # If we add a 1\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n    \n    # The result is the square of the number of ways to form the first half\n    return dp[n][n] * dp[n][n]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 26, in check\n    assert candidate(1) == 2.0\nAssertionError\n", "passed": false}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict) and d:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}})==4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return -1  # No bits are set\n\n    msb = 0\n    while n > 1:\n        n >>= 1\n        msb += 1\n\n    return msb\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert candidate(6) == 4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/303", "completion": "\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate([1,2,0],3) == False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/304", "completion": "\n    n = len(arr)\n    # Calculate effective rotations\n    effective_rotations = rotations % n\n    \n    # Find the new index after rotations\n    new_index = (index - effective_rotations + n) % n\n    \n    return arr[new_index]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p') or word.startswith('P')]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/306", "completion": "\n    if index == n:\n        return 0\n\n    # Include the current element if it is greater than the last included element\n    include = 0\n    if k == -1 or a[index] > a[k]:\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, index)\n\n    # Exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max(include, exclude)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nAssertionError\n", "passed": false}
{"task_id": "MBPP/307", "completion": "\n    if not (0 <= m < len(tuplex)) or not (0 <= n < len(tuplex[m])):\n        raise IndexError(\"Index out of range\")\n    \n    return tuple(row[n] for row in tuplex)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n  File \"<string>\", line 9, in colon_tuplex\n        raise IndexError(\"Index out of range\")\nIndexError: Index out of range\n", "passed": false}
{"task_id": "MBPP/308", "completion": "\n    if len(nums1) == 0 or len(nums2) == 0 or N <= 0:\n        return []\n\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n\n    products.sort(reverse=True)\n    return products[:N]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/309", "completion": "\n    return a if a > b else b\n", "result": "passed", "passed": true}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/311", "completion": "\n    # Find the leftmost unset bit\n    leftmost_unset_bit = 1 << (n.bit_length())\n    \n    # Set the leftmost unset bit\n    result = n | leftmost_unset_bit\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(10) == 14\nAssertionError\n", "passed": false}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(19,17)==6426.651371693521\nAssertionError\n", "passed": false}
{"task_id": "MBPP/313", "completion": "\n    positive_numbers = [num for num in list1 if num > 0]\n    return positive_numbers\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate([-1,-2,1,2]) == 1,2\nAssertionError: 2\n", "passed": false}
{"task_id": "MBPP/314", "completion": "\n    if n == 0:\n        return 0\n\n    # Create a DP array to store the maximum sum up to each column\n    dp = [0] * (n + 1)\n\n    # Initialize the first two columns\n    dp[1] = max(grid[0][0], grid[1][0])\n    if n > 1:\n        dp[2] = max(dp[1], grid[0][1], grid[1][1])\n\n    # Fill the DP array\n    for i in range(3, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + max(grid[0][i - 1], grid[1][i - 1]))\n\n    return dp[n]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    max_len = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n\n    return max_word\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(\"eve\") == \"-1\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    last_index = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            last_index = mid  # Update last_index when x is found\n            left = mid + 1    # Continue searching in the right half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_index\n", "result": "passed", "passed": true}
{"task_id": "MBPP/317", "completion": "\n    if not alist:\n        return []\n\n    encoded = []\n    for key, group in groupby(alist):\n        count = len(list(group))\n        encoded.append((key, count))\n    \n    return encoded\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/318", "completion": "\n    n = s // 3\n    max_vol = 0\n    for a in range(1, n + 1):\n        for b in range(a, (s - a) // 2 + 1):\n            c = s - a - b\n            if c >= b:\n                volume = a * b * c\n                max_vol = max(max_vol, volume)\n    return max_vol\n", "result": "passed", "passed": true}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n", "result": "passed", "passed": true}
{"task_id": "MBPP/320", "completion": "\n    sum_n = n * (n + 1) // 2\n    sum_n_squared = sum_n ** 2\n    sum_squared_n = sum(i ** 2 for i in range(1, n + 1))\n    \n    return sum_n_squared - sum_squared_n\n", "result": "passed", "passed": true}
{"task_id": "MBPP/321", "completion": "\n    def is_demlo(num):\n        str_num = str(num)\n        length = len(str_num)\n        return all(str_num[i] == str_num[length - 1 - i] for i in range(length))\n\n    demlo_numbers = []\n    for i in range(1, s + 1):\n        if is_demlo(i):\n            demlo_numbers.append(i)\n\n    return demlo_numbers\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate(\"111111\") == '12345654321'\n  File \"<string>\", line 11, in find_demlo\n    for i in range(1, s + 1):\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "MBPP/322", "completion": "\n    if not list1:\n        return []\n\n    min_value = min(list1)\n    return [index for index, value in enumerate(list1) if value == min_value]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/323", "completion": "\n    if cur >= n:\n        return\n\n    if out_of_place >= 0:\n        if (arr[cur] >= 0 and arr[out_of_place] >= 0) or (arr[cur] < 0 and arr[out_of_place] < 0):\n            out_of_place = -1\n        else:\n            # Rotate the elements\n            arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n            if out_of_place - 1 >= 0 and arr[out_of_place - 1] < 0:\n                out_of_place = -1\n            else:\n                out_of_place = cur\n\n    if out_of_place == -1:\n        if arr[cur] >= 0:\n            out_of_place = cur\n\n    right_rotate(arr, n, out_of_place, cur + 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 26, in check\n    assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nNameError: name 're_arrange' is not defined\n", "passed": false}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 == 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum squares for each number up to n\n    min_squares = [float('inf')] * (n + 1)\n    min_squares[0] = 0  # Base case: 0 can be represented by 0 squares\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        j = 1\n        # Check all square numbers less than or equal to i\n        while j * j <= i:\n            min_squares[i] = min(min_squares[i], min_squares[i - j * j] + 1)\n            j += 1\n\n    return min_squares[n]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/326", "completion": "\n    word_count = defaultdict(int)\n    \n    for string in test_list:\n        for word in string.split():\n            word_count[word] += 1\n            \n    most_common_word = max(word_count, key=word_count.get)\n    return most_common_word, word_count[most_common_word]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/327", "completion": "\n    return (x == y) or (y == z) or (x == z)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/328", "completion": "\n    if not list1 or m <= 0 or n <= 0 or m > len(list1) or n > len(list1):\n        return list1\n\n    m = m % len(list1)  # Normalize m\n    n = n % len(list1)  # Normalize n\n\n    # Rotate left by m\n    list1 = list1[m:] + list1[:m]\n\n    # Rotate left by n\n    list1 = list1[n:] + list1[:n]\n\n    return list1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,5}\\b'\n    return re.findall(pattern, text)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/331", "completion": "\n    # Count the number of bits in the binary representation of n\n    total_bits = n.bit_length()\n    \n    # Count the number of set bits in n\n    set_bits = bin(n).count('1')\n    \n    # The number of unset bits is the total bits minus the set bits\n    unset_bits = total_bits - set_bits\n    \n    return unset_bits\n", "result": "passed", "passed": true}
{"task_id": "MBPP/332", "completion": "\n    frequency = {}\n    for char in str1:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n", "result": "passed", "passed": true}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/334", "completion": "\n    return a + b > c and a + c > b and b + c > a\n", "result": "passed", "passed": true}
{"task_id": "MBPP/335", "completion": "\n    return (n / 2) * (2 * a + (n - 1) * d)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/336", "completion": "\n    monthname1 = monthname1.lower()\n    if monthname1 == \"february\":\n        return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\b[.!?]?$'\n    match = re.search(pattern, text)\n    return match is not None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(\"python.\")==('Found a match!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert count_Substring_With_Equal_Ends('aba') == 4\nNameError: name 'count_Substring_With_Equal_Ends' is not defined\n", "passed": false}
{"task_id": "MBPP/339", "completion": "\n    divisors = {}\n    \n    for i in range(1, x + 1):\n        if x % i == 0:\n            divisors[i] = 0\n            \n    for j in range(1, y + 1):\n        for divisor in divisors.keys():\n            if j % divisor == 0:\n                divisors[divisor] += 1\n                \n    max_divisor = max(divisors, key=divisors.get)\n    return max_divisor, divisors[max_divisor]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate(2,2) == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/340", "completion": "\n    # Filter out non-positive numbers and sort the remaining numbers\n    positive_nums = sorted(num for num in lst if num > 0)\n    \n    # Return the sum of the first three smallest positive numbers\n    return sum(positive_nums[:3]) if len(positive_nums) >= 3 else 0\n", "result": "passed", "passed": true}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/342", "completion": "\n    if not list or not all(list):\n        return []\n\n    min_heap = []\n    current_max = float('-inf')\n\n    # Initialize the heap and find the initial max\n    for i in range(len(list)):\n        heappush(min_heap, Node(list[i][0], i, 0))\n        current_max = max(current_max, list[i][0])\n\n    min_range = float('inf')\n    range_start, range_end = -1, -1\n\n    while len(min_heap) == len(list):\n        current_min_node = heappop(min_heap)\n        current_min = current_min_node.value\n\n        # Update the range if the current range is smaller\n        if current_max - current_min < min_range:\n            min_range = current_max - current_min\n            range_start, range_end = current_min, current_max\n\n        # If there are more elements in the current list, push the next element to the heap\n        if current_min_node.index + 1 < len(list[current_min_node.list_num]):\n            next_value = list[current_min_node.list_num][current_min_node.index + 1]\n            heappush(min_heap, Node(next_value, current_min_node.list_num, current_min_node.index + 1))\n            current_max = max(current_max, next_value)\n        else:\n            break\n\n    return [range_start, range_end]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 56, in <module>\n  File \"<string>\", line 52, in check\n    assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(\"python\")==(6,0)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/344", "completion": "\n    odd_squares = []\n    for i in range(n, m + 1):\n        if i % 2 != 0:  # Check if the number is odd\n            odd_squares.append(i ** 2)  # Append the square of the odd number\n    return odd_squares\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(5,100) == 8\nAssertionError\n", "passed": false}
{"task_id": "MBPP/345", "completion": "\n    if len(nums) < 2:\n        return []\n\n    differences = []\n    for i in range(len(nums) - 1):\n        differences.append(nums[i + 1] - nums[i])\n    \n    return differences\n", "result": "passed", "passed": true}
{"task_id": "MBPP/346", "completion": "\n    if n <= 0 or k <= 0:\n        return []\n\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(k):\n            if i % 2 == 0:\n                row.append(i * k + j + 1)\n            else:\n                row.append(i * k + (k - j))\n        result.append(row)\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate(4, 3) == 5\nAssertionError\n", "passed": false}
{"task_id": "MBPP/347", "completion": "\n    return (m * (m + 1) * n * (n + 1)) // 4\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(4,3) == 20\nAssertionError\n", "passed": false}
{"task_id": "MBPP/348", "completion": "\n    if r < 0 or r > n:\n        return 0\n    if n == 0:\n        return 1 if r == 0 else 0\n\n    return bin_coff(n - 1, r) + bin_coff(n - 1, r - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert find_ways(4) == 2\nNameError: name 'find_ways' is not defined\n", "passed": false}
{"task_id": "MBPP/349", "completion": "\n    return all(char in '01' for char in string)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(\"01010101010\") == \"Yes\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/350", "completion": "\n    if not s:\n        return 0\n\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    min_length = len(s)\n    for count in char_count.values():\n        min_length = min(min_length, len(s) - count)\n\n    return min_length\n", "result": "passed", "passed": true}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    \n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n        \n        if count[arr[i]] == k:\n            return arr[i]\n    \n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([2,3,4,3,5,7,1,2,3,5],10,2) == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/352", "completion": "\n    return len(set(str)) == len(str)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n", "result": "passed", "passed": true}
{"task_id": "MBPP/355", "completion": "\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 <= radius**2:\n                count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(2) == 8\nAssertionError\n", "passed": false}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/357", "completion": "\n    if not test_list:\n        return None\n    return max(test_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nAssertionError\n", "passed": false}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y if y != 0 else None, nums1, nums2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/359", "completion": "\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is zero (one root)\n    if discriminant == 0:\n        return True\n    else:\n        return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(1,3,2) == \"Yes\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/360", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_carol(n - 1) + get_carol(n - 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(2) == 7\nAssertionError\n", "passed": false}
{"task_id": "MBPP/361", "completion": "\n    return [item for item in list1 if item != []]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/362", "completion": "\n    if not nums:\n        return None\n    \n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_num = max(count_dict, key=count_dict.get)\n    return max_num\n", "result": "passed", "passed": true}
{"task_id": "MBPP/363", "completion": "\n    return [(x[0] + K, x[1] + K) for x in test_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/364", "completion": "\n    n = len(ch)\n    count1 = 0\n    count2 = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            if ch[i] != '0':\n                count1 += 1\n            if ch[i] != '1':\n                count2 += 1\n        else:\n            if ch[i] != '1':\n                count1 += 1\n            if ch[i] != '0':\n                count2 += 1\n\n    return min(count1, count2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 24, in check\n    assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nNameError: name 'min_flip_to_make_string_alternate' is not defined\n", "passed": false}
{"task_id": "MBPP/365", "completion": "\n    if n < 0:\n        n = -n  # Make n positive if it's negative\n    return len(str(n))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n\n    max_product = float('-inf')\n    \n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n            \n    return max_product\n", "result": "passed", "passed": true}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/368", "completion": "\n    return [elem for elem in test_tup for _ in range(N)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nAssertionError\n", "passed": false}
{"task_id": "MBPP/369", "completion": "\n    return 2 * h * (l + w)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/370", "completion": "\n    return tuple(sorted(price))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nAssertionError\n", "passed": false}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return left_element\n\n    mid = (left_element + right_element) // 2\n\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    sorted_nums = []\n    while nums:\n        sorted_nums.append(hq.heappop(nums))\n    return sorted_nums\n", "result": "passed", "passed": true}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n", "result": "passed", "passed": true}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    \n    permutations = []\n    for i in range(len(str)):\n        current_char = str[i]\n        remaining_str = str[:i] + str[i+1:]\n        for perm in permute_string(remaining_str):\n            permutations.append(current_char + perm)\n    \n    return list(set(permutations))  # Remove duplicates\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nAssertionError\n", "passed": false}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate(219,2)==218\nAssertionError\n", "passed": false}
{"task_id": "MBPP/376", "completion": "\n    seen = {}\n    result = []\n    for item in test_tup:\n        if item in seen:\n            result.append(\"custom_value\")  # Replace with your custom value\n        else:\n            seen[item] = True\n            result.append(item)\n    return tuple(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, \"\")\n", "result": "passed", "passed": true}
{"task_id": "MBPP/378", "completion": "\n    if not test_list:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + l * h + w * h)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/380", "completion": "\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nAssertionError\n", "passed": false}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/382", "completion": "\n    if not A:\n        return 0\n\n    left, right = 0, len(A) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Check if mid is greater than the next element\n        if mid < right and A[mid] > A[mid + 1]:\n            return mid + 1\n        \n        # Check if mid is less than the previous element\n        if mid > left and A[mid] < A[mid - 1]:\n            return mid\n        \n        # Decide which half to continue searching\n        if A[mid] >= A[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return 0\n", "result": "passed", "passed": true}
{"task_id": "MBPP/383", "completion": "\n    # Create a mask with 1s at even bit positions\n    mask = 0xAAAAAAAA  # Binary: 10101010...\n    \n    # Toggle the bits at even positions using XOR\n    return n ^ mask\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(10) == 15\nAssertionError\n", "passed": false}
{"task_id": "MBPP/384", "completion": "\n    if not arr:\n        return 0\n    \n    smallest = min(arr)\n    return arr.count(smallest)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(9) == 12\nAssertionError\n", "passed": false}
{"task_id": "MBPP/386", "completion": "\n    open_count = 0\n    swap_count = 0\n\n    for char in s:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count > 0:\n                open_count -= 1\n            else:\n                swap_count += 1\n\n    return swap_count + open_count // 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate(\"[]][][\") == 2\nAssertionError\n", "passed": false}
{"task_id": "MBPP/387", "completion": "\n    if isinstance(N, str) and all(c in '0123456789abcdefABCDEF' for c in N):\n        decimal_value = int(N, 16)\n        return \"Even\" if decimal_value % 2 == 0 else \"Odd\"\n    else:\n        raise ValueError(\"Input must be a valid hexadecimal string.\")\n", "result": "passed", "passed": true}
{"task_id": "MBPP/388", "completion": "\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n", "result": "passed", "passed": true}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n  File \"<string>\", line 5, in add_string\n    return [string + item for item in list]\n  File \"<string>\", line 5, in <listcomp>\n    return [string + item for item in list]\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "MBPP/391", "completion": "\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/392", "completion": "\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n // 2) + n // 4 + n // 5, n)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert get_max_sum(60) == 106\nAssertionError\n", "passed": false}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x)) if input_list else None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nAssertionError\n", "passed": false}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/395", "completion": "\n    char_count = {}\n    \n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n", "result": "passed", "passed": true}
{"task_id": "MBPP/396", "completion": "\n    if len(string) == 0:\n        return False\n    return string[0] == string[-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate(\"abba\") == \"Valid\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([10,2,56])==14\nAssertionError\n", "passed": false}
{"task_id": "MBPP/399", "completion": "\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return list(freq_dict.items())\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/401", "completion": "\n    return tuple(tuple(a + b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(test_tup1, test_tup2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n\n    # Precompute factorials and their modular inverses\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n\n    def mod_inverse(a, p):\n        return pow(a, p - 2, p)\n\n    inv_fact_r = mod_inverse(fact[r], p)\n    inv_fact_n_r = mod_inverse(fact[n - r], p)\n\n    return (fact[n] * inv_fact_r % p * inv_fact_n_r % p) % p\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 24, in check\n    assert candidate(17,9,18)==10\nAssertionError\n", "passed": false}
{"task_id": "MBPP/403", "completion": "\n    # Check if the string starts with http:// or https://\n    if not (str.startswith(\"http://\") or str.startswith(\"https://\")):\n        return False\n\n    # Split the URL into components\n    url_parts = str.split(\"://\", 1)[1].split(\"/\")\n\n    # Check if the domain part is valid\n    domain = url_parts[0]\n    if not re.match(r'^[a-zA-Z0-9.-]+$', domain):\n        return False\n\n    # Check if the domain contains at least one dot\n    if '.' not in domain:\n        return False\n\n    # Check if the path part (if exists) is valid\n    if len(url_parts) > 1:\n        path = \"/\".join(url_parts[1:])\n        if not re.match(r'^[a-zA-Z0-9/._-]*$', path):\n            return False\n\n    return True\n", "result": "passed", "passed": true}
{"task_id": "MBPP/404", "completion": "\n    return a if a < b else b\n", "result": "passed", "passed": true}
{"task_id": "MBPP/405", "completion": "\n    return tuple1 in tuplex\n", "result": "passed", "passed": true}
{"task_id": "MBPP/406", "completion": "\n    return \"Even\" if x % 2 == 0 else \"Odd\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(12) == \"Even Parity\"\nAssertionError\n", "passed": false}
{"task_id": "MBPP/407", "completion": "\n    digits = list(str(n))\n    length = len(digits)\n\n    # Step 1: Find the pivot\n    pivot = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n\n    if pivot == -1:\n        return -1  # No bigger number can be formed\n\n    # Step 2: Find the rightmost successor to the pivot\n    for i in range(length - 1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            # Step 3: Swap the pivot with the successor\n            digits[pivot], digits[i] = digits[i], digits[pivot]\n            break\n\n    # Step 4: Reverse the sequence after the pivot\n    digits = digits[:pivot + 1] + digits[pivot + 1:][::-1]\n\n    return int(''.join(digits))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35, in <module>\n  File \"<string>\", line 32, in check\n    assert candidate(10)==False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while k > 0 and min_heap:\n        sum_val, i, j = heapq.heappop(min_heap)\n        result.append((nums1[i], nums2[j]))\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 26, in check\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) < 2:\n        return None\n\n    min_product = float('inf')\n    min_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n\n    return min_pair\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n  File \"<string>\", line 13, in min_product_tuple\n            product = list1[i] * list1[j]\nTypeError: can't multiply sequence by non-int of type 'tuple'\n", "passed": false}
{"task_id": "MBPP/410", "completion": "\n    if not listval:\n        return None\n    \n    min_value = None\n    \n    for item in listval:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n    \n    return min_value\n", "result": "passed", "passed": true}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r'_(.)', lambda x: x.group(1).upper(), word).capitalize()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate('android_tv') == 'AndroidTv'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/413", "completion": "\n    if not list1 or n < 0:\n        return []\n    \n    return [t[n] for t in list1 if len(t) > n]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/414", "completion": "\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return None  # Not enough elements to form a pair\n\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([1,2,3,4,7,0,8,4]) == (7,8)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/416", "completion": "\n    if n <= 1:\n        return n\n    \n    return max(n, breakSum(n // 2) + breakSum(n // 3) + breakSum(n // 4))\n\n", "result": "passed", "passed": true}
{"task_id": "MBPP/417", "completion": "\n    from collections import defaultdict\n\n    grouped = defaultdict(list)\n\n    for item in Input:\n        if item:  # Check if the tuple is not empty\n            grouped[item[0]].append(item)\n\n    return dict(grouped)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 16, in check\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/418", "completion": "\n    if not lst:\n        return 0\n    \n    max_length = 0\n    current_length = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n            \n    max_length = max(max_length, current_length)\n    \n    return max_length\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 27, in <module>\n  File \"<string>\", line 23, in check\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nAssertionError\n", "passed": false}
{"task_id": "MBPP/419", "completion": "\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/420", "completion": "\n    return sum(i**3 for i in range(1, n + 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(2) == 72\nAssertionError\n", "passed": false}
{"task_id": "MBPP/421", "completion": "\n    return ', '.join(test_tup)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n  File \"<string>\", line 5, in concatenate_tuple\n    return ', '.join(test_tup)\nTypeError: sequence item 2: expected str instance, int found\n", "passed": false}
{"task_id": "MBPP/422", "completion": "\n    total = sum(i**3 for i in range(1, n + 1))\n    average = total / n\n    return average\n", "result": "passed", "passed": true}
{"task_id": "MBPP/423", "completion": "\n    # Create a table to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Initialize the first column of the dp table\n    for i in range(m):\n        dp[i][0] = gold[i][0]\n\n    # Fill the dp table\n    for j in range(1, n):\n        for i in range(m):\n            # Gold collected from the left\n            left = dp[i][j - 1]\n\n            # Gold collected from the upper left diagonal\n            upper_left = dp[i - 1][j - 1] if i > 0 else 0\n\n            # Gold collected from the lower left diagonal\n            lower_left = dp[i + 1][j - 1] if i < m - 1 else 0\n\n            # Maximum gold collected from the three possible directions\n            dp[i][j] = gold[i][j] + max(left, upper_left, lower_left)\n\n    # Find the maximum gold that can be collected from the last column\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][n - 1])\n\n    return max_gold\n", "result": "passed", "passed": true}
{"task_id": "MBPP/424", "completion": "\n    return tuple(s[-1] for s in test_tuple)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nAssertionError\n", "passed": false}
{"task_id": "MBPP/425", "completion": "\n    return sum(1 for sublist in list1 if x in sublist)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/427", "completion": "\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2  # Start with a big gap, then reduce the gap\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Shift earlier gap-sorted elements up until the correct location for my_list[i] is found\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Reduce the gap for the next element\n\n    return my_list\n", "result": "passed", "passed": true}
{"task_id": "MBPP/429", "completion": "\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nAssertionError\n", "passed": false}
{"task_id": "MBPP/430", "completion": "\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola.\")\n    \n    directrix = - (b**2 - 4*a*c) / (4*a)\n    return directrix\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(5,3,2)==-198\nAssertionError\n", "passed": false}
{"task_id": "MBPP/431", "completion": "\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate([1,2,3,4,5], [6,7,8,9])==None\nAssertionError\n", "passed": false}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/433", "completion": "\n    return [x for x in arr if x > number]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'a+b+'\n    return re.fullmatch(pattern, text) is not None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(\"ac\")==('Not matched!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/435", "completion": "\n    return abs(n) % 10\n", "result": "passed", "passed": true}
{"task_id": "MBPP/436", "completion": "\n    negative_numbers = [num for num in list1 if num < 0]\n    return negative_numbers\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate([-1,4,5,-6]) == -1,-6\nAssertionError: -6\n", "passed": false}
{"task_id": "MBPP/437", "completion": "\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(\"python\")==(\"yhn\")\nAssertionError\n", "passed": false}
{"task_id": "MBPP/438", "completion": "\n    return len([pair for pair in test_list if (pair[1], pair[0]) in test_list])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/440", "completion": "\n    adverb_pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(adverb_pattern, text)\n\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n\n    return positions\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/441", "completion": "\n    return 6 * (l ** 2)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/442", "completion": "\n    if not nums:\n        return 0\n    \n    positive_numbers = [num for num in nums if num > 0]\n    return len(positive_numbers) / len(nums)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nAssertionError\n", "passed": false}
{"task_id": "MBPP/443", "completion": "\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate([1,2,3,-4,-6]) == -6\nAssertionError\n", "passed": false}
{"task_id": "MBPP/444", "completion": "\n    return [t[:K] for t in test_list]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/445", "completion": "\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n  File \"<string>\", line 5, in index_multiplication\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n  File \"<string>\", line 5, in <genexpr>\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\nTypeError: can't multiply sequence by non-int of type 'tuple'\n", "passed": false}
{"task_id": "MBPP/446", "completion": "\n    # Convert the tuple to a Counter object\n    tup_counter = Counter(tup)\n    \n    # Create a dictionary to hold the counts\n    occurrence_dict = {}\n    \n    # Count occurrences of each element in the list\n    for item in lst:\n        occurrence_dict[item] = occurrence_dict.get(item, 0) + 1\n    \n    # Combine the counts from the tuple and the list\n    for key in tup_counter:\n        occurrence_dict[key] = occurrence_dict.get(key, 0) + tup_counter[key]\n    \n    return occurrence_dict\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 25, in check\n    assert candidate(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nAssertionError\n", "passed": false}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x ** 3, nums))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/448", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    \n    perrin = [0, 1, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    \n    return sum(perrin[:n])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(9) == 49\nAssertionError\n", "passed": false}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the lengths of the sides of the triangle\n    a = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    b = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    c = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n\n    # Check the triangle inequality theorem\n    return (a + b > c) and (a + c > b) and (b + c > a)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(1,5,2,5,4,6) == 'Yes'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/450", "completion": "\n    return [s for s in str if len(s) == l]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s+', '', text1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/452", "completion": "\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 15, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate(1500,1200)==None\nAssertionError\n", "passed": false}
{"task_id": "MBPP/453", "completion": "\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n", "result": "passed", "passed": true}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\bz\\b'\n    return re.findall(pattern, text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(\"pythonz.\")==('Found a match!')\nAssertionError\n", "passed": false}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None  # Invalid month number\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(2)==False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/457", "completion": "\n    if not lst:\n        return None\n    \n    min_length = float('inf')\n    min_sublist = None\n    \n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n", "result": "passed", "passed": true}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]+', '', str1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/460", "completion": "\n    return [sublist[0] for sublist in lst if sublist]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate('PYthon') == 1\nAssertionError\n", "passed": false}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n\n    result = []\n    for r in range(1, len(list1) + 1):\n        result.extend(combinations(list1, r))\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/464", "completion": "\n    return all(value == n for value in dict.values())\n", "result": "passed", "passed": true}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v is not None and v != ''}\n", "result": "passed", "passed": true}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n\n    # Check if mid is a peak element\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return mid\n\n    # If the left neighbor is greater, then the peak lies on the left side\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n\n    # If the right neighbor is greater, then the peak lies on the right side\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nNameError: name 'find_peak' is not defined\n", "passed": false}
{"task_id": "MBPP/467", "completion": "\n    if deciNum < 0:\n        return \"Invalid input: Negative numbers cannot be converted to octal.\"\n    \n    if deciNum == 0:\n        return \"0\"\n    \n    octalNum = \"\"\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octalNum = str(remainder) + octalNum\n        deciNum //= 8\n    \n    return octalNum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate(10) == 12\nAssertionError\n", "passed": false}
{"task_id": "MBPP/468", "completion": "\n    if n == 0:\n        return 0\n\n    # Initialize the maximum product array\n    max_product = [1] * n\n\n    # Fill the max_product array\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n\n    # Return the maximum product found\n    return max(max_product)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000 \nAssertionError\n", "passed": false}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0 or k == 0:\n        return 0\n\n    if k >= n // 2:\n        return sum(max(price[i + 1] - price[i], 0) for i in range(n - 1))\n\n    dp = [[0] * n for _ in range(k + 1)]\n\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n\n    return dp[k][n - 1]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/470", "completion": "\n    return tuple(sum(pair) for pair in zip(*test_tup))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n  File \"<string>\", line 5, in add_pairwise\n    return tuple(sum(pair) for pair in zip(*test_tup))\nTypeError: 'int' object is not iterable\n", "passed": false}
{"task_id": "MBPP/471", "completion": "\n    remainder = 1\n    for i in range(lens):\n        remainder = (remainder * arr[i]) % n\n    return remainder\n", "result": "passed", "passed": true}
{"task_id": "MBPP/472", "completion": "\n    if not l:\n        return False\n    \n    l = sorted(set(l))\n    return l == list(range(l[0], l[-1] + 1))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([1,2,1]) == False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/473", "completion": "\n    return list(set(test_list1) & set(test_list2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nAssertionError\n", "passed": false}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/475", "completion": "\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return dict(sorted_items)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/476", "completion": "\n    if not nums:\n        return 0\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n", "result": "passed", "passed": true}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n", "result": "passed", "passed": true}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]+', '', str1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n //= 10\n    return n\n", "result": "passed", "passed": true}
{"task_id": "MBPP/480", "completion": "\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    max_char = max(char_count, key=char_count.get)\n    return max_char\n", "result": "passed", "passed": true}
{"task_id": "MBPP/481", "completion": "\n    # Base Cases\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n\n    # If the last element is greater than the sum, ignore it\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    # Check if sum can be obtained by any of the following:\n    # (1) including the last element\n    # (2) excluding the last element\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum - set[n-1])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z][a-z]+'\n    return re.findall(pattern, text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate(\"Geeks\") == 'Yes'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/483", "completion": "\n    n = 1\n    factorial = 1\n    \n    while True:\n        factorial *= n\n        if factorial % x == 0:\n            return n\n        n += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate(5) == 4\nAssertionError\n", "passed": false}
{"task_id": "MBPP/484", "completion": "\n    return [t for t in test_list1 if t not in test_list2]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/485", "completion": "\n    str_n = str(n)\n    return str_n == str_n[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 9, in check\n    assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nNameError: name 'largest_palindrome' is not defined\n", "passed": false}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)  # Take advantage of symmetry\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator *= (n - i)\n        denominator *= (i + 1)\n    return numerator // denominator\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nNameError: name 'binomial_probability' is not defined\n", "passed": false}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n", "result": "passed", "passed": true}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a**2\n", "result": "passed", "passed": true}
{"task_id": "MBPP/489", "completion": "\n    if not arr:\n        return 0\n    \n    largest = max(arr)\n    return arr.count(largest)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/490", "completion": "\n    return [t for t in test_list if t == t[::-1]]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nAssertionError\n", "passed": false}
{"task_id": "MBPP/491", "completion": "\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/492", "completion": "\n    left, right = 0, len(item_list) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = item_list[mid]\n        \n        if mid_value == item:\n            return mid  # Item found, return its index\n        elif mid_value < item:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n            \n    return -1  # Item not found\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([1,2,3,5,8], 6) == False\nAssertionError\n", "passed": false}
{"task_id": "MBPP/493", "completion": "\n    hexagon_coords = []\n    angle = math.radians(60)  # 60 degrees in radians\n\n    for i in range(6):\n        x = startx + radius * math.cos(i * angle)\n        y = starty + radius * math.sin(i * angle)\n        hexagon_coords.append((x, y))\n\n    return hexagon_coords\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nAssertionError\n", "passed": false}
{"task_id": "MBPP/494", "completion": "\n    return int(''.join(map(str, test_tup)), 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate((1, 1, 0, 1, 0, 0, 1)) == '105'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]+', '', str1)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/496", "completion": "\n    if n <= 0 or n > len(nums):\n        return []\n\n    # Create a max heap with the first n elements (invert values for max heap)\n    max_heap = [-num for num in nums[:n]]\n    hq.heapify(max_heap)\n\n    # Process the remaining elements\n    for num in nums[n:]:\n        if -num > max_heap[0]:  # Compare with the largest in the max heap\n            hq.heappop(max_heap)  # Remove the largest\n            hq.heappush(max_heap, -num)  # Add the new number\n\n    # Return the smallest n elements in sorted order\n    return sorted(-x for x in max_heap)\n", "result": "passed", "passed": true}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/498", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n", "result": "passed", "passed": true}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n", "result": "passed", "passed": true}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 8, in check\n    assert candidate(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nAssertionError\n", "passed": false}
{"task_id": "MBPP/501", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 10, in check\n    assert num_comm_div(2,4) == 2\nNameError: name 'num_comm_div' is not defined\n", "passed": false}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n", "result": "passed", "passed": true}
{"task_id": "MBPP/503", "completion": "\n    if not nums:\n        return []\n\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/504", "completion": "\n    return sum(i**3 for i in range(1, n + 1))\n", "result": "passed", "passed": true}
{"task_id": "MBPP/505", "completion": "\n    non_zero = [x for x in A if x != 0]\n    zero_count = A.count(0)\n    return non_zero + [0] * zero_count\n", "result": "passed", "passed": true}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n", "result": "passed", "passed": true}
{"task_id": "MBPP/508", "completion": "\n    common_elements = [elem for elem in l1 if elem in l2]\n    index_l1 = [l1.index(elem) for elem in common_elements]\n    index_l2 = [l2.index(elem) for elem in common_elements]\n    \n    return index_l1 == index_l2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 12, in check\n    assert candidate([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nAssertionError\n", "passed": false}
{"task_id": "MBPP/509", "completion": "\n    if n < 1 or n % 2 == 0:\n        return \"Input must be a positive odd integer.\"\n    \n    odd_numbers = [i for i in range(1, n + 1) if i % 2 != 0]\n    average = sum(odd_numbers) / len(odd_numbers)\n    \n    return average\n", "result": "passed", "passed": true}
{"task_id": "MBPP/510", "completion": "\n    count = 0\n    n = len(arr)\n\n    # Generate all possible subsequences\n    for i in range(1 << n):  # 2^n possible subsequences\n        product = 1\n        for j in range(n):\n            if i & (1 << j):  # Check if j-th element is included\n                product *= arr[j]\n                if product >= k:  # If product exceeds k, break early\n                    break\n        if product < k:\n            count += 1\n\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 22, in check\n    assert candidate([1,2,3,4], 10) == 11\nAssertionError\n", "passed": false}
