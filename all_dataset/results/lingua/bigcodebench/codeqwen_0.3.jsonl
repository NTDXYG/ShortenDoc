{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download files from specific directory on FTP server using wget subprocess. Args ftp_server (str): FTP server address Default is 'ftp.dlptest.com'. ftp_user (str): FTP server username Default is 'dlpuser'. ftp_password (str): FTP server password Default 'rNrKYTX9g7z3RgJRmxWuGHbeu'. ftp_dir (str): directory path server files downloaded Default is '/ftp/test'. Returns List[str]: list of filenames attempted to downloaded from FTP server. Raises Exception: failure in connecting to FTP server Outputs message \"Failed to connect FTP server}\" failure logging into FTP server Outputs message \"Failed to log into user {str}\" failure in changing to specified directory Outputs message \"Failed to change to directory {ftp_dir} server: {str(e)}\" Requirements: - subprocess - ftplib - os Example >>> task_func() ['file1.txt', 'file2.jpg', ...]\n    \"\"\"\n    # Connect to FTP server\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(user=ftp_user, passwd=ftp_password)\n    except Exception as e:\n        print(f\"Failed to connect FTP server: {str(e)}\")\n        return []\n\n    # Change to specified directory\n    try:\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"Failed to change to directory {ftp_dir} server: {str(e)}\")\n        ftp.quit()\n        return []\n\n    # Get list of files in directory\n    files = ftp.nlst()\n\n    # Download files\n    downloaded_files = []\n    for file in files:\n        try:\n            with open(file, 'wb') as f:\n                ftp.retrbinary('RETR ' + file, f.write)\n            downloaded_files.append(file)\n        except Exception as e:\n            print(f\"Failed to download file {file} server: {str(e)}\")\n\n    # Quit FTP connection\n    ftp.quit()\n\n    return downloaded_files\n"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute list shell commands read from CSV file save outputs in separate files Each command output written to unique file in specified output directory If command fails error message exit code appended to output file. Parameters: commands_file_path (str): Path to CSV file containing shell commands first column file not have headers. output_dir_path (str): Path where outputs commands saved. If directory exist created. Requirements: - subprocess - csv - os Raises FileNotFoundError: If commands_file_path exist. Returns: list of str: list of paths to output files created in output directory each named as 'command_X_output.txt' X is command index. If command execution fails output file error message exit code. Example: >>> task_func(\"commands.csv\", \"/path/to/output_directory\") ['/path/to/command_1_output.txt',/command_2_output.txt' ...]\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"File {commands_file_path} does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    output_files = []\n    with open(commands_file_path, \"r\") as file:\n        reader = csv.reader(file)\n        for index, row in enumerate(reader):\n            command = row[0]\n            output_file_path = os.path.join(output_dir_path, f\"command_{index+1}_output.txt\")\n            try:\n                with open(output_file_path, \"w\") as output_file:\n                    process = subprocess.Popen(command, shell=True, stdout=output_file, stderr=subprocess.STDOUT)\n                    process.wait()\n                    output_files.append(output_file_path)\n            except Exception as e:\n                with open(output_file_path, \"w\") as output_file:\n                    output_file.write(f\"Error executing command: {command}\\nExit code: {process.returncode}\\nError message: {str(e)}\")\n                output_files.append(output_file_path)\n\n    return output_files\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if process running based name If not running start using process name as command If running terminate restart executing name as command. Parameters: process_name (str): name process to check manage should executable as command. Returns str: message indicating action taken \"Process not found. Starting <process_name>.\" \"Process found. Restarting <process_name>.\" Requirements subprocess - psutil - time Example >>> task_func('notepad') \"Process not found. Starting notepad.\" OR task_func('notepad \"Process found. Restarting notepad.\"\n    \"\"\"\n    process = psutil.Process(pid=os.getpid())\n    if process_name not in (p.name() for p in psutil.process_iter(['name'])):\n        subprocess.Popen(process_name)\n        return f\"Process not found. Starting {process_name}.\"\n    else:\n        for proc in psutil.process_iter(['name']):\n            if proc.name() == process_name:\n                proc.terminate()\n                time.sleep(1)\n                subprocess.Popen(process_name)\n                return f\"Process found. Restarting {process_name}.\"\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips files (not including subdirectories in directory returns path to created zip file. Parameters: directory (str): path containing files zipped. Returns str path to generated zip file Returns None if directory contain files Raises FileNotFoundError if directory Requirements: - os - glob - zipfile zip name always 'files.zip' Example >>> path = task_func('/path/to/files') >>> isinstance(path, str) True\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    files = glob.glob(os.path.join(directory, '*'))\n    if not files:\n        return None\n\n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for file in files:\n            zipf.write(file, os.path.basename(file))\n\n    return zip_path\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing URLs plot Parameters text (str): text analyze Returns WordCloud object generated word cloud Raises ValueError(\"No words available generate word cloud after removing URLs.\"): no words available after removing URLs Requirements wordcloud.WordCloud matplotlib.pyplot Example print(task_func('Visit https://www.python.org more info Python great love Python.'Python' 1.0 'Visit' 0.5 'info' 0.5 'great' 0.5 'love' 0.5 print(task_func'Check link http://www.example Machine learning fascinating.'Check' 1.0 'link' 1.0 'Machine' 1.0 'learning' 1.0 'fascinating' 1.0\n    \"\"\"\n    # Remove URLs\n    text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n\n    # Create word cloud\n    wordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = None, \n                min_font_size = 10).generate(text)\n\n    # Plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.tight_layout(pad = 0) \n\n    plt.show()\n\n    return wordcloud\n\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train random forest classifier classification rows dataframe column interest plot bar plot feature importance each column xlabel bar plot 'Feature Importance Score' ylabel 'Features' title 'Visualizing Important Features' Sort feature importances descending order Use feature importances x-axis feature names y-axis Parameters df (pandas.DataFrame) : Dataframe data classify target_column (str) : Name target column Returns sklearn.model.RandomForestClassifier : random forest classifier trained input data matplotlib.axes.Axes: Axes object plotted data. Requirements pandas - sklearn.ensemble - seaborn - matplotlib.pyplot Example import pandas as pd data = pd.DataFrame({\"X\" : [-1, 3, 5, -4, 7, 2], \"label\": [0, 1, 1, 0, 1, 1]}) model, ax = task_func(data, \"label\") print(data.head(2)) X label 0 -1 0 1 3 1 >>> print(model) RandomForestClassifier(random_state=42)\n    \"\"\"\n    # Split data into features and target\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    # Initialize and train the RandomForestClassifier\n    model = RandomForestClassifier(random_state=42)\n    model.fit(X, y)\n\n    # Get feature importances\n    importances = model.feature_importances_\n\n    # Create a DataFrame for feature importances\n    feature_importances = pd.DataFrame({'feature': X.columns, 'importance': importances})\n\n    # Sort feature importances by importance score\n    feature_importances = feature_importances.sort_values('importance', ascending=False)\n\n    # Plot feature importances\n    plt.figure(figsize=(10, 6))\n    sns.barplot(x='importance', y='feature', data=feature_importances)\n    plt.xlabel('Feature Importance Score')\n    plt.ylabel('Features')\n    plt.title('Visualizing Important Features')\n    plt.show()\n\n    return model, ax\n\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates Flask application configured user authentication Flask-Login defines routes login logout protected page user authentication managed simple User class login form Flask-WTF application uses dynamic configuration security template rendering Parameters: secret_key (str): secret key application session management template_folder (str): path directory containing Flask templates Requirements flask flask_login flask_wtf wtforms wtforms.validators werkzeug.security Returns Flask application instance configured user authentication. Examples >>> app = task_func('mysecretkey' 'templates') >>> 'login' [rule.endpoint rule app.url_map.iter_rules()] True >>> app.config['SECRET_KEY'] 'mysecretkey' True\n    \"\"\"\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n\n    class User(UserMixin):\n        def __init__(self, username, password):\n            self.id = username\n            self.password = generate_password_hash(password)\n\n        def check_password(self, password):\n            return check_password_hash(self.password, password)\n\n    @login_manager.user_loader\n    def load_user(username):\n        return User(username, 'password')\n\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = load_user(form.username.data)\n            if user and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n        return render_template('login.html', form=form)\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return render_template('protected.html')\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('index'))\n\n    return app\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies removes outliers from column dataset based on Z-score standardizes column calculates Z-scores removes data points where Z-score exceeds threshold visualizes data before after outlier removal. Parameters: data dataset column index column for outliers outlier_z_score Z-score threshold identify outliers Returns tuple containing original data data without outliers indices outliers. Requirements: - numpy matplotlib.pyplot scipy.stats - sklearn.preprocessing.StandardScaler function plots two plots 'Data with Outliers' shows original data including outliers 'Data without Outliers' displays data after removing outliers Z-score threshold visual comparison impact of outlier removal on dataset. Examples data = np.array([[14, 25], [1, 22] [7, 8] [100, 200]]) column = 1 len(task_func(data, column, 3.0)) 3 isinstance(task_func(data column, 3.0)[0] np.ndarray) True >>> isinstance(task_func(data column 3.0)[1] np.ndarray) True isinstance(task(data 3.0)[2] tuple) True\n    \"\"\"\n    # Extract the specified column\n    column_data = data[:, column]\n    \n    # Calculate Z-scores\n    z_scores = stats.zscore(column_data)\n    \n    # Identify outliers\n    outliers = np.where(np.abs(z_scores) > outlier_z_score)\n    \n    # Remove outliers\n    data_without_outliers = np.delete(data, outliers, axis=0)\n    \n    # Plotting\n    plt.figure(figsize=(12, 6))\n    plt.subplot(1, 2, 1)\n    plt.scatter(range(len(column_data)), column_data, label='Data with Outliers')\n    plt.title('Data with Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.scatter(range(len(column_data) - len(outliers[0])), data_without_outliers[:, column], label='Data without Outliers')\n    plt.title('Data without Outliers')\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.legend()\n    \n    plt.show()\n    \n    return data, data_without_outliers, outliers\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-means clustering dataset generate scatter plot visualizing clusters centroids Parameters data (pd.DataFrame): dataset clustered rows samples columns features. n_clusters (int): number clusters form greater than 1. Defaults to 3. Returns tuple np.ndarray array cluster labels each sample plt.Axes Axes object scatter plot showing clusters centroids ValueError If 'data not pd.DataFrame ValueError 'n_clusters' not integer greater than 1. Requirements - numpy - pandas - matplotlib - sklearn Example np.random.seed(42) data = pd.DataFrame(np.random.rand(100, 2) columns=['Feature1', 'Feature2']) ax = task_func(data, 3) ax.get_title() 'K-Means Clustering'\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' not pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' not integer greater than 1\")\n    \n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    labels = kmeans.fit_predict(data)\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data['Feature1'], data['Feature2'], c=labels, cmap='viridis')\n    \n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='x', s=200, label='Centroids')\n    \n    ax.set_title('K-Means Clustering')\n    ax.set_xlabel('Feature1')\n    ax.set_ylabel('Feature2')\n    ax.legend()\n    \n    return labels, ax\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) dataset record result generates scatter plot transformed data Parameters data (DataFrame): dataset n_components number principal components calculate Default 2. Returns DataFrame transformed data principal components Axes matplotlib Axes object scatter plot ValueError n_components not positive integer Requirements - numpy - pandas matplotlib.pyplot sklearn.decomposition Example data = pd.DataFrame([[14, 25], [1, 22] [7, 8]] columns['Column1 'Column2']) transformed_data plot = task_func(data)\n    \"\"\"\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    \n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    \n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n    ax.set_xlabel('Principal Component 1')\n    ax.set_ylabel('Principal Component 2')\n    ax.set_title('PCA Scatter Plot')\n    \n    return pd.DataFrame(transformed_data), ax\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws seaborn pair plot iris dataset using Arial font function sets global font to Arial for better readability visual appeal generates pair plot from iris dataset each subplot represents relationship between two features colored by species plot includes title 'Iris Dataset Pair Plot' labels each feature axes. Parameters: None Returns plt.Figure: matplotlib Figure object seaborn pair plot iris dataset plot has 'Iris Dataset Pair Plot' title subplot axes labeled feature names 'sepal length (cm) width (cm 'petal length. Requirements: matplotlib.pyplot - pandas - seaborn - sklearn.datasets Example: >>> = task_func() >>> type(fig) <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    # Load iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target\n\n    # Set global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Create seaborn pair plot\n    pair_plot = sns.pairplot(df, hue='species', diag_kind='hist', plot_kws={'alpha': 0.7, 's': 80, 'edgecolor': 'w'}, diag_kws={'bins': 20})\n\n    # Set title\n    pair_plot.fig.suptitle('Iris Dataset Pair Plot', y=1.02)\n\n    # Label axes\n    pair_plot.set_axis_labels('sepal length (cm)', 'sepal width (cm)')\n\n    # Show plot\n    plt.show()\n\n    return pair_plot.fig\n"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates plot random time series data past 30 days reproducibility controlled optional seed parameter plot styled Arial font readability. Parameters: seed (int optional): random number generator ensure reproducibility Defaults to 42. Returns matplotlib.axes.Axes Axes object line plot time series data plot 'Date' x-axis label 'Value' y-axis label 'Random Time Series Data' title. Raises ValueError issue generating data plot. Requirements matplotlib.pyplot - pandas - random - datetime Example >>> ax = task_func() >>> ax.get_title() 'Random Time Series Data'.get_xlabel() 'Date' >>> ax.get_ylabel() 'Value'\n    \"\"\"\n    random.seed(seed)\n    data = pd.DataFrame({\n        'Date': [datetime.now() - pd.DateOffset(days=i) for i in range(30)],\n        'Value': [random.randint(1, 100) for _ in range(30)]\n    })\n    \n    try:\n        fig, ax = plt.subplots()\n        ax.plot(data['Date'], data['Value'])\n        ax.set_title('Random Time Series Data', fontname='Arial')\n        ax.set_xlabel('Date', fontname='Arial')\n        ax.set_ylabel('Value', fontname='Arial')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n        return ax\n    except Exception as e:\n        raise ValueError(f\"Issue generating data plot: {e}\")\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw correlation heatmap Boston Housing dataset using Seaborn option save specified file Parameters seed (int optional): Random seed for reproducibility Defaults 42. font family sans-serif Arial Returns matplotlib.axes.Axes Axes object containing heatmap plot Raises ValueError error generating saving plot. Requirements matplotlib - os - pandas - seaborn - numpy Example ax = task_func() >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    # Your code here\n    pass\n"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes time series in 'value' column DataFrame into trend seasonality residuals Parameters: df (DataFrame): DataFrame with columns 'group' 'date' 'value'. freq (str optional): Frequency of time series data. Defaults to 'D' (daily). decomposition_model (str optional): Type of decomposition model Options 'additive' or 'multiplicative' Defaults to 'multiplicative'. Returns: tuple: tuple containing decomposition result (DecomposeResult object) matplotlib Axes object. Raises ValueError: If 'df' not DataFrame lacks required columns contains invalid data types. ValueError 'freq' not valid frequency string. ValueError If 'decomposition_model' not 'additive' or 'multiplicative'. Requirements: - pandas - matplotlib.pyplot - statsmodels.tsa.seasonal Example df = pd.DataFrame({ \"group\": [\"A\"] * 14, \"date\": pd.to_datetime([\"2022-01-01\",]), \"value\": [10, 12, 13, 15, 17, 16, 14, 13, 12 15 18, 20, 19], }) >>> result, ax = task_func(df, freq='D', decomposition_model='multiplicative') >>> plt.show() display plot with title 'Time Series Decomposition' y-axis labeled 'Value'\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame\")\n    if not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"'df' must contain columns 'group', 'date', 'value'\")\n    if not isinstance(freq, str):\n        raise ValueError(\"'freq' must be a string\")\n    if freq not in ['D', 'W', 'M', 'Q', 'A']:\n        raise ValueError(\"'freq' must be a valid frequency string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"'decomposition_model' must be 'additive' or 'multiplicative'\")\n    \n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n    \n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, freq=freq)\n    \n    fig, ax = plt.subplots(4, 1, figsize=(10, 8))\n    decomposition.observed.plot(ax=ax[0], legend=False)\n    ax[0].set_title('Observed')\n    decomposition.trend.plot(ax=ax[1], legend=False)\n    ax[1].set_title('Trend')\n    decomposition.seasonal.plot(ax=ax[2], legend=False)\n    ax[2].set_title('Seasonal')\n    decomposition.resid.plot(ax=ax[3], legend=False)\n    ax[3].set_title('Residuals')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return decomposition, ax\n"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate pandas Series random dates specified date range including start end_date optional seed for reproducibility function creates series dates randomly selected between specified start end dates inclusive allows specifying seed for random number generator ensure reproducible results suitable for simulations tests consistency. Parameters start_date optional): start date range Defaults to January 1, 2020. end_date optional): end date range Defaults to December 31, 2020. seed (int optional): Seed for random number generator reproducibility Default 42. Returns pandas.Series: Series object containing random dates specified range each date datetime.datetime object series length matches number days in specified range. Raises ValueError: If 'start_date or 'end_date' not datetime.datetime instance or 'start_date later than 'end_date' start_date end_date inclusive both dates potential values generated series default seed value 42 results reproducible by default unless different seed specified user. Requirements pandas - datetime - random Example dates = task_func(seed=123) >>> print(dates.head()) Prints first 5 dates from series 0 2020-01-27 1 2020-05-17 2 2020-02-14 3 2020-07-27 4 2020-05-16 dtype datetime64[ns]\n    \"\"\"\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"'start_date' and 'end_date' must be datetime.datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"'start_date' must be earlier than 'end_date'\")\n    \n    random_seed(seed)\n    delta = end_date - start_date\n    random_days = [start_date + timedelta(days=randint(0, delta.days)) for _ in range(delta.days + 1)]\n    return pd.Series(random_days)\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify list adding element '12' concatenate CSV files directory into DataFrame number files concatenated determined by sum numbers list. Parameters: my_list input list modified in place file_dir optional): directory search for CSV files. Defaults './data_files/' file_ext optional): file extension files concatenate Defaults '.csv' Returns DataFrame pandas DataFrame concatenating data from selected CSV files TypeError 'my_list' not list FileNotFoundError no files found in specified directory. Requirements - pandas - os - glob Example create_dummy_csv() >>> my_list = [1, 2, 3] df = task_func(my_list) print(df.head()) B 0 0 3 1 1 4 2 2 5 3 0 3 4 1 4 >>> tearDown_dummy()\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' not list\")\n    \n    my_list.append('12')\n    \n    file_list = glob.glob(os.path.join(file_dir, '*' + file_ext))\n    \n    if not file_list:\n        raise FileNotFoundError(\"No files found in specified directory\")\n    \n    df_list = []\n    for file in file_list:\n        df = pd.read_csv(file)\n        df_list.append(df)\n    \n    df_concat = pd.concat(df_list, ignore_index=True)\n    \n    return df_concat\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list' appending number 12 generates list random integers based on sum elements_list limited by 'size' measures time plots histogram of generated random numbers size list determined by sum numbers in 'my_list' upper limit set by 'size' random integers within range 1 to 100 inclusive. Parameters: my_list (list): input list containing numeric elements size (int): Maximum size limit for generated list random numbers Default is 100. seed (int): Seed value for random number generator for reproducibility Default is 100. Returns tuple: containing time taken to generate list (in seconds float) matplotlib Axes object for histogram x-axis labeled 'Number' representing range of random integers y-axis labeled 'Frequency' representing frequency of each integer in generated list. Raises TypeError: If 'my_list' not list ValueError: If contains elements not numeric histogram plots distribution of random numbers generated number range (1-100) on x-axis count (frequency) of each number on y-axis. Requirements: - random - time - matplotlib.pyplot Example: >>> my_list = [2, 3, 5] >>> time_taken, ax = task_func(my_list) >>> print(type(time_taken)) Example output: <class 'float'> >>> ax.get_title() Returns 'Histogram of Random Numbers'\n    \"\"\"\n    random_seed(seed)\n    start_time = time.time()\n    elements_list = [randint(1, 100) for _ in range(sum(my_list))]\n    if not all(isinstance(i, (int, float)) for i in elements_list):\n        raise ValueError(\"All elements in the list must be numeric.\")\n    if len(elements_list) > size:\n        raise ValueError(\"The sum of elements in the list exceeds the size limit.\")\n    ax = plt.subplot()\n    ax.hist(elements_list, bins=range(1, 101), align='left')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Numbers')\n    plt.show()\n    end_time = time.time()\n    return end_time - start_time, ax\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape first table from web page extract data into Pandas DataFrame function scrapes first table specified web page URL extracts data into DataFrame each row corresponds to table row (<tr>) each column represents data within table data elements (<td>) row DataFrame columns named after table's header row (<th> if present If table lacks headers columns remain unnamed. Parameters: url (str): URL webpage to scrape Defaults to 'http://example.com' Returns pd.DataFrame: containing scraped table data rows corresponding to table rows columns named after table headers if available. Raises ConnectionError: issue connecting to URL requests.HTTPError: If HTTP request URL fails ValueError: If no table data found page or page content parsed. Assumes webpage contains one table attempts to parse first table encountered. Requirements: - pandas - requests - bs4 Example: >>> df = task_func('https://en.wikipedia/List_of_countries_by_GDP_(nominal)') >>> print(df) 0 0 1 Largest economies world by GDP (nominal...\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except (requests.ConnectionError, requests.HTTPError) as e:\n        raise ConnectionError(f\"Issue connecting to {url}: {e}\")\n\n    soup = BeautifulSoup(response.content, 'html.parser')\n    table = soup.find('table')\n\n    if table is None:\n        raise ValueError(f\"No table data found on {url}\")\n\n    headers = [header.text for header in table.find_all('th')]\n    rows = table.find_all('tr')\n\n    data = []\n    for row in rows[1:]:  # Skip header row\n        row_data = [cell.text for cell in row.find_all('td')]\n        data.append(row_data)\n\n    df = pd.DataFrame(data, columns=headers)\n    return df\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw histograms numeric columns DataFrame return plots Each histogram represents distribution values one numeric column column name plot title 'Value' x-axis label 'Frequency' y-axis label. Parameters: df (DataFrame): containing data Returns list list Matplotlib Axes objects each representing histogram numeric column. Raises ValueError: input not non-empty DataFrame or no numeric columns. Requirements: - pandas - numpy - matplotlib.pyplot Example >>> df = pd.DataFrame({'A': np.random.normal(0, 1, 100), 'B': np.random.exponential(1, 100)}) >>> axes = task_func(df) ax axes: ... plt.show()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input must be a non-empty DataFrame.\")\n    \n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    if not numeric_cols.any():\n        raise ValueError(\"No numeric columns in the DataFrame.\")\n    \n    axes = []\n    for col in numeric_cols:\n        ax = df[col].hist(bins=30, alpha=0.5)\n        ax.set_title(f'{col} Value')\n        ax.set_xlabel('Frequency')\n        ax.set_ylabel('Value')\n        axes.append(ax)\n    \n    return axes\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans IP range checks if port open each function returns dictionary with IP addresses keys boolean port status (True if open False otherwise). Parameters: ip_range (str): IP address range scan CIDR notation port (int): port number each IP Returns dict dictionary mapping IP addresses to port status (True if open). Examples result = task_func('192.168.0.0/24', 80) >>> isinstance(result,) True >>> all(isinstance(key, str) isinstance(value, bool) key result.items()) True Requirements: - socket ipaddress.IPv4Network threading.Thread\n    \"\"\"\n    ip_network = IPv4Network(ip_range)\n    results = {}\n    for ip in ip_network:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)\n        result = sock.connect_ex((str(ip), port))\n        sock.close()\n        results[str(ip)] = result == 0\n    return results\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information message type timestamp message from log file stores in CSV format utility ideal for converting text logs into tructured format log format of 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE'. Parameters: log_file (str): file path to log file parsed. Returns: str: file path to newly created CSV file structured log data. Requirements: - re - pandas - datetime Raises ValueError: If timestamp log entry invalid or no valid log entries found. Example: >>> output_path = task_func('server.log') >>> print(output_path) log_data.csv\n    \"\"\"\n    # Read log file\n    with open(log_file, 'r') as file:\n        log_data = file.readlines()\n\n    # Initialize list to store structured log data\n    structured_logs = []\n\n    # Regular expression pattern to match log entry\n    pattern = r'(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.+)'\n\n    # Iterate over log entries\n    for entry in log_data:\n        match = re.match(pattern, entry)\n        if match:\n            # Extract log entry components\n            log_type, timestamp, message = match.groups()\n            # Convert timestamp to datetime object\n            timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')\n            # Format timestamp to 'YYYY-MM-DD HH:MM:SS'\n            timestamp = timestamp.strftime('%Y-%m-%d %H:%M:%S')\n            # Create structured log entry\n            structured_log = f'{log_type}: [{timestamp}] - {message}'\n            # Append structured log entry to list\n            structured_logs.append(structured_log)\n        else:\n            raise ValueError('Invalid timestamp log entry found')\n\n    # Create DataFrame from structured log data\n    df = pd.DataFrame(structured_logs, columns=['Log Entry'])\n\n    # Create CSV file with structured log data\n    output_path = 'log_data.csv'\n    df.to_csv(output_path, index=False)\n\n    return output_path\n\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes visualizes distribution word lengths in text function generates histogram subplot facilitates understanding word lengths text. Parameters: text (str): text string word lengths calculated. rwidth (float optional): Specifies relative bar width in histogram. Defaults to 0.8. Returns matplotlib.axes.Axes: Axes object containing histogram word lengths. Requirements: - re - matplotlib - numpy If no words in input text or words filtered out histogram empty no bins created. Example: >>> import matplotlib >>> ax = task_func( test sentence.') >>> isinstance(ax, matplotlib.axes.Axes) True\n    \"\"\"\n    # Extract words from text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Calculate word lengths\n    word_lengths = [len(word) for word in words]\n    # Create histogram\n    ax = plt.subplot()\n    ax.hist(word_lengths, bins=np.arange(min(word_lengths), max(word_lengths) + 2), rwidth=rwidth)\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Word Lengths')\n    plt.show()\n    return ax\n\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Extracts articles titles case-insensitive keywords (\"like from DataFrame analyzes frequency each word excluding punctuation. Parameters: df (DataFrame): DataFrame columns 'Title' 'Content' with article data Returns: dictionary with keys words values frequency excluding punctuation marks. Requirements: - re - nltk - string ValueError: If DataFrame empty or contain necessary columns 'Title' 'Content'. Example import pandas as pd data = {'Title''What happening 'Nothing special 'Content' ['Like what see? 'Just normal text.} df = pd.DataFrame(data) >>> task_func(df) {'Like': 1, 'what': 1 'you': 1 'see': 1}\n    \"\"\"\n    if df.empty or 'Title' not in df.columns or 'Content' not in df.columns:\n        raise ValueError(\"DataFrame is empty or does not contain necessary columns 'Title' and 'Content'\")\n\n    # Combine 'Title' and 'Content' into a single column\n    df['Combined'] = df['Title'] + ' ' + df['Content']\n\n    # Convert all text to lowercase\n    df['Combined'] = df['Combined'].str.lower()\n\n    # Remove punctuation\n    df['Combined'] = df['Combined'].str.translate(str.maketrans('', '', punctuation))\n\n    # Tokenize the text\n    df['Combined'] = df['Combined'].apply(nltk.word_tokenize)\n\n    # Count the frequency of each word\n    word_freq = {}\n    for words in df['Combined']:\n        for word in words:\n            if word in word_freq:\n                word_freq[word] += 1\n            else:\n                word_freq[word] = 1\n\n    return word_freq\n\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares transforms text data from specified column in DataFrame removing stopwords numbers punctuation applying vectorization process to convert text into numeric format suitable for analysis. Parameters: dataframe (DataFrame): pandas DataFrame containing text data text_column (str): name of column from text processed. Returns DataFrame Returns DataFrame with each word (after preprocessing as column count as rows. Requirements: - pandas - re - sklearn Example df = pd.DataFrame({'text' [ test. 'Python cool! 'nltk sklearn useful for text analysis}) >>> result = task_func(df, 'text') >>> print(result.to_string(index=False)) analysis cool nltk python sklearn test text useful 0 1 1 1\n    \"\"\"\n    # Remove stopwords, numbers, punctuation\n    def preprocess_text(text):\n        text = re.sub(r'\\d+', '', text)  # Remove numbers\n        text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n        words = text.split()\n        words = [word for word in words if word not in STOPWORDS]\n        return ' '.join(words)\n\n    # Apply preprocessing to the specified column\n    dataframe[text_column] = dataframe[text_column].apply(preprocess_text)\n\n    # Vectorize the text data\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(dataframe[text_column])\n\n    # Convert the vectorized data into a DataFrame\n    vectorized_df = pd.DataFrame(vectorized_data.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return vectorized_df\n\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create GeoPandas DataFrame cities randomly generated coordinates specified ranges. Parameters dic Dictionary 'Lon' 'Lat' keys each tuple (min max) coordinate range Default {'Lon' (-180, 180), 'Lat': (-90, 90)} cities (list): city names Default ['New York' 'London 'Beijing 'Tokyo' 'Sydney'] Returns GeoDataFrame GeoPandas DataFrame 'City' 'Coordinates' ValueError 'Lon' 'Lat' keys missing values not tuples. Requirements - numpy geopandas shapely.geometry Example dic = {'Lon': (-180, 180), 'Lat': (-90, 90)} gdf = task_func(dic)\n    \"\"\"\n    if not isinstance(dic, dict):\n        raise ValueError(\"dic should be a dictionary\")\n    if not all(key in dic for key in ['Lon', 'Lat']):\n        raise ValueError(\"dic should contain 'Lon' and 'Lat' keys\")\n    if not all(isinstance(value, tuple) and len(value) == 2 for value in dic.values()):\n        raise ValueError(\"'Lon' and 'Lat' values should be tuples of length 2\")\n    if not isinstance(cities, list):\n        raise ValueError(\"cities should be a list\")\n    \n    lon_min, lon_max = dic['Lon']\n    lat_min, lat_max = dic['Lat']\n    \n    coordinates = np.random.uniform(low=(lon_min, lat_min), high=(lon_max, lat_max), size=(len(cities), 2))\n    \n    geometry = [Point(xy) for xy in coordinates]\n    \n    data = {'City': cities, 'Coordinates': geometry}\n    \n    gdf = gpd.GeoDataFrame(data, geometry='Coordinates')\n    \n    return gdf\n"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Generate weather report for specified cities at UTC datetime Parameters utc_datetime UTC datetime weather report generated tzinfo set to UTC. cities (list Cities weather report generated Default: ['New York 'London 'Beijing 'Tokyo 'Sydney' weather_conditions (list Possible weather conditions report Default ['Sunny 'Cloudy 'Rainy 'Snowy 'Stormy' timezones mapping city names to timezones Default cities seed (int): seed value for random number generation reproducibility. Default: 42 Returns pandas.DataFrame: DataFrame weather report Columns include 'City' name city 'Local Time': local time weather report formatted 'YYYY-MM-DD HH:MM:SS ZZZ' (ZZZ timezone abbreviation). 'Weather Condition': weather condition city local time ValueError: utc_datetime not datetime object or other parameters not in expected format. Requirements pandas - pytz - datetime - random Example utc_time = datetime(2023, 1, 1, 12, 0, 0 tzinfo=pytz.UTC) report = task_func(utc_time) >>> print(report) City Local Time Weather Condition 0 New York 2023-01-01 07:00:00 EST Sunny 1 London 2023-01-01 12:00:00 GMT Sunny 2 Beijing 2023-01-01 20:00:00 CST Rainy 3 Tokyo 2023-01-01 21:00:00 JST Cloudy 4 Sydney 2023-01-01 23:00:00 AEDT Cloudy\n    \"\"\"\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime not datetime object\")\n    \n    set_seed(seed)\n    \n    weather_report = []\n    for city in cities:\n        local_time = utc_datetime.astimezone(pytz.timezone(timezones[city]))\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        weather_report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'Weather Condition': weather_condition\n        })\n    \n    return pd.DataFrame(weather_report)\n"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate draw random sequence \"elements steps steps either -1 or 1 plotted as random walk Returns descriptive statistics random walk plot include count mean standard deviation minimum 5th percentile 25th percentile median 75th percentile 95th percentile maximum Parameters elements (int): number steps random walk seed seed random number generator Default 0 Returns dictionary containing descriptive statistics random walk. matplotlib.axes.Axes: Axes object plotted random walk Requirements - numpy matplotlib.pyplot pandas ValueError: If elements not positive integer. Example stats, ax = task_func(1000) >>> print(stats) {'count': 1000.0 'mean' 18.18 'std': 9.516415405086212 'min' -5.0 '5%': 1.0 '25%': 11.0 '50%': 20.0 '75%': 26.0 '95%': 31.0 'max': 36.0}\n    \"\"\"\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    np.random.seed(seed)\n    random_walk = np.cumsum(np.random.randint(-1, 2, elements))\n\n    stats = {\n        \"count\": elements,\n        \"mean\": np.mean(random_walk),\n        \"std\": np.std(random_walk),\n        \"min\": np.min(random_walk),\n        \"5%\": np.percentile(random_walk, 5),\n        \"25%\": np.percentile(random_walk, 25),\n        \"50%\": np.percentile(random_walk, 50),\n        \"75%\": np.percentile(random_walk, 75),\n        \"95%\": np.percentile(random_walk, 95),\n        \"max\": np.max(random_walk),\n    }\n\n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title(\"Random Walk\")\n    ax.set_xlabel(\"Step\")\n    ax.set_ylabel(\"Position\")\n\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download keep zip file from URL extract contents specified directory return list extracted files. Parameters: url (str): URL zip file download destination_directory (str): directory contents zip file extracted headers (dict optional): Custom headers request Defaults to {'accept' 'application/octet-stream'} Returns list list filenames extracted files. Requirements - requests - os - zipfile Example extracted_files = task_func(\"https://example/data.zip\", \"/path/to/destination\") >>> print(extracted_files) ['file1.txt' 'file2.csv']\n    \"\"\"\n    if headers is None:\n        headers = {'accept': 'application/octet-stream'}\n\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        with open(os.path.join(destination_directory, \"data.zip\"), \"wb\") as f:\n            f.write(response.content)\n\n        with zipfile.ZipFile(os.path.join(destination_directory, \"data.zip\"), \"r\") as zip_ref:\n            zip_ref.extractall(destination_directory)\n\n        extracted_files = [f for f in os.listdir(destination_directory) if os.path.isfile(os.path.join(destination_directory, f))]\n        return extracted_files\n    else:\n        return []\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate random RGB image view Parameters seed (int optional): Random seed for reproducibility Default 42. image_size (tuple optional): Size generated image (height width channels). Default (100, 100, 3). range_low optional): Lower bound random range Default 0. range_high optional): Upper bound range Default 255. Returns ax (matplotlib.axes.Axes): Axes object plot image (numpy.ndarray): numpy array generated image Raises ValueError: If range_low not less than range_high. Requirements random - numpy opencv matplotlib.pyplot Example ax, image = task_func()\n    \"\"\"\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n    \n    random.seed(seed)\n    np.random.seed(seed)\n    \n    image = np.random.randint(range_low, range_high, image_size)\n    \n    fig, ax = plt.subplots()\n    ax.imshow(image)\n    \n    return ax, image\n\nax, image = task_func()\nplt.show()\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates MxN matrix from list L normalizes based on sound pressure level (SPL) of specified audio file generates spectrogram. Parameters: L (list): list numbers matrix M rows N columns. audio_file (str): path to audio file for SPL calculation. Returns: numpy.ndarray: normalized MxN matrix. matplotlib.figure.Figure: figure object for generated spectrogram. FileNotFoundError: specified audio file exist. Notes spectrogram generated based on amplitude normalized matrix sound pressure level (SPL) calculated from audio file SPL calculated using formula: SPL = 20 * log10(sqrt(mean(data^2))) 'data' is audio data read from file spectrogram displayed with logarithmic scale for frequency linear scale for time SPL amplitude. Requirements: - numpy - os - soundfile - librosa - matplotlib Examples: >>> matrix = task_func([i for in range(100)], 10, 10, 'audio.wav') Requires 'audio.wav' to exist >>> matrix.shape (10, 10) >>> isinstance(matrix, np.ndarray) True\n    \"\"\"\n    # Check if audio file exists\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(f\"The file {audio_file} does not exist.\")\n\n    # Read audio file\n    data, sr = sf.read(audio_file)\n\n    # Calculate SPL\n    SPL = 20 * np.log10(np.sqrt(np.mean(data**2)))\n\n    # Create MxN matrix from list L\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize matrix based on SPL\n    matrix_normalized = matrix / SPL\n\n    # Generate spectrogram\n    fig, ax = plt.subplots()\n    ax.specgram(data, Fs=sr)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Frequency')\n    ax.set_yscale('log')\n    ax.set_xscale('linear')\n    ax.set_title(f'Spectrogram with SPL = {SPL:.2f} dB')\n\n    return matrix_normalized, fig\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    list tuples extract numeric values compute statistics generate histogram overlaid probability density function (PDF). Parameters original (list tuples): Input list each tuple second element numeric value Returns np.array numpy array extracted numeric values Basic statistics array mean standard deviation minimum maximum Axes matplotlib Axes object histogram overlaid PDF histogram plotted density True alpha 0.6 bins 'auto' automatic bin selection Requirements numpy matplotlib.pyplot scipy.stats Example original = [('a', 1) ('b', 2) ('c', 3) ('d', 4)] arr stats ax = task_func(original) print(arr) [1 2 3 4] print(stats) {'mean' 2.5 'std' 1.118033988749895 'min' 1 'max' 4}\n    \"\"\"\n    arr = np.array([t[1] for t in original])\n    stats = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr)\n    }\n    ax = plt.subplot()\n    ax.hist(arr, bins='auto', alpha=0.6, density=True)\n    ax.plot(arr, stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] * stats['std'] *"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array list normalize draw original normalized arrays function plot original normalized arrays using matplotlib Parameters original (list): list tuples unzipped into numpy array Returns np.array numpy array original data Normalized array matplotlib.axes.Axes Axes object plotted data Requirements numpy matplotlib.pyplot sklearn.preprocessing Example original = [('a', 1) ('b', 2)'c', 3) ('d', 4)] >>> arr norm_arr ax = task_func(original) print(arr) [1 2 3 4] print(norm_arr) [0.18257419 0.36514837 0.54772256 0.73029674]\n    \"\"\"\n    arr = np.array([x[1] for x in original])\n    norm_arr = preprocessing.normalize([arr])[0]\n    ax = plt.plot(arr, label='Original')\n    ax = plt.plot(norm_arr, label='Normalized')\n    plt.legend()\n    plt.show()\n    return arr, norm_arr, ax\n\n"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    dictionary \"data\", function performs operations Adds new key \"a\" value 1 to dictionary Generates signal based on values \"data\". Runs Fast Fourier Transform (FFT) on signal Plots returns FFT signal. Parameters: data (dict): input data dictionary Returns tuple tuple containing ndarray FFT signal Axes: plot of FFT. Requirements: - numpy - scipy.fftpack - matplotlib Example >>> data = {'key1': 1 'key2': 2 'key3': 3} >>> fft, ax = task_func(data)\n    \"\"\"\n    data['a'] = 1\n    freq = np.fft.fftfreq(len(data), 1/sample_rate)\n    fft_signal = np.fft.fft(data)\n    ax.plot(freq, np.abs(fft_signal))\n    ax.set_xlabel('Frequency (Hz)')\n    ax.set_ylabel('Magnitude')\n    ax.set_title('Fast Fourier Transform')\n    return fft_signal, ax\n\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates HTTP POST request handler processing incoming data data expected in JSON format key 'data' handler responds 200 success message if data valid or error message otherwise type response retrieved as 'content-type' length 'content-length'. two types error messages: 'Content-Type header not application/json' 'No data key in request'. Returns: function: class handles HTTP POST requests validates incoming data. Requirements: - cgi - http.server - json If 'content-type' header not 'application/json' client sent request unsupported format condition sends 400 Bad Request response message \"Content-Type header not application/json\". If JSON object not contain 'data' key 400 Bad Request response message \"No data key in request\". If request body not contain valid JSON 400 Bad Request response message \"Invalid JSON\". Examples: >>> handler = task_func() >>> isinstance(handler, type) True >>> issubclass(handler, http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class RequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_type = self.headers.get('Content-Type')\n            content_length = int(self.headers.get('Content-Length'))\n            if content_type != 'application/json':\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode('utf-8'))\n                return\n            data = self.rfile.read(content_length)\n            try:\n                data_json = json.loads(data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode('utf-8'))\n                return\n            if 'data' not in data_json:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode('utf-8'))\n                return\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode('utf-8'))\n    return RequestHandler\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates HTTP POST request handler processes incoming email data sends email email data JSON object with 'subject' 'message' 'to' keys type response retrieved as 'content-type' length 'content-length'. Parameters: smtp_server SMTP server address smtp_port SMTP server port smtp_username SMTP username smtp_password SMTP password. Returns function class handles HTTP POST requests sends emails based on provided data. Requirements: - cgi - http.server smtplib email.mime.text.MIMEText - json JSONDecodeError: email data not valid JSON results in 400 Bad Request response. ValueError: 'subject' 'message' 'to' keys missing 400 Bad Request response. smtplib.SMTPAuthenticationError: authentication issue with SMTP server communicated client with 535 Authentication Failed response. Examples: >>> handler = task_func('smtp.example.com', 587, 'user@example.com' 'password') >>> isinstance(handler, type) True >>> issubclass(handler, http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class EmailHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            try:\n                data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.end_headers()\n                return\n            if not all(key in data for key in ['subject', 'message', 'to']):\n                self.send_response(400)\n                self.end_headers()\n                return\n            msg = MIMEText(data['message'])\n            msg['Subject'] = data['subject']\n            msg['From'] = smtp_username\n            msg['To'] = data['to']\n            try:\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                server.sendmail(smtp_username, data['to'], msg.as_string())\n                server.quit()\n                self.send_response(200)\n                self.end_headers()\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.end_headers()\n    return EmailHandler\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count words in .txt files directory export counts to JSON file return total. Parameters: filename (str): name output JSON file. directory (str): directory where .txt files located Returns int: total number words .txt files Requirements: - collections.Counter - os - json Example open(\"./testdir/single_file.txt\",\"r\") f: print f.read() hello world count = task_func('single_file.txt'/testdir/') print(count) 3\n    \"\"\"\n    total_words = 0\n    word_counts = Counter()\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".txt\"):\n                with open(os.path.join(root, file), \"r\") as f:\n                    text = f.read()\n                    words = text.split()\n                    word_counts.update(words)\n                    total_words += len(words)\n    with open(filename, \"w\") as f:\n        json.dump(dict(word_counts), f)\n    return total_words\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes pandas DataFrame splitting lists 'Value' column into separate columns calculates Pearson correlation coefficient visualizes correlation matrix using heatmap Parameters df (DataFrame): pandas DataFrame two columns 'Date' 'Value' 'Date' column contains dates 'Value' column contains numbers. plot (bool): Optional if True displays heatmap correlation matrix returns Returns DataFrame pandas DataFrame containing correlation coefficients among lists 'Value' column. Axes (optional): matplotlib Axes object containing heatmap plot returned if 'plot' True. function \"Correlation Heatmap\" title heatmap plot If DataFrame input empty or invalid 'Value' ValueError. Requirements pandas - seaborn - matplotlib.pyplot Example df = pd.DataFrame(['2021-01-01', [8, 10, 12]]'2021-01-02' [7, 9, 11]]] columns=['Date', 'Value']) >>>_df = task_func(df) >>> print(corr_df[0][0])\n    \"\"\"\n    # Check if DataFrame is empty or 'Value' column is invalid\n    if df.empty or 'Value' not in df.columns:\n        raise ValueError(\"DataFrame is empty or 'Value' column is invalid.\")\n\n    # Convert 'Value' column to list of lists\n    df['Value'] = df['Value'].apply(lambda x: [float(i) for i in x])\n\n    # Flatten the 'Value' column to calculate correlation\n    flat_list = [item for sublist in df['Value'] for item in sublist]\n\n    # Calculate Pearson correlation coefficient\n    corr_coef = pd.Series(flat_list).corr()\n\n    # Create a DataFrame for correlation coefficients\n    corr_df = pd.DataFrame(corr_coef, index=[0], columns=df['Value'].columns)\n\n    # Plot heatmap if 'plot' is True\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_df, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        plt.show()\n\n    return corr_df\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create report on students' grades subjects calculate average grade each student subject. Parameters: additional_fields (list string optional): additional list of student subjects not duplicate with constants (default = []) Returns DataFrame pandas DataFrame with columns subjects student's grades average grades DataFrame includes average grade per subject. function take input parameters generates report based on predefined constants additional fields input 'Average' row name for average grade each subject 'Average Grade' column name for average grade each student Grade each subject between 0 to 100. Requirements: pandas - random - statistics.mean Example >>> random.seed(0) >>> report = task_func(['Computer Science', 'Geography']) >>> print(report.columns) Index(['Physics' 'Math 'Chemistry 'Biology 'English' 'History' 'Computer Science' 'Geography' 'Average Grade'] dtype='object')\n    \"\"\"\n    # Generate report data\n    report_data = {field: [random.randint(0, 100) for _ in range(100)] for field in FIELDS + additional_fields}\n    report_data['Student'] = STUDENTS\n    report = pd.DataFrame(report_data)\n    report = report.set_index('Student')\n\n    # Calculate average grade for each subject\n    report['Average Grade'] = report.mean(axis=0)\n\n    # Calculate average grade for each student\n    report['Average'] = report.mean(axis=1)\n\n    return report\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates CSV file simulated data for 100 people including name age height weight calculates appends average age height weight end file. Parameters: filename (str): name CSV file created Returns str path created CSV file. Requirements - os - csv - random - statistics.mean Example random.seed(0) filename = 'people_report.csv' path = task_func(filename) >>> os.path.exists(path)\n    \"\"\"\n    random.seed(0)\n    data = []\n    for _ in range(PEOPLE_COUNT):\n        name = f'Person_{random.randint(1, 1000)}'\n        age = random.randint(18, 60)\n        height = round(random.uniform(150, 200), 2)\n        weight = round(random.uniform(50, 100), 2)\n        data.append([name, age, height, weight])\n\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        writer.writerows(data)\n\n    # Calculate average age, height, weight\n    ages = [row[1] for row in data]\n    heights = [row[2] for row in data]\n    weights = [row[3] for row in data]\n\n    avg_age = mean(ages)\n    avg_height = mean(heights)\n    avg_weight = mean(weights)\n\n    # Append average values to the file\n    with open(filename, 'a', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Average', avg_age, avg_height, avg_weight])\n\n    return filename\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files directory first text not in brackets Move files to subdirectories named after text no matching text found file not moved. Parameters: directory (str): directory path Returns tuple: - str: directory path with organized files. dict: dictionary keys created subdirectories values lists files moved. Requirements: - re - os - shutil - datetime Example import tempfile temp_dir = tempfile.mkdtemp() create_test_directory(temp_dir {\"file1.txt \"file2.txt \"file3.txt \"subdir2[content]}) dir files = task_func(temp_dir) >>> files['subdir2'][0].startswith('file3_') True\n    \"\"\"\n    # Create a dictionary to store the files in subdirectories\n    subdir_files = {}\n\n    # Iterate over the files in the directory\n    for file in os.listdir(directory):\n        # Check if the file is a text file\n        if file.endswith('.txt'):\n            # Read the file content\n            with open(os.path.join(directory, file), 'r') as f:\n                content = f.read()\n\n            # Find the text without brackets\n            match = re.search(r'\\[(.*?)\\]', content)\n            if match:\n                text = match.group(1)\n            else:\n                text = content\n\n            # Create a subdirectory if it doesn't exist\n            subdir = os.path.join(directory, text)\n            if not os.path.exists(subdir):\n                os.makedirs(subdir)\n                subdir_files[text] = []\n\n            # Move the file to the subdirectory\n            shutil.move(os.path.join(directory, file), os.path.join(subdir, file))\n            subdir_files[text].append(file)\n\n    return directory, subdir_files\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from as subprocesses. Parameters: file_list (list str): files name to run. Returns: exit codes of subprocesses. Requirements: - subprocess - time - threading Example >>> task_func([/file1.bat\",/file2.bat\"]) [0, 0]\n    \"\"\"\n    exit_codes = []\n    threads = []\n\n    for file in file_list:\n        t = threading.Thread(target=run_file, args=(file, exit_codes))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    return exit_codes\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find run .bat files directory returning file names exit codes. Parameters directory_path (str): path directory search for .bat files Returns list of tuples each tuple contains file name exit code exit code None if file executed. Requirements subprocess - os - sys - glob Example task_func(\"path/to/directory\") [(\"file1.bat\", 0), (\"file2.bat\", 1)]\n    \"\"\"\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n    results = []\n    for file in bat_files:\n        try:\n            process = subprocess.Popen(file, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            output, error = process.communicate()\n            exit_code = process.returncode\n            results.append((os.path.basename(file), exit_code))\n        except Exception as e:\n            results.append((os.path.basename(file), None))\n    return results\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    function takes pandas DataFrame column name input generates two subplots in one matplotlib figure first subplot histogram kernel density estimate for numerical second box plot distribution values specified column. Parameters: df (DataFrame): Input DataFrame with numerical or categorical data col (str): name column to be plotted column should exist DataFrame contain numerical or categorical data. Returns matplotlib.figure.Figure: matplotlib figure object containing histogram box plot. Requirements: pandas - seaborn - matplotlib.pyplot input df must be DataFrame not empty contain specified column if not function raise ValueError. Example >>> df = pd.DataFrame({'value': [1, 2 3 4 5 6 7 8 9 10]}) >>> fig = task_func(df, 'value') type(fig) <class 'matplotlib.figure.Figure'> plt.close() >>> df = pd.DataFrame({'category': ['A', 'B',}) >>> = task_func(df, 'category') type(fig) <class 'matplotlib.figure.Figure'> len(fig.axes) 2 >>> plt.close()\n    \"\"\"\n    if col not in df.columns:\n        raise ValueError(\"Column does not exist in DataFrame\")\n    \n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    \n    # Histogram with KDE\n    sns.histplot(df[col], kde=True, ax=axs[0])\n    axs[0].set_title('Histogram with KDE')\n    \n    # Box plot\n    sns.boxplot(df[col], ax=axs[1])\n    axs[1].set_title('Box Plot')\n    \n    plt.tight_layout()\n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run Python script process predefined arguments default waits for process complete wait False function returns None Parameters script_path (str): path Python script run wait (bool): wait for script complete Default True *args arguments passed to script Returns int return code subprocess If 'wait' False returns None Requirements subprocess - os - sys - time Raise ValueError If script exist subprocess.CalledProcessError script raises exception. Example import tempfile script_path = tempfile.NamedTemporaryFile(suffix='.py').name open(script_path, 'w') f: ... _ = f.write('import sys;sys.exit(0);') >>> task_func(script_path True, 'arg1', 'arg2') 0 >>> task_func(script_path False, 'arg1', 'arg2') return None\n    \"\"\"\n    try:\n        if wait:\n            return subprocess.call([sys.executable, script_path] + list(args))\n        else:\n            subprocess.Popen([sys.executable, script_path] + list(args))\n            return None\n    except subprocess.CalledProcessError as e:\n        raise ValueError(f\"Script {script_path} raised exception: {e}\")\n\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from Excel spreadsheet calculate mean standard deviation column draw bar chart bar chart returned as matplotlib figure object Parameters file_location (str): path to Excel file sheet_name (str): name sheet load data Returns dict: dictionary with mean standard deviation each column matplotlib.figure.Figure: figure object containing bar chart figure titled 'Mean and Standard Deviation' X-axis labeled 'Columns' Y-axis 'Values' Raises FileNotFoundError: If Excel file exist at specified path ValueError: If specified sheet exist in workbook. Requirements pandas - numpy - matplotlib.pyplot - os - openpyxl Example file_path='test.xlsx' >>> create_dummy_excel(file_path) result, fig = task_func(file_path, 'TestSheet') >>> os.remove(file_path) >>> fig.axes.get_title() 'Mean and Standard Deviation'\n    \"\"\"\n    # Load data from Excel file\n    try:\n        data = pd.read_excel(file_location, sheet_name=sheet_name)\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Excel file {file_location} does not exist.\")\n    except ValueError:\n        raise ValueError(f\"Sheet {sheet_name} does not exist in the workbook.\")\n\n    # Calculate mean and standard deviation for each column\n    mean_std_dict = {}\n    for column in data.columns:\n        mean_std_dict[column] = (data[column].mean(), data[column].std())\n\n    # Create bar chart\n    fig, ax = plt.subplots()\n    ax.bar(mean_std_dict.keys(), [mean for mean, _ in mean_std_dict.values()], yerr=[std for _, std in mean_std_dict.values()])\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n\n    return mean_std_dict, fig\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return bar chart number activities performed each day week based provided list activities activities not datetime objects raise TypeError. Parameters activities (list datetime objects): list datetime objects representing each activity occurred Returns matplotlib.axes.Axes Axes object representing bar chart x-axis labeled 'Day Week' y-axis 'Number Activities' title 'Weekly Activity'. Requirements datetime collections matplotlib.pyplot Raises TypeError If activities not datetime objects. Example >>> ax = task_func([datetime(2023, 10, 25), datetime(2023, 10, 26)]) >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n\n    week_activities = defaultdict(int)\n    for activity in activities:\n        week_activities[activity.strftime('%A')] += 1\n\n    days_of_week = list(week_activities.keys())\n    activities_count = list(week_activities.values())\n\n    fig, ax = plt.subplots()\n    ax.bar(days_of_week, activities_count)\n    ax.set_xlabel('Day Week')\n    ax.set_ylabel('Number Activities')\n    ax.set_title('Weekly Activity')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves random file source to destination directory. Parameters src_dir (str): path source directory file selected moved dest_dir (str): path destination directory file moved seed (int Optional): seed random number generator Defaults to 100. Returns str: name file moved Format 'filename.extension' (e 'file1.txt'). Requirements - os - shutil - random Examples import tempfile src_dir = tempfile.mkdtemp() dest_dir = tempfile.mkdtemp() open(os.path.join(src_dir 'file1.txt'), 'w').close() open(os.path.join(src_dir 'file2.txt'), 'w').close() >>> task_func(src_dir, dest_dir, seed=1) 'file2.txt'\n    \"\"\"\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    if not files:\n        return \"No files in source directory\"\n    file_to_move = random.choice(files)\n    src_file_path = os.path.join(src_dir, file_to_move)\n    dest_file_path = os.path.join(dest_dir, file_to_move)\n    shutil.move(src_file_path, dest_file_path)\n    return file_to_move\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects double quotes Excel (.xlsx) files specified directory prefixing double backslash. Parameters directory_path (str): path directory containing Excel files Default './xlsx_files/' Returns int: number Excel files processed Requirements Libraries: re, openpyxl glob Excel files specified directory Example import tempfile temp_dir = tempfile.mkdtemp() workbook = Workbook() sheet = workbook.active sheet.append([ \"test\" string']) >>> workbook.save(temp_dir + '/test.xlsx') task_func(temp_dir) 1\n    \"\"\"\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        return 0\n\n    # Get all .xlsx files in the directory\n    xlsx_files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n\n    # Process each .xlsx file\n    processed_files = 0\n    for file in xlsx_files:\n        try:\n            # Load the workbook\n            workbook = load_workbook(file)\n\n            # Iterate over all sheets in the workbook\n            for sheet in workbook.worksheets:\n                # Iterate over all cells in the sheet\n                for row in sheet.iter_rows():\n                    for cell in row:\n                        # Check if the cell contains double quotes\n                        if re.search(r'\"', cell.value):\n                            # Replace double quotes with double backslashes\n                            cell.value = re.sub(r'\"', r'\\\\\"', cell.value)\n\n            # Save the changes to the workbook\n            workbook.save(file)\n\n            # Increment the processed files counter\n            processed_files += 1\n\n        except Exception as e:\n            print(f\"Error processing file {file}: {e}\")\n\n    return processed_files\n\n"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram sine wave cosine wave given frequency return plot. Parameters: frequency (float): frequency wave non-negative float. sample_size (int Optional): positive integer number samples for wave Default 10000. Returns matplotlib.figure.Figure: figure object containing plot. matplotlib.axes.Axes: axes object plot. Requirements numpy for data generation matplotlib.pyplot for plotting math for mathematical constants Raises ValueError: If frequency negative ValueError If sample size non-positive. Example >>> fig, ax = task_func(1, 2500) >>> type(fig) <class 'matplotlib.figure.Figure'> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n\n    x = np.linspace(0, 2 * math.pi, sample_size)\n    y_sine = np.sin(frequency * x)\n    y_cosine = np.cos(frequency * x)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y_sine, label=\"Sine Wave\")\n    ax.plot(x, y_cosine, label=\"Cosine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.set_title(f\"Sine and Cosine Waves with Frequency {frequency}\")\n    ax.legend()\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes Flask-Mail instance sending emails generated Flask application specified app_name Parameters app_name (string): Flask application name Returns tuple tuple containing Flask-Mail instance app mail configurations details email server retrieved from environment variables If variables exist use defaults 'MAIL_SERVER' 'localhost' 'MAIL_PORT' 25 'MAIL_USE_TLS' False (boolean 'MAIL_USERNAME None 'MAIL_PASSWORD' None Requirements flask - os flask_mail Example mail configs = task_func(\"test\") >>> print(mail.__getattribute__(\"app\").name) test\n    \"\"\"\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.environ.get('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.environ.get('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.environ.get('MAIL_USE_TLS', False)\n    app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD', None)\n    mail = Mail(app)\n    return mail, app.config\n"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate mean median standard deviation data from specific column in Excel file Parameters: excel_file_path (str): path to directory Excel file file_name (str): name Excel file column_name (str): name column to analyze Returns: dictionary with mean median standard deviation Raises FileNotFoundError: Excel file at specified path ValueError If specified column not found. Requirements pandas - numpy - os Example data_dir file_name = '/data/' 'excel_file1.xls' create_dummy_file(data_dir file_name) >>> stats = task_func(data_dir file_name 'Sales') >>> os.remove(data_dir + file_name) >>> os.rmdir(data_dir) print(stats) {'mean': 200.0 'median': 200.0 'std_dev': 70.71067811865476}\n    \"\"\"\n    try:\n        # Load the Excel file\n        df = pd.read_excel(excel_file_path + file_name)\n        \n        # Check if the specified column exists\n        if column_name not in df.columns:\n            raise ValueError(f\"Column '{column_name}' not found in the Excel file.\")\n        \n        # Calculate mean, median, and standard deviation\n        mean = df[column_name].mean()\n        median = df[column_name].median()\n        std_dev = df[column_name].std()\n        \n        # Return the results as a dictionary\n        return {'mean': mean, 'median': median, 'std_dev': std_dev}\n    \n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Excel file '{file_name}' not found at specified path '{excel_file_path}'.\")\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains neural network on input data target labels function Splits data into training set (75%) test set (25%), input dimension 2. Constructs Sequential model with one dense hidden layer sigmoid activation function Compiles model using binary cross-entropy loss SGD optimizer with specified learning rate Fits model to training data verbose evaluating on test set as validation data Plots model's training validation loss over epochs returns plot Axes object for customization. Parameters: X (np.ndarray): Input features model each input 2. Y (np.ndarray): Target labels model. Returns Sequential: trained Keras Sequential model. matplotlib.axes.Axes: Axes object of plot plot visualizes model's training validation loss over epochs x-axis representing epochs y-axis loss distinguishes between 'Train' 'Test' losses. input dimension X must always be 2. Axes title is 'Model loss' x-axis label 'Epoch' y-axis label 'Loss' Requirements keras.layers.Dense keras.optimizers.SGD keras.models.Sequential sklearn.model_selection.train_test_split - matplotlib.pyplot Examples >>> X = np.array([[0, 0],, 1],) >>> Y = np.array([[0], [1], [1], [0]]) >>> model, ax = task_func(X, Y) >>> isinstance(model, Sequential) True >>> isinstance(ax, plt.Axes) True\n    \"\"\"\n    # Split data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    # Define the model\n    model = Sequential()\n    model.add(Dense(1, input_dim=2, activation='sigmoid'))\n\n    # Compile the model\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.1), metrics=['accuracy'])\n\n    # Fit the model\n    history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100, verbose=0)\n\n    # Plot the training and validation loss\n    ax = plt.gca()\n    ax.plot(history.history['loss'], label='Train')\n    ax.plot(history.history['val_loss'], label='Test')\n    ax.set_title('Model loss')\n    ax.set_xlabel('Epoch')\n    ax.set_ylabel('Loss')\n    ax.legend()\n\n    return model, ax\n"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide input data into training test sets (70% training 30% test), create Keras Sequential model one hidden layer sigmoid activation function compile model with binary cross-entropy loss SGD optimizer learning rate fit model to training data non-verbose mode plot ROC curve on test set including AUC score in plot legend Parameters: X (np.ndarray): input data input 2. Y.ndarray): target data. Returns keras.models.Sequential: trained Keras model. matplotlib.axes._axes.Axes: matplotlib Axes object for Precision-Recall curve plot. Notes title of axes 'ROC curve' x label 'False positive rate' y label 'True positive rate' Requirements: tensorflow.keras - sklearn.metrics.roc_curve sklearn.metrics.auc sklearn.model_selection.train_test_split - matplotlib Example X = np.array([[0, 0] 1 >>> Y = np.array([[0] [1],]) >>> model, ax = task_func(X, Y) >>> isinstance(model, keras.models.Sequential) True\n    \"\"\"\n    # Split data into training and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    # Create a Keras Sequential model\n    model = keras.models.Sequential([\n        keras.layers.Dense(1, input_dim=X_train.shape[1], activation='sigmoid')\n    ])\n\n    # Compile the model\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(lr=0.01), metrics=['accuracy'])\n\n    # Fit the model to the training data\n    model.fit(X_train, Y_train, epochs=100, verbose=0)\n\n    # Predict probabilities for the test set\n    Y_pred_proba = model.predict(X_test)\n\n    # Compute ROC curve and AUC\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred_proba)\n    roc_auc = auc(fpr, tpr)\n\n    # Plot ROC curve\n    ax.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % roc_auc)\n    ax.set_title('ROC curve')\n    ax.set_xlabel('False positive rate')\n    ax.set_ylabel('True positive rate')\n    ax.legend()\n\n    return model, ax\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads RGB image applies K-means clustering segment image into 'n_clusters' regions saves each region as separate image function returns numpy arrays of original and segmented images. Parameters image_path (str): path to RGB image file Default is 'image.jpg' image expected in RGB format 3D array (height x width channels), channels in order of RGB. n_clusters (int): number of clusters for K-means clustering Default is 3. minimum 1 cluster allowed single cluster original image as segmented image. random_seed (int): seed for random number generator in K-means clustering Default 42. Returns tuple: tuple containing two numpy arrays first array represents original RGB image second array segmented image each pixel's color replaced by centroid of cluster. Raises FileNotFoundError: If image file exist path ValueError: If 'n_clusters' not positive integer. Requirements opencv reading image file converting BGR to RGB numpy For array manipulations os checking image file. sklearn.cluster: applying K-means clustering. Example create_dummy_image('image.jpg') >>> original_img_array, segmented_img_array = task_func('image.jpg', 3) >>> os.remove('image.jpg') >>> print(original_img_array.shape) Example output (10 3) >>> print(segmented_img_array.shape) Example output for n_clusters > 1 function assumes input image in RGB format.segmented image array same shape as original image with pixel colors replaced by corresponding cluster centroid colors segmenting image into regions based on color similarity Clustering with single cluster allowed return original image as both original and segmented images all pixels assigned to same cluster.\n    \"\"\"\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image file {image_path} does not exist.\")\n    \n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"'n_clusters' must be a positive integer.\")\n    \n    # Read image\n    img = cv2.imread(image_path)\n    \n    # Convert BGR to RGB\n    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    \n    # Reshape image to 2D array for clustering\n    img_reshaped = img_rgb.reshape((img_rgb.shape[0] * img_rgb.shape[1], 3))\n    \n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(img_reshaped)\n    \n    # Get cluster labels for each pixel\n    labels = kmeans.predict(img_reshaped)\n    \n    # Reshape labels back to original image shape\n    segmented_img = labels.reshape(img_rgb.shape)\n    \n    # Replace pixel colors with cluster centroids\n    segmented_img_rgb = kmeans.cluster_centers_[segmented_img]\n    \n    return img_rgb, segmented_img_rgb\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate product matrix 3D tensor 'T flatten result apply KMeans clustering flattened data visualize Parameters P input matrix T input tensor shape (3, 3 3) n_clusters number clusters KMeans clustering Default 3. random_state random state KMeans clustering Default 0. n_init time k-means algorithm run different centroid seeds Default 10. Returns cluster_result result KMeans clustering ax (matplotlib.axes.Axes): visualization KMeans clustering title 'KMeans Clustering Visualization' Requirements numpy - sklearn matplotlib Example P = np([[6, 2, 7], [1, 1, 8] [8, 7, 1] [9, 6, 4] [2, 1, 1]]) T = np.random.rand(3, 3, 3) cluster_result ax = task_func(P, T n_clusters=3 random_state=0 n_init=10) type(cluster_result) <class 'numpy.ndarray'> type(ax) <class 'matplotlib..Axes'\n    \"\"\"\n    # Calculate product matrix 3D tensor 'T flatten result'\n    T_flatten = T.flatten().reshape(-1, 1)\n    \n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    cluster_result = kmeans.fit_predict(T_flatten)\n    \n    # Visualize KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(T_flatten, np.zeros_like(T_flatten), c=cluster_result, cmap='viridis')\n    ax.set_title('KMeans Clustering Visualization')\n    \n    return cluster_result, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate Voronoi diagram points in 2D plot function errors input invalid wrong type shape Jittering applied prior plotting. Parameters points (np.ndarray): numpy ndarray shape (n_points, 2) with coordinates points seed (int): Random seed for reproducibility Defaults to 0 Returns tuple (vor, ax): tuple containing vor (Voronoi): Voronoi object representing Voronoi diagram points ax (Axes): axes plotted Voronoi diagram. Requirements numpy - scipy - matplotlib.pyplot Example points = np.array([[0, 0],, 1] [1) >>> vor, ax = task_func(points) type(vor) <class 'scipy.spatial.qhull.Voronoi'> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"points must be a numpy ndarray\")\n    if points.shape[1] != 2:\n        raise ValueError(\"points must have shape (n_points, 2)\")\n    \n    # Jittering\n    np.random.seed(seed)\n    points += np.random.randn(points.shape[0], points.shape[1]) * 0.1\n    \n    vor = Voronoi(points)\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    ax.scatter(points[:, 0], points[:, 1], color='red')\n    plt.show()\n    \n    return vor, ax\n\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files specified extension from source to destination directory function searches for files source extension If file same name exists in destination directory not moved. Parameters: src_dir source directory path dest_dir (str): destination directory path ext (str): file extension search for (without leading dot). Returns list: list full paths of files successfully moved. If file not moved exists in destination directory not included in list. Raises FileNotFoundError if source or destination directory exist Requirements: - os - shutil - glob Examples test_src_dir = './test_src' test_dest_dir =/test_dest' >>> test_ext = 'txt' >>> os.makedirs(test_src_dir, exist_ok=True) >>>_dest=True) >>> moved_files = task_func(test_src_dir_dest_dir test_ext) >>> len(moved_files) > 0 Check if files moved True >>> 'test_file.txt' in [os.path.basename(path) for path moved_files] Assuming test_file.txt exists in test_src_dir True >>> os.listdir(test_dest_dir) Verify files moved no duplicates in destination ['test_file.txt']\n    \"\"\"\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory {src_dir} does not exist\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory {dest_dir} does not exist\")\n\n    src_files = glob.glob(os.path.join(src_dir, f'*.{ext}'))\n    moved_files = []\n\n    for file in src_files:\n        file_name = os.path.basename(file)\n        dest_file = os.path.join(dest_dir, file_name)\n        if not os.path.exists(dest_file):\n            shutil.move(file, dest_dir)\n            moved_files.append(file)\n\n    return moved_files\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load JSON string into dictionary normalize dictionary doubling numerical values create Pandas DataFrame from dictionary function processes JSON string into dictionary normalizes data doubling values constructs Pandas DataFrame from dictionary function designed handle simple flat dictionaries with values single numerical values lists or strings interpreted as numbers doubles values of numerical data types within dictionary including lists strings extracted using regex), process nested dictionaries returns DataFrame with numerical values as floats other types left as-is or empty DataFrame if input JSON string empty or valid data structures for conversion. Parameters: json_str (str): JSON string Returns DataFrame: pandas DataFrame created from dictionary. Requirements: - pandas - json - re Example >>> json_str = '{\"a\": [1, 2, 3], \"b\":, \"c\": \"5\"}' >>> df = task_func(json_str) >>> type(df) <class 'pandas.core.frame.DataFrame'> >>> print(df) a b c 0 2 9.8 10 1 4 9.8 10 2 6 9.8 10\n    \"\"\"\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()\n\n    def normalize_data(data):\n        if isinstance(data, dict):\n            return {k: normalize_data(v) for k, v in data.items()}\n        elif isinstance(data, list):\n            return [normalize_data(v) for v in data]\n        elif isinstance(data, str):\n            if re.match(r'^-?\\d+(?:\\.\\d+)?$', data):\n                return float(data) * 2\n            else:\n                return data\n        elif isinstance(data, (int, float)):\n            return data * 2\n        else:\n            return data\n\n    normalized_data = normalize_data(data)\n    return pd.DataFrame([normalized_data])\n\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes bash script returns CPU memory usage function checks script path executes in subprocess uses psutil to monitor script process for CPU memory usage CPU usage cumulative measure of script process CPU demand execution not average across cores Memory usage reported as sum of RSS memory increments function aggregates metrics until script completes or timeout reached handles cases process becomes zombie or not found ensures subprocess if beyond timeout. Parameters: script_path (str): path to bash script executed Path must exist. timeout (int optional): Maximum time seconds function wait for script to complete. Defaults to 10 seconds. Returns: dict: dictionary containing 'CPU Usage': accumulated CPU usage in percentage. 'Memory Usage': accumulated memory usage in bytes. Requirements: subprocess - psutil - time - os Examples >>> resources = task_func('/path/to/script.sh') resources {'CPU Usage': 5.2, 'Memory Usage': 2048}\n    \"\"\"\n    # Check if script path exists\n    if not os.path.exists(script_path):\n        return {'Error': 'Script path does not exist'}\n\n    # Execute bash script in subprocess\n    try:\n        process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE, preexec_fn=os.setsid)\n    except Exception as e:\n        return {'Error': f'Failed to execute script: {e}'}\n\n    # Monitor script process for CPU memory usage\n    cpu_usage = 0\n    memory_usage = 0\n    start_time = time.time()\n    while process.poll() is None and time.time() - start_time < timeout:\n        cpu_usage += psutil.Process(process.pid).cpu_percent(interval=1)\n        memory_usage += psutil.Process(process.pid).memory_info().rss\n        time.sleep(1)\n\n    # Check if process is still running after timeout\n    if process.poll() is None:\n        os.killpg(os.getpgid(process.pid), signal.SIGKILL)\n        return {'Error': 'Script execution timed out'}\n\n    # Return CPU memory usage\n    return {'CPU Usage': cpu_usage, 'Memory Usage': memory_usage}\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create DataFrame rows (N 3 columns \"x\" \"y\" random values \"category\" random categories CATEGORIES list Each category appear once if N greater than or equal categories otherwise randomly sampled without replacement CATEGORIES draw scatter plot \"x\" vs \"y colored by \"category\". Parameters N (int optional): rows DataFrame Defaults to 100 CATEGORIES (list optional): categories Defaults ['A' 'B' 'C' 'D' 'E'] seed (int optional): Random seed reproducibility Defaults to 42. Returns tuple containing DataFrame generated DataFrame Axes Axes object plot. Requirements numpy - pandas matplotlib.pyplot Example df, ax = task_func() >>> df.head() x y category 0 0.239562 0.385098 C 1 0.144895 0.851137 D 2 0.489453 0.316922 C 3 0.985650 0.169493 E 4 0.242055 0.556801 A type(ax) <class 'matplotlib.axes.\n    \"\"\"\n    np.random.seed(seed)\n    data = {\n        \"x\": np.random.rand(N),\n        \"y\": np.random.rand(N),\n        \"category\": np.random.choice(CATEGORIES, size=N, replace=False)\n    }\n    df = pd.DataFrame(data)\n    ax = df.plot(kind=\"scatter\", x=\"x\", y=\"y\", c=\"category\", cmap=\"viridis\")\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate time series epoch start to end time with specified step trend time series plotted with timestamps x-axis'Time values y-axis ('Value values generated from normal distribution linear trend added based on provided trend value. Parameters: start_time (int): start epoch time milliseconds end_time end epoch time milliseconds Must greater than start_time. step (int): step milliseconds between each data point agreater than 0. trend (float): trend value added to time series acts as multiplier for index adding linear trend to randomly generated values seed (int optional): Seed for reproducibility Default is 42. Returns ax (matplotlib.pyplot.Axes): Axes object generated plot x-axis labeled 'Time' y-axis 'Value'. Requirements datetime.datetime - pandas - numpy Example ax = task_func(0, 10000, 100, 0.001) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> ax.get_xticklabels() [Text(-20.0, 0 '1970-01-01 10:00:08.000000(0.0 10:00:00.000000 Text(20.0 10:00:02.000000 Text(40.0 10:00:04.000000 Text(60.0 10:00:06.000000(80.0 '1970-01-01 10:00:08.000000 Text(100.0 0 Text(120.0, 0 ''\n    \"\"\"\n    np.random.seed(seed)\n    time_series = pd.date_range(start=datetime.utcfromtimestamp(start_time / 1000), end=datetime.utcfromtimestamp(end_time / 1000), freq=f'{step}ms')\n    values = np.random.normal(size=len(time_series)) * trend + np.arange(len(time_series))\n    ax = time_series.plot(x=time_series, y=values)\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    return ax\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Generate sales data five products given epoch time to current time function checks input validity each day between epoch to current time generates random sales data each 5 products Parameters epoch_milliseconds (int): Start epoch time milliseconds before current system time random_seed (int): Seed reproducibility random sales data Defaults to 0. products (list Product list contain 5 unique strings Defaults'Product1'] Returns pd.DataFrame DataFrame containing sales data columns 'Product' 'Date' 'Sales' (integer). Sales quantity randomly sampled from range [10, 50]. Requirements pandas - datetime.datetime - random Example sales_data = task_func(1236472051807, random_seed=42) type(sales_data) <class 'pandas.core.frame.DataFrame' sales_data.head() Product Date Sales 0 Product4 2009-03-08 11:27:31.807 50 1 Product5 2009-03-08 11:27:31.807 17 2 Product1 11:27:31.807 11 3 Product3 11:27:31.807 27 4 Product2 11:27:31.807 25\n    \"\"\"\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int):\n        raise ValueError(\"epoch_milliseconds must be an integer\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"random_seed must be an integer\")\n    if not isinstance(products, list):\n        raise ValueError(\"products must be a list\")\n    if not all(isinstance(product, str) for product in products):\n        raise ValueError(\"products must contain only strings\")\n    if len(products) != 5:\n        raise ValueError(\"products must contain exactly 5 unique strings\")\n\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n\n    # Get current time\n    current_time = datetime.now()\n\n    # Generate sales data\n    sales_data = []\n    for product in products:\n        for i in range(5):\n            # Generate random sales quantity\n            sales = random.randint(10, 50)\n            # Generate random date between epoch and current time\n            date = datetime.fromtimestamp(\n                epoch_milliseconds / 1000 + random.randint(0, int((current_time - datetime.fromtimestamp(epoch_milliseconds / 1000)).total_seconds()))\n            )\n            # Append to sales data\n            sales_data.append([product, date, sales])\n\n    # Create DataFrame\n    sales_data = pd.DataFrame(sales_data, columns=[\"Product\", \"Date\", \"Sales\"])\n\n    return sales_data\n\n"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings to Excel file handling empty JSON arrays function takes JSON string converts into Excel file with specified filename If JSON string empty array function creates Excel file with no data rows Parameters json_str (str bytes bytearray): JSON content string filename (str): name Excel file created sheet_name (str optional): name sheet in Excel file Default is \"sheet1\". Returns str: absolute path of created Excel file. ValueError: If `json_str` not valid JSON TypeError: If not string bytes bytearray. Exception: other general errors related file writing. Requirements xlwt: For writing to Excel files xlrd - os: For file path operations pandas data manipulation. Example json_str = '[{\"Name \"John\", \"Age 30, \"Jane\", \"Age 28}]' >>> True if task_func(json_str, 'data.xls').endswith('data.xls') else False True >>> os.remove('data.xls')\n    \"\"\"\n    if not isinstance(json_str, (str, bytes, bytearray)):\n        raise TypeError(\"json_str must be string, bytes or bytearray\")\n    try:\n        data = pd.read_json(json_str)\n    except ValueError:\n        raise ValueError(\"json_str not valid JSON\")\n    if data.empty:\n        workbook = xlwt.Workbook()\n        worksheet = workbook.add_sheet(sheet_name)\n        workbook.save(filename)\n        return os.path.abspath(filename)\n    else:\n        data.to_excel(filename, sheet_name=sheet_name, index=False)\n        return os.path.abspath(filename)\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates daily activity durations specified days past using randomly generated data function randomly generates acitivity durations 0 to 120 each activity\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training. Parameters days_in_past (int optional): number days past generate graph Defaults to 7 days Must past. random_seed (int optional): Seed random number generation reproducibility Defaults 0. Returns Tuple containing ax (matplotlib.pyplot.Axes): DataFrame plotting df (pd.DataFrame): Seaborn lineplot date x-axis duration y-axis activity hue. Requirements datetime.datetime - datetime.timedelta - pandas - random - seaborn Example ax, df = task_func(7, random_seed=42) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> sample row returned DataFrame Date Activity Duration YYYY-MM-DD Running 45\n    \"\"\"\n    # Set the random seed for reproducibility\n    random.seed(random_seed)\n\n    # Generate a list of activities\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n\n    # Generate a list of dates for the past days_in_past\n    dates = [datetime.now() - timedelta(days=i) for i in range(days_in_past)]\n\n    # Generate a list of random durations for each activity for each date\n    durations = [[random.randint(0, 120) for _ in range(len(dates))] for _ in range(len(activities))]\n\n    # Create a DataFrame with the dates, activities, and durations\n    df = pd.DataFrame({\n        \"Date\": dates,\n        \"Activity\": activities,\n        \"Duration\": [item for sublist in durations for item in sublist]\n    })\n\n    # Convert the Date column to datetime\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n\n    # Create a lineplot using seaborn\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n\n    # Set the x-axis label to \"Date\"\n    ax.set_xlabel(\"Date\")\n\n    # Set the y-axis label to \"Duration\"\n    ax.set_ylabel(\"Duration\")\n\n    # Set the title of the plot to \"Daily Activity Durations\"\n    ax.set_title(\"Daily Activity Durations\")\n\n    # Return the Axes object and the DataFrame\n    return ax, df\n\n"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create DataFrame stock prices specified days past using random data Parameters days_in_past (int optional): number days past stock data Must positive. Defaults to 7. stock_names (list optional): list stock names data not empty Defaults to [\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"] random_seed (int optional): seed random number generation reproducibility Defaults 0. Returns DataFrame pandas DataFrame random stock prices specified days Prices floats [0.0,1.0). Requirements datetime pandas - numpy Example df = task_func(5, random_seed=42) type(df) <class 'pandas.core.frame.DataFrame'> print(df.head(1)) AAPL GOOGL MSFT AMZN FB 2024-03-30 37.454012 95.071431 73.199394 59.865848 15.601864\n    \"\"\"\n    np.random.seed(random_seed)\n    dates = pd.date_range(start=datetime.now(), periods=days_in_past, freq=\"D\")\n    data = np.random.rand(days_in_past, len(stock_names))\n    df = pd.DataFrame(data, index=dates, columns=stock_names)\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV files create difference report function compares two CSV files provides detailed report differences represents each difference with line number status indicator content line. Parameters: file_path1 path first CSV file file_path2 path second CSV file. delimiter (str optional): Delimiter character CSV files Default is ','. quotechar (str optional): Quote character CSV Default is '\"' Returns DataFrame: pandas DataFrame with differences DataFrame contains columns 'Line Number': line number file difference occurs 'Status': character indicating type difference ' ': No change (line same in both files). '-': Line present first file not second '+': Line present second file not first. 'Content': actual text content line file. Raises FileNotFoundError: If files found ValueError: If files empty. Exception: For other related errors. Requirements: pandas: For data manipulation analysis csv: reading CSV files difflib: performing difference operation. os Example: >>> create_dummy_test_files() >>> df = task_func('file1.csv', 'file2.csv') >>> os.remove('file1.csv') >>>.remove('file2.csv') >>> df.head() Line Number Status Content 0 1 ('name', 'age') 1 2 - ('Alice', '30') 2 3 + ('Alice', '31') 3 4 ('Bob', '25')\n    \"\"\"\n    # Read CSV files\n    try:\n        df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar)\n        df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"Files not found\")\n    except ValueError:\n        raise ValueError(\"Files are empty\")\n    except Exception as e:\n        raise Exception(f\"Error occurred: {e}\")\n\n    # Check if files are empty\n    if df1.empty or df2.empty:\n        raise ValueError(\"Files are empty\")\n\n    # Create DataFrame to store differences\n    diff_df = pd.DataFrame(columns=['Line Number', 'Status', 'Content'])\n\n    # Compare lines\n    for i in range(max(len(df1), len(df2))):\n        line1 = df1.iloc[i].to_list() if i < len(df1) else []\n        line2 = df2.iloc[i].to_list() if i < len(df2) else []\n\n        # Check if lines are different\n        if line1 != line2:\n            diff = list(ndiff(line1, line2))\n            for j, d in enumerate(diff):\n                if d.startswith('-'):\n                    status = '-'\n                elif d.startswith('+'):\n                    status = '+'\n                else:\n                    status = ' '\n                diff_df = diff_df.append({'Line Number': i + 1, 'Status': status, 'Content': d.strip()}, ignore_index=True)\n        else:\n            diff_df = diff_df.append({'Line Number': i + 1, 'Status': ' ', 'Content': ''}, ignore_index=True)\n\n    return diff_df\n\n"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze employee data calculate statistics column If data list empty sum 0 mean min max values NaN function visualizes data pie chart Age column labels. Parameters: column (str): column analyze Valid values 'Age' 'Salary' 'Experience' If invalid function KeyError. data (list lists): employee data each list represents [Age Salary Experience] Returns tuple containing: dictionary with 'sum' 'mean' 'min' 'max' column. Axes object: pie chart visualizing column data. Requirements pandas - numpy - matplotlib.pyplot Example data = [[25, 50000, 2] [30, 75000, 5] [35, 100000, 7] [40, 125000, 10] [45, 150000, 12]] stats ax = task_func('Salary', data) stats {'sum' 500000 'mean' 100000.0 'min' 50000 'max': 150000} type(ax) <class 'matplotlib.axes..Axes'>\n    \"\"\"\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column\")\n\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n\n    ax = df[column].value_counts().plot(kind='pie', autopct='%1.1f%%')\n    ax.set_title(f'{column} distribution')\n\n    return stats, ax\n\n\ndata = [[25, 50000, 2], [30, 75000, 5], [35, 100000, 7], [40, 125000, 10], [45, 150000, 12]]\nstats, ax = task_func('Salary', data)"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze fitness data calculate sum mean minimum maximum column draw line chart validate numeric values for steps calories burned distance walked non-negative. Parameters: column (str): column analyze data allowed columns 'Date' 'Steps' 'Calories Burned' 'Distance Walked'. data (list list): each list contains datetime object date followed numeric values for steps calories burned distance walked order Each numeric value must non-negative not empty. Returns: tuple: tuple containing dict: dictionary with sum mean min max column. matplotlib.axes.Axes: Axes object plotted line chart line chart Date x-axis column value y-axis title Line Chart (column). Requirements: - pandas - numpy - matplotlib.pyplot Raises KeyError: column not valid ValueError: If data list empty or numeric values for steps calories burned distance walked negative. Example data = [[datetime(2022, 1, 1), 5000, 200, 3.5], [datetime(2022 1, 2), 5500, 220, 4.0],(2022 1, 3), 6000, 240, 4.5]] stats, ax = task_func('Steps', data) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> print(stats) {'sum': 16500 'mean': 5500.0 'min' 5000 'max' 6000}\n    \"\"\"\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise KeyError(f\"Column {column} not valid\")\n    if not data:\n        raise ValueError(\"Data list empty\")\n    for row in data:\n        if len(row) != 4:\n            raise ValueError(\"Each list must contain 4 elements\")\n        if not isinstance(row[0], pd.Timestamp):\n            raise ValueError(\"First element of each list must be datetime object\")\n        for value in row[1:]:\n            if not isinstance(value, (int, float)) or value < 0:\n                raise ValueError(\"Numeric values for steps, calories burned, distance walked must be non-negative\")\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    ax = df[column].plot(kind='line', title=f'Line Chart ({column})')\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    plt.show()\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read list dictionaries from JSON file calculate mean median each key (ignoring non-numeric missing convert results into Pandas DataFrame. Parameters input_file (str optional): input JSON file name Defaults to 'data.json' file should contain list dictionaries If key missing treated as NaN Non-numeric values ignored for calculation mean median If all values key non-numeric or missing statistics key NaN. Returns df (pd.DataFrame): DataFrame indexed sorted by variable names (keys) from input data containing columns 'mean' 'median'. Requirements numpy - collections - json - pandas Example >>> df = task_func('data_1.json') a mean median b mean median c mean median\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    df = pd.DataFrame(data)\n\n    result = defaultdict(list)\n\n    for col in df.columns:\n        numeric_col = df[col].dropna().apply(pd.to_numeric, errors=\"coerce\")\n        result[col].append(numeric_col.mean())\n        result[col].append(numeric_col.median())\n\n    df_result = pd.DataFrame(result, index=[\"mean\", \"median\"])\n\n    return df_result\n\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows CSV file csv library convert into pandas DataFrame plot using matplotlib Parameters file_path (str): path to CSV file Returns: dictionary with duplicate rows keys counts values Axes: matplotlib Axes object bar chart of duplicate rows Requirements csv - collections.Counter - pandas - matplotlib.pyplot Example duplicates ax = task_func(\"sample_data.csv\") duplicates {('Alice', '25 'New York'): 3 ('Bob', '30 'London'): 2} type(ax) <class 'matplotlib.axes._axes.Axes'> Ensure CSV file proper format .csv extension Other file formats raise ValueError.\n    \"\"\"\n    try:\n        # Read CSV file into pandas DataFrame\n        df = pd.read_csv(file_path)\n    except FileNotFoundError:\n        raise ValueError(\"File not found.\")\n    except pd.errors.ParserError:\n        raise ValueError(\"Invalid CSV format.\")\n\n    # Count duplicate rows\n    duplicates = df.duplicated(keep=False).sum()\n\n    # Count occurrences of each duplicate row\n    duplicate_counts = df.duplicated(subset=df.columns.tolist(), keep=False).value_counts()\n\n    # Plot bar chart\n    ax = duplicate_counts.plot(kind='bar')\n    ax.set_xlabel('Duplicate Rows')\n    ax.set_ylabel('Counts')\n    ax.set_title('Duplicate Rows Count')\n\n    return duplicate_counts, ax\n\n"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries in DataFrame record age distribution for function takes DataFrame with 'name' 'age' columns If age as floats rounded down to nearest integer Age not negative raises ValueError function identifies names records age distribution returns Counter object with age distribution histogram plot showing distribution ages for duplicate names age x-axis count y-axis Bins calculated based on minimum maximum ages among duplicates adjusted by .5 integer ages fall within bins. Parameters: df pd.DataFrame with columns 'name' 'age' not empty If empty function raises ValueError Returns Counter: Age distribution among duplicate names. plt.Axes or None: Histogram plot displaying age distribution or None if no duplicates. Requirements - pandas - numpy - collections.Counter - seaborn - matplotlib.pyplot ValueError If DataFrame empty or age negative Example df = pd.DataFrame({'name'Alice 'Bob 'age': [25, 26, 25]}) >>> duplicates_counter ax = task_func(df) >>> duplicates_counter Counter({25: 2}) >>> type(ax) <class 'matplotlib.axes..Axes'>\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n\n    duplicates = df[df.duplicated(subset='name', keep=False)]\n    if duplicates.empty:\n        return Counter(), None\n\n    duplicates['age'] = duplicates['age'].apply(lambda x: int(np.floor(x)))\n    age_distribution = Counter(duplicates['age'])\n\n    min_age = min(age_distribution.keys())\n    max_age = max(age_distribution.keys())\n    bins = np.arange(min_age - 0.5, max_age + 1.5, 1)\n\n    ax = sns.histplot(data=duplicates, x='age', bins=bins, kde=False)\n    ax.set_title('Age Distribution among Duplicate Names')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n\n    return age_distribution, ax\n\n"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify count duplicate values DataFrame's 'value' column function plots histogram for all values overlays normal distribution curve histogram. Parameters: df (pd.DataFrame): DataFrame numeric 'value' column If empty function empty Counter empty plot. bins (int optional): Number bins for histogram Defaults to 4. Returns tuple: tuple containing Counter Counter object with count each duplicate value Axes: matplotlib.axes.Axes object plot histogram with 'value' column data If applicable normal distribution curve data overlaid. histogram bars green 60% opacity normal distribution curve black linewidth 2. plot titled \"Distribution\", \"Value\" x-axis label \"Frequency\" y-axis label. Requirements: - collections.Counter - numpy - scipy.stats.norm - matplotlib.pyplot Example >>> df = pd.DataFrame({'value': [1, 2, 2, 3, 3, 4, 1 4 4 2 3 1]}) >>> counter ax = task_func(df) >>> ax <Axes: title={'center' 'Distribution'} xlabel='Value' ylabel='Frequency'> >>> counter Counter({2: 6, 1: 5, 3: 5, 4: 4})\n    \"\"\"\n    if df.empty:\n        return Counter(), plt.figure().add_subplot()\n\n    counter = Counter(df['value'])\n    values = np.array(list(counter.keys()))\n    frequencies = np.array(list(counter.values()))\n\n    fig, ax = plt.subplots()\n    ax.bar(values, frequencies, color='green', alpha=0.6)\n\n    mean = np.mean(values)\n    std_dev = np.std(values)\n    x = np.linspace(mean - 3 * std_dev, mean + 3 * std_dev, 100)\n    y = norm.pdf(x, mean, std_dev)\n    ax.plot(x, y, 'k', linewidth=2)\n\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    plt.show()\n\n    return counter, ax\n\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Generate pandas DataFrame with random values lists 'a' 'b' plot as bar chart List 'a' sets row indices length list 'b' determines number columns using predefined names from 'COLUMNS = ['A' 'B' 'C' 'D' 'E']' list. Parameters: a (list): list number rows. b (list): list number columns column names predefined. Returns matplotlib.axes.Axes: Axes object of plotted bar chart. Requirements: - numpy - pandas - matplotlib Data Structure Uses pandas DataFrame structure data. Example >>> ax = task_func([1, 2, 3], ['A', 'B' 'C' 'D', 'E'])\n    \"\"\"\n    # Generate DataFrame\n    df = pd.DataFrame(np.random.rand(a, b), columns=COLUMNS[:b])\n    \n    # Plot bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n    \n    # Set title and labels\n    ax.set_title('Random Bar Chart')\n    ax.set_xlabel('Row Index')\n    ax.set_ylabel('Random Values')\n    \n    # Show plot\n    plt.show()\n    \n    return ax\n\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    function plots bar chart monthly data values single year 'month x-axis 'value y-axis Parameters data (str): data string format 'yyyy-mm-value' Returns Axes object matplotlib.axes.Axes object plot title 'Monthly Data yyyy' x label 'Month' y label 'Value' Requirements pandas datetime matplotlib.pyplot Example data '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650' ax = task_func(data)\n    \"\"\"\n    # Convert the data string into a list of tuples\n    data_list = [tuple(item.split(',')) for item in data.split()]\n    \n    # Convert the list of tuples into a pandas DataFrame\n    df = pd.DataFrame(data_list, columns=['date', 'value'])\n    \n    # Convert the 'date' column to datetime format\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Set the 'date' column as the index of the DataFrame\n    df.set_index('date', inplace=True)\n    \n    # Group the DataFrame by month and sum the values\n    df_monthly = df.resample('M').sum()\n    \n    # Plot the monthly data values\n    ax = df_monthly.plot(kind='bar', figsize=(10, 6))\n    \n    # Set the title of the plot\n    ax.set_title('Monthly Data ' + df.index[0].strftime('%Y'))\n    \n    # Set the x-axis label\n    ax.set_xlabel('Month')\n    \n    # Set the y-axis label\n    ax.set_ylabel('Value')\n    \n    # Show the plot\n    plt.show()\n    \n    return ax\n\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    function draws histogram visualize frequency distribution numeric values string format 'Value' x-axis 'Frequency' y-axis 'Histogram Values' title. Parameters: data (str): data string format 'value-value-value-...' Returns ax (matplotlib.axes..Axes): Axes object created histogram Requirements pandas numpy matplotlib.pyplot Notes histogram uses bins calculated `np.arange(data.min(), data.max()+2) - 0.5`. Example data = '1-2-3-4-5-6-7-8-9-10' ax = task_func(data)\n    \"\"\"\n    # Convert the string data into a pandas Series\n    data_series = pd.Series(data.split('-'))\n    \n    # Convert the series to numeric values\n    data_numeric = pd.to_numeric(data_series)\n    \n    # Calculate the frequency distribution\n    frequency_distribution = data_numeric.value_counts()\n    \n    # Create the histogram\n    ax = frequency_distribution.plot(kind='hist', bins=np.arange(data_numeric.min(), data_numeric.max()+2) - 0.5)\n    \n    # Set the title and labels\n    ax.set_title('Histogram of Frequency Distribution')\n    ax.set_xlabel('Frequency')\n    ax.set_ylabel('Histogram Values')\n    \n    # Show the plot\n    plt.show()\n    \n    return ax\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine wave specified length adjusts curve using curve_fit from scipy.optimize data Parameters array_length (int): Length sine wave array Defaults to 100. noise_level (float): Level noise added sine wave Defaults 0.2 Returns Axes object plot showing noisy sine wave adjusted curve Requirements numpy scipy.optimize matplotlib.pyplot Example ax = task_func(100, 0.2)\n    \"\"\"\n    x = np.linspace(0, 2 * np.pi, array_length)\n    y = np.sin(x) + noise_level * np.random.randn(array_length)\n    popt, pcov = curve_fit(np.sin, x, y)\n    ax = plt.plot(x, y, 'b-', label='Noisy data')\n    ax = plt.plot(x, popt * np.sin(x), 'r', label='Fitted curve')\n    ax = plt.legend()\n    plt.show()\n    return ax\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads CSV file normalizes text to ASCII counts words returns 10 common words frequencies as matplotlib bar plot list of tuples. Parameters: csv_file (str): path to CSV file Returns tuple tuple containing matplotlib.axes.Axes object for bar plot list 10 common words frequencies FileNotFoundError: CSV file found at specified path. IOError: error in reading file. Requirements unicodedata - csv collections - matplotlib.pyplot Example create_dummy_csv_file('dummy.csv') >>> ax, most_common_words = task_func('dummy.csv') >>> os.remove('dummy.csv') >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> type(most_common_words) <class 'list'> function assumes CSV file contains text data file properly formatted.\n    \"\"\"\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            data = [row for row in reader]\n    except FileNotFoundError:\n        print(\"CSV file not found at specified path.\")\n        return\n    except IOError:\n        print(\"Error in reading file.\")\n        return\n\n    text = ' '.join([row[0] for row in data])\n    normalized_text = ''.join(c for c in unicodedata.normalize('NFKD', text) if c.isalnum() or c.isspace())\n    words = normalized_text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    fig, ax = plt.subplots()\n    ax.bar([word for word, count in most_common_words], [count for word, count in most_common_words])\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('10 Most Common Words Frequencies')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return ax, most_common_words\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list distributed random numbers plot histogram probability density function (PDF). Parameters size number random numbers generate Default 1000. Requirements numpy scipy.stats matplotlib.pyplot Returns matplotlib.figure.Figure figure object containing histogram PDF plot Example import matplotlib >>> = task_func(size=500) >>> isinstance(fig, matplotlib.figure.Figure) Check if output matplotlib figure object True >>> len(fig.axes[0].lines) == 1 Ensure one line plot axes PDF True >>> len(fig.axes[0].patches) > 10 Check histogram bars (patches) present True\n    \"\"\"\n    data = np.random.randn(size)\n    fig, ax = plt.subplots()\n    ax.hist(data, bins=30, density=True, alpha=0.6, color='g')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    ax.set_title('Histogram and Probability Density Function')\n    plt.show()\n    return fig\n\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates RSA public private key pair saves private key in file after encrypting with password using AES encryption Returns public key filename encrypted private key encryption details for testing output file \"private_key_<number>.txt\", <number> hex representation of 8 randomly generated bytes Returns rsa.PublicKey RSA public key. str filename encrypted private key stored. bytes encryption password for testing decryption. bytes encryption nonce testing decryption. Requirements: - os - Crypto.Cipher.AES - Crypto.Random.get_random_bytes base64.b64encode - base54.b64decode Examples pub_key filename password nonce = task_func() >>> isinstance(pub_key, rsa.PublicKey) True isinstance(filename, str) True isinstance(password, bytes) True(nonce, bytes) True\n    \"\"\"\n    # Generate RSA key pair\n    (pub_key, priv_key) = rsa.newkeys(2048)\n\n    # Generate random 8 bytes for AES encryption\n    nonce = get_random_bytes(8)\n\n    # Create AES cipher with random 8 bytes\n    cipher = AES.new(nonce, AES.MODE_EAX)\n\n    # Encrypt private key with AES\n    encrypted_priv_key = cipher.encrypt(priv_key.save_pkcs1())\n\n    # Generate filename for private key\n    filename = f\"private_key_{nonce.hex()}.txt\"\n\n    # Save encrypted private key to file\n    with open(filename, \"wb\") as f:\n        f.write(encrypted_priv_key)\n\n    # Return public key, filename, password, and nonce\n    return pub_key, filename, password, nonce\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates RSA public private keys encrypts file using AES encryption encrypts AES key with public RSA key encrypted file AES key saved in separate files method demonstrates hybrid encryption approach. Parameters: file_path (str): path to file encrypted. Returns: rsa.PublicKey: RSA public key. str filename of encrypted file. str filename file containing encrypted AES key. Requirements: - rsa - os - cryptography.hazmat.backends.default_backend.hazmat.primitives.ciphers.Cipher.algorithms.modes base64.b64encode Examples: >>> pub_key, encrypted_file_key_file = task_func('my_file.txt') >>> isinstance(pub_key, rsa.PublicKey) True >>> encrypted_file.endswith('.encrypted') True_key_file.endswith('.encrypted') True\n    \"\"\"\n    # Generate RSA keys\n    (pub_key, priv_key) = rsa.newkeys(2048)\n\n    # Read file\n    with open(file_path, 'rb') as file:\n        data = file.read()\n\n    # Generate AES key\n    aes_key = os.urandom(32)\n\n    # Create AES cipher\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(os.urandom(16)), backend=default_backend())\n\n    # Encrypt data\n    encryptor = cipher.encryptor()\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(data) + padder.finalize()\n    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt AES key with RSA public key\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n\n    # Save encrypted file\n    encrypted_file_path = file_path + '.encrypted'\n    with open(encrypted_file_path, 'wb') as file:\n        file.write(encrypted_data)\n\n    # Save encrypted AES key\n    encrypted_aes_key_file_path = file_path + '.encrypted_key'\n    with open(encrypted_aes_key_file_path, 'wb') as file:\n        file.write(encrypted_aes_key)\n\n    return pub_key, encrypted_file_path, encrypted_aes_key_file_path\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Extracts text href attributes anchor tags from URL's HTML content returns data in pandas DataFrame time extraction. Parameters: url (str): URL to fetch HTML content Returns pandas.DataFrame: with columns 'text' 'href' 'fetch_time' Each row corresponds to anchor tag HTML 'text' 'href' containing text hyperlink reference anchor tag 'fetch_time' contains timestamp data fetched format 'YYYY-MM-DD HH:MM:SS'. Raises ValueError: If URL invalid or empty. URLError: issue with network connectivity or server. Requirements: - urllib.request - pyquery - datime - pandas - urllib.error Example >>> df = task_func('https://en.wikibooks.org/wiki/Main_Page') function requires internet connectivity to fetch HTML content.\n    \"\"\"\n    if not url:\n        raise ValueError(\"URL is empty\")\n    try:\n        response = urllib.request.urlopen(url)\n    except urllib.error.URLError as e:\n        raise ValueError(f\"Invalid URL or network error: {e}\")\n    html_content = response.read()\n    doc = pq(html_content)\n    anchor_tags = doc('a')\n    data = []\n    for tag in anchor_tags:\n        text = tag.text\n        href = tag.get('href')\n        data.append((text, href, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))\n    df = pd.DataFrame(data, columns=['text', 'href', 'fetch_time'])\n    return df\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data specified hours save in CSV file with coloumns 'Time' 'Temperature' 'Humidity' 'Pressure' Parameters: hours (int): number hours sensor data generated output_dir (str optional): output file path Returns: hours (int): Number hours generate data Requirements: datetime - os - random - csv Example file_path = task_func(1) Generate data 1 hour >>> os.path.exists(file_path) Check if file created True >>> isinstance(file_path, str) Validate return type string True >>> 'sensor_data.csv' in file_path Ensure filename correct True\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate sensor data\n    data = []\n    for hour in range(hours):\n        time = datetime.now() + timedelta(hours=hour)\n        sensor_data = {\n            'Time': time.strftime('%Y-%m-%d %H:%M:%S'),\n            'Temperature': randint(20, 30),\n            'Humidity': randint(40, 60),\n            'Pressure': randint(950, 1050)\n        }\n        data.append(sensor_data)\n\n    # Save data to CSV file\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, 'w', newline='') as csvfile:\n        fieldnames = ['Time', 'Temperature', 'Humidity', 'Pressure']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data vehicle types over specified hours saves data to CSV file coloumns 'Time' 'Car' 'Bus' 'Truck 'Bike' plots data line chart 'Time' x-axis 'Vehicle Count' y-axis. Parameters hours (int): Number hours data output_dir (str optional): output file path Returns tuple Path to CSV file matplotlib axes object line plot. Requirements pandas - os - csv matplotlib.pyplot random datetime import matplotlib >>> file_path, ax = task_func(2) Generate data 2 hours >>> isinstance(file_path, str) True 'traffic_data.csv' file_path True isinstance(ax, matplotlib.axes.Axes) True\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate data\n    data = []\n    for hour in range(hours):\n        vehicle_counts = {vehicle: randint(0, 100) for vehicle in VEHICLE_TYPES}\n        vehicle_counts['Time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        data.append(vehicle_counts)\n\n    # Save data to CSV file\n    csv_file_path = os.path.join(output_dir, 'traffic_data.csv')\n    with open(csv_file_path, 'w', newline='') as csvfile:\n        fieldnames = ['Time'] + VEHICLE_TYPES\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(data)\n\n    # Plot data\n    df = pd.read_csv(csv_file_path)\n    df['Time'] = pd.to_datetime(df['Time'])\n    df.set_index('Time', inplace=True)\n    ax = df.plot(kind='line')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data Over Time')\n\n    return csv_file_path, ax\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data specified hours save CSV file colomns 'Time' 'Condition' back up file backup directory. Parameters: hours (int): number hours weather data generated output_dir (str optional): output file path Returns str: path generated CSV file. Requirements: datetime - os - random - csv - shutil Example: >>> 'weather_data.csv' in task_func(24) True >>> 'weather_data.csv' task_func(10) True\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        time = datetime.now() + timedelta(hours=i)\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time.strftime('%Y-%m-%d %H:%M:%S'), condition])\n\n    # Save weather data to CSV file\n    csv_file_path = os.path.join(output_dir, 'weather_data.csv')\n    with open(csv_file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(weather_data)\n\n    # Backup file\n    backup_dir = os.path.join(output_dir, 'backup')\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    backup_file_path = os.path.join(backup_dir, 'weather_data_backup.csv')\n    shutil.copyfile(csv_file_path, backup_file_path)\n\n    return csv_file_path\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Generate visualize Pandas DataFrame results football matches multiple teams 'Team' random goals penalties 'Penalty Cost' Penalties converted into fines according penalty costs. Parameters: goals maximum goals team score penalties (int): maximum number penalties team receive. Returns pd.DataFrame dataframe containing match results. list list two seaborn plot objects (Axes) goals penalty costs Requirements - pandas - seaborn - matplotlib.pyplot - random Example >>> df, plots = task_func(5, 3)\n    \"\"\"\n    # Generate random data\n    data = {\n        'Team': [TEAMS[randint(0, len(TEAMS) - 1)] for _ in range(goals)],\n        'Goals': [randint(0, 5) for _ in range(goals)],\n        'Penalties': [randint(0, penalties) for _ in range(goals)],\n        'Penalty Cost': [PENALTY_COST * randint(0, 3) for _ in range(goals)]\n    }\n    df = pd.DataFrame(data)\n\n    # Plotting\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot 1: Goals distribution\n    sns.countplot(x='Goals', data=df, ax=axs[0])\n    axs[0].set_title('Goals Distribution')\n\n    # Plot 2: Penalty Cost distribution\n    sns.histplot(x='Penalty Cost', data=df, ax=axs[1])\n    axs[1].set_title('Penalty Cost Distribution')\n\n    plt.tight_layout()\n    plt.show()\n\n    return df, axs\n"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create Pandas DataFrame random integer values 0 9 given number rows Count non-zero values each column visualize information using bar plot. Parameters: rows (int): number of rows DataFrame Returns tuple tuple containing elements DataFrame generated DataFrame random integer values Axes: matplotlib Axes object bar plot. Requirements - numpy - pandas - matplotlib.pyplot Example >>> df, ax = task_func(10) >>> print(ax.title.get_text()) return 'Non-Zero Value Counts'\n    \"\"\"\n    # Generate random integer values\n    data = np.random.randint(0, 10, size=(rows, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n\n    # Count non-zero values in each column\n    non_zero_counts = df.apply(lambda x: (x != 0).sum())\n\n    # Create bar plot\n    ax = non_zero_counts.plot(kind='bar')\n    ax.set_title('Non-Zero Value Counts')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Count')\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Generate Pandas DataFrame displays grades randomly selected group students multiple courses Calculate average grade each course number students passing grade (>= visualize information using bar plot title 'Course-wise Average Passing Grade Counts' Parameters: num_students number students sample Returns Tuple[pd.DataFrame, plt.Axes]: tuple containing generated DataFrame bar plot's Axes object. Requirements pandas - numpy matplotlib.pyplot random typing Example >>> df, ax = task_func(50) >>> ax.get_title() 'Course-wise Average Passing Grade Counts'\n    \"\"\"\n    # Generate random grades for each student in each course\n    courses = ['Math', 'Science', 'English', 'History', 'Art']\n    grades = [sample(range(60, 101), num_students) for _ in range(len(courses))]\n    \n    # Create DataFrame\n    df = pd.DataFrame(grades, columns=courses)\n    \n    # Calculate average grade for each course\n    average_grades = df.mean()\n    \n    # Count students passing grade (>= 70) for each course\n    passing_grades_count = (df >= 70).sum()\n    \n    # Create bar plot\n    ax = passing_grades_count.plot(kind='bar', title='Course-wise Average Passing Grade Counts')\n    \n    return df, ax\n\n\n"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit exponential decay function indices array first column matches target value Parameters array (np.ndarray): numpy array first column searched for target value target_value (float or int): value first column filter data for fitting Returns tuple optimized parameters fitting function (popt) matplotlib Axes object Requirements numpy scipy.optimize matplotlib.pyplot import numpy as np array = np.array([[1, 2], [1, 3] [1, 4] [2, 5] [2, 6]]) target = 1 params ax = task_func(array, target) >>> len(params) 3\n    \"\"\"\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    filtered_array = array[array[:, 0] == target_value]\n    popt, pcov = optimize.curve_fit(exp_decay, filtered_array[:, 0], filtered_array[:, 1])\n\n    ax = plt.figure().add_subplot(111)\n    ax.plot(filtered_array[:, 0], filtered_array[:, 1], 'o', label='data')\n    ax.plot(filtered_array[:, 0], exp_decay(filtered_array[:, 0], *popt), 'r-', label='fit')\n    ax.legend()\n    plt.show()\n\n    return popt, ax\n\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from text documents using Non-Negative Matrix Factorization (NMF). function preprocesses input texts removing non-alphanumeric characters to lowercase stopwords vectorizes processed texts using TF-IDF applies NMF to extract specified number topics Each topic represented as list of significant words based on NMF component weights. Parameters: texts (list str): input text documents from extract topics num_topics (int): number of topics to extract. Returns list of list str: list each element is list of words representing topic. Requirements: - re - nltk - sklearn.decomposition - sklearn.feature_extraction.text Example texts = \"Data science study of data \"Machine learning learn from data \"Python is programming language in data science.\" topics = task_func(texts, 2) >>> print(topics) [['data' 'science''systems' 'provides']] exact output may vary on TF-IDF vectorization and NMF initialization.\n    \"\"\"\n    # Preprocess texts\n    processed_texts = [ALPHANUMERIC.sub(' ', text.lower()) for text in texts]\n    processed_texts = [text for text in processed_texts if text]  # Remove empty strings\n\n    # Vectorize processed texts\n    vectorizer = TfidfVectorizer(stop_words=STOPWORDS)\n    tfidf_matrix = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(tfidf_matrix)\n\n    # Extract topics\n    topics = []\n    for topic_idx, topic in enumerate(nmf.components_):\n        top_words = [vectorizer.get_feature_names()[i] for i in topic.argsort()[:-5 - 1:-1]]\n        topics.append(top_words)\n\n    return topics\n\n"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from texts using gensim Word2Vec model nltk.corpus.stopwords texts cleaned removing non-alphanumeric characters except space lowercased stop words Parameters texts strings stopwords (list optional): stopwords removed If not provided nltk's stopwords used Returns Word2Vec trained Word2Vec model Requirements - re - nltk - gensim Example texts = [\"Hello, World!\" \"Machine Learning great\", \"Python favorite programming language\"] model = task_func(texts) vector = model.wv['python']\n    \"\"\"\n    if stopwords is None:\n        stopwords = nltk.corpus.stopwords.words('english')\n    texts = [ALPHANUMERIC.sub(' ', text.lower()).split() for text in texts]\n    texts = [[word for word in text if word not in stopwords] for text in texts]\n    model = Word2Vec(texts, min_count=1)\n    return model\n\n"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes JSON files directory function reads each JSON file into DataFrame inserts \"Source\" column filename processed files moved to \"processed\" subdirectory path may not exist initially Parameters path (str): path directory JSON files Returns df (pandas.DataFrame): DataFrame containing data processed files Requirements pandas - json - os - shutil Example os.mkdir('data') open('data/a.json' 'w) f f.write('[{\"a\": 1, \"b\": 2} 3 4}]') ... 36 open('data/b.json' 'w') f f.write('[{\"a\": 5, \"b\": 6}: 7\": 8}]') 36 df = task_func('data') print(df) source 0 5 6 b.json 1 7 8 b.json 0 1 2 a.json 1 3 4 a.json shutil.rmtree('data')\n    \"\"\"\n    if not os.path.exists(path):\n        os.mkdir(path)\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.mkdir(os.path.join(path, 'processed'))\n    df = pd.DataFrame()\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n                df_temp = pd.DataFrame(data)\n                df_temp['Source'] = filename\n                df = pd.concat([df, df_temp], ignore_index=True)\n            shutil.move(os.path.join(path, filename), os.path.join(path, 'processed', filename))\n    return df\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create delete CSV file \"task_func_data/Output.txt with sensor data for temperature humidity data generated randomly written in append mode file deleted after use Returns Returns path to CSV file_func_data/Output.txt before deletion Requirements os - csv random datatime Example task_func()\n    \"\"\"\n    # Create a directory if it doesn't exist\n    os.makedirs(\"task_func_data\", exist_ok=True)\n\n    # Generate random temperature and humidity data\n    temperature = random.uniform(20, 30)\n    humidity = random.uniform(40, 60)\n\n    # Get current date and time\n    now = datetime.now()\n    date_time = now.strftime(\"%m/%d/%Y, %H:%M:%S\")\n\n    # Write data to CSV file\n    with open(\"task_func_data/Output.txt\", \"a\", newline=\"\") as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow([date_time, temperature, humidity])\n\n    # Return path to CSV file\n    return \"task_func_data/Output.txt\"\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data from URL save to CSV file. Parameters: url (str): URL scrape Returns CSV_FILE_PATH (str): path of CSV file where scraped data saved. Requirements: urllib - bs4 - csv - os Example task_func('http://www.example.com/') 'scraped_data.csv'\n    \"\"\"\n    # Check if CSV file already exists\n    if os.path.exists(CSV_FILE_PATH):\n        os.remove(CSV_FILE_PATH)\n\n    # Open connection to URL\n    with urllib.request.urlopen(url) as response:\n        # Read HTML content\n        html = response.read()\n\n    # Parse HTML content\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find all data\n    data = soup.find_all('data')\n\n    # Write data to CSV file\n    with open(CSV_FILE_PATH, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        for d in data:\n            writer.writerow([d.text])\n\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train linear regression model return model score test set DataFrame as training data target_column as target training model Before training data split into training test set using test_size random_state parameters Parameters: data (DataFrame): input data for training target_column column to predict random_state (int): seed for train-test split Defaults to 0 test_size (float): fractional size of test set Defaults to 0.2 Returns model's score. ValueError If data not DataFrame If data empty target_column not data data contains values not numeric random_state not integer test_size not between 0 and 1. Requirements: - pandas - sklearn.model_selection.train_test_split - sklearn.linear_model.LinearRegression - numpy Example rng = np.random.default_rng(seed=42) data = pd.DataFrame( 'x1': rng.random(100), 'x2'.random(100), 'y': rng.random(100) result = task_func(data 'y' random_state=2 test_size=0.3) result -0.25486317198996633 data = pd.DataFrame( 'x1': rng.random(500), }) data['y'] = data['x1'] * 2 + 1 result = task_func(data random_state=9 test_size=0.1) result 1.0\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data not DataFrame\")\n    if data.empty:\n        raise ValueError(\"data empty\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column not data\")\n    if not all(isinstance(i, (int, float)) for i in data[target_column]):\n        raise ValueError(\"data contains values not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state not integer\")\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size not between 0 and 1\")\n    \n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    score = model.score(X_test, y_test)\n    return score\n"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates random DataFrame with 100 records Each record consists ID 1 to 100), Name (randomly selected from lists Latin other names), Date of Birth (randomly generated Email (constructed using name year of birth email domain). Improperly encoded Latin characters in names corrected during process. Parameters: start_year starting year for birth years Defaults to 1980. end_year ending year for Defaults to 2000. email_domain (str): domain for email addresses Defaults to 'example.com'. latin_names (list Latin names in generation Defaults to'Sopet\u00f3n 'M\u00e9ndez 'G\u00f3mez 'P\u00e9rez 'Mu\u00f1oz'] other_names (list other names generation Defaults to'Smith 'Johnson 'Williams 'Brown 'Jones'] rng_seed (int): seed for rng. Returns DataFrame: pandas DataFrame containing generated user data has columns: 'ID' 'Name' 'Date of Birth' 'Email'. Requirements: pandas - numpy - codecs - re - datetime Examples >>> df = task_func(rng_seed=1) >>> print(df) ID Name Date of Birth Email 0 1 Brown 1992-09-10 brown1992@example.com 2 Smith 1996-02-13 smith1996@example.com Jones 1986-10-19 jones1986@example G\u00f3mez 2000-12-11 g\u00f3mez2000@example.com 4 5 G\u00f3mez 1984-08-24 g\u00f3mez1984@example.96 Johnson 1990-09-17@example Brown 1992-10-14 brown1992@example.com Mu\u00f1oz 1998-05-04@example Mu\u00f1oz 1982-01-01 mu\u00f1oz1982@example.com Jones 1990-03-28 jones1990@example.com <BLANKLINE rows 4 columns df task_func(start_year=0 end_year=1200 email.at rng_seed=3 print(df) ID Name Date Birth Email Sopet\u00f3n 0952-09-01 00:00:00 sopet\u00f3n952@test.at Brown 0875-10-10 00:00:00 brown875@test.at Sopet\u00f3n 0605-08-15@test.at G\u00f3mez 0337-11-23 00:00:00 g\u00f3mez337@test.at G\u00f3mez 0641-04-27 g\u00f3mez641@test.at 96 Brown 0044-05-17 00:00:00 brown44@test.at 97 Williams 0530-01-21 williams530@test.at 98 Johnson 1005-12-15 00:00:00 johnson1005@test.at 99 M\u00e9ndez 1134-07-19 00:00:00 m\u00e9ndez1134@test.at 100 Johnson 0696-08-22 00:00:00 johnson696@test.at <BLANKLINE 4 columns\n    \"\"\"\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    # Generate random IDs\n    ids = np.arange(1, 101)\n    \n    # Generate random names\n    names = np.random.choice(latin_names + other_names, size=100)\n    \n    # Generate random birth years\n    birth_years = np.random.randint(start_year, end_year + 1, size=100)\n    \n    # Generate random emails\n    emails = [f\"{name.lower().replace(' ', '')}\" + str(year) + \"@\" + email_domain for name, year in zip(names, birth_years)]\n    \n    # Generate random dates of birth\n    dates_of_birth = [datetime.datetime(year, np.random.randint(1, 13), np.random.randint(1, 29)) for year in birth_years]\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'ID': ids,\n        'Name': names,\n        'Date of Birth': dates_of_birth,\n        'Email': emails\n    })\n    \n    # Correct improperly encoded Latin characters in names\n    df['Name'] = df['Name'].apply(lambda x: re.sub(r'[^\\x00-\\x7F]+', '', x))\n    \n    return df\n"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read list dictionaries from JSON file calculate mean median each key write results to CSV file. Parameters input_file (str): input JSON file name output_file (str): output CSV file name Returns dict: dictionary where each key is field from input JSON each value another dictionary mean median field. Requirements numpy - collections - json - csv Example task_func('data.json' 'stats.csv')\n    \"\"\"\n    # Read JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Initialize defaultdict\n    stats = defaultdict(lambda: {'mean': [], 'median': []})\n\n    # Calculate mean and median\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                stats[key]['mean'].append(value)\n                stats[key]['median'].append(value)\n\n    # Calculate mean and median\n    for key in stats:\n        stats[key]['mean'] = np.mean(stats[key]['mean'])\n        stats[key]['median'] = np.median(stats[key]['median'])\n\n    # Write to CSV file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for key, value in stats.items():\n            writer.writerow([key, value['mean'], value['median']])\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from dictionary checking if file exists content copies to target directory. Parameters kwargs (dict): dictionary keys full file paths values file content target_dir (str optional): directory files copied to Defaults to 'non_none_files' Returns copied_files (list): list of full file paths copied. Requirements - os - pathlib.Path - shutil Example files = {'/path/to/file1.txt': 'Hello'/file2.txt' None/file3.txt' 'World'} >>> task_func(files) >>> files = {/to/file4.txt' 'Another'/file5.txt' 'Example'} task_func(files, target_dir=\"another_directory\")\n    \"\"\"\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content is not None:\n            file_name = Path(file_path).name\n            target_file_path = os.path.join(target_dir, file_name)\n            with open(file_path, 'r') as file:\n                file_content = file.read()\n            if file_content == content:\n                shutil.copy(file_path, target_dir)\n                copied_files.append(target_file_path)\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes CSV files directory specified pattern creates new files altered names preserving content laid solid foundation initial tests. Parameters: directory (str): path to directory containing CSV files processed pattern (str optional): regular expression pattern filenames match. Returns: new_files (list): list of strings each string is filename of new CSV file created function. Requirements: - re - os - pathlib - csv Example >>> task_func(\"/mnt/data/test_data\") ['Shan.csv', 'Shannon.csv']\n    \"\"\"\n    \n    new_files = []\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            new_file = re.sub(r'-\\d+\\.csv$', '.csv', file)\n            new_path = os.path.join(directory, new_file)\n            with open(os.path.join(directory, file), 'r') as f:\n                reader = csv.reader(f)\n                data = [row for row in reader]\n            with open(new_path, 'w', newline='') as f:\n                writer = csv.writer(f)\n                writer.writerows(data)\n            new_files.append(new_file)\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip zip files directory matches pattern splitting filename last time \"-\" occurs using prefix part filename as directory extract. Parameters: directory (str): directory zip files located pattern (str): Regex pattern match zip files. Returns list: list directories files extracted. Requirements: - os - re - zipfile Example >>> task_func('/tmp/my_data') ('/tmp/backup/backup_20230827010101', [])\n    \"\"\"\n    result = []\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            prefix = match.group(1)\n            zip_path = os.path.join(directory, filename)\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(os.path.join(directory, prefix))\n                result.append(os.path.join(directory, prefix))\n    return result\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive files match pattern delete original files. Parameters: pattern (str): pattern match files. Returns archive_file (str): archive file path. Requirements: - subprocess - os - glob Example >>> task_func('*.txt') function archive file path.\n    \"\"\"\n    # Get all files match pattern\n    files = glob.glob(pattern)\n    \n    # Create archive file name\n    archive_file = os.path.join(ARCHIVE_DIR, f'archive_{os.path.basename(pattern)}.tar.gz')\n    \n    # Create archive\n    subprocess.run(['tar', '-czf', archive_file] + files)\n    \n    # Delete original files\n    for file in files:\n        os.remove(file)\n    \n    return archive_file\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count total goals penalties from CSV file update with given goals Parameters goals (dict): dictionary keys team names values numbers goals scored penalties (dict): dictionary keys team names values numbers penalties incurred Returns count (Counter.collections): Counter object with total counts goals penalties Requirements csv - os - collections.Counter Example goals = {'Team A': 3 B': 2 C': 1 D': 0 E': 2} penalties = {'Team A': 1 B': 0 C': 2 D': 3 E': 1} counts = task_func(goals, penalties) >>> print(counts) Counter({'goals': 8, 'penalties': 7})\n    \"\"\"\n    # Read the CSV file\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        data = list(reader)\n\n    # Initialize counters\n    goal_counter = Counter()\n    penalty_counter = Counter()\n\n    # Update counters with the given data\n    for row in data:\n        team = row['team']\n        goal_counter[team] += int(row['goals'])\n        penalty_counter[team] += int(row['penalties'])\n\n    # Update counters with the given goals and penalties\n    goal_counter.update(goals)\n    penalty_counter.update(penalties)\n\n    # Combine counters\n    total_counter = goal_counter + penalty_counter\n\n    return total_counter\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from source directory to target directory based specified pattern function iterates through all files source directory if file name matches pattern moved to target directory. Parameters: source_dir (str): path source directory. target_dir (str): path file_pattern (str optional): regular expression pattern filenames must match to be moved Default is r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b' matches filenames alphanumeric characters extensions txt, doc docx. Returns moved_files_count (int): number of files successfully moved from source to target directory. Requirements: - re - os - shutil Example: >>> task_func('/path/to/source', '/path/to/target') 3 example move 3 files from/to/source' to/to/target' if filenames match default pattern.\n    \"\"\"\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            source_file = os.path.join(source_dir, filename)\n            target_file = os.path.join(target_dir, filename)\n            shutil.move(source_file, target_file)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calculate similarity values between texts cosine similarity Levenshtein ratio texts cleaned non-alphanumeric characters except spaces converted to lowercase Cosine similarity computed term frequency text Levenshtein ratio computed using 'ratio' function from 'python-Levenshtein' library measures similarity of two strings between 0 and 1. Parameters: text1 (str): first string compare text2 (str): second string compare Returns tuple tuple containing cosine similarity Levenshtein ratio as floats. cosine similarity (float): ranges 0 to 1 1 means identical term frequency 0 indicates no common terms. levenshtein_ratio (float): Levenshtein ratio ranges 0 to 1 1 means strings identical 0 means different. Requirements: re - numpy - collections - Levenshtein Example: task_func(\"Hello, World!\", \"Hello World\") (0.9999999999999998, 0.9565217391304348)\n    \"\"\"\n    # Clean and convert to lowercase\n    text1 = ALPHANUMERIC.sub('', text1).lower()\n    text2 = ALPHANUMERIC.sub('', text2).lower()\n\n    # Tokenize and count term frequency\n    counter1 = Counter(text1.split())\n    counter2 = Counter(text2.split())\n\n    # Calculate cosine similarity\n    intersection = set(counter1.keys()) & set(counter2.keys())\n    cosine_similarity = sum(counter1[key] * counter2[key] for key in intersection) / (np.sqrt(sum(counter1[key]**2 for key in counter1)) * np.sqrt(sum(counter2[key]**2 for key in counter2)))\n\n    # Calculate Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    return cosine_similarity, levenshtein_ratio\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate permutations list numbers calculate sum factorials each empty list function returns empty lists. Parameters: numbers (list int): list integers permute calculate factorial sums Returns list int list containing sums factorials each number list int list all permutations numbers TypeError: numbers not list integers ValueError: If input numbers negative. Requirements functools.reduce itertools.permutations math.factorial Example >>> fac, perm = task_func([1, 2, 3]) print(fac) [9, 9, 9, 9] >>> print(perm) [(1, 2, 3) (1, 3, 2), (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1)] fac perm = task_func([0, 4]) print(fac) [25, 25] >>> print(perm) [(0, 4), (4, 0)]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers not list integers\")\n    if not all(isinstance(i, int) for i in numbers):\n        raise TypeError(\"numbers not list integers\")\n    if any(i < 0 for i in numbers):\n        raise ValueError(\"If input numbers negative\")\n    fac = [reduce(lambda x, y: x * y, [math.factorial(i) for i in p]) for p in permutations(numbers)]\n    perm = [p for p in permutations(numbers)]\n    return fac, perm\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (SOURCE_DIR to another (DEST_DIR) based on specified file extensions issues warnings for files transferred due issues. Parameters: SOURCE_DIR (str): source directory path files transferred DEST_DIR (str): destination directory path EXTENSIONS (list): list file extensions consider for transferring Example ['.txt', '.csv' '.xlsx'] Returns transferred_files (list): list names of files successfully transferred. Requirements: warnings - os - glob - shutil - time Example task_func('/path/to/source'/destination' ['.txt' '.csv']) ['file1.txt', 'file2.csv'] >>> task_func('/path/to/source'/destination' ['.jpg']) [\n    \"\"\"\n    transferred_files = []\n    for ext in EXTENSIONS:\n        for file in glob.glob(os.path.join(SOURCE_DIR, '*' + ext)):\n            try:\n                shutil.move(file, DEST_DIR)\n                transferred_files.append(os.path.basename(file))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer {file}: {e}\")\n    return transferred_files\n"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    function takes list tuples elements counts weights normalizes counts z-score normalization weights min-max scaling returns pandas DataFrame items counts weights Parameters data (list tuples): each tuple contains element count weight Example [('A', 100, 0.5), ('B', 200,) Returns DataFrame pandas DataFrame three columns 'Item Count Weight' Each corresponds entry input data. Requirements pandas numpy scipy.stats.zscore sklearn.preprocessing.MinMaxScaler Example data = [('A', 100, 0.5), ('B', 200, 0.6), ('C', 150, 0.7) report = task_func(data) print(report) Item Normalized Count Weight 0 A -1.224745 0.0 1 B 1.224745 0.5 2 C 0.000000 1.0 data('Andrew' 5743, 0.925)'Elizabeth 4655, 1.0875)'Susan' 4716, 0.65)'Christopher 2100, 0.05)'Timothy' 3943, 0.175) report task_func(data) print(report) Item Normalized Count Weight 0 Andrew 1.248851 0.843373 Elizabeth 0.349969 1.000000 2 Susan 0.400366 0.578313 Christopher -1.760916 0.000000 4 Timothy -0.238270 0.120482\n    \"\"\"\n    # Create a DataFrame from the input data\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n\n    # Calculate the total count and weight\n    total_count = df['Count'].sum()\n    total_weight = df['Weight'].sum()\n\n    # Calculate the normalized count and weight\n    df['Normalized Count'] = df['Count'] / total_count\n    df['Normalized Weight'] = df['Weight'] / total_weight\n\n    # Calculate the z-score for the normalized count\n    df['Z-Score'] = zscore(df['Normalized Count'])\n\n    # Scale the normalized count to a range between 0 and 1\n    scaler = MinMaxScaler()\n    df[['Scaled Count']] = scaler.fit_transform(df[['Normalized Count']])\n\n    # Return the DataFrame\n    return df[['Item', 'Normalized Count', 'Normalized Weight', 'Z-Score', 'Scaled Count']]\n\n"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calculate mean numerical values each position tuples list Non-numeric values ignored means computed available data missing data ignored DataFrame columns 'Mean Value' contains mean values all tuple positions index 'Position i' i current position empty list passed empty DataFrame returned. Parameters data_list (list tuples): list containing mixed data types (string int float Defaults [('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4) ('e', 5, 6.5)] Returns DataFrame pandas DataFrame mean values numerical data each position Requirements pandas - numpy itertools Example df = task_func() print(df) Mean Value Position 0 NaN Position 1 3.0 Position 2 4.3 data [('a' '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3),['d' 4, 5.4) ('e', 5, 6.5)] df task_func() print(df) Mean Value Position 0 NaN Position 1 3.0 Position 2 4.3\n    \"\"\"\n    # Create an empty DataFrame\n    df = pd.DataFrame(columns=['Mean Value'] + [f'Position {i}' for i in range(len(data_list[0]))])\n\n    # Iterate over each tuple in the data_list\n    for i, tup in enumerate(data_list):\n        # Extract numerical values from the tuple\n        numerical_values = [x for x in tup if isinstance(x, (int, float))]\n\n        # Calculate the mean of the numerical values\n        mean_value = np.mean(numerical_values) if numerical_values else np.nan\n\n        # Create a new row for the DataFrame\n        row = [mean_value] + list(tup)\n\n        # Append the row to the DataFrame\n        df.loc[i] = row\n\n    return df\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform chi-square test independence variables in contingency table function takes DataFrame categorical data two column names constructs contingency table from columns performs chi-square test independence returns p-value test probability observing data if null hypothesis (independence variables true. Parameters: data (pd.DataFrame): DataFrame categorical variables col1 first categorical column col2 second column Returns float p-value chi-square test independence. ValueError: If 'data' empty 'col1' or 'col2' not in 'data columns multiple categories categories less than 5 observations (violating chi-square test assumptions). TypeError: If columns contain non-categorical data. Requirements: numpy pandas scipy.stats.chi2_contingency Examples data = pd.DataFrame({ 'Var1': ['A'] * 40 + ['B'] * 60, 'Var2': ['X'] * 25 + ['Y'] * 25 +'X] * 25 +'Y] * 25 ... }) >>> task_func(data, 'Var1', 'Var2') 0.06619257972219346 >>> np.random.seed(42) >>> data = pd.DataFrame({ ... 'a': np.random.choice(['A', 'B'] size=100), ... 'b': np.random.choice(['X', 'Y'] size=100) ... }) >>> task_func(data, 'a', 'b') 1.0\n    \"\"\"\n    if data.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"Column names not in DataFrame columns\")\n    if not all(data[col1].dtype == 'object' for col1 in [col1, col2]):\n        raise TypeError(\"Columns contain non-categorical data\")\n    \n    contingency_table = pd.crosstab(data[col1], data[col2])\n    \n    if any(contingency_table.sum(axis=1) < 5) or any(contingency_table.sum(axis=0) < 5):\n        raise ValueError(\"Categories less than 5 observations (violating chi-square test assumptions)\")\n    \n    chi2, p_value, dof, expected = chi2_contingency(contingency_table)\n    \n    return p_value\n\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate dice rolls calculate frequency return frequency array histogram results dice rolls have 6 outcomes title histogram \"Histogram of Dice Rolls\". x-axis \"Dice Value\" y-axis \"Frequency\". Parameters: rolls (int): number dice rolls Returns tuple containing np.array: numpy array frequency each outcome matplotlib.Axes: Axes object histogram Requirements numpy matplotlib.pyplot - random Examples import random >>> random.seed(0) >>> outcomes ax = task_func(10000) >>> print(outcomes) [1656 1690 1696 1657 1632 1669] >>> plt.show() >>> random.seed(10) >>> outcomes ax = task_func(100) >>> print(outcomes) [15 21 17 22 16 9] >>> plt.show()\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    outcomes = [random.choice(NUMBERS) for _ in range(rolls)]\n    frequency = np.bincount(outcomes, minlength=len(NUMBERS))\n    plt.hist(outcomes, bins=range(1, 7), align='left', rwidth=0.8, color='skyblue')\n    plt.title('Histogram of Dice Rolls')\n    plt.xlabel('Dice Value')\n    plt.ylabel('Frequency')\n    plt.xticks(range(1, 7))\n    plt.grid(axis='y', alpha=0.75)\n    plt.tight_layout()\n    return frequency, plt.gca()\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives processed files from source to target directory function identifies processed files by '_processed' suffix in filename. Parameters: source_dir (str): directory files archived target_dir (str): directory archive saved archive_name (str): name archive file Default is 'archive.zip' Returns: str: path to created archive. Requirements: - os - re - shutil - zipfile Example >>> task_func(./data/'/data_processed/')_processed/archive.zip' >>> task_func(/data/_processed 'my_archive.zip/data_processed/my_archive.zip'\n    \"\"\"\n    # Create target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Find all files with '_processed' suffix in source directory\n    processed_files = [f for f in os.listdir(source_dir) if re.search(r'_processed$', f)]\n\n    # Create a zip file in target directory\n    with zipfile.ZipFile(os.path.join(target_dir, archive_name), 'w', zipfile.ZIP_DEFLATED) as zipf:\n        # Add each processed file to the zip file\n        for file in processed_files:\n            file_path = os.path.join(source_dir, file)\n            zipf.write(file_path, os.path.basename(file_path))\n\n    # Return the path to the created archive\n    return os.path.join(target_dir, archive_name)\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts stock closing prices next 7 days linear regression plots data. Parameters df (DataFrame): input dataframe columns 'date' 'closing_price' 'date' datetime format Returns tuple tuple containing list predicted prices next 7 days Axes matplotlib Axes object plot. Requirements pandas numpy matplotlib.pyplot sklearn.linear_model.LinearRegression Constants function uses constant time step 24*60*60 seconds generate future timestamps. Example df = pd.DataFrame( 'date' pd.date_range(start'1/1/2021 end='1/7/2021 'closing_price': [100, 101 102 103 104 105, 106] }) pred_prices plot = task_func(df) print(pred_prices) [107.0, 108.0 109.0 110.0 111.0 112.0 113.0]\n    \"\"\"\n    # Convert 'date' column to datetime\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Sort data by date\n    df.sort_values(by='date', inplace=True)\n    \n    # Extract features and target\n    X = df['date'].values.reshape(-1, 1)\n    y = df['closing_price'].values\n    \n    # Create and fit the model\n    model = LinearRegression()\n    model.fit(X, y)\n    \n    # Generate future timestamps\n    future_dates = pd.date_range(start=df['date'].iloc[-1], periods=8, freq='D')[1:]\n    future_dates = future_dates.values.reshape(-1, 1)\n    \n    # Predict future prices\n    pred_prices = model.predict(future_dates)\n    \n    # Plot the data\n    plt.figure(figsize=(10, 5))\n    plt.plot(df['date'], df['closing_price'], label='Actual Prices')\n    plt.plot(future_dates, pred_prices, label='Predicted Prices')\n    plt.xlabel('Date')\n    plt.ylabel('Closing Price')\n    plt.title('Stock Closing Prices Prediction')\n    plt.legend()\n    plt.show()\n    \n    return pred_prices, plt.gca()\n"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies plots outliers 'closing_price' column DataFrame Z-Score method Parameters df (pandas.DataFrame): input DataFrame contain column 'closing_price' numerical values z_threshold (float optional): absolute Z-Score threshold identifying outliers Default 2. Returns tuple containing elements pandas.DataFrame DataFrame containing outliers 'closing_price' column matplotlib.axes..Axes plot object displaying outliers x-axis label 'Index' y-axis label 'Closing Price' title 'Outliers Closing Prices'. Requirements numpy matplotlib.pyplot scipy.stats.zscore Constants Z-Score threshold identifying outliers customizable via 'z_threshold' parameter. Examples import pandas as pd df1 = pd.DataFrame( 'closing_price': [100, 101 102 103 104 150] outliers1 plot1 = task_func(df1) df2 = pd.DataFrame( 'closing_price': [10, 20 30 40 50 100] outliers2, plot2 = task_func(df2 z_threshold=1.5)\n    \"\"\"\n    # Calculate Z-Scores\n    df['z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers\n    outliers = df[df['z_score'].abs() > z_threshold]\n    \n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(df.index, df['closing_price'], label='Closing Prices')\n    ax.scatter(outliers.index, outliers['closing_price'], color='red', label='Outliers')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers Closing Prices')\n    ax.legend()\n    \n    return outliers, ax\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize distribution stock closing prices using box plot histogram single figure function understand spread central tendency distribution shape. tile box plot set 'Box Plot of Closing Prices' title histogram 'Histogram Closing Prices'. Requirements: - pandas matplotlib.pyplot seaborn Parameters: df (DataFrame): pandas DataFrame containing one column 'closing_price' with stock closing prices Returns tuple tuple containing two matplotlib.axes._axes.Axes objects first boxplot second histogram. Example >>> df = pd.DataFrame({ ... 'closing_price': [100, 101, 102 103 104, 150] ... }) >>> boxplot_ax, histplot_ax = task_func(df) >>> print(boxplot_ax.get_title()) Box Plot Closing Prices >>> print(histplot_ax.get_title()) Histogram of Closing Prices\n    \"\"\"\n    fig, (boxplot_ax, histplot_ax) = plt.subplots(1, 2, figsize=(10, 5))\n    \n    # Box plot\n    sns.boxplot(x=df['closing_price'], ax=boxplot_ax)\n    boxplot_ax.set_title('Box Plot of Closing Prices')\n    \n    # Histogram\n    sns.histplot(x=df['closing_price'], ax=histplot_ax)\n    histplot_ax.set_title('Histogram of Closing Prices')\n    \n    plt.tight_layout()\n    plt.show()\n    \n    return boxplot_ax, histplot_ax\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts share closing prices next 7 days ARIMA model plots forecast Parameters df (pd.DataFrame): input dataframe columns 'date' 'closing_price' 'date' datetime dtype 'closing_price' float Returns Tuple[List[float] Axes] tuple list forecasted prices next 7 days matplotlib Axes object subplot. Requirements pandas numpy matplotlib.pyplot statsmodels.tsa.arima.model.ARIMA Example df = pd.DataFrame( 'date' pd.date_range(start'1/1/2021 end='1/7/2021 'closing_price' [100, 101 102 103 104 105, 106]) forecast ax = task_func(df) print(forecast) [106.99999813460752 107.99999998338443 108.99999547091295 109.99999867405204 110.99999292499156 111.99999573455818 112.9999903188028]\n    \"\"\"\n    # Convert 'date' column to datetime\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Set 'date' as the index\n    df.set_index('date', inplace=True)\n    \n    # Fit ARIMA model\n    model = ARIMA(df['closing_price'], order=(5, 1, 0))\n    model_fit = model.fit()\n    \n    # Forecast next 7 days\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot the original data and the forecast\n    ax = df['closing_price'].plot(label='Original')\n    forecast.plot(ax=ax, label='Forecast')\n    ax.legend()\n    \n    return forecast.tolist(), ax\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing two-letter combinations lowercase English alphabets dictionary values represent frequency in word If combination in word value 0. Requirements collections.Counter - itertools - string Parameters word (str): input string containing alphabetic characters Returns dict: dictionary with keys as two-letter alphabet combinations values as counts in word. function uses `collections.Counter` library to count occurrences two-letter combinations uses `itertools.permutations` method generate two-letter combinations alphabets uses `string` library to get string of lowercase alphabets. Example: >>> list(task_func('abcdef').items())[:5] [('ab', 1), ('ac', 0), ('ad', 0), ('ae', 0), ('af', 0)]\n    \"\"\"\n    alphabet = string.ascii_lowercase\n    combinations = list(itertools.permutations(alphabet, 2))\n    counter = Counter(combinations)\n    for combination in counter:\n        if combination not in word:\n            counter[combination] = 0\n    return dict(counter)\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create visualize sales report categories period time Parameters start_date (str): start date report 'YYYY-MM-DD' format Default '2016-01-01' periods (int): number periods report Default 13. freq (str): frequency dates Default 'WOM-2FRI' (WeekOfMonth-2nd Friday). categories (list): List categories report Default ['Electronics' 'Fashion' 'Home & Kitchen' 'Automotive' 'Sports'] Returns Returns DataFrame sales data columns 'Date' 'Category' 'Sales' Returns Matplotlib Axes object plot. Requirements pandas - matplotlib.pyplot - numpy Example >>> df ax = task_func(start_date='2020-01-01' periods=5 freq='W-MON' categories=['Electronics' 'Fashion']) df Date Category Sales 0 2020-01-06 Electronics 272 1 Fashion 147 2 2020-01-13 Electronics 217 3 Fashion 292 4 2020-01-20 Electronics 423 5 Fashion 6 2020-01-27 Electronics 295 7 Fashion 8 2020-02-03 Electronics 109 9 Fashion 311\n    \"\"\"\n    # Generate dates\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    \n    # Generate sales data\n    np.random.seed(0)\n    sales_data = np.random.randint(100, 500, (periods, len(categories)))\n    \n    # Create DataFrame\n    df = pd.DataFrame(sales_data, index=dates, columns=categories)\n    df = df.stack().reset_index()\n    df.columns = ['Date', 'Category', 'Sales']\n    \n    # Plotting\n    fig, ax = plt.subplots(figsize=(10, 6))\n    df.plot(x='Date', y='Sales', hue='Category', ax=ax)\n    ax.set_title('Sales Report by Category')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    plt.legend(title='Category')\n    plt.show()\n    \n    return df, ax\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates time series sales data specified date linear regression forecast future sales data. Parameters start_date (str): start date sales data YYYY-MM-DD format Default '2016-01-01' periods (int): number periods sales data available Default 13. freq (str): frequency sales data 'WOM-2FRI' second Friday each month Default 'WOM-2FRI' sales_data (array-like optional): array actual sales data not provided random data generated Returns numpy array forecasted future sales same number periods input data. Requirements numpy - pandas - sklearn.linear_model.LinearRegression Examples np.random.seed(42) consistent random data generation task_func('2016-01-01', 13, 'WOM-2FRI') array([313.65384615, 318.56043956 323.46703297 328.37362637.28021978 338.18681319 343.09340659. 352.90659341 357.81318681 362.71978022 367.62637363 372.53296703]) task_func('2020-01-01', 5, 'M', [200, 300, 400, 500, 600]) array([238.9, 226. , 213.1, 200.2, 187.3])\n    \"\"\"\n    # Generate random sales data if none provided\n    if sales_data is None:\n        np.random.seed(42)\n        sales_data = np.random.randint(100, 1000, periods)\n    \n    # Create a DataFrame with date index\n    df = pd.DataFrame({'sales': sales_data}, index=pd.date_range(start_date, periods=periods, freq=freq))\n    \n    # Fit a linear regression model\n    model = LinearRegression()\n    model.fit(df.index.to_series().values.reshape(-1, 1), df['sales'])\n    \n    # Generate future dates\n    future_dates = pd.date_range(start=df.index[-1], periods=periods, freq=freq)\n    \n    # Predict future sales\n    future_sales = model.predict(future_dates.to_series().values.reshape(-1, 1))\n    \n    return future_sales\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    assigns tasks to employees due date current day returns DataFrame. Parameters task_list str): tasks assigned n_tasks (int): Number tasks assigned number not negative larger than tasks task_list. employees (list str optional): employee names tasks assigned If not provided defaults to ['John Doe' 'Jane Smith 'James Brown 'Mary Johnson 'Robert Davis' seed (int optional): Seed for random number generator reproducibility Defaults to None (not set). Returns pd.DataFrame Contains columns 'Task Name' 'Assigned To' 'Due Date' each representing assigned task. Raises ValueError: If n_tasks negative. Task names sanitized replacing spaces with underscores Due dates set to current system date. Requirements pandas - random - datetime Examples >>> df = task_func(['Clean Office' 'Prepare Report' 'Client Meeting'], 2 seed=42) >>> df Task Name Assigned To Due Date 0 Client_Meeting John Doe 2024-04-13 1 Clean_Office James Brown 2024-04-13 >>> type(df) <class 'pandas.core.frame.DataFrame'>\n    \"\"\"\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n    assigned_tasks = random.sample(task_list, n_tasks)\n\n    assigned_to = random.sample(employees, n_tasks)\n\n    due_dates = [datetime.now().strftime(\"%Y-%m-%d\") for _ in range(n_tasks)]\n\n    df = pd.DataFrame(\n        {\n            \"Task Name\": assigned_tasks,\n            \"Assigned To\": assigned_to,\n            \"Due Date\": due_dates,\n        }\n    )\n\n    return df\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in words with underscores plots frequency each unique word. Parameters mystrings (list of str): List words/phrases where spaces replaced with underscores text (str): text modifications applied word frequencies calculated not empty. Returns matplotlib.axes.Axes: Axes object plot. Raises ValueError: If input text empty. Requirements numpy - matplotlib - re - collections Notes operations case-insensitive frequency plot displays each unique word on x-axis order after modification with corresponding frequency y-axis. Examples >>> ax = task_func(['Lorem ipsum' 'consectetur adipiscing 'Lorem dolor Ipsum') >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text empty\")\n\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n\n    unique_words = list(word_counts.keys())\n    frequencies = list(word_counts.values())\n\n    ax = plt.figure().add_subplot()\n    ax.bar(unique_words, frequencies)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    ax.set_title('Word Frequencies')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with extensions from source directory save as zip file target directory Parameters source_directory (str): source directory containing files zipped target_directory (str): destination directory of zip file created. If exist function create zip_name (str): name zip file create (without extension '.zip' added automatically). Returns str: full path to created zip file format \"/path/to/target_directory/zip_name.zip\". OSError: If source_directory exist. Requirements: os - glob - pathlib - zipfile valid extensions are ['.txt' '.docx' '.xlsx' '.csv']. Example path = task_func('/path/to/source_directory' '/path/to/target_directory' 'zipped_files') >>> type(path) <class 'str'> >>> path '/path/to/target_directory/zipped_files.zip'\n    \"\"\"\n    if os.path.exists(source_directory):\n        raise OSError(f\"Source directory {source_directory} already exists.\")\n\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for file in glob.glob(os.path.join(source_directory, '*.*')):\n            if file.endswith(('.txt', '.docx', '.xlsx', '.csv')):\n                zipf.write(file, os.path.basename(file))\n\n    return zip_path\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files extensions (.txt.docx.xlsx .csv) from source directory to CSV saves in target directory. Parameters: source_directory (str): path to source directory containing files converted. target_directory (str): path target directory where converted CSV files saved If exist function create it. Returns int: number of files converted to CSV. FileNotFoundError: If source directory exist. Requirements: - os - pathlib - pandas - python-docx - openpyxl Notes Each file's text content captured stored in CSV with single 'Text' column no row indices. function overwrite existing files in target directory if same names as converted files. Example: >>> task_func('/Users/test/Documents',/csv_files') 4 >>> task_func('/path/to/source',/path/to/target') 2\n    \"\"\"\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n\n    if not source_path.is_dir():\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n\n    if not target_path.is_dir():\n        os.makedirs(target_path)\n\n    converted_count = 0\n\n    for file_path in source_path.iterdir():\n        if file_path.is_file():\n            file_name, file_extension = os.path.splitext(file_path.name)\n            if file_extension in ['.txt', '.docx', '.xlsx']:\n                if file_extension == '.txt':\n                    with open(file_path, 'r') as file:\n                        text = file.read()\n                elif file_extension == '.docx':\n                    doc = docx.Document(file_path)\n                    text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                elif file_extension == '.xlsx':\n                    df = pd.read_excel(file_path)\n                    text = '\\n'.join(df.to_string(index=False).split('\\n'))\n\n                target_file_path = target_path / f\"{file_name}.csv\"\n                with open(target_file_path, 'w') as file:\n                    file.write(text)\n\n                converted_count += 1\n\n    return converted_count\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes MinMax-normalized cumulative sum each numeric column DataFrame Parameters df (pandas.DataFrame): input DataFrame containing numerical values Returns pd.DataFrame each column contains normalized cumulative sum retaining original column names TypeError contains non-numeric data ValueError empty or contains NaN values Requirements pandas - numpy - sklearn Example input_df = pd.DataFrame({'A': [1, 2, 3], 'B': [3, 2, 1]}) output_df = task_func(input_df) type(output_df) <class 'pandas.core.frame.DataFrame'> output_df A B 0 0.0 0.000000 1 0.666667 2 1.0 1.000000\n    \"\"\"\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"Input DataFrame is empty or contains NaN values\")\n\n    for col in df.columns:\n        if not np.issubdtype(df[col].dtype, np.number):\n            raise TypeError(f\"Column '{col}' contains non-numeric data\")\n\n    scaler = MinMaxScaler()\n    df_normalized = df.copy()\n    for col in df.columns:\n        df_normalized[col] = scaler.fit_transform(df[[col]])\n\n    return df_normalized.cumsum()\n\n"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes directory listing each file size creation time last modification time without recursing subdirectories. Parameters: directory_path (str): path to directory analyzed. If empty function returns empty list. Returns list of tuples: Each tuple contains (file name size creation time modification time ISO format). ValueError: If directory exist. Requirements - os - pathlib - datetime Notes function assumes directory exists contains only files (no subdirectories processed). Times reported in system time, UTC creation modification times platform dependent some systems creation time might not replaced by last metadata change time. Examples: result = task_func('/path/to/directory') >>> print(result) [('example.txt', 1024 '2023-04-01T14:30:00Z' '2023-04-02T15:00:00Z'), ... result = task_func('/path/to/empty_directory') print(result) []\n    \"\"\"\n    directory_path = Path(directory_path)\n    if not directory_path.is_dir():\n        raise ValueError(\"Directory does not exist\")\n\n    file_info_list = []\n    for file_path in directory_path.iterdir():\n        if file_path.is_file():\n            file_size = file_path.stat().st_size\n            creation_time = datetime.fromtimestamp(file_path.stat().st_ctime, timezone.utc).isoformat()\n            modification_time = datetime.fromtimestamp(file_path.stat().st_mtime, timezone.utc).isoformat()\n            file_info_list.append((file_path.name, file_size, creation_time, modification_time))\n\n    return file_info_list\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates population report DataFrame CSV file based on JSON data. Parameters json_data (str): Nested JSON string containing country names keys populations values parent key \"Countries\". Example format '{\"Countries\": A: 331002651, B: 67886011}}' output_dir (str): Directory path CSV report saved Defaults to current directory function create if file_name (str): Name CSV report Defaults to \"country_population_report.csv\". Returns str file path generated CSV report pd.DataFrame: country-population data loaded from input JSON columns \"Country\", \"Population\". ValueError: If JSON data malformed empty contains non-string country names non-numeric negative populations. IOError: If file written to specified directory. Requirements json - os - pandas - math Notes Output DataFrame no extra index column. If function encounters float population valid round down to nearest integer. Example json_str = '{\"Countries\": A 331002651, B: 67886011}}' >>> csv_file_path, df = task_func(json_str) >>> print(csv_file_path)./country_population_report.csv >>> df Country Population 0 Country A 331002651 1 Country B 67886011\n    \"\"\"\n    try:\n        data = json.loads(json_data)\n        if \"Countries\" not in data:\n            raise ValueError(\"JSON data malformed. Missing 'Countries' key.\")\n        countries = data[\"Countries\"]\n        if not isinstance(countries, dict):\n            raise ValueError(\"JSON data malformed. 'Countries' value should be a dictionary.\")\n        df = pd.DataFrame(columns=[\"Country\", \"Population\"])\n        for country, population in countries.items():\n            if not isinstance(country, str):\n                raise ValueError(\"Non-string country name encountered.\")\n            if not isinstance(population, (int, float)) or population < 0:\n                raise ValueError(\"Non-numeric or negative population encountered.\")\n            df = df.append({\"Country\": country, \"Population\": math.floor(population)}, ignore_index=True)\n        csv_file_path = os.path.join(output_dir, file_name)\n        df.to_csv(csv_file_path, index=False)\n        return csv_file_path, df\n    except json.JSONDecodeError:\n        raise ValueError(\"JSON data malformed. Invalid JSON format.\")\n    except IOError:\n        raise IOError(\"Error writing to specified directory.\")\n\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates item (files directories in directory against conditions. Parameters: dir_path (str): path to directory evaluated Must exist. predicates (list strings): Names of conditions check for Must contain valid conditions Invalid conditions ignored. Supported conditions: 1. 'is_file' item file 2. 'is_dir' item directory 3. 'has_special_chars' item name contains character not letter digit underscore ignoring file extensions 4. 'has_numbers' item name contains number Returns: dictionary with directory items as keys results condition checks as values. Raises ValueError: If no valid predicates FileNotFoundError: specified directory exist or. function evaluates file/directory names full path Predicates deduplicated. Requirements: os - re - pathlib Examples task_func('/path/to/dir''is_file' 'has_numbers']) {'file.txt' {'is_file True 'has_numbers': False} 'file2.txt' {'is_file True 'has_numbers': True}} task_func('/path/to/dir''is_dir 'has_special_chars']) {'my_folder' {'is_dir' True 'has_special_chars': False} 'a_@Folder' {'is_dir' True 'has_special_chars': True}}\n    \"\"\"\n    if not os.path.exists(dir_path):\n        raise FileNotFoundError(f\"Directory {dir_path} does not exist.\")\n\n    predicates = list(set(predicates))  # deduplicate predicates\n    result = {}\n\n    for item in os.scandir(dir_path):\n        item_path = Path(item.path)\n        item_name = item_path.name\n        item_result = {}\n\n        for predicate in predicates:\n            if predicate == 'is_file':\n                item_result['is_file'] = item.is_file()\n            elif predicate == 'is_dir':\n                item_result['is_dir'] = item.is_dir()\n            elif predicate == 'has_special_chars':\n                item_result['has_special_chars'] = bool(re.search(r'[^a-zA-Z0-9_]', item_name))\n            elif predicate == 'has_numbers':\n                item_result['has_numbers'] = bool(re.search(r'\\d', item_name))\n\n        result[item_name] = item_result\n\n    return result\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert hexadecimal string to encodings function takes hexadecimal string input performs encoding operations decodes hexadecimal string to bytes converts bytes into UTF-8 string UTF-8 string encoded into formats hexadecimal base64 UTF-8 UTF-16 UTF-32 ASCII URL encoding ROT13. if ASCII not possible returns 'Not representable in ASCII' Parameters hex_string (str): input string in hexadecimal format Returns: dictionary containing input string encoded in formats dictionary keys are encoding types ('hex' 'base64 'utf-8 'utf-16 'utf-32' 'ASCII' 'URL' 'ROT13 values are corresponding encoded strings If string represented in ASCII 'ASCII' key maps to 'Not representable in ASCII'Requirements binascii base64 codecs Example task_func(\"4a4b4c\")'hex '4a4b4c 'base64 'SktM 'utf-8 'JKL 'utf-16 'JKL 'utf-32 'JKL 'ASCII 'URL 'JKL 'ROT13 'WXY task_func(\"68656c6c6f\")'hex '68656c6c6f 'base64 'aGVsbG8= 'utf-8 'hello 'utf-16 'hello 'utf-32 'hello 'ASCII 'hello 'URL 'hello 'ROT13 'uryyb'\n    \"\"\"\n    hex_bytes = binascii.unhexlify(hex_string)\n    encoded_strings = {\n        'hex': hex_string,\n        'base64': base64.b64encode(hex_bytes).decode('utf-8'),\n        'utf-8': hex_bytes.decode('utf-8'),\n        'utf-16': hex_bytes.decode('utf-16'),\n        'utf-32': hex_bytes.decode('utf-32'),\n        'ASCII': hex_bytes.decode('ascii', errors='ignore'),\n        'URL': urllib.parse.quote(hex_bytes.decode('utf-8')),\n        'ROT13': codecs.encode(hex_bytes.decode('utf-8'), 'rot_13')\n    }\n    if encoded_strings['ASCII'] == '':\n        encoded_strings['ASCII'] = 'Not representable in ASCII'\n    return encoded_strings\n\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads tar.gz file from specified URL validates MD5 checksum against expected value. If checksum matches extracts contents Otherwise deletes downloaded file. Parameters: url (str): URL from download tar.gz file. Returns: bool: Returns True if file successfully downloaded MD5 checksum matches expected value extracted. Returns False if checksum match expected value or download fails. Requirements: - urllib.request - hashlib - tarfile - os Example >>> task_func('http://example.com/files.tar.gz') True\n    \"\"\"\n    try:\n        # Download the file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n\n        # Calculate MD5 checksum\n        with open(TARGET_TAR_FILE, 'rb') as f:\n            md5_checksum = hashlib.md5(f.read()).hexdigest()\n\n        # Check if MD5 checksum matches expected value\n        if md5_checksum == EXPECTED_MD5_CHECKSUM:\n            # Extract contents\n            with tarfile.open(TARGET_TAR_FILE, 'r:gz') as tar:\n                tar.extractall()\n                return True\n        else:\n            return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n    finally:\n        # Delete downloaded file\n        os.remove(TARGET_TAR_FILE)\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download CSV file from URL save to specified path count occurrences of each value in column function handles scenarios including missing columns file download errors. Parameters: url (str): URL of CSV file downloaded Must be valid accessible URL. column_name (str): name of column in CSV file values counted function ValueError if column not found. csv_file_path (str): file path where downloaded CSV file saved If file exists at path overwritten. Returns: dict: dictionary mapping values from specified column to corresponding occurrence counts. Raises ValueError: If specified column_name exist in CSV file function delete downloaded file raise ValueError with message \"The provided column_name '{column_name}' not exist in CSV file.\" Requirements: - urllib - os - csv - collections Example: >>> task_func('http://example.com/data.csv', 'category', 'downloaded_data.csv') {'cat1': 5, 'cat2': 3, 'cat3': 8} hypothetical output actual output on CSV data. Notes downloaded CSV file deleted after contents processed function only counts values in specified column ignores other data.\n    \"\"\"\n    try:\n        urllib.request.urlretrieve(url, csv_file_path)\n    except Exception as e:\n        raise ValueError(f\"Error downloading CSV file: {e}\")\n\n    if not os.path.exists(csv_file_path):\n        raise ValueError(f\"CSV file not found at path: {csv_file_path}\")\n\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        if column_name not in reader.fieldnames:\n            raise ValueError(f\"The provided column_name '{column_name}' not exist in CSV file.\")\n\n        counts = collections.Counter(row[column_name] for row in reader)\n\n    os.remove(csv_file_path)\n    return dict(counts)\n\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches parses XML file from URL converts into Pandas DataFrame. Parameters: url (str): URL of CSV file downloaded. Must be valid accessible URL. Returns: pandas.DataFrame DataFrame constructed from parsed XML data Each row corresponds to 'item' element in XML file child elements becoming columns. Raises ValueError error raised in scenarios URL invalid or XML file be fetched XML file invalid syntax. XML structure conform to expected format. Requirements: - urllib - lxml - pandas Examples: Example with valid XML structure >>> df = task_func('http://example.com/sample_data.xml') >>> print(df) name age 0 John 25 1 Jane 30 Example invalid XML structure >>> df = task_func('http://example/invalid_structure.xml') ValueError: XML structure not match expected format.\n    \"\"\"\n    try:\n        # Fetch XML file from URL\n        response = urllib.request.urlopen(url)\n        xml_data = response.read()\n    except Exception as e:\n        raise ValueError(\"Error fetching XML file: \", e)\n\n    try:\n        # Parse XML data\n        root = etree.fromstring(xml_data)\n    except Exception as e:\n        raise ValueError(\"Error parsing XML data: \", e)\n\n    # Check if XML structure is as expected\n    if root.tag != 'data':\n        raise ValueError(\"XML structure not match expected format.\")\n\n    # Extract data from XML and construct DataFrame\n    data = []\n    for item in root.findall('item'):\n        row = {}\n        for child in item:\n            row[child.tag] = child.text\n        data.append(row)\n\n    df = pd.DataFrame(data)\n    return df\n\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads text file from URL processes text frequency each word plots bar chart showing ten most frequently occurring words. Parameters: url (str): URL text file downloaded URL should point to text file. Returns tuple tuple containing two elements Counter object from collections module containing word frequencies text. Axes: matplotlib Axes object represents plotted bar chart ten most common words. function assumes URL points to plain text file not handle binary files non-text content Words identified using basic regular expression case-sensitive function remove common stopwords all words counted as is. Requires internet access to download file URL. Example word_freq, ax = task_func('http://www.example/data.txt') >>> print(word_freq.most_common(5)) [('the', 102), ('of', 76), ('and', 64), ('to', 52), ('in', 41)] Requirements: urllib - re - collections - matplotlib\n    \"\"\"\n    # Download the text file\n    with urllib.request.urlopen(url) as response:\n        text = response.read().decode('utf-8')\n\n    # Process the text\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    stopwords = {'the', 'of', 'and', 'to', 'in', 'is', 'it', 'that', 'for', 'on', 'with', 'a', 'an', 'at', 'by', 'from', 'this', 'that', 'which', 'who', 'what', 'where', 'when', 'how', 'or', 'but', 'not', 'if', 'then', 'else', 'such', 'any', 'all', 'some', 'no', 'yes', 'maybe', 'perhaps', 'probably', 'definitely', 'certainly', 'absolutely', 'obviously', 'clearly', 'unfortunately', 'sadly', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unfortunately', 'unf"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Downloads extracts ZIP file from specified URL to given directory. Parameters: url (str): URL download ZIP should valid accessible URL. download_path (str): directory path where ZIP file downloaded extracted. Defaults to \"mnt/data/downloads/\". Returns - str: Path to directory containing extracted contents. If error occurs descriptive message returned message starts with \"Error: \". If descrption URL not point to ZIP file downloaded file not valid ZIP file \"Unable to download file from provided URL.\". Raises Network Issues or Invalid URL: Returns \"Error: Unable to download file from URL.\" if issues reaching URL or downloading file. Incorrect File Type: Returns \"Error: URL not point to ZIP file.\" if downloaded file content type not 'application/zip'. Corrupt ZIP File: Returns \"Error: downloaded file not valid ZIP file.\" if ZIP corrupt or be extracted. General Exceptions: Catches reports other exceptions runtime errors) process with specific error message formatted as \"Error: [exception message]\". Requirements: - requests - os - zipfile Example >>> task_func('https://example.com/file.zip') 'mnt/data/downloads/file'\n    \"\"\"\n    try:\n        # Download the file\n        response = requests.get(url)\n        if response.status_code != 200:\n            return \"Error: Unable to download file from URL.\"\n        \n        # Check if the content type is 'application/zip'\n        if 'application/zip' not in response.headers['content-type']:\n            return \"Error: URL not point to ZIP file.\"\n        \n        # Save the file\n        file_path = os.path.join(download_path, url.split('/')[-1])\n        with open(file_path, 'wb') as f:\n            f.write(response.content)\n        \n        # Extract the ZIP file\n        try:\n            with ZipFile(file_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"Error: downloaded file not valid ZIP file.\"\n        \n        # Remove the ZIP file\n        os.remove(file_path)\n        \n        # Return the path to the extracted directory\n        return os.path.join(download_path, url.split('/')[-1].split('.')[0])\n    except requests.exceptions.RequestException as e:\n        return \"Error: Unable to download file from URL.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Extracts converts data from HTML table based on 'table_id' webpage into Pandas DataFrame. If table present contains no data rows no <tr> tags), function returns empty DataFrame. Parameters: url (str): URL webpage from extract table. table_id (str): 'id' attribute of HTML table extracted. Returns df (pd.DataFrame): DataFrame containing data extracted from HTML table. If table found no rows (<tr> elements), empty DataFrame returned. Raises requests.exceptions.HTTPError: If HTTP request fails due to connection issues or non-successful status code like 404 or 500). ValueError: If no table with specified 'table_id' found on webpage error message \"Table with specified ID not found.\" Requirements: - requests - bs4.BeautifulSoup - pandas - io Notes function raises HTTPError for unsuccessful HTTP requests network problems non-2xx HTTP responses. ValueError raised when HTML table with specified ID not present in webpage content indicating incorrect ID or absence of table. If table has no rows of <tr> tags, empty DataFrame returned. useful for handling tables structurally present HTML devoid of data. Example: task_func('https://example.com/data.html', 'table1') DataFrame: Name Age 0 Alice 25 1 Bob 30 Example ValueError: task_func(/data 'nonexistent_table') ValueError: Table with specified ID not found.Example empty table task_func('https://example/emptytable.html') DataFrame Empty Columns [] Index: []\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        print (\"HTTP Error:\",errh)\n        return pd.DataFrame()\n    except requests.exceptions.ConnectionError as errc:\n        print (\"Error Connecting:\",errc)\n        return pd.DataFrame()\n    except requests.exceptions.Timeout as errt:\n        print (\"Timeout Error:\",errt)\n        return pd.DataFrame()\n    except requests.exceptions.RequestException as err:\n        print (\"Something went wrong\",err)\n        return pd.DataFrame()\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n    if table is None:\n        raise ValueError(\"Table with specified ID not found.\")\n\n    table_str = str(table)\n    df = pd.read_html(StringIO(table_str))[0]\n    return df\n\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Downloads extracts zip file from specified URL. Parameters: url (str): URL zip file download. filename (str): filename downloaded zip file saved. Returns tuple tuple status message list of filenames in unzipped directory or empty list if extraction fails. status message \"Error\" when Network-related exceptions raised if download fails File-related exceptions if issue with file handling or extraction. Requirements: requests - pathlib.Path - zipfile Example >>> task_func('http://example/myfile.zip',') ('Download extraction successful', ['file1.txt' 'file2.txt'])\n    \"\"\"\n    try:\n        # Download the zip file\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n        with open(DOWNLOAD_DIR / filename, 'wb') as file:\n            file.write(response.content)\n\n        # Extract the zip file\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Get the list of filenames in the unzipped directory\n        unzipped_files = [str(file) for file in ZIP_DIR.iterdir()]\n\n        return ('Download extraction successful', unzipped_files)\n\n    except requests.exceptions.RequestException as e:\n        return ('Error', f'Network-related exception: {e}')\n    except FileNotFoundError as e:\n        return ('Error', f'File-related exception: {e}')\n    except zipfile.BadZipFile as e:\n        return ('Error', f'Bad zip file: {e}')\n    except Exception as e:\n        return ('Error', f'Unexpected error: {e}')\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    function scrapes webpage hyperlinks saves as absolute URLs to CSV file Parameters url (str): relative URL webpage scrape base_url (str optional): base URL website prepend relative links Defaults to 'https://www.example.com' csv_file (str optional): filename CSV file links saved Defaults 'scraped_data.csv' Returns int: number of unique absolute links scraped webpage. Requirements requests urllib.parse.urljoin bs4.BeautifulSoup - csv Examples task_func('/mywebpage') 5 >>> task_func('/anotherpage' base_url='https://www.different' csv_file='other_links.csv') 8\n    \"\"\"\n    # Send HTTP request to the specified URL and save the response from server in a response object called r\n    r = requests.get(urljoin(base_url, url))\n\n    # Parse the HTML content of the page using BeautifulSoup\n    soup = BeautifulSoup(r.text, \"html.parser\")\n\n    # Find all the anchor tags in the parsed HTML\n    tags = soup.find_all(\"a\")\n\n    # Create a set to store unique absolute URLs\n    unique_urls = set()\n\n    # Iterate over the anchor tags\n    for tag in tags:\n        # Get the href attribute of the anchor tag\n        href = tag.get(\"href\")\n\n        # If the href attribute is not None and is not an empty string\n        if href and href != \"#\":\n            # If the href attribute is a relative URL, prepend the base URL\n            if not href.startswith(\"http\"):\n                href = urljoin(base_url, href)\n\n            # Add the absolute URL to the set\n            unique_urls.add(href)\n\n    # Open the CSV file in write mode\n    with open(csv_file, \"w\", newline=\"\") as file:\n        # Create a CSV writer object\n        writer = csv.writer(file)\n\n        # Write the header row\n        writer.writerow([\"URL\"])\n\n        # Write the unique absolute URLs to the CSV file\n        for url in unique_urls:\n            writer.writerow([url])\n\n    # Return the number of unique absolute links scraped\n    return len(unique_urls)\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    function parses HTML table data from URL or local file stores into SQLite database function handles scenarios for fetching processing storing data. Parameters: webpage_url (str): URL of webpage or local file path prefixed with \"file://\". database_name (str): name of SQLite database file data stored. Defaults to \"my_database.db\". Returns: int: number of rows in parsed HTML table. Raises requests.RequestException: exception raised if network issue accessing URL includes connection errors timeouts HTTP errors. sqlite3.DatabaseError: exception raised issues connecting to or writing SQLite database includes invalid database names write permissions SQL execution errors. Notes function to replace table \"my_table\" in SQLite database with new data each time called. If HTML content contain table or table empty function return 0 no rows parsed and stored. function relies on 'requests' 'lxml' 'pandas' 'sqlite3' libraries for. Requirements: - requests - lxml - pandas - sqlite3 Example: >>> num_rows = task_func(\"http://example.com/tabledata\") >>> print(f\"Number of rows parsed: {num_rows}\") Number of rows parsed: 5\n    \"\"\"\n    # Fetch HTML content from webpage or local file\n    try:\n        if webpage_url.startswith(\"file://\"):\n            with open(webpage_url[7:], \"r\") as file:\n                html_content = file.read()\n        else:\n            response = requests.get(webpage_url)\n            response.raise_for_status()\n            html_content = response.text\n    except requests.RequestException as e:\n        print(f\"Error accessing URL: {e}\")\n        return 0\n\n    # Parse HTML content to extract table data\n    try:\n        tree = html.fromstring(html_content)\n        table = tree.xpath(\"//table[@id='my_table']\")[0]\n        table_data = pd.read_html(html.tostring(table))[0]\n    except IndexError:\n        print(\"No table found or table is empty\")\n        return 0\n\n    # Store table data into SQLite database\n    try:\n        conn = sqlite3.connect(database_name)\n        c = conn.cursor()\n        c.execute(\"DROP TABLE IF EXISTS my_table\")\n        table_data.to_sql(\"my_table\", conn, if_exists=\"replace\", index=False)\n        conn.commit()\n        conn.close()\n    except sqlite3.DatabaseError as e:\n        print(f\"Error storing data in SQLite database: {e}\")\n        return 0\n\n    return len(table_data)\n\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens image file extracts text OCR converts text encoding fallback to image comment processing. ValueError UnicodeDecodeError or LookupError during conversion Parameters filename (str): path to image file Defaults global variable 'IMAGE_PATH' from_encoding (str): original encoding extracted text or image comment Default 'cp1251' to_encoding (str): target encoding for converted text or comment Default 'utf8'. Returns comment (str): text extracted from image comment converted to target encoding. If OCR extraction comment processing fail returns empty string. ValueError: incorrect encodings for text or comment conversion. Requirements codecs - - pytesseract Example 'image.png' contains text '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' in Russian (encoded cp1251) text extracted by OCR. text = task_func('image.png', 'cp1251', 'utf8') >>> print(text) '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' output utf-8 encoded version extracted text.\n    \"\"\"\n    try:\n        with Image.open(filename) as img:\n            text = pytesseract.image_to_string(img, lang='rus')\n            text = text.strip()\n            if text:\n                return text\n    except (ValueError, LookupError):\n        pass\n\n    try:\n        with open(filename, \"rb\") as f:\n            comment = f.readline().decode(from_encoding)\n            comment = comment.strip()\n            if comment:\n                return comment\n    except (ValueError, LookupError):\n        pass\n\n    return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from REST API URL processes for JSON parsing process involves decoding re-encoding data handling different encoding scenarios function initiates HTTP GET request to URL with 5-second timeout retrieves response content in raw bytes. Parameters url (str): URL REST API Default is 'http://api.example.com/data'. from_encoding (str optional): original encoding data If None encoding auto-detected Default is None. to_encoding (str): target encoding format for data Default is 'utf8'. Returns dict JSON-parsed data after re-encoding. Returns empty dictionary if content empty. ValueError: \"Unable to detect encoding for non-empty content\", if fails. Requirements: json - requests - chardet Example data = task_func('http://api.example/data') >>> print(data) {'key 'value'} expected output function sets timeout 5 seconds for API request handles cases with empty content undetectable encoding by returning empty dictionary or raising exception decoding re-encoding steps ensure compatibility with various data formats final JSON parsing.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        content = response.content\n        if not content:\n            return {}\n        if from_encoding is None:\n            detected_encoding = chardet.detect(content)[\"encoding\"]\n            if detected_encoding is None:\n                raise ValueError(\"Unable to detect encoding for non-empty content\")\n            from_encoding = detected_encoding\n        content = content.decode(from_encoding, errors=\"replace\")\n        content = content.encode(to_encoding, errors=\"replace\")\n        data = json.loads(content)\n        return data\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching data from {url}: {e}\")\n        return {}\n    except json.JSONDecodeError as e:\n        print(f\"Error parsing JSON from {url}: {e}\")\n        return {}\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads CSV file processes date-related data function performs tasks checking file's existence validating specified date column converting date values to datetime objects filtering rows current date sorting data handles special cases like empty CSV file empty DataFrame raises exceptions for error scenarios like missing files or columns. Parameters: csv_file_path (str): path to CSV file FileNotFoundError raised if path invalid. column_name (str): name column containing date values ValueError if column missing. date_format (str optional): format of date values in specified column. Defaults to '%Y-%m-%d'. Returns - pandas - os - datetime pandas.errors.EmptyDataError Raises FileNotFoundError If CSV file not found at path ValueError: If specified column not present in CSV. Requirements: - pandas - os - datetime Example >>> task_func('path/to/csvfile.csv', 'DateColumn') Date Value 0 2023-12-10 100 1 2023-12-11 150\n    \"\"\"\n    if not os.path.exists(csv_file_path):\n        raise FileNotFoundError(f\"File not found at {csv_file_path}\")\n\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        print(\"The CSV file is empty.\")\n        return\n\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in the CSV file.\")\n\n    df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    df = df[df[column_name] <= datetime.now()]\n    df = df.sort_values(by=column_name)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    function secures client socket using SSL/TLS sends back SHA256 hash of file requested client. Parameters: client_socket (socket.socket): client socket wrapped with SSL/TLS for secure communication cert_file (str): file path to SSL certificate for secure connection. key_file (str): file path to SSL key corresponding certificate. buffer_size (int optional): size buffer receive data client. Defaults to 1024 bytes. Returns str: SHA256 hash of requested file. If requested file exist returns 'File not found'. exception error message returned. Requirements: ssl - os - hashlib function assumes client requests file sending path function handle opening or closing client_socket Error handling basic might need expanded specific use cases. Example: Server setup >>> server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 443)) >>> server_socket.listen(5) >>> cert_file = \"path/to/certificate.crt\" key_file = \"path/to/private.key\" Accept client connection >>> client_socket, addr = server_socket.accept() Use task_func function handle client request >>> file_hash = task_func(client_socket, cert_file, key_file) >>> print(\"Sent file hash:\", file_hash) >>> server_socket.close()\n    \"\"\"\n    try:\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n        context.load_cert_chain(cert_file, key_file)\n        secure_socket = context.wrap_socket(client_socket, server_side=True)\n        \n        request = secure_socket.recv(buffer_size).decode()\n        file_path = request.strip()\n        \n        if os.path.exists(file_path):\n            with open(file_path, 'rb') as file:\n                file_data = file.read()\n                file_hash = hashlib.sha256(file_data).hexdigest()\n                secure_socket.sendall(file_hash.encode())\n                return file_hash\n        else:\n            secure_socket.sendall(\"File not found\".encode())\n            return \"File not found\"\n    except Exception as e:\n        return str(e)\n    finally:\n        secure_socket.close()\n\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run non-blocking echo server appends current time to received data sends back to client handling exceptional conditions for each socket. Parameters: server_address (str): address server listen Default 'localhost'. server_port (int): port listen Default is 12345 buffer_size (int): buffer size for data reception Default 1024 bytes. run_duration (int): duration seconds server run Default is 5 seconds. Returns: str: status message server's operation run duration. Requirements socket - select - queue - datetime Example print(task_func()) 'Server started on localhost:12345 Ran for 5 seconds'\n    \"\"\"\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((server_address, server_port))\n    server_socket.listen(5)\n    server_socket.setblocking(False)\n\n    inputs = [server_socket]\n    outputs = []\n    message_queues = {}\n\n    start_time = datetime.now()\n    end_time = start_time + timedelta(seconds=run_duration)\n\n    while datetime.now() < end_time:\n        readable, writable, exceptional = select.select(inputs, outputs, inputs)\n\n        for s in readable:\n            if s is server_socket:\n                connection, client_address = s.accept()\n                connection.setblocking(False)\n                inputs.append(connection)\n                message_queues[connection] = queue.Queue()\n            else:\n                data = s.recv(buffer_size)\n                if data:\n                    message_queues[s].put(data)\n                    if s not in outputs:\n                        outputs.append(s)\n                else:\n                    if s in outputs:\n                        outputs.remove(s)\n                    inputs.remove(s)\n                    s.close()\n                    del message_queues[s]\n\n        for s in writable:\n            try:\n                next_msg = message_queues[s].get_nowait()\n            except queue.Empty:\n                outputs.remove(s)\n            else:\n                s.send(next_msg)\n                now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                s.send(now.encode())\n\n        for s in exceptional:\n            inputs.remove(s)\n            if s in outputs:\n                outputs.remove(s)\n            s.close()\n            del message_queues[s]\n\n    server_socket.close()\n    return f\"Server started on {server_address}:{server_port} Ran for {run_duration} seconds\"\n\n"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive message from client socket send as email via SMTP server Parameters client_socket (socket.socket): message received. Returns - None Requires working internet connection access SMTP server function asks for sender's email recipient's email sender password for authentication. Requirements smtplib email.message getpass Example import socket server_socket = socket.socket(socket.AF_INET socket.SOCK_STREAM) >>> server_socket.bind((SERVER_ADDRESS, SERVER_PORT)) >>> server_socket.listen(5) >>> client_socket addr = server_socket.accept() >>> task_func(client_socket)\n    \"\"\"\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    sender_email = input(\"Enter your email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    password = getpass.getpass(\"Enter your password: \")\n\n    msg = EmailMessage()\n    msg.set_content(message)\n    msg['Subject'] = 'Test Email'\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(sender_email, password)\n        server.send_message(msg)\n\n    client_socket.close()\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes CSV file containing text data generates histogram of ten common words. function reads CSV file expected single column text data splits text into words creates histogram of frequency top ten common words excluding predefined stopwords. resulting histogram can be displayed on screen or saved to file. CSV file should have single column with header 'Text' Each row under column should contain text string. If CSV file header first column assumed text data. Parameters: - file_path (str): path to input CSV file. save_path (str optional): path where histogram plot saved. If not provided plot displayed on screen. Returns: matplotlib.axes.Axes: Axes object of plot if save_path not provided. Useful for further customization or display in notebooks - None: If save_path provided plot saved to specified path function returns None. Raises - FileNotFoundError: If specified file_path not exist raises FileNotFoundError message file path not found Exception: For other errors during function execution error printed to console None returned. Requirements: - pandas - scikit-learn - matplotlib Notes function uses pandas for data manipulation sklearn's CountVectorizer for text vectorization matplotlib for plotting. predefined list of stopwords used to filter out common but insignificant words from histogram. Examples: >>> ax = task_func('text_data.csv print(ax)(0.125,0.11;0.775x0.77) result task_func(_data.csv 'output_plot print(result) None\n    \"\"\"\n    try:\n        # Read CSV file\n        df = pd.read_csv(file_path)\n        # Check if 'Text' column exists\n        if 'Text' not in df.columns:\n            raise ValueError(\"CSV file must have a 'Text' column\")\n        # Extract text data\n        text_data = df['Text'].values\n        # Initialize CountVectorizer with stopwords\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        # Fit and transform text data\n        X = vectorizer.fit_transform(text_data)\n        # Get feature names (words)\n        feature_names = vectorizer.get_feature_names_out()\n        # Get word counts\n        word_counts = X.sum(axis=0)\n        # Get top ten common words\n        top_ten_words = feature_names[word_counts.argsort()[::-1][:10]]\n        top_ten_counts = word_counts[word_counts.argsort()[::-1][:10]]\n        # Create histogram\n        plt.bar(top_ten_words, top_ten_counts)\n        plt.xlabel('Words')\n        plt.ylabel('Frequency')\n        plt.title('Top Ten Common Words')\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            return plt.gca()\n    except FileNotFoundError:\n        print(f\"File '{file_path}' not found\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create DataFrame with combinations animals foods in 'animal:food' format. Parameters animals (list str optional): animal names If not provided defaults to list common animals including 'Dog 'Cat 'Elephant 'Tiger 'Lion 'Zebra 'Giraffe 'Bear 'Monkey 'Kangaroo' foods (list str optional): list food names If not provided defaults to common foods including 'Meat' 'Fish' 'Grass' 'Fruits 'Insects 'Seeds 'Leaves'. Returns df (pandas.DataFrame): each row represents unique animal 'animals' list each column represents food item 'foods' list Each cell contains string in format 'animal:food'. Handling Special Cases If 'animals' 'foods' lists empty or not provided function returns empty DataFrame If list empty not function uses predefined list for missing parameter. Requirements pandas - numpy - itertools Example animal_food_pairs = task_func(['Dog' 'Cat']'Meat' 'Fish']) >>> print(animal_food_pairs) Meat Fish 0 Dog:Meat Dog:Fish 1 Cat:Meat Cat:Fish function generates combinations of 'animals' 'foods' using itertools.product resulting pairs shuffled randomly to ensure variety in DataFrame layout\n    \"\"\"\n    if animals is None:\n        animals = ['Dog', 'Cat', 'Elephant', 'Tiger', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey', 'Kangaroo']\n    if foods is None:\n        foods = ['Meat', 'Fish', 'Grass', 'Fruits', 'Insects', 'Seeds', 'Leaves']\n\n    animal_food_pairs = list(itertools.product(animals, foods))\n    np.random.shuffle(animal_food_pairs)\n    df = pd.DataFrame(animal_food_pairs, columns=['animals', 'foods'])\n    df['animal:food'] = df['animals'] + ':' + df['foods']\n    df = df.drop(columns=['animals', 'foods'])\n    return df\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference in seconds between timestamps in list after converting to specified timezone. Parameters: time_strings (list str): list of timestamp strings in format 'dd/mm/yy HH:MM:SS.fff'. timezone (str): timezone to timestamp strings should be converted. valid timezone string e. 'America/New_York'. Returns: float: mean (average) time difference in seconds between each timestamps. If less than two timestamps function returns 0.0. Requirements: - datetime - pytz - numpy Notes function converts each timestamp to specified timezone calculates absolute time difference in seconds between each timestamps. If list less than two timestamps function returns 0.0 no pairs to compare. If no time differences single timestamp after timezone conversion), also returns 0.0. function uses numpy's mean function to calculate average time difference. Example: >>> time_strings = ['30/03/09 16:31:32.123', 16:32:33.123' 16:33:34.123'] >>> mean_diff = task_func(time_strings, 'America/New_York') >>> print(mean_diff) 61.0\n    \"\"\"\n    if len(time_strings) < 2:\n        return 0.0\n\n    timezone = pytz.timezone(timezone)\n    time_diffs = []\n\n    for i in range(len(time_strings) - 1):\n        time_string1 = time_strings[i]\n        time_string2 = time_strings[i + 1]\n\n        time_obj1 = datetime.strptime(time_string1, '%d/%m/%y %H:%M:%S.%f')\n        time_obj2 = datetime.strptime(time_string2, '%d/%m/%y %H:%M:%S.%f')\n\n        time_obj1 = timezone.localize(time_obj1)\n        time_obj2 = timezone.localize(time_obj2)\n\n        time_diff = abs((time_obj2 - time_obj1).total_seconds())\n        time_diffs.append(time_diff)\n\n    if not time_diffs:\n        return 0.0\n\n    return np.mean(time_diffs)\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes frequency words text lowercasing removing punctuation splitting words plots top 10 common words. Parameters text (str): input text analyzed Returns list list tuples containing 10 common words counts Axes: matplotlib Axes object bar chart. Requirements re - collections.Counter matplotlib.pyplot Example common_words, ax = task_func( sample text contains words 'text' 'sample' 'words'.\") >>> print(common_words) [('sample', 3), ('text', 3) ('this', 2) ('words', 2) ('is', 1) ('a', 1)'contains', 1)'like', 1) ('and', 1)]\n    \"\"\"\n    # Remove punctuation and convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text).lower()\n    # Split the text into words\n    words = text.split()\n    # Count the frequency of each word\n    word_counts = Counter(words)\n    # Get the top 10 most common words\n    common_words = word_counts.most_common(10)\n    # Plot the top 10 most common words\n    plt.bar([word for word, count in common_words], [count for word, count in common_words])\n    plt.xlabel('Words')\n    plt.ylabel('Frequency')\n    plt.title('Top 10 Common Words')\n    plt.xticks(rotation=45)\n    plt.show()\n    return common_words\n\n"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts URL from string retrieves title web page. If no valid URL found or not result in successful page fetch returns error message. Parameters: myString (str): string from to extract URL. Returns str: title webpage extracted URL if successful otherwise error messages \"No valid URL found string.\" \"Unable to fetch content URL: {url}\" \"No title tag found in webpage.\" Requirements: - re - urllib.parse.urlparse - bs4.BeautifulSoup - requests Example: >>> task_func('Check https://www.google.com') 'Google' >>> task_func('No URL here') 'No valid URL found in string.' task_func('Check broken link: https://www.thisdoesnotexist12345.com') 'Unable to fetch content URL:.com'\n    \"\"\"\n    # Extract URL from string\n    url = re.search(r'https?://\\S+', myString)\n    if url:\n        url = url.group()\n    else:\n        return 'No valid URL found in string.'\n\n    # Retrieve webpage content\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for 4xx or 5xx status codes\n    except requests.exceptions.RequestException as e:\n        return f'Unable to fetch content URL: {url}'\n\n    # Parse webpage content\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # Extract title tag\n    title = soup.title.string\n    if title:\n        return title\n    else:\n        return 'No title tag found in webpage.'\n\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses JSON string find URL associated with specified key downloads file saves with timestamped filename filename format '{unknown_key}_{timestamp}.txt' 'timestamp' formatted as '%Y%m%d%H%M%S%f' date time down to microseconds file saved in specified directory or current working directory default. Parameters: json_data (str): JSON data string contain key linked to URL unknown_key (str): key extract URL from JSON data. save_dir (str optional): directory save downloaded file If not specified file saved in current working directory. Defaults to None. Returns str: absolute path of downloaded file reflecting saved. Requirements: json - requests - os - datetime.datetime Example json_str = '{\"unknown\": \"https://example.com/file.txt\"}' file_path = task_func(json_str, 'unknown') >>> print(f\"Downloaded file saved at: {file_path}\")\n    \"\"\"\n    # Parse JSON data\n    data = json.loads(json_data)\n    \n    # Extract URL from JSON data\n    url = data.get(unknown_key)\n    \n    # Check if URL exists in JSON data\n    if url is None:\n        raise ValueError(f\"Key '{unknown_key}' not found in JSON data.\")\n    \n    # Download file\n    response = requests.get(url)\n    \n    # Check if download was successful\n    if response.status_code != 200:\n        raise ValueError(f\"Failed to download file from URL: {url}\")\n    \n    # Create timestamped filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f\"{unknown_key}_{timestamp}.txt\"\n    \n    # Save file\n    if save_dir is None:\n        save_dir = os.getcwd()\n    file_path = os.path.join(save_dir, filename)\n    with open(file_path, 'wb') as file:\n        file.write(response.content)\n    \n    return file_path\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from URL local file saves to specified file in JSON format Parameters url (str): URL webpage or local file path 'file://' output_path (str): path extracted phone numbers saved JSON format Returns list list strings each representing found phone number Requirements bs4 requests - re - json Example task_func('file:///path/local/file.txt', 'output.json') ['+1 (234) 567 8901', '+44 1234 567890']\n    \"\"\"\n    # Check if the URL is a local file\n    if url.startswith('file://'):\n        with open(url[7:], 'r') as file:\n            html_content = file.read()\n    else:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        html_content = response.text\n\n    # Use BeautifulSoup to parse the HTML content\n    soup = bs4.BeautifulSoup(html_content, 'html.parser')\n\n    # Find all text nodes\n    text_nodes = soup.find_all(text=True)\n\n    # Extract phone numbers using regular expression\n    phone_numbers = re.findall(r'\\+\\d{1,2}\\s?\\(\\d{3}\\)\\s?\\d{3}\\s?\\d{4}', ' '.join(text_nodes))\n\n    # Save the phone numbers to a JSON file\n    with open(output_path, 'w') as file:\n        json.dump(phone_numbers, file)\n\n    return phone_numbers\n"}
