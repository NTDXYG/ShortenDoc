{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download files from specific directory on FTP server using wget subprocess. ftp_server (str): address Default 'ftp.dlptest.com' ftp_user (str): FTP server username Default 'dlpuser' ftp_password (str): FTP password Default 'rNrKYTX9g7z3RgJRmxWuGHbeu' ftp_dir (str): directory path files downloaded Default '/ftp/test'. Returns List[str] list filenames attempted downloaded from FTP server. Raises Exception: failure connecting to FTP server Outputs message \"Failed to connect\" failure logging into FTP server Outputs message \"Failed log into user failure changing to specified directory Outputs message \"Failed to change to directory {ftp_dir} server {str(e)}\" Requirements: subprocess - ftplib - os Example task_func() ['file1.txt' 'file2.jpg' ...]\n    \"\"\"\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(user=ftp_user, passwd=ftp_password)\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(\"Failed to connect\")\n        return []\n    try:\n        filenames = ftp.nlst()\n    except Exception as e:\n        print(\"Failed log into user\")\n        return []\n    try:\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"Failed to change to directory {ftp_dir} server {str(e)}\")\n        return []\n    for filename in filenames:\n        try:\n            local_filename = os.path.join(ftp_dir, filename)\n            with open(local_filename, 'wb') as f:\n                ftp.retrbinary('RETR ' + filename, f.write)\n        except Exception as e:\n            print(f\"Failed to download {filename} server {str(e)}\")\n            continue\n    ftp.quit()\n    return filenames"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute shell commands read from CSV file save outputs in separate files Each command output written to unique file in output directory If command fails error message exit code appended to output file. Parameters commands_file_path (str): Path to CSV file shell commands file headers. output_dir_path (str): Path where outputs commands saved If directory created. Requirements subprocess - csv - os Raises FileNotFoundError: If commands_file_path exist. Returns list of str: paths to output files in directory each named as 'command_X_output.txt' X is command index. If command execution fails output file error message exit code. Example task_func(\"commands.csv\", \"/path/to/output_directory\") [/command_1_output.txt_2_output.txt\n    \"\"\"\n    # Check if commands_file_path exists\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"File not found: {commands_file_path}\")\n\n    # Create output directory if it does not exist\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    # Read commands from CSV file\n    with open(commands_file_path, \"r\") as file:\n        reader = csv.reader(file)\n        commands = list(reader)\n\n    # Execute commands and save outputs\n    output_files = []\n    for i, command in enumerate(commands):\n        output_file_path = os.path.join(output_dir_path, f\"command_{i+1}_output.txt\")\n        output_files.append(output_file_path)\n\n        with open(output_file_path, \"w\") as output_file:\n            try:\n                result = subprocess.run(command, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n                output_file.write(result.stdout)\n            except subprocess.CalledProcessError as e:\n                output_file.write(f\"Error: {e.stderr}\\nExit code: {e.returncode}\")\n\n    return output_files\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if process running name If not running start using name command If running terminate restart executing name command. Parameters process_name (str): name process check manage executable as command Returns str message indicating action \"Process not found. Starting <process_name>.\" \"Process found. Restarting <process_name>.\" Requirements subprocess - psutil time Example task_func('notepad) \"Process not found. Starting notepad.\" task_func \"Process found. Restarting notepad.\"\n    \"\"\"\n    try:\n        # Check if process is running\n        process = psutil.Process(name=process_name)\n        # Terminate process\n        process.terminate()\n        # Wait for process to terminate\n        while process.is_running():\n            time.sleep(0.1)\n        # Start process\n        subprocess.Popen([process_name])\n        return f\"Process found. Restarting {process_name}.\"\n    except psutil.NoSuchProcess:\n        # Start process\n        subprocess.Popen([process_name])\n        return f\"Process not found. Starting {process_name}.\"\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips files subdirectories in directory returns path to created zip file. Parameters: directory (str): path files zipped Returns str path to generated zip file Returns None if directory files FileNotFoundError if directory Requirements - os - glob - zipfile zip name 'files.zip' Example path = task_func('/path/to/files') isinstance(path, str)\n    \"\"\"\n    zip_name = 'files.zip'\n    zip_path = os.path.join(directory, zip_name)\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                file_path = os.path.join(root, file)\n                zipf.write(file_path, os.path.relpath(file_path, directory))\n    return zip_path\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing URLs plot Parameters text (str): analyze Returns WordCloud object generated word cloud ValueError(\"No words generate cloud after removing URLs.\"): no words removing URLs Requirements wordcloud.WordCloud matplotlib.pyplot Example print(task_func'Visit https://www.python.org info Python great love Python'Python' 1.0 'Visit' 0.5 'info' 0.5 'great' 0.5 'love' 0.5'Check link http://www.example Machine learning fascinating'Check 1.0 'link 'Machine' 'learning 1.0 'fascinating' 1.0\n    \"\"\"\n    # Remove URLs from text\n    text = re.sub(r'http\\S+', '', text)\n    # Generate word cloud\n    wordcloud = WordCloud().generate(text)\n    # Plot word cloud\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()\n    return wordcloud\n\nThe task function `task_func` is designed to create a word cloud from a given text after removing URLs. It uses the `wordcloud` library to generate the word cloud and `matplotlib.pyplot` to display it.\n\nHere's a step-by-step explanation of the function:\n\n1. The function takes a single argument `text`, which is a string containing the text to be analyzed.\n\n2. The function uses a regular expression (`re.sub`) to remove all URLs from the text. The regular expression `http\\S+` matches any string that starts with \"http\" followed by one or more non-whitespace characters.\n\n3. The function then generates a word cloud from the cleaned text using the `WordCloud().generate(text)` method. This method creates a word cloud object based on the text.\n\n4. The function displays the generated word cloud using `plt.imshow(wordcloud, interpolation='bilinear')`. This line of code displays the word cloud on a matplotlib plot with bilinear interpolation.\n\n5. The function hides the axes of the plot using `plt.axis('off')`.\n\n6. The function displays the plot using `plt.show()`.\n\n7. Finally, the function returns the generated word cloud object.\n\nThe function raises a `ValueError` if no words are generated after removing URLs. This is checked by the condition `if len(wordcloud.words_) == 0`, which checks if the word cloud object has any words. If the word cloud object has no words, the function raises a `ValueError` with the message \"No words generate cloud after removing URLs.\".\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train random forest classifier dataframe column interest plot bar plot feature importance xlabel plot 'Feature Importance Score' ylabel 'Features' title 'Visualizing Important Features' Sort feature importances descending order Use feature importances x-axis names y-axis Parameters df (pandas.DataFrame) Dataframe data classify target_column (str) Name target column Returns sklearn.model.RandomForestClassifier trained input data matplotlib.axes.Axes Axes object plotted data Requirements pandas sklearn.ensemble seaborn matplotlib.pyplot import pandas pd data = pd.DataFrame({\"X\" : [-1, 3, 5, -4, 7, 2] \"label\" [0, 1, 1, 1 1]}) model ax = task_func(data \"label\") print(data.head(2)) X label 0 -1 0 1 3 1 print(model) RandomForestClassifier(random_state=42)\n    \"\"\"\n    # Split the data into features and target\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    # Train the random forest classifier\n    model = RandomForestClassifier(random_state=42)\n    model.fit(X, y)\n\n    # Get the feature importances\n    importances = model.feature_importances_\n\n    # Create a dataframe of feature importances\n    feature_importances = pd.DataFrame({'feature': X.columns, 'importance': importances})\n\n    # Sort the feature importances in descending order\n    feature_importances = feature_importances.sort_values('importance', ascending=False)\n\n    # Plot the feature importances\n    ax = sns.barplot(x='importance', y='feature', data=feature_importances)\n    ax.set_xlabel('Feature Importance Score')\n    ax.set_ylabel('Features')\n    ax.set_title('Visualizing Important Features')\n\n    return model, ax\n\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates Flask application user authentication Flask-Login defines routes login logout protected page user authentication managed simple User class login form Flask-WTF application uses dynamic configuration security template rendering Parameters secret_key secret key application session management template_folder path directory Flask templates Requirements flask_login_wtf wtforms.validators werkzeug.security Returns Flask application instance configured user authentication Examples app = task_func('mysecretkey' 'templates') 'login' [rule.endpoint app.url_map.iter_rules() True app.config['SECRET_KEY'] 'mysecretkey' True\n    \"\"\"\n    app = Flask(__name__)\n    app.config['SECRET_KEY'] = secret_key\n    app.config['TEMPLATES_AUTO_RELOAD'] = True\n    app.config['TEMPLATES_FOLDER'] = template_folder\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n    login_manager.login_message = 'Please log in to access this page.'\n    login_manager.login_message_category = 'info'\n    login_manager.needs_refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.needs_refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session_protection = 'strong'\n    login_manager.subdomain_matching = False\n    login_manager.unauthorized_callback = None\n    login_manager.refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session_protection = 'strong'\n    login_manager.subdomain_matching = False\n    login_manager.unauthorized_callback = None\n    login_manager.refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session_protection = 'strong'\n    login_manager.subdomain_matching = False\n    login_manager.unauthorized_callback = None\n    login_manager.refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session_protection = 'strong'\n    login_manager.subdomain_matching = False\n    login_manager.unauthorized_callback = None\n    login_manager.refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session_protection = 'strong'\n    login_manager.subdomain_matching = False\n    login_manager.unauthorized_callback = None\n    login_manager.refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session_protection = 'strong'\n    login_manager.subdomain_matching = False\n    login_manager.unauthorized_callback = None\n    login_manager.refresh_message = 'Your session has expired. Please log in again.'\n    login_manager.refresh_message_category = 'info'\n    login_manager.refresh_view = 'login'\n    login_manager.session"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies removes outliers from column dataset based on Z-score standardizes column calculates Z-scores removes Z-score exceeds threshold visualizes data before after outlier removal Parameters data dataset column index for outliers outlier_z_score Z-score threshold outliers Returns tuple original data data without outliers indices outliers. Requirements numpy matplotlib.pyplot scipy.stats sklearn.preprocessing.StandardScaler function plots two plots 'Data with Outliers' shows original data outliers 'Data without Outliers' displays data after removing outliers Z-score threshold visual comparison impact outlier removal on dataset. Examples data = np.array([[14, 25], [1, 22] [7, 8] [100, 200]]) column = 1 len(task_func(data, column, 3.0)) 3 isinstance(task_func(data column 3.0) np.ndarray) True isinstance(task_func(data True)[2] tuple True\n    \"\"\"\n    # Standardize the column\n    scaler = StandardScaler()\n    data[:, column] = scaler.fit_transform(data[:, column].reshape(-1, 1)).flatten()\n\n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(data[:, column]))\n\n    # Identify outliers\n    outliers = np.where(z_scores > outlier_z_score)[0]\n\n    # Remove outliers\n    data_without_outliers = np.delete(data, outliers, axis=0)\n\n    # Plot the data with outliers\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.scatter(data[:, 0], data[:, column], label='Data with Outliers')\n    plt.title('Data with Outliers')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.legend()\n\n    # Plot the data without outliers\n    plt.subplot(1, 2, 2)\n    plt.scatter(data_without_outliers[:, 0], data_without_outliers[:, column], label='Data without Outliers')\n    plt.title('Data without Outliers')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.legend()\n\n    plt.tight_layout()\n    plt.show()\n\n    return data, data_without_outliers, outliers\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    K-means clustering dataset generate scatter plot visualizing clusters centroids Parameters data (pd.DataFrame): dataset clustered rows samples columns features n_clusters number clusters greater than 1. Defaults 3. Returns np.ndarray cluster labels sample plt.Axes Axes object plot showing clusters centroids ValueError 'data not pd.DataFrame 'n_clusters not integer greater than 1. Requirements numpy pandas matplotlib - sklearn Example np.random.seed(42) data = pd.DataFrame(np.random.rand(100, 2) columns=['Feature1 'Feature2']) ax = task_func(data, 3) ax.get_title( 'K-Means Clustering'\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('data not pd.DataFrame')\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError('n_clusters not integer greater than 1')\n    \n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    \n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='viridis')\n    ax.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X', s=200, alpha=0.5)\n    ax.set_title('K-Means Clustering')\n    \n    return ax\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Principal Component Analysis dataset record result generates scatter plot transformed data Parameters data dataset n_components number principal components calculate Default 2. Returns DataFrame transformed data principal components Axes matplotlib Axes object plot ValueError n_components not positive integer Requirements numpy pandas matplotlib.pyplot sklearn.decomposition Example data = pd.DataFrame([[14, 25] [1, 22] [7, 8]] columns'Column1 transformed_data plot task_func(data)\n    \"\"\"\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n    transformed_data = pd.DataFrame(transformed_data, columns=[f'PC{i+1}' for i in range(n_components)])\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data['PC1'], transformed_data['PC2'])\n    ax.set_xlabel('PC1')\n    ax.set_ylabel('PC2')\n    ax.set_title('PCA')\n    return transformed_data, ax\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws seaborn pair plot iris dataset Arial font function sets global font to Arial better readability visual appeal generates pair plot iris dataset each subplot represents relationship two features colored by species plot includes title 'Iris Dataset Pair Plot' labels each feature axes Parameters None Returns plt.Figure matplotlib Figure object seaborn pair plot iris dataset plot 'Iris Dataset Pair Plot' title subplot axes labeled feature names 'sepal length width Requirements matplotlib.pyplot - pandas - seaborn sklearn.datasets Example = task_func() type(fig) <class 'matplotlib.figure.Figure'\n    \"\"\"\n    # Load iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target\n\n    # Set global font to Arial\n    plt.rcParams['font.family'] = 'Arial'\n\n    # Generate pair plot\n    fig = sns.pairplot(df, hue='species')\n\n    # Add title\n    fig.fig.suptitle('Iris Dataset Pair Plot', fontsize=16, y=1.02)\n\n    # Add labels to each feature axis\n    for ax in fig.axes.flatten():\n        ax.set_xlabel(ax.get_xlabel(), fontsize=12)\n        ax.set_ylabel(ax.get_ylabel(), fontsize=12)\n\n    return fig\n\nfig = task_func()\nplt.show()"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates plot random time series data past 30 days reproducibility controlled optional seed parameter plot styled Arial font readability. Parameters seed optional): random number generator reproducibility Defaults 42 Returns matplotlib.axes.Axes Axes object line plot time series data plot 'Date' x-axis 'Value' y-axis 'Random Time Series Data' title. ValueError issue generating data plot. Requirements matplotlib.pyplot - pandas - random datetime Example ax = task_func().get_title( 'Random Time Series Data'.get_xlabel( 'Date'.get_ylabel( 'Value'\n    \"\"\"\n    random.seed(seed)\n    df = pd.DataFrame({\n        'Date': pd.date_range(start=datetime.now(), periods=30, freq='D'),\n        'Value': [random.randint(1, 100) for _ in range(30)]\n    })\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df['Value'])\n    ax.set_title('Random Time Series Data', fontname='Arial')\n    ax.set_xlabel('Date', fontname='Arial')\n    ax.set_ylabel('Value', fontname='Arial')\n    return ax\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw correlation heatmap Boston Housing dataset Seaborn option save specified file Parameters seed optional): Random seed reproducibility Defaults 42. font sans-serif Arial Returns matplotlib.axes.Axes Axes object heatmap plot Raises ValueError error generating saving plot Requirements matplotlib - os - pandas seaborn numpy Example ax = task_func() type(ax) <class 'matplotlib.axes..Axes'\n    \"\"\"\n    # Load the dataset\n    data = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    data.columns = [\n        \"CRIM\",\n        \"ZN\",\n        \"INDUS\",\n        \"CHAS\",\n        \"NOX\",\n        \"RM\",\n        \"AGE\",\n        \"DIS\",\n        \"RAD\",\n        \"TAX\",\n        \"PTRATIO\",\n        \"B\",\n        \"LSTAT\",\n        \"MEDV\",\n    ]\n\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate a random dataset\n    random_data = np.random.rand(100, 10)\n\n    # Create a correlation matrix\n    corr_matrix = data.corr()\n\n    # Create a heatmap\n    ax = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n\n    # Set the title\n    ax.set_title(\"Correlation Heatmap\")\n\n    # Save the plot to a file\n    ax.figure.savefig(\"correlation_heatmap.png\")\n\n    return ax"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes time series 'value' column DataFrame into trend seasonality residuals Parameters: df (DataFrame): with columns 'group' 'date' 'value'. freq (str optional): Frequency time series data Defaults to 'D' (daily). decomposition_model (str optional): Type decomposition model Options 'additive' or 'multiplicative' Defaults to 'multiplicative'. Returns tuple containing decomposition result (DecomposeResult object) matplotlib Axes object. ValueError: If 'df' not DataFrame lacks required columns contains invalid data types 'freq' not valid frequency string 'decomposition_model' not 'additive' or 'multiplicative'. Requirements: - pandas - matplotlib.pyplot - statsmodels.tsa.seasonal Example df = pd.DataFrame( \"group\" [\"A\"] * 14 \"date\" pd.to_datetime( \"value\": [10, 12 13, 15 17, 16 14 18 20 19] result, ax = task_func(df, freq='D' decomposition_model='multiplicative') plt.show() plot with title 'Time Series Decomposition' y-axis labeled 'Value'\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"df must contain columns 'group', 'date', and 'value'\")\n    if not isinstance(freq, str):\n        raise ValueError(\"freq must be a string\")\n    if freq not in ['D', 'W', 'M', 'Q', 'A']:\n        raise ValueError(\"freq must be a valid frequency string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"decomposition_model must be 'additive' or 'multiplicative'\")\n    if not all(df['date'].dtype == 'datetime64[ns]' for df in df.groupby('group')):\n        raise ValueError(\"date column must be of datetime64[ns] type\")\n    if not all(df['value'].dtype in [float, int] for df in df.groupby('group')):\n        raise ValueError(\"value column must be of float or int type\")\n    \n    result = []\n    for group in df['group'].unique():\n        group_df = df[df['group'] == group]\n        group_df = group_df.set_index('date')\n        decomposition = seasonal_decompose(group_df['value'], model=decomposition_model, period=freq)\n        result.append(decomposition)\n    \n    fig, ax = plt.subplots(figsize=(10, 6))\n    for i, group in enumerate(df['group'].unique()):\n        group_df = df[df['group'] == group]\n        group_df = group_df.set_index('date')\n        decomposition = seasonal_decompose(group_df['value'], model=decomposition_model, period=freq)\n        ax.plot(group_df.index, group_df['value'], label=f'{group} Original')\n        ax.plot(decomposition.trend.index, decomposition.trend, label=f'{group} Trend')\n        ax.plot(decomposition.seasonal.index, decomposition.seasonal, label=f'{group} Seasonality')\n        ax.plot(decomposition.resid.index, decomposition.resid, label=f'{group} Residuals')\n    \n    ax.set_title('Time Series Decomposition')\n    ax.set_ylabel('Value')\n    ax.legend()\n    \n    return result, ax\n"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate pandas Series random dates specified date range including start end_date optional seed for reproducibility function creates series dates randomly selected between start end dates allows specifying seed for random number generator reproducible results suitable for simulations tests consistency Parameters start_date start range Defaults to January 1, 2020. end_date end range to December 31, 2020. seed optional): Seed for random number generator reproducibility Default 42. Returns pandas.Series Series object containing random dates specified range each date datetime object series length matches number days specified range. Raises ValueError: 'start_date 'end_date not datetime instance or later than_date start_date end_date inclusive both potential values series default seed value 42 results reproducible default unless different seed specified user. Requirements pandas datetime random Example dates = task_func(seed=123) print(dates.head()) Prints first 5 dates series 0 2020-01-27 1 2020-05-17 2 2020-02-14 3 2020-07-27 4 2020-05-16 datetime64\n    \"\"\"\n    random_seed(seed)\n    dates = pd.Series(pd.date_range(start=start_date, end=end_date))\n    random_dates = dates.sample(frac=1).reset_index(drop=True)\n    return random_dates\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify list adding element '12' concatenate CSV files into DataFrame number files concatenated determined by sum numbers list Parameters my_list input list modified place file_dir optional): directory search for CSV files. Defaults './data_files/' file_ext optional): file extension files concatenate Defaults '.csv' Returns DataFrame pandas DataFrame concatenating data selected CSV files TypeError 'my_list' not list FileNotFoundError no files found specified directory. Requirements - pandas - os - glob Example create_dummy_csv() my_list = [1, 2, 3] df = task_func(my_list) print(df.head()) 3 1 1 4 4 tearDown_dummy()\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' not list\")\n    my_list.append('12')\n    file_paths = glob.glob(os.path.join(file_dir, f'*{file_ext}'))\n    if not file_paths:\n        raise FileNotFoundError(f\"No files found in {file_dir} with extension {file_ext}\")\n    df_list = [pd.read_csv(file_path) for file_path in file_paths]\n    return pd.concat(df_list)\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list' appending number 12 generates list random integers based on sum elements limited by 'size' measures time plots histogram of generated numbers size determined by sum numbers 'my_list' upper limit set by 'size' random integers range 1 to 100 inclusive. Parameters my_list input list containing numeric elements size Maximum size limit for generated list Default is 100 seed (int): Seed value for random number generator reproducibility Default 100. Returns tuple containing time to generate list seconds matplotlib Axes object for histogram x-axis labeled 'Number' range random integers y-axis labeled 'Frequency' frequency each integer. Raises TypeError: If 'my_list' not list ValueError: If contains elements not numeric histogram plots distribution of random numbers generated number range (1-100) on x-axis count (frequency) of each number on y-axis. Requirements random time - matplotlib.pyplot Example my_list = [2, 3, 5] >>> time_taken ax = task_func(my_list) >>> print(type(time_taken)) Example output <class 'float' ax.get_title() Returns 'Histogram of Random Numbers'\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"Input must be a list\")\n    if not all(isinstance(i, (int, float)) for i in my_list):\n        raise ValueError(\"List must contain only numeric elements\")\n    if not isinstance(size, int) or size <= 0:\n        raise ValueError(\"Size must be a positive integer\")\n    if not isinstance(seed, int):\n        raise ValueError(\"Seed must be an integer\")\n    random_seed(seed)\n    my_list.append(12)\n    total = sum(my_list)\n    if total > size:\n        raise ValueError(\"Sum of list elements exceeds size limit\")\n    random_numbers = [randint(1, 100) for _ in range(total)]\n    time_taken = time.time()\n    ax = plt.hist(random_numbers, bins=range(1, 101), edgecolor='black')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Random Numbers')\n    return time_taken, ax\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape first table web page extract data into Pandas DataFrame function scrapes first table web page URL extracts data into DataFrame each row corresponds to table row<tr> each column represents data within table elements<td> DataFrame columns named after table header row<th> if present If table lacks headers columns remain unnamed Parameters url (str): URL webpage to scrape Defaults 'http://example' Returns pd.DataFrame containing scraped table data rows corresponding table rows columns named after table headers if available Raises ConnectionError issue connecting URL requests.HTTPError request fails ValueError no table data found page content parsed Assumes webpage contains one table attempts parse first table. Requirements - pandas - requests - bs4 Example >>> df = task_func('https://en.wikipedia/List_of_countries_by_GDP_(nominal)) >>> print(df) 0 0 1 Largest economies by GDP (nominal...\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        raise ConnectionError(f\"Error connecting to {url}: {e}\")\n\n    soup = BeautifulSoup(response.content, 'html.parser')\n    table = soup.find('table')\n\n    if table is None:\n        raise ValueError(\"No table data found on page\")\n\n    headers = [header.text.strip() for header in table.find_all('th')]\n    rows = []\n    for row in table.find_all('tr'):\n        cols = row.find_all('td')\n        cols = [col.text.strip() for col in cols]\n        rows.append(cols)\n\n    df = pd.DataFrame(rows, columns=headers)\n    return df\n\nThe `task_func` function is designed to scrape the first table from a given webpage and return the data in a Pandas DataFrame. The function takes a single argument, `url`, which is the URL of the webpage to scrape. If no URL is provided, it defaults to 'http://example.com'.\n\nThe function first makes a GET request to the URL using the `requests` library. If the request is successful, it parses the HTML content of the page using BeautifulSoup. It then searches for the first table on the page and extracts the data from it.\n\nThe function assumes that the table has headers in the first row, and it uses these headers to name the columns of the DataFrame. If the table does not have headers, the columns of the DataFrame will remain unnamed.\n\nThe function returns a Pandas DataFrame containing the data from the table. Each row in the DataFrame corresponds to a row in the table, and each column corresponds to a data element within a table cell.\n\nHere is an example of how to use the function:\n\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw histograms numeric columns DataFrame return plots Each histogram represents distribution values one column column name plot title 'Value x-axis label 'Frequency y-axis label Parameters df (DataFrame): containing data Returns list Matplotlib Axes objects each representing histogram numeric column Raises ValueError input not non-empty DataFrame no numeric columns Requirements pandas numpy matplotlib.pyplot Example df = pd.DataFrame({'A' np.normal(0, 1, 100), 'B' np.exponential(1, 100)}) axes = task_func(df) ax axes plt.show()\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if not df.select_dtypes(include=[np.number]).empty:\n        raise ValueError(\"Input DataFrame has no numeric columns\")\n    \n    axes = []\n    for column in df.select_dtypes(include=[np.number]).columns:\n        ax = df[column].hist()\n        ax.set_title(f\"Value of {column}\")\n        ax.set_xlabel(\"Frequency\")\n        ax.set_ylabel(\"Value\")\n        axes.append(ax)\n    \n    return axes\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans IP range checks if port open each returns dictionary with IP addresses keys boolean port status (True if open False Parameters ip_range IP address range scan CIDR notation port (int): port number Returns dict dictionary mapping IP addresses to port status (True if open). Examples result = task_func('192.168.0.0/24', 80) isinstance(result,) True all(isinstance(key str)(value bool) result.items() True Requirements socket ipaddress.IPv4Network threading\n    \"\"\"\n    result = {}\n    for ip in IPv4Network(ip_range):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            sock.connect((str(ip), port))\n            result[str(ip)] = True\n            sock.close()\n        except:\n            result[str(ip)] = False\n    return result\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information message type timestamp from log file stores in CSV format utility converting text logs into tructured format log format 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE' Parameters: log_file (str): path to log file parsed Returns str path to newly created CSV file structured log data Requirements - re - pandas datetime ValueError: timestamp invalid or no valid log entries found Example output_path = task_func('server.log') >>> print(output_path) log_data.csv\n    \"\"\"\n    # Create a regular expression pattern to match the log format\n    pattern = r\"(\\w+): \\[(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (.*)\"\n\n    # Open the log file and read its contents\n    with open(log_file, 'r') as file:\n        log_data = file.read()\n\n    # Use the regular expression pattern to find all matches in the log data\n    matches = re.findall(pattern, log_data)\n\n    # Create a list of dictionaries to store the extracted log data\n    log_entries = []\n    for match in matches:\n        # Extract the message type, timestamp, and message from the match\n        message_type, timestamp, message = match\n\n        # Convert the timestamp to a datetime object\n        try:\n            timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')\n        except ValueError:\n            # If the timestamp is invalid, skip this log entry\n            continue\n\n        # Add the log entry to the list of log entries\n        log_entries.append({'message_type': message_type, 'timestamp': timestamp, 'message': message})\n\n    # Create a DataFrame from the list of log entries\n    df = pd.DataFrame(log_entries)\n\n    # Sort the DataFrame by timestamp\n    df = df.sort_values('timestamp')\n\n    # Save the DataFrame to a CSV file\n    output_path = 'log_data.csv'\n    df.to_csv(output_path, index=False)\n\n    return output_path\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes visualizes distribution word lengths text function generates histogram subplot facilitates understanding word lengths text Parameters: text (str): string word lengths calculated. rwidth (float optional): relative bar histogram Defaults to 0.8 Returns matplotlib.axes.Axes Axes object containing histogram word lengths. Requirements - re matplotlib - numpy no words input text or words filtered histogram empty no bins created. Example import matplotlib >>> ax = task_func( test sentence. >>> isinstance(ax, matplotlib.axes.Axes)\n    \"\"\"\n    # Extract words from text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Calculate word lengths\n    word_lengths = [len(word) for word in words]\n\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(word_lengths, bins=np.arange(1, max(word_lengths) + 2), rwidth=rwidth)\n\n    # Set labels and title\n    ax.set_xlabel('Word Length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Distribution of Word Lengths')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Extracts articles titles case-insensitive keywords from DataFrame analyzes frequency each word excluding punctuation Parameters df (DataFrame): DataFrame columns 'Title' 'Content' article data Returns dictionary keys words values frequency excluding punctuation marks Requirements re - nltk string ValueError DataFrame empty or contain columns 'Title' 'Content' Example import pandas as pd data = {'Title''What happening 'Nothing special 'Content''Like normal text. df = pd.DataFrame(data) >>> task_func(df) {'Like': 1 'what': 1 'you': 1 'see': 1\n    \"\"\"\n    if df.empty or 'Title' not in df.columns or 'Content' not in df.columns:\n        raise ValueError('DataFrame empty or contain columns \"Title\" \"Content\"')\n    keywords = {}\n    for title, content in zip(df['Title'], df['Content']):\n        title = title.lower()\n        content = content.lower()\n        words = re.findall(r'\\b\\w+\\b', title + ' ' + content)\n        for word in words:\n            if word not in punctuation:\n                if word in keywords:\n                    keywords[word] += 1\n                else:\n                    keywords[word] = 1\n    return keywords\n\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares transforms text data from column in DataFrame removing stopwords numbers punctuation applying vectorization process convert text into numeric format for analysis. Parameters dataframe pandas DataFrame containing text data text_column (str): name of column text processed Returns DataFrame Returns DataFrame with each word preprocessing as column count as rows. Requirements: - pandas - re - sklearn Example df = pd.DataFrame({'text' test 'Python cool 'nltk sklearn useful for text analysis) result = task_func(df, 'text') print(result.to_string(index=False)) analysis cool nltk python sklearn test text useful\n    \"\"\"\n    # Remove punctuation\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'[^\\w\\s]', '', x))\n\n    # Convert to lowercase\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: x.lower())\n\n    # Remove stopwords\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n\n    # Vectorization\n    vectorizer = CountVectorizer()\n    X = vectorizer.fit_transform(dataframe[text_column])\n    feature_names = vectorizer.get_feature_names_out()\n    df = pd.DataFrame(X.toarray(), columns=feature_names)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create GeoPandas DataFrame cities randomly generated coordinates ranges Parameters dic Dictionary 'Lon' 'Lat' keys tuple (min max) coordinate range Default'Lon' (-180, 'Lat' (-90, 90) cities city names Default'New York 'London 'Beijing 'Tokyo 'Sydney Returns GeoDataFrame GeoPandas DataFrame 'City' 'Coordinates ValueError 'Lon' 'Lat' keys missing values not tuples. Requirements numpy geopandas shapely.geometry Example dic {'Lon' (-180, 180), 'Lat' (-90, 90)} gdf task_func(dic)\n    \"\"\"\n    if 'Lon' not in dic or 'Lat' not in dic:\n        raise ValueError(\"'Lon' 'Lat' keys missing values not tuples.\")\n    if not isinstance(dic['Lon'], tuple) or not isinstance(dic['Lat'], tuple):\n        raise ValueError(\"'Lon' 'Lat' keys missing values not tuples.\")\n    if len(dic['Lon']) != 2 or len(dic['Lat']) != 2:\n        raise ValueError(\"'Lon' 'Lat' keys missing values not tuples.\")\n    if not isinstance(cities, list):\n        raise ValueError(\"cities must be a list.\")\n    if not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"cities must be a list of strings.\")\n    if len(cities) == 0:\n        raise ValueError(\"cities must not be an empty list.\")\n    gdf = gpd.GeoDataFrame(columns=['City', 'Coordinates'])\n    for city in cities:\n        lon = np.random.uniform(dic['Lon'][0], dic['Lon'][1])\n        lat = np.random.uniform(dic['Lat'][0], dic['Lat'][1])\n        point = Point(lon, lat)\n        gdf = gdf.append({'City': city, 'Coordinates': point}, ignore_index=True)\n    return gdf\n"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Generate weather report cities UTC datetime Parameters utc_datetime UTC datetime report tzinfo set UTC cities (list weather report generated Default'New York 'London 'Beijing 'Tokyo 'Sydney' weather_conditions weather conditions Default'Sunny 'Cloudy 'Rainy 'Snowy 'Stormy' timezones mapping city names to timezones Default cities seed value random number generation reproducibility Default: 42 Returns pandas.DataFrame weather report Columns 'City' name city 'Local Time' local time weather report 'YYYY-MM-DD HH:MM:SS ZZZ' timezone 'Weather Condition' weather condition local time ValueError: utc_datetime not datetime object or other parameters not in expected format. Requirements pandas - pytz - datetime - random Example utc_time = datetime(2023, 1, 1 12, 0 tzinfo=pytz.UTC) report = task_func(utc_time) print(report) City Local Time Weather Condition 0 New York 2023-01-01 07:00:00 EST Sunny 1 London 2023-01-01 12:00:00 GMT Sunny 2 Beijing 20:00:00 CST Rainy 3 Tokyo 21:00:00 JST Cloudy 4 Sydney 2023-01-01 23:00:00 AEDT Cloudy\n    \"\"\"\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n    if not isinstance(cities, list):\n        raise ValueError(\"cities must be a list\")\n    if not isinstance(weather_conditions, list):\n        raise ValueError(\"weather_conditions must be a list\")\n    if not isinstance(timezones, dict):\n        raise ValueError(\"timezones must be a dict\")\n    if not isinstance(seed, int):\n        raise ValueError(\"seed must be an int\")\n    \n    set_seed(seed)\n    \n    report = []\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"City {city} not found in timezones\")\n        if city not in weather_conditions:\n            raise ValueError(f\"City {city} not found in weather_conditions\")\n        \n        local_tz = pytz.timezone(timezones[city])\n        local_time = utc_datetime.astimezone(local_tz)\n        \n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        \n        report.append({\n            'City': city,\n            'Local Time': local_time.strftime('%Y-%m-%d %H:%M:%S %Z'),\n            'Weather Condition': weather_condition\n        })\n    \n    return pd.DataFrame(report)\n"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate draw random sequence steps steps -1 or 1 plotted random walk Returns descriptive statistics walk plot include count mean standard deviation minimum 5th percentile 25th median 75th 95th percentile maximum Parameters elements number steps random walk seed random number generator Default 0 Returns dictionary containing descriptive statistics walk matplotlib.axes.Axes Axes object plotted random walk Requirements numpy matplotlib.pyplot pandas ValueError elements not positive integer Example stats ax = task_func(1000) print(stats) {'count' 1000.0 'mean' 18.18 'std' 9.516415405086212 'min' -5.0 '5%' 1.0 '25%' 11.0 '50% 20.0 '75% 26.0 '95% 31.0 'max' 36.0\n    \"\"\"\n    np.random.seed(seed)\n    walk = np.random.choice([-1, 1], size=elements)\n    stats = {\n        \"count\": len(walk),\n        \"mean\": np.mean(walk),\n        \"std\": np.std(walk),\n        \"min\": np.min(walk),\n        \"5%\": np.percentile(walk, 5),\n        \"25%\": np.percentile(walk, 25),\n        \"50%\": np.percentile(walk, 50),\n        \"75%\": np.percentile(walk, 75),\n        \"95%\": np.percentile(walk, 95),\n        \"max\": np.max(walk),\n    }\n    ax = plt.plot(walk)\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download keep zip file URL extract contents specified directory return list extracted files Parameters url URL zip file download destination_directory directory contents zip file extracted headers optional): Custom headers request Defaults to'accept 'application/octet-stream' Returns list filenames extracted files Requirements requests - os - zipfile Example extracted_files = task_func(\"https://example/data.zip\", \"/path/to/destination\") print(extracted_files) ['file1.txt 'file2.csv'\n    \"\"\"\n    if headers is None:\n        headers = {'accept': 'application/octet-stream'}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        with open(os.path.join(destination_directory, 'data.zip'), 'wb') as f:\n            f.write(response.content)\n        with zipfile.ZipFile(os.path.join(destination_directory, 'data.zip'), 'r') as zip_ref:\n            zip_ref.extractall(destination_directory)\n        extracted_files = os.listdir(destination_directory)\n        return extracted_files\n    else:\n        raise Exception(f\"Failed to download zip file. Status code: {response.status_code}\")\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate random RGB image view Parameters seed optional): Random reproducibility Default 42. image_size optional): Size generated image (height channels). Default (100, 100, 3) range_low optional): Lower bound range Default 0. range_high Upper bound range Default 255. Returns ax (matplotlib.axes Axes object plot image (numpy.ndarray): numpy array generated image ValueError range_low not less than range_high Requirements random numpy opencv matplotlib.pyplot Example ax image = task_func()\n    \"\"\"\n    if range_low >= range_high:\n        raise ValueError(\"range_low must be less than range_high\")\n    np.random.seed(seed)\n    image = np.random.randint(range_low, range_high, image_size, dtype=np.uint8)\n    ax = plt.imshow(image)\n    return ax\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates MxN matrix from list L normalizes sound pressure level (SPL audio file generates spectrogram. Parameters: L (list): numbers M rows N columns audio_file path to audio file for SPL calculation Returns numpy.ndarray normalized MxN matrix. matplotlib.figure.Figure figure object for generated spectrogram FileNotFoundError audio file exist spectrogram generated on amplitude normalized matrix sound pressure level (SPL) calculated from audio file SPL calculated formula SPL = 20 * log10(sqrt(mean(data^2))) 'data' audio data read from file spectrogram displayed with logarithmic scale for frequency linear scale for time SPL amplitude. Requirements: numpy - os - soundfile - librosa - matplotlib Examples matrix = task_func([i range(100)], 10, 10, 'audio.wav') Requires 'audio.wav' exist matrix.shape (10, 10) >>> isinstance(matrix, np.ndarray)\n    \"\"\"\n    # Check if audio file exists\n    if not os.path.isfile(audio_file):\n        raise FileNotFoundError(f\"Audio file '{audio_file}' does not exist.\")\n    \n    # Load audio file\n    data, sr = librosa.load(audio_file)\n    \n    # Calculate sound pressure level (SPL)\n    spl = 20 * np.log10(np.sqrt(np.mean(data**2)))\n    \n    # Generate spectrogram\n    spectrogram = librosa.feature.melspectrogram(data, sr=sr, n_mels=M, n_fft=N)\n    \n    # Normalize spectrogram\n    normalized_spectrogram = np.log(spectrogram + 1e-9)\n    \n    # Create MxN matrix from list L\n    matrix = np.array(L).reshape(M, N)\n    \n    # Normalize matrix\n    normalized_matrix = matrix / np.max(matrix)\n    \n    # Display spectrogram\n    plt.figure(figsize=(10, 5))\n    plt.imshow(normalized_spectrogram, aspect='auto', origin='lower')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title(f'Spectrogram of {audio_file} (SPL: {spl:.2f} dB)')\n    plt.xlabel('Time')\n    plt.ylabel('Frequency')\n    plt.show()\n    \n    return normalized_matrix, plt.gcf()\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    list tuples extract numeric values compute statistics generate histogram overlaid probability density function Parameters original Input list tuple second element numeric value Returns np.array numpy array extracted numeric values Basic statistics mean standard deviation minimum maximum Axes matplotlib Axes object histogram overlaid PDF histogram plotted density True alpha 0.6 bins 'auto automatic bin selection Requirements numpy matplotlib.pyplot scipy.stats Example original('a' 1)'b 2)'c 3)'d' 4) arr stats ax task_func(original) print(arr) [1 2 3 4] print(stats)'mean 2.5 'std' 1.118033988749895 'min 1 'max 4\n    \"\"\"\n    # Extract numeric values from the list of tuples\n    arr = np.array([x[1] for x in original if isinstance(x[1], (int, float))])\n\n    # Compute basic statistics\n    mean = np.mean(arr)\n    std = np.std(arr)\n    min_val = np.min(arr)\n    max_val = np.max(arr)\n\n    # Generate histogram and overlay probability density function\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins='auto', alpha=0.6, density=True)\n\n    # Plot the PDF\n    x = np.linspace(min_val, max_val, 100)\n    pdf = stats.norm.pdf(x, mean, std)\n    ax.plot(x, pdf, 'r--', linewidth=2)\n\n    # Show the plot\n    plt.show()\n\n    return arr, mean, std, min_val, max_val, ax\n\n"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array list normalize draw original normalized arrays function plot normalized arrays matplotlib Parameters original list tuples unzipped numpy array Returns np.array original data Normalized array matplotlib.axes.Axes object plotted data Requirements numpy matplotlib.pyplot sklearn.preprocessing Example original = [('a', 1)'b', 2)'c', 3)'d', 4)] arr norm_arr ax = task_func(original) print(arr) [1 2 3 4] print(norm_arr) [0.18257419 0.36514837 0.54772256]\n    \"\"\"\n    # Unzip the original list into two separate lists\n    labels, values = zip(*original)\n\n    # Convert the values list to a numpy array\n    values = np.array(values)\n\n    # Normalize the values using sklearn.preprocessing\n    norm_values = preprocessing.normalize([values])\n\n    # Convert the normalized values back to a list\n    norm_values = norm_values.tolist()[0]\n\n    # Create a dictionary to store the normalized values with their corresponding labels\n    norm_dict = dict(zip(labels, norm_values))\n\n    # Create a list of tuples with the normalized values and their corresponding labels\n    norm_list = list(zip(labels, norm_values))\n\n    # Plot the normalized values using matplotlib.pyplot\n    ax = plt.plot(labels, norm_values)\n\n    return norm_dict, norm_list, ax\n\n"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    dictionary \"data\", function performs operations Adds new key \"a\" value 1 to dictionary Generates signal based values Runs Fast Fourier Transform (FFT) on signal Plots returns FFT signal. Parameters data input data dictionary Returns tuple tuple containing ndarray FFT signal Axes plot FFT Requirements numpy scipy.fftpack matplotlib Example data = {'key1 1 'key2: 2 'key3': 3} fft, ax = task_func(data)\n    \"\"\"\n    data['a'] = 1\n    signal = np.sin(2 * np.pi * 50 * np.arange(0, 1, 1 / sample_rate)) + np.sin(2 * np.pi * 120 * np.arange(0, 1, 1 / sample_rate))\n    fft = fftpack.fft(signal)\n    ax = plt.figure().add_subplot(111)\n    ax.plot(np.abs(fft))\n    return fft, ax\n\n\ndata = {'key1': 1, 'key2': 2, 'key3': 3}\nfft, ax = task_func(data)\nplt.show()\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates HTTP POST request handler processing incoming data data expected JSON format key 'data' handler responds 200 success message if data valid or error message otherwise type response retrieved 'content-type' length 'content-length' two error messages 'Content-Type header not application/json' 'No data key request'. Returns function class handles HTTP POST requests validates incoming data Requirements cgi http json 'content-type' header not 'application/json' client sent request unsupported format sends 400 Bad Request response message \"Content-Type header not application/json\". JSON object contain 'data' key 400 Bad Request response \"No data key request\". request body contain valid JSON 400 Bad Request response message \"Invalid JSON\". Examples handler = task_func() isinstance(handler, type) True issubclass(handler http.BaseHTTPRequestHandler) True\n    \"\"\"\n    class RequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_type = self.headers.get('Content-Type')\n            if content_type != 'application/json':\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            content_length = int(self.headers.get('Content-Length', 0))\n            if content_length == 0:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            try:\n                data = json.loads(self.rfile.read(content_length))\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            if 'data' not in data:\n                self.send_response(400)\n                self.send_header('Content-Type', 'application/json')\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            self.send_response(200)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode())\n\n    return RequestHandler\n\nhandler = task_func()\nisinstance(handler, type)\nTrue\nissubclass(handler, http.server.BaseHTTPRequestHandler)\nTrue\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates HTTP POST request handler processes email data sends email email data JSON object with 'subject' 'message' 'to' keys type response retrieved 'content-type' length 'content-length'. Parameters: smtp_server SMTP address smtp_port SMTP port smtp_username username smtp_password SMTP password Returns function class handles HTTP POST requests sends emails based provided data. Requirements cgi http.server smtplib email.mime.text.MIMEText json JSONDecodeError email data not valid JSON results 400 Bad Request response ValueError 'subject' 'message' 'to' keys missing 400 Bad Request response. smtplib.SMTPAuthenticationError authentication issue SMTP server client 535 Authentication Failed response. Examples handler = task_func('smtp.example 587 'user@example' 'password') isinstance(handler type) True issubclass(handler http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class EmailHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            try:\n                content_length = int(self.headers['Content-Length'])\n                post_data = self.rfile.read(content_length)\n                email_data = json.loads(post_data)\n                subject = email_data['subject']\n                message = email_data['message']\n                to = email_data['to']\n                msg = MIMEText(message)\n                msg['Subject'] = subject\n                msg['From'] = smtp_username\n                msg['To'] = to\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                server.sendmail(smtp_username, to, msg.as_string())\n                server.quit()\n                self.send_response(200)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(b'Email sent successfully')\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(b'Invalid JSON data')\n            except KeyError:\n                self.send_response(400)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(b'Missing required keys')\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(b'Authentication Failed')\n    return EmailHandler\n\nsmtp_server = 'smtp.example.com'\nsmtp_port = 587\nsmtp_username = 'user@example.com'\nsmtp_password = 'password'\n\nhandler = task_func(smtp_server, smtp_port, smtp_username, smtp_password)\n\nhttpd = http.server.HTTPServer(('localhost', 8080), handler)\nhttpd.serve_forever()\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count words in .txt files directory export counts to JSON file return total. Parameters filename output JSON file directory (str): directory .txt files Returns int total number words.txt Requirements - collections.Counter - os - json Example open(\"./testdir/single_file.txt\", f print f.read() hello world count = task_func('single_file.txt/testdir/') print(count) 3\n    \"\"\"\n    # Check if the file exists\n    if not os.path.isfile(os.path.join(directory, filename)):\n        raise FileNotFoundError(f\"File {filename} not found in directory {directory}\")\n\n    # Read the file\n    with open(os.path.join(directory, filename), 'r') as f:\n        text = f.read()\n\n    # Count the words\n    word_counts = Counter(text.split())\n\n    # Export to JSON\n    with open(os.path.join(directory, 'word_counts.json'), 'w') as f:\n        json.dump(word_counts, f)\n\n    # Return the total number of words\n    return sum(word_counts.values())\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes pandas DataFrame splitting lists 'Value' column columns calculates Pearson correlation coefficient visualizes correlation matrix heatmap Parameters df (DataFrame): pandas DataFrame two columns 'Date' 'Value' 'Date' column contains dates 'Value' column numbers plot (bool): Optional if True displays heatmap correlation matrix returns Returns DataFrame pandas DataFrame correlation coefficients 'Value' column Axes (optional): matplotlib Axes object heatmap plot returned if 'plot True function \"Correlation Heatmap\" title If DataFrame input empty invalid 'Value' ValueError. Requirements pandas - seaborn matplotlib.pyplot Example df = pd.DataFrame('2021-01-01 [8, 10 12]]'2021-01-02' [7, 9, 11]]] columns'Date' 'Value')_df = task_func(df) print(corr_df\n    \"\"\"\n    # Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if 'Value' column is valid\n    if not all(df['Value'].apply(lambda x: isinstance(x, list))):\n        raise ValueError(\"'Value' column contains invalid data\")\n\n    # Check if 'Value' column contains lists of the same length\n    if not all(df['Value'].apply(lambda x: len(x) == len(df['Value'][0]))):\n        raise ValueError(\"'Value' column contains lists of different lengths\")\n\n    # Calculate Pearson correlation coefficient\n    corr = df['Value'].apply(lambda x: pd.Series(x)).corr()\n\n    # Plot correlation matrix heatmap\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        plt.show()\n\n    return corr\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create report on students' grades subjects calculate average grade each student Parameters additional_fields (list string optional): additional list student subjects not duplicate constants (default = []) Returns DataFrame pandas DataFrame columns subjects student's grades average grades includes average grade per subject function input parameters generates report based predefined constants additional fields input 'Average' name average grade each subject 'Average Grade' column name average grade each student Grade subject between 0 to 100. Requirements pandas random statistics.mean Example random.seed(0) report = task_func(['Computer Science' 'Geography']) print(report.columns) Index(['Physics 'Math 'Chemistry 'Biology 'English 'History 'Computer Science 'Geography 'Average Grade'] dtype='object')\n    \"\"\"\n    # Create a DataFrame with random grades for each student and subject\n    df = pd.DataFrame(columns=FIELDS + additional_fields + ['Average Grade'])\n    for student in STUDENTS:\n        grades = [random.randint(0, 100) for _ in FIELDS + additional_fields]\n        df.loc[student] = grades + [mean(grades)]\n\n    return df\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates CSV file simulated data 100 people including name age height weight calculates appends average age height weight end Parameters filename (str): name CSV file created Returns str path created CSV file Requirements os csv random statistics.mean Example random.seed(0) filename 'people_report.csv' path = task_func(filename) os.path.exists(path)\n    \"\"\"\n    # Create a list to store the people data\n    people = []\n\n    # Generate random data for 100 people\n    for i in range(PEOPLE_COUNT):\n        name = f\"Person {i+1}\"\n        age = random.randint(18, 60)\n        height = round(random.uniform(1.5, 2.0), 2)\n        weight = round(random.uniform(50, 100), 2)\n        people.append([name, age, height, weight])\n\n    # Calculate the average age, height, and weight\n    avg_age = mean([person[1] for person in people])\n    avg_height = mean([person[2] for person in people])\n    avg_weight = mean([person[3] for person in people])\n\n    # Append the average values to the people data\n    people.append(['Average', avg_age, avg_height, avg_weight])\n\n    # Write the data to a CSV file\n    with open(filename, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(COLUMNS)\n        writer.writerows(people)\n\n    return os.path.abspath(filename)\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files directory first text not brackets Move files to subdirectories named after text no matching text found file not moved Parameters directory (str): directory path Returns tuple: - str directory path organized files dict dictionary keys created subdirectories values lists files moved Requirements - re - os - shutil - datetime Example import tempfile temp_dir = tempfile.mkdtemp() create_test_directory(temp_dir\"file1.txt) dir files = task_func(temp_dir) files['subdir2.startswith('file3_') True\n    \"\"\"\n    # Create a dictionary to store the subdirectories and their corresponding files\n    subdirectories = {}\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        # Get the full path of the file\n        filepath = os.path.join(directory, filename)\n\n        # Check if the file is a regular file\n        if os.path.isfile(filepath):\n            # Get the text before the first bracket in the filename\n            text = re.search(r\"([^(\\[]*)\", filename).group(1)\n\n            # Create a subdirectory for the text if it doesn't exist\n            if text not in subdirectories:\n                subdirectories[text] = []\n\n            # Move the file to the subdirectory\n            subdirectories[text].append(filepath)\n\n    # Create the subdirectories and move the files\n    for text, files in subdirectories.items():\n        subdir_path = os.path.join(directory, text)\n        os.makedirs(subdir_path, exist_ok=True)\n        for file in files:\n            shutil.move(file, subdir_path)\n\n    # Return the directory path and the subdirectories\n    return directory, subdirectories\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from as subprocesses Parameters file_list (list files name to run Returns exit codes subprocesses. Requirements subprocess - time - threading Example task_func([/file1.bat\",/file2.bat\"]) [0, 0]\n    \"\"\"\n    exit_codes = []\n    for file in file_list:\n        exit_codes.append(subprocess.call(file, shell=True))\n    return exit_codes\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find run .bat files directory returning file names exit codes Parameters directory_path (str): path search files Returns list tuples each tuple contains file name exit code exit code None if file executed Requirements subprocess os sys glob Example task_func(\"path/to/directory\") [\"file1.bat\", 0), (\"file2.bat\", 1)\n    \"\"\"\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n    results = []\n    for bat_file in bat_files:\n        try:\n            result = subprocess.run([bat_file], capture_output=True, text=True)\n            results.append((bat_file, result.returncode))\n        except Exception as e:\n            results.append((bat_file, None))\n    return results\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    function takes pandas DataFrame column name input generates two subplots matplotlib figure first subplot histogram kernel density estimate numerical second box plot distribution values specified column Parameters: df (DataFrame): Input DataFrame numerical categorical data col (str): name column plotted column should exist DataFrame contain numerical categorical data Returns matplotlib.figure.Figure figure object containing histogram box plot Requirements pandas - seaborn matplotlib.pyplot input df must be DataFrame not empty contain specified column not function ValueError. Example df = pd.DataFrame({'value': [1 2 3 4 5 6 7 8 9 10]}) = task_func(df 'value') type(fig) <class 'matplotlib.figure.Figure'> plt.close() df = pd.DataFrame({'category': ['A' 'B' = task_func(df 'category') type(fig) <class 'matplotlib.figure.Figure'> len(fig.axes) 2 plt.close()\n    \"\"\"\n    fig, axs = plt.subplots(2, 1, figsize=(10, 8))\n\n    # Plot histogram and kernel density estimate\n    sns.histplot(df[col], kde=True, ax=axs[0])\n\n    # Plot box plot\n    sns.boxplot(df[col], ax=axs[1])\n\n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run Python script predefined arguments default waits for process complete wait False function returns None Parameters script_path (str): path Python script run wait (bool): wait script complete Default True *args arguments passed script Returns int return code subprocess 'wait False returns None Requirements subprocess os sys time ValueError script exist subprocess.CalledProcessError script raises exception Example import tempfile script_path = tempfile.NamedTemporaryFile(suffix'.py').name open(script_path 'w') f: f.write('import sys;sys.exit(0);') task_func(script_path True 'arg1', 'arg2') task_func(script_path False 'arg1', 'arg2') return None\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError('Script does not exist')\n    try:\n        process = subprocess.Popen([sys.executable, script_path] + list(args), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            process.wait()\n            return process.returncode\n        else:\n            return None\n    except subprocess.CalledProcessError as e:\n        raise Exception('Script raises exception: {}'.format(e))\n\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from Excel spreadsheet calculate mean standard deviation draw bar chart bar chart returned as matplotlib figure object Parameters file_location (str): path to Excel file sheet_name name sheet data Returns dict dictionary with mean standard deviation column matplotlib.figure.Figure figure object bar chart figure titled 'Mean and Standard Deviation' X-axis labeled 'Columns' Y-axis 'Values' Raises FileNotFoundError Excel file exist specified path ValueError sheet exist workbook. Requirements pandas - numpy matplotlib.pyplot os - openpyxl Example file_path='test.xlsx' create_dummy_excel(file_path) result fig = task_func(file_path 'TestSheet') os.remove(file_path) fig.axes.get_title() 'Mean and Standard Deviation'\n    \"\"\"\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found at {file_location}\")\n    except ValueError:\n        raise ValueError(f\"Sheet {sheet_name} does not exist in the workbook\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")\n    \n    mean = df.mean()\n    std_dev = df.std()\n    \n    fig, ax = plt.subplots()\n    ax.bar(mean.index, mean.values, yerr=std_dev.values, capsize=5)\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    \n    return fig\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return bar chart number activities each day week provided list activities activities not datetime objects raise TypeError. Parameters activities (list datetime objects): list datetime objects representing each activity occurred Returns matplotlib.axes.Axes Axes object bar chart x-axis 'Day Week y-axis 'Number Activities title 'Weekly Activity' Requirements datetime collections matplotlib.pyplot TypeError activities not datetime objects Example ax = task_func([datetime(2023, 10, 25), 10, 26)]) type(ax) <class 'matplotlib.axes..Axes'>\n    \"\"\"\n    if not all(isinstance(activity, datetime) for activity in activities):\n        raise TypeError(\"All activities must be datetime objects\")\n\n    # Create a dictionary to store the number of activities for each day of the week\n    activities_per_day = defaultdict(int)\n\n    # Count the number of activities for each day of the week\n    for activity in activities:\n        activities_per_day[activity.strftime(\"%A\")] += 1\n\n    # Create a bar chart\n    ax = plt.bar(activities_per_day.keys(), activities_per_day.values())\n\n    # Set the title and labels\n    plt.title(\"Weekly Activity\")\n    plt.xlabel(\"Day of the Week\")\n    plt.ylabel(\"Number of Activities\")\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves random file source to destination directory. Parameters src_dir path source directory selected moved dest_dir (str): path destination directory seed (int Optional): seed random number generator Defaults to 100 Returns str name file moved Format 'filename.extension' 'file1.txt'). Requirements os shutil random Examples import tempfile src_dir = tempfile.mkdtemp() dest_dir = tempfile.mkdtemp() open(os.path.join(src_dir 'file1.txt 'w').close() open.join_dir 'file2.txt').close() task_func(src_dir dest_dir seed=1) 'file2.txt'\n    \"\"\"\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    if not files:\n        return None\n    file_to_move = random.choice(files)\n    shutil.move(os.path.join(src_dir, file_to_move), os.path.join(dest_dir, file_to_move))\n    return file_to_move\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    double quotes Excel.xlsx files directory prefixing double backslash Parameters directory_path (str): path directory Excel files Default './xlsx_files/' Returns int number Excel files processed Requirements Libraries re openpyxl glob Excel files specified directory Example import tempfile temp_dir = tempfile.mkdtemp() workbook() sheet workbook.active sheet.append( \"test\" string workbook.save(temp_dir + '/test.xlsx') task_func(temp_dir) 1\n    \"\"\"\n    # Get all Excel files in the directory\n    excel_files = glob.glob(os.path.join(directory_path, '*.xlsx'))\n\n    # Initialize a counter for the number of Excel files processed\n    num_files_processed = 0\n\n    # Loop through each Excel file\n    for file_path in excel_files:\n        # Load the Excel file\n        workbook = load_workbook(file_path)\n\n        # Get the active sheet\n        sheet = workbook.active\n\n        # Loop through each row in the sheet\n        for row in sheet.iter_rows(values_only=True):\n            # Check if the row contains a string that matches the regex pattern\n            if any(re.search(r'\\b(?:[A-Z]{2,3}\\d{1,2}\\b|(?:(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b))|(?:(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b))|(?:(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b))|(?:(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b))|(?:(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3}\\d{1,2}\\b)\\s(?:[A-Z]{2,3"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram sine cosine wave given frequency return plot Parameters frequency (float): wave non-negative float sample_size (int Optional): positive integer number samples wave Default 10000 Returns matplotlib.figure.Figure figure object plot matplotlib.axes.Axes axes object plot Requirements numpy data generation matplotlib.pyplot plotting math mathematical constants Raises ValueError If frequency negative ValueError sample size non-positive. Example, ax = task_func(1, 2500) type(fig) <class 'matplotlib.figure.Figure'> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n\n    t = np.linspace(0, 2 * math.pi, sample_size)\n    sine_wave = np.sin(frequency * t)\n    cosine_wave = np.cos(frequency * t)\n\n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label='Sine wave')\n    ax.plot(t, cosine_wave, label='Cosine wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title(f'Frequency: {frequency}')\n    ax.legend()\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes Flask-Mail instance sending emails generated Flask application specified app_name Parameters app_name Flask application name Returns tuple Flask-Mail instance app mail configurations details email server retrieved from environment variables If variables use defaults 'MAIL_SERVER 'localhost 'MAIL_PORT 25 'MAIL_USE_TLS' False 'MAIL_USERNAME None 'MAIL_PASSWORD' None Requirements flask os flask_mail Example mail task_func(\"test\") print(mail.__getattribute__\"app\").name) test\n    \"\"\"\n    app = Flask(app_name)\n    mail = Mail(app)\n    mail_config = {\n        \"MAIL_SERVER\": os.environ.get(\"MAIL_SERVER\", \"localhost\"),\n        \"MAIL_PORT\": int(os.environ.get(\"MAIL_PORT\", 25)),\n        \"MAIL_USE_TLS\": os.environ.get(\"MAIL_USE_TLS\", False),\n        \"MAIL_USERNAME\": os.environ.get(\"MAIL_USERNAME\", None),\n        \"MAIL_PASSWORD\": os.environ.get(\"MAIL_PASSWORD\", None),\n    }\n    return mail, mail_config\n\nmail, mail_config = task_func(\"test\")"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate mean median standard deviation data specific column Excel file Parameters excel_file_path path directory Excel file file_name (str): name Excel file column_name name column analyze Returns dictionary with mean median standard deviation Raises FileNotFoundError Excel file specified path ValueError specified column not found Requirements pandas - numpy - os Example data_dir file_name '/data 'excel_file1.xls' create_dummy_file(data_dir file_name) stats = task_func(data_dir file_name 'Sales') os.remove(data_dir + file_name) os.rmdir(data_dir) print(stats) {'mean' 200.0 'median' 200.0 'std_dev' 70.71067811865476}\n    \"\"\"\n    try:\n        # Load Excel file\n        df = pd.read_excel(excel_file_path + file_name)\n        \n        # Check if column exists\n        if column_name not in df.columns:\n            raise ValueError(f\"Column '{column_name}' not found in the Excel file.\")\n        \n        # Calculate mean, median, and standard deviation\n        mean = df[column_name].mean()\n        median = df[column_name].median()\n        std_dev = df[column_name].std()\n        \n        # Return results as a dictionary\n        return {'mean': mean, 'median': median, 'std_dev': std_dev}\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Excel file '{file_name}' not found in the specified path '{excel_file_path}'.\")\n    except Exception as e:\n        raise e\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains neural network on input data target labels function Splits data into training set (75%) test set (25%), input dimension 2. Constructs Sequential model with dense hidden layer sigmoid activation function Compiles model using binary cross-entropy loss SGD optimizer specified learning rate Fits model to training data on test set validation data Plots model training validation loss over epochs returns Axes object for customization. Parameters X Input features input 2. Y Target labels Returns Sequential: trained Keras Sequential model matplotlib.axes.Axes: Axes object plot visualizes model training validation loss over epochs x-axis epochs y-axis loss distinguishes between 'Train' 'Test' losses input X must 2. Axes title 'Model loss' x-axis label 'Epoch' y-axis label 'Loss' Requirements keras.layers.Dense keras.optimizers.SGD keras.models.Sequential sklearn.model_selection.train_test_split matplotlib.pyplot Examples X = np.array([[0, 0] 1]) >>> Y = np.array([[0] [1] [0]]) model ax = task_func(X, Y) >>> isinstance(model, Sequential) True >>> isinstance(ax, plt.Axes) True\n    \"\"\"\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n    model = Sequential()\n    model.add(Dense(1, input_dim=2, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.1))\n    model.fit(X_train, Y_train, epochs=100, batch_size=10, validation_data=(X_test, Y_test))\n    ax = plt.plot(model.history.history['loss'], label='Train')\n    ax = plt.plot(model.history.history['val_loss'], label='Test')\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    return model, ax"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide input data into training test sets (70% training 30% create Keras Sequential model one hidden layer sigmoid activation function compile model with binary cross-entropy loss SGD optimizer learning rate fit model to training data non-verbose mode plot ROC curve test set including AUC score plot legend Parameters X input data input 2. Y target data Returns keras.models.Sequential trained Keras model matplotlib.axes..Axes Axes object for Precision-Recall curve plot. title axes 'ROC curve' x label 'False positive rate y label 'True positive rate' Requirements tensorflow.keras sklearn.metrics.roc_curve sklearn.metrics.auc sklearn.model_selection.train_test_split matplotlib Example X = np.array([ 1 Y = np.array([ [1]) model ax = task_func(X, Y) >>> isinstance(model keras.models.Sequential)\n    \"\"\"\n    # Divide input data into training test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n    # Create Keras Sequential model one hidden layer sigmoid activation function\n    model = keras.Sequential([\n        keras.layers.Dense(1, input_shape=(1,), activation='sigmoid')\n    ])\n    # Compile model with binary cross-entropy loss SGD optimizer learning rate\n    model.compile(loss='binary_crossentropy', optimizer='sgd', metrics=['accuracy'])\n    # Fit model to training data non-verbose mode\n    model.fit(X_train, Y_train, epochs=100, verbose=0)\n    # Plot ROC curve test set including AUC score\n    fpr, tpr, _ = roc_curve(Y_test, model.predict(X_test))\n    roc_auc = auc(fpr, tpr)\n    plt.figure()\n    plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('ROC curve')\n    plt.legend(loc=\"lower right\")\n    ax = plt.gca()\n    return model, ax\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads RGB image applies K-means clustering image into 'n_clusters' regions saves each region separate image function returns arrays of original segmented images Parameters image_path path to RGB image file Default 'image.jpg' image expected in RGB format 3D array (height width channels order of RGB n_clusters number of clusters for K-means clustering Default 3. minimum 1 cluster allowed single cluster original image as segmented image random_seed seed random number generator K-means clustering Default 42. Returns tuple containing two numpy arrays first original RGB image second segmented image each pixel color replaced by centroid cluster. Raises FileNotFoundError image file exist path ValueError 'n_clusters' not positive integer. Requirements opencv reading image file converting BGR to RGB numpy array manipulations os checking image file sklearn.cluster applying K-means clustering. Example create_dummy_image('image.jpg') >>> original_img_array segmented_img_array = task_func('image.jpg', 3) >>> os.remove('image.jpg') >>> print(original_img_array.shape) Example output (10 >>> print(segmented_img_array.shape) output for n_clusters > 1 function assumes input image in RGB formatsegmented image array same shape original image pixel colors replaced by cluster centroid colors segmenting image into regions based on color similarity Clustering with single cluster allowed original image as original segmented images all pixels assigned to same cluster\n    \"\"\"\n    # Check if image file exists\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"Image file '{image_path}' not found.\")\n\n    # Check if n_clusters is a positive integer\n    if not isinstance(n_clusters, int) or n_clusters <= 0:\n        raise ValueError(\"'n_clusters' must be a positive integer.\")\n\n    # Read image in BGR format\n    image = cv2.imread(image_path)\n\n    # Convert BGR to RGB format\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    # Reshape image to 2D array\n    image_reshaped = image_rgb.reshape((-1, 3))\n\n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(image_reshaped)\n\n    # Get cluster centers\n    cluster_centers = kmeans.cluster_centers_\n\n    # Get labels for each pixel\n    labels = kmeans.labels_\n\n    # Reshape labels to original image shape\n    labels_reshaped = labels.reshape(image_rgb.shape[:2])\n\n    # Create segmented image\n    segmented_image = np.zeros_like(image_rgb)\n    for i in range(n_clusters):\n        segmented_image[labels_reshaped == i] = cluster_centers[i]\n\n    # Return original and segmented images\n    return image_rgb, segmented_image\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate product matrix 3D tensor flatten result apply KMeans clustering flattened data visualize Parameters P input matrix T input tensor shape (3 3 n_clusters number KMeans clustering Default 3. random_state state Default 0. n_init time k-means algorithm run centroid seeds Default 10. Returns cluster_result result KMeans clustering ax (matplotlib.axes visualization KMeans clustering title 'KMeans Clustering Visualization Requirements numpy sklearn matplotlib Example P = np([[6, 2, 7] [1, 1 8 7 1 [9, 6, 4 [2, 1, 1]] T = np.random.rand(3, 3 3) cluster_result ax task_func(P, T n_clusters=3 random_state=0 n_init=10) type(cluster_result) <class 'numpy.ndarray' type(ax 'matplotlib.\n    \"\"\"\n    # Flatten the input tensor\n    flattened_data = T.flatten()\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    kmeans.fit(flattened_data.reshape(-1, 1))\n\n    # Get the cluster labels\n    cluster_result = kmeans.labels_\n\n    # Reshape the cluster labels to match the original tensor shape\n    cluster_result = cluster_result.reshape(T.shape)\n\n    # Visualize the KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(flattened_data, np.zeros_like(flattened_data), c=cluster_result)\n    ax.set_title('KMeans Clustering Visualization')\n\n    return cluster_result, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate Voronoi diagram points 2D plot function errors input invalid wrong type shape Jittering applied prior plotting Parameters points (np.ndarray): numpy shape (n_points, 2) coordinates seed (int): Random seed reproducibility Defaults 0 Returns tuple (vor, ax): tuple containing vor (Voronoi): object representing diagram points ax (Axes): axes plotted Voronoi diagram Requirements numpy scipy matplotlib.pyplot Example points = np.array([[0, 0] 1]) vor, ax = task_func(points) type(vor) <class 'scipy.spatial.qhull.Voronoi' type(ax) <class 'matplotlib.axes..Axes\n    \"\"\"\n    # Check if points is a numpy array\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"points must be a numpy array\")\n\n    # Check if points has shape (n_points, 2)\n    if points.shape[1] != 2:\n        raise ValueError(\"points must have shape (n_points, 2)\")\n\n    # Check if points has at least 2 points\n    if points.shape[0] < 2:\n        raise ValueError(\"points must have at least 2 points\")\n\n    # Apply jittering to points\n    points = points + np.random.normal(0, 0.1, points.shape)\n\n    # Calculate Voronoi diagram\n    vor = Voronoi(points)\n\n    # Plot Voronoi diagram\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n\n    return vor, ax\n\nThe task function `task_func` is designed to calculate and plot a Voronoi diagram for a given set of 2D points. Here's a breakdown of the function:\n\n1. **Input Validation**:\n   - The function first checks if the input `points` is a numpy array. If not, it raises a `TypeError`.\n   - It then checks if `points` has a shape of `(n_points, 2)`. If not, it raises a `ValueError`.\n   - The function also checks if `points` has at least 2 points. If not, it raises a `ValueError`.\n\n2. **Jittering**:\n   - The function applies a small amount of random noise (jittering) to the `points` to avoid degenerate cases that can occur when all points are perfectly aligned.\n\n3. **Voronoi Diagram Calculation**:\n   - The function uses the `Voronoi` class from the `scipy.spatial` module to calculate the Voronoi diagram for the jittered points.\n\n4. **Plotting**:\n   - The function creates a new figure and axis using `matplotlib.pyplot.subplots`.\n   - It then uses the `voronoi_plot_2d` function from `scipy.spatial` to plot the Voronoi diagram on the axis.\n\n5. **Return Value**:\n   - The function returns a tuple containing the `Voronoi` object and the `Axes` object on which the diagram was plotted.\n\nHere's an example of how to use the function:\n\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files specified extension from source to destination function searches for files extension If file same name exists in destination directory not moved. Parameters: src_dir source directory path dest_dir (str): destination directory path ext (str): file extension search (without leading dot). Returns list full paths of files moved. If file not moved exists destination not included list. FileNotFoundError if source or destination directory exist Requirements - os - shutil - glob Examples test_src_dir = './test_src'_dest_dest test_ext = 'txt' os.makedirs(test exist_ok=True) moved_files = task_func(test_src_dir_ext) >>> len(moved_files) > 0 Check if files moved True >>> 'test_file.txt' in [os.path.basename(path) path moved_files] Assuming test_file.txt exists in test_src_dir True >>> os.listdir(test_dest_dir) Verify files moved no duplicates in destination ['test_file.txt\n    \"\"\"\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory '{src_dir}' does not exist.\")\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory '{dest_dir}' does not exist.\")\n\n    files_to_move = glob.glob(os.path.join(src_dir, f\"*.{ext}\"))\n    moved_files = []\n\n    for file_path in files_to_move:\n        file_name = os.path.basename(file_path)\n        dest_file_path = os.path.join(dest_dir, file_name)\n\n        if not os.path.exists(dest_file_path):\n            shutil.move(file_path, dest_file_path)\n            moved_files.append(dest_file_path)\n\n    return moved_files\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load JSON string into dictionary normalize doubling values create Pandas DataFrame from function processes JSON string into dictionary normalizes data doubling values constructs Pandas DataFrame from function designed handle simple flat dictionaries single numerical values lists strings interpreted as numbers doubles values numerical data types within dictionary including lists strings extracted using regex), process nested dictionaries returns DataFrame with numerical values as floats types left as-is or empty DataFrame if input JSON string empty or valid data structures Parameters: json_str JSON string Returns DataFrame: pandas DataFrame created from dictionary Requirements - pandas - json - re Example json_str = '{\"a\": [1, 2 3] \"b\": \"c\": \"5\"}' >>> df = task_func(json_str) type(df) <class 'pandas.core.frame.DataFrame'> print(df) b c 0 2 9.8 10 1 4 2 6\n    \"\"\"\n    # Load JSON string into dictionary\n    data = json.loads(json_str)\n\n    # Normalize doubling values\n    data = normalize_doubling_values(data)\n\n    # Create Pandas DataFrame from function\n    df = create_dataframe(data)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes bash script returns CPU memory usage function checks script path executes in subprocess uses psutil monitor process for CPU memory usage CPU usage cumulative script process CPU demand not average across cores Memory usage sum of RSS memory increments function aggregates metrics until script completes or timeout reached handles cases process zombie or not found ensures subprocess beyond timeout. Parameters script_path (str): path to bash script Path must exist. timeout (int optional): Maximum time seconds for complete Defaults to 10 seconds. Returns dict dictionary containing 'CPU Usage' accumulated CPU usage percentage 'Memory Usage': memory usage in bytes. Requirements subprocess - psutil time - os Examples resources = task_func('/path/to/script.sh') {'CPU Usage': 5.2, 'Memory Usage': 2048\n    \"\"\"\n    # Check if script path exists\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script path '{script_path}' does not exist.\")\n\n    # Start subprocess\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Initialize variables\n    cpu_usage = 0\n    memory_usage = 0\n    start_time = time.time()\n\n    # Monitor process\n    while process.poll() is None:\n        # Check if timeout reached\n        if time.time() - start_time > timeout:\n            process.terminate()\n            raise TimeoutError(f\"Script '{script_path}' did not complete within {timeout} seconds.\")\n\n        # Get process info\n        try:\n            process_info = psutil.Process(process.pid)\n        except psutil.NoSuchProcess:\n            raise RuntimeError(f\"Script '{script_path}' process not found.\")\n\n        # Get CPU usage\n        cpu_usage += process_info.cpu_percent(interval=0.1)\n\n        # Get memory usage\n        memory_usage += process_info.memory_info().rss\n\n        # Check if process is zombie\n        if process_info.status() == psutil.STATUS_ZOMBIE:\n            process.terminate()\n            raise RuntimeError(f\"Script '{script_path}' process is zombie.\")\n\n    # Get final CPU usage\n    cpu_usage += process_info.cpu_percent(interval=0.1)\n\n    # Get final memory usage\n    memory_usage += process_info.memory_info().rss\n\n    # Return results\n    return {'CPU Usage': cpu_usage, 'Memory Usage': memory_usage}\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create DataFrame rows (N 3 columns \"x\" \"y\" random values \"category\" random categories CATEGORIES list Each category once if N greater equal categories randomly sampled without replacement draw scatter plot \"x\" vs \"y colored \"category\". Parameters N DataFrame Defaults 100 CATEGORIES (list categories Defaults ['A' 'B' 'C' 'D' 'E'] seed optional): Random seed reproducibility Defaults 42 Returns tuple DataFrame generated DataFrame Axes Axes object plot Requirements numpy pandas matplotlib.pyplot Example df ax = task_func() df.head() x y category 0 0.239562 0.385098 C 1 0.144895 0.851137 D 2 0.489453 0.316922 C 3 0.985650 0.169493 E 4 0.242055 0.556801 A type(ax) 'matplotlib.axes\n    \"\"\"\n    np.random.seed(seed)\n    df = pd.DataFrame({\n        \"x\": np.random.rand(N),\n        \"y\": np.random.rand(N),\n        \"category\": np.random.choice(CATEGORIES, N, replace=False)\n    })\n    fig, ax = plt.subplots()\n    for category in CATEGORIES:\n        ax.scatter(df[df[\"category\"] == category][\"x\"], df[df[\"category\"] == category][\"y\"], label=category)\n    ax.legend()\n    return df, ax\n\n\ndf, ax = task_func()\ndf.head()"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate time series epoch start to end time specified step trend time series plotted with timestamps x-axis'Time values y-axis'Value values generated from normal distribution linear trend added based provided trend value. Parameters start_time start epoch time milliseconds end_time epoch time milliseconds greater than start_time step step milliseconds between each data point agreater than 0. trend (float): trend value added time series acts multiplier for index adding linear trend randomly generated values seed (int optional): for reproducibility Default 42. Returns ax (matplotlib.pyplot.Axes): Axes object generated plot x-axis labeled 'Time' y-axis 'Value'. Requirements datetime - pandas - numpy Example ax = task_func(0, 10000, 100, 0.001) type(ax) <class 'matplotlib.axes..Axes'> ax.get_xticklabels() [Text(-20.0 '1970-01-01 10:00:08.000000(0.0 10:00:00.000000 10:00:02.000000 Text(40.0 10:00:04.000000 Text(60.0 10:00:06.000000(80.0 10:00:08.000000 Text(100.0 Text(120.0\n    \"\"\"\n    np.random.seed(seed)\n    time = np.arange(start_time, end_time, step)\n    value = np.random.normal(0, 1, len(time)) + trend * np.arange(len(time))\n    df = pd.DataFrame({'Time': time, 'Value': value})\n    df['Time'] = pd.to_datetime(df['Time'], unit='ms')\n    ax = df.plot(x='Time', y='Value', figsize=(10, 5))\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    return ax\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Generate sales data five products epoch time current time function checks input validity each day current generates random sales data each 5 products Parameters epoch_milliseconds Start epoch time milliseconds before current system time random_seed Seed reproducibility random sales data Defaults 0. products (list list contain 5 unique strings Defaults'Product1'] Returns pd.DataFrame sales data columns 'Product' 'Date' 'Sales' (integer). Sales quantity randomly sampled from range [10, 50]. Requirements pandas datetime.datetime random Example sales_data = task_func(1236472051807 random_seed=42) type(sales_data) 'pandas.core.frame.DataFrame' sales_data.head() Product Date Sales 0 Product4 2009-03-08 11:27:31.807 50 1 Product5 2009-03-08 11:27:31.807 17 2 Product1.807 11 3 Product3.807 27 4 Product2 11:27:31.807 25\n    \"\"\"\n    # Check input validity\n    if not isinstance(epoch_milliseconds, int):\n        raise TypeError(\"epoch_milliseconds must be an integer\")\n    if not isinstance(random_seed, int):\n        raise TypeError(\"random_seed must be an integer\")\n    if not isinstance(products, list):\n        raise TypeError(\"products must be a list\")\n    if len(products) != 5:\n        raise ValueError(\"products must contain exactly 5 unique strings\")\n    if len(set(products)) != 5:\n        raise ValueError(\"products must contain exactly 5 unique strings\")\n\n    # Generate sales data\n    random.seed(random_seed)\n    current_time = datetime.now()\n    sales_data = []\n    for product in products:\n        sales = random.randint(10, 50)\n        sales_data.append([product, current_time, sales])\n\n    # Convert to DataFrame\n    sales_data = pd.DataFrame(\n        sales_data, columns=[\"Product\", \"Date\", \"Sales\"]\n    ).sort_values(by=\"Date\")\n\n    return sales_data\n\n"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings to Excel file handling empty JSON arrays function takes JSON string converts into Excel file specified filename If string empty array creates Excel file with no data rows Parameters json_str JSON content filename (str): name Excel file created sheet_name (str optional): name sheet Excel file Default is \"sheet1\". Returns str absolute path of created Excel file ValueError If `json_str not valid JSON TypeError If not string Exception: general errors file writing. Requirements xlwt writing to Excel files xlrd - os file path operations pandas data manipulation. Example json_str = '[ \"Age 30 \"Jane\", \"Age 28}]' >>> True if task_func(json_str 'data.xls').endswith('data.xls' else False True >>> os.remove('data.xls')\n    \"\"\"\n    try:\n        # Check if json_str is a string\n        if not isinstance(json_str, str):\n            raise TypeError(\"json_str must be a string\")\n\n        # Check if json_str is valid JSON\n        json_data = json.loads(json_str)\n        if not isinstance(json_data, list):\n            raise ValueError(\"json_str must be a valid JSON array\")\n\n        # Create a new Excel file\n        workbook = xlwt.Workbook()\n        sheet = workbook.add_sheet(sheet_name)\n\n        # Write the JSON data to the Excel file\n        for i, item in enumerate(json_data):\n            for j, key in enumerate(item.keys()):\n                sheet.write(i, j, item[key])\n\n        # Save the Excel file\n        file_path = os.path.abspath(filename)\n        workbook.save(file_path)\n\n        return file_path\n\n    except Exception as e:\n        raise Exception(f\"Error writing to Excel file: {str(e)}\")\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates daily activity durations specified days past using randomly generated data function generates durations 0 to 120 each activity\"Running\", \"Weight Training Parameters days_in_past optional): number days past generate graph Defaults 7 days Must past random_seed optional): Seed random number generation reproducibility Defaults 0 Returns Tuple containing ax (matplotlib.pyplot.Axes): DataFrame plotting df (pd.DataFrame): Seaborn lineplot date x-axis duration y-axis activity. Requirements datetime.datetime datetime.timedelta - pandas random - seaborn Example ax, df = task_func(7 random_seed=42) type(ax) <class 'matplotlib.axes..Axes sample row returned DataFrame Date Activity Duration YYYY-MM-DD Running 45\n    \"\"\"\n    # Set random seed for reproducibility\n    random.seed(random_seed)\n\n    # Generate date range\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days_in_past)\n    date_range = pd.date_range(start=start_date, end=end_date, freq='D')\n\n    # Generate activity durations\n    activities = [\"Running\", \"Weight Training\"]\n    durations = [random.randint(0, 120) for _ in range(len(date_range) * len(activities))]\n\n    # Create DataFrame\n    df = pd.DataFrame({\n        \"Date\": pd.concat([pd.Series(date_range)] * len(activities), ignore_index=True),\n        \"Activity\": pd.concat([pd.Series(activities)] * len(date_range), ignore_index=True),\n        \"Duration\": durations\n    })\n\n    # Plotting\n    ax = sns.lineplot(data=df, x=\"Date\", y=\"Duration\", hue=\"Activity\")\n\n    return ax, df\n\n"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create DataFrame stock prices specified days past random data Parameters days_in_past optional): number days stock data positive. Defaults 7. stock_names optional): stock names data not empty Defaults\"AAPL\", \"GOOGL\", \"FB\"] random_seed optional): seed random number generation reproducibility Defaults 0 Returns DataFrame pandas DataFrame random stock prices specified days Prices floats [0.0,1.0). Requirements datetime pandas numpy Example df = task_func(5 random_seed=42) type(df) 'pandas.core.frame.DataFrame' print(df.head(1)) AAPL GOOGL MSFT AMZN FB 2024-03-30 37.454012 95.071431 73.199394 59.865848 15.601864\n    \"\"\"\n    np.random.seed(random_seed)\n    dates = pd.date_range(end=datetime.now(), periods=days_in_past + 1)\n    df = pd.DataFrame(\n        np.random.rand(days_in_past, len(stock_names)),\n        index=dates,\n        columns=stock_names,\n    )\n    df = df * 100\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV files create difference report function compares two CSV files provides detailed report differences represents each difference with line number status indicator content line. Parameters: file_path1 first file_path2 second CSV file delimiter optional): Delimiter character Default ',' quotechar optional): Quote character Default '\"' Returns DataFrame pandas DataFrame with differences DataFrame contains columns 'Line Number': line difference occurs 'Status': character type difference ' ': No change (line same both '-': Line first file not second '+': Line second file not first 'Content': actual text content line file. Raises FileNotFoundError: If found ValueError: If empty. Exception: other related errors. Requirements pandas data manipulation analysis csv: reading CSV files difflib performing difference operation. os Example create_dummy_test_files() >>> df = task_func('file1.csv 'file2.csv') >>> os.remove('file1.csv')'file2.csv >>> df.head() Line Number Status Content 0 1 ('name', 'age') 1 2 - ('Alice', '30') 2 3 + ('Alice, '31') 3 4 ('Bob', '25')\n    \"\"\"\n    # Read CSV files into pandas DataFrames\n    df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar)\n    df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar)\n\n    # Compare the two DataFrames\n    diff = ndiff(df1.values.tolist(), df2.values.tolist())\n\n    # Create a DataFrame to store the differences\n    diff_df = pd.DataFrame(columns=['Line Number', 'Status', 'Content'])\n\n    # Iterate over the differences and add them to the DataFrame\n    line_number = 1\n    for line in diff:\n        status = line[0]\n        content = line[-1]\n        diff_df = diff_df.append({'Line Number': line_number, 'Status': status, 'Content': content}, ignore_index=True)\n        line_number += 1\n\n    return diff_df\n\n"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze employee data calculate statistics column If data list empty sum 0 mean min max values NaN function visualizes data pie chart Age column labels Parameters column (str): analyze Valid values 'Age 'Salary 'Experience invalid KeyError data employee data each list represents [Age Salary Experience Returns tuple dictionary 'sum 'mean 'min 'max' column Axes object pie chart visualizing column data Requirements pandas numpy matplotlib.pyplot Example data = [[25, 50000, 2] [30, 75000, 5 [35, 100000, 7 [40, 125000, 10 [45, 150000, 12]] stats ax = task_func('Salary' data) stats {'sum 500000 'mean 100000.0 'min 50000 'max 150000} type(ax) 'matplotlib.axes.\n    \"\"\"\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column name\")\n\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None\n\n    column_data = [item[0] if column == 'Age' else item[1] if column == 'Salary' else item[2] for item in data]\n\n    stats = {\n        'sum': sum(column_data),\n        'mean': np.mean(column_data),\n        'min': np.min(column_data),\n        'max': np.max(column_data)\n    }\n\n    labels = [f'{column}: {value}' for value in column_data]\n\n    fig, ax = plt.subplots()\n    ax.pie(column_data, labels=labels, autopct='%1.1f%%')\n    ax.set_title(f'{column} Distribution')\n\n    return stats, ax\n"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze fitness data calculate sum mean minimum maximum column draw line chart validate numeric values steps calories burned distance walked non-negative. Parameters: column (str): analyze data allowed columns 'Date 'Steps' 'Calories Burned' 'Distance Walked' data (list contains datetime object date followed numeric values steps calories burned distance walked order Each numeric value non-negative not empty Returns tuple dictionary sum mean min max column matplotlib.axes.Axes Axes object plotted line chart line chart Date x-axis column value y-axis title Line Chart (column). Requirements pandas - numpy matplotlib.pyplot KeyError column not valid ValueError data list empty or numeric values steps calories burned distance walked negative. Example data = [[datetime(2022, 1, 1), 5000, 200, 3.5] 1 2), 5500, 220, 4.0] 3), 6000, 240, 4.5]] stats ax = task_func('Steps' data) type(ax) <class 'matplotlib.axes._axes.Axes'> print(stats) {'sum 16500 'mean 5500.0 'min 5000 'max 6000}\n    \"\"\"\n    allowed_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in allowed_columns:\n        raise KeyError(f\"Invalid column: {column}. Allowed columns are: {allowed_columns}\")\n    if not data or not all(isinstance(item, list) and len(item) == 4 for item in data):\n        raise ValueError(\"Data list is empty or not in the correct format.\")\n    if not all(isinstance(item[1:], (int, float)) and all(i >= 0 for i in item[1:]) for item in data):\n        raise ValueError(\"Numeric values for steps, calories burned, and distance walked must be non-negative.\")\n    \n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    df[column] = pd.to_numeric(df[column], errors='coerce')\n    \n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n    \n    ax = df.plot(x='Date', y=column, title=f'Line Chart ({column})', figsize=(10, 6))\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n    \n    return stats, ax\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read list dictionaries from JSON file calculate mean median each key (ignoring non-numeric missing convert results into Pandas DataFrame Parameters input_file (str optional): input JSON file name Defaults 'data.json' file contain list dictionaries If key missing treated NaN Non-numeric values ignored calculation mean median If all values non-numeric missing statistics NaN Returns df (pd.DataFrame): DataFrame indexed sorted by variable names (keys) input data containing columns 'mean' 'median' Requirements numpy collections json pandas Example df = task_func('data_1.json') mean median b median c median\n    \"\"\"\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n    df = pd.DataFrame(data)\n    df = df.apply(pd.to_numeric, errors=\"coerce\")\n    df = df.groupby(df.index).mean()\n    df = df.groupby(df.index).median()\n    return df\n\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies rows CSV file library convert into pandas DataFrame plot matplotlib Parameters file_path (str): path CSV file Returns dictionary duplicate rows keys counts values Axes matplotlib Axes object bar chart duplicate rows Requirements csv collections.Counter - pandas matplotlib.pyplot Example duplicates ax = task_func(\"sample_data.csv\") {('Alice '25 'New York 3'Bob' '30 'London'): 2} type(ax) <class 'matplotlib.axes..Axes'> Ensure CSV file proper format .csv extension Other formats raise ValueError.\n    \"\"\"\n    try:\n        # Read CSV file into pandas DataFrame\n        df = pd.read_csv(file_path)\n        \n        # Convert DataFrame to list of tuples\n        data = [tuple(row) for row in df.values]\n        \n        # Count duplicates using Counter\n        duplicates = Counter(data)\n        \n        # Filter out non-duplicate rows\n        duplicates = {k: v for k, v in duplicates.items() if v > 1}\n        \n        # Plot bar chart of duplicate rows\n        ax = plt.bar(duplicates.keys(), duplicates.values())\n        \n        return duplicates, ax\n    \n    except Exception as e:\n        raise ValueError(\"Invalid CSV file format\") from e\n\n"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries DataFrame record age distribution function takes DataFrame with 'name' 'age' columns If age floats rounded down to nearest integer Age not negative raises ValueError names records age distribution returns Counter object with age distribution histogram plot ages names age x count y-axis Bins calculated minimum maximum ages duplicates adjusted by .5 integer ages fall within bins Parameters pd.DataFrame with columns 'name' 'age' not empty If empty function raises ValueError Returns Counter Age distribution among duplicate names plt.Axes or None Histogram plot age distribution or None if no duplicates Requirements pandas - numpy - collections.Counter - seaborn - matplotlib.pyplot ValueError If DataFrame empty or age negative Example df = pd.DataFrame('name'Alice 'age' [25, 26, 25]}) >>> duplicates_counter ax = task_func(df) duplicates_counter Counter({25 2}) >>> type(ax) 'matplotlib.axes.\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n    df['age'] = df['age'].astype(int)\n    duplicates = df[df.duplicated(subset=['name'], keep=False)]\n    if duplicates.empty:\n        return Counter(), None\n    min_age = duplicates['age'].min()\n    max_age = duplicates['age'].max()\n    bins = np.arange(min_age, max_age + 2)\n    duplicates_counter = Counter(duplicates['age'])\n    ax = sns.histplot(duplicates['age'], bins=bins, kde=False)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age distribution among duplicate names')\n    return duplicates_counter, ax\n\nThe function `task_func` is designed to identify duplicate entries in a DataFrame based on the 'name' column and calculate the age distribution of these duplicates. It takes a DataFrame as input and returns a Counter object representing the age distribution and a histogram plot of the age distribution.\n\nHere's a step-by-step explanation of the function:\n\n1. The function first checks if the DataFrame is empty. If it is, a ValueError is raised with the message \"DataFrame is empty\".\n\n2. It then checks if any age values in the DataFrame are negative. If there are, a ValueError is raised with the message \"Age cannot be negative\".\n\n3. The 'age' column in the DataFrame is converted to integers using the `astype(int)` method.\n\n4. The function then identifies duplicate entries in the DataFrame based on the 'name' column. This is done using the `duplicated(subset=['name'], keep=False)` method, which returns a boolean mask indicating which rows are duplicates.\n\n5. If there are no duplicates, the function returns an empty Counter object and None for the histogram plot.\n\n6. If there are duplicates, the function calculates the minimum and maximum ages among the duplicates using the `min()` and `max()` methods.\n\n7. The function then creates an array of bins for the histogram plot using the `np.arange()` function. The bins range from the minimum age to the maximum age plus 2.\n\n8. The function creates a Counter object representing the age distribution among the duplicates using the `Counter()` function.\n\n9. The function creates a histogram plot of the age distribution using the `sns.histplot()` function. The `kde=False` argument is used to disable the kernel density estimation line"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify count duplicate values DataFrame 'value' column function plots histogram values overlays normal distribution curve. Parameters: df (pd.DataFrame): DataFrame numeric 'value' column If empty function empty Counter empty plot. bins (int optional): Number bins histogram Defaults to 4. Returns tuple Counter object count each duplicate value Axes matplotlib.axes.Axes object plot histogram 'value' column data applicable normal distribution curve data overlaid. histogram bars green 60% opacity normal distribution curve black linewidth 2. plot titled \"Distribution\", \"Value\" x-axis \"Frequency\" y-axis label. Requirements collections.Counter - numpy - scipy.stats.norm - matplotlib.pyplot Example df = pd.DataFrame({'value': [1, 2 2 3 3 4}) >>> counter ax = task_func(df) >>> ax <Axes title='center 'Distribution' xlabel='Value' ylabel='Frequency'> >>> counter Counter({2: 6, 1: 5, 3: 5 4: 4})\n    \"\"\"\n    if df.empty:\n        return Counter()\n    counter = Counter(df['value'])\n    x = np.arange(min(counter.keys()), max(counter.keys()) + 1)\n    y = [counter[i] for i in x]\n    plt.bar(x, y, color='green', alpha=0.6)\n    mu, std = norm.fit(y)\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mu, std)\n    plt.plot(x, p, 'k', linewidth=2)\n    plt.title('Distribution')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.show()\n    return counter\n\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Generate pandas DataFrame random values lists 'a' 'b' plot bar chart List 'a' sets row indices length list 'b' determines number columns predefined names 'COLUMNS = ['A 'B 'C 'D 'E']' list Parameters a (list): number b (list): number columns column names predefined. Returns matplotlib.axes.Axes: Axes object plotted bar chart Requirements numpy - pandas matplotlib Data Structure Uses pandas DataFrame structure data Example ax = task_func([1, 2, 3], ['A' 'B' 'C' 'D' 'E'])\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(np.random.randint(0, 100, size=(len(a), len(b))), columns=b, index=a)\n\n    # Plot bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n\n    # Set title and labels\n    ax.set_title('Bar Chart')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Value')\n\n    # Set x-axis tick labels\n    ax.set_xticklabels(a)\n\n    # Set y-axis tick labels\n    ax.set_yticklabels(df[b].values.flatten())\n\n    # Set column names\n    ax.legend(COLUMNS)\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    function plots bar chart monthly data values single year 'month x-axis 'value y-axis Parameters data (str): data string format 'yyyy-mm-value' Returns Axes object matplotlib.axes.Axes object plot title 'Monthly Data yyyy' x label 'Month' y label 'Value' Requirements pandas datetime matplotlib Example data '2022-01-100,2022-02-200,2022-08-450,2022-09-500,2022-11-600,2022-12-650' ax = task_func(data)\n    \"\"\"\n    # Convert the data string to a pandas DataFrame\n    df = pd.DataFrame(data.split(','), columns=['date'])\n    df['date'] = pd.to_datetime(df['date'].str[:-3])\n    df['value'] = df['date'].str[-3:].astype(int)\n    df = df.set_index('date')\n    df = df.resample('M').sum()\n\n    # Create a bar chart\n    ax = df.plot(kind='bar', figsize=(10, 6))\n\n    # Set the title and labels\n    ax.set_title(f'Monthly Data {df.index[0].year}')\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n\n    # Show the plot\n    plt.show()\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    function draws histogram frequency distribution numeric values string format 'Value x-axis 'Frequency y-axis 'Histogram Values title Parameters data (str): string 'value-value-...' Returns ax (matplotlib Axes object created histogram Requirements pandas numpy matplotlib histogram uses bins calculated `np(data.min data.max()+2) - 0.5` Example data = '1-2-3-4-5-6-7-8-9-10' ax task_func(data)\n    \"\"\"\n    # Convert string to list of integers\n    data = list(map(int, data.split('-')))\n    \n    # Create histogram\n    ax = plt.hist(data, bins=np.arange(data.min(), data.max()+2) - 0.5, edgecolor='black')\n    \n    # Set title and labels\n    plt.title('Histogram Values')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    \n    return ax\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine wave length adjusts curve curve_fit scipy.optimize data Parameters array_length Length sine wave array Defaults 100 noise_level Level noise added sine wave Defaults 0.2 Returns Axes object plot noisy sine wave adjusted curve Requirements numpy scipy.optimize matplotlib Example ax = task_func(100, 0.2)\n    \"\"\"\n    # Create noisy sine wave\n    x = np.linspace(0, 2 * np.pi, array_length)\n    y = np.sin(x) + noise_level * np.random.normal(size=array_length)\n\n    # Fit sine wave\n    popt, pcov = curve_fit(lambda x, a, b, c: a * np.sin(b * x + c), x, y)\n\n    # Plot noisy sine wave and adjusted curve\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'o', label='Noisy data')\n    ax.plot(x, popt[0] * np.sin(popt[1] * x + popt[2]), label='Adjusted curve')\n    ax.legend()\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Noisy sine wave and adjusted curve')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads CSV file normalizes text to ASCII counts words returns 10 common words frequencies matplotlib bar plot list of tuples Parameters csv_file (str): path to CSV file Returns tuple tuple containing matplotlib.axes.Axes object bar plot list 10 common words frequencies FileNotFoundError CSV file found path IOError error reading file Requirements unicodedata csv collections matplotlib.pyplot Example create_dummy_csv_file(.csv) >>> ax most_common_words = task_func('dummy.csv').remove('dummy.csv') type(ax) <class 'matplotlib.axes..Axes'> type(most_common_words) <class 'list'> function assumes CSV file contains text data properly formatted\n    \"\"\"\n    try:\n        with open(csv_file, 'r', encoding='utf-8') as file:\n            reader = csv.reader(file)\n            data = [row for row in reader]\n    except FileNotFoundError:\n        print(f\"File '{csv_file}' not found.\")\n        return None\n    except IOError:\n        print(f\"Error reading file '{csv_file}'.\")\n        return None\n\n    text = ' '.join(data)\n    normalized_text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8')\n    words = normalized_text.split()\n    word_counts = Counter(words)\n    most_common_words = word_counts.most_common(10)\n\n    ax = plt.bar([word for word, count in most_common_words], [count for word, count in most_common_words])\n    plt.xlabel('Words')\n    plt.ylabel('Frequency')\n    plt.title('10 Most Common Words')\n    plt.show()\n\n    return ax, most_common_words\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list distributed random numbers plot histogram probability density function Parameters size number random numbers Default 1000 Requirements numpy scipy.stats matplotlib.pyplot Returns matplotlib.figure.Figure figure object histogram PDF plot import matplotlib = task_func(size=500) isinstance(fig matplotlib.figure.Figure) Check output matplotlib figure object True len(fig.axes[0].lines) == 1 Ensure one line plot axes PDF True len(fig.axes[0].patches) > 10 Check histogram bars (patches present\n    \"\"\"\n    # Create random numbers\n    random_numbers = np.random.normal(loc=0, scale=1, size=size)\n    \n    # Create histogram\n    hist, bins = np.histogram(random_numbers, bins=30, density=True)\n    \n    # Create probability density function\n    pdf = stats.norm.pdf(bins, loc=0, scale=1)\n    \n    # Create figure and axis\n    fig, ax = plt.subplots()\n    \n    # Plot histogram\n    ax.bar(bins[:-1], hist, width=np.diff(bins), alpha=0.5)\n    \n    # Plot PDF\n    ax.plot(bins, pdf, 'r-', lw=2)\n    \n    # Set title and labels\n    ax.set_title('Histogram and PDF')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n    \n    # Show plot\n    plt.show()\n    \n    return fig\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates RSA public private key pair saves private key in file after encrypting with password AES encryption Returns public key filename encrypted private key encryption details for testing output file \"private_key_<number>.txt\", <number> hex representation 8 randomly generated bytes Returns rsa.PublicKey RSA public key str filename encrypted private key bytes encryption password testing decryption bytes encryption nonce testing decryption Requirements - os Crypto.Cipher.AES Crypto.Random.get_random_bytes base64.b64encode base54.b64decode Examples pub_key filename password nonce = task_func() >>> isinstance(pub_key rsa.PublicKey) True(filename str)(password bytes)(nonce bytes\n    \"\"\"\n    # Generate RSA key pair\n    key = rsa.generate_keys(2048)\n\n    # Save private key to file\n    private_key_filename = f\"private_key_{os.urandom(4).hex()}.txt\"\n    with open(private_key_filename, \"wb\") as f:\n        f.write(rsa.save_key(key, password=b\"password\"))\n\n    # Encrypt private key with AES\n    encryption_password = get_random_bytes(16)\n    encryption_nonce = get_random_bytes(16)\n    cipher = AES.new(encryption_password, AES.MODE_EAX, nonce=encryption_nonce)\n    encrypted_private_key = cipher.encrypt(rsa.save_key(key, password=b\"password\"))\n\n    # Save encrypted private key to file\n    encrypted_private_key_filename = f\"encrypted_private_key_{os.urandom(4).hex()}.txt\"\n    with open(encrypted_private_key_filename, \"wb\") as f:\n        f.write(b64encode(encrypted_private_key))\n\n    # Return public key, encrypted private key, encryption password, and encryption nonce\n    return key, encrypted_private_key_filename, encryption_password, encryption_nonce\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates RSA public private keys encrypts file using AES encryption encrypts AES key with public RSA key encrypted file AES key saved in separate files method demonstrates hybrid encryption approach. Parameters: file_path (str): path to file encrypted Returns rsa.PublicKey RSA public key. str filename encrypted file containing encrypted AES key. Requirements: rsa - os cryptography.hazmat.backends.default_backend.primitives.ciphers.algorithms.modes base64.b64encode Examples pub_key encrypted_file_key_file = task_func('my_file.txt') >>> isinstance(pub_key, rsa.PublicKey) True encrypted_file.endswith('.encrypted') True'\n    \"\"\"\n    # Generate RSA public and private keys\n    key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n        backend=default_backend()\n    )\n    pub_key = key.public_key()\n\n    # Read file content\n    with open(file_path, 'rb') as file:\n        file_content = file.read()\n\n    # Generate AES key and IV\n    aes_key = os.urandom(32)\n    iv = os.urandom(16)\n\n    # Encrypt file content using AES\n    cipher = Cipher(algorithms.AES(aes_key), modes.CBC(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n    padder = padding.PKCS7(128).padder()\n    padded_data = padder.update(file_content) + padder.finalize()\n    encrypted_content = encryptor.update(padded_data) + encryptor.finalize()\n\n    # Encrypt AES key using RSA\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n\n    # Save encrypted AES key to file\n    encrypted_file_key_file = file_path + '.encrypted_key'\n    with open(encrypted_file_key_file, 'wb') as file:\n        file.write(encrypted_aes_key)\n\n    # Save encrypted file content to file\n    encrypted_file = file_path + '.encrypted'\n    with open(encrypted_file, 'wb') as file:\n        file.write(iv + encrypted_content)\n\n    return pub_key, encrypted_file_key_file, encrypted_file\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Extracts text href attributes anchor tags from URL HTML content returns data pandas DataFrame time extraction. Parameters url (str): URL fetch HTML content Returns pandas.DataFrame columns 'text' 'href' 'fetch_time' Each row corresponds to anchor tag HTML 'text 'href' containing text hyperlink reference anchor tag 'fetch_time' contains timestamp data fetched 'YYYY-MM-DD HH:MM:SS'. ValueError: URL invalid or empty. URLError: issue with network connectivity server. Requirements urllib.request pyquery datime pandas urllib.error Example df = task_func('https://en.wikibooks/wiki/Main_Page') function requires internet connectivity fetch HTML content\n    \"\"\"\n    if not url:\n        raise ValueError('URL invalid or empty')\n    try:\n        response = urllib.request.urlopen(url)\n        html = response.read()\n        doc = pq(html)\n        anchors = doc('a')\n        data = []\n        for anchor in anchors:\n            text = anchor.text\n            href = anchor.get('href')\n            fetch_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            data.append([text, href, fetch_time])\n        df = pd.DataFrame(data, columns=['text', 'href', 'fetch_time'])\n        return df\n    except urllib.error.URLError as e:\n        print(f'Error fetching URL: {e}')\n        return None\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data specified hours save CSV file coloumns 'Time 'Temperature 'Humidity 'Pressure' Parameters hours (int): hours sensor data generated output_dir (str optional): output file path Returns hours (int): Number hours generate data Requirements datetime os random csv Example file_path = task_func(1) Generate data 1 hour os.path.exists(file_path) Check file created True isinstance(file_path str) Validate return type string True 'sensor_data.csv' file_path Ensure filename correct True\n    \"\"\"\n    # Create output directory if not exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate sensor data\n    sensor_data = []\n    for _ in range(hours * 60):\n        time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        temperature = randint(20, 30)\n        humidity = randint(40, 60)\n        pressure = randint(1000, 1100)\n        sensor_data.append([time, temperature, humidity, pressure])\n\n    # Save sensor data to CSV file\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        writer.writerows(sensor_data)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data vehicle types specified hours saves data CSV file coloumns 'Time' 'Car 'Bus 'Truck 'Bike' plots data line chart 'Time' x-axis 'Vehicle Count y-axis. Parameters hours Number hours output_dir (str output file path tuple Path CSV file matplotlib axes object line plot Requirements pandas os csv matplotlib.pyplot random datetime import matplotlib file_path ax = task_func(2) Generate data 2 hours isinstance(file_path str) True 'traffic_data.csv' file_path True isinstance(ax matplotlib.axes.Axes) True\n    \"\"\"\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate data\n    data = []\n    for hour in range(hours):\n        for minute in range(60):\n            time = datetime(2022, 1, 1, hour, minute)\n            car_count = randint(0, 100)\n            bus_count = randint(0, 50)\n            truck_count = randint(0, 30)\n            bike_count = randint(0, 200)\n            data.append([time, car_count, bus_count, truck_count, bike_count])\n\n    # Save data to CSV file\n    file_path = os.path.join(output_dir, 'traffic_data.csv')\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + VEHICLE_TYPES)\n        writer.writerows(data)\n\n    # Plot data\n    df = pd.read_csv(file_path)\n    ax = df.plot(x='Time', y=VEHICLE_TYPES, kind='line')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Vehicle Count')\n    ax.set_title('Traffic Data')\n\n    return file_path, ax\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data specified hours save CSV file colomns 'Time' 'Condition' back backup directory Parameters hours (int): number hours weather data generated output_dir (str optional): output file path Returns str path generated CSV file Requirements datetime - os random csv shutil Example 'weather_data.csv' task_func(24) True 'weather_data.csv' task_func(10) True\n    \"\"\"\n    # Create output directory if not exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate weather data\n    weather_data = []\n    for hour in range(hours):\n        time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time, condition])\n\n    # Save weather data to CSV file\n    output_file = os.path.join(output_dir, 'weather_data.csv')\n    with open(output_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(weather_data)\n\n    # Backup CSV file\n    backup_dir = os.path.join(output_dir, 'backup')\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    backup_file = os.path.join(backup_dir, 'weather_data_backup.csv')\n    shutil.copy(output_file, backup_file)\n\n    return output_file\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Generate visualize Pandas DataFrame results football matches multiple teams 'Team' random goals penalties Cost Penalties converted into fines penalty costs. Parameters goals maximum goals team score penalties maximum penalties team receive Returns pd.DataFrame dataframe containing match results list two seaborn plot objects (Axes goals penalty costs Requirements pandas - seaborn matplotlib.pyplot random Example df, plots = task_func(5, 3)\n    \"\"\"\n    # Generate random goals and penalties for each team\n    goals = [randint(0, goals) for _ in range(len(TEAMS))]\n    penalties = [randint(0, penalties) for _ in range(len(TEAMS))]\n\n    # Calculate fines for each team\n    fines = [penalty_cost * penalty for penalty_cost, penalty in zip(penalties, penalties)]\n\n    # Create DataFrame\n    df = pd.DataFrame({'Team': TEAMS, 'Goals': goals, 'Penalties': penalties, 'Fine': fines})\n\n    # Plot goals\n    goals_plot = sns.barplot(x='Team', y='Goals', data=df)\n    goals_plot.set_title('Goals Scored by Team')\n\n    # Plot penalties and fines\n    penalty_fine_plot = sns.barplot(x='Team', y='Fine', data=df)\n    penalty_fine_plot.set_title('Penalty Fines by Team')\n\n    return df, [goals_plot, penalty_fine_plot]\n"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create Pandas DataFrame random integer values 0 9 given rows Count non-zero values each column visualize bar plot Parameters rows number rows DataFrame Returns tuple tuple containing elements DataFrame generated DataFrame random integer values Axes matplotlib Axes object bar plot Requirements numpy - pandas matplotlib.pyplot Example df, ax = task_func(10) >>> print(ax.title.get_text()) return 'Non-Zero Value Counts'\n    \"\"\"\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n    non_zero_counts = df.astype(bool).sum()\n    ax = non_zero_counts.plot(kind='bar')\n    ax.set_title('Non-Zero Value Counts')\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Generate Pandas DataFrame grades randomly selected multiple courses Calculate average grade course number students passing grade (>= visualize bar plot title 'Course-wise Average Passing Grade Counts' Parameters: num_students number students sample Returns Tuple[pd.DataFrame plt.Axes] tuple generated DataFrame bar plot Axes object Requirements pandas numpy matplotlib.pyplot random typing Example df ax = task_func(50) ax.get_title() 'Course-wise Average Passing Grade Counts'\n    \"\"\"\n    # Generate random data\n    num_courses = 5\n    grades = np.random.randint(0, 101, size=(num_students, num_courses))\n    course_names = [f'Course {i+1}' for i in range(num_courses)]\n    student_names = [f'Student {i+1}' for i in range(num_students)]\n    df = pd.DataFrame(grades, columns=course_names, index=student_names)\n    # Calculate average grade for each course\n    avg_grades = df.mean()\n    # Calculate number of students passing grade (>= 50)\n    passing_counts = (df >= 50).sum()\n    # Create bar plot\n    ax = avg_grades.plot(kind='bar', color='skyblue')\n    ax.set_title('Course-wise Average Passing Grade Counts')\n    ax.set_xlabel('Course')\n    ax.set_ylabel('Average Passing Grade')\n    ax.set_xticklabels(course_names, rotation=0)\n    ax.set_ylim(0, 100)\n    ax.set_yticks(np.arange(0, 101, 10))\n    ax.set_yticklabels([f'{i}%' for i in range(0, 101, 10)])\n    ax.grid(axis='y')\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit exponential decay function indices array first column matches target value Parameters array (np numpy array first column searched target value target_value (float int): value first column filter data fitting Returns tuple optimized parameters fitting function matplotlib Axes object Requirements numpy scipy.optimize matplotlib.pyplot import numpy np array = np.array([[1, 2] [1 3] 4] [2, 5] 6]] target = 1 params ax task_func(array, target) len(params) 3\n    \"\"\"\n    # Filter data\n    filtered_data = array[array[:, 0] == target_value]\n    # Extract x and y data\n    x_data = filtered_data[:, 0]\n    y_data = filtered_data[:, 1]\n    # Define exponential decay function\n    def exp_decay(x, a, b, c):\n        return a * np.exp(-b * x) + c\n    # Fit data\n    params, params_covariance = optimize.curve_fit(exp_decay, x_data, y_data)\n    # Plot data\n    ax = plt.figure().add_subplot(111)\n    ax.plot(x_data, y_data, 'o', label='Data')\n    ax.plot(x_data, exp_decay(x_data, *params), '-', label='Fit')\n    ax.legend()\n    return params, ax\n\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from text documents using Non-Negative Matrix Factorization (NMF). function preprocesses input texts removing non-alphanumeric characters to lowercase stopwords vectorizes processed texts using TF-IDF applies NMF to extract topics Each topic represented as list of significant words based on NMF component weights. Parameters texts input text documents from extract topics num_topics number of topics to extract Returns list each element of words representing topic. Requirements re - nltk - sklearn.decomposition - sklearn.feature_extraction.text Example texts = \"Data science study data \"Machine learning learn from data \"Python programming language in data science.\" topics = task_func(texts, 2) print(topics) [['data 'science'systems' 'provides output may vary TF-IDF vectorization NMF initialization\n    \"\"\"\n    # Preprocess texts\n    processed_texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    processed_texts = [' '.join([word for word in text.split() if word not in STOPWORDS]) for text in processed_texts]\n\n    # Vectorize texts using TF-IDF\n    vectorizer = TfidfVectorizer()\n    tfidf_matrix = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF to extract topics\n    nmf = NMF(n_components=num_topics, random_state=42)\n    nmf.fit(tfidf_matrix)\n\n    # Get the words for each topic\n    feature_names = vectorizer.get_feature_names_out()\n    topics = []\n    for topic_idx, topic in enumerate(nmf.components_):\n        top_features_ind = topic.argsort()[:-11:-1]\n        top_features = [feature_names[i] for i in top_features_ind]\n        topics.append(top_features)\n\n    return topics\n\n"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from texts using gensim Word2Vec model nltk.corpus.stopwords texts cleaned removing non-alphanumeric characters except space lowercased stop words Parameters texts strings stopwords optional): removed not provided nltk's stopwords used Returns Word2Vec trained Word2Vec model Requirements nltk gensim Example texts\"Hello World!\" \"Machine Learning \"Python favorite programming language\" model = task_func(texts) vector = model.wv['python']\n    \"\"\"\n    if stopwords is None:\n        stopwords = set(nltk.corpus.stopwords.words('english'))\n    # Clean texts\n    texts = [ALPHANUMERIC.sub(' ', text).lower() for text in texts]\n    # Tokenize texts\n    texts = [text.split() for text in texts]\n    # Remove stopwords\n    texts = [[word for word in text if word not in stopwords] for text in texts]\n    # Train Word2Vec model\n    model = Word2Vec(texts, min_count=1)\n    return model\n\n\u8fd9\u6bb5\u4ee3\u7801\u5b9a\u4e49\u4e86\u4e00\u4e2a\u540d\u4e3a `task_func` \u7684\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u4f7f\u7528 `gensim` \u5e93\u4e2d\u7684 `Word2Vec` \u6a21\u578b\u4ece\u6587\u672c\u4e2d\u751f\u6210\u8bcd\u5411\u91cf\u3002\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a`texts` \u548c `stopwords`\u3002\n\n`texts` \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u4e00\u4e2a\u6587\u672c\u3002`stopwords` \u662f\u4e00\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u8981\u79fb\u9664\u7684\u505c\u7528\u8bcd\u3002\u5982\u679c\u6ca1\u6709\u63d0\u4f9b `stopwords` \u53c2\u6570\uff0c\u51fd\u6570\u5c06\u4f7f\u7528 `nltk` \u5e93\u4e2d\u7684\u82f1\u8bed\u505c\u7528\u8bcd\u3002\n\n\u51fd\u6570\u9996\u5148\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f `ALPHANUMERIC` \u6e05\u7406\u6587\u672c\uff0c\u5c06\u975e\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\uff08\u9664\u4e86\u7a7a\u683c\uff09\u66ff\u6362\u4e3a\u7a7a\u683c\uff0c\u5e76\u5c06\u6240\u6709\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\u7136\u540e\uff0c\u5b83\u5c06\u6bcf\u4e2a\u6587\u672c\u5206\u5272\u6210\u5355\u8bcd\uff0c\u5e76\u79fb\u9664\u505c\u7528\u8bcd\u3002\u6700\u540e\uff0c\u5b83\u4f7f\u7528 `Word2Vec` \u6a21\u578b\u8bad\u7ec3\u4e00\u4e2a\u8bcd\u5411\u91cf\u6a21\u578b\uff0c\u5e76\u8fd4\u56de\u8be5\u6a21\u578b\u3002\n\n\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u4e00\u4e2a `Word2Vec` \u6a21\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528\u8be5\u6a21\u578b\u7684 `wv` \u5c5e\u6027\u8bbf\u95ee\u8bcd\u5411\u91cf\u3002\u4f8b\u5982\uff0c`model.wv['python']` \u5c06\u8fd4\u56de\u5355\u8bcd \"python\" \u7684\u8bcd\u5411\u91cf\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u4e3a\u4e86\u8fd0\u884c\u6b64\u51fd\u6570\uff0c\u60a8\u9700\u8981\u5b89\u88c5 `nltk` \u548c `gensim` \u5e93\uff0c\u5e76\u4e14\u60a8\u9700\u8981\u4e0b\u8f7d `nltk` \u7684\u505c\u7528\u8bcd\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u4e0b\u8f7d\u505c\u7528\u8bcd\u6570\u636e\uff1a\n\n"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes JSON files directory function reads each JSON file into DataFrame inserts \"Source\" column filename processed files moved to \"processed subdirectory path may not exist Parameters path (str): directory JSON files Returns df (pandas.DataFrame): DataFrame data processed files Requirements pandas - json - os - shutil Example os.mkdir('data') open('data/a.json f.write({\"a\": 1 2} 3 4}] 36 open('data/b.json f f.write([{\"a\": 5 6} 7 8}] 36 df = task_func('data') print(df) source 0 5 6 b.json 1 7 8 b.json 0 1 2 a.json 1 3 4 a.json shutil.rmtree('data')\n    \"\"\"\n    if not os.path.exists(path):\n        os.makedirs(path)\n    if not os.path.exists(os.path.join(path, 'processed')):\n        os.makedirs(os.path.join(path, 'processed'))\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n            df = pd.DataFrame(data)\n            df.insert(0, 'Source', filename)\n            shutil.move(os.path.join(path, filename), os.path.join(path, 'processed', filename))\n            return df\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create delete CSV file \"task_func_data/Output.txt with sensor data temperature humidity data generated randomly written append mode deleted after use Returns Returns path CSV file before deletion Requirements os csv random datatime Example task_func()\n    \"\"\"\n    # Create directory if not exists\n    if not os.path.exists(\"task_func_data\"):\n        os.makedirs(\"task_func_data\")\n\n    # Create CSV file\n    csv_file = \"task_func_data/Output.txt\"\n    with open(csv_file, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Temperature\", \"Humidity\", \"Time\"])\n\n    # Generate random sensor data and write to CSV file\n    for _ in range(10):\n        temperature = random.uniform(20, 30)\n        humidity = random.uniform(40, 60)\n        time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        with open(csv_file, \"a\", newline=\"\") as file:\n            writer = csv.writer(file)\n            writer.writerow([temperature, humidity, time])\n\n    # Delete CSV file after use\n    os.remove(csv_file)\n\n    return csv_file\n\ntask_func()\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data from URL save CSV file Parameters url (str): URL Returns CSV_FILE_PATH (str): path CSV file scraped data saved Requirements urllib - bs4 - csv - os Example task_func('http://www.example/ 'scraped_data.csv'\n    \"\"\"\n    # Send HTTP request\n    response = urllib.request.urlopen(url)\n    # Parse HTML content\n    soup = BeautifulSoup(response, 'html.parser')\n    # Find all table rows\n    rows = soup.find_all('tr')\n    # Create CSV file\n    with open(CSV_FILE_PATH, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        # Write header row\n        writer.writerow(['Name', 'Email', 'Phone'])\n        # Write data rows\n        for row in rows:\n            # Find all table data cells\n            cells = row.find_all('td')\n            # Extract data\n            name = cells[0].text.strip()\n            email = cells[1].text.strip()\n            phone = cells[2].text.strip()\n            # Write data row\n            writer.writerow([name, email, phone])\n    # Return path to CSV file\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train linear regression model return model score test set DataFrame as training data target_column target training model Before training data split into training test set using test_size random_state parameters Parameters data input data for training target_column predict random_state seed for train-test split Defaults to 0 test_size size test set Defaults to 0.2 Returns model's score ValueError data not DataFrame data empty target_column not data values not numeric random_state not integer test_size not between 0 and 1. Requirements - pandas - sklearn.model_selection.train_test_split sklearn.linear_model.LinearRegression - numpy Example rng = np.random.default_rng(seed=42) data = pd.DataFrame( 'x1 rng.random(100),.random 'y.random(100) result = task_func(data random_state=2 test_size=0.3) result -0.25486317198996633 data = pd.DataFrame( 'x1 rng.random(500), data['y'] = data['x1'] * 2 + 1 result = task_func(data random_state=9 test_size=0.1) result 1.0\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame\")\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column must be a column in data\")\n    if not np.issubdtype(data[target_column].dtype, np.number):\n        raise ValueError(\"target_column values must be numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n    if not (0 <= test_size <= 1):\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    X_train, X_test, y_train, y_test = train_test_split(data.drop(target_column, axis=1), data[target_column], test_size=test_size, random_state=random_state)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    return model.score(X_test, y_test)\n"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates random DataFrame with 100 records Each record ID 1 to 100), Name (randomly selected from lists Latin other names), Date of Birth Email using name year birth email domain). Improperly encoded Latin characters names corrected. Parameters start_year starting year birth years Defaults to 1980 end_year ending year Defaults to 2000. email_domain domain for email addresses Defaults to 'example.com' latin_names Latin names generation Defaults to'Sopet\u00f3n 'M\u00e9ndez 'G\u00f3mez 'P\u00e9rez 'Mu\u00f1oz' other_names other names generation Defaults'Smith 'Johnson 'Williams 'Brown 'Jones' rng_seed seed for rng. Returns DataFrame pandas DataFrame containing generated user data has columns 'ID' 'Name' 'Date of Birth' 'Email'. Requirements pandas - numpy - codecs re - datetime Examples df = task_func(rng_seed=1) >>> print(df) ID Name Date of Birth Email Brown 1992-09-10 brown1992@example.com Smith 1996-02-13 smith1996@example.com Jones 1986-10-19 jones1986@example G\u00f3mez 2000-12-11 g\u00f3mez2000@example.com G\u00f3mez 1984-08-24 g\u00f3mez1984@example.Johnson 1990-09-17@example Brown 1992-10-14 brown1992@example.com Mu\u00f1oz 1998-05-04@example Mu\u00f1oz 1982-01-01 mu\u00f1oz1982@example.com Jones 1990-03-28 jones1990@example.com rows 4 columns df task_func(start_year=0 end_year=1200 email.at_seed=3 print(df) ID Name Date Birth Email Sopet\u00f3n 0952-09-01 00:00:00@test.at Brown 0875-10-10 brown875@test.at Sopet\u00f3n 0605-08-15@test.at G\u00f3mez 0337-11-23 00:00:00 g\u00f3mez337@test.at G\u00f3mez 0641-04-27@test.at Brown 0044-05-17 brown44@test.at 97 Williams 0530-01-21 williams530@test.at Johnson 1005-12-15 johnson1005@test.at M\u00e9ndez 1134-07-19 m\u00e9ndez1134@test.at Johnson 0696-08-22 00:00:00 johnson696@test.at <BLANKLINE 4 columns\n    \"\"\"\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n    \n    # Generate random names\n    names = np.random.choice(latin_names + other_names, size=100)\n    \n    # Generate random dates of birth\n    start_date = datetime.date(start_year, 1, 1)\n    end_date = datetime.date(end_year, 12, 31)\n    time_between_dates = end_date - start_date\n    days_between_dates = time_between_dates.days\n    random_number_of_days = np.random.randint(days_between_dates, size=100)\n    dates = start_date + datetime.timedelta(days=random_number_of_days)\n    \n    # Generate random email addresses\n    emails = [f\"{name.lower()}_{year}@{email_domain}\" for name, year in zip(names, dates.year)]\n    \n    # Create DataFrame\n    df = pd.DataFrame({\n        'ID': range(1, 101),\n        'Name': names,\n        'Date of Birth': dates,\n        'Email': emails\n    })\n    \n    # Correct improperly encoded Latin characters\n    df['Name'] = df['Name'].apply(lambda x: codecs.decode(codecs.encode(x, 'utf-8'), 'unicode_escape'))\n    \n    return df\n"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read list dictionaries from JSON file calculate mean median each key write results to CSV file Parameters input_file JSON file name output_file (str): CSV file name Returns dict: dictionary each key field input JSON each value another dictionary mean median field Requirements numpy collections json csv Example task_func('data.json 'stats.csv')\n    \"\"\"\n    # Read JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n    # Initialize dictionary\n    stats = defaultdict(lambda: defaultdict(float))\n    # Calculate mean and median for each key\n    for item in data:\n        for key, value in item.items():\n            if isinstance(value, (int, float)):\n                stats[key]['mean'] += value\n                stats[key]['median'] += value\n    # Calculate mean and median\n    for key in stats:\n        stats[key]['mean'] /= len(data)\n        stats[key]['median'] = np.median([item[key] for item in data])\n    # Write results to CSV file\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['key', 'mean', 'median'])\n        for key in stats:\n            writer.writerow([key, stats[key]['mean'], stats[key]['median']])\n    return stats\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from dictionary checking if file exists content copies to target directory Parameters kwargs (dict): dictionary keys file paths values file content target_dir (str optional): directory files copied Defaults 'non_none_files' Returns copied_files (list): list full file paths copied Requirements os pathlib.Path - shutil Example files = {/path/to/file1.txt 'Hello'/file2.txt None/file3.txt 'World'} task_func(files) files =/file4.txt 'Another'/file5.txt 'Example'} task_func(files target_dir=\"another_directory\")\n    \"\"\"\n    copied_files = []\n    for file_path, file_content in kwargs.items():\n        if file_content is not None:\n            file_path = Path(file_path)\n            target_path = Path(target_dir) / file_path.name\n            with open(target_path, \"w\") as f:\n                f.write(file_content)\n            copied_files.append(str(target_path))\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes CSV files directory specified pattern creates new files altered names preserving content solid foundation initial tests Parameters directory (str): path directory containing CSV files processed pattern (str optional): regular expression pattern filenames match Returns new_files (list): list strings each string filename new CSV file created Requirements re - os pathlib - csv Example task_func(\"/mnt/data/test_data\") ['Shan.csv', 'Shannon.csv']\n    \"\"\"\n    new_files = []\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            file_path = Path(directory) / file\n            with open(file_path, 'r') as f:\n                reader = csv.reader(f)\n                data = list(reader)\n            new_file_name = re.sub(r'-\\d+\\.csv$', '.csv', file)\n            new_file_path = Path(directory) / new_file_name\n            with open(new_file_path, 'w', newline='') as f:\n                writer = csv.writer(f)\n                writer.writerows(data)\n            new_files.append(new_file_name)\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip zip files directory pattern splitting filename last time \"-\" using prefix part directory extract Parameters: directory (str): directory zip files pattern (str): Regex pattern match zip files Returns list directories files extracted. Requirements - os - re - zipfile Example task_func('/tmp/my_data') ('/tmp/backup/backup_20230827010101', [])\n    \"\"\"\n    # Get list zip files\n    zip_files = [f for f in os.listdir(directory) if re.match(pattern, f)]\n    # Create list directories files extracted\n    extracted_files = []\n    # Iterate zip files\n    for zip_file in zip_files:\n        # Create path zip file\n        zip_file_path = os.path.join(directory, zip_file)\n        # Create path directory extract\n        extract_dir = os.path.join(directory, re.match(pattern, zip_file).group(1))\n        # Create directory extract\n        os.makedirs(extract_dir, exist_ok=True)\n        # Unzip file\n        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n            zip_ref.extractall(extract_dir)\n        # Add directory extract to list\n        extracted_files.append(extract_dir)\n    # Return list directories files extracted\n    return extracted_files\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive files match pattern delete original files Parameters pattern (str): pattern match files Returns archive_file (str): archive file path Requirements subprocess os glob Example task_func('*.txt') function archive file path\n    \"\"\"\n    # Get files match pattern\n    files = glob.glob(pattern)\n\n    # Create archive file\n    archive_file = os.path.join(ARCHIVE_DIR, 'archive.tar.gz')\n    with tarfile.open(archive_file, 'w:gz') as tar:\n        for file in files:\n            tar.add(file)\n\n    # Delete original files\n    for file in files:\n        os.remove(file)\n\n    return archive_file\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    total goals penalties CSV file update with goals Parameters goals (dict): dictionary keys team names values numbers goals scored penalties dictionary keys team names values numbers penalties incurred Returns count (Counter.collections): Counter object total counts goals penalties Requirements csv os collections.Counter Example goals'Team A' 3 B' 2 C' 1 D' 0 E' 2} penalties = A' 1 B' 0 C' 2 D' 3 E' 1} counts = task_func(goals penalties) print(counts) Counter({'goals': 8 'penalties': 7})\n    \"\"\"\n    # Read the CSV file\n    with open(csv_file_path, 'r') as file:\n        reader = csv.reader(file)\n        data = list(reader)\n\n    # Update the data with the new goals and penalties\n    for row in data[1:]:\n        team = row[0]\n        row[1] = str(goals.get(team, 0))\n        row[2] = str(penalties.get(team, 0))\n\n    # Write the updated data back to the CSV file\n    with open(csv_file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n\n    # Count the total goals and penalties\n    counts = Counter()\n    for row in data[1:]:\n        counts['goals'] += int(row[1])\n        counts['penalties'] += int(row[2])\n\n    return counts\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files source directory to target directory specified pattern function iterates through files source directory if file name matches pattern moved to target directory. Parameters: source_dir (str): path target_dir (str): file_pattern (str optional): regular expression pattern filenames match moved Default is r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b' matches filenames alphanumeric characters extensions doc docx. Returns moved_files_count (int): number of files successfully moved source to target. Requirements re - os - shutil Example task_func('/path/to/source', '/path/to/target') 3 example move 3 files from/source to/target if filenames match default pattern\n    \"\"\"\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            source_file = os.path.join(source_dir, filename)\n            target_file = os.path.join(target_dir, filename)\n            shutil.move(source_file, target_file)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calculate similarity values between texts cosine similarity Levenshtein ratio texts cleaned non-alphanumeric characters converted to lowercase Cosine similarity computed term frequency Levenshtein ratio computed using 'ratio' function 'python-Levenshtein' library measures similarity strings between 0 and 1. Parameters text1 first string compare text2 second string compare Returns tuple cosine similarity Levenshtein ratio floats cosine similarity (float): ranges 0 to 1 1 identical term frequency 0 no common terms levenshtein_ratio (float): ratio ranges 0 to 1 1 means strings identical 0 different. Requirements re - numpy - collections - Levenshtein Example task_func(\"Hello, World!\", World\") (0.9999999999999998, 0.9565217391304348)\n    \"\"\"\n    # Clean the texts\n    text1 = ALPHANUMERIC.sub('', text1).lower()\n    text2 = ALPHANUMERIC.sub('', text2).lower()\n\n    # Compute term frequency\n    tf1 = Counter(text1)\n    tf2 = Counter(text2)\n\n    # Compute cosine similarity\n    common_terms = set(tf1.keys()) & set(tf2.keys())\n    dot_product = sum(tf1[t] * tf2[t] for t in common_terms)\n    magnitude1 = np.sqrt(sum(tf1[t] ** 2 for t in tf1))\n    magnitude2 = np.sqrt(sum(tf2[t] ** 2 for t in tf2))\n    cosine_similarity = dot_product / (magnitude1 * magnitude2)\n\n    # Compute Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    return cosine_similarity, levenshtein_ratio\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate permutations list numbers calculate sum factorials each empty list function returns empty lists Parameters numbers (list int): list integers permute calculate factorial sums Returns list int sums factorials each permutations TypeError not list integers ValueError input numbers negative Requirements functools.reduce itertools.permutations math.factorial Example fac perm = task_func([1, 2, 3]) print(fac) [9, 9] print(perm) [(1, 2, 3) (1, 3, 2) (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1)] fac perm task_func([0, 4]) print(fac) [25, 25] print(perm) [(0, 4), (4, 0)]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input numbers must be a list\")\n    if not all(isinstance(i, int) for i in numbers):\n        raise TypeError(\"Input numbers must be a list of integers\")\n    if any(i < 0 for i in numbers):\n        raise ValueError(\"Input numbers must be non-negative\")\n    perm = list(permutations(numbers))\n    fac = [reduce(lambda x, y: x * y, [math.factorial(i) for i in p]) for p in perm]\n    return fac, perm\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from directory (SOURCE_DIR to another (DEST_DIR based specified file extensions issues warnings for files transferred issues Parameters SOURCE_DIR (str): source directory path DEST_DIR (str): destination directory path EXTENSIONS (list): list file extensions for transferring Example ['.txt' '.csv' '.xlsx' Returns transferred_files (list): list names of files successfully transferred. Requirements warnings - os - glob shutil time Example task_func('/path/to/source'/destination'.txt '.csv']) ['file1.txt' 'file2.csv'] >>> task_func(/path/to/source/destination''.jpg']\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.exists(SOURCE_DIR):\n        warnings.warn(f\"Source directory '{SOURCE_DIR}' does not exist.\")\n        return []\n\n    # Check if destination directory exists, if not create it\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n\n    # Get list of files with specified extensions\n    files = []\n    for extension in EXTENSIONS:\n        files.extend(glob.glob(os.path.join(SOURCE_DIR, f\"*{extension}\")))\n\n    # Transfer files\n    transferred_files = []\n    for file in files:\n        try:\n            shutil.move(file, DEST_DIR)\n            transferred_files.append(os.path.basename(file))\n            time.sleep(0.1)  # Add delay to avoid potential issues with file access\n        except Exception as e:\n            warnings.warn(f\"Failed to transfer file '{file}': {e}\")\n\n    return transferred_files\n"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    function takes list tuples elements counts weights normalizes counts z-score weights min-max scaling returns pandas DataFrame items counts weights Parameters data each tuple element count weight Example('A' 100, 0.5),'B' 200, Returns DataFrame pandas DataFrame three columns 'Item Count Weight Each corresponds entry input data Requirements pandas numpy scipy.stats.zscore sklearn.preprocessing.MinMaxScaler data('A' 100, 0.5),'B' 200, 0.6),'C' 150, 0.7) report task_func(data) print Item Normalized Count Weight A -1.224745 0.0 1 B 1.224745 0.5 2 C 0.000000 1.0 data'Andrew 5743,'Elizabeth 4655, 1.0875)'Susan 4716, 0.65)'Christopher 2100, 0.05)'Timothy 3943, 0.175) report task_func(data print Item Normalized Count Weight Andrew 1.248851 0.843373 Elizabeth 0.349969 1.000000 Susan 0.400366 0.578313 Christopher -1.760916 0.000000 Timothy -0.238270 0.120482\n    \"\"\"\n    # Convert data to pandas DataFrame\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    \n    # Normalize counts\n    df['Normalized Count'] = zscore(df['Count'])\n    \n    # Normalize weights\n    df['Normalized Weight'] = zscore(df['Weight'])\n    \n    # Scale counts\n    scaler = MinMaxScaler()\n    df['Scaled Count'] = scaler.fit_transform(df[['Count']])\n    \n    # Scale weights\n    df['Scaled Weight'] = scaler.fit_transform(df[['Weight']])\n    \n    return df\n\n"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calculate mean numerical values position tuples list Non-numeric values ignored means computed available data missing data ignored DataFrame columns 'Mean Value' contains mean values tuple positions index 'Position i' i current position empty list passed empty DataFrame returned Parameters data_list mixed data types (string int float Defaults [('a', 1, 2.1), ('b', 2, 3.2),'c', 3, 4.3),'d', 4, 5.4)'e' 5, 6.5) Returns DataFrame DataFrame mean values numerical data each position Requirements pandas numpy itertools Example df = task_func() print(df) Mean Value Position 0 1 3.0 2 4.3 data [('a' '1 2.1),'b' 21, 'c'), (12, 3, 4.3),'d 4, 5.4)'e' 5, 6.5) df_func print(df) Mean Value Position 0 Position 1 3.0 2 4.3\n    \"\"\"\n    # Create a DataFrame from the list of tuples\n    df = pd.DataFrame(data_list, columns=['Position', 'Value 1', 'Value 2'])\n\n    # Filter out non-numeric values\n    df = df[df['Value 1'].apply(lambda x: isinstance(x, (int, float)))]\n    df = df[df['Value 2'].apply(lambda x: isinstance(x, (int, float)))]\n\n    # Calculate the mean of the remaining values\n    mean_values = df[['Value 1', 'Value 2']].mean(axis=1)\n\n    # Create a new DataFrame with the mean values\n    result_df = pd.DataFrame({'Mean Value': mean_values})\n\n    # Add the positions as an index\n    result_df.index = df['Position']\n\n    return result_df\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    chi-square test independence variables contingency table function takes DataFrame categorical data two column names constructs contingency table columns performs chi-square test independence returns p-value test probability observing data if null hypothesis (independence variables true Parameters data (pd.DataFrame): DataFrame categorical variables col1 first column col2 second column Returns p-value chi-square test independence ValueError: If 'data' empty 'col1 or 'col2' not columns multiple categories categories less than 5 observations (violating chi-square test assumptions). TypeError: columns contain non-categorical data. Requirements numpy pandas scipy.stats.chi2_contingency Examples data = pd.DataFrame( 'Var1': ['A'] * 40 + ['B'] * 60 'Var2': ['X'] * 25 + ['Y'] * 25 * 25 * 25 task_func(data 'Var1', 'Var2') 0.06619257972219346 >>> np.random.seed(42) data = pd.DataFrame({ 'a' np.random.choice( 'B size=100), 'b'.random.choice(['X 'Y] size=100) ... task_func(data 'a', 'b') 1.0\n    \"\"\"\n    if data.empty:\n        raise ValueError(\"Data is empty\")\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(f\"{col1} or {col2} not in columns\")\n    if not all(data[col1].dtype == 'object') or not all(data[col2].dtype == 'object'):\n        raise TypeError(\"Columns contain non-categorical data\")\n    if len(data[col1].unique()) < 2 or len(data[col2].unique()) < 2:\n        raise ValueError(\"Multiple categories\")\n    if len(data) < 5:\n        raise ValueError(\"Less than 5 observations\")\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n    return p\n\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate dice rolls calculate frequency return frequency array histogram dice rolls 6 outcomes title histogram \"Histogram of Dice Rolls\". x-axis \"Dice Value y-axis \"Frequency\". Parameters rolls number dice rolls Returns tuple np numpy array frequency each outcome matplotlib.Axes Axes object histogram Requirements numpy matplotlib.pyplot random Examples import random random.seed(0) outcomes ax = task_func(10000) print(outcomes) [1656 1690 1696 1657 1632 1669] plt.show() random.seed(10) outcomes ax = task_func(100) print(outcomes) [15 21 17 22 16 9] plt.show()\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n    outcomes = [0] * len(NUMBERS)\n    for _ in range(rolls):\n        roll = random.choice(NUMBERS)\n        outcomes[roll - 1] += 1\n    return np.array(outcomes)\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives processed files from source to target directory function identifies processed files by '_processed' suffix in filename Parameters: source_dir directory files archived target_dir (str): directory archive saved archive_name (str): name archive file Default is 'archive.zip' Returns str path to created archive. Requirements: - os - re - shutil - zipfile Example task_func(/data/_processed/_processed/archive.zip' task_archive.zip_archive.zip\n    \"\"\"\n    # Create target directory if it does not exist\n    os.makedirs(target_dir, exist_ok=True)\n\n    # Create archive name with target directory\n    archive_path = os.path.join(target_dir, archive_name)\n\n    # Create a list of files to archive\n    files_to_archive = []\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if file.endswith('_processed'):\n                files_to_archive.append(os.path.join(root, file))\n\n    # Create a zip file and add the files to it\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        for file in files_to_archive:\n            zipf.write(file, os.path.relpath(file, source_dir))\n\n    return archive_path\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts stock closing prices next 7 days linear regression plots data Parameters df input dataframe columns 'date 'closing_price 'date datetime format Returns tuple list predicted prices 7 days Axes matplotlib Axes object plot Requirements pandas numpy matplotlib.pyplot sklearn.linear_model.LinearRegression Constants function uses constant time step 24*60 seconds generate future timestamps Example df pd.DataFrame( 'date.date_range(start end'1/7/2021 'closing_price [100 101 102 103 104 105 106] pred_prices plot task_func(df) print(pred_prices) [107.0 108.0 109.0 110.0 111.0 112.0 113.0]\n    \"\"\"\n    # Convert date column to datetime\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Sort dataframe by date\n    df = df.sort_values('date')\n    \n    # Create a linear regression model\n    model = LinearRegression()\n    \n    # Fit the model to the data\n    model.fit(df[['date']], df['closing_price'])\n    \n    # Generate future timestamps\n    future_dates = pd.date_range(start=df['date'].iloc[-1], periods=8, freq='24H')\n    \n    # Predict future closing prices\n    pred_prices = model.predict(future_dates.values.reshape(-1, 1))\n    \n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(df['date'], df['closing_price'], label='Actual')\n    ax.plot(future_dates, pred_prices, label='Predicted')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Stock Closing Prices')\n    ax.legend()\n    \n    return pred_prices, ax\n"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies plots outliers 'closing_price column DataFrame Z-Score method Parameters df (pandas.DataFrame): input DataFrame column 'closing_price' numerical values z_threshold absolute Z-Score threshold identifying outliers Default 2. Returns tuple pandas.DataFrame outliers 'closing_price column matplotlib.axes. plot object displaying outliers x-axis 'Index y-axis 'Closing Price title 'Outliers Closing Prices Requirements numpy matplotlib.pyplot scipy.stats.zscore Z-Score threshold identifying outliers customizable 'z_threshold' parameter Examples import pandas pd df1 = pd.DataFrame( 'closing_price' [100 101 102 103 104 150 outliers1 plot1 task_func(df1) df2 = pd.DataFrame( 'closing_price' [10 20 30 40 50 100 outliers2 plot2 = task_func(df2 z_threshold=1.5)\n    \"\"\"\n    # Calculate Z-Score for 'closing_price' column\n    df['z_score'] = zscore(df['closing_price'])\n    \n    # Identify outliers based on Z-Score threshold\n    outliers = df[df['z_score'].abs() > z_threshold]\n    \n    # Plot outliers\n    plot = df.plot(x='Index', y='closing_price', title='Outliers Closing Prices')\n    outliers.plot(x='Index', y='closing_price', kind='scatter', color='red', ax=plot)\n    \n    return outliers, plot\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize distribution stock closing prices using box plot histogram single figure function understand spread central tendency distribution shape tile box plot 'Box Plot Closing Prices' title histogram 'Histogram Closing Prices' Requirements pandas matplotlib.pyplot seaborn Parameters df (DataFrame): pandas DataFrame one column 'closing_price' stock closing prices Returns tuple two matplotlib.axes..Axes objects first boxplot second histogram Example df = pd.DataFrame({ 'closing_price': [100, 101 102 103 104 150] ... }) boxplot_ax histplot_ax = task_func(df) print(boxplot_ax.get_title()) Box Plot Closing Prices print(histplot_ax.get_title()) Histogram Closing Prices\n    \"\"\"\n    # Create a boxplot of the closing prices\n    boxplot_ax = sns.boxplot(data=df['closing_price'])\n    boxplot_ax.set_title('Box Plot Closing Prices')\n\n    # Create a histogram of the closing prices\n    histplot_ax = sns.histplot(data=df['closing_price'])\n    histplot_ax.set_title('Histogram Closing Prices')\n\n    return boxplot_ax, histplot_ax\n\nThe function `task_func` takes a pandas DataFrame as input and returns a tuple of two matplotlib.axes.Axes objects. The first object is a boxplot of the closing prices, and the second object is a histogram of the closing prices. The function uses the seaborn library to create the boxplot and histogram.\n\nHere is an example of how to use the function:\n\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts share closing prices 7 days ARIMA model plots forecast Parameters df (pd.DataFrame): input dataframe columns 'date 'closing_price datetime dtype_price float Returns Tuple[List Axes tuple list forecasted prices 7 days matplotlib Axes object subplot Requirements pandas numpy matplotlib.pyplot statsmodels.arima.model.ARIMA Example df pd.DataFrame( 'date.date_range(start end'1/7/2021 'closing_price [100 101 102 103 104 105 106] forecast ax task_func(df) print(forecast) [106.99999813460752 107.99999998338443 108.99999547091295 109.99999867405204 110.99999292499156 111.99999573455818 112.9999903188028\n    \"\"\"\n    # Convert date column to datetime\n    df['date'] = pd.to_datetime(df['date'])\n    \n    # Set date as index\n    df.set_index('date', inplace=True)\n    \n    # Fit ARIMA model\n    model = ARIMA(df['closing_price'], order=(7, 0, 0))\n    model_fit = model.fit()\n    \n    # Forecast 7 days ahead\n    forecast = model_fit.forecast(steps=7)\n    \n    # Plot forecast\n    ax = df['closing_price'].plot(figsize=(10, 6))\n    forecast.plot(ax=ax)\n    ax.set_title('Share Closing Price Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    \n    return forecast, ax\nHere is the corrected code:\n\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing two-letter combinations lowercase English alphabets dictionary values represent frequency word If combination value 0. Requirements collections.Counter itertools string Parameters word (str): input string alphabetic characters Returns dict dictionary with keys two-letter alphabet combinations values counts in word function uses `collections.Counter library count occurrences two-letter combinations uses `itertools.permutations` method generate two-letter combinations uses `string` library get string lowercase alphabets Example list(task_func('abcdef').items())[:5] [('ab', 1) ('ac', 0), ('ad', 0), ('ae', ('af', 0)]\n    \"\"\"\n    alphabet = string.ascii_lowercase\n    combinations = list(itertools.permutations(alphabet, 2))\n    counter = Counter(word)\n    result = {}\n    for combination in combinations:\n        result[combination] = counter[combination]\n    return result\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create visualize sales report categories Parameters start_date start date 'YYYY-MM-DD' format Default '2016-01-01' periods number periods report Default 13. freq frequency dates Default 'WOM-2FRI' (WeekOfMonth-2nd categories categories report Default'Electronics 'Fashion 'Home & Kitchen 'Automotive 'Sports' Returns Returns DataFrame sales data columns 'Date 'Category' 'Sales' Returns Matplotlib Axes object plot Requirements pandas matplotlib.pyplot numpy Example df task_func(start_date'2020-01-01 periods=5 freq'W-MON' categories['Electronics' 'Fashion'] Date Category Sales 0 2020-01-06 Electronics 272 1 Fashion 147 2 2020-01-13 Electronics 217 3 Fashion 292 4 2020-01-20 Electronics 423 5 Fashion 6 2020-01-27 Electronics 295 7 Fashion 8 2020-02-03 Electronics 109 9 Fashion 311\n    \"\"\"\n    # Create a DataFrame with sales data\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    sales = np.random.randint(100, 500, size=(len(dates), len(categories)))\n    df = pd.DataFrame(sales, index=dates, columns=categories)\n    df.index.name = 'Date'\n    df.columns.name = 'Category'\n    \n    # Plot the sales data\n    fig, ax = plt.subplots(figsize=(10, 6))\n    df.plot(kind='bar', stacked=True, ax=ax)\n    ax.set_title('Sales Report')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.legend(title='Category')\n    \n    return df, ax\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates time series sales data specified date linear regression forecast future sales Parameters start_date start date sales data YYYY-MM-DD format Default '2016-01-01' periods number periods sales data Default 13. freq frequency sales data 'WOM-2FRI second Friday each month Default' sales_data array actual sales data not random data generated Returns numpy array forecasted future sales same periods input data. Requirements numpy pandas sklearn.linear_model.LinearRegression Examples np.random.seed(42) consistent random data generation task_func('2016-01-01' 13, 'WOM-2FRI' array([313.65384615 318.56043956 323.46703297 328.37362637.28021978 338.18681319 343.09340659 352.90659341 357.81318681 362.71978022 367.62637363 372.53296703 task_func('2020-01-01' 5 'M' [200, 300 400 500 600] array([238.9, 226. 213.1 200.2, 187.3]\n    \"\"\"\n    # Generate time series data\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n    sales_data = np.random.rand(periods) * 1000  # Replace with actual sales data\n    df = pd.DataFrame({'Date': dates, 'Sales': sales_data})\n    \n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(df[['Date']], df['Sales'])\n    \n    # Forecast future sales\n    future_dates = pd.date_range(start=dates[-1], periods=periods, freq=freq)\n    future_sales = model.predict(pd.DataFrame({'Date': future_dates}))\n    \n    return future_sales\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    assigns tasks employees due date current day returns DataFrame. Parameters task_list n_tasks (int): Number tasks number not negative larger than tasks_list employees (list optional): employee names tasks assigned not defaults to'John Doe 'Jane Smith 'James Brown 'Mary Johnson 'Robert Davis seed (int optional): random number generator reproducibility Defaults to None (not Returns pd.DataFrame Contains columns 'Task Name' 'Assigned To' 'Due Date' each representing assigned task ValueError If n_tasks negative. Task names sanitized spaces underscores Due dates set current system date. Requirements pandas - random - datetime Examples df = task_func(['Clean Office 'Prepare Report 'Client Meeting' 2 seed=42) df Task Name Assigned To Due Date 0 Client_Meeting John Doe 2024-04-13 1 Clean_Office James Brown 2024-04-13 type(df) <class 'pandas.core.frame.DataFrame'>\n    \"\"\"\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks cannot be negative\")\n    if n_tasks > len(task_list):\n        raise ValueError(\"Number of tasks cannot be greater than the number of tasks in the list\")\n    if seed is not None:\n        random.seed(seed)\n    df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n    for i in range(n_tasks):\n        task_name = task_list[i].replace(\" \", \"_\")\n        employee = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        df = df.append({\"Task Name\": task_name, \"Assigned To\": employee, \"Due Date\": due_date}, ignore_index=True)\n    return df\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in words with underscores plots frequency each unique word Parameters mystrings (list str): List words/phrases spaces replaced with underscores text (str): text modifications applied word frequencies calculated not empty. Returns matplotlib.axes.Axes: Axes object plot Raises ValueError: If input text empty. Requirements numpy matplotlib re - collections Notes operations case-insensitive frequency plot displays each unique word x-axis order after modification corresponding frequency y-axis. Examples ax = task_func(['Lorem ipsum adipiscing') type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text is empty\")\n    text = text.lower()\n    for word in mystrings:\n        text = text.replace(word, word.replace(\" \", \"_\"))\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_counts = Counter(words)\n    words = list(word_counts.keys())\n    counts = list(word_counts.values())\n    ax = plt.bar(words, counts)\n    plt.xticks(rotation=90)\n    plt.xlabel(\"Words\")\n    plt.ylabel(\"Frequency\")\n    plt.title(\"Word Frequency\")\n    return ax\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files extensions from source directory save zip file target directory Parameters source_directory (str): directory files zipped target_directory (str): destination directory zip file created If exist function create zip_name (str): name zip file create (without extension '.zip' added Returns str full path to created zip file format \"/path/to/target_directory/zip_name.zip\". OSError: source_directory exist Requirements os - glob - pathlib zipfile valid extensions ['.txt '.docx '.xlsx' '.csv'] Example path = task_func('/path/to/source_directory/path/target_directory' 'zipped_files') type(path) <class 'str'> path '/path/to/target_directory/zipped_files.zip'\n    \"\"\"\n    # Check if source directory exist\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist\")\n\n    # Check if target directory exist\n    if not os.path.exists(target_directory):\n        raise OSError(f\"Target directory {target_directory} does not exist\")\n\n    # Get all files with valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    files = []\n    for extension in valid_extensions:\n        files.extend(glob.glob(os.path.join(source_directory, f'*{extension}')))\n\n    # Create zip file\n    zip_file_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n        for file in files:\n            zip_file.write(file, os.path.basename(file))\n\n    return zip_file_path\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files extensions (.txt.docx.xlsx.csv from source directory to CSV saves in target directory. Parameters source_directory (str): path to directory files converted target_directory (str): path directory converted CSV files saved If function create it. Returns int: number of files converted to CSV. FileNotFoundError: If source directory exist. Requirements os - pathlib - pandas python-docx openpyxl Each file's text content captured stored in CSV single 'Text' column no indices. function overwrite existing files in target directory if same names as converted files. Example task_func('/Users/test/Documents/csv_files') 4 task_func('/path/to/source/path/to/target')\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create target directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Initialize counter for converted files\n    converted_files_count = 0\n\n    # Iterate over files in source directory\n    for filename in os.listdir(source_directory):\n        # Get file path\n        file_path = os.path.join(source_directory, filename)\n\n        # Get file extension\n        file_extension = os.path.splitext(filename)[1].lower()\n\n        # Check file extension and convert to CSV\n        if file_extension in ['.txt', '.docx', '.xlsx', '.csv']:\n            # Read file content\n            if file_extension == '.txt':\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    content = file.read()\n            elif file_extension == '.docx':\n                doc = docx.Document(file_path)\n                content = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            elif file_extension == '.xlsx':\n                df = pd.read_excel(file_path)\n                content = df.to_string(index=False)\n            elif file_extension == '.csv':\n                df = pd.read_csv(file_path)\n                content = df.to_string(index=False)\n\n            # Create CSV file path\n            csv_file_path = os.path.join(target_directory, os.path.splitext(filename)[0] + '.csv')\n\n            # Write content to CSV file\n            with open(csv_file_path, 'w', encoding='utf-8') as csv_file:\n                csv_file.write(content)\n\n            # Increment counter for converted files\n            converted_files_count += 1\n\n    return converted_files_count\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes MinMax-normalized cumulative sum numeric column DataFrame Parameters df (pandas.DataFrame): input numerical values Returns pd.DataFrame each column contains normalized cumulative sum retaining original column names TypeError non data ValueError empty NaN values Requirements pandas numpy sklearn Example input_df = pd.DataFrame('A' [1, 2, 3] 'B' [3, 2, 1] output_df = task_func(input_df) type(output_df) 'pandas.core.frame.DataFrame' output_df B 0 0.0 0.000000 1 0.666667 2 1.0 1.000000\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if not all(df.dtypes.apply(pd.api.types.is_numeric_dtype)):\n        raise TypeError(\"Input DataFrame contains non-numeric values\")\n    scaler = MinMaxScaler()\n    df_normalized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n    df_cumsum = df_normalized.cumsum()\n    return df_cumsum\n\n"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes directory listing each file size creation time last modification time without recursing subdirectories Parameters directory_path (str): path to directory analyzed If empty returns empty list Returns list of tuples Each tuple contains (file name size creation time modification time ValueError If directory exist Requirements os - pathlib datetime function assumes directory exists contains files (no subdirectories Times reported in system time UTC creation modification times platform dependent some creation time replaced by last metadata change time. Examples result = task_func('/path/to/directory') print(result) [('example.txt' 1024 '2023-04-01T14:30:00Z '2023-04-02T15:00:00Z result = task_func(/path/empty_directory' print(result)\n    \"\"\"\n    result = []\n    try:\n        for file in Path(directory_path).iterdir():\n            if file.is_file():\n                file_size = file.stat().st_size\n                creation_time = datetime.fromtimestamp(file.stat().st_ctime, tz=timezone.utc)\n                modification_time = datetime.fromtimestamp(file.stat().st_mtime, tz=timezone.utc)\n                result.append((file.name, file_size, creation_time, modification_time))\n    except FileNotFoundError:\n        raise ValueError(\"Directory does not exist\")\n    return result\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates population report DataFrame CSV file based JSON data Parameters json_data Nested JSON string country names keys populations values parent key \"Countries\". Example format '{\"Countries\": A 331002651, B 67886011}} output_dir Directory path CSV report saved Defaults current directory function if file_name (str): Name CSV report Defaults \"country_population_report.csv\". Returns str file path generated CSV report pd.DataFrame country-population data loaded from input JSON columns \"Country\", \"Population\". ValueError: JSON data malformed empty non-string country names non-numeric negative populations IOError: file written specified directory Requirements json - os - pandas - math Output DataFrame no extra index column function encounters float population valid down to nearest integer Example json_str = '{\"Countries\" A 331002651, B 67886011}}' csv_file_path task_func(json_str) print(csv_file_path)./country_population_report.csv Country Population 0 Country A 331002651 1 Country B 67886011\n    \"\"\"\n    # Check if the input JSON data is valid\n    if not isinstance(json_data, str):\n        raise ValueError(\"JSON data must be a string.\")\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON data.\")\n\n    # Check if the JSON data contains the required key\n    if \"Countries\" not in data:\n        raise ValueError(\"JSON data must contain the 'Countries' key.\")\n\n    # Create a DataFrame from the JSON data\n    df = pd.DataFrame.from_dict(data[\"Countries\"], orient=\"index\", columns=[\"Population\"])\n    df.index.name = \"Country\"\n    df.reset_index(inplace=True)\n\n    # Convert population values to integers\n    df[\"Population\"] = df[\"Population\"].apply(lambda x: int(math.ceil(x)))\n\n    # Save the DataFrame to a CSV file\n    file_path = os.path.join(output_dir, file_name)\n    df.to_csv(file_path, index=False)\n\n    return file_path\n\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates item (files directories in directory against conditions. Parameters dir_path path to directory evaluated Must exist predicates (list strings): Names conditions check contain valid conditions Invalid conditions ignored Supported conditions 1. 'is_file' item file 2. 'is_dir' directory 3. 'has_special_chars' item name character not letter digit underscore ignoring file extensions 4. 'has_numbers' item name contains number Returns: dictionary with directory items keys results condition checks values. ValueError: no valid predicates FileNotFoundError: specified directory exist or. function evaluates file/directory names full path Predicates deduplicated. Requirements os - re - pathlib Examples task_func('/path/to/dir''is_file 'has_numbers' {'file.txt'_file True 'has_numbers' False} 'file2.txt'_file True_numbers task_func('/path/to/dir'_dir 'has_special_chars' {'my_folder''is_dir True 'has_special_chars' False} 'a_@Folder' {'is_dir True 'has_special_chars' True}}\n    \"\"\"\n    if not os.path.exists(dir_path):\n        raise FileNotFoundError(f\"Directory {dir_path} does not exist\")\n\n    results = {}\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n        item_results = {}\n        for predicate in set(predicates):\n            if predicate == 'is_file':\n                item_results[predicate] = os.path.isfile(item_path)\n            elif predicate == 'is_dir':\n                item_results[predicate] = os.path.isdir(item_path)\n            elif predicate == 'has_special_chars':\n                item_results[predicate] = any(\n                    not c.isalnum() and c != '_' for c in item)\n            elif predicate == 'has_numbers':\n                item_results[predicate] = any(c.isdigit() for c in item)\n            else:\n                continue\n        results[item] = item_results\n\n    return results\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert hexadecimal string to encodings function takes string performs encoding operations decodes string to bytes converts bytes into UTF-8 string UTF-8 string encoded into formats hexadecimal base64 UTF-8 UTF-16 UTF-32 ASCII URL ROT13 if ASCII not possible returns 'Not representable ASCII' Parameters hex_string (str): input string hexadecimal format Returns dictionary containing input string encoded formats keys are encoding types'hex 'base64 'utf-8 'utf-16 'utf-32 'ASCII 'URL 'ROT13 values corresponding encoded strings If string ASCII 'ASCII' key maps to 'Not representable ASCII'Requirements binascii base64 codecs Example task_func(\"4a4b4c\")'hex '4a4b4c 'SktM 'utf-8 'JKL 'utf-16 'utf-32 'JKL 'ASCII 'JKL 'ROT13 'WXY task(\"68656c6c6f\")'hex '68656c6c6f 'aGVsbG8= 'utf-8 'hello 'utf-16 'utf-32 'hello 'ASCII 'URL 'hello 'ROT13 'uryyb'\n    \"\"\"\n    # Convert hexadecimal string to bytes\n    bytes_string = binascii.unhexlify(hex_string)\n\n    # Convert bytes to UTF-8 string\n    utf8_string = bytes_string.decode('utf-8')\n\n    # Convert UTF-8 string to hexadecimal\n    hex_encoded = hex_string\n\n    # Convert UTF-8 string to base64\n    base64_encoded = base64.b64encode(bytes_string).decode('utf-8')\n\n    # Convert UTF-8 string to UTF-16\n    utf16_encoded = utf8_string.encode('utf-16').hex()\n\n    # Convert UTF-8 string to UTF-32\n    utf32_encoded = utf8_string.encode('utf-32').hex()\n\n    # Convert UTF-8 string to ASCII\n    try:\n        ascii_encoded = utf8_string.encode('ascii').decode('ascii')\n    except UnicodeEncodeError:\n        ascii_encoded = 'Not representable ASCII'\n\n    # Convert UTF-8 string to URL\n    url_encoded = urllib.parse.quote(utf8_string)\n\n    # Convert UTF-8 string to ROT13\n    rot13_encoded = codecs.encode(utf8_string, 'rot_13')\n\n    return {\n        'hex': hex_encoded,\n        'base64': base64_encoded,\n        'utf-8': utf8_string,\n        'utf-16': utf16_encoded,\n        'utf-32': utf32_encoded,\n        'ASCII': ascii_encoded,\n        'URL': url_encoded,\n        'ROT13': rot13_encoded.decode('utf-8')\n    }\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads tar.gz file from URL validates MD5 checksum against expected value If checksum matches extracts contents Otherwise deletes downloaded file. Parameters url (str): URL download file Returns bool Returns True if file downloaded MD5 checksum matches expected value extracted Returns False if checksum match or download fails. Requirements urllib.request hashlib - tarfile - os Example task_func('http://example/files.tar.gz') True\n    \"\"\"\n    # Download the file\n    try:\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n    except Exception as e:\n        print(f\"Error downloading file: {e}\")\n        return False\n\n    # Check MD5 checksum\n    with open(TARGET_TAR_FILE, \"rb\") as f:\n        md5 = hashlib.md5(f.read()).hexdigest()\n    if md5 != EXPECTED_MD5_CHECKSUM:\n        print(\"MD5 checksum does not match expected value\")\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n    # Extract the file\n    try:\n        with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n            tar.extractall()\n    except Exception as e:\n        print(f\"Error extracting file: {e}\")\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n    # Delete the file\n    os.remove(TARGET_TAR_FILE)\n    return True\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download CSV file from URL save to specified path count occurrences each value in column function handles scenarios missing columns file download errors. Parameters: url (str): URL CSV file downloaded valid accessible URL. column_name (str): name of column in CSV values counted function ValueError if column not found. csv_file_path (str): file path downloaded CSV file saved If file exists path overwritten. Returns dict: dictionary mapping values from column to occurrence counts. Raises ValueError If column_name exist in CSV file function delete downloaded file ValueError message column_name exist file.\" Requirements: - urllib - os - csv - collections Example task_func('http://example/data.csv', 'category' 'downloaded_data.csv') {'cat1': 5, 'cat2': 3, 'cat3': 8} hypothetical output actual output on CSV data. downloaded CSV file deleted after contents processed function counts values in specified column ignores other data.\n    \"\"\"\n    try:\n        urllib.request.urlretrieve(url, csv_file_path)\n    except Exception as e:\n        print(f\"Error downloading file: {e}\")\n        return None\n\n    try:\n        with open(csv_file_path, 'r') as file:\n            reader = csv.DictReader(file)\n            column_values = [row[column_name] for row in reader]\n    except KeyError:\n        print(f\"Column '{column_name}' not found in CSV file.\")\n        os.remove(csv_file_path)\n        return None\n    except Exception as e:\n        print(f\"Error reading CSV file: {e}\")\n        os.remove(csv_file_path)\n        return None\n\n    value_counts = collections.Counter(column_values)\n    os.remove(csv_file_path)\n    return value_counts\n\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches parses XML file from URL converts into Pandas DataFrame. Parameters: url (str): URL CSV file downloaded valid accessible URL Returns pandas.DataFrame constructed from parsed XML data Each row corresponds to 'item' element XML child elements becoming columns. Raises ValueError error scenarios URL invalid or XML file fetched XML invalid syntax XML structure conform to expected format. Requirements - urllib - lxml - pandas Examples Example valid XML structure >>> df = task_func('http://example/sample_data.xml') print(df) name age 0 John 25 1 Jane 30 Example invalid XML structure df = task_func(/invalid_structure.xml ValueError: XML structure match expected format\n    \"\"\"\n    try:\n        # Fetch XML file from URL\n        response = urllib.request.urlopen(url)\n        xml_data = response.read()\n\n        # Parse XML data\n        root = etree.fromstring(xml_data)\n\n        # Extract data from XML\n        data = []\n        for item in root.findall('item'):\n            name = item.find('name').text\n            age = item.find('age').text\n            data.append([name, age])\n\n        # Create DataFrame\n        df = pd.DataFrame(data, columns=['name', 'age'])\n\n        return df\n\n    except urllib.error.URLError as e:\n        raise ValueError(f\"Invalid URL: {url}\") from e\n\n    except etree.XMLSyntaxError as e:\n        raise ValueError(\"XML file fetched is invalid\") from e\n\n    except Exception as e:\n        raise ValueError(\"XML structure does not match expected format\") from e\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads text file from URL processes text frequency each word plots bar chart ten frequently occurring words. Parameters url (str): URL text file downloaded URL should point to text file Returns tuple two elements Counter object from collections module word frequencies Axes matplotlib Axes object plotted bar chart ten common words function assumes URL points plain text file not handle binary files non-text content Words identified regular expression case-sensitive remove common stopwords all words counted as is Requires internet access download file. Example word_freq, ax = task_func('http://www.example/data.txt') >>> print(word_freq.most_common(5)) [('the', 102), ('of', 76),'and', 64),'to' 52),'in', 41)] Requirements urllib re - collections - matplotlib\n    \"\"\"\n    # Download the text file from the URL\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Remove common stopwords\n    stopwords = ['the', 'of', 'and', 'to', 'in', 'a', 'that', 'is', 'was', 'it', 'for', 'on', 'with', 'as', 'are', 'be', 'this', 'at', 'by', 'an', 'or', 'from', 'not', 'but', 'which', 'you', 'they', 'we', 'his', 'her', 'their', 'him', 'her', 'them', 'there', 'been', 'has', 'have', 'had', 'would', 'should', 'could', 'will', 'would', 'should', 'could', 'may', 'might', 'must', 'do', 'does', 'did', 'doing', 'done', 'if', 'then', 'else', 'when', 'where', 'how', 'why', 'who', 'whom', 'which', 'that', 'these', 'those', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now']\n    text = re.sub(r'\\b(' + '|'.join(stopwords) + r')\\b', '', text, flags=re.IGNORECASE)\n\n    # Count the frequency of each word\n    word_freq = Counter(re.findall(r'\\b\\w+\\b', text.lower()))\n\n    # Plot the bar chart of the ten most common words\n    ax = plt.figure().add_subplot(111)\n    ax.bar(range(10), word_freq.most_common(10), align='center')\n    ax.set_xticks(range(10))\n    ax.set_xticklabels([word for word, freq in word_freq.most_common(10)])\n    ax.set_ylabel('Frequency')\n    ax.set_title('Top 10 Most Common Words')\n\n    return word_freq, ax\n\n"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Downloads extracts ZIP file from specified URL to directory. Parameters url (str): URL download valid accessible URL. download_path (str): directory path where ZIP file downloaded extracted Defaults to \"mnt/data/downloads/\". Returns str: Path to directory extracted contents. If error occurs descriptive message returned message starts with \"Error: \" URL point to ZIP file downloaded file not valid ZIP file \"Unable to download from URL Raises Network Issues or Invalid URL Returns \"Error: Unable to download file URL.\" if issues reaching URL or downloading. Incorrect File Type: Returns \"Error: URL not point to ZIP file.\" if type not 'application/zip' Corrupt ZIP File Returns \"Error: file not valid ZIP file.\" if corrupt or extracted. General Exceptions: Catches reports exceptions errors) with specific error message formatted as \"Error: [exception message]\". Requirements requests - os - zipfile Example task_func('https://example/file.zip') 'mnt/data/downloads/file'\n    \"\"\"\n    try:\n        # Send a GET request to the URL\n        response = requests.get(url, stream=True)\n        # Check if the request was successful\n        if response.status_code == 200:\n            # Check if the content type is 'application/zip'\n            if response.headers['content-type'] == 'application/zip':\n                # Create a unique file name for the downloaded file\n                file_name = os.path.join(download_path, url.split('/')[-1])\n                # Open the file in write-binary mode\n                with open(file_name, 'wb') as file:\n                    # Write the content of the response to the file\n                    for chunk in response.iter_content(chunk_size=8192):\n                        file.write(chunk)\n                # Extract the contents of the ZIP file\n                with ZipFile(file_name, 'r') as zip_ref:\n                    # Create a unique directory name for the extracted contents\n                    extract_path = os.path.join(download_path, os.path.splitext(url.split('/')[-1])[0])\n                    # Extract the contents to the directory\n                    zip_ref.extractall(extract_path)\n                # Return the path to the directory extracted contents\n                return extract_path\n            else:\n                return \"Error: URL not point to ZIP file.\"\n        else:\n            return \"Error: Unable to download file from URL.\"\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {str(e)}\"\n    except BadZipFile:\n        return \"Error: file not valid ZIP file.\"\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Extracts converts data from HTML table 'table_id' webpage into Pandas DataFrame If table present no data rows no <tr> tags), function returns empty DataFrame. Parameters: url URL webpage extract table table_id (str): 'id' attribute of HTML table extracted Returns df.DataFrame): DataFrame containing data extracted from HTML table If table found no rows ( empty DataFrame returned. Raises requests.exceptions.HTTPError: If HTTP request fails connection issues non-successful status code 404 500). ValueError: If no table with specified 'table_id' found error message \"Table with specified ID not found.\" Requirements: - requests - bs4.BeautifulSoup - pandas - io Notes function raises HTTPError for unsuccessful HTTP requests network problems non-2xx HTTP responses ValueError raised when HTML table with specified ID not present webpage incorrect ID or absence table If table no rows <tr> tags empty DataFrame returned useful for handling tables present devoid of data. Example task_func('https://example.com/data.html 'table1') DataFrame: Name Age 0 Alice 25 1 Bob 30 ValueError 'nonexistent_table' ValueError: Table with specified ID not found.empty table task_func('https://example/emptytable.html DataFrame Empty Columns [] Index []\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as err:\n        raise err\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n\n    if table is None:\n        raise ValueError(f\"Table with specified ID not found.\")\n\n    rows = table.find_all('tr')\n    headers = [header.text.strip() for header in rows[0].find_all('th')]\n    data = []\n\n    for row in rows[1:]:\n        cols = row.find_all('td')\n        cols = [col.text.strip() for col in cols]\n        data.append(cols)\n\n    df = pd.DataFrame(data, columns=headers)\n    return df\n\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Downloads extracts zip file from specified URL Parameters: url (str): URL zip file download filename (str): downloaded file saved Returns tuple status message list filenames in unzipped directory or empty list if extraction fails status message \"Error\" when Network-related exceptions if download fails File-related exceptions issue with file handling extraction. Requirements requests pathlib.Path zipfile Example task_func('http://example/myfile.zip') ('Download extraction successful' ['file1.txt' 'file2.txt'])\n    \"\"\"\n    try:\n        # Download the zip file\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception for HTTP errors\n        # Save the file to the downloads directory\n        download_path = DOWNLOAD_DIR / filename\n        download_path.parent.mkdir(parents=True, exist_ok=True)\n        with open(download_path, \"wb\") as file:\n            file.write(response.content)\n        # Extract the zip file\n        with zipfile.ZipFile(download_path, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        # Get the list of filenames in the unzipped directory\n        unzipped_files = list(ZIP_DIR.iterdir())\n        filenames = [file.name for file in unzipped_files]\n        return \"Download extraction successful\", filenames\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {e}\", []\n    except zipfile.BadZipFile:\n        return \"Error: Bad zip file\", []\n    except Exception as e:\n        return f\"Error: {e}\", []\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    function scrapes webpage hyperlinks saves absolute URLs CSV file Parameters url (str): relative URL webpage scrape base_url (str optional): base URL website links Defaults 'https://www.example.com' csv_file (str optional): filename CSV file links saved Defaults 'scraped_data.csv' Returns int number unique links scraped Requirements requests.parse.urljoin bs4.BeautifulSoup csv Examples task_func('/mywebpage' 5 task_func('/anotherpage' base_url='https://www.different' csv_file='other_links.csv') 8\n    \"\"\"\n    # Get the absolute URL\n    absolute_url = urljoin(base_url, url)\n\n    # Send a GET request to the absolute URL\n    response = requests.get(absolute_url)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        print(f\"Failed to retrieve {absolute_url}\")\n        return 0\n\n    # Parse the HTML content of the page\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find all the <a> tags in the page\n    links = soup.find_all(\"a\")\n\n    # Extract the href attribute from each <a> tag\n    hrefs = [link.get(\"href\") for link in links]\n\n    # Remove any empty hrefs\n    hrefs = [href for href in hrefs if href]\n\n    # Remove any relative URLs\n    hrefs = [urljoin(base_url, href) for href in hrefs]\n\n    # Remove any duplicate URLs\n    hrefs = list(set(hrefs))\n\n    # Write the URLs to a CSV file\n    with open(csv_file, \"w\", newline=\"\") as file:\n        writer = csv.writer(file)\n        writer.writerow([\"URL\"])\n        writer.writerows([[href] for href in hrefs])\n\n    # Return the number of unique URLs scraped\n    return len(hrefs)\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    function parses HTML table data from URL file stores into SQLite database handles scenarios for fetching processing storing data. Parameters: webpage_url (str): URL webpage or local file path prefixed with \"file://\". database_name (str): name SQLite database file data stored Defaults to \"my_database.db\". Returns int: number of rows in parsed HTML table Raises requests.RequestException: exception network issue accessing URL includes connection errors timeouts HTTP errors. sqlite3.DatabaseError: exception issues connecting to writing SQLite database includes invalid database names write permissions SQL execution errors. function table \"my_table\" in SQLite database with new data each called If HTML content table or table empty function 0 no rows parsed stored. function relies on 'requests' 'lxml' 'pandas' 'sqlite3' libraries. Requirements requests lxml - pandas - sqlite3 Example num_rows = task_func(\"http://example/tabledata\") >>> print(f\"Number of rows parsed: {num_rows}\") 5\n    \"\"\"\n    try:\n        # Fetch HTML content from URL\n        response = requests.get(webpage_url)\n        response.raise_for_status()  # Raise exception for HTTP errors\n        html_content = response.text\n\n        # Parse HTML content to extract table data\n        tree = html.fromstring(html_content)\n        table = tree.xpath('//table')[0]  # Assuming the first table is the one we want\n        rows = table.xpath('.//tr')\n\n        # Extract column names from the first row\n        columns = [col.text_content().strip() for col in rows[0].xpath('.//th')]\n\n        # Extract data from the remaining rows\n        data = []\n        for row in rows[1:]:\n            row_data = [col.text_content().strip() for col in row.xpath('.//td')]\n            data.append(row_data)\n\n        # Create a DataFrame from the extracted data\n        df = pd.DataFrame(data, columns=columns)\n\n        # Connect to the SQLite database\n        conn = sqlite3.connect(database_name)\n        cursor = conn.cursor()\n\n        # Create the table if it doesn't exist\n        cursor.execute(f\"CREATE TABLE IF NOT EXISTS my_table ({', '.join([f'{col} TEXT' for col in columns])})\")\n\n        # Insert the data into the table\n        for index, row in df.iterrows():\n            cursor.execute(f\"INSERT INTO my_table ({', '.join(columns)}) VALUES ({', '.join(['?' for _ in columns])})\", tuple(row))\n\n        # Commit the changes and close the connection\n        conn.commit()\n        conn.close()\n\n        # Return the number of rows parsed\n        return len(df)\n\n    except requests.RequestException as e:\n        print(f\"Error fetching data from URL: {e}\")\n        return 0\n\n    except sqlite3.DatabaseError as e:\n        print(f\"Error connecting to or writing to the database: {e}\")\n        return 0\n\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens image file extracts text OCR converts text encoding fallback image comment processing ValueError UnicodeDecodeError LookupError during conversion Parameters filename path to image file Defaults global variable 'IMAGE_PATH' from_encoding original encoding extracted text image comment Default 'cp1251' to_encoding target encoding converted text comment Default 'utf8' Returns comment text extracted image comment converted target encoding If OCR extraction comment processing fail returns empty string ValueError incorrect encodings text comment conversion. Requirements codecs - - pytesseract Example 'image.png' contains text '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' Russian (encoded cp1251) text extracted OCR text = task_func('image.png' 'cp1251' 'utf8') print(text) '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' output utf-8 encoded version extracted text\n    \"\"\"\n    try:\n        image = Image.open(filename)\n        text = pytesseract.image_to_string(image, lang=\"rus\", encoding=from_encoding)\n        text = text.encode(to_encoding, errors=\"replace\").decode(to_encoding)\n        return text\n    except (ValueError, UnicodeDecodeError, LookupError):\n        return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from REST API URL processes for JSON parsing involves decoding re-encoding different encoding scenarios function initiates HTTP GET request to URL 5-second timeout retrieves response content in raw bytes Parameters url URL REST API Default 'http://api.example/data' from_encoding optional): original encoding data If None encoding auto-detected Default None to_encoding target encoding format Default 'utf8' Returns dict JSON-parsed data after re-encoding Returns empty dictionary if content empty ValueError: \"Unable to detect encoding for non-empty if fails. Requirements json - requests - chardet Example data = task_func('http://api.example/data') >>> print(data) 'value'} expected output function sets timeout 5 seconds for API request handles cases empty content undetectable encoding returning empty dictionary or exception decoding re-encoding steps ensure compatibility with data formats final JSON parsing\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        print(f\"Error fetching data from {url}: {e}\")\n        return {}\n\n    content = response.content\n    if not content:\n        return {}\n\n    if from_encoding is None:\n        encoding = chardet.detect(content)[\"encoding\"]\n        if encoding is None:\n            raise ValueError(\"Unable to detect encoding for non-empty content\")\n    else:\n        encoding = from_encoding\n\n    try:\n        decoded_content = content.decode(encoding)\n    except UnicodeDecodeError as e:\n        print(f\"Error decoding content with {encoding}: {e}\")\n        return {}\n\n    try:\n        data = json.loads(decoded_content)\n    except json.JSONDecodeError as e:\n        print(f\"Error parsing JSON content: {e}\")\n        return {}\n\n    try:\n        encoded_data = json.dumps(data, ensure_ascii=False).encode(to_encoding)\n    except (UnicodeEncodeError, LookupError) as e:\n        print(f\"Error encoding data with {to_encoding}: {e}\")\n        return {}\n\n    try:\n        decoded_data = encoded_data.decode(to_encoding)\n    except UnicodeDecodeError as e:\n        print(f\"Error decoding data with {to_encoding}: {e}\")\n        return {}\n\n    return json.loads(decoded_data)\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads CSV file processes date-related data function performs tasks checking file existence validating date column converting date values to datetime objects filtering current date sorting data handles special cases empty CSV file empty DataFrame raises exceptions for error scenarios missing files columns. Parameters csv_file_path (str): path to CSV file FileNotFoundError if path invalid column_name (str): name column containing date values ValueError if column missing date_format (str optional): format date values in column Defaults to '%Y-%m-%d' Returns pandas - os datetime.errors.EmptyDataError FileNotFoundError CSV file not found at path ValueError If column not present Requirements pandas - os - datetime Example task_func('path/to/csvfile.csv 'DateColumn') Date Value 0 2023-12-10 100 1 2023-12-11 150\n    \"\"\"\n    try:\n        # Check if file exists\n        if not os.path.exists(csv_file_path):\n            raise FileNotFoundError(f\"File not found at path: {csv_file_path}\")\n\n        # Read CSV file\n        df = pd.read_csv(csv_file_path)\n\n        # Check if column exists\n        if column_name not in df.columns:\n            raise ValueError(f\"Column '{column_name}' not present in the CSV file.\")\n\n        # Convert date column to datetime\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n\n        # Filter current date\n        current_date = datetime.now().date()\n        df = df[df[column_name].dt.date == current_date]\n\n        # Sort data\n        df = df.sort_values(by=column_name)\n\n        # Handle special cases\n        if df.empty:\n            raise EmptyDataError(\"CSV file is empty or does not contain any data for the current date.\")\n\n        return df\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except EmptyDataError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    function secures client socket SSL/TLS sends back SHA256 hash file requested. Parameters client_socket client socket wrapped with SSL/TLS for secure communication cert_file (str): file path SSL certificate secure connection key_file (str): path SSL key certificate buffer_size (int optional): size buffer receive data client Defaults to 1024 bytes Returns str SHA256 hash requested file If requested file returns 'File not found' exception error message returned. Requirements ssl - os - hashlib function assumes client requests file sending path function handle opening or closing client_socket Error handling basic might need expanded cases. Example Server setup server_socket = socket.socket(socket.AF_INET.SOCK_STREAM) server_socket.bind(('localhost', 443)) server_socket.listen(5) cert_file = \"path/to/certificate.crt\" key_file = \"path/to/private.key\" Accept client connection client_socket addr = server_socket.accept() Use task_func function handle client request file_hash = task_func(client_socket, cert_file key_file) print(\"Sent file hash:\", file_hash) server_socket.close()\n    \"\"\"\n    try:\n        # Wrap client socket with SSL/TLS\n        ssl_socket = ssl.wrap_socket(client_socket, server_side=True, certfile=cert_file, keyfile=key_file, ssl_version=ssl.PROTOCOL_TLSv1_2)\n\n        # Receive file path from client\n        file_path = ssl_socket.recv(buffer_size).decode()\n\n        # Open requested file\n        with open(file_path, 'rb') as file:\n            # Read file content\n            file_content = file.read()\n\n            # Calculate SHA256 hash of file content\n            file_hash = hashlib.sha256(file_content).hexdigest()\n\n            # Send SHA256 hash back to client\n            ssl_socket.send(file_hash.encode())\n\n    except FileNotFoundError:\n        # Send error message back to client if file not found\n        ssl_socket.send(b'File not found')\n\n    finally:\n        # Close SSL/TLS socket\n        ssl_socket.close()\n\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run non-blocking echo server appends current time to received data sends back to client handling exceptional conditions each socket. Parameters server_address address listen Default 'localhost' server_port (int): port listen Default 12345 buffer_size buffer size for data reception Default 1024 bytes run_duration duration seconds server run Default 5 seconds. Returns str status message server operation run duration. Requirements socket - select - queue datetime Example print(task_func()) 'Server started on localhost:12345 Ran 5 seconds'\n    \"\"\"\n    # Create a TCP/IP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Bind the socket to the address and port\n    server_address = (server_address, server_port)\n    sock.bind(server_address)\n    # Listen for incoming connections\n    sock.listen(1)\n    # Create a list to keep track of all the sockets\n    sockets_list = [sock]\n    # Create a dictionary to keep track of all the sockets and their corresponding queues\n    sockets_queues = {sock: queue.Queue() for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding addresses\n    sockets_addresses = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last received data\n    sockets_last_received_data = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last received time\n    sockets_last_received_time = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent data\n    sockets_last_sent_data = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_sent_time = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_exceptional_condition = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_exceptional_condition_time = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_exceptional_condition_count = {sock: 0 for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_exceptional_condition_count_time = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_exceptional_condition_count_reset_time = {sock: None for sock in sockets_list}\n    # Create a dictionary to keep track of all the sockets and their corresponding last sent time\n    sockets_last_exceptional_condition_count_reset_count = {sock: 0 for sock in sockets"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive message from client socket send email via SMTP server Parameters client_socket message received Returns - None Requires working internet connection access SMTP server function asks for sender's email recipient's email password for authentication Requirements smtplib email.message getpass Example import socket server_socket = socket.socket(socket.AF_INET.SOCK_STREAM) server_socket.bind((SERVER_ADDRESS SERVER_PORT)) server_socket.listen(5) client_socket = server_socket.accept() task_func(client_socket)\n    \"\"\"\n    # Receive message from client socket\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    # Parse message\n    message_parts = message.split()\n    sender_email = message_parts[0]\n    recipient_email = message_parts[1]\n    password = getpass.getpass(\"Enter password for \" + sender_email + \": \")\n    # Send email via SMTP server\n    msg = EmailMessage()\n    msg.set_content(\"This is a test email.\")\n    msg['Subject'] = \"Test Email\"\n    msg['From'] = sender_email\n    msg['To'] = recipient_email\n    server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    server.starttls()\n    server.login(sender_email, password)\n    server.send_message(msg)\n    server.quit()\n    # Close client socket\n    client_socket.close()\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes CSV file text data generates histogram of ten common words function reads CSV file single column text data splits text into words creates histogram frequency top ten common words excluding stopwords resulting histogram displayed on screen or saved to file CSV file single column header 'Text' Each row under column contain text string If header first column assumed text data. Parameters: file_path (str): path to input CSV file. save_path (str optional): path histogram plot saved If not provided plot displayed on screen. Returns matplotlib.axes.Axes: Axes object of plot if save_path not provided Useful for customization display notebooks None: If save_path provided plot saved to specified path function returns None. Raises FileNotFoundError: If file_path raises FileNotFoundError message path not found Exception: For other errors during function execution error printed to console None returned. Requirements: pandas - scikit-learn - matplotlib function uses pandas for data manipulation sklearn's CountVectorizer for text vectorization matplotlib for plotting predefined list of stopwords filter out common insignificant words from histogram. Examples: >>> ax = task_func('text_data.csv print(ax)(0.125,0.11;0.775x0.77) result task_func_data.csv_plot print(result None\n    \"\"\"\n    try:\n        # Read CSV file\n        df = pd.read_csv(file_path)\n\n        # Check if 'Text' column exists\n        if 'Text' not in df.columns:\n            raise Exception(\"CSV file does not contain 'Text' column\")\n\n        # Split text into words and create histogram\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        X = vectorizer.fit_transform(df['Text'])\n        word_counts = X.sum(axis=0).tolist()[0]\n        words = vectorizer.get_feature_names_out()\n        word_counts_dict = dict(zip(words, word_counts))\n        sorted_word_counts = sorted(word_counts_dict.items(), key=lambda x: x[1], reverse=True)\n        top_ten_words = sorted_word_counts[:10]\n\n        # Plot histogram\n        fig, ax = plt.subplots()\n        ax.bar(range(10), [x[1] for x in top_ten_words], tick_label=[x[0] for x in top_ten_words])\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n        ax.set_title('Top 10 Common Words')\n\n        # Save plot to file if save_path provided\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            plt.show()\n            return ax\n\n    except FileNotFoundError:\n        print(f\"File not found: {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return None\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create DataFrame with combinations animals foods 'animal:food' format Parameters animals (list str optional): animal names not defaults to common animals including 'Dog 'Cat 'Elephant 'Tiger 'Lion 'Zebra 'Giraffe 'Bear 'Monkey 'Kangaroo foods (list str optional): food names not provided defaults to common foods including 'Meat 'Fish 'Grass 'Fruits 'Insects 'Seeds 'Leaves' Returns df (pandas.DataFrame): each represents unique animal 'animals column represents food item 'foods' list Each cell contains string format 'animal:food' Special Cases If 'animals' 'foods' lists empty or not provided function returns empty DataFrame If empty function uses predefined list for missing parameter Requirements pandas - numpy itertools Example animal_food_pairs = task_func(['Dog 'Cat'Meat 'Fish) print(animal_food_pairs) Meat Fish 0 Dog:Meat:Fish 1 Cat:Meat:Fish function generates combinations 'animals 'foods' using itertools.product resulting pairs shuffled randomly variety DataFrame layout\n    \"\"\"\n    # Define default animals and foods if not provided\n    if animals is None:\n        animals = ['Dog', 'Cat', 'Elephant', 'Tiger', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey', 'Kangaroo']\n    if foods is None:\n        foods = ['Meat', 'Fish', 'Grass', 'Fruits', 'Insects', 'Seeds', 'Leaves']\n\n    # Generate combinations of animals and foods\n    combinations = list(itertools.product(animals, foods))\n\n    # Create DataFrame from combinations\n    df = pd.DataFrame(combinations, columns=['animals', 'foods'])\n\n    # Format each cell as 'animal:food'\n    df['animals:foods'] = df.apply(lambda row: f'{row[\"animals\"]}:{row[\"foods\"]}', axis=1)\n\n    # Shuffle DataFrame rows randomly\n    df = df.sample(frac=1).reset_index(drop=True)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference in seconds between timestamps in list after converting to specified timezone. Parameters time_strings (list str): timestamp strings format 'dd/mm/yy HH:MM:SS.fff' timezone (str): timezone to timestamp strings converted valid timezone string e 'America/New_York'. Returns float: mean (average time difference in seconds between timestamps If less than two timestamps returns 0.0. Requirements datetime - pytz - numpy function converts each timestamp to specified timezone calculates absolute time difference in seconds between timestamps If list less than two timestamps function returns 0.0 no pairs to compare. If no time differences returns 0.0. function uses numpy's mean function to calculate average time difference. Example time_strings = ['30/03/09 16:31:32.123', 16:32:33.123'] >>> mean_diff = task_func(time_strings, 'America/New_York') >>> print(mean_diff) 61.0\n    \"\"\"\n    if len(time_strings) < 2:\n        return 0.0\n    time_diffs = []\n    for i in range(len(time_strings) - 1):\n        time1 = datetime.strptime(time_strings[i], '%d/%m/%y %H:%M:%S.%f')\n        time2 = datetime.strptime(time_strings[i + 1], '%d/%m/%y %H:%M:%S.%f')\n        time1 = time1.replace(tzinfo=pytz.utc)\n        time2 = time2.replace(tzinfo=pytz.utc)\n        time1 = time1.astimezone(pytz.timezone(timezone))\n        time2 = time2.astimezone(pytz.timezone(timezone))\n        time_diff = abs((time2 - time1).total_seconds())\n        time_diffs.append(time_diff)\n    return np.mean(time_diffs)\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes frequency words text lowercasing removing punctuation splitting plots top 10 common words Parameters text (str): input text analyzed Returns list tuples containing 10 common words counts Axes matplotlib Axes object bar chart Requirements re - collections.Counter matplotlib.pyplot Example common_words ax = task_func( sample text contains words 'text' 'sample' 'words' print(common_words) [('sample', 3)'text', 3)'this', 2)'words', 2)'is', 1)'a', 1)'contains', 1)'like','and',\n    \"\"\"\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split text into words\n    words = text.split()\n    \n    # Count word frequencies\n    word_counts = Counter(words)\n    \n    # Get the 10 most common words\n    common_words = word_counts.most_common(10)\n    \n    # Plot the top 10 common words\n    words, counts = zip(*common_words)\n    plt.bar(words, counts)\n    plt.xlabel('Words')\n    plt.ylabel('Counts')\n    plt.title('Top 10 Common Words')\n    plt.xticks(rotation=45)\n    plt.show()\n    \n    return common_words\n\n"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts URL from string retrieves title web page. If no valid URL found or successful fetch returns error message. Parameters: myString (str): string from extract URL. Returns str title webpage extracted URL if successful otherwise error messages \"No valid URL \"Unable to fetch content URL: {url}\" \"No title tag found webpage.\" Requirements: re - urllib.parse.urlparse - bs4.BeautifulSoup - requests Example task_func('Check https://www.google') 'Google'('No URL here') 'No valid URL string.' task_func('Check broken link: https://www.thisdoesnotexist12345.com') 'Unable to fetch content URL'\n    \"\"\"\n    # Extract URL from string\n    url = re.findall(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+', myString)\n    if not url:\n        return 'No valid URL in string.'\n    url = url[0]\n    \n    # Fetch content from URL\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        return f'Unable to fetch content URL: {url}'\n    \n    # Parse content with BeautifulSoup\n    soup = BeautifulSoup(response.content, 'html.parser')\n    \n    # Extract title from webpage\n    title = soup.title\n    if not title:\n        return 'No title tag found webpage.'\n    \n    return title.text\n\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses JSON string URL specified key downloads file saves timestamped filename filename format '{unknown_key}_{timestamp}.txt' 'timestamp' formatted '%Y%m%d%H%M%S%f' date time down to microseconds file saved specified directory or current working directory default Parameters json_data (str): JSON data string key linked to URL unknown_key (str): key extract URL JSON save_dir (str optional): directory save downloaded file If not specified file saved current working directory Defaults None Returns str absolute path downloaded file saved Requirements json - requests - os - datetime Example json_str ={\"unknown\": \"https://example/file.txt\"} file_path = task_func(json_str, 'unknown') print(f\"Downloaded file saved at {file_path}\")\n    \"\"\"\n    try:\n        url = json_data[unknown_key]\n        response = requests.get(url)\n        response.raise_for_status()\n        if save_dir is None:\n            save_dir = os.getcwd()\n        timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n        file_name = f'{unknown_key}_{timestamp}.txt'\n        file_path = os.path.join(save_dir, file_name)\n        with open(file_path, 'wb') as file:\n            file.write(response.content)\n        return file_path\n    except Exception as e:\n        print(f\"Error occurred: {e}\")\n        return None\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from URL local file saves file JSON format Parameters url (str): URL webpage or local file path output_path (str): path extracted phone numbers saved JSON Returns list strings each representing found phone number Requirements bs4 requests re - json Example task_func('file:///local/file.txt 'output.json) ['+1 (234) 567 8901 '+44 1234 567890'\n    \"\"\"\n    # Check if the URL is a local file\n    if url.startswith('file:///'):\n        # Read the file content\n        with open(url[7:], 'r') as file:\n            content = file.read()\n    else:\n        # Send a GET request to the URL\n        response = requests.get(url)\n        # Check if the request was successful\n        if response.status_code == 200:\n            content = response.text\n        else:\n            raise Exception(f'Failed to retrieve content from URL: {url}')\n\n    # Use BeautifulSoup to parse the HTML content\n    soup = bs4.BeautifulSoup(content, 'html.parser')\n\n    # Find all text elements on the page\n    text_elements = soup.find_all(text=True)\n\n    # Use regular expressions to extract phone numbers\n    phone_numbers = re.findall(r'\\+?\\d[\\d\\s.-]{7,}', ' '.join(text_elements))\n\n    # Save the extracted phone numbers to a JSON file\n    with open(output_path, 'w') as file:\n        json.dump(phone_numbers, file)\n\n    return phone_numbers\n"}
