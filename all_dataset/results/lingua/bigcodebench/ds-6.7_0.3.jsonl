{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download files from specific directory on FTP server using wget subprocess. Args ftp_server (str): FTP server address Default is 'ftp.dlptest.com'. ftp_user (str): FTP server username Default is 'dlpuser'. ftp_password (str): FTP server password Default 'rNrKYTX9g7z3RgJRmxWuGHbeu'. ftp_dir (str): directory path server files downloaded Default is '/ftp/test'. Returns List[str]: list of filenames attempted to downloaded from FTP server. Raises Exception: failure in connecting to FTP server Outputs message \"Failed to connect FTP server}\" failure logging into FTP server Outputs message \"Failed to log into user {str}\" failure in changing to specified directory Outputs message \"Failed to change to directory {ftp_dir} server: {str(e)}\" Requirements: - subprocess - ftplib - os Example >>> task_func() ['file1.txt', 'file2.jpg', ...]\n    \"\"\"\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(user=ftp_user, passwd=ftp_password)\n        ftp.cwd(ftp_dir)\n    except Exception as e:\n        print(f\"Failed to connect FTP server: {str(e)}\")\n        return []\n\n    try:\n        files = ftp.nlst()\n    except Exception as e:\n        print(f\"Failed to log into user {ftp_user} server: {str(e)}\")\n        return []\n\n    try:\n        for file in files:\n            with open(file, 'wb') as f:\n                ftp.retrbinary('RETR '+ file, f.write)\n    except Exception as e:\n        print(f\"Failed to change to directory {ftp_dir} server: {str(e)}\")\n        return []\n\n    return files\n"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute list shell commands read from CSV file save outputs in separate files Each command output written to unique file in specified output directory If command fails error message exit code appended to output file. Parameters: commands_file_path (str): Path to CSV file containing shell commands first column file not have headers. output_dir_path (str): Path where outputs commands saved. If directory exist created. Requirements: - subprocess - csv - os Raises FileNotFoundError: If commands_file_path exist. Returns: list of str: list of paths to output files created in output directory each named as 'command_X_output.txt' X is command index. If command execution fails output file error message exit code. Example: >>> task_func(\"commands.csv\", \"/path/to/output_directory\") ['/path/to/command_1_output.txt',/command_2_output.txt' ...]\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"File {commands_file_path} not found\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    with open(commands_file_path, 'r') as file:\n        reader = csv.reader(file)\n        commands = [row[0] for row in reader]\n\n    output_files = []\n\n    for i, command in enumerate(commands):\n        output_file_path = os.path.join(output_dir_path, f'command_{i+1}_output.txt')\n        output_files.append(output_file_path)\n\n        with open(output_file_path, 'w') as file:\n            try:\n                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n                file.write(result.stdout)\n            except subprocess.CalledProcessError as e:\n                file.write(f\"Error: {e.output} Exit code: {e.returncode}\")\n\n    return output_files\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if process running based name If not running start using process name as command If running terminate restart executing name as command. Parameters: process_name (str): name process to check manage should executable as command. Returns str: message indicating action taken \"Process not found. Starting <process_name>.\" \"Process found. Restarting <process_name>.\" Requirements subprocess - psutil - time Example >>> task_func('notepad') \"Process not found. Starting notepad.\" OR task_func('notepad \"Process found. Restarting notepad.\"\n    \"\"\"\n    for proc in psutil.process_iter(['pid', 'name']):\n        if proc.info['name'] == process_name:\n            proc_id = proc.info['pid']\n            parent = psutil.Process(proc_id)\n            for child in parent.children(recursive=True):\n                if child.name() == process_name:\n                    child.terminate()\n            time.sleep(1)\n            subprocess.Popen([process_name])\n            return f\"Process found. Restarting {process_name}.\"\n    subprocess.Popen([process_name])\n    return f\"Process not found. Starting {process_name}.\"\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips files (not including subdirectories in directory returns path to created zip file. Parameters: directory (str): path containing files zipped. Returns str path to generated zip file Returns None if directory contain files Raises FileNotFoundError if directory Requirements: - os - glob - zipfile zip name always 'files.zip' Example >>> path = task_func('/path/to/files') >>> isinstance(path, str) True\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    files = glob.glob(directory + '/*')\n    if not files:\n        return None\n\n    zip_name = 'files.zip'\n    with zipfile.ZipFile(zip_name, 'w') as zipf:\n        for file in files:\n            zipf.write(file, arcname=os.path.basename(file))\n\n    return os.path.abspath(zip_name)\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing URLs plot Parameters text (str): text analyze Returns WordCloud object generated word cloud Raises ValueError(\"No words available generate word cloud after removing URLs.\"): no words available after removing URLs Requirements wordcloud.WordCloud matplotlib.pyplot Example print(task_func('Visit https://www.python.org more info Python great love Python.'Python' 1.0 'Visit' 0.5 'info' 0.5 'great' 0.5 'love' 0.5 print(task_func'Check link http://www.example Machine learning fascinating.'Check' 1.0 'link' 1.0 'Machine' 1.0 'learning' 1.0 'fascinating' 1.0\n    \"\"\"\n    # Remove URLs\n    text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n\n    # Split text into words\n    words = text.split()\n\n    # Check if there are words available\n    if not words:\n        raise ValueError(\"No words available. Generate word cloud after removing URLs.\")\n\n    # Generate word cloud\n    wordcloud = WordCloud().generate(text)\n\n    # Display the word cloud\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n    plt.show()\n\n    return wordcloud\n\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train random forest classifier classification rows dataframe column interest plot bar plot feature importance each column xlabel bar plot 'Feature Importance Score' ylabel 'Features' title 'Visualizing Important Features' Sort feature importances descending order Use feature importances x-axis feature names y-axis Parameters df (pandas.DataFrame) : Dataframe data classify target_column (str) : Name target column Returns sklearn.model.RandomForestClassifier : random forest classifier trained input data matplotlib.axes.Axes: Axes object plotted data. Requirements pandas - sklearn.ensemble - seaborn - matplotlib.pyplot Example import pandas as pd data = pd.DataFrame({\"X\" : [-1, 3, 5, -4, 7, 2], \"label\": [0, 1, 1, 0, 1, 1]}) model, ax = task_func(data, \"label\") print(data.head(2)) X label 0 -1 0 1 3 1 >>> print(model) RandomForestClassifier(random_state=42)\n    \"\"\"\n    X = df.drop([target_column], axis=1)\n    y = df[target_column]\n\n    clf = RandomForestClassifier(random_state=42)\n    clf.fit(X, y)\n\n    feature_importances = pd.DataFrame(clf.feature_importances_, index=X.columns, columns=['importance']).sort_values('importance', ascending=False)\n\n    fig, ax = plt.subplots()\n    sns.barplot(x=feature_importances.index, y=feature_importances['importance'], ax=ax)\n    ax.set_xlabel('Features')\n    ax.set_ylabel('Feature Importance Score')\n    ax.set_title('Visualizing Important Features')\n\n    return clf, ax\n\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates Flask application configured user authentication Flask-Login defines routes login logout protected page user authentication managed simple User class login form Flask-WTF application uses dynamic configuration security template rendering Parameters: secret_key (str): secret key application session management template_folder (str): path directory containing Flask templates Requirements flask flask_login flask_wtf wtforms wtforms.validators werkzeug.security Returns Flask application instance configured user authentication. Examples >>> app = task_func('mysecretkey' 'templates') >>> 'login' [rule.endpoint rule app.url_map.iter_rules()] True >>> app.config['SECRET_KEY'] 'mysecretkey' True\n    \"\"\"\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n    login_manager.login_view = 'login'\n\n    class User(UserMixin):\n        def __init__(self, username, password):\n            self.id = username\n            self.password = generate_password_hash(password)\n\n        def check_password(self, password):\n            return check_password_hash(self.password, password)\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = User(form.username.data, form.password.data)\n            if user.id == 'admin' and user.check_password(form.password.data):\n                login_user(user)\n                return redirect(url_for('protected'))\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('login'))\n\n    @app.route('/protected')\n    @login_required\n    def protected():\n        return render_template('protected.html')\n\n    return app\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies removes outliers from column dataset based on Z-score standardizes column calculates Z-scores removes data points where Z-score exceeds threshold visualizes data before after outlier removal. Parameters: data dataset column index column for outliers outlier_z_score Z-score threshold identify outliers Returns tuple containing original data data without outliers indices outliers. Requirements: - numpy matplotlib.pyplot scipy.stats - sklearn.preprocessing.StandardScaler function plots two plots 'Data with Outliers' shows original data including outliers 'Data without Outliers' displays data after removing outliers Z-score threshold visual comparison impact of outlier removal on dataset. Examples data = np.array([[14, 25], [1, 22] [7, 8] [100, 200]]) column = 1 len(task_func(data, column, 3.0)) 3 isinstance(task_func(data column, 3.0)[0] np.ndarray) True >>> isinstance(task_func(data column 3.0)[1] np.ndarray) True isinstance(task(data 3.0)[2] tuple) True\n    \"\"\"\n    # Standardize the data\n    scaler = StandardScaler()\n    data_std = scaler.fit_transform(data)\n\n    # Calculate Z-scores\n    z_scores = stats.zscore(data_std[:, column])\n\n    # Identify outliers\n    outliers = np.where(np.abs(z_scores) > outlier_z_score)\n\n    # Remove outliers\n    data_no_outliers = np.delete(data_std, outliers, axis=0)\n\n    # Plot data with outliers\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.boxplot(data_std[:, column])\n    plt.title('Data with Outliers')\n\n    # Plot data without outliers\n    plt.subplot(1, 2, 2)\n    plt.boxplot(data_no_outliers[:, column])\n    plt.title('Data without Outliers')\n    plt.show()\n\n    return data, outliers, (data_std, data_no_outliers)\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-means clustering dataset generate scatter plot visualizing clusters centroids Parameters data (pd.DataFrame): dataset clustered rows samples columns features. n_clusters (int): number clusters form greater than 1. Defaults to 3. Returns tuple np.ndarray array cluster labels each sample plt.Axes Axes object scatter plot showing clusters centroids ValueError If 'data not pd.DataFrame ValueError 'n_clusters' not integer greater than 1. Requirements - numpy - pandas - matplotlib - sklearn Example np.random.seed(42) data = pd.DataFrame(np.random.rand(100, 2) columns=['Feature1', 'Feature2']) ax = task_func(data, 3) ax.get_title() 'K-Means Clustering'\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' not pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' not integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    labels = kmeans.fit_predict(data)\n\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='X')\n\n    ax.set_title('K-Means Clustering')\n\n    return labels, ax\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) dataset record result generates scatter plot transformed data Parameters data (DataFrame): dataset n_components number principal components calculate Default 2. Returns DataFrame transformed data principal components Axes matplotlib Axes object scatter plot ValueError n_components not positive integer Requirements - numpy - pandas matplotlib.pyplot sklearn.decomposition Example data = pd.DataFrame([[14, 25], [1, 22] [7, 8]] columns['Column1 'Column2']) transformed_data plot = task_func(data)\n    \"\"\"\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    pca = PCA(n_components=n_components)\n    transformed_data = pca.fit_transform(data)\n\n    transformed_data_df = pd.DataFrame(transformed_data, columns=[f\"PC{i+1}\" for i in range(n_components)])\n\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data_df.PC1, transformed_data_df.PC2)\n\n    return transformed_data_df, ax\n\ndata = pd.DataFrame([[14, 25], [1, 22], [7, 8]], columns=['Column1', 'Column2'])\ntransformed_data, plot = task_func(data)\nplt.show()\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws seaborn pair plot iris dataset using Arial font function sets global font to Arial for better readability visual appeal generates pair plot from iris dataset each subplot represents relationship between two features colored by species plot includes title 'Iris Dataset Pair Plot' labels each feature axes. Parameters: None Returns plt.Figure: matplotlib Figure object seaborn pair plot iris dataset plot has 'Iris Dataset Pair Plot' title subplot axes labeled feature names 'sepal length (cm) width (cm 'petal length. Requirements: matplotlib.pyplot - pandas - seaborn - sklearn.datasets Example: >>> = task_func() >>> type(fig) <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target\n    df['species'] = df['species'].map({0: iris.target_names[0], 1: iris.target_names[1], 2: iris.target_names[2]})\n\n    plt.rcParams[\"font.family\"] = \"Arial\"\n\n    fig = plt.figure(figsize=(10, 10))\n    sns.pairplot(df, hue='species', markers=[\"o\", \"s\", \"D\"])\n    plt.title('Iris Dataset Pair Plot', fontsize=16)\n\n    return fig\n\nfig = task_func()\nplt.show()\n"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates plot random time series data past 30 days reproducibility controlled optional seed parameter plot styled Arial font readability. Parameters: seed (int optional): random number generator ensure reproducibility Defaults to 42. Returns matplotlib.axes.Axes Axes object line plot time series data plot 'Date' x-axis label 'Value' y-axis label 'Random Time Series Data' title. Raises ValueError issue generating data plot. Requirements matplotlib.pyplot - pandas - random - datetime Example >>> ax = task_func() >>> ax.get_title() 'Random Time Series Data'.get_xlabel() 'Date' >>> ax.get_ylabel() 'Value'\n    \"\"\"\n    random.seed(seed)\n    try:\n        dates = pd.date_range(start=datetime.now(), periods=30).tolist()\n        values = [random.randint(1, 100) for _ in range(30)]\n        df = pd.DataFrame({'Date': dates, 'Value': values})\n        ax = df.plot(kind='line', x='Date', y='Value', title='Random Time Series Data', fontsize=12, legend=False)\n        ax.set_xlabel('Date', fontsize=12)\n        ax.set_ylabel('Value', fontsize=12)\n        plt.xticks(rotation=45, ha='right')\n        plt.rcParams[\"font.family\"] = \"Arial\"\n        return ax\n    except Exception as e:\n        raise ValueError(f'Issue generating data plot: {e}')\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw correlation heatmap Boston Housing dataset using Seaborn option save specified file Parameters seed (int optional): Random seed for reproducibility Defaults 42. font family sans-serif Arial Returns matplotlib.axes.Axes Axes object containing heatmap plot Raises ValueError error generating saving plot. Requirements matplotlib - os - pandas - seaborn - numpy Example ax = task_func() >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    np.random.seed(seed)\n    boston_data = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    boston_data.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n    correlation_matrix = boston_data.corr().round(2)\n    plt.figure(figsize=(10, 10))\n    sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm')\n    plt.show()\n\ntask_func()\n"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes time series in 'value' column DataFrame into trend seasonality residuals Parameters: df (DataFrame): DataFrame with columns 'group' 'date' 'value'. freq (str optional): Frequency of time series data. Defaults to 'D' (daily). decomposition_model (str optional): Type of decomposition model Options 'additive' or 'multiplicative' Defaults to 'multiplicative'. Returns: tuple: tuple containing decomposition result (DecomposeResult object) matplotlib Axes object. Raises ValueError: If 'df' not DataFrame lacks required columns contains invalid data types. ValueError 'freq' not valid frequency string. ValueError If 'decomposition_model' not 'additive' or 'multiplicative'. Requirements: - pandas - matplotlib.pyplot - statsmodels.tsa.seasonal Example df = pd.DataFrame({ \"group\": [\"A\"] * 14, \"date\": pd.to_datetime([\"2022-01-01\",]), \"value\": [10, 12, 13, 15, 17, 16, 14, 13, 12 15 18, 20, 19], }) >>> result, ax = task_func(df, freq='D', decomposition_model='multiplicative') >>> plt.show() display plot with title 'Time Series Decomposition' y-axis labeled 'Value'\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' not DataFrame\")\n    if not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"'df' lacks required columns\")\n    if not all(df[col].dtype in [pd.np.float64, pd.np.int64] for col in ['value']):\n        raise ValueError(\"'df' contains invalid data types\")\n    if freq not in ['D', 'W', 'M', 'Q', 'Y']:\n        raise ValueError(\"'freq' not valid frequency string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"'decomposition_model' not 'additive' or 'multiplicative'\")\n\n    df.set_index('date', inplace=True)\n    df = df.groupby('group')['value'].resample(freq).mean().reset_index()\n    decomposition = seasonal_decompose(df['value'], model=decomposition_model, extrapolate_trend='freq')\n\n    fig, ax = plt.subplots(4, 1, figsize=(10, 10))\n    decomposition.observed.plot(ax=ax[0], legend=False)\n    ax[0].set_ylabel('Observed')\n    decomposition.trend.plot(ax=ax[1], legend=False)\n    ax[1].set_ylabel('Trend')\n    decomposition.seasonal.plot(ax=ax[2], legend=False)\n    ax[2].set_ylabel('Seasonality')\n    decomposition.resid.plot(ax=ax[3], legend=False)\n    ax[3].set_ylabel('Residuals')\n    plt.suptitle('Time Series Decomposition')\n\n    return decomposition, ax\n\ndf = pd.DataFrame({\n    \"group\": [\"A\"] * 14,\n    \"date\": pd.to_datetime([\"2022-01-01\", \"2022-"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate pandas Series random dates specified date range including start end_date optional seed for reproducibility function creates series dates randomly selected between specified start end dates inclusive allows specifying seed for random number generator ensure reproducible results suitable for simulations tests consistency. Parameters start_date optional): start date range Defaults to January 1, 2020. end_date optional): end date range Defaults to December 31, 2020. seed (int optional): Seed for random number generator reproducibility Default 42. Returns pandas.Series: Series object containing random dates specified range each date datetime.datetime object series length matches number days in specified range. Raises ValueError: If 'start_date or 'end_date' not datetime.datetime instance or 'start_date later than 'end_date' start_date end_date inclusive both dates potential values generated series default seed value 42 results reproducible by default unless different seed specified user. Requirements pandas - datetime - random Example dates = task_func(seed=123) >>> print(dates.head()) Prints first 5 dates from series 0 2020-01-27 1 2020-05-17 2 2020-02-14 3 2020-07-27 4 2020-05-16 dtype datetime64[ns]\n    \"\"\"\n    random_seed(seed)\n    if not isinstance(start_date, datetime) or not isinstance(end_date, datetime):\n        raise ValueError(\"'start_date' and 'end_date' must be datetime.datetime instances\")\n    if start_date > end_date:\n        raise ValueError(\"'start_date' must be earlier than 'end_date'\")\n    n_days = (end_date - start_date).days + 1\n    dates = [start_date + timedelta(days=randint(0, n_days - 1)) for _ in range(n_days)]\n    return pd.Series(dates)\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify list adding element '12' concatenate CSV files directory into DataFrame number files concatenated determined by sum numbers list. Parameters: my_list input list modified in place file_dir optional): directory search for CSV files. Defaults './data_files/' file_ext optional): file extension files concatenate Defaults '.csv' Returns DataFrame pandas DataFrame concatenating data from selected CSV files TypeError 'my_list' not list FileNotFoundError no files found in specified directory. Requirements - pandas - os - glob Example create_dummy_csv() >>> my_list = [1, 2, 3] df = task_func(my_list) print(df.head()) B 0 0 3 1 1 4 2 2 5 3 0 3 4 1 4 >>> tearDown_dummy()\n    \"\"\"\n    # Check if my_list is a list\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' should be a list\")\n\n    # Check if directory exists\n    if not os.path.isdir(file_dir):\n        raise FileNotFoundError(f\"No such directory: {file_dir}\")\n\n    # Get all CSV files in the directory\n    files = glob.glob(file_dir + '*' + file_ext)\n\n    # Check if there are any CSV files in the directory\n    if not files:\n        raise FileNotFoundError(f\"No {file_ext} files found in directory: {file_dir}\")\n\n    # Concatenate all CSV files into a single DataFrame\n    df = pd.concat((pd.read_csv(file) for file in files), ignore_index=True)\n\n    # Add '12' to the list\n    my_list.append('12')\n\n    return df\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list' appending number 12 generates list random integers based on sum elements_list limited by 'size' measures time plots histogram of generated random numbers size list determined by sum numbers in 'my_list' upper limit set by 'size' random integers within range 1 to 100 inclusive. Parameters: my_list (list): input list containing numeric elements size (int): Maximum size limit for generated list random numbers Default is 100. seed (int): Seed value for random number generator for reproducibility Default is 100. Returns tuple: containing time taken to generate list (in seconds float) matplotlib Axes object for histogram x-axis labeled 'Number' representing range of random integers y-axis labeled 'Frequency' representing frequency of each integer in generated list. Raises TypeError: If 'my_list' not list ValueError: If contains elements not numeric histogram plots distribution of random numbers generated number range (1-100) on x-axis count (frequency) of each number on y-axis. Requirements: - random - time - matplotlib.pyplot Example: >>> my_list = [2, 3, 5] >>> time_taken, ax = task_func(my_list) >>> print(type(time_taken)) Example output: <class 'float'> >>> ax.get_title() Returns 'Histogram of Random Numbers'\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n    if not all(isinstance(i, (int, float)) for i in my_list):\n        raise ValueError(\"all elements in 'my_list' must be numeric\")\n    if not isinstance(size, int):\n        raise TypeError(\"'size' must be an integer\")\n    if not isinstance(seed, int):\n        raise TypeError(\"'seed' must be an integer\")\n\n    random_seed(seed)\n    start_time = time.time()\n    random_numbers = [randint(1, 100) for _ in range(sum(my_list))]\n    end_time = time.time()\n\n    fig, ax = plt.subplots()\n    ax.hist(random_numbers, bins=range(1, 101), edgecolor='black')\n    ax.set_xlabel('Number')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Numbers')\n\n    return end_time - start_time, ax\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape first table from web page extract data into Pandas DataFrame function scrapes first table specified web page URL extracts data into DataFrame each row corresponds to table row (<tr>) each column represents data within table data elements (<td>) row DataFrame columns named after table's header row (<th> if present If table lacks headers columns remain unnamed. Parameters: url (str): URL webpage to scrape Defaults to 'http://example.com' Returns pd.DataFrame: containing scraped table data rows corresponding to table rows columns named after table headers if available. Raises ConnectionError: issue connecting to URL requests.HTTPError: If HTTP request URL fails ValueError: If no table data found page or page content parsed. Assumes webpage contains one table attempts to parse first table encountered. Requirements: - pandas - requests - bs4 Example: >>> df = task_func('https://en.wikipedia/List_of_countries_by_GDP_(nominal)') >>> print(df) 0 0 1 Largest economies world by GDP (nominal...\n    \"\"\"\n    # Send HTTP request\n    response = requests.get(url)\n\n    # Raise error if request unsuccessful\n    response.raise_for_status()\n\n    # Parse webpage content\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Find first table\n    table = soup.find('table')\n\n    # Raise error if no table found\n    if table is None:\n        raise ValueError('No table data found on page')\n\n    # Extract table headers\n    headers = [th.text.strip() for th in table.find_all('th')]\n\n    # Extract table rows\n    rows = table.find_all('tr')\n\n    # Extract table data\n    data = []\n    for row in rows:\n        cols = row.find_all('td')\n        cols = [col.text.strip() for col in cols]\n        data.append(cols)\n\n    # Create DataFrame\n    df = pd.DataFrame(data, columns=headers)\n\n    return df\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw histograms numeric columns DataFrame return plots Each histogram represents distribution values one numeric column column name plot title 'Value' x-axis label 'Frequency' y-axis label. Parameters: df (DataFrame): containing data Returns list list Matplotlib Axes objects each representing histogram numeric column. Raises ValueError: input not non-empty DataFrame or no numeric columns. Requirements: - pandas - numpy - matplotlib.pyplot Example >>> df = pd.DataFrame({'A': np.random.normal(0, 1, 100), 'B': np.random.exponential(1, 100)}) >>> axes = task_func(df) ax axes: ... plt.show()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input should be non-empty DataFrame\")\n\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n\n    if not numeric_cols.any():\n        raise ValueError(\"No numeric columns in DataFrame\")\n\n    axes = []\n    for col in numeric_cols:\n        ax = df[col].plot(kind='hist', title='Value', xlabel='Frequency', ylabel='Value')\n        axes.append(ax)\n\n    return axes\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans IP range checks if port open each function returns dictionary with IP addresses keys boolean port status (True if open False otherwise). Parameters: ip_range (str): IP address range scan CIDR notation port (int): port number each IP Returns dict dictionary mapping IP addresses to port status (True if open). Examples result = task_func('192.168.0.0/24', 80) >>> isinstance(result,) True >>> all(isinstance(key, str) isinstance(value, bool) key result.items()) True Requirements: - socket ipaddress.IPv4Network threading.Thread\n    \"\"\"\n    # Create a dictionary to store the results\n    results = {}\n\n    # Create a new thread for each IP in the range\n    threads = []\n    for ip in IPv4Network(ip_range):\n        t = Thread(target=scan_port, args=(ip, port, results))\n        threads.append(t)\n        t.start()\n\n    # Wait for all threads to finish\n    for t in threads:\n        t.join()\n\n    return results\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information message type timestamp message from log file stores in CSV format utility ideal for converting text logs into tructured format log format of 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE'. Parameters: log_file (str): file path to log file parsed. Returns: str: file path to newly created CSV file structured log data. Requirements: - re - pandas - datetime Raises ValueError: If timestamp log entry invalid or no valid log entries found. Example: >>> output_path = task_func('server.log') >>> print(output_path) log_data.csv\n    \"\"\"\n    # Regular expression to match log entries\n    pattern = r\"(?P<type>\\w+): \\[(?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2})\\] - (?P<message>.+)\"\n\n    # List to store log entries\n    log_entries = []\n\n    # Open the log file and read line by line\n    with open(log_file, 'r') as file:\n        for line in file:\n            match = re.match(pattern, line.strip())\n            if match:\n                log_entries.append(match.groupdict())\n            else:\n                raise ValueError(f\"Invalid log entry: {line.strip()}\")\n\n    # If no valid log entries found\n    if not log_entries:\n        raise ValueError(\"No valid log entries found\")\n\n    # Convert log entries to pandas DataFrame\n    df = pd.DataFrame(log_entries)\n\n    # Convert timestamp to datetime\n    df['timestamp'] = df['timestamp'].apply(lambda x: datetime.strptime(x, '%Y-%m-%d %H:%M:%S'))\n\n    # Save DataFrame to CSV file\n    output_file = 'log_data.csv'\n    df.to_csv(output_file, index=False)\n\n    return output_file\n\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes visualizes distribution word lengths in text function generates histogram subplot facilitates understanding word lengths text. Parameters: text (str): text string word lengths calculated. rwidth (float optional): Specifies relative bar width in histogram. Defaults to 0.8. Returns matplotlib.axes.Axes: Axes object containing histogram word lengths. Requirements: - re - matplotlib - numpy If no words in input text or words filtered out histogram empty no bins created. Example: >>> import matplotlib >>> ax = task_func( test sentence.') >>> isinstance(ax, matplotlib.axes.Axes) True\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text)\n    if not words:\n        return\n    lengths = [len(word) for word in words]\n    bins = np.arange(min(lengths), max(lengths) + 2, 1) - 0.5\n    ax = plt.subplot(111)\n    ax.hist(lengths, bins=bins, rwidth=rwidth, color='#607c8a')\n    ax.set_xlabel('Word length')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Word length distribution')\n    return ax\n\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Extracts articles titles case-insensitive keywords (\"like from DataFrame analyzes frequency each word excluding punctuation. Parameters: df (DataFrame): DataFrame columns 'Title' 'Content' with article data Returns: dictionary with keys words values frequency excluding punctuation marks. Requirements: - re - nltk - string ValueError: If DataFrame empty or contain necessary columns 'Title' 'Content'. Example import pandas as pd data = {'Title''What happening 'Nothing special 'Content' ['Like what see? 'Just normal text.} df = pd.DataFrame(data) >>> task_func(df) {'Like': 1, 'what': 1 'you': 1 'see': 1}\n    \"\"\"\n    if df.empty or 'Title' not in df.columns or 'Content' not in df.columns:\n        raise ValueError(\"DataFrame is empty or doesn't contain necessary columns 'Title' 'Content'\")\n\n    nltk.download('punkt')\n    nltk.download('stopwords')\n    from nltk.corpus import stopwords\n    from nltk.tokenize import word_tokenize\n\n    stop_words = set(stopwords.words('english') + list(punctuation))\n\n    df['text'] = df['Title'] + ' ' + df['Content']\n    df['text'] = df['text'].apply(lambda x: re.sub(r'\\d+', '', x))\n    df['text'] = df['text'].apply(lambda x: ' '.join([word for word in word_tokenize(x.lower()) if word not in stop_words]))\n\n    word_freq = nltk.FreqDist(word for word in nltk.word_tokenize(df['text'].str.cat(sep=' ')))\n\n    return word_freq\n\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares transforms text data from specified column in DataFrame removing stopwords numbers punctuation applying vectorization process to convert text into numeric format suitable for analysis. Parameters: dataframe (DataFrame): pandas DataFrame containing text data text_column (str): name of column from text processed. Returns DataFrame Returns DataFrame with each word (after preprocessing as column count as rows. Requirements: - pandas - re - sklearn Example df = pd.DataFrame({'text' [ test. 'Python cool! 'nltk sklearn useful for text analysis}) >>> result = task_func(df, 'text') >>> print(result.to_string(index=False)) analysis cool nltk python sklearn test text useful 0 1 1 1\n    \"\"\"\n    # Preprocessing\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'\\W', ' ', str(x)))\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'\\s+[a-zA-Z]\\s+', ' ', x))\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: re.sub(r'\\s+', ' ', x))\n\n    # Removing stopwords\n    vectorizer = CountVectorizer(stop_words=STOPWORDS)\n    data = vectorizer.fit_transform(dataframe[text_column])\n    dataframe = pd.DataFrame(data.toarray(), columns=vectorizer.get_feature_names_out())\n\n    return dataframe\n\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create GeoPandas DataFrame cities randomly generated coordinates specified ranges. Parameters dic Dictionary 'Lon' 'Lat' keys each tuple (min max) coordinate range Default {'Lon' (-180, 180), 'Lat': (-90, 90)} cities (list): city names Default ['New York' 'London 'Beijing 'Tokyo' 'Sydney'] Returns GeoDataFrame GeoPandas DataFrame 'City' 'Coordinates' ValueError 'Lon' 'Lat' keys missing values not tuples. Requirements - numpy geopandas shapely.geometry Example dic = {'Lon': (-180, 180), 'Lat': (-90, 90)} gdf = task_func(dic)\n    \"\"\"\n    if not isinstance(dic, dict) or not all(isinstance(v, tuple) and len(v) == 2 for v in dic.values()):\n        raise ValueError(\"'Lon' and 'Lat' keys must be present and values must be tuples of two elements.\")\n\n    lon_range, lat_range = dic['Lon'], dic['Lat']\n\n    # Generate random coordinates\n    lon = np.random.uniform(lon_range[0], lon_range[1], len(cities))\n    lat = np.random.uniform(lat_range[0], lat_range[1], len(cities))\n\n    # Create GeoDataFrame\n    gdf = gpd.GeoDataFrame(cities, geometry=[Point(xy) for xy in zip(lon, lat)], columns=['City'])\n\n    return gdf\n\ndic = {'Lon': (-180, 180), 'Lat': (-90, 90)}\ngdf = task_func(dic)"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Generate weather report for specified cities at UTC datetime Parameters utc_datetime UTC datetime weather report generated tzinfo set to UTC. cities (list Cities weather report generated Default: ['New York 'London 'Beijing 'Tokyo 'Sydney' weather_conditions (list Possible weather conditions report Default ['Sunny 'Cloudy 'Rainy 'Snowy 'Stormy' timezones mapping city names to timezones Default cities seed (int): seed value for random number generation reproducibility. Default: 42 Returns pandas.DataFrame: DataFrame weather report Columns include 'City' name city 'Local Time': local time weather report formatted 'YYYY-MM-DD HH:MM:SS ZZZ' (ZZZ timezone abbreviation). 'Weather Condition': weather condition city local time ValueError: utc_datetime not datetime object or other parameters not in expected format. Requirements pandas - pytz - datetime - random Example utc_time = datetime(2023, 1, 1, 12, 0, 0 tzinfo=pytz.UTC) report = task_func(utc_time) >>> print(report) City Local Time Weather Condition 0 New York 2023-01-01 07:00:00 EST Sunny 1 London 2023-01-01 12:00:00 GMT Sunny 2 Beijing 2023-01-01 20:00:00 CST Rainy 3 Tokyo 2023-01-01 21:00:00 JST Cloudy 4 Sydney 2023-01-01 23:00:00 AEDT Cloudy\n    \"\"\"\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime not datetime object\")\n\n    set_seed(seed)\n\n    report = []\n    for city in cities:\n        local_tz = pytz.timezone(timezones[city])\n        local_time = utc_datetime.astimezone(local_tz)\n        weather_condition = weather_conditions[randint(0, len(weather_conditions) - 1)]\n        report.append([city, local_time, weather_condition])\n\n    report_df = pd.DataFrame(report, columns=['City', 'Local Time', 'Weather Condition'])\n    return report_df\n\nutc_time = datetime(2023, 1, 1, 12, 0, 0, tzinfo=pytz.UTC)\nreport = task_func(utc_time)"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate draw random sequence \"elements steps steps either -1 or 1 plotted as random walk Returns descriptive statistics random walk plot include count mean standard deviation minimum 5th percentile 25th percentile median 75th percentile 95th percentile maximum Parameters elements (int): number steps random walk seed seed random number generator Default 0 Returns dictionary containing descriptive statistics random walk. matplotlib.axes.Axes: Axes object plotted random walk Requirements - numpy matplotlib.pyplot pandas ValueError: If elements not positive integer. Example stats, ax = task_func(1000) >>> print(stats) {'count': 1000.0 'mean' 18.18 'std': 9.516415405086212 'min' -5.0 '5%': 1.0 '25%': 11.0 '50%': 20.0 '75%': 26.0 '95%': 31.0 'max': 36.0}\n    \"\"\"\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    np.random.seed(seed)\n    random_walk = np.random.choice([-1, 1], size=elements)\n    random_walk = np.cumsum(random_walk)\n\n    stats = {\n        \"count\": elements,\n        \"mean\": np.mean(random_walk),\n        \"std\": np.std(random_walk),\n        \"min\": np.min(random_walk),\n        \"5%\": np.percentile(random_walk, 5),\n        \"25%\": np.percentile(random_walk, 25),\n        \"50%\": np.percentile(random_walk, 50),\n        \"75%\": np.percentile(random_walk, 75),\n        \"95%\": np.percentile(random_walk, 95),\n        \"max\": np.max(random_walk),\n    }\n\n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_xlabel(\"Steps\")\n    ax.set_ylabel(\"Random Walk\")\n    ax.grid(True)\n\n    return stats, ax\n\n\nstats, ax = task_func(1000)"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download keep zip file from URL extract contents specified directory return list extracted files. Parameters: url (str): URL zip file download destination_directory (str): directory contents zip file extracted headers (dict optional): Custom headers request Defaults to {'accept' 'application/octet-stream'} Returns list list filenames extracted files. Requirements - requests - os - zipfile Example extracted_files = task_func(\"https://example/data.zip\", \"/path/to/destination\") >>> print(extracted_files) ['file1.txt' 'file2.csv']\n    \"\"\"\n    if headers is None:\n        headers = {'accept': 'application/octet-stream'}\n\n    response = requests.get(url, headers=headers, stream=True)\n\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    file_path = os.path.join(destination_directory, url.split(\"/\")[-1])\n\n    with open(file_path, 'wb') as f:\n        f.write(response.content)\n\n    with zipfile.ZipFile(file_path, 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    extracted_files = [file for file in os.listdir(destination_directory) if not file.endswith('.zip')]\n\n    return extracted_files\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate random RGB image view Parameters seed (int optional): Random seed for reproducibility Default 42. image_size (tuple optional): Size generated image (height width channels). Default (100, 100, 3). range_low optional): Lower bound random range Default 0. range_high optional): Upper bound range Default 255. Returns ax (matplotlib.axes.Axes): Axes object plot image (numpy.ndarray): numpy array generated image Raises ValueError: If range_low not less than range_high. Requirements random - numpy opencv matplotlib.pyplot Example ax, image = task_func()\n    \"\"\"\n    if range_low >= range_high:\n        raise ValueError(\"range_low should be less than range_high\")\n\n    random.seed(seed)\n    np.random.seed(seed)\n\n    image = np.random.randint(low=range_low, high=range_high, size=image_size)\n\n    fig, ax = plt.subplots(1, 1)\n    ax.imshow(image)\n\n    return ax, image\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates MxN matrix from list L normalizes based on sound pressure level (SPL) of specified audio file generates spectrogram. Parameters: L (list): list numbers matrix M rows N columns. audio_file (str): path to audio file for SPL calculation. Returns: numpy.ndarray: normalized MxN matrix. matplotlib.figure.Figure: figure object for generated spectrogram. FileNotFoundError: specified audio file exist. Notes spectrogram generated based on amplitude normalized matrix sound pressure level (SPL) calculated from audio file SPL calculated using formula: SPL = 20 * log10(sqrt(mean(data^2))) 'data' is audio data read from file spectrogram displayed with logarithmic scale for frequency linear scale for time SPL amplitude. Requirements: - numpy - os - soundfile - librosa - matplotlib Examples: >>> matrix = task_func([i for in range(100)], 10, 10, 'audio.wav') Requires 'audio.wav' to exist >>> matrix.shape (10, 10) >>> isinstance(matrix, np.ndarray) True\n    \"\"\"\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(f\"File {audio_file} not found\")\n\n    data, sample_rate = librosa.load(audio_file)\n    SPL = 20 * np.log10(np.sqrt(np.mean(data**2)))\n\n    matrix = np.array(L).reshape(M, N)\n    matrix = matrix / np.max(matrix) * (10 ** (SPL / 20))\n\n    fig, ax = plt.subplots(figsize=(10, 4))\n    ax.matshow(matrix, cmap='viridis', aspect='auto')\n    ax.set_title('Spectrogram')\n    ax.set_ylabel('Frequency')\n    ax.set_xlabel('Time')\n\n    return matrix, fig\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    list tuples extract numeric values compute statistics generate histogram overlaid probability density function (PDF). Parameters original (list tuples): Input list each tuple second element numeric value Returns np.array numpy array extracted numeric values Basic statistics array mean standard deviation minimum maximum Axes matplotlib Axes object histogram overlaid PDF histogram plotted density True alpha 0.6 bins 'auto' automatic bin selection Requirements numpy matplotlib.pyplot scipy.stats Example original = [('a', 1) ('b', 2) ('c', 3) ('d', 4)] arr stats ax = task_func(original) print(arr) [1 2 3 4] print(stats) {'mean' 2.5 'std' 1.118033988749895 'min' 1 'max' 4}\n    \"\"\"\n    # Extract numeric values\n    arr = np.array([x[1] for x in original])\n\n    # Compute statistics\n    stats = {\n        'mean': np.mean(arr),\n        'std': np.std(arr),\n        'min': np.min(arr),\n        'max': np.max(arr),\n    }\n\n    # Generate histogram overlaid PDF\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins='auto', density=True, alpha=0.6, color='g', label='Histogram')\n\n    # Plot PDF\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, stats['mean'], stats['std'])\n    ax.plot(x, p, 'k', linewidth=2, label='PDF')\n\n    ax.legend()\n    plt.show()\n\n    return arr, stats\n\n\noriginal = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\narr, stats = task_func(original)"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array list normalize draw original normalized arrays function plot original normalized arrays using matplotlib Parameters original (list): list tuples unzipped into numpy array Returns np.array numpy array original data Normalized array matplotlib.axes.Axes Axes object plotted data Requirements numpy matplotlib.pyplot sklearn.preprocessing Example original = [('a', 1) ('b', 2)'c', 3) ('d', 4)] >>> arr norm_arr ax = task_func(original) print(arr) [1 2 3 4] print(norm_arr) [0.18257419 0.36514837 0.54772256 0.73029674]\n    \"\"\"\n    # Unzip the original list of tuples into two separate lists\n    labels, values = zip(*original)\n\n    # Convert the lists to numpy arrays\n    arr = np.array(values)\n\n    # Normalize the array\n    min_max_scaler = preprocessing.MinMaxScaler()\n    norm_arr = min_max_scaler.fit_transform(arr.reshape(-1, 1))\n    norm_arr = np.array(norm_arr).flatten()\n\n    # Plot the original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(arr, label='Original')\n    ax.plot(norm_arr, label='Normalized')\n    ax.legend()\n    plt.show()\n\n    return arr, norm_arr, ax\n\n"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    dictionary \"data\", function performs operations Adds new key \"a\" value 1 to dictionary Generates signal based on values \"data\". Runs Fast Fourier Transform (FFT) on signal Plots returns FFT signal. Parameters: data (dict): input data dictionary Returns tuple tuple containing ndarray FFT signal Axes: plot of FFT. Requirements: - numpy - scipy.fftpack - matplotlib Example >>> data = {'key1': 1 'key2': 2 'key3': 3} >>> fft, ax = task_func(data)\n    \"\"\"\n    # Add new key \"a\" value 1 to dictionary\n    data[\"a\"] = 1\n\n    # Generate signal based on values \"data\"\n    signal = list(data.values())\n\n    # Run Fast Fourier Transform (FFT) on signal\n    fft_signal = fftpack.fft(signal)\n\n    # Generate frequency array\n    freqs = fftpack.fftfreq(len(signal), d=1/sample_rate)\n\n    # Plot FFT signal\n    fig, ax = plt.subplots()\n    ax.stem(freqs, np.abs(fft_signal))\n    ax.set_xlabel(\"Frequency in Hertz [Hz]\")\n    ax.set_ylabel(\"Frequency Domain (Spectrum) Magnitude\")\n    ax.set_xlim(0, sample_rate / 2)\n    plt.show()\n\n    return fft_signal, ax\n\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates HTTP POST request handler processing incoming data data expected in JSON format key 'data' handler responds 200 success message if data valid or error message otherwise type response retrieved as 'content-type' length 'content-length'. two types error messages: 'Content-Type header not application/json' 'No data key in request'. Returns: function: class handles HTTP POST requests validates incoming data. Requirements: - cgi - http.server - json If 'content-type' header not 'application/json' client sent request unsupported format condition sends 400 Bad Request response message \"Content-Type header not application/json\". If JSON object not contain 'data' key 400 Bad Request response message \"No data key in request\". If request body not contain valid JSON 400 Bad Request response message \"Invalid JSON\". Examples: >>> handler = task_func() >>> isinstance(handler, type) True >>> issubclass(handler, http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            if self.headers['content-type'] != 'application/json':\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(json.dumps({'message': 'Content-Type header not application/json'}).encode())\n                return\n\n            content_length = int(self.headers['content-length'])\n            post_data = self.rfile.read(content_length)\n\n            try:\n                data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(json.dumps({'message': 'Invalid JSON'}).encode())\n                return\n\n            if 'data' not in data:\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(json.dumps({'message': 'No data key in request'}).encode())\n                return\n\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode())\n\n    return Handler\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates HTTP POST request handler processes incoming email data sends email email data JSON object with 'subject' 'message' 'to' keys type response retrieved as 'content-type' length 'content-length'. Parameters: smtp_server SMTP server address smtp_port SMTP server port smtp_username SMTP username smtp_password SMTP password. Returns function class handles HTTP POST requests sends emails based on provided data. Requirements: - cgi - http.server smtplib email.mime.text.MIMEText - json JSONDecodeError: email data not valid JSON results in 400 Bad Request response. ValueError: 'subject' 'message' 'to' keys missing 400 Bad Request response. smtplib.SMTPAuthenticationError: authentication issue with SMTP server communicated client with 535 Authentication Failed response. Examples: >>> handler = task_func('smtp.example.com', 587, 'user@example.com' 'password') >>> isinstance(handler, type) True >>> issubclass(handler, http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            form = cgi.FieldStorage(\n                fp=self.rfile,\n                headers=self.headers,\n                environ={'REQUEST_METHOD':'POST'}\n            )\n            try:\n                data = json.loads(form['data'].value)\n                subject = data['subject']\n                message = data['message']\n                to = data['to']\n            except (json.JSONDecodeError, KeyError):\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(b'Email data not valid JSON')\n                return\n\n            msg = MIMEText(message)\n            msg['Subject'] = subject\n            msg['From'] = smtp_username\n            msg['To'] = to\n\n            try:\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                server.send_message(msg)\n                server.quit()\n                self.send_response(200)\n                self.end_headers()\n                self.wfile.write(b'Email sent')\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.end_headers()\n                self.wfile.write(b'Authentication Failed')\n\n    return Handler\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count words in .txt files directory export counts to JSON file return total. Parameters: filename (str): name output JSON file. directory (str): directory where .txt files located Returns int: total number words .txt files Requirements: - collections.Counter - os - json Example open(\"./testdir/single_file.txt\",\"r\") f: print f.read() hello world count = task_func('single_file.txt'/testdir/') print(count) 3\n    \"\"\"\n    total_counts = Counter()\n    for file in os.listdir(directory):\n        if file.endswith(\".txt\"):\n            with open(os.path.join(directory, file), 'r') as f:\n                words = f.read().split()\n                total_counts += Counter(words)\n\n    with open(filename, 'w') as f:\n        json.dump(total_counts, f)\n\n    return sum(total_counts.values())\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes pandas DataFrame splitting lists 'Value' column into separate columns calculates Pearson correlation coefficient visualizes correlation matrix using heatmap Parameters df (DataFrame): pandas DataFrame two columns 'Date' 'Value' 'Date' column contains dates 'Value' column contains numbers. plot (bool): Optional if True displays heatmap correlation matrix returns Returns DataFrame pandas DataFrame containing correlation coefficients among lists 'Value' column. Axes (optional): matplotlib Axes object containing heatmap plot returned if 'plot' True. function \"Correlation Heatmap\" title heatmap plot If DataFrame input empty or invalid 'Value' ValueError. Requirements pandas - seaborn - matplotlib.pyplot Example df = pd.DataFrame(['2021-01-01', [8, 10, 12]]'2021-01-02' [7, 9, 11]]] columns=['Date', 'Value']) >>>_df = task_func(df) >>> print(corr_df[0][0])\n    \"\"\"\n    # Check if DataFrame is empty or has invalid columns\n    if df.empty or not all(col in df.columns for col in COLUMNS):\n        raise ValueError(\"Invalid DataFrame\")\n\n    # Convert 'Value' column to list of lists\n    df['Value'] = df['Value'].apply(lambda x: [i for i in x])\n\n    # Split 'Value' column into separate columns\n    df = df.explode('Value')\n\n    # Convert 'Value' column to numeric\n    df['Value'] = pd.to_numeric(df['Value'])\n\n    # Calculate Pearson correlation coefficient\n    corr_df = df.groupby('Date')['Value'].apply(lambda x: x.corr(method='pearson')).reset_index(name='Pearson')\n\n    # Pivot DataFrame to get correlation matrix\n    corr_matrix = corr_df.pivot('Date', 'Date', 'Pearson')\n\n    if plot:\n        # Create heatmap plot\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        plt.show()\n\n    return corr_df\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create report on students' grades subjects calculate average grade each student subject. Parameters: additional_fields (list string optional): additional list of student subjects not duplicate with constants (default = []) Returns DataFrame pandas DataFrame with columns subjects student's grades average grades DataFrame includes average grade per subject. function take input parameters generates report based on predefined constants additional fields input 'Average' row name for average grade each subject 'Average Grade' column name for average grade each student Grade each subject between 0 to 100. Requirements: pandas - random - statistics.mean Example >>> random.seed(0) >>> report = task_func(['Computer Science', 'Geography']) >>> print(report.columns) Index(['Physics' 'Math 'Chemistry 'Biology 'English' 'History' 'Computer Science' 'Geography' 'Average Grade'] dtype='object')\n    \"\"\"\n    # Add additional fields to the list of fields\n    fields = FIELDS + additional_fields\n\n    # Generate random grades for each student for each subject\n    data = {field: [random.randint(0, 100) for _ in range(100)] for field in fields}\n\n    # Add the grades to a DataFrame\n    df = pd.DataFrame(data, index=STUDENTS)\n\n    # Calculate the average grade for each student\n    df['Average Grade'] = df.mean(axis=1)\n\n    # Calculate the average grade for each subject\n    df['Average'] = df.mean(axis=0)\n\n    return df\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates CSV file simulated data for 100 people including name age height weight calculates appends average age height weight end file. Parameters: filename (str): name CSV file created Returns str path created CSV file. Requirements - os - csv - random - statistics.mean Example random.seed(0) filename = 'people_report.csv' path = task_func(filename) >>> os.path.exists(path)\n    \"\"\"\n    # Generate data\n    people = []\n    for i in range(PEOPLE_COUNT):\n        person = {\n            'Name': f'Person{i+1}',\n            'Age': random.randint(18, 80),\n            'Height': random.randint(150, 200),\n            'Weight': random.randint(50, 120),\n        }\n        people.append(person)\n\n    # Calculate averages\n    avg_age = mean([person['Age'] for person in people])\n    avg_height = mean([person['Height'] for person in people])\n    avg_weight = mean([person['Weight'] for person in people])\n\n    # Append averages to people\n    for person in people:\n        person['Average Age'] = avg_age\n        person['Average Height'] = avg_height\n        person['Average Weight'] = avg_weight\n\n    # Write to CSV\n    with open(filename, 'w', newline='') as file:\n        writer = csv.DictWriter(file, fieldnames=COLUMNS + ['Average Age', 'Average Height', 'Average Weight'])\n        writer.writeheader()\n        writer.writerows(people)\n\n    return os.path.abspath(filename)\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files directory first text not in brackets Move files to subdirectories named after text no matching text found file not moved. Parameters: directory (str): directory path Returns tuple: - str: directory path with organized files. dict: dictionary keys created subdirectories values lists files moved. Requirements: - re - os - shutil - datetime Example import tempfile temp_dir = tempfile.mkdtemp() create_test_directory(temp_dir {\"file1.txt \"file2.txt \"file3.txt \"subdir2[content]}) dir files = task_func(temp_dir) >>> files['subdir2'][0].startswith('file3_') True\n    \"\"\"\n    files_moved = {}\n    for filename in os.listdir(directory):\n        match = re.search(r'\\[(.*?)\\]', filename)\n        if match:\n            text = match.group(1)\n            if not os.path.exists(os.path.join(directory, text)):\n                os.mkdir(os.path.join(directory, text))\n            shutil.move(os.path.join(directory, filename), os.path.join(directory, text, filename))\n            if text not in files_moved:\n                files_moved[text] = []\n            files_moved[text].append(filename)\n        else:\n            if 'other' not in files_moved:\n                files_moved['other'] = []\n            files_moved['other'].append(filename)\n    return directory, files_moved\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from as subprocesses. Parameters: file_list (list str): files name to run. Returns: exit codes of subprocesses. Requirements: - subprocess - time - threading Example >>> task_func([/file1.bat\",/file2.bat\"]) [0, 0]\n    \"\"\"\n    threads = []\n    exit_codes = []\n    for file in file_list:\n        t = threading.Thread(target=run_file, args=(file, exit_codes))\n        threads.append(t)\n        t.start()\n\n    for t in threads:\n        t.join()\n\n    return exit_codes\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find run .bat files directory returning file names exit codes. Parameters directory_path (str): path directory search for .bat files Returns list of tuples each tuple contains file name exit code exit code None if file executed. Requirements subprocess - os - sys - glob Example task_func(\"path/to/directory\") [(\"file1.bat\", 0), (\"file2.bat\", 1)]\n    \"\"\"\n    if not os.path.isdir(directory_path):\n        print(f\"{directory_path} is not a directory\")\n        return None\n\n    bat_files = glob.glob(os.path.join(directory_path, \"*.bat\"))\n\n    result = []\n    for bat_file in bat_files:\n        try:\n            exit_code = subprocess.call(bat_file, shell=True)\n            result.append((os.path.basename(bat_file), exit_code))\n        except Exception as e:\n            print(f\"Error executing {bat_file}: {str(e)}\")\n            result.append((os.path.basename(bat_file), None))\n\n    return result\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    function takes pandas DataFrame column name input generates two subplots in one matplotlib figure first subplot histogram kernel density estimate for numerical second box plot distribution values specified column. Parameters: df (DataFrame): Input DataFrame with numerical or categorical data col (str): name column to be plotted column should exist DataFrame contain numerical or categorical data. Returns matplotlib.figure.Figure: matplotlib figure object containing histogram box plot. Requirements: pandas - seaborn - matplotlib.pyplot input df must be DataFrame not empty contain specified column if not function raise ValueError. Example >>> df = pd.DataFrame({'value': [1, 2 3 4 5 6 7 8 9 10]}) >>> fig = task_func(df, 'value') type(fig) <class 'matplotlib.figure.Figure'> plt.close() >>> df = pd.DataFrame({'category': ['A', 'B',}) >>> = task_func(df, 'category') type(fig) <class 'matplotlib.figure.Figure'> len(fig.axes) 2 >>> plt.close()\n    \"\"\"\n    if col not in df.columns:\n        raise ValueError(f\"Column {col} not found in DataFrame\")\n\n    fig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n    if pd.api.types.is_numeric_dtype(df[col]):\n        sns.histplot(df[col], kde=True, ax=axes[0])\n        axes[0].set_title(f'Histogram and KDE for {col}')\n    elif pd.api.types.is_categorical_dtype(df[col]):\n        sns.boxplot(y=df[col], ax=axes[1])\n        axes[1].set_title(f'Box plot for {col}')\n    else:\n        raise ValueError(f\"Column {col} is not numerical or categorical\")\n\n    plt.tight_layout()\n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run Python script process predefined arguments default waits for process complete wait False function returns None Parameters script_path (str): path Python script run wait (bool): wait for script complete Default True *args arguments passed to script Returns int return code subprocess If 'wait' False returns None Requirements subprocess - os - sys - time Raise ValueError If script exist subprocess.CalledProcessError script raises exception. Example import tempfile script_path = tempfile.NamedTemporaryFile(suffix='.py').name open(script_path, 'w') f: ... _ = f.write('import sys;sys.exit(0);') >>> task_func(script_path True, 'arg1', 'arg2') 0 >>> task_func(script_path False, 'arg1', 'arg2') return None\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"Script {script_path} does not exist\")\n\n    if wait:\n        try:\n            return subprocess.check_call([sys.executable, script_path] + list(args))\n        except subprocess.CalledProcessError as e:\n            raise Exception(f\"Script {script_path} raised exception: {str(e)}\")\n    else:\n        subprocess.Popen([sys.executable, script_path] + list(args))\n        return None\n\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from Excel spreadsheet calculate mean standard deviation column draw bar chart bar chart returned as matplotlib figure object Parameters file_location (str): path to Excel file sheet_name (str): name sheet load data Returns dict: dictionary with mean standard deviation each column matplotlib.figure.Figure: figure object containing bar chart figure titled 'Mean and Standard Deviation' X-axis labeled 'Columns' Y-axis 'Values' Raises FileNotFoundError: If Excel file exist at specified path ValueError: If specified sheet exist in workbook. Requirements pandas - numpy - matplotlib.pyplot - os - openpyxl Example file_path='test.xlsx' >>> create_dummy_excel(file_path) result, fig = task_func(file_path, 'TestSheet') >>> os.remove(file_path) >>> fig.axes.get_title() 'Mean and Standard Deviation'\n    \"\"\"\n    if not os.path.exists(file_location):\n        raise FileNotFoundError(f\"File {file_location} does not exist\")\n\n    xls = pd.ExcelFile(file_location)\n    if sheet_name not in xls.sheet_names:\n        raise ValueError(f\"Sheet {sheet_name} does not exist in workbook\")\n\n    df = pd.read_excel(file_location, sheet_name=sheet_name)\n\n    mean_std_dev = df.agg([np.mean, np.std])\n\n    fig, ax = plt.subplots()\n\n    ax.bar(mean_std_dev.index, mean_std_dev.mean(), label='Mean')\n    ax.bar(mean_std_dev.index, mean_std_dev.std(), bottom=mean_std_dev.mean(), label='Standard Deviation')\n\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n    ax.legend()\n\n    return fig\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return bar chart number activities performed each day week based provided list activities activities not datetime objects raise TypeError. Parameters activities (list datetime objects): list datetime objects representing each activity occurred Returns matplotlib.axes.Axes Axes object representing bar chart x-axis labeled 'Day Week' y-axis 'Number Activities' title 'Weekly Activity'. Requirements datetime collections matplotlib.pyplot Raises TypeError If activities not datetime objects. Example >>> ax = task_func([datetime(2023, 10, 25), datetime(2023, 10, 26)]) >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not all(isinstance(i, datetime) for i in activities):\n        raise TypeError(\"All elements in the list must be datetime objects\")\n\n    week_days = {0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'}\n    day_count = defaultdict(int)\n\n    for activity in activities:\n        day_of_week = activity.weekday()\n        day_count[week_days[day_of_week]] += 1\n\n    fig, ax = plt.subplots()\n    ax.bar(day_count.keys(), day_count.values())\n    ax.set_xlabel('Day Week')\n    ax.set_ylabel('Number Activities')\n    ax.set_title('Weekly Activity')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves random file source to destination directory. Parameters src_dir (str): path source directory file selected moved dest_dir (str): path destination directory file moved seed (int Optional): seed random number generator Defaults to 100. Returns str: name file moved Format 'filename.extension' (e 'file1.txt'). Requirements - os - shutil - random Examples import tempfile src_dir = tempfile.mkdtemp() dest_dir = tempfile.mkdtemp() open(os.path.join(src_dir 'file1.txt'), 'w').close() open(os.path.join(src_dir 'file2.txt'), 'w').close() >>> task_func(src_dir, dest_dir, seed=1) 'file2.txt'\n    \"\"\"\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    random_file = random.choice(files)\n    shutil.move(os.path.join(src_dir, random_file), dest_dir)\n    return random_file\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects double quotes Excel (.xlsx) files specified directory prefixing double backslash. Parameters directory_path (str): path directory containing Excel files Default './xlsx_files/' Returns int: number Excel files processed Requirements Libraries: re, openpyxl glob Excel files specified directory Example import tempfile temp_dir = tempfile.mkdtemp() workbook = Workbook() sheet = workbook.active sheet.append([ \"test\" string']) >>> workbook.save(temp_dir + '/test.xlsx') task_func(temp_dir) 1\n    \"\"\"\n    # Get all .xlsx files in the directory\n    files = glob.glob(directory_path + '/*.xlsx')\n\n    # Initialize counter\n    counter = 0\n\n    # Loop through each file\n    for file in files:\n        # Load the workbook\n        wb = load_workbook(filename=file)\n\n        # Loop through each worksheet\n        for sheet in wb:\n            # Loop through each row\n            for row in sheet:\n                # Loop through each cell\n                for cell in row:\n                    # If the cell contains a double quote, replace it with two double quotes\n                    if re.search(r'\\\"', str(cell.value)):\n                        cell.value = re.sub(r'\\\"', '\"\"', str(cell.value))\n                        counter += 1\n\n        # Save the workbook\n        wb.save(file)\n\n    # Return the number of files processed\n    return counter\n\n"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram sine wave cosine wave given frequency return plot. Parameters: frequency (float): frequency wave non-negative float. sample_size (int Optional): positive integer number samples for wave Default 10000. Returns matplotlib.figure.Figure: figure object containing plot. matplotlib.axes.Axes: axes object plot. Requirements numpy for data generation matplotlib.pyplot for plotting math for mathematical constants Raises ValueError: If frequency negative ValueError If sample size non-positive. Example >>> fig, ax = task_func(1, 2500) >>> type(fig) <class 'matplotlib.figure.Figure'> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be positive\")\n\n    time = np.arange(sample_size)\n    sine_wave = np.sin(2 * np.pi * frequency * time)\n    cosine_wave = np.cos(2 * np.pi * frequency * time)\n\n    fig, ax = plt.subplots()\n    ax.plot(time, sine_wave, label='Sine wave')\n    ax.plot(time, cosine_wave, label='Cosine wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_title('Sine and Cosine Waves')\n    ax.legend()\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes Flask-Mail instance sending emails generated Flask application specified app_name Parameters app_name (string): Flask application name Returns tuple tuple containing Flask-Mail instance app mail configurations details email server retrieved from environment variables If variables exist use defaults 'MAIL_SERVER' 'localhost' 'MAIL_PORT' 25 'MAIL_USE_TLS' False (boolean 'MAIL_USERNAME None 'MAIL_PASSWORD' None Requirements flask - os flask_mail Example mail configs = task_func(\"test\") >>> print(mail.__getattribute__(\"app\").name) test\n    \"\"\"\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = os.getenv('MAIL_PORT', 25)\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False)\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    mail = Mail(app)\n    return mail, app.config\n"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate mean median standard deviation data from specific column in Excel file Parameters: excel_file_path (str): path to directory Excel file file_name (str): name Excel file column_name (str): name column to analyze Returns: dictionary with mean median standard deviation Raises FileNotFoundError: Excel file at specified path ValueError If specified column not found. Requirements pandas - numpy - os Example data_dir file_name = '/data/' 'excel_file1.xls' create_dummy_file(data_dir file_name) >>> stats = task_func(data_dir file_name 'Sales') >>> os.remove(data_dir + file_name) >>> os.rmdir(data_dir) print(stats) {'mean': 200.0 'median': 200.0 'std_dev': 70.71067811865476}\n    \"\"\"\n    if not os.path.exists(excel_file_path + file_name):\n        raise FileNotFoundError(f\"Excel file {file_name} not found at path {excel_file_path}\")\n\n    df = pd.read_excel(excel_file_path + file_name)\n\n    if column_name not in df.columns:\n        raise ValueError(f\"Column {column_name} not found in Excel file {file_name}\")\n\n    stats = {\n        'mean': np.mean(df[column_name]),\n        'median': np.median(df[column_name]),\n        'std_dev': np.std(df[column_name])\n    }\n\n    return stats\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains neural network on input data target labels function Splits data into training set (75%) test set (25%), input dimension 2. Constructs Sequential model with one dense hidden layer sigmoid activation function Compiles model using binary cross-entropy loss SGD optimizer with specified learning rate Fits model to training data verbose evaluating on test set as validation data Plots model's training validation loss over epochs returns plot Axes object for customization. Parameters: X (np.ndarray): Input features model each input 2. Y (np.ndarray): Target labels model. Returns Sequential: trained Keras Sequential model. matplotlib.axes.Axes: Axes object of plot plot visualizes model's training validation loss over epochs x-axis representing epochs y-axis loss distinguishes between 'Train' 'Test' losses. input dimension X must always be 2. Axes title is 'Model loss' x-axis label 'Epoch' y-axis label 'Loss' Requirements keras.layers.Dense keras.optimizers.SGD keras.models.Sequential sklearn.model_selection.train_test_split - matplotlib.pyplot Examples >>> X = np.array([[0, 0],, 1],) >>> Y = np.array([[0], [1], [1], [0]]) >>> model, ax = task_func(X, Y) >>> isinstance(model, Sequential) True >>> isinstance(ax, plt.Axes) True\n    \"\"\"\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    model = Sequential()\n    model.add(Dense(1, input_dim=2, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=SGD(lr=0.1), metrics=['accuracy'])\n    history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100, verbose=0)\n\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('Model loss')\n    plt.ylabel('Loss')\n    plt.xlabel('Epoch')\n    plt.legend(['Train', 'Test'], loc='upper left')\n    ax = plt.gca()\n    plt.show()\n\n    return model, ax\n"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide input data into training test sets (70% training 30% test), create Keras Sequential model one hidden layer sigmoid activation function compile model with binary cross-entropy loss SGD optimizer learning rate fit model to training data non-verbose mode plot ROC curve on test set including AUC score in plot legend Parameters: X (np.ndarray): input data input 2. Y.ndarray): target data. Returns keras.models.Sequential: trained Keras model. matplotlib.axes._axes.Axes: matplotlib Axes object for Precision-Recall curve plot. Notes title of axes 'ROC curve' x label 'False positive rate' y label 'True positive rate' Requirements: tensorflow.keras - sklearn.metrics.roc_curve sklearn.metrics.auc sklearn.model_selection.train_test_split - matplotlib Example X = np.array([[0, 0] 1 >>> Y = np.array([[0] [1],]) >>> model, ax = task_func(X, Y) >>> isinstance(model, keras.models.Sequential) True\n    \"\"\"\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    model = keras.Sequential()\n    model.add(keras.layers.Dense(1, input_dim=X.shape[1], activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(lr=0.01), metrics=['accuracy'])\n    model.fit(X_train, y_train, epochs=100, verbose=0)\n\n    y_pred_keras = model.predict(X_test).ravel()\n    fpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test, y_pred_keras)\n    auc_keras = auc(fpr_keras, tpr_keras)\n\n    plt.figure(1)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))\n    plt.xlabel('False positive rate')\n    plt.ylabel('True positive rate')\n    plt.title('ROC curve')\n    plt.legend(loc='best')\n    plt.show()\n\n    return model, plt.gca()\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads RGB image applies K-means clustering segment image into 'n_clusters' regions saves each region as separate image function returns numpy arrays of original and segmented images. Parameters image_path (str): path to RGB image file Default is 'image.jpg' image expected in RGB format 3D array (height x width channels), channels in order of RGB. n_clusters (int): number of clusters for K-means clustering Default is 3. minimum 1 cluster allowed single cluster original image as segmented image. random_seed (int): seed for random number generator in K-means clustering Default 42. Returns tuple: tuple containing two numpy arrays first array represents original RGB image second array segmented image each pixel's color replaced by centroid of cluster. Raises FileNotFoundError: If image file exist path ValueError: If 'n_clusters' not positive integer. Requirements opencv reading image file converting BGR to RGB numpy For array manipulations os checking image file. sklearn.cluster: applying K-means clustering. Example create_dummy_image('image.jpg') >>> original_img_array, segmented_img_array = task_func('image.jpg', 3) >>> os.remove('image.jpg') >>> print(original_img_array.shape) Example output (10 3) >>> print(segmented_img_array.shape) Example output for n_clusters > 1 function assumes input image in RGB format.segmented image array same shape as original image with pixel colors replaced by corresponding cluster centroid colors segmenting image into regions based on color similarity Clustering with single cluster allowed return original image as both original and segmented images all pixels assigned to same cluster.\n    \"\"\"\n    if not os.path.isfile(image_path):\n        raise FileNotFoundError(f\"No such file: {image_path}\")\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(f\"n_clusters must be positive integer, got {n_clusters}\")\n\n    # Read image\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n    # Reshape image to 2D array\n    img_reshape = img.reshape(-1, 3)\n\n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed).fit(img_reshape)\n\n    # Get cluster labels for each pixel\n    labels = kmeans.labels_\n\n    # Get cluster centers\n    centers = kmeans.cluster_centers_\n\n    # Reshape labels to 2D array\n    labels = labels.reshape(img.shape[:2])\n\n    # Replace each pixel color with corresponding cluster center\n    segmented_img = centers[labels]\n\n    # Reshape segmented image to 3D array\n    segmented_img = segmented_img.reshape(img.shape)\n\n    return img, segmented_img\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate product matrix 3D tensor 'T flatten result apply KMeans clustering flattened data visualize Parameters P input matrix T input tensor shape (3, 3 3) n_clusters number clusters KMeans clustering Default 3. random_state random state KMeans clustering Default 0. n_init time k-means algorithm run different centroid seeds Default 10. Returns cluster_result result KMeans clustering ax (matplotlib.axes.Axes): visualization KMeans clustering title 'KMeans Clustering Visualization' Requirements numpy - sklearn matplotlib Example P = np([[6, 2, 7], [1, 1, 8] [8, 7, 1] [9, 6, 4] [2, 1, 1]]) T = np.random.rand(3, 3, 3) cluster_result ax = task_func(P, T n_clusters=3 random_state=0 n_init=10) type(cluster_result) <class 'numpy.ndarray'> type(ax) <class 'matplotlib..Axes'\n    \"\"\"\n    # Calculate product matrix\n    P_flatten = P.flatten()\n    T_flatten = T.flatten()\n    product_matrix = np.outer(P_flatten, T_flatten)\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    kmeans.fit(product_matrix)\n    cluster_result = kmeans.predict(product_matrix)\n\n    # Visualize\n    fig = plt.figure()\n    ax = fig.add_subplot(111, projection=\"3d\")\n    ax.scatter(product_matrix[:, 0], product_matrix[:, 1], product_matrix[:, 2], c=cluster_result)\n    ax.set_title(\"KMeans Clustering Visualization\")\n\n    return cluster_result, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate Voronoi diagram points in 2D plot function errors input invalid wrong type shape Jittering applied prior plotting. Parameters points (np.ndarray): numpy ndarray shape (n_points, 2) with coordinates points seed (int): Random seed for reproducibility Defaults to 0 Returns tuple (vor, ax): tuple containing vor (Voronoi): Voronoi object representing Voronoi diagram points ax (Axes): axes plotted Voronoi diagram. Requirements numpy - scipy - matplotlib.pyplot Example points = np.array([[0, 0],, 1] [1) >>> vor, ax = task_func(points) type(vor) <class 'scipy.spatial.qhull.Voronoi'> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    np.random.seed(seed)\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Input points must be a numpy ndarray\")\n    if points.shape[1] != 2:\n        raise ValueError(\"Input points must have shape (n_points, 2)\")\n    jittered_points = points + np.random.normal(0, 1e-6, points.shape)\n    vor = Voronoi(jittered_points)\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n    ax.scatter(jittered_points[:, 0], jittered_points[:, 1], color='r')\n    return vor, ax\n\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files specified extension from source to destination directory function searches for files source extension If file same name exists in destination directory not moved. Parameters: src_dir source directory path dest_dir (str): destination directory path ext (str): file extension search for (without leading dot). Returns list: list full paths of files successfully moved. If file not moved exists in destination directory not included in list. Raises FileNotFoundError if source or destination directory exist Requirements: - os - shutil - glob Examples test_src_dir = './test_src' test_dest_dir =/test_dest' >>> test_ext = 'txt' >>> os.makedirs(test_src_dir, exist_ok=True) >>>_dest=True) >>> moved_files = task_func(test_src_dir_dest_dir test_ext) >>> len(moved_files) > 0 Check if files moved True >>> 'test_file.txt' in [os.path.basename(path) for path moved_files] Assuming test_file.txt exists in test_src_dir True >>> os.listdir(test_dest_dir) Verify files moved no duplicates in destination ['test_file.txt']\n    \"\"\"\n    if not os.path.isdir(src_dir) or not os.path.isdir(dest_dir):\n        raise FileNotFoundError(\"Source or destination directory does not exist\")\n\n    files = glob.glob(f\"{src_dir}/*.{ext}\")\n    moved_files = []\n\n    for file in files:\n        file_name = os.path.basename(file)\n        dest_file_path = os.path.join(dest_dir, file_name)\n\n        if not os.path.exists(dest_file_path):\n            shutil.move(file, dest_dir)\n            moved_files.append(dest_file_path)\n\n    return moved_files\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load JSON string into dictionary normalize dictionary doubling numerical values create Pandas DataFrame from dictionary function processes JSON string into dictionary normalizes data doubling values constructs Pandas DataFrame from dictionary function designed handle simple flat dictionaries with values single numerical values lists or strings interpreted as numbers doubles values of numerical data types within dictionary including lists strings extracted using regex), process nested dictionaries returns DataFrame with numerical values as floats other types left as-is or empty DataFrame if input JSON string empty or valid data structures for conversion. Parameters: json_str (str): JSON string Returns DataFrame: pandas DataFrame created from dictionary. Requirements: - pandas - json - re Example >>> json_str = '{\"a\": [1, 2, 3], \"b\":, \"c\": \"5\"}' >>> df = task_func(json_str) >>> type(df) <class 'pandas.core.frame.DataFrame'> >>> print(df) a b c 0 2 9.8 10 1 4 9.8 10 2 6 9.8 10\n    \"\"\"\n    # Load JSON string into dictionary\n    try:\n        data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return pd.DataFrame()\n\n    # Normalize dictionary\n    normalized_data = {}\n    for key, value in data.items():\n        # If value is a list, double its values\n        if isinstance(value, list):\n            try:\n                normalized_data[key] = [float(i)*2 for i in value]\n            except ValueError:\n                normalized_data[key] = value\n        # If value is a string, try to double its numerical value\n        elif isinstance(value, str):\n            num = re.findall(r\"\\d+\\.?\\d*\", value)\n            if num:\n                try:\n                    normalized_data[key] = float(num[0])*2\n                except ValueError:\n                    normalized_data[key] = value\n            else:\n                normalized_data[key] = value\n        # If value is a dictionary, recursively normalize it\n        elif isinstance(value, dict):\n            sub_dict = task_func(json.dumps(value))\n            for sub_key, sub_value in sub_dict.items():\n                normalized_data[f\"{key}_{sub_key}\"] = sub_value\n        # If value is a number, double it\n        elif isinstance(value, (int, float)):\n            normalized_data[key] = value*2\n        # If value is not a number or a list, keep it as is\n        else:\n            normalized_data[key] = value\n\n    # Create Pandas DataFrame from dictionary\n    df = pd.DataFrame(normalized_data)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes bash script returns CPU memory usage function checks script path executes in subprocess uses psutil to monitor script process for CPU memory usage CPU usage cumulative measure of script process CPU demand execution not average across cores Memory usage reported as sum of RSS memory increments function aggregates metrics until script completes or timeout reached handles cases process becomes zombie or not found ensures subprocess if beyond timeout. Parameters: script_path (str): path to bash script executed Path must exist. timeout (int optional): Maximum time seconds function wait for script to complete. Defaults to 10 seconds. Returns: dict: dictionary containing 'CPU Usage': accumulated CPU usage in percentage. 'Memory Usage': accumulated memory usage in bytes. Requirements: subprocess - psutil - time - os Examples >>> resources = task_func('/path/to/script.sh') resources {'CPU Usage': 5.2, 'Memory Usage': 2048}\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script path {script_path} does not exist\")\n\n    process = subprocess.Popen(['bash', script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    start_time = time.time()\n\n    cpu_usage = 0.0\n    mem_usage = 0.0\n\n    while True:\n        if time.time() - start_time > timeout:\n            process.terminate()\n            break\n\n        try:\n            process_info = psutil.Process(process.pid)\n            cpu_usage += process_info.cpu_percent(interval=1)\n            mem_usage += process_info.memory_info().rss\n        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):\n            break\n\n        if process.poll() is not None:\n            break\n\n    return {'CPU Usage': cpu_usage, 'Memory Usage': mem_usage}\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create DataFrame rows (N 3 columns \"x\" \"y\" random values \"category\" random categories CATEGORIES list Each category appear once if N greater than or equal categories otherwise randomly sampled without replacement CATEGORIES draw scatter plot \"x\" vs \"y colored by \"category\". Parameters N (int optional): rows DataFrame Defaults to 100 CATEGORIES (list optional): categories Defaults ['A' 'B' 'C' 'D' 'E'] seed (int optional): Random seed reproducibility Defaults to 42. Returns tuple containing DataFrame generated DataFrame Axes Axes object plot. Requirements numpy - pandas matplotlib.pyplot Example df, ax = task_func() >>> df.head() x y category 0 0.239562 0.385098 C 1 0.144895 0.851137 D 2 0.489453 0.316922 C 3 0.985650 0.169493 E 4 0.242055 0.556801 A type(ax) <class 'matplotlib.axes.\n    \"\"\"\n    np.random.seed(seed)\n\n    if N >= len(CATEGORIES):\n        categories = np.random.choice(CATEGORIES, N, replace=False)\n    else:\n        categories = np.random.choice(CATEGORIES, N, replace=True)\n\n    x = np.random.rand(N)\n    y = np.random.rand(N)\n\n    df = pd.DataFrame({\"x\": x, \"y\": y, \"category\": categories})\n\n    fig, ax = plt.subplots()\n\n    for category in CATEGORIES:\n        df_category = df[df[\"category\"] == category]\n        ax.scatter(df_category[\"x\"], df_category[\"y\"], label=category)\n\n    ax.legend()\n\n    return df, ax\n\n\ndf, ax = task_func()"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate time series epoch start to end time with specified step trend time series plotted with timestamps x-axis'Time values y-axis ('Value values generated from normal distribution linear trend added based on provided trend value. Parameters: start_time (int): start epoch time milliseconds end_time end epoch time milliseconds Must greater than start_time. step (int): step milliseconds between each data point agreater than 0. trend (float): trend value added to time series acts as multiplier for index adding linear trend to randomly generated values seed (int optional): Seed for reproducibility Default is 42. Returns ax (matplotlib.pyplot.Axes): Axes object generated plot x-axis labeled 'Time' y-axis 'Value'. Requirements datetime.datetime - pandas - numpy Example ax = task_func(0, 10000, 100, 0.001) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> ax.get_xticklabels() [Text(-20.0, 0 '1970-01-01 10:00:08.000000(0.0 10:00:00.000000 Text(20.0 10:00:02.000000 Text(40.0 10:00:04.000000 Text(60.0 10:00:06.000000(80.0 '1970-01-01 10:00:08.000000 Text(100.0 0 Text(120.0, 0 ''\n    \"\"\"\n    np.random.seed(seed)\n    time_index = pd.date_range(start=datetime.fromtimestamp(start_time / 1000.0), end=datetime.fromtimestamp(end_time / 1000.0), freq=str(step) + 'ms')\n    time_index = time_index.view(int) / 1000.0\n    time_index = time_index - time_index[0]\n    values = np.random.normal(size=len(time_index)) + trend * time_index\n    df = pd.DataFrame(data=values, index=time_index, columns=['Value'])\n    ax = df.plot(x='Time', y='Value', kind='line', title='Time Series')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Value')\n    return ax\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Generate sales data five products given epoch time to current time function checks input validity each day between epoch to current time generates random sales data each 5 products Parameters epoch_milliseconds (int): Start epoch time milliseconds before current system time random_seed (int): Seed reproducibility random sales data Defaults to 0. products (list Product list contain 5 unique strings Defaults'Product1'] Returns pd.DataFrame DataFrame containing sales data columns 'Product' 'Date' 'Sales' (integer). Sales quantity randomly sampled from range [10, 50]. Requirements pandas - datetime.datetime - random Example sales_data = task_func(1236472051807, random_seed=42) type(sales_data) <class 'pandas.core.frame.DataFrame' sales_data.head() Product Date Sales 0 Product4 2009-03-08 11:27:31.807 50 1 Product5 2009-03-08 11:27:31.807 17 2 Product1 11:27:31.807 11 3 Product3 11:27:31.807 27 4 Product2 11:27:31.807 25\n    \"\"\"\n    random.seed(random_seed)\n    start_time = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n    now = datetime.now()\n    df = pd.DataFrame(\n        {\n            \"Product\": random.choices(products, k=int((now - start_time).total_seconds())),\n            \"Date\": pd.date_range(start=start_time, end=now, freq=\"S\"),\n            \"Sales\": [random.randint(10, 50) for _ in range(int((now - start_time).total_seconds()))],\n        }\n    )\n    return df\n\n\nsales_data = task_func(1236472051807, random_seed=42)"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings to Excel file handling empty JSON arrays function takes JSON string converts into Excel file with specified filename If JSON string empty array function creates Excel file with no data rows Parameters json_str (str bytes bytearray): JSON content string filename (str): name Excel file created sheet_name (str optional): name sheet in Excel file Default is \"sheet1\". Returns str: absolute path of created Excel file. ValueError: If `json_str` not valid JSON TypeError: If not string bytes bytearray. Exception: other general errors related file writing. Requirements xlwt: For writing to Excel files xlrd - os: For file path operations pandas data manipulation. Example json_str = '[{\"Name \"John\", \"Age 30, \"Jane\", \"Age 28}]' >>> True if task_func(json_str, 'data.xls').endswith('data.xls') else False True >>> os.remove('data.xls')\n    \"\"\"\n    try:\n        # Create a workbook and select sheet\n        wb = xlwt.Workbook()\n        ws = wb.add_sheet(sheet_name)\n\n        # Load JSON string into a DataFrame\n        data = pd.read_json(json_str)\n\n        # Write DataFrame to Excel file\n        for i, row in enumerate(data.values):\n            for j, val in enumerate(row):\n                ws.write(i, j, val)\n\n        # Save workbook\n        wb.save(filename)\n\n        # Return absolute path of created file\n        return os.path.abspath(filename)\n\n    except ValueError as e:\n        print(f\"ValueError: {e}\")\n    except TypeError as e:\n        print(f\"TypeError: {e}\")\n    except Exception as e:\n        print(f\"Exception: {e}\")\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates daily activity durations specified days past using randomly generated data function randomly generates acitivity durations 0 to 120 each activity\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training. Parameters days_in_past (int optional): number days past generate graph Defaults to 7 days Must past. random_seed (int optional): Seed random number generation reproducibility Defaults 0. Returns Tuple containing ax (matplotlib.pyplot.Axes): DataFrame plotting df (pd.DataFrame): Seaborn lineplot date x-axis duration y-axis activity hue. Requirements datetime.datetime - datetime.timedelta - pandas - random - seaborn Example ax, df = task_func(7, random_seed=42) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> sample row returned DataFrame Date Activity Duration YYYY-MM-DD Running 45\n    \"\"\"\n    random.seed(random_seed)\n    date_list = [(datetime.now() - timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(days_in_past)]\n    activity_list = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    duration_list = [random.randint(0, 120) for _ in range(days_in_past)]\n    df = pd.DataFrame(list(zip(date_list, activity_list, duration_list)),\n                      columns=[\"Date\", \"Activity\", \"Duration\"])\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n    return ax, df\n\n\nax, df = task_func(7, random_seed=42)"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create DataFrame stock prices specified days past using random data Parameters days_in_past (int optional): number days past stock data Must positive. Defaults to 7. stock_names (list optional): list stock names data not empty Defaults to [\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"] random_seed (int optional): seed random number generation reproducibility Defaults 0. Returns DataFrame pandas DataFrame random stock prices specified days Prices floats [0.0,1.0). Requirements datetime pandas - numpy Example df = task_func(5, random_seed=42) type(df) <class 'pandas.core.frame.DataFrame'> print(df.head(1)) AAPL GOOGL MSFT AMZN FB 2024-03-30 37.454012 95.071431 73.199394 59.865848 15.601864\n    \"\"\"\n    np.random.seed(random_seed)\n    date_range = pd.date_range(start=datetime.now(), periods=days_in_past + 1)[1:]\n    df = pd.DataFrame(np.random.rand(days_in_past, len(stock_names)), index=date_range, columns=stock_names)\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV files create difference report function compares two CSV files provides detailed report differences represents each difference with line number status indicator content line. Parameters: file_path1 path first CSV file file_path2 path second CSV file. delimiter (str optional): Delimiter character CSV files Default is ','. quotechar (str optional): Quote character CSV Default is '\"' Returns DataFrame: pandas DataFrame with differences DataFrame contains columns 'Line Number': line number file difference occurs 'Status': character indicating type difference ' ': No change (line same in both files). '-': Line present first file not second '+': Line present second file not first. 'Content': actual text content line file. Raises FileNotFoundError: If files found ValueError: If files empty. Exception: For other related errors. Requirements: pandas: For data manipulation analysis csv: reading CSV files difflib: performing difference operation. os Example: >>> create_dummy_test_files() >>> df = task_func('file1.csv', 'file2.csv') >>> os.remove('file1.csv') >>>.remove('file2.csv') >>> df.head() Line Number Status Content 0 1 ('name', 'age') 1 2 - ('Alice', '30') 2 3 + ('Alice', '31') 3 4 ('Bob', '25')\n    \"\"\"\n    try:\n        df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar, quoting=csv.QUOTE_NONNUMERIC)\n        df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar, quoting=csv.QUOTE_NONNUMERIC)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both files not found\")\n    if df1.empty or df2.empty:\n        raise ValueError(\"One or both files are empty\")\n\n    diff_lines = list(ndiff(df1.to_csv(sep=delimiter, index=False, quoting=csv.QUOTE_NONNUMERIC).splitlines(),\n                            df2.to_csv(sep=delimiter, index=False, quoting=csv.QUOTE_NONNUMERIC).splitlines()))\n\n    diff_data = []\n    for i, line in enumerate(diff_lines, start=1):\n        if line.startswith('-'):\n            status, content = '-', line[2:]\n        elif line.startswith('+'):\n            status, content = '+', line[2:]\n        else:\n            status, content = ' ', line[2:]\n        diff_data.append([i, status, content])\n\n    df_diff = pd.DataFrame(diff_data, columns=['Line Number', 'Status', 'Content'])\n    return df_diff\n\n"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze employee data calculate statistics column If data list empty sum 0 mean min max values NaN function visualizes data pie chart Age column labels. Parameters: column (str): column analyze Valid values 'Age' 'Salary' 'Experience' If invalid function KeyError. data (list lists): employee data each list represents [Age Salary Experience] Returns tuple containing: dictionary with 'sum' 'mean' 'min' 'max' column. Axes object: pie chart visualizing column data. Requirements pandas - numpy - matplotlib.pyplot Example data = [[25, 50000, 2] [30, 75000, 5] [35, 100000, 7] [40, 125000, 10] [45, 150000, 12]] stats ax = task_func('Salary', data) stats {'sum' 500000 'mean' 100000.0 'min' 50000 'max': 150000} type(ax) <class 'matplotlib.axes..Axes'>\n    \"\"\"\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError('Invalid column name')\n\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max(),\n    }\n\n    fig, ax = plt.subplots()\n\n    ax.pie(df[column], labels=df[column].index, autopct='%1.1f%%')\n    ax.axis('equal')\n\n    return stats, ax\n\n\ndata = [[25, 50000, 2], [30, 75000, 5], [35, 100000, 7], [40, 125000, 10], [45, 150000, 12]]\nstats, ax = task_func('Salary', data)"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze fitness data calculate sum mean minimum maximum column draw line chart validate numeric values for steps calories burned distance walked non-negative. Parameters: column (str): column analyze data allowed columns 'Date' 'Steps' 'Calories Burned' 'Distance Walked'. data (list list): each list contains datetime object date followed numeric values for steps calories burned distance walked order Each numeric value must non-negative not empty. Returns: tuple: tuple containing dict: dictionary with sum mean min max column. matplotlib.axes.Axes: Axes object plotted line chart line chart Date x-axis column value y-axis title Line Chart (column). Requirements: - pandas - numpy - matplotlib.pyplot Raises KeyError: column not valid ValueError: If data list empty or numeric values for steps calories burned distance walked negative. Example data = [[datetime(2022, 1, 1), 5000, 200, 3.5], [datetime(2022 1, 2), 5500, 220, 4.0],(2022 1, 3), 6000, 240, 4.5]] stats, ax = task_func('Steps', data) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> print(stats) {'sum': 16500 'mean': 5500.0 'min' 5000 'max' 6000}\n    \"\"\"\n    allowed_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in allowed_columns:\n        raise KeyError(f\"Invalid column name. Allowed columns are {allowed_columns}\")\n\n    if not data:\n        raise ValueError(\"Data list is empty\")\n\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    for col in df.columns:\n        if (df[col] < 0).any():\n            raise ValueError(f\"Numeric values for {col} must be non-negative\")\n\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max(),\n    }\n\n    ax = df.plot(x='Date', y=column, kind='line', title=f'Line Chart ({column})')\n    ax.set_xlabel('Date')\n    ax.set_ylabel(column)\n\n    return stats, ax.figure\n\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read list dictionaries from JSON file calculate mean median each key (ignoring non-numeric missing convert results into Pandas DataFrame. Parameters input_file (str optional): input JSON file name Defaults to 'data.json' file should contain list dictionaries If key missing treated as NaN Non-numeric values ignored for calculation mean median If all values key non-numeric or missing statistics key NaN. Returns df (pd.DataFrame): DataFrame indexed sorted by variable names (keys) from input data containing columns 'mean' 'median'. Requirements numpy - collections - json - pandas Example >>> df = task_func('data_1.json') a mean median b mean median c mean median\n    \"\"\"\n    with open(input_file, \"r\") as read_file:\n        data = json.load(read_file)\n\n    df_dict = defaultdict(list)\n\n    for item in data:\n        for key, value in item.items():\n            try:\n                df_dict[key].append(float(value))\n            except (ValueError, TypeError):\n                df_dict[key].append(np.nan)\n\n    df = pd.DataFrame(df_dict)\n    df = df.replace('', np.nan)\n    df = df.astype(float)\n\n    df['mean'] = df.mean(axis=1)\n    df['median'] = df.median(axis=1)\n\n    df = df.sort_index()\n\n    return df\n\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows CSV file csv library convert into pandas DataFrame plot using matplotlib Parameters file_path (str): path to CSV file Returns: dictionary with duplicate rows keys counts values Axes: matplotlib Axes object bar chart of duplicate rows Requirements csv - collections.Counter - pandas - matplotlib.pyplot Example duplicates ax = task_func(\"sample_data.csv\") duplicates {('Alice', '25 'New York'): 3 ('Bob', '30 'London'): 2} type(ax) <class 'matplotlib.axes._axes.Axes'> Ensure CSV file proper format .csv extension Other file formats raise ValueError.\n    \"\"\"\n    if not file_path.endswith('.csv'):\n        raise ValueError(\"File should be in .csv format\")\n\n    with open(file_path, 'r') as file:\n        csv_reader = csv.reader(file)\n        data = list(csv_reader)\n\n    df = pd.DataFrame(data)\n    duplicates = df.duplicated()\n    count_duplicates = Counter(duplicates)\n\n    fig, ax = plt.subplots()\n    ax.bar(count_duplicates.keys(), count_duplicates.values())\n    ax.set_xlabel('Duplicates')\n    ax.set_ylabel('Counts')\n    ax.set_title('Duplicate Rows in CSV')\n\n    return count_duplicates, ax\n\n\nduplicates, ax = task_func('sample_data.csv')"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries in DataFrame record age distribution for function takes DataFrame with 'name' 'age' columns If age as floats rounded down to nearest integer Age not negative raises ValueError function identifies names records age distribution returns Counter object with age distribution histogram plot showing distribution ages for duplicate names age x-axis count y-axis Bins calculated based on minimum maximum ages among duplicates adjusted by .5 integer ages fall within bins. Parameters: df pd.DataFrame with columns 'name' 'age' not empty If empty function raises ValueError Returns Counter: Age distribution among duplicate names. plt.Axes or None: Histogram plot displaying age distribution or None if no duplicates. Requirements - pandas - numpy - collections.Counter - seaborn - matplotlib.pyplot ValueError If DataFrame empty or age negative Example df = pd.DataFrame({'name'Alice 'Bob 'age': [25, 26, 25]}) >>> duplicates_counter ax = task_func(df) >>> duplicates_counter Counter({25: 2}) >>> type(ax) <class 'matplotlib.axes..Axes'>\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if (df['age'] < 0).any():\n        raise ValueError(\"Age cannot be negative\")\n\n    duplicates = df[df.duplicated(subset='name', keep=False)]\n    if duplicates.empty:\n        return None, None\n\n    duplicates['age'] = duplicates['age'].astype(int)\n    age_distribution = Counter(duplicates['age'])\n\n    min_age = duplicates['age'].min()\n    max_age = duplicates['age'].max()\n    bins = list(range(min_age, max_age + 2))\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    sns.histplot(duplicates['age'], bins=bins, ax=ax)\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n    ax.set_title('Age Distribution for Duplicate Names')\n\n    return age_distribution, ax\n\n"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify count duplicate values DataFrame's 'value' column function plots histogram for all values overlays normal distribution curve histogram. Parameters: df (pd.DataFrame): DataFrame numeric 'value' column If empty function empty Counter empty plot. bins (int optional): Number bins for histogram Defaults to 4. Returns tuple: tuple containing Counter Counter object with count each duplicate value Axes: matplotlib.axes.Axes object plot histogram with 'value' column data If applicable normal distribution curve data overlaid. histogram bars green 60% opacity normal distribution curve black linewidth 2. plot titled \"Distribution\", \"Value\" x-axis label \"Frequency\" y-axis label. Requirements: - collections.Counter - numpy - scipy.stats.norm - matplotlib.pyplot Example >>> df = pd.DataFrame({'value': [1, 2, 2, 3, 3, 4, 1 4 4 2 3 1]}) >>> counter ax = task_func(df) >>> ax <Axes: title={'center' 'Distribution'} xlabel='Value' ylabel='Frequency'> >>> counter Counter({2: 6, 1: 5, 3: 5, 4: 4})\n    \"\"\"\n    if df.empty:\n        return Counter(), plt.figure().gca()\n\n    counter = Counter(df['value'])\n    values = np.array(list(counter.values()))\n    mean, std = norm.fit(values)\n    hist_range = (min(values), max(values))\n\n    fig, ax = plt.subplots()\n    ax.hist(values, bins=bins, range=hist_range, color='g', alpha=0.6, label='Data')\n    xmin, xmax = hist_range\n    x = np.linspace(xmin, xmax, 100)\n    p = norm.pdf(x, mean, std)\n    ax.plot(x, p, 'k', linewidth=2, label='Normal distribution')\n    ax.set_title('Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.legend()\n\n    return counter, ax\n\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Generate pandas DataFrame with random values lists 'a' 'b' plot as bar chart List 'a' sets row indices length list 'b' determines number columns using predefined names from 'COLUMNS = ['A' 'B' 'C' 'D' 'E']' list. Parameters: a (list): list number rows. b (list): list number columns column names predefined. Returns matplotlib.axes.Axes: Axes object of plotted bar chart. Requirements: - numpy - pandas - matplotlib Data Structure Uses pandas DataFrame structure data. Example >>> ax = task_func([1, 2, 3], ['A', 'B' 'C' 'D', 'E'])\n    \"\"\"\n    # Check if lists 'a' and 'b' have the same length\n    if len(a) != len(b):\n        raise ValueError(\"Lists 'a' and 'b' must have the same length\")\n\n    # Create DataFrame\n    df = pd.DataFrame(np.random.rand(len(a), len(b)), index=a, columns=b)\n\n    # Plot DataFrame as bar chart\n    ax = df.plot(kind='bar')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    function plots bar chart monthly data values single year 'month x-axis 'value y-axis Parameters data (str): data string format 'yyyy-mm-value' Returns Axes object matplotlib.axes.Axes object plot title 'Monthly Data yyyy' x label 'Month' y label 'Value' Requirements pandas datetime matplotlib.pyplot Example data '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650' ax = task_func(data)\n    \"\"\"\n    # split the data by comma\n    data_list = data.split(',')\n\n    # create a list to store the datetime and value\n    date_list = []\n    value_list = []\n\n    # loop through the data_list and split the datetime and value\n    for i in data_list:\n        date_list.append(datetime.strptime(i.split('-')[0]+'-'+i.split('-')[1], '%Y-%m'))\n        value_list.append(int(i.split('-')[2]))\n\n    # create a pandas dataframe\n    df = pd.DataFrame({'date': date_list, 'value': value_list})\n\n    # set the date as the index\n    df.set_index('date', inplace=True)\n\n    # sort the dataframe by date\n    df.sort_index(inplace=True)\n\n    # plot the data\n    ax = df['value'].plot(kind='bar', figsize=(10, 5))\n\n    # set the title and labels\n    ax.set_title('Monthly Data ' + str(df.index[0].year))\n    ax.set_xlabel('Month')\n    ax.set_ylabel('Value')\n\n    return ax\n\n\ndata = '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650'\nax = task_func(data)\nplt.show()from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    function draws histogram visualize frequency distribution numeric values string format 'Value' x-axis 'Frequency' y-axis 'Histogram Values' title. Parameters: data (str): data string format 'value-value-value-...' Returns ax (matplotlib.axes..Axes): Axes object created histogram Requirements pandas numpy matplotlib.pyplot Notes histogram uses bins calculated `np.arange(data.min(), data.max()+2) - 0.5`. Example data = '1-2-3-4-5-6-7-8-9-10' ax = task_func(data)\n    \"\"\"\n    # convert string to list of integers\n    data_list = list(map(int, data.split('-')))\n    \n    # convert list to pandas Series\n    data_series = pd.Series(data_list)\n    \n    # calculate bins\n    bins = np.arange(data_series.min(), data_series.max()+2) - 0.5\n    \n    # create histogram\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.hist(data_series, bins=bins, edgecolor='black')\n    \n    # set labels and title\n    ax.set_xlabel('Frequency')\n    ax.set_ylabel('Histogram Values')\n    ax.set_title('Histogram of Numeric Values')\n    \n    return ax\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine wave specified length adjusts curve using curve_fit from scipy.optimize data Parameters array_length (int): Length sine wave array Defaults to 100. noise_level (float): Level noise added sine wave Defaults 0.2 Returns Axes object plot showing noisy sine wave adjusted curve Requirements numpy scipy.optimize matplotlib.pyplot Example ax = task_func(100, 0.2)\n    \"\"\"\n    # Define the true underlying relationship\n    def func(x, a, b, c):\n        return a * np.sin(b * x) + c\n\n    # Generate noisy data\n    x = np.linspace(0, 2 * np.pi, array_length)\n    y = func(x, 1, 2, 3) + np.random.normal(0, noise_level, array_length)\n\n    # Fit the data\n    popt, _ = curve_fit(func, x, y)\n\n    # Plot the data\n    plt.figure()\n    plt.plot(x, y, 'ko', label=\"Original Noisy Data\")\n    plt.plot(x, func(x, *popt), 'r-', label=\"Fitted Curve\")\n    plt.legend()\n    plt.show()\n\n    return plt\n\n\ntask_func(100, 0.2)import numpy as np\nimport matplotlib.pyplot as plt\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads CSV file normalizes text to ASCII counts words returns 10 common words frequencies as matplotlib bar plot list of tuples. Parameters: csv_file (str): path to CSV file Returns tuple tuple containing matplotlib.axes.Axes object for bar plot list 10 common words frequencies FileNotFoundError: CSV file found at specified path. IOError: error in reading file. Requirements unicodedata - csv collections - matplotlib.pyplot Example create_dummy_csv_file('dummy.csv') >>> ax, most_common_words = task_func('dummy.csv') >>> os.remove('dummy.csv') >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> type(most_common_words) <class 'list'> function assumes CSV file contains text data file properly formatted.\n    \"\"\"\n    try:\n        with open(csv_file, 'r') as file:\n            reader = csv.reader(file)\n            data = list(reader)\n    except FileNotFoundError:\n        print(\"File not found.\")\n        return\n    except IOError:\n        print(\"Error in reading file.\")\n        return\n\n    text = ' '.join(str(i) for i in data)\n    text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode()\n\n    words = text.split()\n    counter = Counter(words)\n\n    most_common_words = counter.most_common(10)\n\n    words, frequencies = zip(*most_common_words)\n\n    fig, ax = plt.subplots()\n    ax.bar(words, frequencies)\n    ax.set_title('10 most common words')\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n\n    return ax, most_common_words\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list distributed random numbers plot histogram probability density function (PDF). Parameters size number random numbers generate Default 1000. Requirements numpy scipy.stats matplotlib.pyplot Returns matplotlib.figure.Figure figure object containing histogram PDF plot Example import matplotlib >>> = task_func(size=500) >>> isinstance(fig, matplotlib.figure.Figure) Check if output matplotlib figure object True >>> len(fig.axes[0].lines) == 1 Ensure one line plot axes PDF True >>> len(fig.axes[0].patches) > 10 Check histogram bars (patches) present True\n    \"\"\"\n    # Generate random numbers\n    random_numbers = np.random.normal(size=size)\n\n    # Create histogram\n    fig, ax = plt.subplots(figsize=(10, 7))\n    ax.hist(random_numbers, bins=30, density=True)\n\n    # Create PDF\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, random_numbers.mean(), random_numbers.std())\n    ax.plot(x, p, 'k', linewidth=2)\n\n    # Set labels\n    ax.set_xlabel('Random Number')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Numbers with PDF')\n\n    return fig\n\n\nfig = task_func(size=500)\nplt.show(fig)\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates RSA public private key pair saves private key in file after encrypting with password using AES encryption Returns public key filename encrypted private key encryption details for testing output file \"private_key_<number>.txt\", <number> hex representation of 8 randomly generated bytes Returns rsa.PublicKey RSA public key. str filename encrypted private key stored. bytes encryption password for testing decryption. bytes encryption nonce testing decryption. Requirements: - os - Crypto.Cipher.AES - Crypto.Random.get_random_bytes base64.b64encode - base54.b64decode Examples pub_key filename password nonce = task_func() >>> isinstance(pub_key, rsa.PublicKey) True isinstance(filename, str) True isinstance(password, bytes) True(nonce, bytes) True\n    \"\"\"\n    key = rsa.newkeys(512)\n    pub_key = key[0]\n    priv_key = key[1]\n\n    password = get_random_bytes(16)\n    nonce = get_random_bytes(16)\n\n    cipher_aes = AES.new(password, AES.MODE_EAX)\n    data = cipher_aes.nonce + cipher_aes.encrypt(rsa.key.exportKey('PEM'))\n    encrypted_data = b64encode(data).decode('utf-8')\n\n    filename = \"private_key_{}.txt\".format(b64encode(os.urandom(8)).decode('utf-8'))\n    with open(filename, \"w\") as f:\n        f.write(encrypted_data)\n\n    return pub_key, filename, password, nonce\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates RSA public private keys encrypts file using AES encryption encrypts AES key with public RSA key encrypted file AES key saved in separate files method demonstrates hybrid encryption approach. Parameters: file_path (str): path to file encrypted. Returns: rsa.PublicKey: RSA public key. str filename of encrypted file. str filename file containing encrypted AES key. Requirements: - rsa - os - cryptography.hazmat.backends.default_backend.hazmat.primitives.ciphers.Cipher.algorithms.modes base64.b64encode Examples: >>> pub_key, encrypted_file_key_file = task_func('my_file.txt') >>> isinstance(pub_key, rsa.PublicKey) True >>> encrypted_file.endswith('.encrypted') True_key_file.endswith('.encrypted') True\n    \"\"\"\n    # Generate RSA keys\n    (pub_key, priv_key) = rsa.newkeys(512)\n\n    # Read file\n    with open(file_path, 'rb') as f:\n        file_data = f.read()\n\n    # Generate AES key\n    aes_key = os.urandom(32)\n\n    # Encrypt file with AES\n    cipher = Cipher(algorithms.AES(aes_key), modes.ECB())\n    encryptor = cipher.encryptor()\n    padded_data = encryptor.update(file_data) + encryptor.finalize()\n\n    # Encrypt AES key with RSA\n    encrypted_aes_key = rsa.encrypt(aes_key, pub_key)\n\n    # Save encrypted file and encrypted AES key\n    encrypted_file_name = file_path + '.encrypted'\n    encrypted_aes_key_file_name = file_path + '.key.encrypted'\n\n    with open(encrypted_file_name, 'wb') as f:\n        f.write(padded_data)\n\n    with open(encrypted_aes_key_file_name, 'wb') as f:\n        f.write(b64encode(encrypted_aes_key))\n\n    return pub_key, encrypted_file_name, encrypted_aes_key_file_name\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Extracts text href attributes anchor tags from URL's HTML content returns data in pandas DataFrame time extraction. Parameters: url (str): URL to fetch HTML content Returns pandas.DataFrame: with columns 'text' 'href' 'fetch_time' Each row corresponds to anchor tag HTML 'text' 'href' containing text hyperlink reference anchor tag 'fetch_time' contains timestamp data fetched format 'YYYY-MM-DD HH:MM:SS'. Raises ValueError: If URL invalid or empty. URLError: issue with network connectivity or server. Requirements: - urllib.request - pyquery - datime - pandas - urllib.error Example >>> df = task_func('https://en.wikibooks.org/wiki/Main_Page') function requires internet connectivity to fetch HTML content.\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n    except urllib.error.URLError as e:\n        print(f\"URL Error: {e.reason}\")\n        return\n    except ValueError as e:\n        print(f\"Value Error: {e.args[0]}\")\n        return\n\n    html = response.read()\n    doc = pq(html)\n\n    data = []\n    for link in doc('a'):\n        text = pq(link).text()\n        href = pq(link).attr('href')\n        data.append({'text': text, 'href': href, 'fetch_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')})\n\n    df = pd.DataFrame(data)\n    return df\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data specified hours save in CSV file with coloumns 'Time' 'Temperature' 'Humidity' 'Pressure' Parameters: hours (int): number hours sensor data generated output_dir (str optional): output file path Returns: hours (int): Number hours generate data Requirements: datetime - os - random - csv Example file_path = task_func(1) Generate data 1 hour >>> os.path.exists(file_path) Check if file created True >>> isinstance(file_path, str) Validate return type string True >>> 'sensor_data.csv' in file_path Ensure filename correct True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + SENSORS)\n\n        start_time = datetime.now()\n        while (datetime.now() - start_time).seconds < hours * 3600:\n            row = [datetime.now().strftime('%Y-%m-%d %H:%M:%S')] + [randint(0, 100) for _ in SENSORS]\n            writer.writerow(row)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data vehicle types over specified hours saves data to CSV file coloumns 'Time' 'Car' 'Bus' 'Truck 'Bike' plots data line chart 'Time' x-axis 'Vehicle Count' y-axis. Parameters hours (int): Number hours data output_dir (str optional): output file path Returns tuple Path to CSV file matplotlib axes object line plot. Requirements pandas - os - csv matplotlib.pyplot random datetime import matplotlib >>> file_path, ax = task_func(2) Generate data 2 hours >>> isinstance(file_path, str) True 'traffic_data.csv' file_path True isinstance(ax, matplotlib.axes.Axes) True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, 'traffic_data.csv')\n\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time'] + VEHICLE_TYPES)\n\n        start_time = datetime.now()\n        for _ in range(hours * 60 * 60):\n            current_time = (start_time + pd.DateOffset(seconds=_)).strftime(\"%Y-%m-%d %H:%M:%S\")\n            vehicle_counts = [randint(0, 100) for _ in VEHICLE_TYPES]\n            writer.writerow([current_time] + vehicle_counts)\n\n    df = pd.read_csv(file_path)\n    df.set_index('Time', inplace=True)\n\n    ax = df.plot(kind='line', figsize=(15, 10))\n\n    plt.title('Traffic Data Over Time')\n    plt.xlabel('Time')\n    plt.ylabel('Vehicle Count')\n\n    return file_path, ax.figure.axes[0]\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data specified hours save CSV file colomns 'Time' 'Condition' back up file backup directory. Parameters: hours (int): number hours weather data generated output_dir (str optional): output file path Returns str: path generated CSV file. Requirements: datetime - os - random - csv - shutil Example: >>> 'weather_data.csv' in task_func(24) True >>> 'weather_data.csv' task_func(10) True\n    \"\"\"\n    # Create output directory if not exists\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate weather data\n    weather_data = []\n    for i in range(hours):\n        time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        condition = WEATHER_CONDITIONS[randint(0, len(WEATHER_CONDITIONS) - 1)]\n        weather_data.append([time, condition])\n\n    # Save to CSV file\n    csv_file_path = os.path.join(output_dir, f'weather_data_{hours}.csv')\n    with open(csv_file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Condition'])\n        writer.writerows(weather_data)\n\n    # Backup file\n    backup_dir = os.path.join(output_dir, 'backup')\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n    backup_file_path = os.path.join(backup_dir, f'weather_data_{hours}.csv')\n    shutil.copyfile(csv_file_path, backup_file_path)\n\n    return csv_file_path\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Generate visualize Pandas DataFrame results football matches multiple teams 'Team' random goals penalties 'Penalty Cost' Penalties converted into fines according penalty costs. Parameters: goals maximum goals team score penalties (int): maximum number penalties team receive. Returns pd.DataFrame dataframe containing match results. list list two seaborn plot objects (Axes) goals penalty costs Requirements - pandas - seaborn - matplotlib.pyplot - random Example >>> df, plots = task_func(5, 3)\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(columns=['Team', 'Goals', 'Penalties', 'Fines'])\n\n    for team in TEAMS:\n        # Randomly generate goals and penalties\n        goals_scored = randint(0, goals)\n        penalties_received = randint(0, penalties)\n\n        # Calculate fines\n        fines = penalties_received * PENALTY_COST\n\n        # Append to DataFrame\n        df = df.append({'Team': team, 'Goals': goals_scored, 'Penalties': penalties_received, 'Fines': fines}, ignore_index=True)\n\n    # Create plots\n    fig, axes = plt.subplots(2)\n\n    # Goals plot\n    sns.barplot(x='Team', y='Goals', data=df, ax=axes[0])\n    axes[0].set_title('Goals per Team')\n\n    # Penalties plot\n    sns.barplot(x='Team', y='Penalties', data=df, ax=axes[1])\n    axes[1].set_title('Penalties per Team')\n\n    return df, fig, axes\n\ndf, fig, axes = task_func(5, 3)\nplt.show()\n"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create Pandas DataFrame random integer values 0 9 given number rows Count non-zero values each column visualize information using bar plot. Parameters: rows (int): number of rows DataFrame Returns tuple tuple containing elements DataFrame generated DataFrame random integer values Axes: matplotlib Axes object bar plot. Requirements - numpy - pandas - matplotlib.pyplot Example >>> df, ax = task_func(10) >>> print(ax.title.get_text()) return 'Non-Zero Value Counts'\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, len(COLUMNS))), columns=COLUMNS)\n\n    # Count non-zero values\n    non_zero_counts = df.ne(0).sum()\n\n    # Create bar plot\n    fig, ax = plt.subplots()\n    non_zero_counts.plot(kind='bar', ax=ax)\n\n    # Set title\n    ax.set_title('Non-Zero Value Counts')\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Generate Pandas DataFrame displays grades randomly selected group students multiple courses Calculate average grade each course number students passing grade (>= visualize information using bar plot title 'Course-wise Average Passing Grade Counts' Parameters: num_students number students sample Returns Tuple[pd.DataFrame, plt.Axes]: tuple containing generated DataFrame bar plot's Axes object. Requirements pandas - numpy matplotlib.pyplot random typing Example >>> df, ax = task_func(50) >>> ax.get_title() 'Course-wise Average Passing Grade Counts'\n    \"\"\"\n    np.random.seed(0)\n    courses = ['Math', 'English', 'Physics', 'Chemistry', 'Biology']\n    grades = np.random.randint(1, 101, (num_students, len(courses)))\n    df = pd.DataFrame(grades, columns=courses)\n    df['Student'] = range(1, num_students + 1)\n    df = df.set_index('Student')\n    df['Passed'] = df >= 50\n    course_pass_counts = df.groupby(df.columns, axis=1).sum()\n    course_avg_grades = df.mean(axis=0)\n    passing_grades_counts = course_pass_counts.mean(axis=0)\n    fig, ax = plt.subplots()\n    ax.bar(courses, passing_grades_counts)\n    ax.set_title('Course-wise Average Passing Grade Counts')\n    ax.set_ylabel('Average Passing Grade Counts')\n    return df, ax\n\n\ndf, ax = task_func(50)"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit exponential decay function indices array first column matches target value Parameters array (np.ndarray): numpy array first column searched for target value target_value (float or int): value first column filter data for fitting Returns tuple optimized parameters fitting function (popt) matplotlib Axes object Requirements numpy scipy.optimize matplotlib.pyplot import numpy as np array = np.array([[1, 2], [1, 3] [1, 4] [2, 5] [2, 6]]) target = 1 params ax = task_func(array, target) >>> len(params) 3\n    \"\"\"\n    # Filter data for fitting\n    data = array[array[:, 0] == target_value]\n\n    # Define exponential decay function\n    def exp_decay(t, a, b, c):\n        return a * np.exp(-b * t) + c\n\n    # Perform curve fitting\n    popt, _ = optimize.curve_fit(exp_decay, data[:, 0], data[:, 1])\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(data[:, 0], data[:, 1], label='Data')\n    ax.plot(data[:, 0], exp_decay(data[:, 0], *popt), 'r-', label='Fit: a=%5.3f, b=%5.3f, c=%5.3f' % tuple(popt))\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n    plt.show()\n\n    return popt, ax\n\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from text documents using Non-Negative Matrix Factorization (NMF). function preprocesses input texts removing non-alphanumeric characters to lowercase stopwords vectorizes processed texts using TF-IDF applies NMF to extract specified number topics Each topic represented as list of significant words based on NMF component weights. Parameters: texts (list str): input text documents from extract topics num_topics (int): number of topics to extract. Returns list of list str: list each element is list of words representing topic. Requirements: - re - nltk - sklearn.decomposition - sklearn.feature_extraction.text Example texts = \"Data science study of data \"Machine learning learn from data \"Python is programming language in data science.\" topics = task_func(texts, 2) >>> print(topics) [['data' 'science''systems' 'provides']] exact output may vary on TF-IDF vectorization and NMF initialization.\n    \"\"\"\n    # Preprocessing\n    texts = [ALPHANUMERIC.sub(' ', text.lower()) for text in texts]\n\n    # Vectorization\n    vectorizer = TfidfVectorizer(stop_words=STOPWORDS)\n    tfidf = vectorizer.fit_transform(texts)\n\n    # NMF\n    nmf = NMF(n_components=num_topics, random_state=1).fit(tfidf)\n\n    # Extract significant words\n    feature_names = vectorizer.get_feature_names_out()\n    topics = []\n    for topic_idx, topic in enumerate(nmf.components_):\n        topics.append([feature_names[i] for i in topic.argsort()[:-num_topics - 1:-1]])\n\n    return topics\n\n"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from texts using gensim Word2Vec model nltk.corpus.stopwords texts cleaned removing non-alphanumeric characters except space lowercased stop words Parameters texts strings stopwords (list optional): stopwords removed If not provided nltk's stopwords used Returns Word2Vec trained Word2Vec model Requirements - re - nltk - gensim Example texts = [\"Hello, World!\" \"Machine Learning great\", \"Python favorite programming language\"] model = task_func(texts) vector = model.wv['python']\n    \"\"\"\n    # Clean texts\n    cleaned_texts = []\n    for text in texts:\n        words = nltk.word_tokenize(text)\n        words = [ALPHANUMERIC.sub('', w.lower()) for w in words]\n        words = [w for w in words if w not in (stopwords if stopwords else nltk.corpus.stopwords.words('english'))]\n        cleaned_texts.append(words)\n\n    # Train Word2Vec model\n    model = Word2Vec(cleaned_texts)\n\n    return model\n\n\ntexts = [\"Hello, World!\" \"Machine Learning great\", \"Python favorite programming language\"]\nmodel = task_func(texts)\nvector = model.wv['python']"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes JSON files directory function reads each JSON file into DataFrame inserts \"Source\" column filename processed files moved to \"processed\" subdirectory path may not exist initially Parameters path (str): path directory JSON files Returns df (pandas.DataFrame): DataFrame containing data processed files Requirements pandas - json - os - shutil Example os.mkdir('data') open('data/a.json' 'w) f f.write('[{\"a\": 1, \"b\": 2} 3 4}]') ... 36 open('data/b.json' 'w') f f.write('[{\"a\": 5, \"b\": 6}: 7\": 8}]') 36 df = task_func('data') print(df) source 0 5 6 b.json 1 7 8 b.json 0 1 2 a.json 1 3 4 a.json shutil.rmtree('data')\n    \"\"\"\n    if not os.path.exists(path):\n        raise ValueError(\"Path does not exist\")\n\n    processed_path = os.path.join(path, \"processed\")\n    if not os.path.exists(processed_path):\n        os.mkdir(processed_path)\n\n    json_files = [f for f in os.listdir(path) if f.endswith('.json')]\n\n    dfs = []\n    for file in json_files:\n        with open(os.path.join(path, file), 'r') as f:\n            data = json.load(f)\n            df = pd.DataFrame(data)\n            df['Source'] = file\n            dfs.append(df)\n\n        shutil.move(os.path.join(path, file), os.path.join(processed_path, file))\n\n    return pd.concat(dfs, ignore_index=True)\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create delete CSV file \"task_func_data/Output.txt with sensor data for temperature humidity data generated randomly written in append mode file deleted after use Returns Returns path to CSV file_func_data/Output.txt before deletion Requirements os - csv random datatime Example task_func()\n    \"\"\"\n    # Create directory if not exists\n    if not os.path.exists('task_func_data'):\n        os.makedirs('task_func_data')\n\n    # Create CSV file\n    file_path = 'task_func_data/Output.txt'\n    with open(file_path, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Date\", \"Temperature\", \"Humidity\"])\n\n        # Generate random data and write to CSV file\n        for i in range(10):\n            date = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            temperature = random.uniform(0, 100)\n            humidity = random.uniform(0, 100)\n            writer.writerow([date, temperature, humidity])\n\n    print(f\"CSV file created at: {file_path}\")\n\n    # Delete CSV file after use\n    os.remove(file_path)\n\n    print(f\"CSV file deleted at: {file_path}\")\n\n    return file_path\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data from URL save to CSV file. Parameters: url (str): URL scrape Returns CSV_FILE_PATH (str): path of CSV file where scraped data saved. Requirements: urllib - bs4 - csv - os Example task_func('http://www.example.com/') 'scraped_data.csv'\n    \"\"\"\n    # Open URL\n    with urllib.request.urlopen(url) as response:\n        html = response.read()\n\n    # Parse HTML\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Find data\n    data = soup.find_all('div')\n\n    # Save data to CSV\n    with open(CSV_FILE_PATH, 'w', newline='') as csv_file:\n        writer = csv.writer(csv_file)\n        for div in data:\n            writer.writerow([div.text])\n\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train linear regression model return model score test set DataFrame as training data target_column as target training model Before training data split into training test set using test_size random_state parameters Parameters: data (DataFrame): input data for training target_column column to predict random_state (int): seed for train-test split Defaults to 0 test_size (float): fractional size of test set Defaults to 0.2 Returns model's score. ValueError If data not DataFrame If data empty target_column not data data contains values not numeric random_state not integer test_size not between 0 and 1. Requirements: - pandas - sklearn.model_selection.train_test_split - sklearn.linear_model.LinearRegression - numpy Example rng = np.random.default_rng(seed=42) data = pd.DataFrame( 'x1': rng.random(100), 'x2'.random(100), 'y': rng.random(100) result = task_func(data 'y' random_state=2 test_size=0.3) result -0.25486317198996633 data = pd.DataFrame( 'x1': rng.random(500), }) data['y'] = data['x1'] * 2 + 1 result = task_func(data random_state=9 test_size=0.1) result 1.0\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data should be a DataFrame\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"Target column should be a string\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"Random state should be an integer\")\n    if not (0 <= test_size <= 1):\n        raise ValueError(\"Test size should be between 0 and 1\")\n    if data.empty:\n        raise ValueError(\"Data should not be empty\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Data should contain only numeric values\")\n\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return model.score(X_test, y_test)\n\nrng = np.random.default_rng(seed=42)\ndata = pd.DataFrame({\n    'x1': rng.random(100),\n    'x2': rng.random(100),\n    'y': rng.random(100)\n})\nresult = task_func(data, 'y', random_state=2, test_size=0.3)"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates random DataFrame with 100 records Each record consists ID 1 to 100), Name (randomly selected from lists Latin other names), Date of Birth (randomly generated Email (constructed using name year of birth email domain). Improperly encoded Latin characters in names corrected during process. Parameters: start_year starting year for birth years Defaults to 1980. end_year ending year for Defaults to 2000. email_domain (str): domain for email addresses Defaults to 'example.com'. latin_names (list Latin names in generation Defaults to'Sopet\u00f3n 'M\u00e9ndez 'G\u00f3mez 'P\u00e9rez 'Mu\u00f1oz'] other_names (list other names generation Defaults to'Smith 'Johnson 'Williams 'Brown 'Jones'] rng_seed (int): seed for rng. Returns DataFrame: pandas DataFrame containing generated user data has columns: 'ID' 'Name' 'Date of Birth' 'Email'. Requirements: pandas - numpy - codecs - re - datetime Examples >>> df = task_func(rng_seed=1) >>> print(df) ID Name Date of Birth Email 0 1 Brown 1992-09-10 brown1992@example.com 2 Smith 1996-02-13 smith1996@example.com Jones 1986-10-19 jones1986@example G\u00f3mez 2000-12-11 g\u00f3mez2000@example.com 4 5 G\u00f3mez 1984-08-24 g\u00f3mez1984@example.96 Johnson 1990-09-17@example Brown 1992-10-14 brown1992@example.com Mu\u00f1oz 1998-05-04@example Mu\u00f1oz 1982-01-01 mu\u00f1oz1982@example.com Jones 1990-03-28 jones1990@example.com <BLANKLINE rows 4 columns df task_func(start_year=0 end_year=1200 email.at rng_seed=3 print(df) ID Name Date Birth Email Sopet\u00f3n 0952-09-01 00:00:00 sopet\u00f3n952@test.at Brown 0875-10-10 00:00:00 brown875@test.at Sopet\u00f3n 0605-08-15@test.at G\u00f3mez 0337-11-23 00:00:00 g\u00f3mez337@test.at G\u00f3mez 0641-04-27 g\u00f3mez641@test.at 96 Brown 0044-05-17 00:00:00 brown44@test.at 97 Williams 0530-01-21 williams530@test.at 98 Johnson 1005-12-15 00:00:00 johnson1005@test.at 99 M\u00e9ndez 1134-07-19 00:00:00 m\u00e9ndez1134@test.at 100 Johnson 0696-08-22 00:00:00 johnson696@test.at <BLANKLINE 4 columns\n    \"\"\"\n    if rng_seed is not None:\n        np.random.seed(rng_seed)\n\n    # Generate random data\n    ids = np.arange(1, 101)\n    names = np.random.choice(latin_names + other_names, size=100)\n    birth_dates = pd.date_range(start=str(start_year)+'-01-01', end=str(end_year)+'-12-31')\n    birth_dates = birth_dates.to_pydatetime()\n    birth_dates = np.random.choice(birth_dates, size=100)\n    birth_dates = pd.Series(birth_dates).dt.normalize()\n    birth_dates = birth_dates.astype(str)\n    birth_dates = birth_dates.str.split(' ').str[0]\n    birth_dates = pd.to_datetime(birth_dates)\n    birth_dates = birth_dates.dt.strftime('%Y-%m-%d')\n\n    emails = [f\"{name}{year}@{email_domain}\" for name, year in zip(names, birth_dates.dt.year)]\n\n    # Correct improperly encoded Latin characters\n    emails = [re.sub(r'[^\\x00-\\x7F]+','', email) for email in emails]\n\n    # Create DataFrame\n    df = pd.DataFrame({'ID': ids, 'Name': names, 'Date of Birth': birth_dates, 'Email': emails})\n\n    return df\n"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read list dictionaries from JSON file calculate mean median each key write results to CSV file. Parameters input_file (str): input JSON file name output_file (str): output CSV file name Returns dict: dictionary where each key is field from input JSON each value another dictionary mean median field. Requirements numpy - collections - json - csv Example task_func('data.json' 'stats.csv')\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    stats = defaultdict(dict)\n\n    for d in data:\n        for key, value in d.items():\n            if isinstance(value, list) and len(value) > 0:\n                stats[key]['mean'] = np.mean(value)\n                stats[key]['median'] = np.median(value)\n\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for key, value in stats.items():\n            writer.writerow([key, value['mean'], value['median']])\n\n    return stats\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from dictionary checking if file exists content copies to target directory. Parameters kwargs (dict): dictionary keys full file paths values file content target_dir (str optional): directory files copied to Defaults to 'non_none_files' Returns copied_files (list): list of full file paths copied. Requirements - os - pathlib.Path - shutil Example files = {'/path/to/file1.txt': 'Hello'/file2.txt' None/file3.txt' 'World'} >>> task_func(files) >>> files = {/to/file4.txt' 'Another'/file5.txt' 'Example'} task_func(files, target_dir=\"another_directory\")\n    \"\"\"\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content is not None:\n            Path(target_dir).mkdir(parents=True, exist_ok=True)\n            with open(file_path, 'w') as f:\n                f.write(content)\n            shutil.copy2(file_path, target_dir)\n            copied_files.append(os.path.join(target_dir, os.path.basename(file_path)))\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes CSV files directory specified pattern creates new files altered names preserving content laid solid foundation initial tests. Parameters: directory (str): path to directory containing CSV files processed pattern (str optional): regular expression pattern filenames match. Returns: new_files (list): list of strings each string is filename of new CSV file created function. Requirements: - re - os - pathlib - csv Example >>> task_func(\"/mnt/data/test_data\") ['Shan.csv', 'Shannon.csv']\n    \"\"\"\n\n    # Initialize list to store new file names\n    new_files = []\n\n    # Iterate over files in directory\n    for filename in os.listdir(directory):\n\n        # Check if file matches pattern\n        if re.match(pattern, filename):\n\n            # Open file\n            with open(os.path.join(directory, filename), 'r') as file:\n\n                # Read CSV file\n                csv_reader = csv.reader(file)\n\n                # Get header from CSV file\n                header = next(csv_reader)\n\n                # Create new filename\n                new_filename = re.sub(r'-\\d+\\.csv$', '.csv', filename)\n\n                # Append new filename to list\n                new_files.append(new_filename)\n\n                # Create new CSV file\n                with open(os.path.join(directory, new_filename), 'w', newline='') as new_file:\n\n                    # Create CSV writer\n                    csv_writer = csv.writer(new_file)\n\n                    # Write header to new CSV file\n                    csv_writer.writerow(header)\n\n                    # Write rows to new CSV file\n                    for row in csv_reader:\n                        csv_writer.writerow(row)\n\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip zip files directory matches pattern splitting filename last time \"-\" occurs using prefix part filename as directory extract. Parameters: directory (str): directory zip files located pattern (str): Regex pattern match zip files. Returns list: list directories files extracted. Requirements: - os - re - zipfile Example >>> task_func('/tmp/my_data') ('/tmp/backup/backup_20230827010101', [])\n    \"\"\"\n    regex = re.compile(pattern)\n    extracted_dirs = []\n    for filename in os.listdir(directory):\n        match = regex.match(filename)\n        if match:\n            prefix = match.group(1)\n            extract_dir = os.path.join(directory, prefix)\n            if not os.path.exists(extract_dir):\n                os.makedirs(extract_dir)\n            with zipfile.ZipFile(os.path.join(directory, filename), 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            extracted_dirs.append(extract_dir)\n    return extracted_dirs\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive files match pattern delete original files. Parameters: pattern (str): pattern match files. Returns archive_file (str): archive file path. Requirements: - subprocess - os - glob Example >>> task_func('*.txt') function archive file path.\n    \"\"\"\n    # Get list of files\n    files = glob.glob(pattern)\n\n    # Create archive directory if not exists\n    if not os.path.exists(ARCHIVE_DIR):\n        os.makedirs(ARCHIVE_DIR)\n\n    # Archive files\n    for file in files:\n        archive_file = os.path.join(ARCHIVE_DIR, os.path.basename(file))\n        subprocess.run(['cp', file, archive_file])\n\n        # Delete original file\n        subprocess.run(['rm', file])\n\n        print(f'Archived {file} to {archive_file} and deleted original file.')\n\n    return archive_file\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count total goals penalties from CSV file update with given goals Parameters goals (dict): dictionary keys team names values numbers goals scored penalties (dict): dictionary keys team names values numbers penalties incurred Returns count (Counter.collections): Counter object with total counts goals penalties Requirements csv - os - collections.Counter Example goals = {'Team A': 3 B': 2 C': 1 D': 0 E': 2} penalties = {'Team A': 1 B': 0 C': 2 D': 3 E': 1} counts = task_func(goals, penalties) >>> print(counts) Counter({'goals': 8, 'penalties': 7})\n    \"\"\"\n    # Initialize counters\n    goals_counter = Counter()\n    penalties_counter = Counter()\n\n    # Check if file exists\n    if not os.path.isfile(csv_file_path):\n        return None\n\n    # Read CSV file\n    with open(csv_file_path, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header\n        for row in reader:\n            team = row[0]\n            team_goals = int(row[1])\n            team_penalties = int(row[2])\n\n            # Update counters\n            goals_counter[team] += team_goals\n            penalties_counter[team] += team_penalties\n\n    # Update with given goals and penalties\n    goals_counter.update(goals)\n    penalties_counter.update(penalties)\n\n    # Combine counters\n    total_counts = goals_counter + penalties_counter\n\n    return total_counts\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from source directory to target directory based specified pattern function iterates through all files source directory if file name matches pattern moved to target directory. Parameters: source_dir (str): path source directory. target_dir (str): path file_pattern (str optional): regular expression pattern filenames must match to be moved Default is r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b' matches filenames alphanumeric characters extensions txt, doc docx. Returns moved_files_count (int): number of files successfully moved from source to target directory. Requirements: - re - os - shutil Example: >>> task_func('/path/to/source', '/path/to/target') 3 example move 3 files from/to/source' to/to/target' if filenames match default pattern.\n    \"\"\"\n    if not os.path.exists(source_dir):\n        raise ValueError(\"Source directory does not exist\")\n    if not os.path.exists(target_dir):\n        raise ValueError(\"Target directory does not exist\")\n\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), target_dir)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calculate similarity values between texts cosine similarity Levenshtein ratio texts cleaned non-alphanumeric characters except spaces converted to lowercase Cosine similarity computed term frequency text Levenshtein ratio computed using 'ratio' function from 'python-Levenshtein' library measures similarity of two strings between 0 and 1. Parameters: text1 (str): first string compare text2 (str): second string compare Returns tuple tuple containing cosine similarity Levenshtein ratio as floats. cosine similarity (float): ranges 0 to 1 1 means identical term frequency 0 indicates no common terms. levenshtein_ratio (float): Levenshtein ratio ranges 0 to 1 1 means strings identical 0 means different. Requirements: re - numpy - collections - Levenshtein Example: task_func(\"Hello, World!\", \"Hello World\") (0.9999999999999998, 0.9565217391304348)\n    \"\"\"\n    # Clean and convert to lowercase\n    text1_clean = ALPHANUMERIC.sub(' ', text1).lower()\n    text2_clean = ALPHANUMERIC.sub(' ', text2).lower()\n\n    # Tokenize and count term frequency\n    counter1 = Counter(text1_clean.split())\n    counter2 = Counter(text2_clean.split())\n\n    # Convert to vectors\n    vector1 = np.array(list(counter1.values()))\n    vector2 = np.array(list(counter2.values()))\n\n    # Cosine similarity\n    cosine_similarity = np.dot(vector1, vector2) / (np.linalg.norm(vector1) * np.linalg.norm(vector2))\n\n    # Levenshtein ratio\n    levenshtein_ratio = ratio(text1_clean, text2_clean)\n\n    return cosine_similarity, levenshtein_ratio\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate permutations list numbers calculate sum factorials each empty list function returns empty lists. Parameters: numbers (list int): list integers permute calculate factorial sums Returns list int list containing sums factorials each number list int list all permutations numbers TypeError: numbers not list integers ValueError: If input numbers negative. Requirements functools.reduce itertools.permutations math.factorial Example >>> fac, perm = task_func([1, 2, 3]) print(fac) [9, 9, 9, 9] >>> print(perm) [(1, 2, 3) (1, 3, 2), (2, 1, 3) (2, 3, 1) (3, 1, 2) (3, 2, 1)] fac perm = task_func([0, 4]) print(fac) [25, 25] >>> print(perm) [(0, 4), (4, 0)]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers not list integers\")\n    if any(not isinstance(i, int) for i in numbers):\n        raise ValueError(\"numbers negative\")\n    fac = []\n    perm = []\n    for i in numbers:\n        if i < 0:\n            raise ValueError(\"numbers negative\")\n        fac.append(math.factorial(i))\n        perm.append(permutations(numbers, i))\n    perm = [list(i) for i in perm]\n    return fac, perm\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (SOURCE_DIR to another (DEST_DIR) based on specified file extensions issues warnings for files transferred due issues. Parameters: SOURCE_DIR (str): source directory path files transferred DEST_DIR (str): destination directory path EXTENSIONS (list): list file extensions consider for transferring Example ['.txt', '.csv' '.xlsx'] Returns transferred_files (list): list names of files successfully transferred. Requirements: warnings - os - glob - shutil - time Example task_func('/path/to/source'/destination' ['.txt' '.csv']) ['file1.txt', 'file2.csv'] >>> task_func('/path/to/source'/destination' ['.jpg']) [\n    \"\"\"\n    if not os.path.isdir(SOURCE_DIR):\n        warnings.warn(f\"Source directory {SOURCE_DIR} does not exist.\")\n        return []\n    if not os.path.isdir(DEST_DIR):\n        warnings.warn(f\"Destination directory {DEST_DIR} does not exist.\")\n        return []\n    if not EXTENSIONS or not all(ext.startswith('.') for ext in EXTENSIONS):\n        warnings.warn(\"Invalid extensions provided. Please provide a list of file extensions starting with '.'.\")\n        return []\n\n    transferred_files = []\n    for ext in EXTENSIONS:\n        source_files = glob.glob(os.path.join(SOURCE_DIR, f'*{ext}'))\n        for file in source_files:\n            try:\n                shutil.move(file, DEST_DIR)\n                transferred_files.append(os.path.basename(file))\n            except Exception as e:\n                warnings.warn(f\"Failed to transfer file {file}. Reason: {str(e)}\")\n    return transferred_files\n\n\nSOURCE_DIR = '/path/to/source'\nDEST_DIR = '/path/to/destination'\nEXTENSIONS = ['.txt', '.csv']\n\nstart_time = time.time()\ntransferred_files = task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS)"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    function takes list tuples elements counts weights normalizes counts z-score normalization weights min-max scaling returns pandas DataFrame items counts weights Parameters data (list tuples): each tuple contains element count weight Example [('A', 100, 0.5), ('B', 200,) Returns DataFrame pandas DataFrame three columns 'Item Count Weight' Each corresponds entry input data. Requirements pandas numpy scipy.stats.zscore sklearn.preprocessing.MinMaxScaler Example data = [('A', 100, 0.5), ('B', 200, 0.6), ('C', 150, 0.7) report = task_func(data) print(report) Item Normalized Count Weight 0 A -1.224745 0.0 1 B 1.224745 0.5 2 C 0.000000 1.0 data('Andrew' 5743, 0.925)'Elizabeth 4655, 1.0875)'Susan' 4716, 0.65)'Christopher 2100, 0.05)'Timothy' 3943, 0.175) report task_func(data) print(report) Item Normalized Count Weight 0 Andrew 1.248851 0.843373 Elizabeth 0.349969 1.000000 2 Susan 0.400366 0.578313 Christopher -1.760916 0.000000 4 Timothy -0.238270 0.120482\n    \"\"\"\n    # Convert list of tuples to DataFrame\n    df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n\n    # Normalize Counts using z-score\n    df['Normalized Count'] = zscore(df['Count'])\n\n    # Min-Max Scale Weights\n    scaler = MinMaxScaler()\n    df['Normalized Weight'] = scaler.fit_transform(df[['Weight']])\n\n    return df[['Item', 'Normalized Count', 'Normalized Weight']]\n\n\ndata = [('Andrew', 5743, 0.925),\n        ('Elizabeth', 4655, 1.0875),\n        ('Susan', 4716, 0.65),\n        ('Christopher', 2100, 0.05),\n        ('Timothy', 3943, 0.175)]\n\nreport = task_func(data)"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calculate mean numerical values each position tuples list Non-numeric values ignored means computed available data missing data ignored DataFrame columns 'Mean Value' contains mean values all tuple positions index 'Position i' i current position empty list passed empty DataFrame returned. Parameters data_list (list tuples): list containing mixed data types (string int float Defaults [('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4) ('e', 5, 6.5)] Returns DataFrame pandas DataFrame mean values numerical data each position Requirements pandas - numpy itertools Example df = task_func() print(df) Mean Value Position 0 NaN Position 1 3.0 Position 2 4.3 data [('a' '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3),['d' 4, 5.4) ('e', 5, 6.5)] df task_func() print(df) Mean Value Position 0 NaN Position 1 3.0 Position 2 4.3\n    \"\"\"\n    # Convert list of tuples to list of lists\n    data = [list(itertools.chain.from_iterable(i)) for i in data_list]\n\n    # Convert list of lists to DataFrame\n    df = pd.DataFrame(data)\n\n    # Convert DataFrame to numeric, ignore non-numeric values\n    df = df.apply(pd.to_numeric, errors='coerce')\n\n    # Calculate mean values for each position\n    df['Mean Value'] = df.mean(axis=1)\n\n    # Replace NaN values with 'Position i'\n    df.fillna('Position ' + df.index.astype(str), inplace=True)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform chi-square test independence variables in contingency table function takes DataFrame categorical data two column names constructs contingency table from columns performs chi-square test independence returns p-value test probability observing data if null hypothesis (independence variables true. Parameters: data (pd.DataFrame): DataFrame categorical variables col1 first categorical column col2 second column Returns float p-value chi-square test independence. ValueError: If 'data' empty 'col1' or 'col2' not in 'data columns multiple categories categories less than 5 observations (violating chi-square test assumptions). TypeError: If columns contain non-categorical data. Requirements: numpy pandas scipy.stats.chi2_contingency Examples data = pd.DataFrame({ 'Var1': ['A'] * 40 + ['B'] * 60, 'Var2': ['X'] * 25 + ['Y'] * 25 +'X] * 25 +'Y] * 25 ... }) >>> task_func(data, 'Var1', 'Var2') 0.06619257972219346 >>> np.random.seed(42) >>> data = pd.DataFrame({ ... 'a': np.random.choice(['A', 'B'] size=100), ... 'b': np.random.choice(['X', 'Y'] size=100) ... }) >>> task_func(data, 'a', 'b') 1.0\n    \"\"\"\n    if data.empty:\n        raise ValueError(\"'data' is empty\")\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"'col1' or 'col2' not in 'data columns'\")\n    if not all(data[col1].apply(lambda x: isinstance(x, str)) and data[col2].apply(lambda x: isinstance(x, str))):\n        raise TypeError(\"Columns contain non-categorical data\")\n\n    contingency_table = pd.crosstab(data[col1], data[col2])\n\n    if min(contingency_table.shape) < 5:\n        raise ValueError(\"Categories have less than 5 observations (violating chi-square test assumptions)\")\n\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n\n    return p\n\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate dice rolls calculate frequency return frequency array histogram results dice rolls have 6 outcomes title histogram \"Histogram of Dice Rolls\". x-axis \"Dice Value\" y-axis \"Frequency\". Parameters: rolls (int): number dice rolls Returns tuple containing np.array: numpy array frequency each outcome matplotlib.Axes: Axes object histogram Requirements numpy matplotlib.pyplot - random Examples import random >>> random.seed(0) >>> outcomes ax = task_func(10000) >>> print(outcomes) [1656 1690 1696 1657 1632 1669] >>> plt.show() >>> random.seed(10) >>> outcomes ax = task_func(100) >>> print(outcomes) [15 21 17 22 16 9] >>> plt.show()\n    \"\"\"\n    if seed is not None:\n        random.seed(seed)\n\n    outcomes = np.zeros(6)\n    for _ in range(rolls):\n        outcome = random.choice(NUMBERS)\n        outcomes[outcome - 1] += 1\n\n    fig, ax = plt.subplots()\n    ax.bar(range(1, 7), outcomes)\n    ax.set_xlabel(\"Dice Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram of Dice Rolls\")\n\n    return (outcomes, ax)\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives processed files from source to target directory function identifies processed files by '_processed' suffix in filename. Parameters: source_dir (str): directory files archived target_dir (str): directory archive saved archive_name (str): name archive file Default is 'archive.zip' Returns: str: path to created archive. Requirements: - os - re - shutil - zipfile Example >>> task_func(./data/'/data_processed/')_processed/archive.zip' >>> task_func(/data/_processed 'my_archive.zip/data_processed/my_archive.zip'\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.isdir(source_dir):\n        raise ValueError(f\"Source directory {source_dir} does not exist.\")\n\n    # Check if target directory exists\n    if not os.path.isdir(target_dir):\n        raise ValueError(f\"Target directory {target_dir} does not exist.\")\n\n    # Get all files in source directory\n    files = os.listdir(source_dir)\n\n    # Filter files by '_processed' suffix\n    processed_files = [file for file in files if re.search(r'_processed\\.\\w+', file)]\n\n    # Create archive path\n    archive_path = os.path.join(target_dir, archive_name)\n\n    # Create archive\n    with zipfile.ZipFile(archive_path, 'w') as zipf:\n        for file in processed_files:\n            file_path = os.path.join(source_dir, file)\n            zipf.write(file_path, arcname=file)\n\n    return archive_path\n\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts stock closing prices next 7 days linear regression plots data. Parameters df (DataFrame): input dataframe columns 'date' 'closing_price' 'date' datetime format Returns tuple tuple containing list predicted prices next 7 days Axes matplotlib Axes object plot. Requirements pandas numpy matplotlib.pyplot sklearn.linear_model.LinearRegression Constants function uses constant time step 24*60*60 seconds generate future timestamps. Example df = pd.DataFrame( 'date' pd.date_range(start'1/1/2021 end='1/7/2021 'closing_price': [100, 101 102 103 104 105, 106] }) pred_prices plot = task_func(df) print(pred_prices) [107.0, 108.0 109.0 110.0 111.0 112.0 113.0]\n    \"\"\"\n    df = df.sort_values('date')\n    df.reset_index(drop=True, inplace=True)\n\n    x = np.array(range(0, len(df))).reshape(-1, 1)\n    y = df['closing_price'].values.reshape(-1, 1)\n\n    model = LinearRegression()\n    model.fit(x, y)\n\n    x_future = np.array(range(len(df), len(df)+7)).reshape(-1, 1)\n    y_future = model.predict(x_future)\n\n    plt.scatter(x, y, color='blue')\n    plt.plot(x_future, y_future, color='red')\n    plt.title('Linear Regression')\n    plt.xlabel('Days')\n    plt.ylabel('Closing Price')\n    plt.show()\n\n    return y_future.tolist()\n\ndf = pd.DataFrame({\n    'date': pd.date_range(start='1/1/2021', end='1/7/2021'),\n    'closing_price': [100, 101, 102, 103, 104, 105, 106]\n})\n\npred_prices = task_func(df)"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies plots outliers 'closing_price' column DataFrame Z-Score method Parameters df (pandas.DataFrame): input DataFrame contain column 'closing_price' numerical values z_threshold (float optional): absolute Z-Score threshold identifying outliers Default 2. Returns tuple containing elements pandas.DataFrame DataFrame containing outliers 'closing_price' column matplotlib.axes..Axes plot object displaying outliers x-axis label 'Index' y-axis label 'Closing Price' title 'Outliers Closing Prices'. Requirements numpy matplotlib.pyplot scipy.stats.zscore Constants Z-Score threshold identifying outliers customizable via 'z_threshold' parameter. Examples import pandas as pd df1 = pd.DataFrame( 'closing_price': [100, 101 102 103 104 150] outliers1 plot1 = task_func(df1) df2 = pd.DataFrame( 'closing_price': [10, 20 30 40 50 100] outliers2, plot2 = task_func(df2 z_threshold=1.5)\n    \"\"\"\n    df['z_score'] = zscore(df['closing_price'])\n    outliers = df[np.abs(df['z_score']) > z_threshold]\n\n    fig, ax = plt.subplots()\n    ax.scatter(df.index, df['closing_price'])\n    ax.scatter(outliers.index, outliers['closing_price'], color='r')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers Closing Prices')\n\n    return outliers, fig, ax\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize distribution stock closing prices using box plot histogram single figure function understand spread central tendency distribution shape. tile box plot set 'Box Plot of Closing Prices' title histogram 'Histogram Closing Prices'. Requirements: - pandas matplotlib.pyplot seaborn Parameters: df (DataFrame): pandas DataFrame containing one column 'closing_price' with stock closing prices Returns tuple tuple containing two matplotlib.axes._axes.Axes objects first boxplot second histogram. Example >>> df = pd.DataFrame({ ... 'closing_price': [100, 101, 102 103 104, 150] ... }) >>> boxplot_ax, histplot_ax = task_func(df) >>> print(boxplot_ax.get_title()) Box Plot Closing Prices >>> print(histplot_ax.get_title()) Histogram of Closing Prices\n    \"\"\"\n    # Create a boxplot\n    boxplot_ax = sns.boxplot(data=df, x='closing_price')\n    boxplot_ax.set_title('Box Plot of Closing Prices')\n\n    # Create a histogram\n    histplot_ax = sns.histplot(data=df, x='closing_price', kde=True)\n    histplot_ax.set_title('Histogram of Closing Prices')\n\n    return boxplot_ax, histplot_ax\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts share closing prices next 7 days ARIMA model plots forecast Parameters df (pd.DataFrame): input dataframe columns 'date' 'closing_price' 'date' datetime dtype 'closing_price' float Returns Tuple[List[float] Axes] tuple list forecasted prices next 7 days matplotlib Axes object subplot. Requirements pandas numpy matplotlib.pyplot statsmodels.tsa.arima.model.ARIMA Example df = pd.DataFrame( 'date' pd.date_range(start'1/1/2021 end='1/7/2021 'closing_price' [100, 101 102 103 104 105, 106]) forecast ax = task_func(df) print(forecast) [106.99999813460752 107.99999998338443 108.99999547091295 109.99999867405204 110.99999292499156 111.99999573455818 112.9999903188028]\n    \"\"\"\n    model = ARIMA(df['closing_price'], order=(1,1,0))\n    model_fit = model.fit()\n    forecast = model_fit.forecast(steps=7)\n\n    fig, ax = plt.subplots(figsize=(12, 6))\n    ax.plot(df['date'], df['closing_price'], label='Historical data')\n    ax.plot(pd.date_range(start=df['date'].iloc[-1], periods=8)[1:], forecast, label='Forecast')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Closing Price')\n    ax.legend()\n    plt.show()\n\n    return forecast, ax\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing two-letter combinations lowercase English alphabets dictionary values represent frequency in word If combination in word value 0. Requirements collections.Counter - itertools - string Parameters word (str): input string containing alphabetic characters Returns dict: dictionary with keys as two-letter alphabet combinations values as counts in word. function uses `collections.Counter` library to count occurrences two-letter combinations uses `itertools.permutations` method generate two-letter combinations alphabets uses `string` library to get string of lowercase alphabets. Example: >>> list(task_func('abcdef').items())[:5] [('ab', 1), ('ac', 0), ('ad', 0), ('ae', 0), ('af', 0)]\n    \"\"\"\n    alphabets = string.ascii_lowercase\n    two_letters_combinations = [''.join(i) for i in itertools.permutations(alphabets, 2)]\n    word_counter = Counter(word)\n    result = {key: word_counter.get(key, 0) for key in two_letters_combinations}\n    return result\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create visualize sales report categories period time Parameters start_date (str): start date report 'YYYY-MM-DD' format Default '2016-01-01' periods (int): number periods report Default 13. freq (str): frequency dates Default 'WOM-2FRI' (WeekOfMonth-2nd Friday). categories (list): List categories report Default ['Electronics' 'Fashion' 'Home & Kitchen' 'Automotive' 'Sports'] Returns Returns DataFrame sales data columns 'Date' 'Category' 'Sales' Returns Matplotlib Axes object plot. Requirements pandas - matplotlib.pyplot - numpy Example >>> df ax = task_func(start_date='2020-01-01' periods=5 freq='W-MON' categories=['Electronics' 'Fashion']) df Date Category Sales 0 2020-01-06 Electronics 272 1 Fashion 147 2 2020-01-13 Electronics 217 3 Fashion 292 4 2020-01-20 Electronics 423 5 Fashion 6 2020-01-27 Electronics 295 7 Fashion 8 2020-02-03 Electronics 109 9 Fashion 311\n    \"\"\"\n    # Create date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n\n    # Create dataframe\n    df = pd.DataFrame(dates, columns=['Date'])\n\n    # Create random sales data\n    df['Category'] = np.random.choice(categories, size=periods)\n    df['Sales'] = np.random.randint(100, 1000, size=periods)\n\n    # Plot data\n    ax = df.plot(x='Date', y='Sales', kind='bar', legend=True, figsize=(10,5))\n    plt.title('Sales report categories period time')\n    plt.xlabel('Date')\n    plt.ylabel('Sales')\n    plt.legend(title='Category')\n\n    return df, ax\n\ndf, ax = task_func()\nplt.show()\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates time series sales data specified date linear regression forecast future sales data. Parameters start_date (str): start date sales data YYYY-MM-DD format Default '2016-01-01' periods (int): number periods sales data available Default 13. freq (str): frequency sales data 'WOM-2FRI' second Friday each month Default 'WOM-2FRI' sales_data (array-like optional): array actual sales data not provided random data generated Returns numpy array forecasted future sales same number periods input data. Requirements numpy - pandas - sklearn.linear_model.LinearRegression Examples np.random.seed(42) consistent random data generation task_func('2016-01-01', 13, 'WOM-2FRI') array([313.65384615, 318.56043956 323.46703297 328.37362637.28021978 338.18681319 343.09340659. 352.90659341 357.81318681 362.71978022 367.62637363 372.53296703]) task_func('2020-01-01', 5, 'M', [200, 300, 400, 500, 600]) array([238.9, 226. , 213.1, 200.2, 187.3])\n    \"\"\"\n    # Generate date range\n    date_range = pd.date_range(start=start_date, periods=periods, freq=freq)\n\n    # If sales_data is not provided, generate random data\n    if sales_data is None:\n        np.random.seed(42)\n        sales_data = np.random.randint(100, 700, size=periods)\n\n    # Create dataframe with date and sales data\n    df = pd.DataFrame({'date': date_range, 'sales': sales_data})\n\n    # Set date as index\n    df.set_index('date', inplace=True)\n\n    # Create lagged sales data\n    df['sales_lag'] = df['sales'].shift(1)\n\n    # Drop missing values\n    df.dropna(inplace=True)\n\n    # Create X and y for linear regression\n    X = df['sales_lag'].values.reshape(-1, 1)\n    y = df['sales'].values\n\n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Generate future sales data\n    future_sales = model.predict(np.arange(1, periods+1).reshape(-1, 1))\n\n    return future_sales\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    assigns tasks to employees due date current day returns DataFrame. Parameters task_list str): tasks assigned n_tasks (int): Number tasks assigned number not negative larger than tasks task_list. employees (list str optional): employee names tasks assigned If not provided defaults to ['John Doe' 'Jane Smith 'James Brown 'Mary Johnson 'Robert Davis' seed (int optional): Seed for random number generator reproducibility Defaults to None (not set). Returns pd.DataFrame Contains columns 'Task Name' 'Assigned To' 'Due Date' each representing assigned task. Raises ValueError: If n_tasks negative. Task names sanitized replacing spaces with underscores Due dates set to current system date. Requirements pandas - random - datetime Examples >>> df = task_func(['Clean Office' 'Prepare Report' 'Client Meeting'], 2 seed=42) >>> df Task Name Assigned To Due Date 0 Client_Meeting John Doe 2024-04-13 1 Clean_Office James Brown 2024-04-13 >>> type(df) <class 'pandas.core.frame.DataFrame'>\n    \"\"\"\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    tasks = [task.replace(\" \", \"_\") for task in task_list]\n    random.shuffle(employees)\n\n    data = {\n        \"Task Name\": tasks * n_tasks,\n        \"Assigned To\": employees * n_tasks,\n        \"Due Date\": [datetime.now().strftime(\"%Y-%m-%d\") for _ in range(n_tasks * len(tasks))],\n    }\n\n    return pd.DataFrame(data)\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in words with underscores plots frequency each unique word. Parameters mystrings (list of str): List words/phrases where spaces replaced with underscores text (str): text modifications applied word frequencies calculated not empty. Returns matplotlib.axes.Axes: Axes object plot. Raises ValueError: If input text empty. Requirements numpy - matplotlib - re - collections Notes operations case-insensitive frequency plot displays each unique word on x-axis order after modification with corresponding frequency y-axis. Examples >>> ax = task_func(['Lorem ipsum' 'consectetur adipiscing 'Lorem dolor Ipsum') >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text is empty\")\n\n    # Replace spaces in words with underscores\n    text = text.lower()\n    text = re.sub(r'\\s', '_', text)\n\n    # Apply modifications\n    for word in mystrings:\n        word = word.lower()\n        text = text.replace(word, word.replace(' ', '_'))\n\n    # Calculate word frequencies\n    word_freq = Counter(text.split('_'))\n\n    # Plot frequency of each unique word\n    fig, ax = plt.subplots()\n    ax.bar(range(len(word_freq)), list(word_freq.values()), align='center')\n    ax.set_xticks(range(len(word_freq)))\n    ax.set_xticklabels(list(word_freq.keys()), rotation=45)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of each unique word')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with extensions from source directory save as zip file target directory Parameters source_directory (str): source directory containing files zipped target_directory (str): destination directory of zip file created. If exist function create zip_name (str): name zip file create (without extension '.zip' added automatically). Returns str: full path to created zip file format \"/path/to/target_directory/zip_name.zip\". OSError: If source_directory exist. Requirements: os - glob - pathlib - zipfile valid extensions are ['.txt' '.docx' '.xlsx' '.csv']. Example path = task_func('/path/to/source_directory' '/path/to/target_directory' 'zipped_files') >>> type(path) <class 'str'> >>> path '/path/to/target_directory/zipped_files.zip'\n    \"\"\"\n    # Check if source directory exist\n    if not os.path.isdir(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist.\")\n\n    # Check if target directory exist, if not create it\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    # Define valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Get all files with valid extensions in source directory\n    files_to_zip = []\n    for extension in valid_extensions:\n        files_to_zip.extend(glob.glob(f\"{source_directory}/*{extension}\"))\n\n    # Create zip file\n    zip_path = Path(target_directory) / f\"{zip_name}.zip\"\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files_to_zip:\n            zipf.write(file, arcname=os.path.basename(file))\n\n    return str(zip_path)\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files extensions (.txt.docx.xlsx .csv) from source directory to CSV saves in target directory. Parameters: source_directory (str): path to source directory containing files converted. target_directory (str): path target directory where converted CSV files saved If exist function create it. Returns int: number of files converted to CSV. FileNotFoundError: If source directory exist. Requirements: - os - pathlib - pandas - python-docx - openpyxl Notes Each file's text content captured stored in CSV with single 'Text' column no row indices. function overwrite existing files in target directory if same names as converted files. Example: >>> task_func('/Users/test/Documents',/csv_files') 4 >>> task_func('/path/to/source',/path/to/target') 2\n    \"\"\"\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n\n    os.makedirs(target_directory, exist_ok=True)\n\n    files_converted = 0\n\n    for filename in os.listdir(source_directory):\n        if filename.endswith(\".txt\"):\n            file_path = os.path.join(source_directory, filename)\n            df = pd.DataFrame([open(file_path, \"r\").read()], columns=['Text'])\n            df.to_csv(os.path.join(target_directory, f\"{filename.split('.')[0]}.csv\"), index=False)\n            files_converted += 1\n\n        elif filename.endswith(\".docx\"):\n            file_path = os.path.join(source_directory, filename)\n            doc = docx.Document(file_path)\n            df = pd.DataFrame([para.text for para in doc.paragraphs], columns=['Text'])\n            df.to_csv(os.path.join(target_directory, f\"{filename.split('.')[0]}.csv\"), index=False)\n            files_converted += 1\n\n        elif filename.endswith(\".xlsx\"):\n            file_path = os.path.join(source_directory, filename)\n            xls = pd.ExcelFile(file_path)\n            for sheet_name in xls.sheet_names:\n                df = pd.DataFrame(xls.parse(sheet_name))\n                df.to_csv(os.path.join(target_directory, f\"{filename.split('.')[0]}_{sheet_name}.csv\"), index=False)\n                files_converted += 1\n\n    return files_converted\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes MinMax-normalized cumulative sum each numeric column DataFrame Parameters df (pandas.DataFrame): input DataFrame containing numerical values Returns pd.DataFrame each column contains normalized cumulative sum retaining original column names TypeError contains non-numeric data ValueError empty or contains NaN values Requirements pandas - numpy - sklearn Example input_df = pd.DataFrame({'A': [1, 2, 3], 'B': [3, 2, 1]}) output_df = task_func(input_df) type(output_df) <class 'pandas.core.frame.DataFrame'> output_df A B 0 0.0 0.000000 1 0.666667 2 1.0 1.000000\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame\")\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"DataFrame cannot be empty or contain NaN values\")\n    if not df.select_dtypes(include=[np.number]).empty:\n        raise TypeError(\"DataFrame contains non-numeric data\")\n\n    scaler = MinMaxScaler()\n    df_normalized = pd.DataFrame(scaler.fit_transform(df.cumsum()), columns=df.columns)\n\n    return df_normalized\n\n\ninput_df = pd.DataFrame({'A': [1, 2, 3], 'B': [3, 2, 1]})\noutput_df = task_func(input_df)"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes directory listing each file size creation time last modification time without recursing subdirectories. Parameters: directory_path (str): path to directory analyzed. If empty function returns empty list. Returns list of tuples: Each tuple contains (file name size creation time modification time ISO format). ValueError: If directory exist. Requirements - os - pathlib - datetime Notes function assumes directory exists contains only files (no subdirectories processed). Times reported in system time, UTC creation modification times platform dependent some systems creation time might not replaced by last metadata change time. Examples: result = task_func('/path/to/directory') >>> print(result) [('example.txt', 1024 '2023-04-01T14:30:00Z' '2023-04-02T15:00:00Z'), ... result = task_func('/path/to/empty_directory') print(result) []\n    \"\"\"\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"Directory does not exist\")\n\n    result = []\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            creation_time = os.path.getctime(file_path)\n            modification_time = os.path.getmtime(file_path)\n            creation_time_iso = datetime.fromtimestamp(creation_time, tz=timezone.utc).isoformat()\n            modification_time_iso = datetime.fromtimestamp(modification_time, tz=timezone.utc).isoformat()\n            result.append((filename, file_size, creation_time_iso, modification_time_iso))\n\n    return result\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates population report DataFrame CSV file based on JSON data. Parameters json_data (str): Nested JSON string containing country names keys populations values parent key \"Countries\". Example format '{\"Countries\": A: 331002651, B: 67886011}}' output_dir (str): Directory path CSV report saved Defaults to current directory function create if file_name (str): Name CSV report Defaults to \"country_population_report.csv\". Returns str file path generated CSV report pd.DataFrame: country-population data loaded from input JSON columns \"Country\", \"Population\". ValueError: If JSON data malformed empty contains non-string country names non-numeric negative populations. IOError: If file written to specified directory. Requirements json - os - pandas - math Notes Output DataFrame no extra index column. If function encounters float population valid round down to nearest integer. Example json_str = '{\"Countries\": A 331002651, B: 67886011}}' >>> csv_file_path, df = task_func(json_str) >>> print(csv_file_path)./country_population_report.csv >>> df Country Population 0 Country A 331002651 1 Country B 67886011\n    \"\"\"\n    # Load JSON data\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Malformed JSON data\")\n\n    # Check if JSON data contains \"Countries\" key\n    if \"Countries\" not in data:\n        raise ValueError(\"JSON data does not contain 'Countries' key\")\n\n    # Check if JSON data contains non-string country names or non-numeric populations\n    for country, population in data[\"Countries\"].items():\n        if not isinstance(country, str):\n            raise ValueError(\"Non-string country names found\")\n        if not isinstance(population, (int, float)) or population < 0:\n            raise ValueError(\"Non-numeric or negative populations found\")\n\n    # Create DataFrame from JSON data\n    df = pd.DataFrame(list(data[\"Countries\"].items()), columns=[\"Country\", \"Population\"])\n\n    # Round down population to nearest integer\n    df[\"Population\"] = df[\"Population\"].apply(lambda x: math.floor(x))\n\n    # Create file path\n    file_path = os.path.join(output_dir, file_name)\n\n    # Write DataFrame to CSV file\n    try:\n        df.to_csv(file_path, index=False)\n    except IOError:\n        raise IOError(\"Failed to write CSV file\")\n\n    return file_path, df\n\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates item (files directories in directory against conditions. Parameters: dir_path (str): path to directory evaluated Must exist. predicates (list strings): Names of conditions check for Must contain valid conditions Invalid conditions ignored. Supported conditions: 1. 'is_file' item file 2. 'is_dir' item directory 3. 'has_special_chars' item name contains character not letter digit underscore ignoring file extensions 4. 'has_numbers' item name contains number Returns: dictionary with directory items as keys results condition checks as values. Raises ValueError: If no valid predicates FileNotFoundError: specified directory exist or. function evaluates file/directory names full path Predicates deduplicated. Requirements: os - re - pathlib Examples task_func('/path/to/dir''is_file' 'has_numbers']) {'file.txt' {'is_file True 'has_numbers': False} 'file2.txt' {'is_file True 'has_numbers': True}} task_func('/path/to/dir''is_dir 'has_special_chars']) {'my_folder' {'is_dir' True 'has_special_chars': False} 'a_@Folder' {'is_dir' True 'has_special_chars': True}}\n    \"\"\"\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"Directory {dir_path} not found\")\n\n    valid_predicates = ['is_file', 'is_dir', 'has_special_chars', 'has_numbers']\n    predicates = [pred for pred in predicates if pred in valid_predicates]\n\n    if not predicates:\n        raise ValueError(\"No valid predicates\")\n\n    result = {}\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n        item_name, item_ext = os.path.splitext(item)\n        item_result = {}\n        for predicate in predicates:\n            if predicate == 'is_file':\n                item_result[predicate] = os.path.isfile(item_path)\n            elif predicate == 'is_dir':\n                item_result[predicate] = os.path.isdir(item_path)\n            elif predicate == 'has_special_chars':\n                item_result[predicate] = bool(re.search(r'\\W', item_name))\n            elif predicate == 'has_numbers':\n                item_result[predicate] = bool(re.search(r'\\d', item_name))\n        result[item] = item_result\n    return result\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert hexadecimal string to encodings function takes hexadecimal string input performs encoding operations decodes hexadecimal string to bytes converts bytes into UTF-8 string UTF-8 string encoded into formats hexadecimal base64 UTF-8 UTF-16 UTF-32 ASCII URL encoding ROT13. if ASCII not possible returns 'Not representable in ASCII' Parameters hex_string (str): input string in hexadecimal format Returns: dictionary containing input string encoded in formats dictionary keys are encoding types ('hex' 'base64 'utf-8 'utf-16 'utf-32' 'ASCII' 'URL' 'ROT13 values are corresponding encoded strings If string represented in ASCII 'ASCII' key maps to 'Not representable in ASCII'Requirements binascii base64 codecs Example task_func(\"4a4b4c\")'hex '4a4b4c 'base64 'SktM 'utf-8 'JKL 'utf-16 'JKL 'utf-32 'JKL 'ASCII 'URL 'JKL 'ROT13 'WXY task_func(\"68656c6c6f\")'hex '68656c6c6f 'base64 'aGVsbG8= 'utf-8 'hello 'utf-16 'hello 'utf-32 'hello 'ASCII 'hello 'URL 'hello 'ROT13 'uryyb'\n    \"\"\"\n    hex_string = hex_string.lower()\n    bytes_obj = binascii.unhexlify(hex_string)\n    base64_encoded = base64.b64encode(bytes_obj).decode('utf-8')\n    utf8_encoded = bytes_obj.decode('utf-8')\n    utf16_encoded = bytes_obj.decode('utf-16')\n    utf32_encoded = bytes_obj.decode('utf-32')\n    ascii_encoded = ''.join([chr(i) for i in bytes_obj if 0 <= i <= 127])\n    if ascii_encoded != '':\n        ascii_encoded = 'Not representable in ASCII'\n    url_encoded = urllib.parse.quote(bytes_obj)\n    rot13_encoded = codecs.encode(bytes_obj, 'rot_13')\n\n    return {\n        'hex': hex_string,\n        'base64': base64_encoded,\n        'utf-8': utf8_encoded,\n        'utf-16': utf16_encoded,\n        'utf-32': utf32_encoded,\n        'ASCII': ascii_encoded,\n        'URL': url_encoded,\n        'ROT13': rot13_encoded.decode('utf-8')\n    }\n\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads tar.gz file from specified URL validates MD5 checksum against expected value. If checksum matches extracts contents Otherwise deletes downloaded file. Parameters: url (str): URL from download tar.gz file. Returns: bool: Returns True if file successfully downloaded MD5 checksum matches expected value extracted. Returns False if checksum match expected value or download fails. Requirements: - urllib.request - hashlib - tarfile - os Example >>> task_func('http://example.com/files.tar.gz') True\n    \"\"\"\n    try:\n        # Download file\n        urllib.request.urlretrieve(url, TARGET_TAR_FILE)\n\n        # Calculate MD5 checksum\n        with open(TARGET_TAR_FILE, \"rb\") as f:\n            md5 = hashlib.md5()\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                md5.update(chunk)\n        md5_checksum = md5.hexdigest()\n\n        # Check if MD5 checksum matches expected value\n        if md5_checksum == EXPECTED_MD5_CHECKSUM:\n            # Extract contents\n            with tarfile.open(TARGET_TAR_FILE, \"r:gz\") as tar:\n                tar.extractall()\n            return True\n        else:\n            # Delete file if checksum does not match\n            os.remove(TARGET_TAR_FILE)\n            return False\n    except Exception:\n        # Delete file if download fails\n        os.remove(TARGET_TAR_FILE)\n        return False\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download CSV file from URL save to specified path count occurrences of each value in column function handles scenarios including missing columns file download errors. Parameters: url (str): URL of CSV file downloaded Must be valid accessible URL. column_name (str): name of column in CSV file values counted function ValueError if column not found. csv_file_path (str): file path where downloaded CSV file saved If file exists at path overwritten. Returns: dict: dictionary mapping values from specified column to corresponding occurrence counts. Raises ValueError: If specified column_name exist in CSV file function delete downloaded file raise ValueError with message \"The provided column_name '{column_name}' not exist in CSV file.\" Requirements: - urllib - os - csv - collections Example: >>> task_func('http://example.com/data.csv', 'category', 'downloaded_data.csv') {'cat1': 5, 'cat2': 3, 'cat3': 8} hypothetical output actual output on CSV data. Notes downloaded CSV file deleted after contents processed function only counts values in specified column ignores other data.\n    \"\"\"\n    try:\n        urllib.request.urlretrieve(url, csv_file_path)\n    except Exception as e:\n        print(f\"Error downloading file: {e}\")\n        return\n\n    if not os.path.isfile(csv_file_path):\n        print(f\"File {csv_file_path} not found.\")\n        return\n\n    try:\n        with open(csv_file_path, 'r') as csv_file:\n            csv_reader = csv.DictReader(csv_file)\n            column_names = csv_reader.fieldnames\n            if column_name not in column_names:\n                raise ValueError(f\"The provided column_name '{column_name}' not exist in CSV file.\")\n\n            counter = collections.Counter()\n            for row in csv_reader:\n                counter[row[column_name]] += 1\n\n            os.remove(csv_file_path)\n            return counter\n    except Exception as e:\n        print(f\"Error processing file: {e}\")\n        return\n\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches parses XML file from URL converts into Pandas DataFrame. Parameters: url (str): URL of CSV file downloaded. Must be valid accessible URL. Returns: pandas.DataFrame DataFrame constructed from parsed XML data Each row corresponds to 'item' element in XML file child elements becoming columns. Raises ValueError error raised in scenarios URL invalid or XML file be fetched XML file invalid syntax. XML structure conform to expected format. Requirements: - urllib - lxml - pandas Examples: Example with valid XML structure >>> df = task_func('http://example.com/sample_data.xml') >>> print(df) name age 0 John 25 1 Jane 30 Example invalid XML structure >>> df = task_func('http://example/invalid_structure.xml') ValueError: XML structure not match expected format.\n    \"\"\"\n    try:\n        # Fetch XML file\n        response = urllib.request.urlopen(url)\n        xml_content = response.read()\n\n        # Parse XML file\n        root = etree.fromstring(xml_content)\n\n        # Extract data\n        data = []\n        for item in root.findall('item'):\n            name = item.find('name').text\n            age = item.find('age').text\n            data.append([name, age])\n\n        # Convert to DataFrame\n        df = pd.DataFrame(data, columns=['name', 'age'])\n\n        return df\n\n    except etree.XMLSyntaxError:\n        raise ValueError(\"XML structure not match expected format.\")\n    except urllib.error.URLError:\n        raise ValueError(\"URL is invalid.\")\n\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads text file from URL processes text frequency each word plots bar chart showing ten most frequently occurring words. Parameters: url (str): URL text file downloaded URL should point to text file. Returns tuple tuple containing two elements Counter object from collections module containing word frequencies text. Axes: matplotlib Axes object represents plotted bar chart ten most common words. function assumes URL points to plain text file not handle binary files non-text content Words identified using basic regular expression case-sensitive function remove common stopwords all words counted as is. Requires internet access to download file URL. Example word_freq, ax = task_func('http://www.example/data.txt') >>> print(word_freq.most_common(5)) [('the', 102), ('of', 76), ('and', 64), ('to', 52), ('in', 41)] Requirements: urllib - re - collections - matplotlib\n    \"\"\"\n    # Download the file\n    response = urllib.request.urlopen(url)\n    text = response.read().decode('utf-8')\n\n    # Process the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Count the words\n    word_counts = Counter(words)\n\n    # Get the 10 most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Split the words and counts into two lists\n    words, counts = zip(*most_common_words)\n\n    # Plot the word frequencies\n    fig, ax = plt.subplots()\n    ax.bar(words, counts)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequencies')\n    ax.set_title('10 Most Common Words')\n\n    return word_counts, ax\n\n"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Downloads extracts ZIP file from specified URL to given directory. Parameters: url (str): URL download ZIP should valid accessible URL. download_path (str): directory path where ZIP file downloaded extracted. Defaults to \"mnt/data/downloads/\". Returns - str: Path to directory containing extracted contents. If error occurs descriptive message returned message starts with \"Error: \". If descrption URL not point to ZIP file downloaded file not valid ZIP file \"Unable to download file from provided URL.\". Raises Network Issues or Invalid URL: Returns \"Error: Unable to download file from URL.\" if issues reaching URL or downloading file. Incorrect File Type: Returns \"Error: URL not point to ZIP file.\" if downloaded file content type not 'application/zip'. Corrupt ZIP File: Returns \"Error: downloaded file not valid ZIP file.\" if ZIP corrupt or be extracted. General Exceptions: Catches reports other exceptions runtime errors) process with specific error message formatted as \"Error: [exception message]\". Requirements: - requests - os - zipfile Example >>> task_func('https://example.com/file.zip') 'mnt/data/downloads/file'\n    \"\"\"\n    try:\n        # Check if download path exists, if not create it\n        if not os.path.exists(download_path):\n            os.makedirs(download_path)\n\n        # Download file\n        try:\n            response = requests.get(url, stream=True)\n            if response.status_code != 200:\n                return \"Error: Unable to download file from URL.\"\n        except requests.exceptions.RequestException as e:\n            return f\"Error: {str(e)}\"\n\n        # Check if file is a ZIP file\n        if not url.lower().endswith('.zip'):\n            return \"Error: URL not point to ZIP file.\"\n\n        # Check if file is a valid ZIP file\n        try:\n            with ZipFile(io.BytesIO(response.content)) as zip_file:\n                pass\n        except BadZipFile:\n            return \"Error: Downloaded file not valid ZIP file.\"\n\n        # Save file\n        file_name = url.split('/')[-1]\n        file_path = os.path.join(download_path, file_name)\n        with open(file_path, 'wb') as f:\n            f.write(response.content)\n\n        # Extract file\n        try:\n            with ZipFile(file_path, 'r') as zip_file:\n                zip_file.extractall(download_path)\n        except BadZipFile:\n            return \"Error: Downloaded file not valid ZIP file.\"\n\n        # Return directory path\n        return os.path.join(download_path, file_name.split('.')[0])\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Extracts converts data from HTML table based on 'table_id' webpage into Pandas DataFrame. If table present contains no data rows no <tr> tags), function returns empty DataFrame. Parameters: url (str): URL webpage from extract table. table_id (str): 'id' attribute of HTML table extracted. Returns df (pd.DataFrame): DataFrame containing data extracted from HTML table. If table found no rows (<tr> elements), empty DataFrame returned. Raises requests.exceptions.HTTPError: If HTTP request fails due to connection issues or non-successful status code like 404 or 500). ValueError: If no table with specified 'table_id' found on webpage error message \"Table with specified ID not found.\" Requirements: - requests - bs4.BeautifulSoup - pandas - io Notes function raises HTTPError for unsuccessful HTTP requests network problems non-2xx HTTP responses. ValueError raised when HTML table with specified ID not present in webpage content indicating incorrect ID or absence of table. If table has no rows of <tr> tags, empty DataFrame returned. useful for handling tables structurally present HTML devoid of data. Example: task_func('https://example.com/data.html', 'table1') DataFrame: Name Age 0 Alice 25 1 Bob 30 Example ValueError: task_func(/data 'nonexistent_table') ValueError: Table with specified ID not found.Example empty table task_func('https://example/emptytable.html') DataFrame Empty Columns [] Index: []\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        print (\"HTTP Error:\",errh)\n    except requests.exceptions.ConnectionError as errc:\n        print (\"Error Connecting:\",errc)\n    except requests.exceptions.Timeout as errt:\n        print (\"Timeout Error:\",errt)\n    except requests.exceptions.RequestException as err:\n        print (\"Something went wrong\",err)\n\n    soup = BeautifulSoup(response.content, 'html.parser')\n    table = soup.find('table', {'id': table_id})\n\n    if table is None:\n        raise ValueError(f\"Table with specified ID not found.\")\n\n    csv = pd.read_csv(StringIO(table.get_text().replace('\\n', '')), delimiter=' ', header=None)\n    df = pd.DataFrame(csv)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Downloads extracts zip file from specified URL. Parameters: url (str): URL zip file download. filename (str): filename downloaded zip file saved. Returns tuple tuple status message list of filenames in unzipped directory or empty list if extraction fails. status message \"Error\" when Network-related exceptions raised if download fails File-related exceptions if issue with file handling or extraction. Requirements: requests - pathlib.Path - zipfile Example >>> task_func('http://example/myfile.zip',') ('Download extraction successful', ['file1.txt' 'file2.txt'])\n    \"\"\"\n    try:\n        # Create download directory if it doesn't exist\n        DOWNLOAD_DIR.mkdir(exist_ok=True)\n\n        # Create unzip directory if it doesn't exist\n        ZIP_DIR.mkdir(exist_ok=True)\n\n        # Download file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n\n        # Save file\n        download_path = DOWNLOAD_DIR / filename\n        with download_path.open('wb') as f:\n            f.write(response.content)\n\n        # Unzip file\n        with zipfile.ZipFile(download_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Return list of filenames in unzipped directory\n        return \"Download and extraction successful\", [str(p.name) for p in ZIP_DIR.iterdir()]\n\n    except requests.exceptions.RequestException as e:\n        return \"Error\", str(e)\n\n    except (FileNotFoundError, zipfile.BadZipFile) as e:\n        return \"Error\", str(e)\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    function scrapes webpage hyperlinks saves as absolute URLs to CSV file Parameters url (str): relative URL webpage scrape base_url (str optional): base URL website prepend relative links Defaults to 'https://www.example.com' csv_file (str optional): filename CSV file links saved Defaults 'scraped_data.csv' Returns int: number of unique absolute links scraped webpage. Requirements requests urllib.parse.urljoin bs4.BeautifulSoup - csv Examples task_func('/mywebpage') 5 >>> task_func('/anotherpage' base_url='https://www.different' csv_file='other_links.csv') 8\n    \"\"\"\n    # Send a GET request\n    response = requests.get(urljoin(base_url, url))\n\n    # Parse the content of the request with BeautifulSoup\n    soup = BeautifulSoup(response.content, \"html.parser\")\n\n    # Find all the links in the webpage\n    links = soup.find_all(\"a\")\n\n    # Open the CSV file in write mode\n    with open(csv_file, \"w\", newline=\"\") as f:\n        writer = csv.writer(f)\n\n        # Write the header\n        writer.writerow([\"URL\"])\n\n        # Write the absolute URLs of the links to the CSV file\n        for link in links:\n            absolute_url = urljoin(base_url, link.get(\"href\"))\n            writer.writerow([absolute_url])\n\n    # Return the number of unique absolute links\n    return len(set(absolute_url for link in links))\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    function parses HTML table data from URL or local file stores into SQLite database function handles scenarios for fetching processing storing data. Parameters: webpage_url (str): URL of webpage or local file path prefixed with \"file://\". database_name (str): name of SQLite database file data stored. Defaults to \"my_database.db\". Returns: int: number of rows in parsed HTML table. Raises requests.RequestException: exception raised if network issue accessing URL includes connection errors timeouts HTTP errors. sqlite3.DatabaseError: exception raised issues connecting to or writing SQLite database includes invalid database names write permissions SQL execution errors. Notes function to replace table \"my_table\" in SQLite database with new data each time called. If HTML content contain table or table empty function return 0 no rows parsed and stored. function relies on 'requests' 'lxml' 'pandas' 'sqlite3' libraries for. Requirements: - requests - lxml - pandas - sqlite3 Example: >>> num_rows = task_func(\"http://example.com/tabledata\") >>> print(f\"Number of rows parsed: {num_rows}\") Number of rows parsed: 5\n    \"\"\"\n    try:\n        # Fetch HTML content\n        response = requests.get(webpage_url)\n        response.raise_for_status()\n\n        # Parse HTML content\n        parser = html.HTMLParser()\n        tree = html.fromstring(response.content, parser=parser)\n        table = tree.xpath('//table')\n\n        if not table:\n            return 0\n\n        # Convert HTML table to pandas DataFrame\n        df = pd.read_html(webpage_url, flavor='lxml')[0]\n\n        # Connect to SQLite database\n        conn = sqlite3.connect(database_name)\n\n        # Store DataFrame into SQLite database\n        df.to_sql('my_table', conn, if_exists='replace', index=False)\n\n        # Return number of rows in parsed HTML table\n        return len(df.index)\n\n    except requests.RequestException as e:\n        print(f\"Error: {e}\")\n        return 0\n\n    except sqlite3.DatabaseError as e:\n        print(f\"Error: {e}\")\n        return 0\n\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens image file extracts text OCR converts text encoding fallback to image comment processing. ValueError UnicodeDecodeError or LookupError during conversion Parameters filename (str): path to image file Defaults global variable 'IMAGE_PATH' from_encoding (str): original encoding extracted text or image comment Default 'cp1251' to_encoding (str): target encoding for converted text or comment Default 'utf8'. Returns comment (str): text extracted from image comment converted to target encoding. If OCR extraction comment processing fail returns empty string. ValueError: incorrect encodings for text or comment conversion. Requirements codecs - - pytesseract Example 'image.png' contains text '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' in Russian (encoded cp1251) text extracted by OCR. text = task_func('image.png', 'cp1251', 'utf8') >>> print(text) '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' output utf-8 encoded version extracted text.\n    \"\"\"\n    try:\n        image = Image.open(filename)\n        data = pytesseract.image_to_string(image, lang='rus')\n        data = data.encode(to_encoding).decode(to_encoding)\n        return data\n    except (ValueError, LookupError, UnicodeDecodeError):\n        return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from REST API URL processes for JSON parsing process involves decoding re-encoding data handling different encoding scenarios function initiates HTTP GET request to URL with 5-second timeout retrieves response content in raw bytes. Parameters url (str): URL REST API Default is 'http://api.example.com/data'. from_encoding (str optional): original encoding data If None encoding auto-detected Default is None. to_encoding (str): target encoding format for data Default is 'utf8'. Returns dict JSON-parsed data after re-encoding. Returns empty dictionary if content empty. ValueError: \"Unable to detect encoding for non-empty content\", if fails. Requirements: json - requests - chardet Example data = task_func('http://api.example/data') >>> print(data) {'key 'value'} expected output function sets timeout 5 seconds for API request handles cases with empty content undetectable encoding by returning empty dictionary or raising exception decoding re-encoding steps ensure compatibility with various data formats final JSON parsing.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        content = response.content\n\n        if not content:\n            return {}\n\n        if not from_encoding:\n            from_encoding = chardet.detect(content)['encoding']\n\n        decoded_content = content.decode(from_encoding)\n        reencoded_content = decoded_content.encode(to_encoding)\n\n        return json.loads(reencoded_content)\n\n    except json.JSONDecodeError:\n        return {}\n\n    except UnicodeDecodeError:\n        raise ValueError(\"Unable to detect encoding for non-empty content\")\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads CSV file processes date-related data function performs tasks checking file's existence validating specified date column converting date values to datetime objects filtering rows current date sorting data handles special cases like empty CSV file empty DataFrame raises exceptions for error scenarios like missing files or columns. Parameters: csv_file_path (str): path to CSV file FileNotFoundError raised if path invalid. column_name (str): name column containing date values ValueError if column missing. date_format (str optional): format of date values in specified column. Defaults to '%Y-%m-%d'. Returns - pandas - os - datetime pandas.errors.EmptyDataError Raises FileNotFoundError If CSV file not found at path ValueError: If specified column not present in CSV. Requirements: - pandas - os - datetime Example >>> task_func('path/to/csvfile.csv', 'DateColumn') Date Value 0 2023-12-10 100 1 2023-12-11 150\n    \"\"\"\n    # Check if file exists\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"No such file: {csv_file_path}\")\n\n    # Read CSV file\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        raise EmptyDataError(\"No data in file\")\n\n    # Check if column exists\n    if column_name not in df.columns:\n        raise ValueError(f\"No such column: {column_name}\")\n\n    # Convert date values to datetime objects\n    try:\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    except ValueError:\n        raise ValueError(f\"Date format in column {column_name} is not {date_format}\")\n\n    # Filter rows with current date\n    df = df[df[column_name] == datetime.now().date()]\n\n    # Sort data\n    df = df.sort_values(by=column_name)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    function secures client socket using SSL/TLS sends back SHA256 hash of file requested client. Parameters: client_socket (socket.socket): client socket wrapped with SSL/TLS for secure communication cert_file (str): file path to SSL certificate for secure connection. key_file (str): file path to SSL key corresponding certificate. buffer_size (int optional): size buffer receive data client. Defaults to 1024 bytes. Returns str: SHA256 hash of requested file. If requested file exist returns 'File not found'. exception error message returned. Requirements: ssl - os - hashlib function assumes client requests file sending path function handle opening or closing client_socket Error handling basic might need expanded specific use cases. Example: Server setup >>> server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 443)) >>> server_socket.listen(5) >>> cert_file = \"path/to/certificate.crt\" key_file = \"path/to/private.key\" Accept client connection >>> client_socket, addr = server_socket.accept() Use task_func function handle client request >>> file_hash = task_func(client_socket, cert_file, key_file) >>> print(\"Sent file hash:\", file_hash) >>> server_socket.close()\n    \"\"\"\n    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n    context.load_cert_chain(cert_file, key_file)\n    secure_socket = context.wrap_socket(client_socket, server_side=True)\n\n    try:\n        file_path = secure_socket.recv(buffer_size).decode()\n        if os.path.exists(file_path):\n            with open(file_path, 'rb') as file:\n                file_data = file.read()\n                file_hash = hashlib.sha256(file_data).hexdigest()\n                secure_socket.send(file_hash.encode())\n        else:\n            secure_socket.send('File not found'.encode())\n    except Exception as e:\n        secure_socket.send(str(e).encode())\n\n    secure_socket.close()\n\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run non-blocking echo server appends current time to received data sends back to client handling exceptional conditions for each socket. Parameters: server_address (str): address server listen Default 'localhost'. server_port (int): port listen Default is 12345 buffer_size (int): buffer size for data reception Default 1024 bytes. run_duration (int): duration seconds server run Default is 5 seconds. Returns: str: status message server's operation run duration. Requirements socket - select - queue - datetime Example print(task_func()) 'Server started on localhost:12345 Ran for 5 seconds'\n    \"\"\"\n    # Create a TCP/IP socket\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setblocking(0)\n\n    # Bind the socket to the port\n    server_address = (server_address, server_port)\n    server_socket.bind(server_address)\n\n    # Listen for incoming connections\n    server_socket.listen(5)\n\n    # Sockets from which we expect to read\n    inputs = [server_socket]\n\n    # Sockets to which we expect to write\n    outputs = []\n\n    # Outgoing message queues (socket:Queue)\n    message_queues = {}\n\n    start_time = datetime.now()\n    while datetime.now() - start_time < timedelta(seconds=run_duration):\n        # Wait for at least one of the sockets to be ready for processing\n        readable, writable, exceptional = select.select(inputs, outputs, inputs)\n\n        for s in readable:\n            if s is server_socket:\n                # A new connection request has come in, so accept it\n                connection, client_address = s.accept()\n                connection.setblocking(0)\n                inputs.append(connection)\n                message_queues[connection] = queue.Queue()\n            else:\n                data = s.recv(buffer_size)\n                if data:\n                    # A readable client socket has data sent to us\n                    message_queues[s].put(data)\n                    if s not in outputs:\n                        outputs.append(s)\n                else:\n                    # Interpret empty result as closed connection\n                    if s in outputs:\n                        outputs.remove(s)\n                    inputs.remove(s)\n                    s.close()\n                    del message_queues[s]\n\n        for s in writable:\n            try:\n                next_msg = message_queues[s].get_nowait()\n            except queue.Empty:\n                outputs.remove(s)\n            else:\n                s.send(next_msg + str.encode(str(datetime.now())))\n\n        for s in exceptional:\n            inputs.remove("}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive message from client socket send as email via SMTP server Parameters client_socket (socket.socket): message received. Returns - None Requires working internet connection access SMTP server function asks for sender's email recipient's email sender password for authentication. Requirements smtplib email.message getpass Example import socket server_socket = socket.socket(socket.AF_INET socket.SOCK_STREAM) >>> server_socket.bind((SERVER_ADDRESS, SERVER_PORT)) >>> server_socket.listen(5) >>> client_socket addr = server_socket.accept() >>> task_func(client_socket)\n    \"\"\"\n    data = client_socket.recv(BUFFER_SIZE).decode()\n    print(f\"Received data: {data}\")\n\n    email_data = data.split(\";\")\n    sender_email = email_data[0]\n    receiver_email = email_data[1]\n    password = getpass.getpass(\"Type your password and hit enter:\")\n    subject = email_data[2]\n    body = email_data[3]\n\n    msg = EmailMessage()\n    msg.set_content(body)\n    msg[\"Subject\"] = subject\n    msg[\"From\"] = sender_email\n    msg[\"To\"] = receiver_email\n\n    context = ssl.create_default_context()\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls(context=context)\n        server.login(sender_email, password)\n        server.send_message(msg)\n\n    print(\"Email sent successfully\")\n    client_socket.close()\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes CSV file containing text data generates histogram of ten common words. function reads CSV file expected single column text data splits text into words creates histogram of frequency top ten common words excluding predefined stopwords. resulting histogram can be displayed on screen or saved to file. CSV file should have single column with header 'Text' Each row under column should contain text string. If CSV file header first column assumed text data. Parameters: - file_path (str): path to input CSV file. save_path (str optional): path where histogram plot saved. If not provided plot displayed on screen. Returns: matplotlib.axes.Axes: Axes object of plot if save_path not provided. Useful for further customization or display in notebooks - None: If save_path provided plot saved to specified path function returns None. Raises - FileNotFoundError: If specified file_path not exist raises FileNotFoundError message file path not found Exception: For other errors during function execution error printed to console None returned. Requirements: - pandas - scikit-learn - matplotlib Notes function uses pandas for data manipulation sklearn's CountVectorizer for text vectorization matplotlib for plotting. predefined list of stopwords used to filter out common but insignificant words from histogram. Examples: >>> ax = task_func('text_data.csv print(ax)(0.125,0.11;0.775x0.77) result task_func(_data.csv 'output_plot print(result) None\n    \"\"\"\n    try:\n        # Read CSV file\n        df = pd.read_csv(file_path)\n\n        # Check if 'Text' is the header\n        if 'Text' in df.columns:\n            df.rename(columns={'Text': df.columns[0]}, inplace=True)\n\n        # Initialize CountVectorizer\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n\n        # Fit and transform data\n        X = vectorizer.fit_transform(df[df.columns[0]])\n\n        # Get word counts\n        word_counts = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())\n        word_counts = word_counts.sum(axis=0)\n\n        # Get top 10 words\n        top_10_words = word_counts.nlargest(10)\n\n        # Plot histogram\n        ax = top_10_words.plot(kind='bar', figsize=(10, 5))\n        ax.set_title('Top 10 Common Words')\n        ax.set_xlabel('Words')\n        ax.set_ylabel('Frequency')\n\n        # Save or display plot\n        if save_path:\n            plt.savefig(save_path)\n            return None\n        else:\n            return ax\n\n    except FileNotFoundError:\n        print(f\"File not found: {file_path}\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create DataFrame with combinations animals foods in 'animal:food' format. Parameters animals (list str optional): animal names If not provided defaults to list common animals including 'Dog 'Cat 'Elephant 'Tiger 'Lion 'Zebra 'Giraffe 'Bear 'Monkey 'Kangaroo' foods (list str optional): list food names If not provided defaults to common foods including 'Meat' 'Fish' 'Grass' 'Fruits 'Insects 'Seeds 'Leaves'. Returns df (pandas.DataFrame): each row represents unique animal 'animals' list each column represents food item 'foods' list Each cell contains string in format 'animal:food'. Handling Special Cases If 'animals' 'foods' lists empty or not provided function returns empty DataFrame If list empty not function uses predefined list for missing parameter. Requirements pandas - numpy - itertools Example animal_food_pairs = task_func(['Dog' 'Cat']'Meat' 'Fish']) >>> print(animal_food_pairs) Meat Fish 0 Dog:Meat Dog:Fish 1 Cat:Meat Cat:Fish function generates combinations of 'animals' 'foods' using itertools.product resulting pairs shuffled randomly to ensure variety in DataFrame layout\n    \"\"\"\n    if animals is None:\n        animals = ['Dog', 'Cat', 'Elephant', 'Tiger', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey', 'Kangaroo']\n    if foods is None:\n        foods = ['Meat', 'Fish', 'Grass', 'Fruits', 'Insects', 'Seeds', 'Leaves']\n\n    pairs = list(itertools.product(animals, foods))\n    np.random.shuffle(pairs)\n\n    df = pd.DataFrame(pairs, columns=foods)\n    df['Animal'] = df.index.map(lambda x: animals[x % len(animals)])\n    df.set_index('Animal', inplace=True)\n    df.columns.name = None\n\n    return df.reset_index()[['Animal'] + foods].rename(columns=lambda x: '{}:{}'.format(x, 'Meat' if x == 'Meat' else 'Fish' if x == 'Fish' else 'Grass' if x == 'Grass' else 'Fruits' if x == 'Fruits' else 'Insects' if x == 'Insects' else 'Seeds' if x == 'Seeds' else 'Leaves'))\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference in seconds between timestamps in list after converting to specified timezone. Parameters: time_strings (list str): list of timestamp strings in format 'dd/mm/yy HH:MM:SS.fff'. timezone (str): timezone to timestamp strings should be converted. valid timezone string e. 'America/New_York'. Returns: float: mean (average) time difference in seconds between each timestamps. If less than two timestamps function returns 0.0. Requirements: - datetime - pytz - numpy Notes function converts each timestamp to specified timezone calculates absolute time difference in seconds between each timestamps. If list less than two timestamps function returns 0.0 no pairs to compare. If no time differences single timestamp after timezone conversion), also returns 0.0. function uses numpy's mean function to calculate average time difference. Example: >>> time_strings = ['30/03/09 16:31:32.123', 16:32:33.123' 16:33:34.123'] >>> mean_diff = task_func(time_strings, 'America/New_York') >>> print(mean_diff) 61.0\n    \"\"\"\n    # Convert timezone\n    time_list = []\n    for time_string in time_strings:\n        dt = datetime.strptime(time_string, '%d/%m/%y %H:%M:%S.%f')\n        dt = dt.replace(tzinfo=pytz.UTC)\n        time_list.append(dt.astimezone(pytz.timezone(timezone)))\n\n    # Calculate time differences\n    diff_list = []\n    for i in range(1, len(time_list)):\n        diff = time_list[i] - time_list[i-1]\n        diff_list.append(diff.total_seconds())\n\n    # Calculate average\n    if len(diff_list) > 0:\n        return np.mean(diff_list)\n    else:\n        return 0.0\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes frequency words text lowercasing removing punctuation splitting words plots top 10 common words. Parameters text (str): input text analyzed Returns list list tuples containing 10 common words counts Axes: matplotlib Axes object bar chart. Requirements re - collections.Counter matplotlib.pyplot Example common_words, ax = task_func( sample text contains words 'text' 'sample' 'words'.\") >>> print(common_words) [('sample', 3), ('text', 3) ('this', 2) ('words', 2) ('is', 1) ('a', 1)'contains', 1)'like', 1) ('and', 1)]\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    counter = Counter(words)\n    common_words = counter.most_common(10)\n\n    words, counts = zip(*common_words)\n    figure, ax = plt.subplots()\n    ax.bar(words, counts)\n    ax.set_title('Top 10 common words')\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Counts')\n    plt.show()\n\n    return common_words, ax\n\n\ntext = \"This is a sample text. This text is a sample. This is just a text.\"\ncommon_words, ax = task_func(text)"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts URL from string retrieves title web page. If no valid URL found or not result in successful page fetch returns error message. Parameters: myString (str): string from to extract URL. Returns str: title webpage extracted URL if successful otherwise error messages \"No valid URL found string.\" \"Unable to fetch content URL: {url}\" \"No title tag found in webpage.\" Requirements: - re - urllib.parse.urlparse - bs4.BeautifulSoup - requests Example: >>> task_func('Check https://www.google.com') 'Google' >>> task_func('No URL here') 'No valid URL found in string.' task_func('Check broken link: https://www.thisdoesnotexist12345.com') 'Unable to fetch content URL:.com'\n    \"\"\"\n    # Extract URL from string\n    url = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[\\\\\\\\/]|[\\\\\\\\?=%])+', myString)\n\n    if not url:\n        return 'No valid URL found in string.'\n\n    url = url[0]\n\n    # Parse URL\n    parsed_url = urlparse(url)\n\n    # Fetch content\n    try:\n        r = requests.get(url)\n    except requests.exceptions.RequestException as e:\n        return f'Unable to fetch content URL: {parsed_url.netloc}.'\n\n    # Check status code\n    if r.status_code != 200:\n        return f'Unable to fetch content URL: {parsed_url.netloc}.'\n\n    # Parse content\n    soup = BeautifulSoup(r.text, 'html.parser')\n\n    # Find title tag\n    title = soup.find('title')\n\n    if not title:\n        return 'No title tag found in webpage.'\n\n    return title.string\n\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses JSON string find URL associated with specified key downloads file saves with timestamped filename filename format '{unknown_key}_{timestamp}.txt' 'timestamp' formatted as '%Y%m%d%H%M%S%f' date time down to microseconds file saved in specified directory or current working directory default. Parameters: json_data (str): JSON data string contain key linked to URL unknown_key (str): key extract URL from JSON data. save_dir (str optional): directory save downloaded file If not specified file saved in current working directory. Defaults to None. Returns str: absolute path of downloaded file reflecting saved. Requirements: json - requests - os - datetime.datetime Example json_str = '{\"unknown\": \"https://example.com/file.txt\"}' file_path = task_func(json_str, 'unknown') >>> print(f\"Downloaded file saved at: {file_path}\")\n    \"\"\"\n    # Parse JSON data\n    data = json.loads(json_data)\n\n    # Extract URL\n    url = data[unknown_key]\n\n    # Download file\n    response = requests.get(url)\n\n    # Create filename\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f'{unknown_key}_{timestamp}.txt'\n\n    # Save file\n    if save_dir is None:\n        save_dir = os.getcwd()\n    file_path = os.path.join(save_dir, filename)\n    with open(file_path, 'w') as file:\n        file.write(response.text)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from URL local file saves to specified file in JSON format Parameters url (str): URL webpage or local file path 'file://' output_path (str): path extracted phone numbers saved JSON format Returns list list strings each representing found phone number Requirements bs4 requests - re - json Example task_func('file:///path/local/file.txt', 'output.json') ['+1 (234) 567 8901', '+44 1234 567890']\n    \"\"\"\n    if url.startswith('file://'):\n        with open(url[7:], 'r') as file:\n            data = file.read()\n    else:\n        response = requests.get(url)\n        data = response.text\n\n    soup = bs4.BeautifulSoup(data, 'html.parser')\n\n    phone_numbers = re.findall(r'\\+\\d{1,3}\\s?\\(\\d{1,4}\\)\\s?\\d{1,4}-\\d{1,4}-\\d{1,4}', soup.text)\n\n    with open(output_path, 'w') as file:\n        json.dump(phone_numbers, file)\n\n    return phone_numbers\n"}
