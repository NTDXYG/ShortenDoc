{"task_id": "BigCodeBench/13", "solution": "import subprocess\nimport ftplib\nimport os\n\ndef task_func(ftp_server='ftp.dlptest.com', ftp_user='dlpuser', ftp_password='rNrKYTX9g7z3RgJRmxWuGHbeu', ftp_dir='/ftp/test'):\n    \"\"\"\n    Download all files from specific directory on an FTP server using wget in subprocess. Args: ftp_server (str): FTP server address. Default is 'ftp.dlptest.com'. ftp_user (str): FTP server username. Default is 'dlpuser'. ftp_password (str): FTP server password. Default is 'rNrKYTX9g7z3RgJRmxWuGHbeu'. ftp_dir (str): directory path on the FTP server from which files need to be downloaded. Default is '/ftp/test'. Returns: List[str]: list of filenames attempted to be downloaded from the FTP server. Raises: Exception: - If failure in connecting to the FTP server. Outputs the message \"Failed to connect to FTP server {ftp_server}: {str(e)}\" - If failure in logging into the FTP server. Outputs message \"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\" - If failure in changing to specified directory. Outputs message \"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\" Requirements: - subprocess - ftplib - os Example: >>> task_func() ['file1.txt', 'file2.jpg', ...]\n    \"\"\"\n    try:\n        ftp = ftplib.FTP(ftp_server)\n        ftp.login(user=ftp_user, passwd=ftp_password)\n        ftp.cwd(ftp_dir)\n\n        filenames = []\n        for file in ftp.nlst():\n            with open(file, 'wb') as f:\n                ftp.retrbinary('RETR ' + file, f.write)\n            filenames.append(file)\n\n        ftp.quit()\n        return filenames\n\n    except Exception as e:\n        print(f\"Failed to connect to FTP server {ftp_server}: {str(e)}\")\n        print(f\"Failed to log into FTP server {ftp_server} with user {ftp_user}: {str(e)}\")\n        print(f\"Failed to change to directory {ftp_dir} on server {ftp_server}: {str(e)}\")\n        raise\n"}
{"task_id": "BigCodeBench/15", "solution": "import subprocess\nimport csv\nimport os\n\ndef task_func(commands_file_path, output_dir_path):\n    \"\"\"\n    Execute list of shell commands read from a CSV file save outputs in separate files. Each command's output is written to a unique file in specified output directory. If a command fails, error message along with exit code is appended to respective output file. Parameters: - commands_file_path (str): Path to CSV file containing shell commands in first column. file should not have headers. - output_dir_path (str): Path where outputs of commands will be saved. If directory does not exist, it will be created. Requirements: - subprocess - csv - os Raises: - FileNotFoundError: If commands_file_path does not exist. Returns: - list of str: list of paths to output files created in output directory, each named as 'command_X_output.txt', where X is the command index. If command execution fails, output file will contain a descriptive error message and exit code. Example: >>> task_func(\"commands.csv\", \"/path/to/output_directory\") ['/path/to/output_directory/command_1_output.txt', '/path/to/output_directory/command_2_output.txt', ...]\n    \"\"\"\n    if not os.path.exists(commands_file_path):\n        raise FileNotFoundError(f\"{commands_file_path} does not exist.\")\n\n    if not os.path.exists(output_dir_path):\n        os.makedirs(output_dir_path)\n\n    output_files_paths = []\n\n    with open(commands_file_path, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        for i, command in enumerate(csv_reader, start=1):\n            command = command[0]\n            output_file_path = os.path.join(output_dir_path, f\"command_{i}_output.txt\")\n            output_files_paths.append(output_file_path)\n\n            with open(output_file_path, 'w') as output_file:\n                try:\n                    process = subprocess.run(command, shell=True, stderr=subprocess.PIPE, text=True, timeout=10)\n                    output_file.write(process.stdout)\n                    if process.stderr:\n                        output_file.write(f\"\\nError: {process.stderr}\")\n                except subprocess.TimeoutExpired:\n                    output_file.write(f\"\\nCommand {command} timed out.\")\n                except Exception as e:\n                    output_file.write(f\"\\nError: {str(e)}\")\n\n    return output_files_paths\n"}
{"task_id": "BigCodeBench/17", "solution": "import subprocess\nimport psutil\nimport time\n\ndef task_func(process_name: str) -> str:\n    \"\"\"\n    Check if particular process is running based on its name. If not running, start it using process name as a command. If running, terminate process and restart by executing process name as a command. Parameters: - process_name (str): name of process to check and manage. should be executable as a command. Returns: - str: A message indicating action taken: - \"Process not found. Starting <process_name>.\" - \"Process found. Restarting <process_name>.\" Requirements: - subprocess - psutil - time Example: >>> task_func('notepad') \"Process not found. Starting notepad.\" OR >>> task_func('notepad') \"Process found. Restarting notepad.\"\n    \"\"\"\n    # Check if process is running\n    try:\n        p = psutil.Process(name=process_name)\n        if p.is_running():\n            p.terminate()\n            time.sleep(1)\n            return \"Process found. Restarting \" + process_name\n        else:\n            # Process not running, start it\n            subprocess.Popen([process_name])\n            return \"Process not found. Starting \" + process_name\n    except psutil.NoSuchProcess:\n        # Process not found, start it\n        subprocess.Popen([process_name])\n        return \"Process not found. Starting \" + process_name\n"}
{"task_id": "BigCodeBench/19", "solution": "import os\nimport glob\nimport zipfile\n\ndef task_func(directory):\n    \"\"\"\n    Zips all files (not including subdirectories) located in specified directory and returns path to created zip file. Parameters: directory (str): directory path containing files to be zipped. Returns: str: path to generated zip file. Returns None if directory does not contain any files. Raises: FileNotFoundError: if specified directory does not exist Requirements: - os - glob - zipfile Notes: - zip name is always 'files.zip' Example: >>> path = task_func('/path/to/files') >>> isinstance(path, str) True\n    \"\"\"\n    # Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    # Get all files in directory\n    files = glob.glob(os.path.join(directory, '*'))\n\n    # If directory is empty, return None\n    if not files:\n        return None\n\n    # Create zip file\n    zip_path = os.path.join(directory, 'files.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in files:\n            # Skip directories\n            if os.path.isfile(file):\n                zipf.write(file)\n\n    return zip_path\n"}
{"task_id": "BigCodeBench/34", "solution": "import re\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Create word cloud from text after removing URLs plot. Parameters: - text (str): text to analyze. Returns: WordCloud object: generated word cloud. Raises ValueError(\"No words available to generate word cloud after removing URLs.\"): no words available to generate word cloud after removing URLs. Requirements: - re - wordcloud.WordCloud - matplotlib.pyplot Example: >>> print(task_func('Visit https://www.python.org for more info. Python is great. love Python.').words_ {'Python': 1.0, 'Visit': 0.5, 'info': 0.5, 'great': 0.5, 'love': 0.5} >>> print(task_func('Check link: http://www.example.com. Machine learning fascinating.').words {'Check': 1.0, 'link': 1.0, 'Machine': 1.0, 'learning': 1.0, 'fascinating': 1.0}\n    \"\"\"\n\n    # Remove URLs\n    text = re.sub(r'http\\S+|www\\S+|https\\S+', '', text, flags=re.MULTILINE)\n\n    # Remove punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Remove numbers\n    text = re.sub(r'\\d+', '', text)\n\n    # Remove whitespace\n    text = re.sub(r'\\s+', ' ', text)\n\n    # Split into words\n    words = text.split()\n\n    if not words:\n        raise ValueError(\"No words available to generate word cloud after removing URLs.\")\n\n    # Generate word cloud\n    wordcloud = WordCloud(width=800, height=400, random_state=42, max_font_size=110).generate(text)\n\n    plt.figure(figsize=(10, 7))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis('off')\n    plt.show()\n\n    return wordcloud\n"}
{"task_id": "BigCodeBench/37", "solution": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, target_column):\n    \"\"\"\n    Train random forest classifier to perform classification of rows in dataframe with respect to the column of interest plot bar plot of feature importance of each column in the dataframe. - xlabel of bar plot should be 'Feature Importance Score', ylabel 'Features' and title 'Visualizing Important Features'. Sort feature importances in descending order. Use feature importances on x-axis and feature names on the y-axis. Parameters: - df (pandas.DataFrame) : Dataframe containing the data to classify. - target_column (str) : Name of target column. Returns: - sklearn.model.RandomForestClassifier : random forest classifier trained on input data. - matplotlib.axes.Axes: Axes object of plotted data. Requirements: - pandas - sklearn.ensemble - seaborn - matplotlib.pyplot Example: >>> import pandas as pd >>> data = pd.DataFrame({\"X\" : [-1, 3, 5, -4, 7, 2], \"label\": [0, 1, 1, 0, 1, 1]}) >>> model, ax = task_func(data, \"label\") >>> print(data.head(2)) X label 0 -1 0 1 3 1 >>> print(model) RandomForestClassifier(random_state=42)\n    \"\"\"\n    # Split data into features and target\n    X = df.drop(target_column, axis=1)\n    y = df[target_column]\n\n    # Train Random Forest Classifier\n    clf = RandomForestClassifier(random_state=42)\n    clf.fit(X, y)\n\n    # Get feature importances\n    importances = clf.feature_importances_\n\n    # Create a dataframe with feature importances\n    df_importances = pd.DataFrame({'Feature': X.columns, 'Importance': importances})\n\n    # Sort dataframe by importance\n    df_importances = df_importances.sort_values('Importance', ascending=False)\n\n    # Plot feature importances\n    plt.figure(figsize=(10, 5))\n    sns.barplot(x='Importance', y='Feature', data=df_importances)\n    plt.xlabel('Feature Importance Score')\n    plt.ylabel('Features')\n    plt.title('Visualizing Important Features')\n    plt.show()\n\n    return clf\n"}
{"task_id": "BigCodeBench/82", "solution": "from flask import Flask, render_template, redirect, url_for\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Length\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=25)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=8, max=80)])\n    submit = SubmitField('Log In')\n\nlogin_manager = LoginManager()\n\ndef task_func(secret_key, template_folder):\n    \"\"\"\n    Creates Flask application with configured user authentication using Flask-Login. defines routes for login, logout, protected page. user authentication managed with simple User class and login form using Flask-WTF. application uses dynamic configuration for security and template rendering. Parameters: secret_key (str): secret key for application to use for session management. template_folder (str): path to directory containing Flask templates. Requirements: - flask - flask_login - flask_wtf - wtforms - wtforms.validators - werkzeug.security Returns: Flask: Flask application instance configured for user authentication. Examples: >>> app = task_func('mysecretkey', 'templates') >>> 'login' in [rule.endpoint for rule in app.url_map.iter_rules()] True >>> app.config['SECRET_KEY'] == 'mysecretkey' True\n    \"\"\"\n    app = Flask(__name__, template_folder=template_folder)\n    app.config['SECRET_KEY'] = secret_key\n    login_manager.init_app(app)\n\n    class User(UserMixin):\n        def __init__(self, username, password):\n            self.id = username\n            self.password = password\n\n        def is_authenticated(self):\n            return True\n\n        def is_active(self):\n            return True\n\n        def is_anonymous(self):\n            return False\n\n    @login_manager.user_loader\n    def load_user(user_id):\n        if user_id == 'test':\n            return User(user_id, 'password')\n        return None\n\n    @app.route('/')\n    def home():\n        return render_template('home.html')\n\n    @app.route('/login', methods=['GET', 'POST'])\n    def login():\n        form = LoginForm()\n        if form.validate_on_submit():\n            user = load_user(form.username.data)\n            if user:\n                if check_password_hash(user.password, form.password.data):\n                    login_user(user)\n                    return redirect(url_for('dashboard'))\n\n        return render_template('login.html', form=form)\n\n    @app.route('/logout')\n    @login_required\n    def logout():\n        logout_user()\n        return redirect(url_for('home'))\n\n    @app.route('/dashboard')\n    @login_required\n    def dashboard():\n        return render_template('dashboard.html')\n\n    return app\n"}
{"task_id": "BigCodeBench/89", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom sklearn.preprocessing import StandardScaler\n\ndef task_func(data, column, outlier_z_score):\n    \"\"\"\n    Identifies and removes outliers from a specified column of dataset based on the Z-score. standardizes column, calculates Z-scores, removes data points where Z-score exceeds threshold. function visualizes data before and after outlier removal. Parameters: data (ndarray): dataset. column (int): index of the column to analyze for outliers. outlier_z_score (float): Z-score threshold to identify outliers. Returns: tuple: A tuple containing original data, data without outliers, and indices of outliers. Requirements: - numpy - matplotlib.pyplot - scipy.stats - sklearn.preprocessing.StandardScaler Notes: function plots two scatter plots: 'Data with Outliers' shows original data including outliers, while 'Data without Outliers' displays data after removing outliers based on provided Z-score threshold. visual comparison helps illustrate impact of outlier removal on dataset. Examples: >>> data = np.array([[14, 25], [1, 22], [7, 8], [100, 200]]) >>> column = 1 >>> len(task_func(data, column, 3.0)) 3 >>> isinstance(task_func(data, column, 3.0)[0], np.ndarray) True >>> isinstance(task_func(data, column, 3.0)[1], np.ndarray) True >>> isinstance(task_func(data, column, 3.0)[2], tuple) True\n    \"\"\"\n    # Standardize the column\n    scaler = StandardScaler()\n    data[:, column] = scaler.fit_transform(data[:, column].reshape(-1, 1))\n\n    # Calculate Z-scores\n    z_scores = np.abs(stats.zscore(data[:, column]))\n\n    # Identify outliers\n    outliers = np.where(z_scores > outlier_z_score)[0]\n\n    # Remove outliers\n    data = np.delete(data, outliers, axis=0)\n\n    # Visualize data\n    plt.figure(figsize=(10, 5))\n    plt.subplot(1, 2, 1)\n    plt.scatter(data[:, 0], data[:, 1])\n    plt.title('Data with Outliers')\n    plt.subplot(1, 2, 2)\n    plt.scatter(data[:, 0], data[:, 1], color='r')\n    plt.title('Data without Outliers')\n    plt.show()\n\n    return data, data[~outliers, :], outliers\n"}
{"task_id": "BigCodeBench/92", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom matplotlib.collections import PathCollection\n\ndef task_func(data, n_clusters=3):\n    \"\"\"\n    Perform K-means clustering on dataset generate scatter plot visualizing clusters centroids. Parameters: data (pd.DataFrame): dataset to be clustered, rows are samples columns are features. n_clusters (int): number of clusters to form. Must be greater than 1. Defaults to 3. Returns: tuple: - np.ndarray: array of cluster labels assigned to each sample. - plt.Axes: Axes object with scatter plot showing clusters and centroids. Raises: ValueError: If 'data' not a pd.DataFrame. ValueError: If 'n_clusters' not an integer greater than 1. Requirements: - numpy - pandas - matplotlib - sklearn Example: >>> np.random.seed(42) >>> data = pd.DataFrame(np.random.rand(100, 2), columns=['Feature1', 'Feature2']) >>> _, ax = task_func(data, 3) >>> ax.get_title() 'K-Means Clustering'\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    labels = kmeans.labels_\n\n    fig, ax = plt.subplots()\n\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n\n    centroids = kmeans.cluster_centers_\n\n    paths = PathCollection([plt.plot([centroids[i, 0], centroids[i, 1]], 'k-', lw=2)[0] for i in range(n_clusters)],\n                           [annotate(f'Cluster {i}', (centroids[i, 0], centroids[i, 1]), textcoords=\"offset points\", xytext=(0,10), ha='center')[0] for i in range(n_clusters)],\n                           autopct='%1.1f',\n                           arrowprops=dict(arrowstyle='->', color='black'))\n\n    ax.add_collection(paths)\n\n    plt.title('K-Means Clustering')\n\n    return labels, ax\n"}
{"task_id": "BigCodeBench/93", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\n\ndef task_func(data, n_components=2):\n    \"\"\"\n    Perform Principal Component Analysis (PCA) on dataset record result. generates scatter plot of transformed data. Parameters: data (DataFrame): dataset. n_components (int): number of principal components to calculate. Default is 2. Returns: DataFrame: transformed data with principal components. Axes: matplotlib Axes object containing the scatter plot. Raises: ValueError: If n_components not a positive integer. Requirements: - numpy - pandas - matplotlib.pyplot - sklearn.decomposition Example: >>> data = pd.DataFrame([[14, 25], [1, 22], [7, 8]], columns=['Column1', 'Column2']) >>> transformed_data, plot = task_func(data)\n    \"\"\"\n    # Check if n_components is a positive integer\n    if not isinstance(n_components, int) or n_components <= 0:\n        raise ValueError(\"n_components must be a positive integer\")\n\n    # Perform PCA\n    pca = PCA(n_components=n_components)\n    pca.fit(data)\n    transformed_data = pca.transform(data)\n\n    # Generate scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(transformed_data[:, 0], transformed_data[:, 1])\n    ax.set_xlabel('First Principal Component')\n    ax.set_ylabel('Second Principal Component')\n    ax.set_title('Scatter plot of transformed data')\n    plt.show()\n\n    return transformed_data, ax\n"}
{"task_id": "BigCodeBench/99", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nfrom sklearn.datasets import load_iris\n\ndef task_func():\n    \"\"\"\n    Draws seaborn pair plot of iris dataset using Arial font. function sets global font to Arial for better readability and visual appeal. generates pair plot from iris dataset, each subplot represents relationship between two features, colored by species. plot includes title 'Iris Dataset Pair Plot' and labels for each feature on axes. Parameters: None Returns: plt.Figure: A matplotlib Figure object containing seaborn pair plot of iris dataset. plot has 'Iris Dataset Pair Plot' as title. Each subplot's axes are labeled with the corresponding feature names, such as 'sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', and 'petal width (cm)'. Requirements: - matplotlib.pyplot - pandas - seaborn - sklearn.datasets Example: >>> fig = task_func() >>> type(fig) <class 'matplotlib.figure.Figure'>\n    \"\"\"\n    # Load iris dataset\n    iris = load_iris()\n    df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n    df['species'] = iris.target\n\n    # Set global font\n    sns.set(font='Arial')\n\n    # Generate pair plot\n    g = sns.pairplot(df, hue='species', markers=[\"o\", \"s\", \"D\"])\n\n    # Set title\n    g.fig.suptitle('Iris Dataset Pair Plot', fontsize=16, y=1.03)\n\n    # Set labels\n    for ax in g.axes.flatten():\n        ax.set_xlabel(ax.xaxis.label.set_fontsize(12))\n        ax.set_ylabel(ax.yaxis.label.set_fontsize(12))\n\n    return g\n"}
{"task_id": "BigCodeBench/100", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport random\nfrom datetime import datetime\n\ndef task_func(seed=42):\n    \"\"\"\n    Generates plot of random time series data for past 30 days with reproducibility controlled by optional seed parameter. plot is styled with Arial font for better readability. Parameters: seed (int, optional): Seed for random number generator to ensure reproducibility. Defaults to 42. Returns: matplotlib.axes.Axes: Axes object containing line plot of time series data. plot will have 'Date' as x-axis label, 'Value' as y-axis label, and 'Random Time Series Data' as the title. Raises: ValueError: If issue generating data or plot. Requirements: - matplotlib.pyplot - pandas - random - datetime Example: >>> ax = task_func() >>> ax.get_title() 'Random Time Series Data' >>> ax.get_xlabel() 'Date' >>> ax.get_ylabel() 'Value'\n    \"\"\"\n    random.seed(seed)\n    dates = [(datetime.now() - datetime.timedelta(days=i)).date() for i in range(30)]\n    values = [random.randint(1, 100) for _ in range(30)]\n    df = pd.DataFrame({'Date': dates, 'Value': values})\n    df.set_index('Date', inplace=True)\n\n    plt.style.use('Arial')\n    plt.figure(figsize=(10, 5))\n    plt.plot(df.index, df['Value'])\n    plt.title('Random Time Series Data')\n    plt.xlabel('Date')\n    plt.ylabel('Value')\n\n    return plt\n"}
{"task_id": "BigCodeBench/101", "solution": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\ndef task_func(data_url=\"http://lib.stat.cmu.edu/datasets/boston\", seed=42):\n    \"\"\"\n    Draw correlation heatmap of Boston Housing dataset using Seaborn, option to save it to specified file. Parameters: seed (int, optional): Random seed for reproducibility. Defaults to 42. font should be in family of sans-serif and Arial. Returns: matplotlib.axes.Axes: Axes object containing heatmap plot. Raises: ValueError: If error occurs in generating or saving plot. Requirements: - matplotlib - os - pandas - seaborn - numpy Example: >>> ax = task_func() >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    np.random.seed(seed)\n\n    try:\n        boston = pd.read_csv(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    except Exception as e:\n        print(f\"Error in reading data: {e}\")\n        return\n\n    boston.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"]\n\n    corr = boston.corr()\n\n    fig, ax = plt.subplots(figsize=(10, 8))\n\n    sns.heatmap(corr, annot=True, fmt=\".2f\", cmap='coolwarm', center=0, ax=ax)\n\n    plt.title(\"Correlation Heatmap of Boston Housing Dataset\")\n\n    return ax\n"}
{"task_id": "BigCodeBench/108", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\ndef task_func(df, freq='D', decomposition_model='multiplicative'):\n    \"\"\"\n    Decomposes time series in 'value' column of DataFrame into trend, seasonality residuals Parameters: df (DataFrame): DataFrame with columns 'group', 'date' 'value'. freq (str, optional): Frequency of time series data. Defaults to 'D' (daily). decomposition_model (str, optional): Type of decomposition model. Options are 'additive' or 'multiplicative'. Defaults to 'multiplicative'. Returns: tuple: tuple containing decomposition result (DecomposeResult object) matplotlib Axes object. Raises: ValueError: If 'df' not a DataFrame, lacks required columns or contains invalid data types. ValueError: If 'freq' not valid frequency string. ValueError: If 'decomposition_model' not 'additive' or 'multiplicative'. Requirements: - pandas - matplotlib.pyplot - statsmodels.tsa.seasonal Example: >>> df = pd.DataFrame({ ... \"group\": [\"A\"] * 14, ... \"date\": pd.to_datetime([\"2022-01-01\", \"2022-01-02\", \"2022-01-03\", \"2022-01-04\", \"2022-01-05\", \"2022-01-06\", \"2022-01-07\", \"2022-01-08\", \"2022-01-09\", \"2022-01-12\", \"2022-01-13\", \"2022-01-14\"]), ... \"value\": [10, 12, 13, 15, 17, 16, 14, 13, 12, 15, 17, 18, 20, 19], ... }) >>> result, ax = task_func(df, freq='D', decomposition_model='multiplicative') >>> plt.show() # display plot with title 'Time Series Decomposition' y-axis labeled 'Value'\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not all(col in df.columns for col in ['group', 'date', 'value']):\n        raise ValueError(\"'df' must contain columns 'group', 'date', and 'value'\")\n    if not isinstance(freq, str):\n        raise ValueError(\"'freq' must be a string\")\n    if decomposition_model not in ['additive', 'multiplicative']:\n        raise ValueError(\"'decomposition_model' must be either 'additive' or 'multiplicative'\")\n\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index(['group', 'date'], inplace=True)\n\n    result = seasonal_decompose(df['value'], model=decomposition_model)\n\n    fig = result.plot()\n    plt.title('Time Series Decomposition')\n    plt.ylabel('Value')\n\n    return fig\n"}
{"task_id": "BigCodeBench/120", "solution": "import pandas as pd\nfrom datetime import datetime, timedelta\nfrom random import randint, seed as random_seed\n\ndef task_func(start_date=datetime(2020, 1, 1), end_date=datetime(2020, 12, 31), seed=42):\n    \"\"\"\n    Generate pandas Series of random dates within specified date range, including both start_date and end_date, with optional seed for reproducibility. function creates series of dates randomly selected between specified start and end dates, inclusive allows specifying seed for random number generator to ensure reproducible results, suitable for simulations or tests requiring consistency. Parameters: - start_date (datetime.datetime, optional): start of date range. Defaults to January 1, 2020. - end_date (datetime.datetime, optional): end of date range. Defaults to December 31, 2020. - seed (int, optional): Seed for random number generator to ensure reproducibility. Default is 42. Returns: - pandas.Series: A Series object containing random dates within specified range, with each date being a datetime.datetime object. series length matches number of days in specified range. Raises: - ValueError: If 'start_date' or 'end_date' is not a datetime.datetime instance, or if 'start_date' is later than 'end_date'. Note: start_date and end_date are inclusive, meaning both dates are considered as potential values in generated series. default seed value is 42, ensuring results are reproducible by default unless different seed is specified by user. Requirements: - pandas - datetime - random Example: >>> dates = task_func(seed=123) >>> print(dates.head()) # Prints first 5 dates from series 0 2020-01-27 1 2020-05-17 2 2020-02-14 3 2020-07-27 4 2020-05-16 dtype: datetime64[ns]\n    \"\"\"\n    # Set seed for reproducibility\n    random_seed(seed)\n\n    # Generate a list of random dates within the specified range\n    dates = [start_date + timedelta(days=randint(0, (end_date - start_date).days)) for _ in range(end_date - start_date + 1)]\n\n    # Convert list to pandas Series\n    series = pd.Series(dates)\n\n    return series\n"}
{"task_id": "BigCodeBench/123", "solution": "import pandas as pd\nimport os\nimport glob\n\ndef task_func(my_list, file_dir='./data_files/', file_ext='.csv'):\n    \"\"\"\n    Modify a list by adding element '12', concatenate number of CSV files from directory into single DataFrame. number of files concatenated determined by sum of numbers in the list. Parameters: my_list (list): input list, modified in place. file_dir (str, optional): directory to search for CSV files. Defaults to './data_files/'. file_ext (str, optional): file extension of files to concatenate. Defaults to '.csv'. Returns: DataFrame: A pandas DataFrame concatenating data from selected CSV files. Raises: TypeError: If 'my_list' is not a list. FileNotFoundError: If no files found in specified directory. Requirements: - pandas - os - glob Example: >>> create_dummy_csv() >>> my_list = [1, 2, 3] >>> df = task_func(my_list) >>> print(df.head()) A B 0 0 3 1 1 4 2 2 5 3 0 3 4 1 4 >>> tearDown_dummy()\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' should be a list\")\n\n    csv_files = glob.glob(file_dir + '*' + file_ext)\n    if not csv_files:\n        raise FileNotFoundError(\"No files found in specified directory\")\n\n    df = pd.DataFrame()\n    for i in my_list:\n        for file in csv_files:\n            temp_df = pd.read_csv(file)\n            temp_df['A'] = i\n            df = pd.concat([df, temp_df])\n\n    return df\n"}
{"task_id": "BigCodeBench/124", "solution": "from random import randint,seed as random_seed\nimport time\nimport matplotlib.pyplot as plt\n\ndef task_func(my_list, size=100, seed=100):\n    \"\"\"\n    Enhances 'my_list' by appending number 12, generates a list of random integers based on sum of elements in 'my_list', limited by 'size'. measures time taken for process and plots histogram of generated random numbers. size of random numbers list is determined by sum of numbers in 'my_list', with upper limit set by 'size'. random integers are within the range 1 to 100, inclusive. Parameters: - my_list (list): input list containing numeric elements. - size (int): Maximum size limit for generated list of random numbers. Default is 100. - seed (int): Seed value for random number generator for reproducibility. Default is 100. Returns: - tuple: tuple containing time taken to generate list (in seconds, as a float) and matplotlib Axes object for histogram. histogram's x-axis is labeled 'Number', representing the range of random integers, and y-axis labeled 'Frequency', representing frequency of each integer in the generated list. Raises: - TypeError: If 'my_list' is not a list. - ValueError: If 'my_list' contains elements that are not numeric (int or float). histogram plots distribution of random numbers generated, with number range (1-100) on x-axis and count (frequency) of each number on the y-axis. Requirements: - random - time - matplotlib.pyplot Example: >>> my_list = [2, 3, 5] >>> time_taken, ax = task_func(my_list) >>> print(type(time_taken)) # Example output: <class 'float'> <class 'float'> >>> ax.get_title() # Returns 'Histogram of Random Numbers' 'Histogram of Random Numbers'\n    \"\"\"\n    if not isinstance(my_list, list):\n        raise TypeError(\"'my_list' must be a list\")\n    for i in my_list:\n        if not isinstance(i, (int, float)):\n            raise ValueError(\"'my_list' must contain only numeric elements (int or float)\")\n\n    random_seed(seed)\n    start_time = time()\n\n    my_list.append(12)\n    new_list = [randint(1, 100) for _ in range(size)]\n    for i in my_list:\n        new_list.append(i)\n\n    end_time = time()\n    time_taken = end_time - start_time\n\n    plt.hist(new_list, bins=100, range=(1, 101))\n    plt.title('Histogram of Random Numbers')\n    plt.xlabel('Number')\n    plt.ylabel('Frequency')\n    plt.show()\n\n    return time_taken, plt\n"}
{"task_id": "BigCodeBench/129", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\ndef task_func(url='http://example.com'):\n    \"\"\"\n    Scrape first table from web page extract data into a Pandas DataFrame. This function scrapes first table found on specified web page URL and extracts data into a DataFrame, each row in the DataFrame corresponds to a table row (<tr>) from the web page, each column represents data contained within table data elements (<td>) of that row. DataFrame's columns are named after table's header row (<th> elements), if present. If table lacks headers, DataFrame's columns remain unnamed. Parameters: - url (str): URL of webpage to scrape. Defaults to 'http://example.com'. Returns: - pd.DataFrame: A DataFrame containing the scraped table data, with rows corresponding to table rows and columns named after table headers, if available. Raises: - ConnectionError: If issue connecting to URL. - requests.HTTPError: If HTTP request to URL fails. - ValueError: If no table data is found on page or if page content cannot be parsed. Note: Assumes the webpage contains at least one table and attempts to parse first table encountered. Requirements: - pandas - requests - bs4 Example: >>> df = task_func('https://en.wikipedia.org/wiki/List_of_countries_by_GDP_(nominal)') >>> print(df) 0 0 1 Largest economies in the world by GDP (nominal...\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        print (\"HTTP Error:\",errh)\n    except requests.exceptions.ConnectionError as errc:\n        print (\"Error Connecting:\",errc)\n    except requests.exceptions.Timeout as errt:\n        print (\"Timeout Error:\",errt)\n    except requests.exceptions.RequestException as err:\n        print (\"Something went wrong\",err)\n\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table')\n\n    if table is None:\n        raise ValueError('No table data found on page or if page content cannot be parsed.')\n\n    df = pd.read_html(str(table))[0]\n\n    return df\n"}
{"task_id": "BigCodeBench/139", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(df):\n    \"\"\"\n    Draw histograms of numeric columns in DataFrame return plots. Each histogram represents distribution of values in one numeric column, with column name as plot title, 'Value' as x-axis label, 'Frequency' as y-axis label. Parameters: - df (DataFrame): DataFrame containing data. Returns: - list: list of Matplotlib Axes objects, each representing a histogram for a numeric column. Raises: - ValueError: If input is not a non-empty DataFrame or if no numeric columns in the DataFrame. Requirements: - pandas - numpy - matplotlib.pyplot Example: >>> df = pd.DataFrame({'A': np.random.normal(0, 1, 100), 'B': np.random.exponential(1, 100)}) >>> axes = task_func(df) >>> for ax in axes: ... plt.show()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame\")\n\n    if df.empty:\n        raise ValueError(\"Input DataFrame should not be empty\")\n\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n\n    if not numeric_cols.size:\n        raise ValueError(\"DataFrame should contain at least one numeric column\")\n\n    fig, axes = plt.subplots(nrows=len(numeric_cols), figsize=(10, 10))\n\n    for i, col in enumerate(numeric_cols):\n        df[col].hist(ax=axes[i])\n        axes[i].set_title(col)\n        axes[i].set_xlabel('Value')\n        axes[i].set_ylabel('Frequency')\n\n    return axes\n"}
{"task_id": "BigCodeBench/147", "solution": "import socket\nfrom ipaddress import IPv4Network\nfrom threading import Thread\n\ndef task_func(ip_range, port):\n    \"\"\"\n    Scans specified IP address range checks if specified port open on each IP. function returns dictionary with IP addresses as keys boolean indicating port's status (True if open, False otherwise). Parameters: ip_range (str): IP address range to scan, in CIDR notation. port (int): port number to check on each IP in range. Returns: dict: dictionary mapping IP addresses to their port status (True if open). Examples: >>> result = task_func('192.168.0.0/24', 80) >>> isinstance(result, dict) True >>> all(isinstance(key, str) and isinstance(value, bool) for key, value in result.items()) True Requirements: - socket - ipaddress.IPv4Network - threading.Thread\n    \"\"\"\n    # Create a socket object\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Create a dictionary to store the results\n    result = {}\n\n    # Iterate over the IP addresses in the range\n    for ip in IPv4Network(ip_range):\n        # Try to connect to the port\n        try:\n            sock.connect((str(ip), port))\n            # If the connection is successful, the port is open\n            result[str(ip)] = True\n        except socket.error:\n            # If the connection is unsuccessful, the port is not open\n            result[str(ip)] = False\n\n        # Close the connection\n        sock.close()\n\n    return result\n"}
{"task_id": "BigCodeBench/161", "solution": "import re\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(log_file):\n    \"\"\"\n    Extracts logging information such as message type, timestamp, message itself from a log file and stores data in CSV format. This utility is ideal for converting plain text logs into more s tructured format can be easily analyzed. The log is format of 'TYPE: [TIMESTAMP (YYYY-MM-DD HH:MM:SS)] - MESSAGE'. Parameters: log_file (str): file path to log file needs to be parsed. Returns: str: file path to newly created CSV file contains structured log data. Requirements: - re - pandas - datetime Raises: ValueError: If timestamp in any log entry is invalid or if no valid log entries are found. Example: >>> output_path = task_func('server.log') >>> print(output_path) log_data.csv\n    \"\"\"\n    # Regular expression for parsing log entry\n    regex = r'^(\\w+):\\s*\\[(\\w+,?\\s?\\d{2}\\s?\\d{2}:\\d{2}:\\d{2})\\] - (.*)$'\n\n    # List to store log entries\n    log_entries = []\n\n    # Open log file\n    with open(log_file, 'r') as f:\n        for line in f:\n            # Match log entry\n            match = re.match(regex, line)\n            if match:\n                # Extract log entry\n                message_type = match.group(1)\n                timestamp = match.group(2)\n                message = match.group(3)\n\n                # Convert timestamp to datetime object\n                timestamp = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')\n\n                # Append log entry to list\n                log_entries.append({'message_type': message_type, 'timestamp': timestamp, 'message': message})\n\n    # Convert list to DataFrame\n    df = pd.DataFrame(log_entries)\n\n    # Rename columns\n    df = df.rename(columns={'message_type': 'type', 'timestamp': 'timestamp', 'message': 'message'})\n\n    # Convert timestamp to string\n    df['timestamp'] = df['timestamp'].dt.strftime('%Y-%m-%d %H:%M:%S')\n\n    # Save DataFrame to CSV\n    output_path = log_file.rstrip('.log') + '.csv'\n    df.to_csv(output_path, index=False)\n\n    return output_path\n"}
{"task_id": "BigCodeBench/162", "solution": "import re\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(text, rwidth=0.8):\n    \"\"\"\n    Analyzes visualizes the distribution of word lengths in text. function generates a histogram subplot, facilitates understanding of how word lengths vary within provided text. Parameters: text (str): text string from which word lengths will be calculated. rwidth (float, optional): Specifies relative bar width in the histogram. Defaults to 0.8. Returns: matplotlib.axes.Axes: An Axes object containing the histogram of word lengths. Requirements: - re - matplotlib - numpy Note: If no words in the input text, or all words filtered out, histogram will be empty as no bins created. Example: >>> import matplotlib >>> ax = task_func('Hello world, this is a test sentence.') >>> isinstance(ax, matplotlib.axes.Axes) True\n    \"\"\"\n    # Extract words from text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Check if words exist\n    if not words:\n        return None\n\n    # Calculate word lengths\n    lengths = [len(word) for word in words]\n\n    # Generate histogram\n    fig, ax = plt.subplots()\n    ax.hist(lengths, bins=np.arange(min(lengths), max(lengths) + 1, rwidth), edgecolor='black')\n    ax.set_title('Word Lengths')\n    ax.set_xlabel('Length')\n    ax.set_ylabel('Frequency')\n\n    return ax\n"}
{"task_id": "BigCodeBench/177", "solution": "import re\nimport nltk\nfrom string import punctuation\n\n\ndef task_func(df):\n    \"\"\"\n    Extracts articles titles contain specific case-insensitive keywords (\"like\" or \"what\") from DataFrame analyzes frequency of each word in content articles excluding punctuation. Parameters: df (DataFrame): DataFrame containing columns 'Title' and 'Content' with article data. Returns: dict: dictionary with keys as words values as corresponding frequency, excluding punctuation marks. Requirements: - re - nltk - string Raises: ValueError: If DataFrame empty or not contain necessary columns 'Title' and 'Content'. Example: >>> import pandas as pd >>> data = {'Title': ['What is happening', 'Nothing special'], 'Content': ['Like what you see?', 'Just normal text.']} >>> df = pd.DataFrame(data) >>> task_func(df) {'Like': 1, 'what': 1, 'you': 1, 'see': 1}\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    if 'Title' not in df.columns or 'Content' not in df.columns:\n        raise ValueError(\"DataFrame does not contain necessary columns 'Title' and 'Content'\")\n\n    result = {}\n\n    for index, row in df.iterrows():\n        title = row['Title'].lower()\n        content = re.sub('['+punctuation+']', '', row['Content']).lower()\n\n        for word in nltk.word_tokenize(title):\n            if 'like' in word or 'what' in word:\n                result[word] = result.get(word, 0) + 1\n\n        for word in nltk.word_tokenize(content):\n            if 'like' in word or 'what' in word:\n                result[word] = result.get(word, 0) + 1\n\n    return result\n"}
{"task_id": "BigCodeBench/184", "solution": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n# Constants\nSTOPWORDS = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself',\n             'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself',\n             'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these',\n             'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do',\n             'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while',\n             'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before',\n             'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again',\n             'further', 'then', 'once']\n\n\ndef task_func(dataframe, text_column):\n    \"\"\"\n    Prepares transforms text data from specified column in DataFrame by removing stopwords, numbers punctuation, applying vectorization process to convert text into numeric format suitable for analysis. Parameters: dataframe (DataFrame): A pandas DataFrame containing text data. text_column (str): name of column from which text be processed. Returns: DataFrame: Returns DataFrame with each word (after preprocessing) as column count as rows. Requirements: - pandas - re - sklearn Example: >>> df = pd.DataFrame({'text': ['This is a test.', 'Python is cool!', 'nltk and sklearn are useful for text analysis']}) >>> result = task_func(df, 'text') >>> print(result.to_string(index=False)) analysis cool nltk python sklearn test text useful 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 1 0 1 1\n    \"\"\"\n    # Remove numbers and punctuation\n    dataframe[text_column] = dataframe[text_column].str.replace('[^\\w\\s]', '')\n\n    # Remove stopwords\n    dataframe[text_column] = dataframe[text_column].apply(lambda x: ' '.join([word for word in x.split() if word not in STOPWORDS]))\n\n    # Vectorize text\n    vectorizer = CountVectorizer()\n    dataframe['vectorized'] = vectorizer.fit_transform(dataframe[text_column])\n\n    return dataframe\n"}
{"task_id": "BigCodeBench/187", "solution": "import numpy as np\nimport geopandas as gpd\nfrom shapely.geometry import Point\n\ndef task_func(dic={'Lon': (-180, 180), 'Lat': (-90, 90)}, cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney']):\n    \"\"\"\n    Create GeoPandas DataFrame for list cities with randomly generated coordinates based specified ranges. Parameters: dic (dict): Dictionary with 'Lon' 'Lat' keys each tuple (min, max) for coordinate range Default: {'Lon': (-180, 180), 'Lat': (-90, 90)} cities (list): List of city names. Default: ['New York', 'London' 'Beijing' 'Tokyo' 'Sydney'] Returns: GeoDataFrame: GeoPandas DataFrame containing 'City' 'Coordinates' (Point objects). Raises ValueError: If 'Lon' or 'Lat' keys missing in dictionary, or if values not tuples. Requirements: - numpy - geopandas - shapely.geometry Example: >>> dic = {'Lon': (-180, 180), 'Lat': (-90, 90)} >>> gdf = task_func(dic)\n    \"\"\"\n    if not isinstance(dic, dict) or not all(isinstance(v, tuple) and len(v) == 2 for v in dic.values()):\n        raise ValueError(\"'Lon' and 'Lat' must be a dictionary with 2-tuple values.\")\n\n    if not isinstance(cities, list) or not all(isinstance(city, str) for city in cities):\n        raise ValueError(\"Cities must be a list of string values.\")\n\n    geo_df = gpd.GeoDataFrame(geometry=[Point(np.random.uniform(dic['Lon'][0], dic['Lon'][1]),\n                                           np.random.uniform(dic['Lat'][0], dic['Lat'][1]))\n                                    for _ in cities])\n\n    geo_df.crs = {'init': 'epsg:4326'}\n    geo_df.index = range(1, len(geo_df) + 1)\n    geo_df.index.name = 'City_ID'\n    geo_df.columns = ['City', 'Coordinates']\n\n    return geo_df\n"}
{"task_id": "BigCodeBench/199", "solution": "import pandas as pd\nimport pytz\nfrom datetime import datetime\nfrom random import randint, seed as set_seed\n\ndef task_func(\n    utc_datetime,\n    cities=['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'],\n    weather_conditions=['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'],\n    timezones={\n        'New York': 'America/New_York',\n        'London': 'Europe/London',\n        'Beijing': 'Asia/Shanghai',\n        'Tokyo': 'Asia/Tokyo',\n        'Sydney': 'Australia/Sydney'\n    },\n    seed=42\n):\n    \"\"\"\n    Generate weather report for specified cities at given UTC datetime. Parameters: - utc_datetime (datetime): UTC datetime for weather report to be generated, with tzinfo set to UTC. - cities (list of str): Cities for weather report generated. Default: ['New York', 'London', 'Beijing', 'Tokyo', 'Sydney'] - weather_conditions (list of str): Possible weather conditions to choose from for report. Default: ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy'] - timezones (dict): mapping of city names to respective timezones. Default provided for default cities. - seed (int): seed value for random number generation to ensure reproducibility. Default: 42 Returns: - pandas.DataFrame: DataFrame containing weather report. Columns include: - 'City': name of city. - 'Local Time': local time of weather report for city, formatted as 'YYYY-MM-DD HH:MM:SS ZZZ' (ZZZ is timezone abbreviation). - 'Weather Condition': weather condition in city at given local time. Raises: - ValueError: If utc_datetime not a datetime object or if other parameters not in expected format. Requirements: - pandas - pytz - datetime - random Example: >>> utc_time = datetime(2023, 1, 1, 12, 0, 0, tzinfo=pytz.UTC) >>> report = task_func(utc_time) >>> print(report) City Local Time Weather Condition 0 New York 2023-01-01 07:00:00 EST Sunny 1 London 2023-01-01 12:00:00 GMT Sunny 2 Beijing 2023-01-01 20:00:00 CST Rainy 3 Tokyo 2023-01-01 21:00:00 JST Cloudy 4 Sydney 2023-01-01 23:00:00 AEDT Cloudy\n    \"\"\"\n    # Set seed for reproducibility\n    set_seed(seed)\n\n    # Check if input is valid\n    if not isinstance(utc_datetime, datetime):\n        raise ValueError(\"utc_datetime must be a datetime object\")\n\n    # Create a dataframe to hold the results\n    df = pd.DataFrame(columns=['City', 'Local Time', 'Weather Condition'])\n\n    # For each city, generate a random weather condition and add to the dataframe\n    for city in cities:\n        if city not in timezones:\n            raise ValueError(f\"City {city} not found in timezones\")\n\n        # Get the timezone for the city\n        timezone = pytz.timezone(timezones[city])\n\n        # Convert the utc_datetime to the city's timezone\n        city_datetime = utc_datetime.astimezone(timezone)\n\n        # Get a random weather condition\n        weather_condition = weather_conditions[randint(0, 4)]\n\n        # Add the city, local time, and weather condition to the dataframe\n        df = df.append({'City': city, 'Local Time': city_datetime, 'Weather Condition': weather_condition}, ignore_index=True)\n\n    return df\n"}
{"task_id": "BigCodeBench/208", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(elements, seed=0):\n    \"\"\"\n    Generate draw random sequence of \"elements\" number of steps. steps are either -1 or 1, sequence plotted as random walk. Returns descriptive statistics of random walk and plot of random walk. descriptive statistics include count, mean, standard deviation, minimum, 5th percentile, 25th percentile, median, 75th percentile, 95th percentile maximum. Parameters: elements (int): number of steps in the random walk. seed (int): seed for random number generator. Default is 0. Returns: dict: dictionary containing the descriptive statistics of random walk. matplotlib.axes.Axes: Axes object with plotted random walk. Requirements: - numpy - matplotlib.pyplot - pandas Raises: ValueError: If elements is not a positive integer. Example: >>> stats, ax = task_func(1000) >>> print(stats) {'count': 1000.0, 'mean': 18.18, 'std': 9.516415405086212, 'min': -5.0, '5%': 1.0, '25%': 11.0, '50%': 20.0, '75%': 26.0, '95%': 31.0, 'max': 36.0}\n    \"\"\"\n    if not isinstance(elements, int) or elements <= 0:\n        raise ValueError(\"elements must be a positive integer\")\n\n    np.random.seed(seed)\n    random_walk = np.random.randint(low=-1, high=2, size=elements)\n\n    stats = {\n        'count': random_walk.size,\n        'mean': random_walk.mean(),\n        'std': random_walk.std(),\n        'min': random_walk.min(),\n        '25%': np.percentile(random_walk, 25),\n        '50%': np.percentile(random_walk, 50),\n        '75%': np.percentile(random_walk, 75),\n        '95%': np.percentile(random_walk, 95),\n        'max': random_walk.max()\n    }\n\n    fig, ax = plt.subplots()\n    ax.plot(random_walk)\n    ax.set_title('Random Walk')\n    ax.set_xlabel('Steps')\n    ax.set_ylabel('Value')\n\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/211", "solution": "import requests\nimport os\nimport zipfile\n\ndef task_func(url, destination_directory, headers=None):\n    \"\"\"\n    Download and keep a zip file from URL, extract its contents to specified directory, return list of extracted files. Parameters: url (str): URL of zip file to download. destination_directory (str): directory where contents of zip file will be extracted. headers (dict, optional): Custom headers to included in the request. Defaults to {'accept': 'application/octet-stream'}. Returns: list: list of filenames of extracted files. Requirements: - requests - os - zipfile Example: >>> extracted_files = task_func(\"https://example.com/data.zip\", \"/path/to/destination\") >>> print(extracted_files) ['file1.txt', 'file2.csv']\n    \"\"\"\n    # Download the zip file\n    response = requests.get(url, headers=headers)\n    response.raise_for_status()\n\n    # Save the zip file to the destination directory\n    with open(os.path.join(destination_directory, os.path.basename(url)), 'wb') as f:\n        f.write(response.content)\n\n    # Extract the zip file contents\n    with zipfile.ZipFile(os.path.join(destination_directory, os.path.basename(url)), 'r') as zip_ref:\n        zip_ref.extractall(destination_directory)\n\n    # Return the list of extracted files\n    return [file for file in os.listdir(destination_directory) if file.endswith('.txt') or file.endswith('.csv')]\n"}
{"task_id": "BigCodeBench/214", "solution": "import random\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\ndef task_func(seed=42, image_size=(100, 100, 3), range_low=0, range_high=255):\n    \"\"\"\n    Generate random RGB image view it. Parameters: - seed (int, optional): Random seed for reproducibility. Default 42. image_size (tuple, optional): Size of generated image (height, width, channels). Default is (100, 100, 3). range_low (int, optional): Lower bound of random range. Default is 0. range_high (int optional): Upper bound of random range. Default is 255. Returns: - ax (matplotlib.axes.Axes): Axes object of plot. - image (numpy.ndarray): numpy array of generated image. Raises: - ValueError: If range_low not less than range_high. Requirements: - random - numpy - opencv - matplotlib.pyplot Example: >>> ax, image = task_func()\n    \"\"\"\n    np.random.seed(seed)\n    image = np.random.randint(range_low, range_high, image_size)\n    image = image.astype(np.uint8)\n    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)\n    plt.figure(figsize=(10, 10))\n    ax = plt.subplot(111)\n    plt.imshow(image)\n    plt.show()\n    return ax, image\n"}
{"task_id": "BigCodeBench/227", "solution": "import numpy as np\nimport os\nimport soundfile as sf\nimport librosa\nimport matplotlib.pyplot as plt\n\ndef task_func(L, M, N, audio_file):\n    \"\"\"\n    Creates an MxN matrix from a list L, normalizes it based on sound pressure level (SPL) of a specified audio file, generates a spectrogram from matrix. Parameters: L (list): list of numbers to form matrix. M (int): number of rows in the matrix. N (int): number of columns in the matrix. audio_file (str): path to audio file for SPL calculation. Returns: numpy.ndarray: normalized MxN matrix. matplotlib.figure.Figure: figure object for generated spectrogram. Raises: FileNotFoundError: If specified audio file does not exist. Notes: spectrogram is generated based on the amplitude of normalized matrix, with the sound pressure level (SPL) calculated from the audio file. SPL is calculated using the formula: SPL = 20 * log10(sqrt(mean(data^2))) where 'data' is audio data read from file. spectrogram displayed with logarithmic scale for frequency and linear scale for time, with SPL used to adjust amplitude displayed in the spectrogram. Requirements: - numpy - os - soundfile - librosa - matplotlib Examples: >>> matrix = task_func([i for i in range(100)], 10, 10, 'audio.wav') # Requires 'audio.wav' to exist >>> matrix.shape (10, 10) >>> isinstance(matrix, np.ndarray) True\n    \"\"\"\n    # Check if audio file exists\n    if not os.path.exists(audio_file):\n        raise FileNotFoundError(\"Specified audio file does not exist.\")\n\n    # Load audio file\n    data, sample_rate = sf.read(audio_file)\n\n    # Create matrix\n    matrix = np.array(L).reshape(M, N)\n\n    # Normalize matrix\n    matrix = matrix / np.max(matrix)\n\n    # Calculate SPL\n    SPL = 20 * np.log10(np.sqrt(np.mean(data ** 2)))\n\n    # Generate spectrogram\n    plt.figure(figsize=(10, 5))\n    plt.pcolormesh(librosa.frames_to_time(np.arange(len(data)), sr=sample_rate), librosa.time_to_frames(np.arange(len(data)), sr=sample_rate), matrix, shading='gouraud')\n    plt.ylabel('Time (s)')\n    plt.xlabel('Frequency (Hz)')\n    plt.title(f'Spectrogram with SPL = {SPL:.2f}')\n    plt.colorbar(label='Amplitude')\n    plt.grid(True)\n    plt.show()\n\n    return matrix\n"}
{"task_id": "BigCodeBench/239", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n\n\ndef task_func(original):\n    \"\"\"\n    Given list of tuples extract numeric values compute basic statistics generate histogram with overlaid probability density function (PDF). Parameters: original (list of tuples): Input list each tuple's second element is numeric value. Returns: np.array: numpy array of extracted numeric values. dict: Basic statistics for array including mean, standard deviation, minimum maximum. Axes: matplotlib Axes object showing histogram with overlaid PDF. histogram plotted with density set to True alpha as 0.6 bins set to 'auto' for automatic bin selection. Requirements: - numpy - matplotlib.pyplot - scipy.stats Example: >>> original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> arr, stats, ax = task_func(original) >>> print(arr) [1 2 3 4] >>> print(stats) {'mean': 2.5, 'std': 1.118033988749895, 'min': 1, 'max': 4}\n    \"\"\"\n    # Extract numeric values\n    arr = [i[1] for i in original]\n\n    # Compute basic statistics\n    stats = {'mean': np.mean(arr), 'std': np.std(arr), 'min': np.min(arr), 'max': np.max(arr)}\n\n    # Generate histogram with overlaid PDF\n    fig, ax = plt.subplots()\n    ax.hist(arr, density=True, alpha=0.6, bins='auto')\n\n    # Generate PDF\n    x = np.linspace(stats['min'], stats['max'], 100)\n    prob = stats['mean'] * stats['std'] * np.exp(-(x - stats['mean'])**2 / (2 * stats['std']**2))\n    ax.plot(x, prob, label='PDF')\n\n    ax.set_xlabel('Numeric Values')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram with Overlaid PDF')\n    ax.legend()\n\n    return np.array(arr), stats, ax\n\n"}
{"task_id": "BigCodeBench/241", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\n\n\ndef task_func(original):\n    \"\"\"\n    Create numeric array from \"original\" list normalize array draw original and normalized arrays. function will plot original and normalized arrays using matplotlib. Parameters: original (list): original list with tuples to unzipped into numpy array. Returns: np.array: numpy array for original data. np.array: Normalized array. matplotlib.axes.Axes: Axes object with plotted data. Requirements: - numpy - matplotlib.pyplot - sklearn.preprocessing Example: >>> original = [('a', 1), ('b', 2), ('c', 3), ('d', 4)] >>> arr, norm_arr, ax = task_func(original) >>> print(arr) [1 2 3 4] >>> print(norm_arr) [0.18257419 0.36514837 0.54772256 0.73029674]\n    \"\"\"\n    # convert list to numpy array\n    original_arr = np.array(original)\n\n    # normalize array\n    norm_arr = preprocessing.normalize(original_arr, norm='l2')\n\n    # plot original and normalized arrays\n    fig, ax = plt.subplots()\n    ax.plot(original_arr, label='Original')\n    ax.plot(norm_arr, label='Normalized')\n    ax.legend()\n\n    return original_arr, norm_arr, ax\n\n"}
{"task_id": "BigCodeBench/267", "solution": "import numpy as np\nfrom scipy import fftpack\nimport matplotlib.pyplot as plt\n\n\ndef task_func(data, sample_rate=8000):\n    \"\"\"\n    Given a dictionary \"data\", this function performs following operations: 1. Adds new key \"a\" with value 1 to dictionary. 2. Generates a signal based on values in \"data\". 3. Runs a Fast Fourier Transform (FFT) on signal. 4. Plots and returns FFT of signal. Parameters: data (dict): input data as a dictionary. Returns: tuple: A tuple containing: - ndarray: FFT of signal. - Axes: plot of FFT. Requirements: - numpy - scipy.fftpack - matplotlib Example: >>> data = {'key1': 1, 'key2': 2, 'key3': 3} >>> fft, ax = task_func(data)\n    \"\"\"\n    data['a'] = 1\n    x = np.array(list(data.values()))\n    y = np.fft.fft(x)\n    fig, ax = plt.subplots()\n    ax.plot(np.abs(y))\n    plt.show()\n    return y, ax\n\n"}
{"task_id": "BigCodeBench/273", "solution": "import cgi\nimport http.server\nimport json\n\nSUCCESS_RESPONSE = {\n    'status': 'success',\n    'message': 'Data received successfully.'\n}\n\nERROR_RESPONSE = {\n    'status': 'error',\n    'message': 'Invalid data received.'\n}\n\ndef task_func():\n    \"\"\"\n    Creates an HTTP POST request handler for processing incoming data. data expected to be in JSON format with a key 'data'. handler responds with a 200 success message if data is valid, or error message otherwise. type of response can be retrieved as 'content-type' and length of response as 'content-length'. two types of error messages: 'Content-Type header is not application/json' and 'No data key in request'. Returns: function: A class handles HTTP POST requests and validates incoming data. Requirements: - cgi - http.server - json Notes: If 'content-type' header is not 'application/json', indicating client sent request with unsupported format. This condition sends a 400 Bad Request response to the client with the message \"Content-Type header is not application/json\". If JSON object not contain 'data' key, leading to 400 Bad Request response with the message \"No data key in request\". If request body does not contain valid JSON, resulting in 400 Bad Request response with the message \"Invalid JSON\". Examples: >>> handler = task_func() >>> isinstance(handler, type) True >>> issubclass(handler, http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            data = json.loads(post_data)\n\n            if 'data' not in data:\n                self.send_response(400)\n                self.end_headers()\n                self.wfile.write(json.dumps(ERROR_RESPONSE).encode())\n                return\n\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(json.dumps(SUCCESS_RESPONSE).encode())\n\n    return Handler\n"}
{"task_id": "BigCodeBench/274", "solution": "import cgi\nimport http.server\nimport smtplib\nfrom email.mime.text import MIMEText\nimport json\n\ndef task_func(smtp_server, smtp_port, smtp_username, smtp_password):\n    \"\"\"\n    Creates an HTTP POST request handler processes incoming email data and sends an email. email data must be a JSON object with 'subject', 'message', and 'to' keys. type of response can be retrieved as 'content-type' and length of response as 'content-length'. Parameters: smtp_server (str): SMTP server address. smtp_port (int): SMTP server port. smtp_username (str): SMTP username. smtp_password (str): SMTP password. Returns: function: class handles HTTP POST requests and sends emails based on the provided data. Requirements: - cgi - http.server - smtplib - email.mime.text.MIMEText - json Raises: JSONDecodeError: If email data not valid JSON. results in 400 Bad Request response. ValueError: If 'subject', 'message', or 'to' keys missing from the email data, leading to 400 Bad Request response. smtplib.SMTPAuthenticationError: If authentication issue with SMTP server. communicated to the client with a 535 Authentication Failed response. Examples: >>> handler = task_func('smtp.example.com', 587, 'user@example.com', 'password') >>> isinstance(handler, type) True >>> issubclass(handler, http.server.BaseHTTPRequestHandler) True\n    \"\"\"\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            try:\n                data = json.loads(post_data)\n            except json.JSONDecodeError:\n                self.send_response(400)\n                self.end_headers()\n                return\n            if 'subject' not in data or 'message' not in data or 'to' not in data:\n                self.send_response(400)\n                self.end_headers()\n                return\n            try:\n                msg = MIMEText(data['message'])\n                msg['Subject'] = data['subject']\n                msg['To'] = data['to']\n                server = smtplib.SMTP(smtp_server, smtp_port)\n                server.starttls()\n                server.login(smtp_username, smtp_password)\n                text = msg.as_string()\n                server.sendmail(smtp_username, data['to'], text)\n                server.quit()\n                self.send_response(200)\n                self.end_headers()\n            except smtplib.SMTPAuthenticationError:\n                self.send_response(535)\n                self.end_headers()\n                return\n\n    return Handler\n"}
{"task_id": "BigCodeBench/287", "solution": "from collections import Counter\nimport os\nimport json\n\ndef task_func(filename, directory):\n    \"\"\"\n    Count number of words in .txt files within specified directory, export counts to JSON file, return total number of words. Parameters: filename (str): name of output JSON file. directory (str): directory where .txt files are located. Returns: int: total number of words in .txt files Requirements: - collections.Counter - os - json Example: >>> with open(\"./testdir/single_file.txt\",\"r\") as f: print f.read() hello world hello >>> count = task_func('single_file.txt', './testdir/') >>> print(count) 3\n    \"\"\"\n    # Initialize counter\n    counter = Counter()\n\n    # Iterate over all .txt files in directory\n    for file in os.listdir(directory):\n        if file.endswith(\".txt\"):\n            # Open and read file\n            with open(os.path.join(directory, file), 'r') as f:\n                # Count words in file\n                counter += Counter(f.read().split())\n\n    # Export counts to JSON file\n    with open(os.path.join(directory, filename), 'w') as f:\n        json.dump(dict(counter), f)\n\n    # Return total number of words\n    return sum(counter.values())\n"}
{"task_id": "BigCodeBench/302", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Constants\nCOLUMNS = ['Date', 'Value']\n\ndef task_func(df, plot=False):\n    \"\"\"\n    Processes pandas DataFrame by splitting lists in 'Value' column into separate columns, calculates Pearson correlation coefficient between these columns, optionally visualizes correlation matrix using heatmap. Parameters: df (DataFrame): A pandas DataFrame with two columns: 'Date' and 'Value'. 'Date' column contains dates, 'Value' column contains lists of numbers. plot (bool): Optional; if True, displays heatmap of correlation matrix returns it. Returns: DataFrame: A pandas DataFrame containing correlation coefficients among lists in the 'Value' column. Axes (optional): A matplotlib Axes object containing heatmap plot, returned if 'plot' is True. Note: - function use \"Correlation Heatmap\" as title of heatmap plot Raises: - If DataFrame input is empty or invalid 'Value', function will raise ValueError. Requirements: - pandas - seaborn - matplotlib.pyplot Example: >>> df = pd.DataFrame([['2021-01-01', [8, 10, 12]], ['2021-01-02', [7, 9, 11]]], columns=['Date', 'Value']) >>> corr_df = task_func(df) >>> print(corr_df[0][0]) 1.0\n    \"\"\"\n    # Check if DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if 'Value' column is valid\n    if 'Value' not in df.columns:\n        raise ValueError(\"'Value' column not found in DataFrame\")\n\n    # Split 'Value' column into separate columns\n    df[COLUMNS] = df['Value'].apply(pd.Series)\n    df.drop('Value', axis=1, inplace=True)\n\n    # Calculate Pearson correlation coefficient\n    corr_df = df.corr()\n\n    # Optionally plot correlation matrix\n    if plot:\n        plt.figure(figsize=(10, 8))\n        sns.heatmap(corr_df, annot=True, cmap='coolwarm')\n        plt.title('Correlation Heatmap')\n        return plt.gca()\n\n    return corr_df\n"}
{"task_id": "BigCodeBench/308", "solution": "import pandas as pd\nfrom statistics import mean\nimport random\n\n# Constants for generating the report data\nFIELDS = ['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History']\nSTUDENTS = ['Student_' + str(i) for i in range(1, 101)]\n\ndef task_func(additional_fields = []):\n    \"\"\"\n    Create report on students' grades in different subjects calculate average grade for each student and subject. Parameters: additional_fields (list of string, optional): additional list of student subjects not duplicate with constants (default = []) Returns: DataFrame: A pandas DataFrame with columns being subjects, each student's grades, and their average grades. DataFrame also includes average grade per subject. Note: - This function does not take input parameters generates report based on predefined constants and additional fields from input (if any). - function use 'Average' as row name for average grade for each subject. - function use 'Average Grade' as column name for average grade for each student - Grade of each subject is between 0 to 100. Requirements: - pandas - random - statistics.mean Example: >>> random.seed(0) >>> report = task_func(['Computer Science', 'Geography']) >>> print(report.columns) Index(['Physics', 'Math', 'Chemistry', 'Biology', 'English', 'History', 'Computer Science', 'Geography', 'Average Grade'], dtype='object')\n    \"\"\"\n    # Generate random grades\n    grades = [[random.randint(0, 100) for _ in range(len(FIELDS) + len(additional_fields))] for _ in range(len(STUDENTS))]\n\n    # Create DataFrame\n    df = pd.DataFrame(grades, columns=STUDENTS + FIELDS + ['Average'])\n\n    # Calculate average grades\n    for subject in FIELDS + additional_fields:\n        df['Average Grade'] = df[subject].mean()\n\n    return df\n"}
{"task_id": "BigCodeBench/310", "solution": "import os\nimport csv\nimport random\nfrom statistics import mean\n\n# Constants\nCOLUMNS = ['Name', 'Age', 'Height', 'Weight']\nPEOPLE_COUNT = 100\n\ndef task_func(filename):\n    \"\"\"\n    Generates CSV file containing simulated data for 100 people, including name, age, height, weight. also calculates and appends average age, height, and weight at the end of file. Parameters: filename (str): name of CSV file to be created. Returns: str: path of created CSV file. Requirements: - os - csv - random - statistics.mean Example: >>> random.seed(0) >>> filename = 'people_report.csv' >>> path = task_func(filename) >>> os.path.exists(path) True\n    \"\"\"\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(COLUMNS)\n        for _ in range(PEOPLE_COUNT):\n            name = f'Person_{random.randint(1, 100)}'\n            age = random.randint(18, 60)\n            height = round(random.uniform(150, 200), 2)\n            weight = round(random.uniform(50, 200), 2)\n            writer.writerow([name, age, height, weight])\n\n    with open(filename, 'a', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow([f'Average Age' if c == 'Age' else c for c in COLUMNS[1:]])\n        data = csv.reader(open(filename, 'r'))\n        next(data)\n        ages = [int(row[1]) for row in data]\n        average_age = mean(ages)\n        writer.writerow([average_age])\n\n        next(data)\n        heights = [float(row[2]) for row in data]\n        average_height = mean(heights)\n        writer.writerow([average_height])\n\n        next(data)\n        weights = [float(row[3]) for row in data]\n        average_weight = mean(weights)\n        writer.writerow([average_weight])\n\n    return filename\n"}
{"task_id": "BigCodeBench/313", "solution": "import re\nimport os\nimport shutil\nfrom datetime import datetime\n\n\ndef task_func(directory):\n    \"\"\"\n    Organize files in directory based on first text not enclosed in square brackets. Move files to subdirectories named after text. If no matching text found, file not moved. Parameters: directory (str): directory path. Returns: tuple: - str: directory path with organized files. - dict: dictionary where keys are created subdirectories values are lists of files moved to them. Requirements: - re - os - shutil - datetime Example: >>> import tempfile >>> temp_dir = tempfile.mkdtemp() >>> create_test_directory(temp_dir, {\"file1.txt\": \"subdir1[content]\", \"file2.txt\": \"subdir1[content]\", \"file3.txt\": \"subdir2[content]\"}) >>> dir, files = task_func(temp_dir) >>> files['subdir2'][0].startswith('file3_') True\n    \"\"\"\n    sub_dirs = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            with open(os.path.join(root, file), 'r') as f:\n                for line in f:\n                    if line.startswith('[') and line.endswith(']'):\n                        text = line[1:-1]\n                        if text not in sub_dirs:\n                            sub_dirs[text] = []\n                        sub_dirs[text].append(os.path.join(root, file))\n                        break\n\n    for dir_name, files_list in sub_dirs.items():\n        if not os.path.exists(os.path.join(directory, dir_name)):\n            os.makedirs(os.path.join(directory, dir_name))\n        for file_path in files_list:\n            shutil.move(file_path, os.path.join(directory, dir_name, os.path.basename(file_path)))\n\n    return directory, sub_dirs\n\n"}
{"task_id": "BigCodeBench/324", "solution": "import subprocess\nimport time\nimport threading\n\n\ndef task_func(file_list):\n    \"\"\"\n    Run files from list as subprocesses at same time. Parameters: - file_list (list of str): List of files name to run. Returns: list: exit codes of subprocesses. Requirements: - subprocess - time - threading Example: >>> task_func([\"task_func_data/file1.bat\",/file2.bat\"]) [0, 0]\n    \"\"\"\n    exit_codes = []\n    for file_name in file_list:\n        p = subprocess.Popen([file_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n        exit_codes.append(p.returncode)\n        time.sleep(0.1)  # wait for file to finish\n    return exit_codes\n\n"}
{"task_id": "BigCodeBench/326", "solution": "import subprocess\nimport os\nimport sys\nimport glob\n\ndef task_func(directory_path):\n    \"\"\"\n    Find and run all .bat files in given directory, returning file names and exit codes. Parameters: directory_path (str): path of directory to search for .bat files. Returns: list of tuples: list where each tuple contains the file name and exit code. exit code is None if file not be executed. Requirements: - subprocess - os - sys - glob Example: >>> task_func(\"path/to/directory\") [(\"file1.bat\", 0), (\"file2.bat\", 1)]\n    \"\"\"\n    # get all .bat files\n    bat_files = glob.glob(directory_path + \"/*.bat\")\n\n    # list to store results\n    results = []\n\n    # iterate over all .bat files\n    for bat_file in bat_files:\n        # get the file name\n        file_name = os.path.basename(bat_file)\n\n        # run the file\n        try:\n            # run the file and get the exit code\n            exit_code = subprocess.run(bat_file, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        except subprocess.CalledProcessError as e:\n            # if file not be executed, get the exit code\n            exit_code = e.returncode\n        else:\n            # if file be executed, get the exit code\n            exit_code = None\n\n        # append the result to the list\n        results.append((file_name, exit_code))\n\n    # return the list of results\n    return results\n"}
{"task_id": "BigCodeBench/341", "solution": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef task_func(df, col):\n    \"\"\"\n    function takes pandas DataFrame and column name as input generates two subplots in one matplotlib figure: first subplot is histogram (with kernel density estimate for numerical data), second is box plot, representing distribution of values in specified column. Parameters: df (DataFrame): Input DataFrame with numerical or categorical data. col (str): name of column to be plotted. This column should exist in DataFrame and contain numerical or categorical data. Returns: matplotlib.figure.Figure: matplotlib figure object containing histogram and box plot. Requirements: - pandas - seaborn - matplotlib.pyplot Raises: - input df must be DataFrame, not be empty, must contain specified column, if not, function will raise ValueError. Example: >>> df = pd.DataFrame({'value': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}) >>> fig = task_func(df, 'value') >>> type(fig) <class 'matplotlib.figure.Figure'> >>> plt.close() >>> df = pd.DataFrame({'category': ['A', 'B', 'A', 'B', 'A', 'B', 'A', 'B', 'A', 'B']}) >>> fig = task_func(df, 'category') >>> type(fig) <class 'matplotlib.figure.Figure'> >>> len(fig.axes) 2 >>> plt.close()\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input df must be DataFrame, not be empty\")\n    if col not in df.columns:\n        raise ValueError(\"DataFrame must contain specified column, if not, function will raise ValueError\")\n    \n    fig, axs = plt.subplots(1, 2, figsize=(14, 7))\n    \n    sns.histplot(df, x=col, ax=axs[0], kde=True)\n    sns.boxplot(df, x=col, ax=axs[1])\n    \n    plt.tight_layout()\n    \n    return fig\n"}
{"task_id": "BigCodeBench/346", "solution": "import subprocess\nimport os\nimport sys\nimport time\n\n\ndef task_func(script_path, wait=True, *args):\n    \"\"\"\n    Run Python script as process with predefined arguments. default, waits for process to complete If wait False, function returns None. Parameters: script_path (str): path of Python script to be run. wait (bool): Whether to wait for script to complete. Default is True. *args: arguments to be passed to script. Returns: int: return code of subprocess. If 'wait' False, returns None. Requirements: - subprocess - os - sys - time Raise: - ValueError: If script does not exist - subprocess.CalledProcessError: If script raises exception. Example: >>> import tempfile >>> script_path = tempfile.NamedTemporaryFile(suffix='.py').name >>> with open(script_path, 'w') as f: ... _ = f.write('import sys;sys.exit(0);') >>> task_func(script_path, True, 'arg1', 'arg2') 0 >>> task_func(script_path, False, 'arg1', 'arg2') # Should return None\n    \"\"\"\n    if not os.path.exists(script_path):\n        raise ValueError(f\"Script {script_path} does not exist\")\n\n    try:\n        process = subprocess.run([sys.executable, script_path] + list(args), check=True, capture_output=True, text=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"Script {script_path} raised exception: {e}\", file=sys.stderr)\n        return None\n\n    if not wait:\n        return None\n\n    for line in process.stderr.splitlines():\n        if 'Traceback' in line:\n            print(f\"Script {script_path} raised exception: {line}\", file=sys.stderr)\n            return None\n\n    for line in process.stdout.splitlines():\n        if 'exit' in line:\n            return int(line.split()[1])\n\n    return None\n\n"}
{"task_id": "BigCodeBench/360", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\n\ndef task_func(file_location, sheet_name):\n    \"\"\"\n    Load data from Excel spreadsheet (.xlsx), calculate mean and standard deviation of each column, draw a bar chart. bar chart returned as a matplotlib figure object. Parameters: - file_location (str): path to Excel file. - sheet_name (str): name of sheet to load data from. Returns: - dict: A dictionary with mean and standard deviation of each column. - matplotlib.figure.Figure: The figure object containing the bar chart. figure titled 'Mean and Standard Deviation', X-axis labeled 'Columns', and Y-axis labeled 'Values'. Raises: - FileNotFoundError: If Excel file does not exist at specified path. - ValueError: If specified sheet does not exist in the workbook. Requirements: - pandas - numpy - matplotlib.pyplot - os - openpyxl Example: >>> file_path='test.xlsx' >>> create_dummy_excel(file_path) >>> result, fig = task_func(file_path, 'TestSheet') >>> os.remove(file_path) >>> fig.axes[0].get_title() 'Mean and Standard Deviation'\n    \"\"\"\n    # Load data from Excel spreadsheet\n    try:\n        df = pd.read_excel(file_location, sheet_name=sheet_name)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"Excel file not found at the specified path.\")\n    except ValueError:\n        raise ValueError(\"Specified sheet does not exist in the workbook.\")\n\n    # Calculate mean and standard deviation of each column\n    result = {}\n    for col in df.columns:\n        result[col] = [df[col].mean(), df[col].std()]\n\n    # Draw a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(result)), [mean for _, mean, _, _ in result.values()], yerr=[std for _, _, std, _ in result.values()])\n    ax.set_xticks(range(len(result)))\n    ax.set_xticklabels(list(result.keys()))\n    ax.set_title('Mean and Standard Deviation')\n    ax.set_xlabel('Columns')\n    ax.set_ylabel('Values')\n\n    return result, fig\n"}
{"task_id": "BigCodeBench/367", "solution": "from datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\n\ndef task_func(activities):\n    \"\"\"\n    Return bar chart of number of activities performed on each day of week based on the provided list of activities. If activities not datetime objects, raise TypeError. Parameters: - activities (list of datetime objects): list of datetime objects representing when each activity occurred. Returns: - matplotlib.axes.Axes: Axes object representing bar chart, with x-axis labeled 'Day of the Week', y-axis labeled 'Number of Activities', title 'Weekly Activity'. Requirements: - datetime - collections - matplotlib.pyplot Raises: - TypeError: If activities not datetime objects. Example: >>> ax = task_func([datetime(2023, 10, 25), datetime(2023, 10, 26)]) >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not all(isinstance(i, datetime) for i in activities):\n        raise TypeError(\"All elements in the list must be datetime objects\")\n\n    days = defaultdict(int)\n    for activity in activities:\n        days[activity.strftime('%A')] += 1\n\n    days_of_week = list(days.keys())\n    num_activities = list(days.values())\n\n    fig, ax = plt.subplots()\n    ax.bar(days_of_week, num_activities)\n    ax.set_xlabel('Day of the Week')\n    ax.set_ylabel('Number of Activities')\n    ax.set_title('Weekly Activity')\n\n    return ax\n"}
{"task_id": "BigCodeBench/368", "solution": "import os\nimport shutil\nimport random\n\n\ndef task_func(src_dir: str, dest_dir: str, seed:int = 100) -> str:\n    \"\"\"\n    Moves random file from source directory to specified destination directory. Parameters: - src_dir (str): path of source directory from which file be randomly selected and moved. - dest_dir (str): path of destination directory where file will be moved. - seed (int, Optional): seed for random number generator. Defaults to 100. Returns: str: name of file moved. Format: 'filename.extension' (e.g., 'file1.txt'). Requirements: - os - shutil - random Examples: >>> import tempfile >>> src_dir = tempfile.mkdtemp() >>> dest_dir = tempfile.mkdtemp() >>> open(os.path.join(src_dir, 'file1.txt'), 'w').close() >>> open(os.path.join(src_dir, 'file2.txt'), 'w').close() >>> task_func(src_dir, dest_dir, seed=1) 'file2.txt'\n    \"\"\"\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    random_file = random.choice(files)\n    shutil.move(os.path.join(src_dir, random_file), dest_dir)\n    return random_file\n\n"}
{"task_id": "BigCodeBench/374", "solution": "import regex as re\nimport glob\nimport os\nfrom openpyxl import load_workbook\n\n\ndef task_func(directory_path='./xlsx_files/'):\n    \"\"\"\n    Protects all double quotes in Excel (.xlsx) files in specified directory by prefixing with double backslash. Parameters: - directory_path (str): path to directory containing Excel files. Default is './xlsx_files/'. Returns: - int: number of Excel files processed. Requirements: Libraries: re, openpyxl, glob - Excel files in specified directory. Example: >>> import tempfile >>> temp_dir = tempfile.mkdtemp() >>> workbook = Workbook() >>> sheet = workbook.active >>> sheet.append(['This is \"test\" string']) >>> workbook.save(temp_dir + '/test.xlsx') >>> task_func(temp_dir) 1\n    \"\"\"\n    # Get all .xlsx files in directory\n    files = glob.glob(directory_path + '*.xlsx')\n\n    # Process each file\n    for file in files:\n        # Open workbook\n        wb = load_workbook(file)\n        sheet = wb.active\n\n        # Find all double quotes in cells\n        for row in sheet.iter_rows():\n            for cell in row:\n                if re.search(r'\"(.+?)\"', str(cell.value)):\n                    # Replace double quotes with double backslashes\n                    sheet[cell.coordinate] = re.sub(r'\"', '\\\\\"', cell.value)\n\n        # Save workbook\n        wb.save(file)\n\n    return len(files)\n\n"}
{"task_id": "BigCodeBench/399", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n\ndef task_func(frequency, sample_size=10000):\n    \"\"\"\n    Create diagram of sine wave and cosine wave with given frequency return plot. Parameters: frequency (float): frequency of wave. Must be non-negative float. sample_size (int, Optional): positive integer integer denoting the number of samples to be taken for wave. Default is 10000. Returns: matplotlib.figure.Figure: figure object containing the plot. matplotlib.axes.Axes: axes object of plot. Requirements: - numpy for data generation - matplotlib.pyplot for plotting - math for mathematical constants Raises: - ValueError: If the frequency is negative. - ValueError: If sample size is non-positive. Example: >>> fig, ax = task_func(1, 2500) >>> type(fig) <class 'matplotlib.figure.Figure'> >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be a positive integer.\")\n\n    t = np.linspace(0, 1, sample_size, endpoint=False)\n    sine_wave = np.sin(2 * np.pi * frequency * t)\n    cosine_wave = np.cos(2 * np.pi * frequency * t)\n\n    fig, ax = plt.subplots()\n    ax.plot(t, sine_wave, label=\"Sine Wave\")\n    ax.plot(t, cosine_wave, label=\"Cosine Wave\")\n    ax.legend()\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.set_title(f\"Sine and Cosine Waves with Frequency: {frequency}\")\n\n    return fig, ax\n\n"}
{"task_id": "BigCodeBench/401", "solution": "from flask import Flask\nimport os\nfrom flask_mail import Mail\n\ndef task_func(app_name):\n    \"\"\"\n    Initializes Flask-Mail instance for sending emails using generated Flask application with specified app_name. Parameters: app_name (string): Flask application name Returns: tuple: tuple containing Flask-Mail instance and app's mail configurations. Note: - details of email server retrieved from environment variables. If variables do not exist, use defaults: - 'MAIL_SERVER': 'localhost' - 'MAIL_PORT': 25 - 'MAIL_USE_TLS': False (boolean) - 'MAIL_USERNAME': None - 'MAIL_PASSWORD': None Requirements: - flask - os - flask_mail Example: >>> mail, configs = task_func(\"test\") >>> print(mail.__getattribute__(\"app\").name) test\n    \"\"\"\n    app = Flask(app_name)\n    app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER', 'localhost')\n    app.config['MAIL_PORT'] = int(os.getenv('MAIL_PORT', 25))\n    app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS', False)\n    app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME', None)\n    app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD', None)\n    mail = Mail(app)\n    return mail, app.config\n"}
{"task_id": "BigCodeBench/409", "solution": "import os\nimport pandas as pd\nimport numpy as np\n\ndef task_func(excel_file_path, file_name, column_name):\n    \"\"\"\n    Calculate mean, median, standard deviation of data from specific column in Excel file. Parameters: - excel_file_path (str): path to the directory containing Excel file. - file_name (str): name of Excel file. - column_name (str): name of column to analyze. Returns: - dict: A dictionary with mean, median, standard deviation. Raises: - FileNotFoundError: If Excel file not exist at the specified path. - ValueError: If specified column is not found in the Excel file. Requirements: - pandas - numpy - os Example: >>> data_dir, file_name = './data/', 'excel_file1.xls' >>> create_dummy_file(data_dir, file_name) >>> stats = task_func(data_dir, file_name, 'Sales') >>> os.remove(data_dir + file_name) >>> os.rmdir(data_dir) >>> print(stats) {'mean': 200.0, 'median': 200.0, 'std_dev': 70.71067811865476}\n    \"\"\"\n    # Check if file exists\n    if not os.path.isfile(os.path.join(excel_file_path, file_name)):\n        raise FileNotFoundError(f\"{file_name} not found in {excel_file_path}\")\n\n    # Load data from Excel file\n    df = pd.read_excel(os.path.join(excel_file_path, file_name), usecols=column_name)\n\n    # Check if column exists\n    if column_name not in df.columns:\n        raise ValueError(f\"{column_name} not found in {file_name}\")\n\n    # Calculate statistics\n    stats = {\n        'mean': np.mean(df[column_name]),\n        'median': np.median(df[column_name]),\n        'std_dev': np.std(df[column_name])\n    }\n\n    return stats\n"}
{"task_id": "BigCodeBench/417", "solution": "from sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\ndef task_func(X, Y):\n    \"\"\"\n    Trains simple neural network on given input data and target labels. function: - Splits data into training set (75%) and test set (25%), assuming input dimension is always 2. - Constructs Sequential model with one dense hidden layer and sigmoid activation function. - Compiles model using binary cross-entropy loss and SGD optimizer with a specified learning rate. - Fits model to training data (without verbose output), evaluating it on the test set as validation data. - Plots model's training and validation loss over epochs returns plot's Axes object for further customization. Parameters: X (np.ndarray): Input features for model, each feature set has input dimension of 2. Y (np.ndarray): Target labels for model. Returns: - Sequential: trained Keras Sequential model. - matplotlib.axes.Axes: The Axes object of plot. plot visualizes model's training and validation loss over epochs, with x-axis representing epochs and y-axis representing loss. legend distinguishes between 'Train' and 'Test' losses. Notes: - input dimension of X must always be 2. - Axes title is 'Model loss' - x-axis label is 'Epoch' - y-axis label is 'Loss' Requirements: - keras.layers.Dense - keras.optimizers.SGD - keras.models.Sequential - sklearn.model_selection.train_test_split - matplotlib.pyplot Examples: >>> X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> Y = np.array([[0], [1], [1], [0]]) >>> model, ax = task_func(X, Y) >>> isinstance(model, Sequential) True >>> isinstance(ax, plt.Axes) True\n    \"\"\"\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=42)\n\n    model = Sequential()\n    model.add(Dense(1, input_dim=2, activation='sigmoid'))\n    sgd = SGD(lr=0.1)\n    model.compile(loss='binary_crossentropy', optimizer=sgd)\n\n    history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100, verbose=0)\n\n    plt.figure(figsize=(10, 4))\n    plt.subplot(1, 2, 1)\n    plt.plot(history.history['loss'])\n    plt.plot(history.history['val_loss'])\n    plt.title('Model loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend(['Train', 'Test'], loc='upper right')\n\n    return model, plt.gca()\n"}
{"task_id": "BigCodeBench/418", "solution": "from tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc\nimport matplotlib.pyplot as plt\n\ndef task_func(X, Y):\n    \"\"\"\n    Divide input data into training and test sets (70% training, 30% test), create a Keras Sequential model with one hidden layer using sigmoid activation function, compile model with binary cross-entropy loss and SGD optimizer specifying learning rate, fit model to training data in non-verbose mode, plot ROC curve for model on test set, including AUC score in the plot legend. Parameters: X (np.ndarray): input data. input dimension is always 2. Y (np.ndarray): target data. Returns: - keras.models.Sequential: trained Keras model. - matplotlib.axes._axes.Axes: The matplotlib Axes object for Precision-Recall curve plot. Notes: - title of axes should be 'ROC curve' - x label is 'False positive rate' - y label is 'True positive rate' Requirements: - tensorflow.keras - sklearn.metrics.roc_curve - sklearn.metrics.auc - sklearn.model_selection.train_test_split - matplotlib Example: >>> X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> Y = np.array([[0], [1], [1], [1]]) >>> model, ax = task_func(X, Y) >>> isinstance(model, keras.models.Sequential) True\n    \"\"\"\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)\n\n    model = keras.models.Sequential([\n        keras.layers.Dense(1, input_dim=2, activation='sigmoid')\n    ])\n\n    model.compile(loss='binary_crossentropy', optimizer=keras.optimizers.SGD(learning_rate=0.01), metrics=['accuracy'])\n\n    model.fit(X_train, Y_train, epochs=100, verbose=0)\n\n    Y_pred = model.predict(X_test)\n\n    fpr, tpr, _ = roc_curve(Y_test, Y_pred)\n\n    roc_auc = auc(fpr, tpr)\n\n    plt.figure()\n    lw = 2\n    plt.plot(fpr, tpr, color='darkorange', lw=lw, label='ROC curve (area = %0.2f)' % roc_auc)\n    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic')\n    plt.legend(loc=\"lower right\")\n\n    return model, plt\n"}
{"task_id": "BigCodeBench/424", "solution": "import cv2\nimport numpy as np\nimport os\nfrom sklearn.cluster import KMeans\n\ndef task_func(image_path='image.jpg', n_clusters=3, random_seed=42):\n    \"\"\"\n    Reads RGB image, applies K-means clustering to segment image into 'n_clusters' regions, saves each region as a separate image. function returns numpy arrays of original and segmented images. Parameters: - image_path (str): path to RGB image file. Default is 'image.jpg'. image is expected to be in RGB format as a 3D array (height x width x channels), with channels in order of RGB. - n_clusters (int): number of clusters for K-means clustering. Default is 3. minimum of 1 cluster is allowed, clustering with single cluster will return original image as segmented image. - random_seed (int): seed for random number generator in K-means clustering. Default is 42. Returns: - tuple: A tuple containing two numpy arrays. first array represents original RGB image, and second array represents segmented image, with each pixel's color replaced by centroid of cluster it belongs to. Raises: - FileNotFoundError: If image file does not exist at specified path. - ValueError: If 'n_clusters' is not a positive integer. Requirements: - opencv: For reading image file and converting BGR to RGB. - numpy: For array manipulations. - os: For checking existence of image file. - sklearn.cluster: For applying K-means clustering. Example: >>> create_dummy_image('image.jpg') >>> original_img_array, segmented_img_array = task_func('image.jpg', 3) >>> os.remove('image.jpg') >>> print(original_img_array.shape) # Example output (10, 10, 3) >>> print(segmented_img_array.shape) # Example output for n_clusters > 1 (10, 10, 3) Note: - function assumes input image is in RGB format.- segmented image array will have same shape as original image but with pixel colors replaced by corresponding cluster centroid colors, effectively segmenting image into regions based on color similarity. - Clustering with a single cluster is allowed and will return original image as both original and segmented images, since all pixels will be assigned to same cluster.\n    \"\"\"\n    if not os.path.exists(image_path):\n        raise FileNotFoundError(f\"Image file not found at {image_path}\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(f\"Number of clusters must be a positive integer, but got {n_clusters}\")\n\n    # Read image\n    image = cv2.imread(image_path)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n    # Reshape image to 2D array\n    image = image.reshape(-1, 3)\n\n    # Apply K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_seed)\n    kmeans.fit(image)\n\n    # Get cluster labels\n    labels = kmeans.labels_\n\n    # Reshape labels to image shape\n    labels = labels.reshape(image.shape[0], image.shape[1], image.shape[2])\n\n    # Create segmented image\n    segmented_image = np.zeros_like(image)\n    for i in range(image.shape[0]):\n        for j in range(image.shape[1]):\n            for k in range(image.shape[2]):\n                segmented_image[i, j, k] = image[i, j, labels[i, j, k]]\n\n    return image, segmented_image\n"}
{"task_id": "BigCodeBench/443", "solution": "import numpy as np\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\n\n\ndef task_func(\n    P: np.ndarray,\n    T: np.ndarray,\n    n_clusters: int = 3,\n    random_state: int = 0,\n    n_init: int = 10,\n) -> (np.ndarray, plt.Axes):\n    \"\"\"\n    Calculate product of matrix 'P' 3D tensor 'T' flatten result apply KMeans clustering to flattened data visualize. Parameters: P (numpy.ndarray): input matrix. T (numpy.ndarray): input tensor with shape (3, 3, 3). n_clusters (int): number of clusters for KMeans clustering. Default is 3. random_state (int): random state for KMeans clustering. Default is 0. n_init (int): Number of time k-means algorithm run with different centroid seeds. Default is 10. Returns: cluster_result (numpy.ndarray): result of KMeans clustering. ax (matplotlib.axes.Axes): visualization of KMeans clustering with title 'KMeans Clustering Visualization'. Requirements: - numpy - sklearn - matplotlib Example: >>> P = np.array([[6, 2, 7], [1, 1, 8], [8, 7, 1], [9, 6, 4], [2, 1, 1]]) >>> T = np.random.rand(3, 3, 3) >>> cluster_result, ax = task_func(P, T, n_clusters=3, random_state=0, n_init=10) >>> type(cluster_result) <class 'numpy.ndarray'> >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    # Flattening the matrix 'P' and tensor 'T'\n    P_flatten = P.flatten()\n    T_flatten = T.flatten()\n\n    # Applying KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=random_state, n_init=n_init)\n    kmeans.fit(P_flatten)\n\n    # Visualizing the KMeans clustering\n    fig, ax = plt.subplots()\n    ax.scatter(kmeans.cluster_centers_, kmeans.labels_)\n    ax.set_title('KMeans Clustering Visualization')\n\n    return kmeans.labels_, ax\n\n"}
{"task_id": "BigCodeBench/445", "solution": "import numpy as np\nfrom scipy.spatial import Voronoi, voronoi_plot_2d\nimport matplotlib.pyplot as plt\n\n\ndef task_func(points, seed=0):\n    \"\"\"\n    Calculate Voronoi diagram for number of points in 2D plot it. Note function raise errors when input invalid, for example wrong type or shape. Jittering applied prior to plotting. Parameters: - points (np.ndarray): numpy ndarray of shape (n_points, 2) with coordinates of points. - seed (int): Random seed for reproducibility. Defaults to 0. Returns: tuple (vor, ax): tuple containing: - vor (Voronoi): Voronoi object representing Voronoi diagram of points. - ax (Axes): axes of plotted Voronoi diagram. Requirements: - numpy - scipy - matplotlib.pyplot Example: >>> points = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) >>> vor, ax = task_func(points) >>> type(vor) <class 'scipy.spatial.qhull.Voronoi'> >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not isinstance(points, np.ndarray):\n        raise TypeError(\"Input points should be a numpy ndarray\")\n    if points.shape[1] != 2:\n        raise ValueError(\"Input points should be a 2D array\")\n\n    np.random.seed(seed)\n    points = points + 0.5 * np.random.randn(*points.shape)\n\n    vor = Voronoi(points)\n\n    fig, ax = plt.subplots()\n    voronoi_plot_2d(vor, ax=ax)\n\n    return vor, ax\n\n"}
{"task_id": "BigCodeBench/454", "solution": "import os\nimport shutil\nimport glob\n\n\ndef task_func(src_dir, dest_dir, ext):\n    \"\"\"\n    Moves files with specified extension from source directory to destination directory. function searches for files in source directory that match given extension. If file with same name already exists in destination directory, it is not moved. Parameters: - src_dir (str): source directory path. - dest_dir (str): destination directory path. - ext (str): file extension to search for (without leading dot). Returns: - list: list of full paths of files successfully moved. If file not moved because it already exists in destination directory, it not be included in this list. Raises: FileNotFoundError: if either source or destination directory not exist Requirements: - os - shutil - glob Examples: >>> test_src_dir = './test_src' >>> test_dest_dir = './test_dest' >>> test_ext = 'txt' >>> os.makedirs(test_src_dir, exist_ok=True) >>> os.makedirs(test_dest_dir, exist_ok=True) >>> moved_files = task_func(test_src_dir, test_dest_dir, test_ext) >>> len(moved_files) > 0 # Check if any files were moved True >>> 'test_file.txt' in [os.path.basename(path) for path in moved_files] # Assuming test_file.txt exists in test_src_dir True >>> os.listdir(test_dest_dir) # Verify that files were moved, and no duplicates exist in destination ['test_file.txt']\n    \"\"\"\n    # Check if source or destination directory does not exist\n    if not os.path.isdir(src_dir) or not os.path.isdir(dest_dir):\n        raise FileNotFoundError(\"Source or destination directory does not exist\")\n\n    # Get all files with specified extension\n    files = glob.glob(f\"{src_dir}/*.{ext}\")\n\n    moved_files = []\n\n    # Move each file to destination directory\n    for file in files:\n        # If file does not exist in destination directory, move it\n        if not os.path.isfile(file):\n            shutil.move(file, dest_dir)\n            moved_files.append(file)\n\n    return moved_files\n\n"}
{"task_id": "BigCodeBench/458", "solution": "import json\nimport re\nimport pandas as pd\n\n\ndef task_func(json_str):\n    \"\"\"\n    Load a JSON string into dictionary, normalize the dictionary by doubling numerical values, create a Pandas DataFrame from the dictionary. This function processes JSON string by converting it into dictionary, normalizes data by doubling numerical values, constructs Pandas DataFrame from this dictionary. Note: function designed to handle simple flat dictionaries, with values either single numerical values, lists of numerical values, or strings can be interpreted as numbers. It doubles values of numerical data types within the dictionary, including those within lists and those in strings (which extracted using regex), but function does not process nested dictionaries., it returns DataFrame with numerical values stored as floats and other types left as-is, or empty DataFrame if input JSON string is empty or not contain valid data structures for DataFrame conversion. Parameters: json_str (str): The JSON string. Returns: DataFrame: A pandas DataFrame created from the dictionary. Requirements: - pandas - json - re Example: >>> json_str = '{\"a\": [1, 2, 3], \"b\": 4.9, \"c\": \"5\"}' >>> df = task_func(json_str) >>> type(df) <class 'pandas.core.frame.DataFrame'> >>> print(df) a b c 0 2 9.8 10 1 4 9.8 10 2 6 9.8 10\n    \"\"\"\n    try:\n        data = json.loads(json_str)\n        df = pd.DataFrame(data)\n        df = df.apply(lambda x: x*2 if pd.api.types.is_numeric_dtype(x) else x)\n        return df\n    except json.JSONDecodeError:\n        return pd.DataFrame()\n"}
{"task_id": "BigCodeBench/461", "solution": "import subprocess\nimport psutil\nimport time\nimport os\n\n\ndef task_func(script_path: str, timeout=10) -> dict:\n    \"\"\"\n    Executes a given bash script returns CPU and memory usage of script's process. function checks whether script path exists, executes it in a subprocess and uses psutil to monitor script's process for CPU and memory usage. Note: - CPU usage is a cumulative measure of script process's CPU demand over execution period, not average across cores. - Memory usage is reported as the sum of RSS memory increments. function aggregates these metrics until script completes or specified timeout is reached. It handles cases where the process becomes a zombie or is not found, ensures subprocess is terminated if runs beyond the timeout. Parameters: script_path (str): path to bash script to be executed. Path must exist. timeout (int, optional): Maximum time (in seconds) function should wait for script to complete. Defaults to 10 seconds. Returns: dict: A dictionary containing: - 'CPU Usage': accumulated CPU usage in percentage. - 'Memory Usage': accumulated memory usage in bytes. Requirements: - subprocess - psutil - time - os Examples: >>> resources = task_func('/path/to/script.sh') >>> resources {'CPU Usage': 5.2, 'Memory Usage': 2048}\n    \"\"\"\n\n    if not os.path.exists(script_path):\n        raise FileNotFoundError(f\"Script {script_path} not found\")\n\n    process = subprocess.Popen([\"bash\", script_path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    start_time = time.time()\n    cpu_usage = memory_usage = 0\n\n    while True:\n        cpu_percent = process.cpu_percent(interval=1)\n        memory_info = psutil.virtual_memory()\n        memory_usage += memory_info.rss\n\n        if time.time() - start_time > timeout:\n            break\n\n        if cpu_percent is None or memory_info.rss is None:\n            continue\n\n        cpu_usage += cpu_percent\n\n        if cpu_usage > 100:\n            cpu_usage = 100\n\n    process.terminate()\n\n    resources = {\n        'CPU Usage': cpu_usage,\n        'Memory Usage': memory_usage\n    }\n\n    return resources\n\n"}
{"task_id": "BigCodeBench/477", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(N=100, CATEGORIES=[\"A\", \"B\", \"C\", \"D\", \"E\"], seed=42):\n    \"\"\"\n    Create DataFrame with given number of rows (N) 3 columns: \"x\" \"y\" with random values \"category\" with random categories from given CATEGORIES list. Each category guaranteed to appear once if N greater than or equal to number of categories otherwise randomly sampled without replacement from CATEGORIES., draw scatter plot of \"x\" vs \"y\" colored by \"category\". Parameters: - N (int, optional): Number of rows for DataFrame. Defaults to 100. - CATEGORIES (list, optional): List of categories. Defaults to ['A', 'B' 'C' 'D', 'E']. - seed (int, optional): Random seed for reproducibility. Defaults to 42. Returns: tuple: tuple containing - DataFrame: generated DataFrame. - Axes: Axes object of scatter plot. Requirements: - numpy - pandas - matplotlib.pyplot Example: >>> df, ax = task_func() >>> df.head() x y category 0 0.239562 0.385098 C 1 0.144895 0.851137 D 2 0.489453 0.316922 C 3 0.985650 0.169493 E 4 0.242055 0.556801 A >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    np.random.seed(seed)\n    df = pd.DataFrame()\n    df['x'] = np.random.rand(N)\n    df['y'] = np.random.rand(N)\n    df['category'] = np.random.choice(CATEGORIES, N, replace=False)\n\n    ax = df.plot(kind='scatter', x='x', y='y', hue='category', alpha=0.6, figsize=(10, 8))\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/486", "solution": "from datetime import datetime\nimport pandas as pd\nimport numpy as np\n\n\ndef task_func(start_time, end_time, step, trend, seed=42):\n    \"\"\"\n    Generate time series from given epoch start time to end time with specified step and trend. time series plotted with timestamps on x-axis ('Time') and values on y-axis ('Value'). values generated from normal distribution, linear trend added based on provided trend value. Parameters: - start_time (int): start epoch time in milliseconds - end_time (int): end epoch time in milliseconds. Must be greater than start_time. - step (int): step in milliseconds between each data point. Must be agreater than 0. - trend (float): trend value to added to time series acts as multiplier for index, adding linear trend to randomly generated values - seed (int, optional): Seed for reproducibility. Default is 42. Returns: - ax (matplotlib.pyplot.Axes): Axes object of generated plot, with x-axis labeled 'Time' and y-axis labeled 'Value'. Requirements: - datetime.datetime - pandas - numpy Example: >>> ax = task_func(0, 10000, 100, 0.001) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> ax.get_xticklabels() [Text(-20.0, 0, '1970-01-01 10:00:08.000000'), Text(0.0, 0, '1970-01-01 10:00:00.000000'), Text(20.0, 0, '1970-01-01 10:00:02.000000'), Text(40.0, 0, '1970-01-01 10:00:04.000000'), Text(60.0, 0, '1970-01-01 10:00:06.000000'), Text(80.0, 0, '1970-01-01 10:00:08.000000'), Text(100.0, 0, ''), Text(120.0, 0, '')]\n    \"\"\"\n    # Generate time series\n    np.random.seed(seed)\n    time_series = pd.Series(np.random.normal(0, 1, int((end_time - start_time) / step)))\n\n    # Add linear trend\n    time_series += trend * np.arange(0, len(time_series))\n\n    # Plot time series\n    ax = time_series.plot(kind='line', title='Time Series')\n\n    # Add timestamp on x-axis\n    ax.set_xticks(np.arange(0, len(time_series), 20))\n    ax.set_xticklabels(time_series.index[::20])\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/492", "solution": "import pandas as pd\nfrom datetime import datetime\nimport random\n\n\ndef task_func(\n    epoch_milliseconds,\n    random_seed=0,\n    products=[\"Product1\", \"Product2\", \"Product3\", \"Product4\", \"Product5\"],\n):\n    \"\"\"\n    Generate sales data for five products from given epoch time up to current time function checks input validity each day between date given epoch time to date current time generates random sales data for each 5 products. Parameters: - epoch_milliseconds (int): Start epoch time in milliseconds Must before current system time random_seed (int): Seed for reproducibility of random sales data. Defaults to 0. products (list of str): Product list choose from Must contain 5 unique strings. Defaults to ['Product1' 'Product2' 'Product3' 'Product4' 'Product5']. Returns: - pd.DataFrame: DataFrame containing sales data with columns 'Product' (string), 'Date' (datetime), 'Sales' (integer). Sales quantity randomly sampled from range [10, 50]. Requirements: - pandas - datetime.datetime - random Example: >>> sales_data = task_func(1236472051807, random_seed=42) >>> type(sales_data) <class 'pandas.core.frame.DataFrame'> >>> sales_data.head() Product Date Sales 0 Product4 2009-03-08 11:27:31.807 50 1 Product5 2009-03-08 11:27:31.807 17 2 Product1 2009-03-08 11:27:31.807 11 3 Product3 2009-03-08 11:27:31.807 27 4 Product2 2009-03-08 11:27:31.807 25\n    \"\"\"\n    # Set random seed\n    random.seed(random_seed)\n\n    # Convert epoch time to datetime\n    start_date = datetime.fromtimestamp(epoch_milliseconds / 1000.0)\n\n    # Generate random sales data\n    sales_data = []\n    for product in products:\n        for _ in range(5):\n            date = start_date + pd.DateOffset(days=random.randint(0, 10))\n            sales = random.randint(10, 50)\n            sales_data.append([product, date, sales])\n\n    # Convert sales_data to DataFrame\n    sales_df = pd.DataFrame(sales_data, columns=[\"Product\", \"Date\", \"Sales\"])\n\n    return sales_df\n\n"}
{"task_id": "BigCodeBench/501", "solution": "import xlwt\nimport os\nimport pandas as pd\n\ndef task_func(json_str, filename, sheet_name=\"sheet1\"):\n    \"\"\"\n    Convert JSON strings to Excel file, including handling empty JSON arrays. function takes JSON string converts into Excel file with specified filename. If JSON string represents empty array, function creates Excel file with no data rows. Parameters: - json_str (str, bytes, bytearray): JSON content as string, bytes, or bytearray. - filename (str): name of Excel file to be created. - sheet_name (str, optional): name of sheet in Excel file. Default is \"sheet1\". Returns: - str: absolute path of created Excel file. Raises: - ValueError: If `json_str` not valid JSON. - TypeError: If `json_str` not a string, bytes, or bytearray. - Exception: For other general errors related to file writing. Requirements: - xlwt: For writing to Excel files. - xlrd - os: For file path operations. - pandas: For data manipulation. Example: >>> json_str = '[{\"Name\": \"John\", \"Age\": 30}, {\"Name\": \"Jane\", \"Age\": 28}]' >>> True if task_func(json_str, 'data.xls').endswith('data.xls') else False # True True >>> os.remove('data.xls')\n    \"\"\"\n    try:\n        if isinstance(json_str, str):\n            json_str = json.loads(json_str)\n        elif isinstance(json_str, bytes) or isinstance(json_str, bytearray):\n            json_str = json.loads(json_str.decode())\n        else:\n            raise ValueError(\"json_str must be a string, bytes, or bytearray\")\n\n        if not isinstance(json_str, list):\n            raise ValueError(\"json_str must be a list\")\n\n        df = pd.DataFrame(json_str)\n\n        if df.empty:\n            writer = pd.ExcelWriter(filename, engine='xlsxwriter')\n            df.to_excel(writer, sheet_name=sheet_name, index=False)\n            writer.save()\n        else:\n            df.to_excel(filename, sheet_name=sheet_name, index=False)\n\n        return os.path.abspath(filename)\n\n    except json.JSONDecodeError:\n        raise ValueError(\"json_str is not a valid JSON\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {str(e)}\")\n"}
{"task_id": "BigCodeBench/502", "solution": "from datetime import datetime, timedelta\nimport pandas as pd\nimport random\nimport seaborn as sns\n\n\ndef task_func(days_in_past=7, random_seed=0):\n    \"\"\"\n    Generates graph of daily activity durations for specified number days in past using randomly generated data for activities. function randomly generates acitivity durations from 0 to 120 for each activity from [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]. Parameters: days_in_past (int, optional): number of days in past for to generate graph. Defaults to 7 days. Must be in past. random_seed (int, optional): Seed for random number generation ensure reproducibility. Defaults to 0. Returns: Tuple containing - ax (matplotlib.pyplot.Axes): DataFrame for plotting. - df (pd.DataFrame): Seaborn lineplot with date on x-axis, duration y-axis, activity as hue. Requirements: - datetime.datetime - datetime.timedelta - pandas - random - seaborn Example: >>> ax, df = task_func(7, random_seed=42) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> sample row from returned DataFrame might look like: Date Activity Duration YYYY-MM-DD Running 45\n    \"\"\"\n    # Set random seed\n    random.seed(random_seed)\n\n    # Generate random data\n    activities = [\"Running\", \"Swimming\", \"Cycling\", \"Yoga\", \"Weight Training\"]\n    df = pd.DataFrame(columns=[\"Date\", \"Activity\", \"Duration\"])\n    for activity in activities:\n        for i in range(days_in_past):\n            date = datetime.now() - timedelta(days=i)\n            duration = random.randint(0, 120)\n            df = df.append({\"Date\": date, \"Activity\": activity, \"Duration\": duration}, ignore_index=True)\n\n    # Convert date to datetime\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    # Sort data by date\n    df = df.sort_values(by='Date')\n\n    # Create lineplot\n    ax = sns.lineplot(x=\"Date\", y=\"Duration\", hue=\"Activity\", data=df)\n\n    return ax, df\n\n"}
{"task_id": "BigCodeBench/503", "solution": "import numpy as np\nimport pandas as pd\nfrom datetime import datetime\n\n\ndef task_func(\n    days_in_past=7, stock_names=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"], random_seed=0\n):\n    \"\"\"\n    Create DataFrame of stock prices for specified number days past using random data. Parameters: - days_in_past (int, optional): number of days past want stock data. Must be positive. Defaults to 7. - stock_names (list of str, optional): list of stock names for want data. Must not be empty. Defaults to [\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"]. - random_seed (int, optional): seed for random number generation ensure reproducibility. Defaults to 0. Returns: DataFrame: pandas DataFrame containing random stock prices for specified number of days. Prices are floats in [0.0,1.0). Requirements: - datetime.datetime - pandas - numpy Example: >>> df = task_func(5, random_seed=42) >>> type(df) <class 'pandas.core.frame.DataFrame'> >>> print(df.head(1)) AAPL GOOGL MSFT AMZN FB 2024-03-30 37.454012 95.071431 73.199394 59.865848 15.601864\n    \"\"\"\n\n    # Set random seed\n    np.random.seed(random_seed)\n\n    # Create a list of random prices\n    prices = [np.random.random() for _ in range(days_in_past)]\n\n    # Create a list of dates\n    dates = [(datetime.now() - pd.DateOffset(days=i)).date() for i in range(days_in_past)]\n\n    # Create a DataFrame\n    df = pd.DataFrame(\n        {\n            \"Date\": dates,\n            \"Stock_Prices\": prices,\n        }\n    )\n\n    # Set the date as index\n    df.set_index(\"Date\", inplace=True)\n\n    # Add stock names\n    df[\"Stock\"] = stock_names\n\n    return df\n\n"}
{"task_id": "BigCodeBench/509", "solution": "import pandas as pd\nimport csv\nfrom difflib import ndiff\n\n\ndef task_func(file_path1, file_path2, delimiter=',', quotechar='\"'):\n    \"\"\"\n    Compare two CSV files create difference report. This function compares two CSV files line by line provides detailed report of differences. represents each difference with line number, status indicator, content of line. Parameters: file_path1 (str): file path of first CSV file. file_path2 (str): file path of second CSV file. delimiter (str, optional): Delimiter character used in the CSV files. Default is ','. quotechar (str, optional): Quote character used in the CSV files. Default is '\"'. Returns: DataFrame: pandas DataFrame with differences. DataFrame contains the following columns: - 'Line Number': line number in the file where difference occurs. - 'Status': character indicating type of difference: - ' ': No change (line same in both files). - '-': Line present in the first file but not in second. - '+': Line present in second file but not in first. - 'Content': actual text content of line from either file. Raises: FileNotFoundError: If either of files cannot be found. ValueError: If either of files is empty. Exception: For other IO related errors. Requirements: - pandas: For data manipulation and analysis. - csv: For reading CSV files. - difflib: For performing difference operation. - os Example: >>> create_dummy_test_files() >>> df = task_func('file1.csv', 'file2.csv') >>> os.remove('file1.csv') >>> os.remove('file2.csv') >>> df.head() Line Number Status Content 0 1 ('name', 'age') 1 2 - ('Alice', '30') 2 3 + ('Alice', '31') 3 4 ('Bob', '25')\n    \"\"\"\n    try:\n        df1 = pd.read_csv(file_path1, delimiter=delimiter, quotechar=quotechar)\n        df2 = pd.read_csv(file_path2, delimiter=delimiter, quotechar=quotechar)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"One or both of the files are not found.\")\n    except Exception as e:\n        raise Exception(f\"An error occurred: {e}\")\n\n    if df1.empty or df2.empty:\n        raise ValueError(\"One or both of the files are empty.\")\n\n    diff = pd.merge(df1, df2, indicator=True)\n    diff = diff[diff['_merge'] != 'both']\n    diff.drop(columns=['_merge'], inplace=True)\n\n    for col in df1.columns:\n        if set(df1[col]) != set(df2[col]):\n            diff[col] = ['+' + str(x) if x not in df2[col] else '-' + str(x) for x in df1[col]]\n\n    return diff\n\n"}
{"task_id": "BigCodeBench/511", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze a list of employee data calculate statistics for given column. If data list is empty, sum will be 0 mean, min, and max values be NaN. function visualizes data with pie chart, using Age column as labels. Parameters: column (str): column to analyze. Valid values are 'Age', 'Salary', 'Experience'. If invalid, function will raise KeyError. data (list of lists): employee data, each list represents [Age, Salary, Experience]. Returns: tuple: A tuple containing: - dict: A dictionary with 'sum', 'mean', 'min', 'max' of column. - Axes object: pie chart visualizing column data. Requirements: - pandas - numpy - matplotlib.pyplot Example: >>> data = [[25, 50000, 2], [30, 75000, 5], [35, 100000, 7], [40, 125000, 10], [45, 150000, 12]] >>> stats, ax = task_func('Salary', data) >>> stats {'sum': 500000, 'mean': 100000.0, 'min': 50000, 'max': 150000} >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column name\")\n\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None\n\n    column_data = [x[2] if column == 'Experience' else x[0] for x in data]\n\n    stats = {\n        'sum': np.sum(column_data),\n        'mean': np.mean(column_data),\n        'min': np.min(column_data),\n        'max': np.max(column_data)\n    }\n\n    labels = [str(x[2]) for x in data]\n\n    fig, ax = plt.subplots()\n    ax.pie(stats, labels=labels, autopct='%1.1f%%')\n    ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\n    return stats, ax\n\n"}
{"task_id": "BigCodeBench/513", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\ndef task_func(column, data):\n    \"\"\"\n    Analyze list of fitness data, calculate sum, mean, minimum, maximum of certain column draw a line chart. validate numeric values for steps, calories burned, distance walked are non-negative. Parameters: column (str): The column to analyze from data. allowed columns are: 'Date', 'Steps', 'Calories Burned', 'Distance Walked'. data (list of list): A list where each inner list contains a datetime object representing date, followed by numeric values for steps, calories burned, distance walked in that order. Each numeric value must be non-negative. Must not be empty. Returns: tuple: A tuple containing: - dict: dictionary with sum, mean, min, max of column. - matplotlib.axes.Axes: The Axes object of plotted line chart. line chart will have Date on x-axis, column value on y-axis, title Line Chart of (column). Requirements: - pandas - numpy - matplotlib.pyplot Raises: - KeyError: If specified column is not valid. - ValueError: If data list is empty or if any numeric values for steps, calories burned, distance walked are negative. Example: >>> data = [[datetime(2022, 1, 1), 5000, 200, 3.5], ... [datetime(2022, 1, 2), 5500, 220, 4.0], ... [datetime(2022, 1, 3), 6000, 240, 4.5]] >>> stats, ax = task_func('Steps', data) >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> print(stats) {'sum': 16500, 'mean': 5500.0, 'min': 5000, 'max': 6000}\n    \"\"\"\n    # Validate column\n    valid_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in valid_columns:\n        raise KeyError(f\"Invalid column. Allowed columns are: {valid_columns}\")\n\n    # Validate data\n    if not data:\n        raise ValueError(\"Data list is empty\")\n\n    for row in data:\n        if not all(isinstance(i, (int, float)) for i in row[1:]):\n            raise ValueError(\"All numeric values for steps, calories burned, distance walked must be non-negative\")\n\n    # Create dataframe\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    # Calculate stats\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n\n    # Plot\n    fig, ax = plt.subplots()\n    ax.plot(df['Date'], df[column])\n    ax.set_title(f\"Line Chart of {column}\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(column)\n\n    return stats, ax\n"}
{"task_id": "BigCodeBench/526", "solution": "import json\nimport pandas as pd\nimport numpy as np\nfrom collections import defaultdict\n\n\ndef task_func(input_file=\"data.json\"):\n    \"\"\"\n    Read list of dictionaries from JSON file, calculate mean and median for each key (ignoring non-numeric or missing values), convert results into Pandas DataFrame. Parameters: - input_file (str, optional): input JSON file name. Defaults to 'data.json'. file should contain a list of dictionaries. If a key is missing in dictionary, it treated as NaN for record. Non-numeric values ignored for calculation of mean and median. If all values for key are non-numeric or missing, statistics for that key will be NaN. Returns: - df (pd.DataFrame): A DataFrame indexed and sorted by variable names (keys) from input data, containing columns 'mean' and 'median'. Requirements: - numpy - collections - json - pandas Example: >>> df = task_func('data_1.json') a mean median b mean median c mean median\n    \"\"\"\n    with open(input_file) as f:\n        data = json.load(f)\n\n    # Create a dictionary to hold the results\n    results = defaultdict(lambda: {'mean': [], 'median': []})\n\n    # Iterate over each dictionary in the data\n    for record in data:\n        # Iterate over each key-value pair in the dictionary\n        for key, value in record.items():\n            # If the value is not a number or is missing, ignore it\n            if not isinstance(value, (int, float)):\n                continue\n\n            # Append the value to the list of values for the key\n            results[key]['mean'].append(value)\n            results[key]['median'].append(value)\n\n    # Convert the lists to numpy arrays and calculate the mean and median\n    for key, values in results.items():\n        results[key]['mean'] = np.mean(values['mean'])\n        results[key]['median'] = np.median(values['median'])\n\n    # Convert the results to a DataFrame\n    df = pd.DataFrame(results).T\n\n    # Sort the DataFrame by the keys\n    df = df.reindex(sorted(df.columns), axis=1)\n\n    return df\n"}
{"task_id": "BigCodeBench/528", "solution": "import csv\nfrom collections import Counter\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef task_func(file_path):\n    \"\"\"\n    Identifies duplicate rows from CSV file using csv library, convert duplicated rows into pandas DataFrame plot using matplotlib. Parameters: - file_path (str): path to CSV file. Returns: - dict: dictionary with duplicate rows as keys and counts as values. - Axes: matplotlib Axes object with bar chart of duplicate rows. Requirements: - csv - collections.Counter - pandas - matplotlib.pyplot Example: >>> duplicates, ax = task_func(\"sample_data.csv\") >>> duplicates {('Alice', '25', 'New York'): 3, ('Bob', '30', 'London'): 2} >>> type(ax) <class 'matplotlib.axes._axes.Axes'> Note: Ensure CSV file is in proper format and has .csv extension. Other file formats will raise ValueError.\n    \"\"\"\n    with open(file_path, 'r') as f:\n        reader = csv.reader(f)\n        data = list(reader)\n\n    # Count duplicates\n    duplicates = Counter(tuple(x) for x in data)\n\n    # Plot\n    df = pd.DataFrame(data, columns=data[0])\n    df.drop_duplicates(inplace=True)\n    df.plot(kind='bar', ax=ax)\n\n    return duplicates, ax\n"}
{"task_id": "BigCodeBench/530", "solution": "import pandas as pd\nimport numpy as np\nfrom collections import Counter\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df: pd.DataFrame) -> (Counter, plt.Axes):\n    \"\"\"\n    Identify duplicate entries in a DataFrame record age distribution for duplicate names. function takes a DataFrame with 'name' and 'age' columns. If age provided as floats, they rounded down to nearest integer. Age must not be negative, otherwise function raises ValueError. function identifies duplicate names and records age distribution. returns Counter object with age distribution and histogram plot showing distribution of ages for duplicate names, with age on the x-axis and count on the y-axis. Bins calculated based on minimum and maximum ages found among duplicates, adjusted by .5 to ensure integer ages fall squarely within bins. Parameters: df: pd.DataFrame - A DataFrame with columns 'name' and 'age'. Must not be empty. If empty, function raises ValueError. Returns: Counter: Age distribution among duplicate names. plt.Axes or None: Histogram plot displaying age distribution, or None if no duplicates. Requirements: - pandas - numpy - collections.Counter - seaborn - matplotlib.pyplot Raises: - ValueError: If DataFrame is empty or if age is negative. Example: >>> df = pd.DataFrame({'name': ['Alice', 'Bob', 'Alice'], 'age': [25, 26, 25]}) >>> duplicates_counter, ax = task_func(df) >>> duplicates_counter Counter({25: 2}) >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    df['age'] = df['age'].apply(lambda x: int(np.floor(x)))\n    if df['age'].min() < 0:\n        raise ValueError(\"Age cannot be negative\")\n\n    duplicates = df.groupby('name').apply(lambda x: x['age'].value_counts()).unstack()\n    duplicates.columns = duplicates.columns.map(int)\n    duplicates = duplicates.loc[duplicates.index.repeat(duplicates.columns)].reset_index(drop=True)\n    duplicates = duplicates.groupby('name').apply(lambda x: x.sum()).reset_index()\n\n    if duplicates.empty:\n        return Counter(), None\n\n    counts = duplicates['age'].values\n    bins = np.arange(duplicates['age'].min(), duplicates['age'].max() + 1) - 0.5\n\n    fig, ax = plt.subplots()\n    ax = sns.histplot(data=duplicates, x='age', hue='name', bins=bins, ax=ax)\n    ax.set_title('Age distribution for duplicate names')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Count')\n\n    return Counter(duplicates['age'].values), ax\n"}
{"task_id": "BigCodeBench/532", "solution": "import numpy as np\nfrom collections import Counter\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\n\ndef task_func(df, bins=4):\n    \"\"\"\n    Identify count duplicate values in DataFrame's 'value' column. This function plots histogram for all values in 'value' column overlays normal distribution curve on histogram. Parameters: df (pd.DataFrame): DataFrame containing numeric 'value' column. If empty, function will return empty Counter and empty plot. bins (int, optional): Number of bins for histogram. Defaults to 4. Returns: tuple: A tuple containing: - Counter: A Counter object with count of each duplicate value. - Axes: A matplotlib.axes.Axes object represents plot of histogram with 'value' column data. If applicable, normal distribution curve fitted to data is overlaid. histogram's bars are green with 60% opacity, normal distribution curve is black with a linewidth of 2. plot is titled \"Distribution\", with \"Value\" as x-axis label and \"Frequency\" as y-axis label. Requirements: - collections.Counter - numpy - scipy.stats.norm - matplotlib.pyplot Example: >>> df = pd.DataFrame({'value': [1, 2, 2, 3, 3, 4, 3, 2, 1, 4, 4, 4, 2, 2, 3, 1, 1, 1, 3, 2]}) >>> counter, ax = task_func(df) >>> ax <Axes: title={'center': 'Distribution'}, xlabel='Value', ylabel='Frequency'> >>> counter Counter({2: 6, 1: 5, 3: 5, 4: 4})\n    \"\"\"\n    if df.empty:\n        return Counter(), plt.figure()\n\n    values = df['value'].values\n    counter = Counter(values)\n\n    fig, ax = plt.subplots()\n    ax.hist(values, bins=bins, color='green', alpha=0.6)\n\n    x = np.linspace(values.min(), values.max(), 100)\n    prob = norm.pdf(x, values.mean(), values.std())\n    ax.plot(x, prob, color='black', linewidth=2)\n\n    ax.set_title(\"Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    plt.tight_layout()\n\n    return counter, ax\n\n"}
{"task_id": "BigCodeBench/553", "solution": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Constants\nCOLUMNS = ['A', 'B', 'C', 'D', 'E']\n\n\ndef task_func(a, b):\n    \"\"\"\n    Generate pandas DataFrame with random values based on lists 'a' and 'b', plot it as a bar chart. List 'a' sets DataFrame's row indices length of list 'b' determines number of columns using predefined names from 'COLUMNS = ['A', 'B', 'C', 'D', 'E']' list. Parameters: - a (list): list used to define number of rows in DataFrame. - b (list): Another list used to define number of columns in DataFrame. actual column names are predefined. Returns: - matplotlib.axes.Axes: Axes object of plotted bar chart. Requirements: - numpy - pandas - matplotlib Data Structure: - Uses pandas DataFrame to structure data. Example: >>> ax = task_func([1, 2, 3], ['A', 'B', 'C', 'D', 'E'])\n    \"\"\"\n    # Create DataFrame\n    df = pd.DataFrame(np.random.randint(0, 100, (len(a), len(b))), columns=b)\n    df.index = a\n\n    # Plot DataFrame\n    plt.figure(figsize=(10, 5))\n    df.plot(kind='bar', ax=plt.gca())\n\n    return plt.gca()\n\n"}
{"task_id": "BigCodeBench/560", "solution": "from datetime import datetime\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\ndef task_func(data):\n    \"\"\"\n    function plots bar chart of monthly data values for single year, with 'month' on x-axis 'value' on y-axis. Parameters: data (str): data string in format 'yyyy-mm-value'. Returns: Axes object: matplotlib.axes.Axes object representing plot with title formatted as 'Monthly Data for yyyy', x label as 'Month', y label as 'Value'. Requirements: - pandas - datetime - matplotlib.pyplot Example: >>> data = '2022-01-100,2022-02-200,2022-03-150,2022-04-300,2022-05-250,2022-06-350,2022-07-400,2022-08-450,2022-09-500,2022-10-550,2022-11-600,2022-12-650' >>> ax = task_func(data)\n    \"\"\"\n    # convert data string to pandas dataframe\n    df = pd.DataFrame([x.split('-') for x in data.split(',')], columns=['year', 'month', 'value'])\n\n    # convert month to datetime and set as index\n    df['month'] = pd.to_datetime(df['month'], format='%m')\n    df.set_index('month', inplace=True)\n\n    # reshape dataframe to monthly values\n    monthly_df = df.resample('M').sum()\n\n    # plot\n    ax = monthly_df.plot(kind='bar', title=f'Monthly Data for {df.year.values[0]}', xlabel='Month', ylabel='Value')\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/567", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef task_func(data):\n    \"\"\"\n    function draws histogram to visualize frequency distribution of numeric values provided in string format, with 'Value' on x-axis, 'Frequency' on y-axis and 'Histogram of Values' as title. Parameters: data (str): data string in the format 'value-value-value-...'. Returns: ax (matplotlib.axes._axes.Axes): Axes object of created histogram. Requirements: - pandas - numpy - matplotlib.pyplot Notes: - histogram uses bins calculated as `np.arange(data.min(), data.max()+2) - 0.5`. Example: >>> data = '1-2-3-4-5-6-7-8-9-10' >>> ax = task_func(data)\n    \"\"\"\n    # convert string to list of integers\n    data = list(map(int, data.split('-')))\n\n    # create histogram\n    ax = plt.hist(data, bins=np.arange(min(data), max(data)+2) - 0.5, edgecolor='black')\n\n    # set title\n    plt.title('Histogram of Values')\n\n    # show plot\n    plt.show()\n\n    return ax\n"}
{"task_id": "BigCodeBench/574", "solution": "from scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\ndef task_func(array_length=100, noise_level=0.2):\n    \"\"\"\n    Create noisy sine wave of specified length adjusts curve using curve_fit from scipy.optimize to data. Parameters: - array_length (int): Length of sine wave array. Defaults to 100. - noise_level (float): Level of noise added to sine wave. Defaults to 0.2. Returns: - Axes object: plot showing noisy sine wave and its adjusted curve. Requirements: - numpy - scipy.optimize - matplotlib.pyplot Example: >>> ax = task_func(100, 0.2)\n    \"\"\"\n    x = np.linspace(0, 1, array_length)\n    y = np.sin(2 * np.pi * x) + noise_level * np.random.randn(array_length)\n\n    popt, _ = curve_fit(lambda t, a, b, c: a * np.sin(2 * np.pi * t) + b * np.cos(2 * np.pi * t) + c, x, y)\n\n    plt.figure(figsize=(8, 6))\n    plt.plot(x, y, label='Noisy Sine Wave')\n    plt.plot(x, np.polyval(popt, x), label='Adjusted Curve')\n    plt.legend()\n    plt.grid(True)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Noisy Sine Wave and its Adjusted Curve')\n\n    return plt.gca()\n\n"}
{"task_id": "BigCodeBench/579", "solution": "import unicodedata\nimport csv\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\ndef task_func(csv_file):\n    \"\"\"\n    Reads a CSV file, normalizes text in to ASCII, counts words, returns 10 most common words along with their frequencies as a matplotlib bar plot and a list of tuples. Parameters: csv_file (str): The path to CSV file. Returns: tuple: A tuple containing matplotlib.axes.Axes object for bar plot and list of 10 most common words with their frequencies. Raises: FileNotFoundError: If the CSV file cannot be found at the specified path. IOError: If error in reading the file. Requirements: - unicodedata - csv - collections - matplotlib.pyplot Example: >>> create_dummy_csv_file('dummy.csv') >>> ax, most_common_words = task_func('dummy.csv') >>> os.remove('dummy.csv') >>> type(ax) <class 'matplotlib.axes._axes.Axes'> >>> type(most_common_words) <class 'list'> Note: function assumes CSV file contains text data and file is properly formatted.\n    \"\"\"\n    # Read CSV file\n    with open(csv_file, 'r', encoding='utf-8') as f:\n        reader = csv.reader(f)\n        text = [row[0] for row in reader]\n\n    # Normalize text to ASCII\n    text = [unicodedata.normalize('NFKD', t).encode('ascii', 'ignore').decode('utf-8', 'ignore') for t in text]\n\n    # Count words\n    words = [w for t in text for w in t.split()]\n    word_counts = Counter(words)\n\n    # Get 10 most common words\n    most_common_words = word_counts.most_common(10)\n\n    # Create bar plot\n    fig, ax = plt.subplots()\n    ax.bar([i[0] for i in most_common_words], [i[1] for i in most_common_words])\n    ax.set_xticks(range(len(most_common_words)))\n    ax.set_xticklabels([i[0] for i in most_common_words])\n    plt.show()\n\n    return ax, most_common_words\n"}
{"task_id": "BigCodeBench/582", "solution": "import numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\n\n\ndef task_func(size=1000):\n    \"\"\"\n    Create list of normally distributed random numbers plot their histogram and probability density function (PDF). Parameters: - size (int): number of random numbers to generate. Default is 1000. Requirements: - numpy - scipy.stats - matplotlib.pyplot Returns: - matplotlib.figure.Figure: figure object containing histogram and PDF plot. Example: >>> import matplotlib >>> fig = task_func(size=500) >>> isinstance(fig, matplotlib.figure.Figure) # Check if output is matplotlib figure object True >>> len(fig.axes[0].lines) == 1 # Ensure one line plot on axes for PDF True >>> len(fig.axes[0].patches) > 10 # Check if histogram bars (patches) present True\n    \"\"\"\n    # Generate random numbers\n    random_numbers = np.random.normal(0, 1, size)\n\n    # Create figure\n    fig, ax = plt.subplots()\n\n    # Plot histogram\n    ax.hist(random_numbers, bins=30, density=True)\n\n    # Plot PDF\n    xmin, xmax = ax.get_xlim()\n    x = np.linspace(xmin, xmax, 100)\n    p = stats.norm.pdf(x, random_numbers.mean(), random_numbers.std())\n    ax.plot(x, p, 'k', linewidth=2)\n\n    return fig\n\n"}
{"task_id": "BigCodeBench/583", "solution": "import rsa\nimport os\nfrom Crypto.Random import get_random_bytes\nfrom Crypto.Cipher import AES\nfrom base64 import b64encode, b64decode\n\ndef task_func():\n    \"\"\"\n    Generates RSA public and private key pair and saves private key in a file after encrypting it with password using AES encryption. Returns public key and filename of encrypted private key, along with encryption details for testing. name of output file is in format of \"private_key_<number>.txt\", where <number> is hex representation of 8 randomly generated bytes. Returns: rsa.PublicKey: The RSA public key. str: filename where encrypted private key is stored. bytes: encryption password, for testing decryption. bytes: encryption nonce, for testing decryption. Requirements: - rsa - os - Crypto.Cipher.AES - Crypto.Random.get_random_bytes - base64.b64encode - base54.b64decode Examples: >>> pub_key, filename, password, nonce = task_func() >>> isinstance(pub_key, rsa.PublicKey) True >>> isinstance(filename, str) True >>> isinstance(password, bytes) True >>> isinstance(nonce, bytes) True\n    \"\"\"\n    # Generate RSA public and private key pair\n    (pub_key, priv_key) = rsa.newkeys(512)\n\n    # Generate a random password\n    password = get_random_bytes(16)\n\n    # Encrypt the private key with AES and save it to a file\n    filename = f\"private_key_{int(os.urandom(8).hex())}.txt\"\n    with open(filename, \"wb\") as f:\n        f.write(b64encode(AES.new(password, AES.MODE_EAX).encrypt(priv_key.save_pkcs1())))\n\n    return pub_key, filename, password, AES.new(password, AES.MODE_EAX).nonce\n"}
{"task_id": "BigCodeBench/587", "solution": "import rsa\nimport os\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives import padding\nfrom base64 import b64encode\n\ndef task_func(file_path):\n    \"\"\"\n    Generates RSA public and private keys, encrypts file using AES encryption, then encrypts AES key with public RSA key. encrypted file and encrypted AES key saved in separate new files. method demonstrates hybrid encryption approach. Parameters: file_path (str): path to file to be encrypted. Returns: rsa.PublicKey: RSA public key. str: filename of encrypted file. str: filename of the file containing encrypted AES key. Requirements: - rsa - os - cryptography.hazmat.backends.default_backend - cryptography.hazmat.primitives.ciphers.Cipher - cryptography.hazmat.primitives.ciphers.algorithms - cryptography.hazmat.primitives.ciphers.modes - cryptography.hazmat.primitives - base64.b64encode Examples: >>> pub_key, encrypted_file, encrypted_key_file = task_func('my_file.txt') >>> isinstance(pub_key, rsa.PublicKey) True >>> encrypted_file.endswith('.encrypted') True >>> encrypted_key_file.endswith('.encrypted') True\n    \"\"\"\n    # Generate RSA keys\n    public_key, private_key = rsa.newkeys(512)\n\n    # Save public key\n    with open('public_key.pem', 'wb') as f:\n        f.write(public_key.save_pkcs1())\n\n    # Save private key\n    with open('private_key.pem', 'wb') as f:\n        f.write(private_key.save_pkcs1())\n\n    # Load public key\n    with open('public_key.pem', 'rb') as f:\n        public_key = rsa.PublicKey.load_pkcs1(f.read())\n\n    # Load private key\n    with open('private_key.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n\n    # Read file\n    with open(file_path, 'rb') as f:\n        data = f.read()\n\n    # Encrypt data with AES\n    cipher = Cipher(algorithms.AES(key_size), modes.CBC())\n    encryptor = cipher.encryptor()\n    data = b64encode(encryptor.update(data) + encryptor.finalize()).decode()\n\n    # Encrypt AES key with RSA\n    encrypted_key = rsa.encrypt(private_key.save_pkcs1(), public_key)\n\n    # Save encrypted data\n    with open(f'{file_path}.encrypted', 'wb') as f:\n        f.write(data.encode())\n\n    # Save encrypted AES key\n    with open(f'{file_path}_key.encrypted', 'wb') as f:\n        f.write(encrypted_key)\n\n    return public_key, f'{file_path}.encrypted', f'{file_path}_key.encrypted'\n"}
{"task_id": "BigCodeBench/590", "solution": "import urllib.request\nfrom pyquery import PyQuery as pq\nfrom datetime import datetime\nimport pandas as pd\n\ndef task_func(url):\n    \"\"\"\n    Extracts text and href attributes of all anchor tags from given URL's HTML content, returns this data in a pandas DataFrame along with time of data extraction. Parameters: url (str): URL from which to fetch HTML content. Returns: pandas.DataFrame: A DataFrame with columns 'text', 'href', and 'fetch_time'. Each row corresponds to an anchor tag in the HTML, with 'text' and 'href' containing text and hyperlink reference of anchor tag, respectively. 'fetch_time' contains timestamp of when data was fetched in the format 'YYYY-MM-DD HH:MM:SS'. Raises: ValueError: If provided URL is invalid or empty. URLError: If issue with network connectivity or server. Requirements: - urllib.request - pyquery - datime - pandas - urllib.error Example: >>> df = task_func('https://en.wikibooks.org/wiki/Main_Page') Note: function requires internet connectivity to fetch HTML content.\n    \"\"\"\n\n    try:\n        response = urllib.request.urlopen(url)\n        html_content = response.read()\n        pq = pq(html_content)\n\n        data = []\n        for a in pq('a'):\n            data.append({\n                'text': a.text(),\n                'href': a.attr('href'),\n                'fetch_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            })\n\n        df = pd.DataFrame(data)\n        return df\n\n    except (ValueError, URLError) as e:\n        print(f\"Error: {e}\")\n        return None\n"}
{"task_id": "BigCodeBench/592", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nSENSORS = ['Temperature', 'Humidity', 'Pressure']\nOUTPUT_DIR = './output'\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Create sensor data for specified number of hours save it in CSV file with coloumns 'Time', 'Temperature', 'Humidity' 'Pressure'. Parameters: - hours (int): number of hours for sensor data is to be generated - output_dir (str, optional): output file path Returns: - hours (int): Number of hours to generate data for. Requirements: - datetime - os - random - csv Example: >>> file_path = task_func(1) # Generate data for 1 hour >>> os.path.exists(file_path) # Check if file was created True >>> isinstance(file_path, str) # Validate return type is string True >>> 'sensor_data.csv' in file_path # Ensure filename is correct True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    file_path = os.path.join(output_dir, f'sensor_data_{datetime.now().strftime(\"%Y%m%d%H%M%S\")}.csv')\n\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow([\"Time\", \"Temperature\", \"Humidity\", \"Pressure\"])\n\n        for i in range(hours):\n            time = datetime.now() - timedelta(hours=i)\n            temperature = randint(20, 30)\n            humidity = randint(50, 100)\n            pressure = randint(950, 1050)\n\n            writer.writerow([time, temperature, humidity, pressure])\n\n    return file_path\n"}
{"task_id": "BigCodeBench/593", "solution": "import csv\nimport os\nfrom datetime import datetime\nfrom random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Constants\nVEHICLE_TYPES = ['Car', 'Bus', 'Truck', 'Bike']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generates traffic data for different vehicle types over specified number hours saves data to CSV file with coloumns 'Time', 'Car', 'Bus' 'Truck' 'Bike' plots data in line chart with 'Time' on x-axis 'Vehicle Count' on y-axis. Parameters: - hours (int): Number of hours to generate data for. - output_dir (str, optional): output file path Returns: - tuple: Path to CSV file matplotlib axes object of line plot. Requirements: - pandas - os - csv - matplotlib.pyplot - random - datetime Example: >>> import matplotlib >>> file_path, ax = task_func(2) # Generate data for 2 hours >>> isinstance(file_path, str) True >>> 'traffic_data.csv' in file_path True >>> isinstance(ax, matplotlib.axes.Axes) True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    data = {'Time': [], 'Car': [], 'Bus': [], 'Truck': [], 'Bike': []}\n\n    for i in range(hours):\n        time = datetime.now() + timedelta(hours=i)\n        data['Time'].append(time)\n\n        car = randint(0, 100)\n        data['Car'].append(car)\n\n        bus = randint(0, 100)\n        data['Bus'].append(bus)\n\n        truck = randint(0, 100)\n        data['Truck'].append(truck)\n\n        bike = randint(0, 100)\n        data['Bike'].append(bike)\n\n    df = pd.DataFrame(data)\n    df.to_csv(os.path.join(output_dir, 'traffic_data.csv'), index=False)\n\n    plt.figure(figsize=(10, 5))\n\n    for vehicle in VEHICLE_TYPES:\n        plt.plot(df['Time'], df[vehicle], label=vehicle)\n\n    plt.xlabel('Time')\n    plt.ylabel('Vehicle Count')\n    plt.title('Traffic Data')\n    plt.legend()\n\n    plt.savefig(os.path.join(output_dir, 'traffic_plot.png'))\n\n    return os.path.join(output_dir, 'traffic_plot.png')\n\n"}
{"task_id": "BigCodeBench/594", "solution": "import csv\nimport os\nimport shutil\nfrom datetime import datetime\nfrom random import randint\n\n# Constants\nWEATHER_CONDITIONS = ['Sunny', 'Cloudy', 'Rainy', 'Snowy', 'Stormy']\nOUTPUT_DIR = './output'\n\n\ndef task_func(hours, output_dir=OUTPUT_DIR):\n    \"\"\"\n    Generate weather data for specified number of hours, save it in CSV file with colomns 'Time' and 'Condition' back up file to backup directory. Parameters: - hours (int): number of hours for which weather data to be generated. - output_dir (str, optional): output file path Returns: - str: path of generated CSV file. Requirements: - datetime - os - random - csv - shutil Example: >>> 'weather_data.csv' in task_func(24) True >>> 'weather_data.csv' in task_func(10) True\n    \"\"\"\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    filename = f'weather_data_{datetime.now().strftime(\"%Y%m%d%H%M%S\")}.csv'\n    filepath = os.path.join(output_dir, filename)\n\n    with open(filepath, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        for i in range(hours):\n            time = datetime.now() + timedelta(hours=i)\n            condition = WEATHER_CONDITIONS[randint(0, 4)]\n            writer.writerow([time.strftime(\"%Y-%m-%d %H:%M:%S\"), condition])\n\n    shutil.copy(filepath, os.path.join(output_dir, 'backup', filename))\n\n    return filepath\n\n"}
{"task_id": "BigCodeBench/618", "solution": "from random import randint\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\n\n# Constants\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E']\nPENALTY_COST = 1000  # in dollars\n\ndef task_func(goals, penalties):\n    \"\"\"\n    Generate visualize Pandas DataFrame of results of football matches for multiple teams 'Team' with random goals 'Goals' and penalties 'Penalty Cost'. Penalties converted into fines according to penalty costs. Parameters: goals (int): maximum number of goals team can score in match. penalties (int): maximum number of penalties team can receive in match. Returns: pd.DataFrame: dataframe containing match results. list: list containing two seaborn plot objects (Axes) for goals and penalty costs. Requirements: - pandas - seaborn - matplotlib.pyplot - random Example: >>> df, plots = task_func(5, 3)\n    \"\"\"\n    # Generate random goals and penalties\n    goals = [randint(0, goals) for _ in TEAMS]\n    penalties = [randint(0, penalties) for _ in TEAMS]\n\n    # Calculate fines\n    fines = [max(0, -cost) for cost in penalties]\n\n    # Create DataFrame\n    df = pd.DataFrame({'Team': TEAMS, 'Goals': goals, 'Penalties': penalties, 'Fines': fines})\n\n    # Create plots\n    fig, axs = plt.subplots(2)\n\n    # Goals plot\n    sns.barplot(data=df, x='Team', y='Goals', ax=axs[0])\n    axs[0].set_title('Goals')\n\n    # Penalty costs plot\n    sns.barplot(data=df, x='Team', y='Penalties', ax=axs[1])\n    axs[1].set_title('Penalty Costs')\n\n    return df, axs\n"}
{"task_id": "BigCodeBench/636", "solution": "import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Constants\nCOLUMNS = ['Column1', 'Column2', 'Column3', 'Column4', 'Column5']\n\n\ndef task_func(rows):\n    \"\"\"\n    Create Pandas DataFrame with random integer values between 0 and 9 for given number of rows. Count non-zero values in each column and visualize information using bar plot. Parameters: rows (int): number of rows in DataFrame. Returns: tuple: A tuple containing following elements: - DataFrame: generated DataFrame with random integer values. - Axes: matplotlib Axes object containing bar plot. Requirements: - numpy - pandas - matplotlib.pyplot Example: >>> df, ax = task_func(10) >>> print(ax.title.get_text()) # Should return 'Non-Zero Value Counts' Non-Zero Value Counts\n    \"\"\"\n    # Generate DataFrame with random integer values\n    df = pd.DataFrame(np.random.randint(0, 10, (rows, 5)), columns=COLUMNS)\n\n    # Count non-zero values in each column\n    non_zero_counts = df.count(axis=0)\n\n    # Create bar plot\n    ax = non_zero_counts.plot(kind='bar')\n\n    return df, ax\n\n"}
{"task_id": "BigCodeBench/637", "solution": "from random import sample\nfrom typing import Tuple\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\n\ndef task_func(num_students):\n    \"\"\"\n    Generate Pandas DataFrame displays grades of randomly selected group of students in multiple courses. Calculate average grade in each course, number of students with passing grade (>= 60), visualize this information using bar plot with title 'Course-wise Average and Passing Grade Counts'. Parameters: num_students (int): number of students in the sample. Returns: Tuple[pd.DataFrame, plt.Axes]: tuple containing the generated DataFrame and bar plot's Axes object. Requirements: - pandas - numpy - matplotlib.pyplot - random - typing Example: >>> df, ax = task_func(50) >>> ax.get_title() 'Course-wise Average and Passing Grade Counts'\n    \"\"\"\n    courses = ['Math', 'English', 'Science', 'History', 'Art']\n    grades = [np.random.randint(20, 100, num_students) for _ in courses]\n    df = pd.DataFrame(grades, columns=courses, index=[f'Student_{i}' for i in range(num_students)])\n\n    for course in courses:\n        df[f'{course}_avg'] = df[course].mean()\n        df[f'{course}_pass'] = df[course].apply(lambda x: len(x[x >= 60]))\n\n    fig, ax = plt.subplots()\n    ax.bar(df.index, df['Math_avg'], label='Math')\n    ax.bar(df.index, df['English_avg'], label='English')\n    ax.bar(df.index, df['Science_avg'], label='Science')\n    ax.bar(df.index, df['History_avg'], label='History')\n    ax.bar(df.index, df['Art_avg'], label='Art')\n\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n    ax.set_ylabel('Grades')\n    ax.legend()\n\n    return df, ax\n"}
{"task_id": "BigCodeBench/654", "solution": "import matplotlib.pyplot as plt\nimport scipy.optimize as optimize\nimport numpy as np\n\n\ndef task_func(array, target_value):\n    \"\"\"\n    Fit exponential decay function to indices in the array where first column matches target value. Parameters: - array (np.ndarray): A numpy array where first column searched for target value. - target_value (float or int): value in the first column to filter data for fitting. Returns: - tuple: Containing optimized parameters of fitting function (popt) and matplotlib Axes object. Requirements: - numpy - scipy.optimize - matplotlib.pyplot Example: >>> import numpy as np >>> array = np.array([[1, 2], [1, 3], [1, 4], [2, 5], [2, 6]]) >>> target = 1 >>> params, ax = task_func(array, target) >>> len(params) 3\n    \"\"\"\n    # Filter data for fitting\n    filtered_data = array[array[:, 0] == target_value]\n\n    # Define exponential decay function\n    def decay_func(x, a, b):\n        return a * np.exp(-b * x)\n\n    # Optimize parameters\n    popt, pcov = optimize.curve_fit(decay_func, filtered_data[:, 1], filtered_data[:, 0])\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.plot(filtered_data[:, 1], filtered_data[:, 0], 'o', label='Original data')\n    ax.plot(filtered_data[:, 1], decay_func(filtered_data[:, 1], *popt), '-', label='Fitted curve')\n    ax.legend()\n\n    return popt, ax\n"}
{"task_id": "BigCodeBench/655", "solution": "import re\nimport nltk\nfrom sklearn.decomposition import NMF\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Ensure nltk's stopwords are downloaded\nnltk.download('stopwords')\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\nSTOPWORDS = nltk.corpus.stopwords.words('english')\n\n\ndef task_func(texts, num_topics):\n    \"\"\"\n    Performs topic extraction from text documents using Non-Negative Matrix Factorization (NMF). function preprocesses input texts by removing non-alphanumeric characters (excluding spaces), converting all characters to lowercase removing stopwords. vectorizes processed texts using TF-IDF and applies NMF to extract specified number of topics. Each topic represented as list of most significant words based on NMF component weights. Parameters: - texts (list of str): input text documents from which to extract topics. - num_topics (int): number of topics to extract. Returns: - list of list of str: A list where each element is list of words representing a topic. Requirements: - re - nltk - sklearn.decomposition - sklearn.feature_extraction.text Example: >>> texts = [ ... \"Data science involves study of data.\", ... \"Machine learning provides systems ability to learn from data.\", ... \"Python is a programming language used in data science.\" ... ] >>> topics = task_func(texts, 2) >>> print(topics) [['data', 'science'], ['systems', 'provides']] Note: exact output may vary depending on TF-IDF vectorization and NMF initialization.\n    \"\"\"\n\n    # Preprocess texts\n    processed_texts = [ALPHANUMERIC.sub(' ', text.lower()).split() for text in texts]\n\n    # Remove stopwords\n    processed_texts = [[word for word in text if word not in STOPWORDS] for text in processed_texts]\n\n    # Vectorize texts\n    vectorizer = TfidfVectorizer(max_features=1000)\n    X = vectorizer.fit_transform(processed_texts)\n\n    # Apply NMF\n    nmf = NMF(n_components=num_topics)\n    nmf.fit(X)\n\n    # Get topics\n    topics = [vectorizer.get_feature_names()[i] for i in nmf.components_.argsort()[-1:-num_topics:-1]]\n\n    return topics\n"}
{"task_id": "BigCodeBench/657", "solution": "import re\nimport nltk\nfrom gensim.models import Word2Vec\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\n\ndef task_func(texts, stopwords=None):\n    \"\"\"\n    Generate word vectors from list texts using gensim Word2Vec model nltk.corpus.stopwords. texts first cleaned by removing all non-alphanumeric characters except space, lowercased, and stop words removed. Parameters: texts (list): list of strings. stopwords (list, optional): list of stopwords to be removed If not provided, nltk's stopwords used. Returns: Word2Vec: trained Word2Vec model. Requirements: - re - nltk - gensim Example: >>> texts = [\"Hello, World!\", \"Machine Learning is great\", \"Python is my favorite programming language\"] >>> model = task_func(texts) >>> vector = model.wv['python']\n    \"\"\"\n    # Remove non-alphanumeric characters and lowercased\n    texts = [ALPHANUMERIC.sub(' ', text.lower()).split() for text in texts]\n\n    # Remove stop words\n    if stopwords is None:\n        stopwords = nltk.corpus.stopwords.words('english')\n    texts = [[word for word in text if word not in stopwords] for text in texts]\n\n    # Train Word2Vec model\n    model = Word2Vec(texts, min_count=1)\n\n    return model\n"}
{"task_id": "BigCodeBench/678", "solution": "import pandas as pd\nimport json\nimport os\nimport shutil\n\ndef task_func(path):\n    \"\"\"\n    Processes JSON files in directory. function reads each JSON file alphabetically into DataFrame inserts \"Source\" column specifies filename. processed files moved to \"processed\" subdirectory. path may not exist initially. Parameters: - path (str): path of directory containing JSON files. Returns: - df (pandas.DataFrame): DataFrame containing data from all processed files. Requirements: - pandas - json - os - shutil Example: >>> os.mkdir('data') >>> open('data/a.json', 'w') as f: ... f.write('[{\"a\": 1, \"b\": 2}, {\"a\": 3, \"b\": 4}]') ... 36 >>> open('data/b.json', 'w') as f: ... f.write('[{\"a\": 5, \"b\": 6}, {\"a\": 7, \"b\": 8}]') ... 36 >>> df = task_func('data') >>> print(df) a b source 0 5 6 b.json 1 7 8 b.json 0 1 2 a.json 1 3 4 a.json >>> shutil.rmtree('data')\n    \"\"\"\n    if not os.path.exists(path):\n        os.makedirs(path)\n\n    processed_path = os.path.join(path, 'processed')\n    if not os.path.exists(processed_path):\n        os.makedirs(processed_path)\n\n    df_list = []\n    for filename in os.listdir(path):\n        if filename.endswith('.json'):\n            with open(os.path.join(path, filename), 'r') as f:\n                data = json.load(f)\n                df = pd.DataFrame(data)\n                df['Source'] = filename\n                df_list.append(df)\n\n    df = pd.concat(df_list)\n    df.sort_values(by=['Source', 'a'], inplace=True)\n\n    df.to_csv(os.path.join(processed_path, 'processed.csv'), index=False)\n\n    return df\n"}
{"task_id": "BigCodeBench/720", "solution": "import os\nimport csv\nimport random\nfrom datetime import datetime\n\ndef task_func():\n    \"\"\"\n    Create and delete CSV file \"task_func_data/Output.txt\" with sensor data for temperature and humidity. data generated randomly, written in append mode, file deleted after use. Returns: - Returns path to the CSV file \"task_func_data/Output.txt\" before deletion. Requirements: - os - csv - random - datatime Example: >>> task_func()\n    \"\"\"\n    # Create a new CSV file\n    with open('task_func_data/Output.txt', 'w', newline='') as file:\n        writer = csv.writer(file)\n        # Write the header\n        writer.writerow([\"ID\", \"Time\", \"Temperature\", \"Humidity\"])\n\n        # Generate random data\n        for i in range(10):\n            id = i + 1\n            time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            temperature = round(random.uniform(20.0, 30.0), 2)\n            humidity = round(random.uniform(40.0, 60.0), 2)\n            # Write the data to the CSV file\n            writer.writerow([id, time, temperature, humidity])\n\n    # Return the path to the CSV file\n    return 'task_func_data/Output.txt'\n"}
{"task_id": "BigCodeBench/723", "solution": "import urllib.request\nfrom bs4 import BeautifulSoup\nimport csv\nimport os\n\n# Constants\nCSV_FILE_PATH = 'scraped_data.csv'\n\ndef task_func(url):\n    \"\"\"\n    Scrape data from given URL save scraped data to CSV file. Parameters: - url (str): URL to scrape data from. Returns: - CSV_FILE_PATH (str): path of the CSV file where scraped data is saved. Requirements: - urllib - bs4 - csv - os Example: >>> task_func('http://www.example.com/') 'scraped_data.csv'\n    \"\"\"\n    # Open URL\n    with urllib.request.urlopen(url) as response:\n        html = response.read()\n\n    # Parse HTML\n    soup = BeautifulSoup(html, 'html.parser')\n\n    # Extract data\n    data = []\n    for element in soup.find_all('div'):\n        if element.get('class') == ['class_name']:\n            data.append([element.text])\n\n    # Save to CSV\n    with open(CSV_FILE_PATH, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(data)\n\n    return CSV_FILE_PATH\n"}
{"task_id": "BigCodeBench/752", "solution": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\ndef task_func(data, target_column, test_size=0.2, random_state = 0) -> float:\n    \"\"\"\n    Train linear regression model return model score of test set. provided DataFrame used as training data target_column used as target in training model. Before training provided data split into training and test set using test_size and random_state parameters. Parameters: data (DataFrame): input data for training. target_column (str): column to predict. random_state (int): seed for train-test split. Defaults to 0 test_size (float): fractional size of test set. Defaults to 0.2 Returns: float: model's score. Raises: ValueError: If data not a DataFrame. ValueError: If data empty. ValueError If target_column not a column of data. ValueError If data contains values not numeric. ValueError If random_state not an integer. ValueError If test_size not between 0 and 1. Requirements: - pandas - sklearn.model_selection.train_test_split - sklearn.linear_model.LinearRegression - numpy Example: >>> rng = np.random.default_rng(seed=42) >>> data = pd.DataFrame({ ... 'x1': rng.random(100), ... 'x2': rng.random(100), ... 'y': rng.random(100) ... }) >>> result = task_func(data, 'y', random_state=2, test_size=0.3) >>> result -0.25486317198996633 >>> data = pd.DataFrame({ ... 'x1': rng.random(500), ... }) >>> data['y'] = data['x1'] * 2 + 1 >>> result = task_func(data, 'y', random_state=9, test_size=0.1) >>> result 1.0\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame\")\n    if data.empty:\n        raise ValueError(\"Data must not be empty\")\n    if not target_column in data.columns:\n        raise ValueError(f\"Target column '{target_column}' not found in data\")\n    if not all(isinstance(col, (int, float)) for col in data.select_dtypes(include=[np.number]).columns):\n        raise ValueError(\"Data must only contain numeric values\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"Random state must be an integer\")\n    if not (0 <= test_size <= 1):\n        raise ValueError(\"Test size must be between 0 and 1\")\n\n    X_train, X_test, y_train, y_test = train_test_split(data.drop(target_column, axis=1), data[target_column], test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return model.score(X_test, y_test)\n"}
{"task_id": "BigCodeBench/760", "solution": "import pandas as pd\nimport numpy as np\nimport codecs\nimport re\nimport datetime\n\ndef task_func(start_year=1980, end_year=2000, email_domain='example.com',\n           latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'],\n           other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'], \n           rng_seed=None):\n    \"\"\"\n    Creates random DataFrame with 100 records. Each record consists of ID (ranging from 1 to 100), Name (randomly selected from provided lists of Latin and other names), Date of Birth (randomly generated dates between specified years), Email (constructed using name, year of birth, provided email domain). Improperly encoded Latin characters in names corrected during process. Parameters: - start_year (int): starting year for range of birth years. Defaults to 1980. - end_year (int): ending year for range birth years. Defaults to 2000. - email_domain (str): domain used for email addresses. Defaults to 'example.com'. latin_names (list of str): list of Latin names used in generation. Defaults to: latin_names=['Sopet\u00f3n', 'M\u00e9ndez', 'G\u00f3mez', 'P\u00e9rez', 'Mu\u00f1oz'] - other_names (list of str): list of other names to used in generation. Defaults to: other_names=['Smith', 'Johnson', 'Williams', 'Brown', 'Jones'] - rng_seed (int): seed for rng. Returns: - DataFrame: pandas DataFrame containing generated user data. DataFrame has columns: 'ID', 'Name', 'Date of Birth', 'Email'. Requirements: - pandas - numpy - codecs - re - datetime Examples: >>> df = task_func(rng_seed=1) >>> print(df) ID Name Date of Birth Email 0 1 Brown 1992-09-10 brown1992@example.com 1 2 Smith 1996-02-13 smith1996@example.com 2 3 Jones 1986-10-19 jones1986@example.com 3 4 G\u00f3mez 2000-12-11 g\u00f3mez2000@example.com 4 5 G\u00f3mez 1984-08-24 g\u00f3mez1984@example.95 96 Johnson 1990-09-17 johnson1990@example 96 97 Brown 1992-10-14 brown1992@example.com 97 98 Mu\u00f1oz 1998-05-04 mu\u00f1oz1998@example 98 99 Mu\u00f1oz 1982-01-01 mu\u00f1oz1982@example.com 99 100 Jones 1990-03-28 jones1990@example.com <BLANKLINE> [100 rows 4 columns] df = task_func(start_year=0 end_year=1200 email_domain='test.at' rng_seed=3) print(df) ID Name Date Birth Email 1 Sopet\u00f3n 0952-09-01 00:00:00 sopet\u00f3n952@test.at 2 Brown 0875-10-10 00:00:00 brown875@test.at 3 Sopet\u00f3n 0605-08-15 00:00:00 sopet\u00f3n605@test.at 3 4 G\u00f3mez 0337-11-23 00:00:00 g\u00f3mez337@test.at 4 5 G\u00f3mez 0641-04-27 00:00:00 g\u00f3mez641@test.at 95 96 Brown 0044-05-17 00:00:00 brown44@test.at 96 97 Williams 0530-01-21 00:00:00 williams530@test.at 97 98 Johnson 1005-12-15 00:00:00 johnson1005@test.at 98 99 M\u00e9ndez 1134-07-19 00:00:00 m\u00e9ndez1134@test.at 99 100 Johnson 0696-08-22 00:00:00 johnson696@test.at <BLANKLINE> [100 x 4 columns]\n    \"\"\"\n    # Set random seed\n    np.random.seed(rng_seed)\n\n    # Generate names\n    names = [f'{name} {other}' for name, other in zip(latin_names, other_names)]\n\n    # Generate birth dates\n    birth_dates = [(np.random.randint(start_year, end_year), np.random.randint(1, 365), np.random.randint(1, 31))\n                   for _ in range(100)]\n\n    # Generate emails\n    emails = [f'{name.replace(\" \", \".\").lower()}{year}{day}@example.com' for name, year, day in birth_dates]\n\n    # Create dataframe\n    df = pd.DataFrame({'ID': np.arange(1, 101), 'Name': names, 'Date of Birth': birth_dates, 'Email': emails})\n\n    # Correctly encode Latin characters in names\n    df['Name'] = df['Name'].apply(lambda name: re.sub(r'\\p{L}+', '', name))\n\n    return df\n"}
{"task_id": "BigCodeBench/763", "solution": "import numpy as np\nfrom collections import defaultdict\nimport json\nimport csv\n\n# Constants\ndef task_func(input_file, output_file):\n    \"\"\"\n    Read list of dictionaries from JSON file, calculate mean and median for each key, write results to CSV file. Parameters: - input_file (str): input JSON file name. - output_file (str): output CSV file name. Returns: - dict: A dictionary where each key is a field from input JSON and each value is another dictionary with mean and median of that field. Requirements: - numpy - collections - json - csv Example: >>> task_func('data.json', 'stats.csv')\n    \"\"\"\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    result = defaultdict(lambda: defaultdict(list))\n\n    for d in data:\n        for key, value in d.items():\n            result[key]['mean'].append(np.mean(value))\n            result[key]['median'].append(np.median(value))\n\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Field', 'Mean', 'Median'])\n        for key, value in result.items():\n            writer.writerow([key, np.mean(value['mean']), np.median(value['median'])])\n\n    return result\n"}
{"task_id": "BigCodeBench/765", "solution": "import os\nfrom pathlib import Path\nimport shutil\n\ndef task_func(kwargs, target_dir=\"non_none_files\"):\n    \"\"\"\n    Process files from dictionary by checking if file exists, if has content, copies it to target directory. Parameters: - kwargs (dict): dictionary where keys are full file paths and values are file content. - target_dir (str, optional): directory where files will be copied to. Defaults to 'non_none_files'. Returns: - copied_files (list): list of full file paths copied. Requirements: - os - pathlib.Path - shutil Example: >>> files = {'/path/to/file1.txt': 'Hello', '/path/to/file2.txt': None, '/path/to/file3.txt': 'World'} >>> task_func(files) >>> files = {'/path/to/file4.txt': 'Another', '/path/to/file5.txt': 'Example'} >>> task_func(files, target_dir=\"another_directory\")\n    \"\"\"\n    copied_files = []\n    for file_path, content in kwargs.items():\n        if content is not None:\n            file_name = Path(file_path).name\n            target_file_path = os.path.join(target_dir, file_name)\n            with open(target_file_path, 'w') as f:\n                f.write(content)\n            copied_files.append(target_file_path)\n    return copied_files\n"}
{"task_id": "BigCodeBench/771", "solution": "import re\nimport os\nfrom pathlib import Path\nimport csv\n\ndef task_func(directory: str, pattern: str = r'^(.*?)-\\d+\\.csv$') -> list:\n\n    \"\"\"\n    Processes CSV files in a directory based on specified pattern creates new files with altered names while preserving content, you've laid out solid foundation with initial tests. Parameters: - directory (str): path to directory containing CSV files to be processed. - pattern (str, optional): A regular expression pattern filenames of interest should match. Returns: - new_files (list): A list of strings, each string is the filename of new CSV file created by the function. Requirements: - re - os - pathlib - csv Example: >>> task_func(\"/mnt/data/test_data\") ['Shan.csv', 'Shannon.csv']\n    \"\"\"\n\n    # Get a list of all CSV files in the directory\n    csv_files = [f for f in os.listdir(directory) if re.match(pattern, f)]\n\n    # Create a new list to store the new filenames\n    new_files = []\n\n    # For each CSV file, rename it and add the new filename to the new_files list\n    for csv_file in csv_files:\n        with open(os.path.join(directory, csv_file), 'r') as csv_in, open(os.path.join(directory, csv_file.replace('.csv', '-new.csv')), 'w', newline='') as csv_out:\n            reader = csv.reader(csv_in)\n            writer = csv.writer(csv_out)\n            for row in reader:\n                writer.writerow(row)\n        new_files.append(csv_file.replace('.csv', '-new.csv'))\n\n    return new_files\n"}
{"task_id": "BigCodeBench/777", "solution": "import re\nimport os\nimport zipfile\n\ndef task_func(directory, pattern=r'^(.*?)-\\d+\\.zip$'):\n    \"\"\"\n    Unzip all zip files in a directory whose name matches certain pattern by splitting filename last time \"-\" occurs and using prefix part of filename as directory to extract. Parameters: - directory (str): directory where zip files are located. - pattern (str): Regex pattern to match zip files. Returns: - list: list of directories where files were extracted. Requirements: - os - re - zipfile Example: >>> task_func('/tmp/my_data') ('/tmp/backup/backup_20230827010101', [])\n    \"\"\"\n    result = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            match = re.search(pattern, file)\n            if match:\n                zip_path = os.path.join(root, file)\n                with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                    zip_ref.extractall(os.path.join(root, match.group(1)))\n                result.append(os.path.join(root, match.group(1)))\n    return result\n"}
{"task_id": "BigCodeBench/785", "solution": "import subprocess\nimport os\nimport glob\n\n# Constants\nARCHIVE_DIR = '/tmp/archive'\n\ndef task_func(pattern):\n    \"\"\"\n    Archive all files match particular pattern then delete the original files. Parameters: - pattern (str): pattern to match files. Returns: - archive_file (str): archive file path. Requirements: - subprocess - os - glob Example: >>> task_func('*.txt') Note: This function will return archive file path.\n    \"\"\"\n    # Get all files match the pattern\n    files = glob.glob(pattern)\n\n    # Archive all files\n    archive_file = os.path.join(ARCHIVE_DIR, 'archive.tar.gz')\n    subprocess.run(['tar', '-czvf', archive_file] + files)\n\n    # Delete original files\n    for file in files:\n        os.remove(file)\n\n    return archive_file\n"}
{"task_id": "BigCodeBench/800", "solution": "import csv\nimport os\nfrom collections import Counter\n\n# Constants\nCSV_FILE_PATH = 'match_data.csv'\n\ndef create_test_csv(filename, content):\n    with open(filename, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerows(content)\n\n# Example usage in a test setup:\ndef setup_csv():\n    content = [\n        ['team', 'goals', 'penalties'],\n        ['Team A', '2', '1'],\n        ['Team B', '1', '2'],\n        ['Team C', '3', '0']\n    ]\n    create_test_csv('test_data/test_case_2.csv', content)\n\ndef task_func(goals, penalties, csv_file_path=CSV_FILE_PATH):\n    \"\"\"\n    Count total number of goals penalties from CSV file update with given goals penalties. Parameters: - goals (dict): dictionary keys are team names values are numbers of goals scored penalties (dict): dictionary keys are team names values are numbers of penalties incurred. Returns: - count (Counter.collections): Counter object with total counts of goals penalties. Requirements: - csv - os - collections.Counter Example: >>> goals = {'Team A': 3, 'Team B': 2, 'Team C': 1, 'Team D': 0, 'Team E': 2} >>> penalties = {'Team A': 1, 'Team B': 0, 'Team C': 2, 'Team D': 3, 'Team E': 1} >>> counts = task_func(goals, penalties) >>> print(counts) Counter({'goals': 8, 'penalties': 7})\n    \"\"\"\n    if not os.path.exists(csv_file_path):\n        raise Exception('CSV file not found')\n\n    with open(csv_file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        counts = Counter()\n        for row in reader:\n            counts['goals'] += int(row['goals'])\n            counts['penalties'] += int(row['penalties'])\n        return counts\n"}
{"task_id": "BigCodeBench/826", "solution": "import re\nimport os\nimport shutil\n\ndef task_func(source_dir, target_dir, file_pattern=r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'):\n    \"\"\"\n    Move files from source directory to target directory based on specified pattern. This function iterates through all files in the source directory, if file's name matches specified pattern, it is moved to target directory. Parameters: - source_dir (str): path to source directory. - target_dir (str): path to target directory. - file_pattern (str, optional): regular expression pattern filenames must match in order to be moved. Default is r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b', matches filenames consist of alphanumeric characters and have extensions txt, doc, or docx. Returns: - moved_files_count (int): The number of files successfully moved from the source directory to the target directory. Requirements: - re - os - shutil Example: >>> task_func('/path/to/source', '/path/to/target') 3 This example would move 3 files from '/path/to/source' to '/path/to/target' if their filenames match default pattern.\n    \"\"\"\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename):\n            shutil.move(os.path.join(source_dir, filename), target_dir)\n            moved_files_count += 1\n    return moved_files_count\n"}
{"task_id": "BigCodeBench/845", "solution": "import re\nimport numpy as np\nfrom collections import Counter\nfrom Levenshtein import ratio\n\n# Constants\nALPHANUMERIC = re.compile('[\\W_]+')\n\ndef task_func(text1, text2):\n    \"\"\"\n    Calculate similarity values between two texts based on cosine similarity and Levenshtein ratio. texts first cleaned by removing all non-alphanumeric characters except spaces and converted to lowercase. Cosine similarity computed based on term frequency in each text. Levenshtein ratio computed using 'ratio' function from 'python-Levenshtein' library, measures similarity of two strings as a number between 0 and 1. Parameters: - text1 (str): first string to compare. - text2 (str): second string to compare. Returns: - tuple: tuple containing cosine similarity and Levenshtein ratio as floats. - cosine similarity (float): cosine similarity ranges from 0 to 1, where 1 means identical term frequency, and 0 indicates no common terms. - levenshtein_ratio (float): Levenshtein ratio also ranges from 0 to 1, where 1 means strings are identical, and 0 means completely different. Requirements: - re - numpy - collections - Levenshtein Example: >>> task_func(\"Hello, World!\", \"Hello World\") (0.9999999999999998, 0.9565217391304348)\n    \"\"\"\n    # Clean text\n    text1 = ALPHANUMERIC.sub(' ', text1.lower())\n    text2 = ALPHANUMERIC.sub(' ', text2.lower())\n\n    # Tokenize and count term frequency\n    text1_tokens = Counter(text1.split())\n    text2_tokens = Counter(text2.split())\n\n    # Cosine similarity\n    cosine_similarity = np.dot(text1_tokens, text2_tokens) / (np.linalg.norm(list(text1_tokens.values())) * np.linalg.norm(list(text2_tokens.values())))\n\n    # Levenshtein ratio\n    levenshtein_ratio = ratio(text1, text2)\n\n    return cosine_similarity, levenshtein_ratio\n"}
{"task_id": "BigCodeBench/854", "solution": "from functools import reduce\nfrom itertools import permutations\nimport math\n\ndef task_func(numbers):\n    \"\"\"\n    Generate all permutations of given list of numbers calculate sum factorials each number each permutation If empty list given function returns empty lists. Parameters: numbers (list of int): list of integers to permute calculate factorial sums. Returns: list of int: list containing sums of factorials of each number in each permutation. list of list of int: list containing all permutations of numbers. Raises: TypeError: If numbers not list of integers. ValueError: If input numbers negative. Requirements: - functools.reduce - itertools.permutations - math.factorial Example: >>> fac, perm = task_func([1, 2, 3]) >>> print(fac) [9, 9, 9, 9, 9, 9] >>> print(perm) [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)] >>> fac, perm = task_func([0, 4]) >>> print(fac) [25, 25] >>> print(perm) [(0, 4), (4, 0)]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input should be a list of integers.\")\n    if not all(isinstance(i, int) and i >= 0 for i in numbers):\n        raise ValueError(\"Input list should contain only non-negative integers.\")\n    if not numbers:\n        return [], []\n    factorials = [math.factorial(i) for i in numbers]\n    perms = [list(permutations(numbers)) for _ in range(len(numbers))]\n    return factorials, perms\n"}
{"task_id": "BigCodeBench/857", "solution": "import warnings\nimport os\nimport glob\nimport shutil\nimport time\n\ndef task_func(SOURCE_DIR, DEST_DIR, EXTENSIONS):\n    \"\"\"\n    Transfer files from one directory (SOURCE_DIR) to another (DEST_DIR) based on specified file extensions (EXTENSIONS). issues warnings for files not be transferred due to issues. Parameters: - SOURCE_DIR (str): source directory path from where files will be transferred - DEST_DIR (str): destination directory path to where files transferred - EXTENSIONS (list): list of file extensions to consider for transferring. Example: ['.txt', '.csv', '.xlsx'] Returns: - transferred_files (list): list containing names of files successfully transferred. Requirements: - warnings - os - glob - shutil - time Example: >>> task_func('/path/to/source', '/path/to/destination', ['.txt', '.csv']) ['file1.txt', 'file2.csv'] >>> task_func('/path/to/source', '/path/to/destination', ['.jpg']) []\n    \"\"\"\n    # Check if source directory exists\n    if not os.path.exists(SOURCE_DIR):\n        warnings.warn(f\"Source directory {SOURCE_DIR} does not exist.\")\n        return []\n\n    # Get all files with specified extensions\n    files = glob.glob(f\"{SOURCE_DIR}/*.{{}}\".format(\",\".join(EXTENSIONS)))\n\n    # If no files found, return empty list\n    if not files:\n        warnings.warn(f\"No files with extensions {EXTENSIONS} found in source directory {SOURCE_DIR}.\")\n        return []\n\n    # Initialize list to store transferred files\n    transferred_files = []\n\n    # Transfer each file\n    for file in files:\n        # Get the base name of the file\n        base_name = os.path.basename(file)\n\n        # Check if destination directory exists\n        if not os.path.exists(DEST_DIR):\n            warnings.warn(f\"Destination directory {DEST_DIR} does not exist.\")\n            return []\n\n        # Check if destination directory is writable\n        if not os.access(DEST_DIR, os.W_OK):\n            warnings.warn(f\"Destination directory {DEST_DIR} is not writable.\")\n            return []\n\n        # Try to move the file\n        try:\n            shutil.move(file, DEST_DIR)\n            transferred_files.append(base_name)\n            print(f\"Transferred file {base_name}\")\n        except Exception as e:\n            warnings.warn(f\"Failed to transfer file {base_name}. Reason: {str(e)}\")\n\n        # Sleep for a while to avoid hitting the server's transfer rate limit\n        time.sleep(0.1)\n\n    return transferred_files\n"}
{"task_id": "BigCodeBench/865", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import zscore\nfrom sklearn.preprocessing import MinMaxScaler\n\n\ndef task_func(data):\n    \"\"\"\n    function takes list of tuples containing elements counts weights normalizes counts using z-score normalization weights using min-max scaling., returns pandas DataFrame with items, normalized counts normalized weights. Parameters: data (list of tuples): list each tuple contains element (any type), count (int), weight (float). Example: [('A', 100, 0.5), ('B', 200, 0.6)] Returns: DataFrame: pandas DataFrame with three columns: 'Item', 'Normalized Count', 'Normalized Weight'. Each row corresponds to entry from input data. Requirements: - pandas - numpy - scipy.stats.zscore - sklearn.preprocessing.MinMaxScaler Example: >>> data = [('A', 100, 0.5), ('B', 200, 0.6), ('C', 150, 0.7)] >>> report = task_func(data) >>> print(report) Item Normalized Count Normalized Weight 0 A -1.224745 0.0 1 B 1.224745 0.5 2 C 0.000000 1.0 >>> data = [('Andrew', 5743, 0.925), ('Elizabeth', 4655, 1.0875), ('Susan', 4716, 0.65), ('Christopher', 2100, 0.05),('Timothy', 3943, 0.175)] >>> report = task_func(data) >>> print(report) Item Normalized Count Normalized Weight 0 Andrew 1.248851 0.843373 1 Elizabeth 0.349969 1.000000 2 Susan 0.400366 0.578313 3 Christopher -1.760916 0.000000 4 Timothy -0.238270 0.120482\n    \"\"\"\n    data_df = pd.DataFrame(data, columns=['Item', 'Count', 'Weight'])\n    data_df['Normalized Count'] = zscore(data_df['Count'])\n    data_df['Normalized Weight'] = MinMaxScaler().fit_transform(data_df['Weight'].values.reshape(-1, 1))\n    return data_df\n\n"}
{"task_id": "BigCodeBench/870", "solution": "import pandas as pd\nimport numpy as np\nimport itertools\n\n\ndef task_func(data_list=[('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)]):\n    \"\"\"\n    Calculate mean of numerical values in each position across tuples in a list. Non-numeric values ignored means computed only from available data. missing data in some tuples simply ignored. DataFrame with one columns named 'Mean Value' contains mean values for all tuple positions. index is according to scheme: 'Position i' where i is current position. If empty list passed, empty DataFrame returned. Parameters: data_list (list of tuples): list containing tuples of mixed data types (string, int, float, etc.). Defaults to [('a', 1, 2.1), ('b', 2, 3.2), ('c', 3, 4.3), ('d', 4, 5.4), ('e', 5, 6.5)] Returns: DataFrame: A pandas DataFrame with mean values of numerical data at each position. Requirements: - pandas - numpy - itertools Example: >>> df = task_func() >>> print(df) Mean Value Position 0 NaN Position 1 3.0 Position 2 4.3 >>> data = [('a', '1', 2.1), ('b', 21, 'c'), (12, 3, 4.3), (['d'], 4, 5.4), ('e', 5, 6.5)] >>> df = task_func() >>> print(df) Mean Value Position 0 NaN Position 1 3.0 Position 2 4.3\n    \"\"\"\n    df = pd.DataFrame(columns=['Mean Value', 'Position'])\n    for i, (pos, *values) in enumerate(data_list):\n        if not values:\n            continue\n        try:\n            mean_value = np.mean([float(v) for v in values if isinstance(v, (int, float))])\n        except ValueError:\n            continue\n        df.loc[i] = [mean_value, pos]\n    return df.set_index('Position')\n\n"}
{"task_id": "BigCodeBench/879", "solution": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import chi2_contingency\n\n\ndef task_func(data, col1, col2):\n    \"\"\"\n    Perform chi-square test of independence of variables in contingency table This function takes DataFrame containing categorical data and two column names, constructs contingency table from two categorical columns performs chi-square test of independence returns p-value of test, indicates probability of observing data if null hypothesis (independence of variables) is true. Parameters: data (pd.DataFrame): DataFrame containing categorical variables. col1 (str): name of first categorical column in 'data'. col2 (str): name of second categorical column in 'data'. Returns: float: p-value of chi-square test of independence. Raises: ValueError: If 'data' is empty, if 'col1' or 'col2' not in 'data', if one or both columns do not have multiple categories, or if some categories have less than 5 observations (violating chi-square test assumptions). TypeError: If one or both of columns contain non-categorical data. Requirements: numpy pandas scipy.stats.chi2_contingency Examples: >>> data = pd.DataFrame({ ... 'Var1': ['A'] * 40 + ['B'] * 60, ... 'Var2': ['X'] * 25 + ['Y'] * 25 + ['X'] * 25 + ['Y'] * 25 ... }) >>> task_func(data, 'Var1', 'Var2') 0.06619257972219346 >>> np.random.seed(42) >>> data = pd.DataFrame({ ... 'a': np.random.choice(['A', 'B'], size=100), ... 'b': np.random.choice(['X', 'Y'], size=100) ... }) >>> task_func(data, 'a', 'b') 1.0\n    \"\"\"\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\"'data' should be a pandas DataFrame\")\n    if not isinstance(col1, str) or not isinstance(col2, str):\n        raise TypeError(\"'col1' and 'col2' should be strings\")\n    if col1 not in data.columns or col2 not in data.columns:\n        raise ValueError(\"One or both columns not in 'data'\")\n    if len(data[col1].unique()) < 5 or len(data[col2].unique()) < 5:\n        raise ValueError(\"One or both columns do not have multiple categories, or some categories have less than 5 observations (violating chi-square test assumptions)\")\n    if not data[[col1, col2]].apply(lambda x: x.dtype == 'object').all():\n        raise ValueError(\"One or both columns contain non-categorical data\")\n\n    contingency_table = pd.crosstab(data[col1], data[col2])\n    chi2, p, dof, expected = chi2_contingency(contingency_table)\n\n    return p\n"}
{"task_id": "BigCodeBench/897", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport random\n\n# Constants\nNUMBERS = list(range(1, 7))  # Adjusting for dice rolls (1 to 6)\n\ndef task_func(rolls, seed=None):\n    \"\"\"\n    Simulate number of dice rolls, calculate frequency of each result, return both frequency array and histogram of results. Note: dice rolls have 6 possible outcomes. title of histogram is \"Histogram of Dice Rolls\". x-axis labeled \"Dice Value\" and y-axis labeled \"Frequency\". Parameters: rolls (int): number of dice rolls. Returns: tuple: A tuple containing: - np.array: A numpy array with frequency of each outcome. - matplotlib.Axes: Axes object representing histogram. Requirements: - numpy - matplotlib.pyplot - random Examples: >>> import random >>> random.seed(0) >>> outcomes, ax = task_func(10000) >>> print(outcomes) [1656 1690 1696 1657 1632 1669] >>> plt.show() >>> random.seed(10) >>> outcomes, ax = task_func(100) >>> print(outcomes) [15 21 17 22 16 9] >>> plt.show()\n    \"\"\"\n    # Set seed for random number generator\n    if seed is not None:\n        random.seed(seed)\n\n    # Simulate dice rolls\n    outcomes = [random.choice(NUMBERS) for _ in range(rolls)]\n\n    # Calculate frequency of each result\n    freq = np.bincount(outcomes)\n\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(outcomes, bins=6, edgecolor='black')\n    ax.set_title('Histogram of Dice Rolls')\n    ax.set_xlabel('Dice Value')\n    ax.set_ylabel('Frequency')\n\n    return freq, ax\n"}
{"task_id": "BigCodeBench/906", "solution": "import zipfile\nimport os\nimport re\nimport shutil\n\ndef task_func(source_dir: str, target_dir: str, archive_name: str = 'archive.zip') -> str:\n    \"\"\"\n    Archives all processed files from source directory to target directory. function identifies processed files by '_processed' suffix in the filename. Parameters: source_dir (str): directory containing the files to be archived. target_dir (str): directory where archive will be saved. archive_name (str): name of archive file. Default is 'archive.zip'. Returns: str: path to created archive. Requirements: - os - re - shutil - zipfile Example: >>> task_func('./data/', './data_processed/') './data_processed/archive.zip' >>> task_func('./data/', './data_processed/', 'my_archive.zip') './data_processed/my_archive.zip'\n    \"\"\"\n    processed_files = [f for f in os.listdir(source_dir) if f.endswith('_processed')]\n\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    with zipfile.ZipFile(os.path.join(target_dir, archive_name), 'w') as zipf:\n        for file in processed_files:\n            file_path = os.path.join(source_dir, file)\n            zipf.write(file_path, arcname=file)\n\n    return os.path.join(target_dir, archive_name)\n"}
{"task_id": "BigCodeBench/914", "solution": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(df):\n    \"\"\"\n    Predicts stock closing prices next 7 days using simple linear regression plots data. Parameters: df (DataFrame): input dataframe with columns 'date' 'closing_price'. 'date' should be in datetime format. Returns: tuple: tuple containing: - list: list with predicted prices next 7 days - Axes: matplotlib Axes object containing plot. Requirements: - pandas - numpy - matplotlib.pyplot - sklearn.linear_model.LinearRegression Constants: - function uses constant time step 24*60*60 seconds to generate future timestamps. Example: >>> df = pd.DataFrame({ ... 'date': pd.date_range(start='1/1/2021', end='1/7/2021'), ... 'closing_price': [100, 101, 102, 103, 104, 105, 106] ... }) >>> pred_prices, plot = task_func(df) >>> print(pred_prices) [107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0]\n    \"\"\"\n    # Convert date to seconds\n    df['date'] = df['date'].map(dt.datetime.to_datetime(df['date']).map(dt.datetime.timestamp))\n\n    # Create a new column for the next 7 days\n    df['next_date'] = df['date'] + pd.Timedelta(days=7)\n\n    # Create a new dataframe with the next 7 days\n    df_next = df[df['date'] + pd.Timedelta(days=7) < df['next_date'].max()]\n\n    # Create a linear regression model\n    model = LinearRegression()\n\n    # Fit the model\n    model.fit(df['date'].values.reshape(-1, 1), df['closing_price'])\n\n    # Predict the next 7 days\n    pred_prices = model.predict(df_next['date'].values.reshape(-1, 1))\n\n    # Plot the data\n    plt.figure(figsize=(10, 5))\n    plt.plot(df['date'], df['closing_price'], label='Actual')\n    plt.plot(df_next['date'], pred_prices, label='Predicted')\n    plt.xlabel('Date')\n    plt.ylabel('Closing Price')\n    plt.legend()\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    return pred_prices, plt.gca()\n"}
{"task_id": "BigCodeBench/915", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import zscore\n\ndef task_func(df, z_threshold=2):\n    \"\"\"\n    Identifies plots outliers in 'closing_price' column of given DataFrame using Z-Score method. Parameters: df (pandas.DataFrame): input DataFrame must contain column named 'closing_price' with numerical values. z_threshold (float, optional): absolute Z-Score threshold for identifying outliers. Default is 2. Returns: tuple: tuple containing elements: - pandas.DataFrame: DataFrame containing outliers in 'closing_price' column - matplotlib.axes._axes.Axes: plot object displaying outliers, x-axis label 'Index', y-axis label 'Closing Price', title 'Outliers in Closing Prices'. Requirements: - numpy - matplotlib.pyplot - scipy.stats.zscore Constants: - Z-Score threshold for identifying outliers customizable via 'z_threshold' parameter. Examples: >>> import pandas as pd >>> df1 = pd.DataFrame({ ... 'closing_price': [100, 101, 102, 103, 104, 150] ... }) >>> outliers1, plot1 = task_func(df1) >>> df2 = pd.DataFrame({ ... 'closing_price': [10, 20, 30, 40, 50, 100] ... }) >>> outliers2, plot2 = task_func(df2, z_threshold=1.5)\n    \"\"\"\n    # Calculate Z-Score\n    df['z_score'] = zscore(df['closing_price'])\n\n    # Identify outliers\n    outliers = df.loc[df['z_score'].abs() > z_threshold]\n\n    # Plot outliers\n    fig, ax = plt.subplots()\n    ax.plot(outliers.index, outliers['closing_price'], 'ro')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Closing Price')\n    ax.set_title('Outliers in Closing Prices')\n    plt.show()\n\n    return outliers, ax\n"}
{"task_id": "BigCodeBench/916", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndef task_func(df: pd.DataFrame) -> tuple:\n    \"\"\"\n    Visualize the distribution of stock closing prices using box plot and histogram within a single figure. This function designed to help understand spread, central tendency, distribution shape of stock closing prices. Note: tile of box plot set to 'Box Plot of Closing Prices' and title of histogram set to 'Histogram of Closing Prices'. Requirements: - pandas - matplotlib.pyplot - seaborn Parameters: df (DataFrame): A pandas DataFrame containing at least one column named 'closing_price' with stock closing prices. Returns: tuple: A tuple containing two matplotlib.axes._axes.Axes objects: first for boxplot and second for histogram. Example: >>> df = pd.DataFrame({ ... 'closing_price': [100, 101, 102, 103, 104, 150] ... }) >>> boxplot_ax, histplot_ax = task_func(df) >>> print(boxplot_ax.get_title()) Box Plot of Closing Prices >>> print(histplot_ax.get_title()) Histogram of Closing Prices\n    \"\"\"\n    # Create a figure and a set of subplots\n    fig, (boxplot_ax, histplot_ax) = plt.subplots(2, 1)\n\n    # Create a box plot\n    sns.boxplot(x=df['closing_price'], ax=boxplot_ax, title='Box Plot of Closing Prices')\n\n    # Create a histogram\n    sns.histplot(x=df['closing_price'], ax=histplot_ax, title='Histogram of Closing Prices')\n\n    return boxplot_ax, histplot_ax\n"}
{"task_id": "BigCodeBench/917", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.axes import Axes\nfrom statsmodels.tsa.arima.model import ARIMA\nfrom typing import List, Tuple\n\ndef task_func(df: pd.DataFrame) -> Tuple[List[float], Axes]:\n    \"\"\"\n    Forecasts share closing prices next 7 days using ARIMA model plots forecast. Parameters: df (pd.DataFrame): input dataframe with columns 'date' and 'closing_price'. 'date' should be datetime dtype 'closing_price' be float. Returns: Tuple[List[float], Axes]: tuple containing: - list with forecasted prices next 7 days - matplotlib Axes object containing subplot. Requirements: - pandas - numpy - matplotlib.pyplot - statsmodels.tsa.arima.model.ARIMA Example: >>> df = pd.DataFrame({ ... 'date': pd.date_range(start='1/1/2021', end='1/7/2021'), ... 'closing_price': [100, 101, 102, 103, 104, 105, 106] ... }) >>> forecast, ax = task_func(df) >>> print(forecast) [106.99999813460752, 107.99999998338443, 108.99999547091295, 109.99999867405204, 110.99999292499156, 111.99999573455818, 112.9999903188028]\n    \"\"\"\n    # Prepare data\n    df['date'] = pd.to_datetime(df['date'])\n    df.set_index('date', inplace=True)\n\n    # Fit model\n    model = ARIMA(df['closing_price'], order=(5,1,0))\n    model_fit = model.fit(disp=0)\n\n    # Forecast\n    future = model_fit.predict(len(df), len(df)+7)\n\n    # Plot\n    fig, ax = plt.subplots()\n    ax.plot(df['closing_price'], label='Trend')\n    ax.plot(future, label='Forecast')\n    ax.legend()\n\n    return future, ax\n"}
{"task_id": "BigCodeBench/928", "solution": "from collections import Counter\nimport itertools\nimport string\n\n\ndef task_func(word: str) -> dict:\n    \"\"\"\n    Create dictionary containing all possible two-letter combinations of lowercase English alphabets. dictionary values represent frequency of these two-letter combinations in given word. If a combination not appear in word, its value will be 0. Requirements: - collections.Counter - itertools - string Parameters: - word (str): input string containing alphabetic characters. Returns: - dict: A dictionary with keys as two-letter alphabet combinations and values as their counts in word. Requirements: - function uses `collections.Counter` library to count occurrences of two-letter combinations. - function uses `itertools.permutations` method to generate all two-letter combinations of alphabets. - function uses `string` library to get string of lowercase alphabets. Example: >>> list(task_func('abcdef').items())[:5] [('ab', 1), ('ac', 0), ('ad', 0), ('ae', 0), ('af', 0)]\n    \"\"\"\n    alphabets = string.ascii_lowercase\n    counter = Counter()\n    for i in range(len(word)):\n        for j in range(i + 1, len(word)):\n            counter[word[i:j+1]] += 1\n    return dict(counter)\n\n"}
{"task_id": "BigCodeBench/942", "solution": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Constants\nSTART_DATE = '2016-01-01'\nPERIODS = 13\nFREQ = 'WOM-2FRI'\nCATEGORIES = ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']\n\ndef task_func(start_date=START_DATE, periods=PERIODS, freq=FREQ, categories=CATEGORIES):\n    \"\"\"\n    Create visualize sales report for different categories over period time. Parameters: start_date (str): start date for report in 'YYYY-MM-DD' format. Default is '2016-01-01'. periods (int): number of periods for report. Default is 13. freq (str): frequency of dates to generated. Default is 'WOM-2FRI' (WeekOfMonth-2nd Friday). categories (list): List of categories include in report. Default is ['Electronics', 'Fashion', 'Home & Kitchen', 'Automotive', 'Sports']. Returns: - Returns DataFrame containing sales data with columns: 'Date', 'Category', 'Sales'. Returns Matplotlib Axes object for plot. Requirements: - pandas - matplotlib.pyplot - numpy Example: >>> df, ax = task_func(start_date='2020-01-01', periods=5, freq='W-MON', categories=['Electronics', 'Fashion']) >>> df Date Category Sales 0 2020-01-06 Electronics 272 1 2020-01-06 Fashion 147 2 2020-01-13 Electronics 217 3 2020-01-13 Fashion 292 4 2020-01-20 Electronics 423 5 2020-01-20 Fashion 351 6 2020-01-27 Electronics 295 7 2020-01-27 Fashion 459 8 2020-02-03 Electronics 109 9 2020-02-03 Fashion 311\n    \"\"\"\n    # Generate sales data\n    sales_data = []\n    for category in categories:\n        for i in range(periods):\n            date = start_date + pd.DateOffset(weeks=i)\n            sales = np.random.randint(100, 1000)\n            sales_data.append([date, category, sales])\n\n    # Create DataFrame\n    df = pd.DataFrame(sales_data, columns=['Date', 'Category', 'Sales'])\n\n    # Plot\n    fig, ax = plt.subplots()\n    for category in categories:\n        df_category = df[df['Category'] == category]\n        ax.plot(df_category['Date'], df_category['Sales'], label=category)\n\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Sales')\n    ax.set_title('Sales report for different categories over period time')\n    ax.legend()\n\n    return ax\n"}
{"task_id": "BigCodeBench/945", "solution": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndef task_func(start_date='2016-01-01', periods=13, freq='WOM-2FRI', sales_data=None):\n    \"\"\"\n    Generates time series of sales data starting from specified date use linear regression to forecast future sales based on provided or generated sales data. Parameters: start_date (str): start date for sales data in YYYY-MM-DD format. Default is '2016-01-01'. periods (int): number of periods for sales data available. Default is 13. - freq (str): frequency of sales data, e.g. 'WOM-2FRI' for second Friday of each month. Default is 'WOM-2FRI'. sales_data (array-like, optional): array containing actual sales data. If not provided random data generated. Returns: - numpy array containing forecasted future sales for same number of periods as input data. Requirements: - numpy - pandas - sklearn.linear_model.LinearRegression Examples: >>> np.random.seed(42) # For consistent random data generation in examples >>> task_func('2016-01-01', 13, 'WOM-2FRI') array([313.65384615, 318.56043956, 323.46703297, 328.37362637, 333.28021978, 338.18681319, 343.09340659, 348. , 352.90659341, 357.81318681, 362.71978022, 367.62637363, 372.53296703]) >>> task_func('2020-01-01', 5, 'M', [200, 300, 400, 500, 600]) array([238.9, 226. , 213.1, 200.2, 187.3])\n    \"\"\"\n    # Generate random data if no sales data provided\n    if sales_data is None:\n        sales_data = np.random.rand(periods) * 1000\n\n    # Generate date range\n    dates = pd.date_range(start=start_date, periods=periods, freq=freq)\n\n    # Generate linear regression model\n    model = LinearRegression()\n    model.fit(np.arange(len(dates)).reshape(-1, 1), sales_data)\n\n    # Generate forecast\n    forecast = model.predict(np.arange(len(dates)).reshape(-1, 1))\n\n    return forecast\n"}
{"task_id": "BigCodeBench/952", "solution": "import pandas as pd\nimport random\nfrom datetime import datetime\n\n\ndef task_func(\n    task_list,\n    n_tasks,\n    employees=[\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"],\n    seed=None,\n):\n    \"\"\"\n    Randomly assigns specified number of tasks to employees with due date current day returns DataFrame with assignments. Parameters: - task_list (list of str): List of tasks to be assigned. - n_tasks (int): Number of tasks to assigned. number should not be negative but can be larger than number tasks in task_list. - employees (list of str, optional): List of employee names to tasks can assigned. If not provided defaults to: ['John Doe', 'Jane Smith' 'James Brown' 'Mary Johnson' 'Robert Davis']. - seed (int, optional): Seed for random number generator to ensure reproducibility. Defaults to None (not set). Returns: - pd.DataFrame: Contains columns 'Task Name', 'Assigned To', 'Due Date' with each row representing assigned task. Raises: - ValueError: If n_tasks negative. Note: - Task names sanitized by replacing spaces with underscores Due dates set to current system date. Requirements: - pandas - random - datetime Examples: >>> df = task_func(['Clean Office', 'Prepare Report', 'Client Meeting'], 2, seed=42) >>> df Task Name Assigned To Due Date 0 Client_Meeting John Doe 2024-04-13 1 Clean_Office James Brown 2024-04-13 >>> type(df) <class 'pandas.core.frame.DataFrame'>\n    \"\"\"\n\n    if seed is not None:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if n_tasks > len(task_list):\n        raise ValueError(f\"n_tasks cannot be larger than the number of tasks in the task list ({len(task_list)})\")\n\n    df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    for i in range(n_tasks):\n        task = task_list[i]\n        employee = random.choice(employees)\n        due_date = datetime.today().strftime('%Y-%m-%d')\n\n        df = df.append({\"Task Name\": task, \"Assigned To\": employee, \"Due Date\": due_date}, ignore_index=True)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/955", "solution": "import numpy as np\nimport matplotlib.pyplot as plt\nimport re\nfrom collections import Counter\n\n\ndef task_func(mystrings, text):\n    \"\"\"\n    Replace spaces in given words with underscores, plots frequency of each unique word. Parameters: - mystrings (list of str): List of words/phrases where spaces need to be replaced with underscores - text (str): text in which modifications applied and word frequencies calculated. Must not be empty. Returns: - matplotlib.axes.Axes: Axes object of plot. Raises: - ValueError: If input text is empty. Requirements: - numpy - matplotlib - re - collections Notes: - All operations are case-insensitive frequency plot displays each unique word on x-axis in order appear after modification with corresponding frequency on y-axis. Examples: >>> ax = task_func(['Lorem ipsum', 'consectetur adipiscing'], 'Lorem ipsum dolor sit amet lorem Ipsum') >>> type(ax) <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    if not text:\n        raise ValueError(\"Input text cannot be empty\")\n\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Split text into list of words\n    words = text.split(\"_\")\n\n    # Count frequency of each word\n    word_counts = Counter(words)\n\n    # Create a list of tuples (word, count)\n    word_counts_list = list(word_counts.items())\n\n    # Sort the list of tuples by count\n    word_counts_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Create a list of words\n    words_list = [word[0] for word in word_counts_list]\n\n    # Create a list of counts\n    counts_list = [word[1] for word in word_counts_list]\n\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(words_list, counts_list)\n    ax.set_xlabel('Words')\n    ax.set_ylabel('Frequency')\n    plt.show()\n\n    return ax\n\n"}
{"task_id": "BigCodeBench/963", "solution": "import os\nimport glob\nfrom pathlib import Path\nimport zipfile\n\n\ndef task_func(source_directory, target_directory, zip_name):\n    \"\"\"\n    Zip files with certain extensions from source directory save it as zip file saved to target directory. Parameters: - source_directory (str): source directory containing files to be zipped. - target_directory (str): destination directory of zip file to be created. If it does not exist, function will create it. - zip_name (str): name of zip file to create (without extension; '.zip' will added automatically). Returns: - str: full path to created zip file in format \"/path/to/target_directory/zip_name.zip\". Raises: - OSError: If source_directory does not exist. Requirements: - os - glob - pathlib - zipfile Note: - valid extensions are: ['.txt', '.docx', '.xlsx', '.csv']. Example: >>> path = task_func('/path/to/source_directory', '/path/to/target_directory', 'zipped_files') >>> type(path) <class 'str'> >>> path '/path/to/target_directory/zipped_files.zip'\n    \"\"\"\n    source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n    target_directory.mkdir(parents=True, exist_ok=True)\n\n    zip_path = target_directory / f\"{zip_name}.zip\"\n\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        for file in source_directory.rglob('*'):\n            if file.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n                zipf.write(file, arcname=file.relative_to(source_directory))\n\n    return str(zip_path)\n\n"}
{"task_id": "BigCodeBench/964", "solution": "import os\nfrom pathlib import Path\nimport pandas as pd\nimport docx\n\n\ndef task_func(source_directory: str, target_directory: str) -> int:\n    \"\"\"\n    Converts files with specific extensions (.txt, .docx, .xlsx, .csv) from source directory to CSV files and saves them in target directory. Parameters: - source_directory (str): path to source directory containing files to be converted. - target_directory (str): path to target directory where converted CSV files will be saved. If it not exist, function will create it. Returns: - int: number of files successfully converted to CSV. Raises: - FileNotFoundError: If source directory does not exist. Requirements: - os - pathlib - pandas - python-docx - openpyxl Notes: - Each file's text content is captured and stored in a CSV with a single 'Text' column and no row indices. - function will overwrite existing files in target directory if same names as converted files. Example: >>> task_func('/Users/test/Documents', '/Users/test/Documents/csv_files') 4 >>> task_func('/path/to/source', '/path/to/target') 2\n    \"\"\"\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n\n    target_path = Path(target_directory)\n    if not target_path.exists():\n        target_path.mkdir(parents=True)\n\n    csv_files = []\n    for file in os.listdir(source_directory):\n        file_path = Path(source_directory, file)\n        if file_path.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n            if file_path.suffix == '.docx':\n                doc = docx.Document(file_path)\n                text = [p.text for p in doc.paragraphs]\n            elif file_path.suffix == '.xlsx':\n                df = pd.read_excel(file_path)\n                text = df.values.tolist()\n            else:\n                text = open(file_path, 'r').read()\n            csv_files.append({'File': file, 'Text': text})\n\n    for csv_file in csv_files:\n        df = pd.DataFrame([csv_file['Text']], columns=['Text'])\n        df.to_csv(target_path / (csv_file['File'].rstrip(csv_file['File'].suffix) + '.csv'), index=False)\n\n    return len(csv_files)\n\n"}
{"task_id": "BigCodeBench/969", "solution": "import numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nimport pandas as pd\n\n\ndef task_func(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Computes MinMax-normalized cumulative sum for each numeric column in given DataFrame. Parameters: - df (pandas.DataFrame): input DataFrame containing numerical values. Returns: - pd.DataFrame: DataFrame where each column contains normalized cumulative sum respective column input DataFrame retaining original column names. Raises: - TypeError: If DataFrame contains non-numeric data types ValueError: If DataFrame empty or contains NaN values. Requirements: - pandas - numpy - sklearn Example: >>> input_df = pd.DataFrame({'A': [1, 2, 3], 'B': [3, 2, 1]}) >>> output_df = task_func(input_df) >>> type(output_df) <class 'pandas.core.frame.DataFrame'> >>> output_df A B 0 0.0 0.000000 1 0.4 0.666667 2 1.0 1.000000\n    \"\"\"\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input should be a pandas DataFrame\")\n\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty\")\n\n    if df.isna().any():\n        raise ValueError(\"DataFrame cannot contain NaN values\")\n\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n\n    if not numeric_cols.empty:\n        df[numeric_cols] = df[numeric_cols].cumsum()\n\n        scaler = MinMaxScaler()\n        df[numeric_cols] = scaler.fit_transform(df[numeric_cols])\n\n    return df\n\n"}
{"task_id": "BigCodeBench/971", "solution": "import os\nfrom pathlib import Path\nfrom datetime import datetime, timezone\n\n\ndef task_func(directory_path: str):\n    \"\"\"\n    Analyzes given directory, listing each file it contains with its size, creation time, last modification time without recursing into subdirectories. Parameters: - directory_path (str): path to directory to be analyzed. If it empty, function returns empty list. Returns: - list of tuples: Each tuple contains (file name, file size in bytes, creation time in ISO format, modification time in ISO format). Raises: - ValueError: If provided directory does not exist. Requirements: - os - pathlib - datetime Notes: - function assumes directory exists contains only files (no subdirectories processed). - Times reported in system time, UTC. - creation and modification times platform dependent; on some systems creation time might not be available might be replaced by last metadata change time. Examples: >>> result = task_func('/path/to/directory') >>> print(result) [('example.txt', 1024, '2023-04-01T14:30:00Z', '2023-04-02T15:00:00Z'), ...] >>> result = task_func('/path/to/empty_directory') >>> print(result) []\n    \"\"\"\n    if not os.path.exists(directory_path):\n        raise ValueError(f\"Directory {directory_path} does not exist\")\n\n    result = []\n    for file_name in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file_name)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            creation_time = datetime.fromtimestamp(os.path.getctime(file_path), tz=timezone.utc)\n            modification_time = datetime.fromtimestamp(os.path.getmtime(file_path), tz=timezone.utc)\n            result.append((file_name, file_size, creation_time.isoformat(), modification_time.isoformat()))\n\n    return result\n\n"}
{"task_id": "BigCodeBench/985", "solution": "import pandas as pd\nimport json\nimport os\nimport math\n\n\ndef task_func(json_data, output_dir=\".\", file_name=\"country_population_report.csv\"):\n    \"\"\"\n    Generates population report DataFrame and CSV file based on provided JSON data. Parameters: - json_data (str): Nested JSON string containing country names (str) as keys and populations (int) as values. parent key expected to be \"Countries\". Example format: '{\"Countries\": {\"Country A\": 331002651, \"Country B\": 67886011}}'. output_dir (str): Directory path where CSV report saved. Defaults to current directory. function will create it if it not exist. - file_name (str): Name of CSV report. Defaults to \"country_population_report.csv\". Returns: - str: file path of generated CSV report. - pd.DataFrame: country-population data loaded from input JSON, with columns: \"Country\", \"Population\". Raises: - ValueError: If JSON data is malformed, empty, contains non-string country names, non-numeric or negative populations. - IOError: If file cannot be written to specified directory. Requirements: - json - os - pandas - math Notes: - Output DataFrame has no extra index column. If function encounters float population otherwise valid, will round it down to nearest integer. Example: >>> json_str = '{\"Countries\": {\"Country A\": 331002651, \"Country B\": 67886011}}' >>> csv_file_path, df = task_func(json_str) >>> print(csv_file_path)./country_population_report.csv >>> df Country Population 0 Country A 331002651 1 Country B 67886011\n    \"\"\"\n\n    # Check if json_data is a string\n    if not isinstance(json_data, str):\n        raise ValueError(\"json_data should be a string\")\n\n    # Parse json_data\n    try:\n        data = json.loads(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"json_data is not a valid JSON\")\n\n    # Check if data is a dictionary\n    if not isinstance(data, dict) or \"Countries\" not in data:\n        raise ValueError(\"json_data should contain a dictionary with 'Countries' key\")\n\n    # Check if all country names are strings\n    for country, population in data[\"Countries\"].items():\n        if not isinstance(country, str):\n            raise ValueError(\"Country names should be strings\")\n        if not isinstance(population, int):\n            raise ValueError(\"Population should be integers\")\n        if population < 0:\n            raise ValueError(\"Population should be non-negative\")\n\n    # Create output directory if it doesn't exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Create DataFrame\n    df = pd.DataFrame(list(data[\"Countries\"].items()), columns=[\"Country\", \"Population\"])\n\n    # Round down to nearest integer\n    df[\"Population\"] = df[\"Population\"].apply(math.floor)\n\n    # Save to CSV\n    csv_file_path = os.path.join(output_dir, file_name)\n    df.to_csv(csv_file_path, index=False)\n\n    return csv_file_path, df\n"}
{"task_id": "BigCodeBench/988", "solution": "import os\nimport re\nfrom pathlib import Path\n\n\ndef task_func(dir_path: str, predicates: list) -> dict:\n    \"\"\"\n    Evaluates each item (files directories) in given directory against specified conditions. Parameters: - dir_path (str): path to directory to be evaluated. Must exist. - predicates (list of strings): Names of conditions to check for. Must contain valid conditions. Invalid conditions ignored. Supported conditions: 1. 'is_file': whether item is a file 2. 'is_dir': whether item is a directory 3. 'has_special_chars': whether item name contains character not a letter, digit, or underscore, ignoring file extensions 4. 'has_numbers': whether item name contains number Returns: - dict: dictionary with directory items as keys results of condition checks as values. Raises: - ValueError: If no valid predicates provided - FileNotFoundError: If specified directory not exist or is not a directory. Note: function evaluates file/directory names, rather than full path Predicates deduplicated. Requirements: - os - re - pathlib Examples: >>> task_func('/path/to/dir', ['is_file', 'has_numbers']) {'file.txt': {'is_file': True, 'has_numbers': False}, 'file2.txt': {'is_file': True, 'has_numbers': True}} >>> task_func('/path/to/dir', ['is_dir', 'has_special_chars']) {'my_folder': {'is_dir': True, 'has_special_chars': False}, 'a_@Folder': {'is_dir': True, 'has_special_chars': True}}\n    \"\"\"\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"Directory {dir_path} not found\")\n\n    if not predicates:\n        raise ValueError(\"No valid predicates provided\")\n\n    result = {}\n\n    for item in os.listdir(dir_path):\n        item_path = os.path.join(dir_path, item)\n\n        if os.path.isfile(item_path):\n            item_name, item_extension = os.path.splitext(item)\n            item_predicates = [predicate.strip() for predicate in predicates if re.match(r'^(is_|has)_(file|dir|special_chars|numbers)$', predicate)]\n\n            if item_predicates:\n                result[item] = {predicate: getattr(re, f'search')(r'^{item_name}$', item_name) is not None for predicate in item_predicates}\n\n        elif os.path.isdir(item_path):\n            item_predicates = [predicate.strip() for predicate in predicates if re.match(r'^(is_|has)_(file|dir|special_chars|numbers)$', predicate)]\n\n            if item_predicates:\n                result[item] = {predicate: getattr(re, f'search')(r'^{item_name}$', item_name) is not None for predicate in item_predicates}\n\n    return result\n\n"}
{"task_id": "BigCodeBench/990", "solution": "import binascii\nimport base64\nimport urllib.parse\nimport codecs\n\n\ndef task_func(hex_string):\n    \"\"\"\n    Convert hexadecimal string to various encodings. This function takes hexadecimal string as input performs several encoding operations. Initially, it decodes hexadecimal string to bytes then converts these bytes into UTF-8 string. This UTF-8 string is subsequently encoded into different formats: hexadecimal, base64, UTF-8, UTF-16, UTF-32, ASCII (if possible), URL encoding, and ROT13. if ASCII not possible, returns 'Not representable in ASCII'. Parameters: - hex_string (str): input string in hexadecimal format. Returns: - dict: A dictionary containing input string encoded in various formats. dictionary's keys are encoding types ('hex', 'base64', 'utf-8', 'utf-16', 'utf-32', 'ASCII', 'URL', 'ROT13'), values are corresponding encoded strings. If string cannot be represented in ASCII, 'ASCII' key maps to 'Not representable in ASCII'.Requirements binascii base64 urllib codecs Example task_func(\"4a4b4c\") {'hex': '4a4b4c' 'base64': 'SktM' 'utf-8': 'JKL' 'utf-16': 'JKL' 'utf-32': 'JKL' 'ASCII': 'JKL' 'URL': 'JKL' 'ROT13': 'WXY'} >>> task_func(\"68656c6c6f\") {'hex': '68656c6c6f' 'base64': 'aGVsbG8=' 'utf-8': 'hello' 'utf-16': 'hello' 'utf-32': 'hello' 'ASCII': 'hello' 'URL': 'hello' 'ROT13': 'uryyb'}\n    \"\"\"\n    decoded_bytes = binascii.unhexlify(hex_string)\n    decoded_str = decoded_bytes.decode('utf-8', 'ignore')\n    utf16_encoded_str = decoded_str.encode('utf-16')\n    utf32_encoded_str = decoded_str.encode('utf-32')\n    rot13_encoded_str = ''.join(chr((ord(char) - 97 + 13) % 26 + 97) if char.isalpha() else char for char in decoded_str)\n\n    return {\n        'hex': hex_string,\n        'base64': base64.b64encode(decoded_bytes).decode('utf-8'),\n        'utf-8': decoded_str,\n        'utf-16': utf16_encoded_str.decode('utf-16', 'ignore'),\n        'utf-32': utf32_encoded_str.decode('utf-32', 'ignore'),\n        'ASCII': 'Not representable in ASCII' if not all(ord(char) < 128 for char in decoded_str) else decoded_str,\n        'URL': urllib.parse.quote(decoded_str),\n        'ROT13': rot13_encoded_str\n    }\n\n"}
{"task_id": "BigCodeBench/998", "solution": "import urllib.request\nimport os\nimport hashlib\nimport tarfile\n\n# Constants\nTARGET_TAR_FILE = \"downloaded_files.tar.gz\"\nEXPECTED_MD5_CHECKSUM = \"d41d8cd98f00b204e9800998ecf8427e\"\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads a tar.gz file from specified URL, validates its MD5 checksum against predefined expected value. If checksum matches, it extracts the contents of tar.gz file. Otherwise, deletes downloaded file. Parameters: url (str): URL from which to download tar.gz file. Returns: bool: Returns True if file is successfully downloaded, its MD5 checksum matches expected value, and it is extracted. Returns False if the checksum does not match the expected value or if download fails. Requirements: - urllib.request - hashlib - tarfile - os Example: >>> task_func('http://example.com/files.tar.gz') True\n    \"\"\"\n    # Download file\n    try:\n        response = urllib.request.urlopen(url)\n        data = response.read()\n        md5_checksum = hashlib.md5(data).hexdigest()\n\n        # Check if file is downloaded correctly\n        if md5_checksum != EXPECTED_MD5_CHECKSUM:\n            print(\"Checksum does not match expected value. Deleting downloaded file.\")\n            os.remove(TARGET_TAR_FILE)\n            return False\n\n        # Extract file\n        with tarfile.open(fileobj=io.BytesIO(data), mode='r:gz') as tar:\n            tar.extractall()\n\n        return True\n\n    except Exception as e:\n        print(f\"Download failed with error: {e}\")\n        return False\n\n"}
{"task_id": "BigCodeBench/999", "solution": "import urllib.request\nimport os\nimport csv\nimport collections\n\n\ndef task_func(url, column_name, csv_file_path):\n    \"\"\"\n    Download a CSV file from given URL, save it to specified path, count occurrences of each value in a particular column. function handles various scenarios including missing columns and file download errors. Parameters: url (str): URL of CSV file to be downloaded. Must be a valid and accessible URL. column_name (str): name of column in the CSV file whose values are to be counted. function will raise a ValueError if this column is not found. csv_file_path (str): file path where downloaded CSV file will be saved. If file already exists at this path, it will be overwritten. Returns: dict: A dictionary mapping values from specified column to their corresponding occurrence counts. Raises: ValueError: If specified column_name does not exist in the CSV file, function will delete downloaded file and raise a ValueError with message stating \"The provided column_name '{column_name}' does not exist in the CSV file.\" Requirements: - urllib - os - csv - collections Example: >>> task_func('http://example.com/data.csv', 'category', 'downloaded_data.csv') {'cat1': 5, 'cat2': 3, 'cat3': 8} # This is hypothetical output; actual output will depend on CSV data. Notes: - downloaded CSV file is deleted after its contents processed. - function only counts values in specified column and ignores other data.\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n        csv_file = response.read().decode('utf-8')\n        rows = csv.reader(csv_file.splitlines())\n        column_index = next(rows, None)[collections.indexOf(column_name)]\n        if column_index is None:\n            raise ValueError(f\"The provided column_name '{column_name}' does not exist in the CSV file.\")\n        column_data = [row[column_index] for row in rows]\n        count_data = collections.Counter(column_data)\n        with open(csv_file_path, 'w') as f:\n            writer = csv.writer(f)\n            writer.writerow(['column_name', 'count'])\n            for key, value in count_data.items():\n                writer.writerow([key, value])\n        return count_data\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        if os.path.exists(csv_file_path):\n            os.remove(csv_file_path)\n        raise\n"}
{"task_id": "BigCodeBench/1003", "solution": "import urllib.request\nfrom lxml import etree\nimport pandas as pd\n\n\ndef task_func(url):\n    \"\"\"\n    Fetches parses XML file from specified URL, converts it into a Pandas DataFrame. Parameters: url (str): URL of CSV file to be downloaded. Must be valid and accessible URL. Returns: pandas.DataFrame A DataFrame constructed from parsed XML data. Each row of DataFrame corresponds to an 'item' element in XML file, with child elements of 'item' becoming columns in DataFrame. Raises: ValueError This error is raised in several scenarios: 1. If URL is invalid or XML file cannot be fetched from URL. 2. If XML file has invalid syntax. 3. If XML structure does not conform to expected format. Requirements: - urllib - lxml - pandas Examples: # Example with valid XML structure >>> df = task_func('http://example.com/sample_data.xml') >>> print(df) name age 0 John 25 1 Jane 30 # Example with invalid XML structure >>> df = task_func('http://example.com/invalid_structure.xml') ValueError: XML structure does not match expected format.\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n        xml_content = response.read()\n        parser = etree.XMLParser(encoding='utf-8')\n        tree = etree.fromstring(xml_content, parser)\n\n        # Check if XML structure is valid\n        root = tree.getroot()\n        if root.tag != 'items':\n            raise ValueError('XML structure does not match expected format.')\n\n        # Create a list to store rows\n        rows = []\n\n        # Iterate over 'item' elements\n        for item in root.findall('item'):\n            # Extract 'name' and 'age' from 'item'\n            name = item.find('name').text\n            age = item.find('age').text\n\n            # Append to rows list\n            rows.append([name, age])\n\n        # Convert list to DataFrame\n        df = pd.DataFrame(rows, columns=['name', 'age'])\n\n        return df\n\n    except urllib.error.URLError as e:\n        print(f\"URL Error: {e.reason}\")\n        return None\n\n    except etree.Error as e:\n        print(f\"XML Error: {e.message}\")\n        return None\n"}
{"task_id": "BigCodeBench/1004", "solution": "import urllib.request\nimport re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(url):\n    \"\"\"\n    Downloads text file from specified URL, processes text to count the frequency of each word, plots a bar chart showing ten most frequently occurring words. Parameters: url (str): URL from which text file is to be downloaded. URL should point directly to text file. Returns: tuple: A tuple containing two elements: - Counter: A Counter object from collections module, containing word frequencies in the text. - Axes: A matplotlib Axes object represents plotted bar chart of ten most common words. Note: - function assumes URL points to plain text file may not handle binary files or non-text content correctly. - Words identified using a basic regular expression and are case-sensitive. - function does not remove common stopwords; all words counted as is. - Requires internet access to download the file from URL. Example: >>> word_freq, ax = task_func('http://www.example.com/data.txt') >>> print(word_freq.most_common(5)) [('the', 102), ('of', 76), ('and', 64), ('to', 52), ('in', 41)] Requirements: - urllib - re - collections - matplotlib\n    \"\"\"\n    try:\n        response = urllib.request.urlopen(url)\n        text = response.read().decode('utf-8')\n        words = re.findall(r'\\b\\w+\\b', text)\n        word_freq = Counter(words)\n\n        most_common_words = word_freq.most_common(10)\n\n        words, freqs = zip(*most_common_words)\n\n        fig, ax = plt.subplots()\n        ax.bar(words, freqs)\n        ax.set_title('10 most common words in text file')\n        ax.set_xlabel('words')\n        ax.set_ylabel('frequency')\n\n        plt.tight_layout()\n        plt.show()\n\n        return word_freq, ax\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n"}
{"task_id": "BigCodeBench/1006", "solution": "import os\nimport requests\nfrom zipfile import ZipFile, BadZipFile\n\n\ndef task_func(url, download_path=\"mnt/data/downloads/\"):\n    \"\"\"\n    Downloads and extracts a ZIP file from specified URL to given directory. Parameters: - url (str): URL from which to download ZIP file. should be a valid and accessible URL. - download_path (str): directory path where ZIP file will be downloaded and extracted. Defaults to \"mnt/data/downloads/\". Returns: - str: Path to directory containing extracted contents. If error occurs, descriptive message is returned. message starts with \"Error: \". If specific descrption is either \"The URL does not point to a ZIP file.\", or \"The downloaded file is not a valid ZIP file.\", or \"Unable to download file from provided URL.\". Raises: - Network Issues or Invalid URL: Returns \"Error: Unable to download the file from provided URL.\" if issues in reaching URL or downloading file. - Incorrect File Type: Returns \"Error: URL does not point to a ZIP file.\" if downloaded file's content type is not 'application/zip'. - Corrupt ZIP File: Returns \"Error: downloaded file is not a valid ZIP file.\" if downloaded file is a ZIP file but is corrupt or cannot be extracted. - General Exceptions: Catches and reports other exceptions (like runtime errors) occur during process with a specific error message, formatted as \"Error: [exception message]\". Requirements: - requests - os - zipfile Example: >>> task_func('https://example.com/file.zip') 'mnt/data/downloads/file'\n    \"\"\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        file_path = os.path.join(download_path, os.path.basename(url))\n        with open(file_path, 'wb') as f:\n            f.write(response.content)\n\n        try:\n            with ZipFile(file_path, 'r') as zip_ref:\n                zip_ref.extractall(download_path)\n        except BadZipFile:\n            return \"Error: downloaded file is not a valid ZIP file.\"\n\n        return download_path\n\n    except requests.exceptions.RequestException as e:\n        return \"Error: Unable to download the file from provided URL.\"\n\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n"}
{"task_id": "BigCodeBench/1008", "solution": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom io import StringIO\n\n\ndef task_func(url, table_id):\n    \"\"\"\n    Extracts and converts data from a specified HTML table based on the given 'table_id' on a webpage into a Pandas DataFrame. If table is present but contains no data rows (i.e., no <tr> tags), function returns an empty DataFrame. Parameters: - url (str): The URL of webpage from which to extract the table. - table_id (str): 'id' attribute of HTML table to be extracted. Returns: - df (pd.DataFrame): A DataFrame containing data extracted from the specified HTML table. If table is found but has no rows (<tr> elements), empty DataFrame is returned. Raises: - requests.exceptions.HTTPError: If HTTP request fails (e.g. due to connection issues or a non-successful status code like 404 or 500). - ValueError: If no table with specified 'table_id' is found on the webpage. error message be \"Table with specified ID not found.\" Requirements: - requests - bs4.BeautifulSoup - pandas - io Notes: - function raises HTTPError for unsuccessful HTTP requests, includes scenarios like network problems or non-2xx HTTP responses. - ValueError is raised specifically when HTML table with specified ID is not present in the webpage's content, indicating either incorrect ID or absence of table. - If located table has no rows, indicated by absence of <tr> tags, empty DataFrame is returned. useful for handling tables structurally present in HTML but devoid of data. Example: >>> task_func('https://example.com/data.html', 'table1') DataFrame: Name Age 0 Alice 25 1 Bob 30 Example of ValueError: >>> task_func('https://example.com/data.html', 'nonexistent_table') ValueError: Table with specified ID not found.Example empty table >>> task_func('https://example.com/emptytable.html', 'empty_table') DataFrame: Empty Columns: [] Index: []\n    \"\"\"\n    try:\n        # Send HTTP request to the webpage\n        response = requests.get(url)\n        response.raise_for_status()\n\n        # Parse the HTML content of the webpage\n        soup = BeautifulSoup(response.content, 'html.parser')\n\n        # Find the table with the given 'table_id'\n        table = soup.find('table', {'id': table_id})\n\n        # If the table is not found, raise a ValueError\n        if table is None:\n            raise ValueError(f\"Table with specified ID not found.\")\n\n        # Extract the data from the table and convert it into a Pandas DataFrame\n        df = pd.read_html(StringIO(str(table)))[0]\n\n        return df\n\n    except requests.exceptions.HTTPError as err:\n        print(f\"HTTP Error occurred: {err}\")\n    except ValueError as err:\n        print(f\"ValueError occurred: {err}\")\n"}
{"task_id": "BigCodeBench/1012", "solution": "import requests\nfrom pathlib import Path\nimport zipfile\n\n# Constants\nDOWNLOAD_DIR = Path(\"downloads\")\nZIP_DIR = Path(\"unzipped_files\")\n\n\ndef task_func(url, filename):\n    \"\"\"\n    Downloads and extracts a zip file from specified URL. Parameters: url (str): URL of zip file to download. filename (str): filename under which downloaded zip file will be saved. Returns: tuple: A tuple containing status message and list of filenames in the unzipped directory, or empty list if extraction fails. Note: the status message will contain \"Error\" when: - Network-related exceptions raised if download fails. - File-related exceptions raised if an issue with file handling or extraction. Requirements: - requests - pathlib.Path - zipfile Example: >>> task_func('http://example.com/myfile.zip', 'myfile.zip') ('Download and extraction successful', ['file1.txt', 'file2.txt'])\n    \"\"\"\n    # Create download directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n\n    # Download the zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.HTTPError as errh:\n        return (\"HTTP Error:\", errh)\n    except requests.exceptions.ConnectionError as errc:\n        return (\"Error Connecting:\", errc)\n    except requests.exceptions.Timeout as errt:\n        return (\"Timeout Error:\", errt)\n    except requests.exceptions.RequestException as err:\n        return (\"General Error:\", err)\n\n    # Save the zip file\n    zip_path = DOWNLOAD_DIR / filename\n    with open(zip_path, 'wb') as f:\n        f.write(response.content)\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except zipfile.BadZipfile as errb:\n        return (\"Error in Zip file:\", errb)\n\n    # Return the list of files in the unzipped directory\n    return (\"Download and extraction successful\", [file.filename for file in ZIP_DIR.iterdir()])\n\n"}
{"task_id": "BigCodeBench/1013", "solution": "import requests\nfrom urllib.parse import urljoin\nfrom bs4 import BeautifulSoup\nimport csv\n\n\ndef task_func(\n    url: str,\n    base_url: str = \"https://www.example.com\",\n    csv_file: str = \"scraped_data.csv\",\n) -> int:\n    \"\"\"\n    function scrapes webpage for all hyperlinks saves them as absolute URLs to CSV file. Parameters: - url (str): relative URL of webpage to scrape. - base_url (str, optional): base URL of website to prepend to relative links. Defaults to 'https://www.example.com'. - csv_file (str, optional): filename for CSV file where links will be saved. Defaults to 'scraped_data.csv'. Returns: - int: number of unique absolute links scraped from webpage. Requirements: - requests - urllib.parse.urljoin - bs4.BeautifulSoup - csv Examples: >>> task_func('/mywebpage') 5 >>> task_func('/anotherpage', base_url='https://www.different.com', csv_file='other_links.csv') 8\n    \"\"\"\n    # get the webpage\n    response = requests.get(urljoin(base_url, url))\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    # find all the links\n    links = [a['href'] for a in soup.find_all('a', href=True)]\n\n    # get the absolute links\n    absolute_links = [urljoin(base_url, link) for link in links]\n\n    # remove duplicates\n    unique_absolute_links = list(set(absolute_links))\n\n    # write to csv\n    with open(csv_file, 'w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow([\"Link\"])\n        writer.writerows(unique_absolute_links)\n\n    return len(unique_absolute_links)\n\n"}
{"task_id": "BigCodeBench/1015", "solution": "import requests\nfrom lxml import html\nimport pandas as pd\nimport sqlite3\n\n\ndef task_func(webpage_url: str, database_name: str = \"my_database.db\") -> int:\n    \"\"\"\n    function parses HTML table data from specified URL or local file and stores it into SQLite database. function handles different scenarios for fetching, processing, and storing data. Parameters: - webpage_url (str): URL of webpage or local file path prefixed with \"file://\". - database_name (str): name of SQLite database file where data is to be stored. Defaults to \"my_database.db\". Returns: - int: number of rows in the parsed HTML table. Raises: - requests.RequestException: This exception is raised if network issue in accessing URL. includes scenarios like connection errors, timeouts, and HTTP errors. - sqlite3.DatabaseError: This exception is raised in case of issues connecting to, or writing to, the SQLite database. includes issues like invalid database names, write permissions, or SQL execution errors. Notes: - function designed to replace table \"my_table\" in the specified SQLite database with new data each time it called. - If HTML content does not contain table or if table is empty, function will return 0, indicating no rows were parsed and stored. - function relies on the 'requests', 'lxml', 'pandas', and 'sqlite3' libraries for operations. Requirements: - requests - lxml - pandas - sqlite3 Example: >>> num_rows = task_func(\"http://example.com/tabledata\") >>> print(f\"Number of rows parsed: {num_rows}\") Number of rows parsed: 5\n    \"\"\"\n    # Connect to SQLite database\n    conn = sqlite3.connect(database_name)\n    cursor = conn.cursor()\n\n    # Check if webpage_url is local file\n    if webpage_url.startswith(\"file://\"):\n        with open(webpage_url[len(\"file://\"):], 'r') as file:\n            page_content = file.read()\n    else:\n        try:\n            page_content = requests.get(webpage_url, timeout=5).text\n        except requests.RequestException as e:\n            print(f\"Error: {e}\")\n            return 0\n\n    # Parse HTML table data\n    tree = html.fromstring(page_content)\n    table_data = tree.xpath('//table[@id=\"my_table\"]//tr')\n\n    # Create dataframe from parsed table data\n    df = pd.DataFrame([[td.text for td in tr.xpath('td')] for tr in table_data])\n\n    # Check if dataframe is empty\n    if df.empty:\n        print(\"No rows parsed and stored.\")\n        return 0\n\n    # Store dataframe into SQLite database\n    df.to_sql('my_table', conn, if_exists='append', index=False)\n\n    # Close connection\n    conn.close()\n\n    # Return number of rows\n    return len(df)\n"}
{"task_id": "BigCodeBench/1019", "solution": "from PIL import Image\nimport codecs\nimport pytesseract\n\n\nIMAGE_PATH = \"image.png\"\n\n\ndef task_func(filename=IMAGE_PATH, from_encoding=\"cp1251\", to_encoding=\"utf8\"):\n    \"\"\"\n    Opens image file, extracts text using OCR, converts the text encoding, with fallback to image comment processing. Raises: - ValueError: UnicodeDecodeError or LookupError occurs during conversion Parameters: - filename (str): path to image file. Defaults to global variable 'IMAGE_PATH'. - from_encoding (str): original encoding of extracted text or image comment. Default is 'cp1251'. - to_encoding (str): target encoding for converted text or comment. Default is 'utf8'. Returns: - comment (str): text extracted from the image or image comment, converted to the target encoding. If OCR extraction and comment processing fail, returns empty string. Raises: - ValueError: If incorrect encodings provided for text or comment conversion. Requirements: - codecs - PIL - pytesseract Example: # Assuming 'image.png' contains text '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' in Russian (encoded in cp1251), # this text is successfully extracted by OCR. >>> text = task_func('image.png', 'cp1251', 'utf8') >>> print(text) '\u041f\u0440\u0438\u0432\u0435\u0442 \u043c\u0438\u0440' # output is the utf-8 encoded version of extracted text.\n    \"\"\"\n    try:\n        img = Image.open(filename)\n        text = pytesseract.image_to_string(img, lang='rus', config='--psm 6')\n        if not text:\n            text = img.comment\n        return text.encode(to_encoding)\n    except (UnicodeDecodeError, LookupError):\n        return \"\"\n\n"}
{"task_id": "BigCodeBench/1020", "solution": "import json\nimport requests\nimport chardet\n\n# Constants\nAPI_URL = \"http://api.example.com/data\"\n\n\ndef task_func(url=API_URL, from_encoding=None, to_encoding=\"utf8\"):\n    \"\"\"\n    Fetches data from specified REST API URL and processes it for JSON parsing. process involves decoding and re-encoding data, handling different encoding scenarios. Note: - function initiates an HTTP GET request to specified URL with a 5-second timeout. retrieves response content in raw bytes. Parameters: - url (str): URL of REST API. Default is 'http://api.example.com/data'. - from_encoding (str, optional): original encoding of data. If None, encoding is auto-detected. Default is None. - to_encoding (str): target encoding format for data. Default is 'utf8'. Returns: - dict: JSON-parsed data after re-encoding. Returns empty dictionary if content is empty. Raises: - ValueError: \"Unable to detect encoding for non-empty content\", if it fails to detect encoding for non-empty response content. Requirements: - json - requests - chardet Example: >>> data = task_func('http://api.example.com/data') >>> print(data) {'key': 'value'} # Example of expected output Notes: - function sets a timeout of 5 seconds for API request. handles cases with empty content and undetectable encoding by returning empty dictionary or raising an exception, respectively. - decoding and re-encoding steps ensure compatibility with various data formats and final JSON parsing.\n    \"\"\"\n    try:\n        response = requests.get(url, timeout=5)\n        content = response.content\n        if from_encoding is None:\n            detected_encoding = chardet.detect(content)['encoding']\n        else:\n            detected_encoding = from_encoding\n        decoded_content = content.decode(detected_encoding)\n        re_encoded_content = decoded_content.encode(to_encoding)\n        parsed_content = json.loads(re_encoded_content)\n        return parsed_content\n    except requests.exceptions.RequestException as e:\n        print(e)\n        return {}\n    except ValueError as e:\n        print(e)\n        return {}\n\n"}
{"task_id": "BigCodeBench/1022", "solution": "import pandas as pd\nimport os\nfrom datetime import datetime\nfrom pandas.errors import EmptyDataError\n\n\ndef task_func(csv_file_path, column_name, date_format=\"%Y-%m-%d\"):\n    \"\"\"\n    Reads a CSV file processes its date-related data. function performs key tasks such as checking for file's existence, validating the presence of specified date column, converting date values to datetime objects, filtering rows based on current date, sorting resulting data. function handles special cases, like empty CSV file, by returning empty DataFrame and raises exceptions for specific error scenarios like missing files or columns. Parameters: - csv_file_path (str): path to the CSV file. FileNotFoundError is raised if path is invalid. - column_name (str): name of column containing date values. ValueError is raised if this column is missing in the CSV file. - date_format (str, optional): format of date values in the specified column. Defaults to '%Y-%m-%d'. Returns: - pandas - os - datetime.datetime - pandas.errors.EmptyDataError Raises: - FileNotFoundError: If specified CSV file not found at given path. - ValueError: If specified column not present in the CSV file. Requirements: - pandas - os - datetime Example: >>> task_func('path/to/csvfile.csv', 'DateColumn') Date Value 0 2023-12-10 100 1 2023-12-11 150\n    \"\"\"\n    if not os.path.isfile(csv_file_path):\n        raise FileNotFoundError(f\"{csv_file_path} not found\")\n\n    try:\n        df = pd.read_csv(csv_file_path)\n    except EmptyDataError:\n        return pd.DataFrame()\n\n    if column_name not in df.columns:\n        raise ValueError(f\"{column_name} not found in the CSV file\")\n\n    try:\n        df[column_name] = pd.to_datetime(df[column_name], format=date_format)\n    except ValueError:\n        raise ValueError(f\"Invalid date format in {column_name}\")\n\n    df = df.loc[df[column_name] == datetime.now().date()]\n    df = df.sort_values(by=[column_name])\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1039", "solution": "import ssl\nimport os\nimport hashlib\n\n\ndef task_func(client_socket, cert_file, key_file, buffer_size=1024):\n    \"\"\"\n    function secures client socket using SSL/TLS and sends back SHA256 hash of file requested by the client. Parameters: - client_socket (socket.socket): client socket wrapped with SSL/TLS for secure communication. - cert_file (str): file path to SSL certificate to used for secure connection. - key_file (str): file path to SSL key corresponding to the certificate. - buffer_size (int, optional): The size of buffer used to receive data from the client. Defaults to 1024 bytes. Returns: - str: SHA256 hash of requested file. If the requested file does not exist, returns 'File not found'. In case of exception during processing, error message is returned. Requirements: - ssl - os - hashlib Note: - function assumes client requests file by sending its path. - function does not handle opening or closing of the client_socket itself. - Error handling is basic might need to be expanded based on specific use cases. Example: >>> # Server setup >>> server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) >>> server_socket.bind(('localhost', 443)) >>> server_socket.listen(5) >>> cert_file = \"path/to/certificate.crt\" >>> key_file = \"path/to/private.key\" >>> # Accept client connection >>> client_socket, addr = server_socket.accept() >>> # Use task_func function to handle client request >>> file_hash = task_func(client_socket, cert_file, key_file) >>> print(\"Sent file hash:\", file_hash) >>> server_socket.close()\n    \"\"\"\n    try:\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)\n        context.load_cert_chain(certfile=cert_file, keyfile=key_file)\n        ssl_socket = context.wrap_socket(client_socket, server_side=True)\n        data = ssl_socket.recv(buffer_size)\n        file_path = data.decode('utf-8')\n        if os.path.exists(file_path):\n            with open(file_path, 'rb') as f:\n                file_data = f.read()\n                file_hash = hashlib.sha256(file_data).hexdigest()\n                ssl_socket.send(file_hash.encode('utf-8'))\n            return file_hash\n        else:\n            return 'File not found'\n    except Exception as e:\n        return str(e)\n"}
{"task_id": "BigCodeBench/1040", "solution": "import socket\nimport select\nimport queue\nfrom datetime import datetime, timedelta\n\n\ndef task_func(\n    server_address=\"localhost\", server_port=12345, buffer_size=1024, run_duration=5\n):\n    \"\"\"\n    Run non-blocking echo server appends the server's current time to received data sends it back to the client, handling exceptional conditions for each socket. Parameters: - server_address (str): address for server to listen on. Default is 'localhost'. - server_port (int): port for server to listen on. Default is 12345. - buffer_size (int): buffer size for data reception. Default is 1024 bytes. - run_duration (int): duration (in seconds) for server will run. Default is 5 seconds. Returns: - str: status message indicating server's operation and run duration. Requirements: - socket - select - queue - datetime Example: >>> print(task_func()) 'Server started on localhost:12345. Ran for 5 seconds.'\n    \"\"\"\n    # Create a socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    # Bind the socket to the server address and port\n    sock.bind((server_address, server_port))\n\n    # Listen for incoming connections\n    sock.listen(5)\n\n    # Create a queue for incoming data\n    input_queue = queue.Queue(maxsize=10)\n\n    # Start the timer\n    start_time = datetime.now()\n\n    while True:\n        # Check if the run duration has passed\n        if (datetime.now() - start_time).total_seconds() > run_duration:\n            break\n\n        # Wait for data to arrive\n        sock.setblocking(0)\n        ready_to_read, _, _ = select.select([sock], [], [])\n\n        if sock in ready_to_read:\n            data = sock.recv(buffer_size)\n            if data:\n                # Append the server's current time to the data\n                data = f\"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}: {data.decode()}\"\n                # Send the data back to the client\n                sock.send(data.encode())\n            else:\n                # If no data was received, close the connection\n                sock.close()\n                break\n\n    # Stop the timer\n    end_time = datetime.now()\n\n    # Return the status message\n    return f\"Server started on {server_address}:{server_port}. Ran for {(end_time - start_time).total_seconds()} seconds.\"\n\n"}
{"task_id": "BigCodeBench/1042", "solution": "import smtplib\nfrom email.message import EmailMessage\nimport getpass\n\nSERVER_ADDRESS = \"localhost\"\nSERVER_PORT = 25\nBUFFER_SIZE = 1024\nSMTP_SERVER = \"smtp.gmail.com\"\nSMTP_PORT = 587\n\n\ndef task_func(client_socket):\n    \"\"\"\n    Receive message from client socket send it as email via SMTP server. Parameters: client_socket (socket.socket): client socket from which the message is received. Returns: - None Note: - Requires working internet connection and access to SMTP server. - function asks for sender's email, recipient's email, sender's email password for authentication. Requirements: - smtplib - email.message.EmailMessage - getpass Example: >>> import socket >>> server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) >>> server_socket.bind((SERVER_ADDRESS, SERVER_PORT)) >>> server_socket.listen(5) >>> client_socket, addr = server_socket.accept() >>> task_func(client_socket)\n    \"\"\"\n    # Receive email from client\n    email_msg = client_socket.recv(BUFFER_SIZE).decode()\n\n    # Split email message into sender's email, recipient's email, and email body\n    sender, recipient, email_body = email_msg.split('\\n')\n\n    # Receive password for authentication\n    password = getpass.getpass(\"Enter your password: \")\n\n    # Create email\n    email = EmailMessage()\n    email['From'] = sender\n    email['To'] = recipient\n    email['Subject'] = 'Hello'\n    email.set_content(email_body)\n\n    # Send email via SMTP server\n    try:\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n            server.login(sender, password)\n            server.send_message(email)\n        print(\"Email sent successfully\")\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n\n"}
{"task_id": "BigCodeBench/1053", "solution": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport matplotlib.pyplot as plt\n\n# Constants\nSTOP_WORDS = [\"a\", \"an\", \"the\", \"in\", \"on\", \"at\", \"and\", \"or\"]\n\n\ndef task_func(file_path, save_path=None):\n    \"\"\"\n    Processes a CSV file containing text data and generates a histogram of ten most common words. This function reads a CSV file, expected to contain a single column of text data. It splits text into words and creates a histogram of frequency of top ten most common words, excluding predefined set of stopwords. resulting histogram can be either displayed on screen or saved to a file. CSV file should have a single column with the header 'Text'. Each row under this column should contain a text string. If CSV file not have header, first column is assumed to be the text data. Parameters: - file_path (str): path to input CSV file. - save_path (str, optional): path where histogram plot will be saved. If not provided, plot is displayed on the screen. Returns: - matplotlib.axes.Axes: The Axes object of plot if save_path is not provided. Useful for further customization or display in notebooks. - None: If save_path is provided, plot is saved to specified path, function returns None. Raises: - FileNotFoundError: If specified file_path does not exist. It raises a FileNotFoundError with message indicating the file path was not found. - Exception: For any other errors occur during the function execution. In this case, error is printed to console, and None is returned. Requirements: - pandas - scikit-learn - matplotlib Notes: - function uses pandas for data manipulation, sklearn's CountVectorizer for text vectorization, and matplotlib for plotting. - predefined list of stopwords is used to filter out common but insignificant words from the histogram. Examples: >>> ax = task_func('text_data.csv') print(ax) Axes(0.125,0.11;0.775x0.77) result = task_func('text_data.csv', 'output_plot.png') print(result) None\n    \"\"\"\n    try:\n        # Read the CSV file\n        df = pd.read_csv(file_path)\n\n        # Check if the column 'Text' exists in the DataFrame\n        if 'Text' not in df.columns:\n            raise ValueError(\"The CSV file does not contain a 'Text' column.\")\n\n        # Split the text into words\n        vectorizer = CountVectorizer(stop_words=STOP_WORDS)\n        X = vectorizer.fit_transform(df['Text'])\n\n        # Get the feature names\n        feature_names = vectorizer.get_feature_names_out()\n\n        # Get the top 10 most common words\n        top_words = pd.DataFrame(X.toarray(), columns=feature_names).sum().sort_values(ascending=False)[:10]\n\n        # Create a histogram\n        plt.figure(figsize=(10, 5))\n        plt.bar(top_words.index, top_words.values)\n        plt.xticks(rotation=90)\n        plt.xlabel('Words')\n        plt.ylabel('Frequency')\n        plt.title('Histogram of Top 10 Most Common Words')\n\n        # If save_path is provided, save the plot\n        if save_path is not None:\n            plt.savefig(save_path)\n\n        # Return the Axes object\n        return plt\n\n    except FileNotFoundError:\n        print(f\"File {file_path} not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n"}
{"task_id": "BigCodeBench/1057", "solution": "import pandas as pd\nimport itertools\nimport numpy as np\n\n\ndef task_func(animals=None, foods=None):\n    \"\"\"\n    Create DataFrame with combinations of animals and foods in 'animal:food' format. Parameters: - animals (list of str, optional): list of animal names. If not provided, defaults to predefined list of common animals including 'Dog', 'Cat', 'Elephant', 'Tiger', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey' 'Kangaroo'. - foods (list of str, optional): list of food names. If not provided, defaults to predefined list of common foods including 'Meat', 'Fish', 'Grass', 'Fruits', 'Insects', 'Seeds' 'Leaves'. Returns: - df (pandas.DataFrame): DataFrame where each row represents unique animal from 'animals' list and each column represents food item from 'foods' list. Each cell contains string in format 'animal:food'. Handling of Special Cases: - If both 'animals' and 'foods' lists are empty or not provided, function returns empty DataFrame. If either 'animals' or 'foods' list empty or not provided, function uses predefined list for missing parameter. Requirements: - pandas - numpy - itertools Example: >>> animal_food_pairs = task_func(['Dog', 'Cat'], ['Meat', 'Fish']) >>> print(animal_food_pairs) Meat Fish 0 Dog:Meat Dog:Fish 1 Cat:Meat Cat:Fish Note: function generates all possible combinations of provided 'animals' and 'foods' using itertools.product resulting pairs are shuffled randomly to ensure variety in DataFrame layout.\n    \"\"\"\n    if animals is None:\n        animals = ['Dog', 'Cat', 'Elephant', 'Tiger', 'Lion', 'Zebra', 'Giraffe', 'Bear', 'Monkey', 'Kangaroo']\n    if foods is None:\n        foods = ['Meat', 'Fish', 'Grass', 'Fruits', 'Insects', 'Seeds', 'Leaves']\n\n    # Generate all possible combinations\n    pairs = list(itertools.product(animals, foods))\n\n    # Shuffle to ensure variety in DataFrame layout\n    np.random.shuffle(pairs)\n\n    # Convert to DataFrame\n    df = pd.DataFrame(pairs, columns=['Animal', 'Food'])\n\n    # Rename columns\n    df.rename(columns={'Animal': 'animal', 'Food': 'food'}, inplace=True)\n\n    return df\n\n"}
{"task_id": "BigCodeBench/1077", "solution": "from datetime import datetime\nimport pytz\nimport numpy as np\n\n\ndef task_func(time_strings, timezone):\n    \"\"\"\n    Calculates average time difference in seconds between each consecutive pair of timestamps in a given list, after converting them to specified timezone. Parameters: - time_strings (list of str): A list of timestamp strings in format 'dd/mm/yy HH:MM:SS.fff'. - timezone (str): The timezone to which timestamp strings should be converted. This should be a valid timezone string, e.g., 'America/New_York'. Returns: - float: mean (average) time difference in seconds between each consecutive pair of timestamps. If less than two timestamps in list, function returns 0.0. Requirements: - datetime - pytz - numpy Notes: - function first converts each timestamp in list to specified timezone - then calculates absolute time difference in seconds between each consecutive pair of timestamps. - If list contains less than two timestamps, function returns 0.0, as no pairs to compare. - If no time differences (e.g. in case of single timestamp after timezone conversion), it also returns 0.0. function uses numpy's mean function to calculate average time difference. Example: >>> time_strings = ['30/03/09 16:31:32.123', '30/03/09 16:32:33.123', '30/03/09 16:33:34.123'] >>> mean_diff = task_func(time_strings, 'America/New_York') >>> print(mean_diff) 61.0\n    \"\"\"\n    # Convert all time strings to specified timezone\n    timestamps = [datetime.strptime(time, '%d/%m/%y %H:%M:%S.%f') for time in time_strings]\n    timestamps = [t.astimezone(pytz.timezone(timezone)) for t in timestamps]\n\n    # Calculate time difference in seconds\n    time_diffs = [(t2 - t1).total_seconds() for t1, t2 in zip(timestamps[:-1], timestamps[1:])]\n\n    # Return average time difference\n    return np.mean(time_diffs)\n\n"}
{"task_id": "BigCodeBench/1085", "solution": "import re\nfrom collections import Counter\nimport matplotlib.pyplot as plt\n\n\ndef task_func(text):\n    \"\"\"\n    Analyzes frequency of words in given text after lowercasing removing punctuation splitting into words plots top 10 most common words. Parameters: - text (str): input text to be analyzed. Returns: - list: list of tuples containing 10 most common words and counts - Axes: matplotlib Axes object of bar chart. Requirements: - re - collections.Counter - matplotlib.pyplot Example: >>> common_words, ax = task_func(\"This is sample text. text contains sample words like 'text', 'sample', 'words'.\") >>> print(common_words) [('sample', 3), ('text', 3), ('this', 2), ('words', 2), ('is', 1), ('a', 1), ('contains', 1), ('like', 1), ('and', 1)]\n    \"\"\"\n    # Lowercasing the text\n    text = text.lower()\n\n    # Removing punctuation\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Splitting into words\n    words = text.split()\n\n    # Counting frequency of each word\n    word_counts = Counter(words)\n\n    # Getting the 10 most common words\n    common_words = word_counts.most_common(10)\n\n    # Plotting the bar chart\n    fig, ax = plt.subplots()\n    ax.bar(range(len(common_words)), [count for word, count in common_words], align='center')\n    ax.set_xticks(range(len(common_words)))\n    ax.set_xticklabels([word for word, count in common_words])\n    plt.show()\n\n    return common_words\n"}
{"task_id": "BigCodeBench/1124", "solution": "import re\nfrom urllib.parse import urlparse\nfrom bs4 import BeautifulSoup\nimport requests\n\n\ndef task_func(myString):\n    \"\"\"\n    Extracts a URL from given string retrieves the title of web page from URL. If no valid URL found, or URL not result in successful web page fetch, returns appropriate error message. Parameters: myString (str): The string from which to extract URL. Returns: str: title of webpage at extracted URL if successful, otherwise one of following error messages: - \"No valid URL found in the provided string.\" - \"Unable to fetch content of URL: {url}\" - \"No title tag found in the webpage.\" Requirements: - re - urllib.parse.urlparse - bs4.BeautifulSoup - requests Example: >>> task_func('Check this out: https://www.google.com') 'Google' >>> task_func('No URL here') 'No valid URL found in the provided string.' >>> task_func('Check this broken link: https://www.thisdoesnotexist12345.com') 'Unable to fetch content of URL: https://www.thisdoesnotexist12345.com'\n    \"\"\"\n    # Extract URL from string\n    url_match = re.search('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[^&+]|[^?%()]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', myString)\n\n    if not url_match:\n        return \"No valid URL found in the provided string.\"\n\n    url = url_match.group(0)\n\n    # Fetch content of URL\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException as e:\n        return f\"Unable to fetch content of URL: {url}\"\n\n    # Check if URL is valid\n    if response.status_code != 200:\n        return f\"Unable to fetch content of URL: {url}\"\n\n    # Parse content to BeautifulSoup object\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    # Check if title tag exists\n    if soup.title:\n        return soup.title.string\n    else:\n        return \"No title tag found in the webpage.\"\n"}
{"task_id": "BigCodeBench/1129", "solution": "import json\nimport requests\nimport os\nfrom datetime import datetime\n\ndef task_func(json_data, unknown_key, save_dir=None):\n    \"\"\"\n    Parses a JSON string to find URL associated with specified key, downloads file from URL, saves it with timestamped filename. filename format is '{unknown_key}_{timestamp}.txt', 'timestamp' is formatted as '%Y%m%d%H%M%S%f' to include date and time down to microseconds. file is saved in the specified directory or in the current working directory by default. Parameters: - json_data (str): JSON data as a string, expected to contain key directly linked to URL. - unknown_key (str): key used to extract the URL from JSON data. - save_dir (str, optional): directory to save downloaded file. If not specified, file is saved in the current working directory. Defaults to None. Returns: str: absolute path of downloaded file, reflecting where it has been saved. Requirements: - json - requests - os - datetime.datetime Example: >>> json_str = '{\"unknown\": \"https://example.com/file.txt\"}' >>> file_path = task_func(json_str, 'unknown') >>> print(f\"Downloaded file saved at: {file_path}\")\n    \"\"\"\n    # Parse JSON data\n    data = json.loads(json_data)\n\n    # Extract URL\n    url = data.get(unknown_key)\n\n    # Download file\n    response = requests.get(url)\n    response.raise_for_status()\n\n    # Save file\n    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n    filename = f'{unknown_key}_{timestamp}.txt'\n    file_path = os.path.join(save_dir, filename) if save_dir else filename\n    with open(file_path, 'wb') as f:\n        f.write(response.content)\n\n    return file_path\n"}
{"task_id": "BigCodeBench/1137", "solution": "import bs4\nimport requests\nimport re\nimport json\n\ndef task_func(url: str, output_path: str) -> list:\n    \"\"\"\n    Extracts phone numbers from given URL or local file saves to specified file in JSON format. Parameters: - url (str): URL of webpage to scrape or local file path prefixed with 'file://'. - output_path (str): path where extracted phone numbers should be saved in JSON format. Returns: - list: list of strings each representing found phone number. Requirements: - bs4 - requests - re - json Example: >>> task_func('file:///path/to/local/file.txt', 'output.json') ['+1 (234) 567 8901', '+44 1234 567890']\n    \"\"\"\n    if url.startswith('file://'):\n        with open(url[len('file://'):], 'r') as f:\n            data = f.read()\n    else:\n        response = requests.get(url)\n        data = response.text\n\n    soup = bs4.BeautifulSoup(data, 'html.parser')\n\n    phone_numbers = re.findall(r'\\+\\d{1,3}?[-.\\s]?\\(?\\d{1,4}\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}', soup.text)\n\n    with open(output_path, 'w') as f:\n        json.dump(phone_numbers, f)\n\n    return phone_numbers\n"}
