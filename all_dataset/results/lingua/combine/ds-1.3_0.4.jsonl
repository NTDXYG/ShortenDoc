{"task_id": "EvoEval/0", "completion": "\n    def compare_happiness(a, b):\n        if a == b:\n            return None\n        elif a == \"happy\" or b == \"happy\":\n            return None\n        elif len(a) < 3 or len(b) < 3:\n            return None\n        elif len(set(a)) != len(a) or len(set(b)) != len(b):\n            return None\n        else:\n            return max(a, b)\n\n    print(compare_happiness(\"1,234\", \"5,678\"))\n    print(compare_happiness(\"1,112\", \"3,344\"))\n    print(compare_happiness(\"1,123\", \"1,123\"))\n    print(compare_happiness(\"1,234\", \"1,112\"))\n\ncompare_happiness(\"1,234\", \"5,678\")\ncompare_happiness(\"1,112\", \"3,344\")\ncompare_happiness(\"1,123\", \"1,123\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\", \"1,112\")\ncompare_happiness(\"1,234\","}
{"task_id": "EvoEval/1", "completion": "\n\n    def round_and_flip(value):\n        parts = value.split()\n        number = float(''.join(filter(str.isdigit, parts[0])))\n        if parts[1] in ['ABC', 'abc']:\n            return ' '.join(parts[::-1])\n        else:\n            return ' '.join(parts[::-1])\n\n    print(round_and_flip(\"10.5abc\"))  # '11 ABC'\n    print(round_and_flip(\"15.3ABC\"))  # '15 abc'\n    print(round_and_flip(\"14.5abc\"))  # '15 ABC'\n    print(round_and_flip(\"-14.5ABC\"))  # '-15 abc'\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(pow(2, n, p))\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    def sort_parentheses(lst: List[str]) -> str:\n        s = ''.join(lst)\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n        return 'Yes' if not stack else 'No'\n\n    print(sort_parentheses(['(three)(', '(five)', '(one)']))\n    print(sort_parentheses(['(five)', '(one)']))\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum_digits(largest_prime)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    def check(numbers: List[float], threshold: float) -> List[float]:\n        result = []\n        for i in range(len(numbers)):\n            if i == 0 or i == len(numbers) - 1:\n                if abs(numbers[i] - numbers[i - 1]) < threshold:\n                    result.append(round(numbers[i]))\n            else:\n                if abs(numbers[i] - numbers[i - 1]) < abs(numbers[i] - numbers[i + 1]):\n                    result.append(round(numbers[i - 1]))\n                elif abs(numbers[i] - numbers[i - 1]) == abs(numbers[i] - numbers[i + 1]):\n                    result.append(round(numbers[i - 1]))\n                else:\n                    result.append(round(numbers[i + 1]))\n        return result\n\n    def sort_and_return(numbers: List[float]) -> List[float]:\n        numbers.sort()\n        if len(numbers) % 2 == 0:\n            return numbers[::-1]\n        else:\n            return numbers\n\n    if len(numbers) == 0:\n        return numbers\n    else:\n        return sort_and_return(check(numbers, threshold))\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n / 2\n    else:\n        return (n + 1) / 2\n"}
{"task_id": "EvoEval/7", "completion": "\n    def sum_square_cube(n: int):\n        return sum(i**2 if i%3==0 else i**3 for i in range(1, n+1))\n\n    return sum_square_cube(n)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not string:\n        return (True, 0, bracket, 0)\n\n    count = 0\n    sequence = True\n    for br in string:\n        if br == bracket:\n            count += 1\n        elif br == '<' and bracket == '<':\n            sequence = False\n        elif br == '>' and bracket == '>':\n            sequence = True\n\n    if string[-1] == bracket:\n        sequence = False\n\n    return (sequence, count, bracket, count + 1 if sequence else count - 1)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_position = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n    planet_orbit = {\n        \"Mercury\": [\"Venus\"],\n        \"Venus\": [\"Earth\", \"Mars\"],\n        \"Earth\": [\"Mars\", \"Jupiter\"],\n        \"Mars\": [\"Jupiter\", \"Saturn\"],\n        \"Jupiter\": [\"Saturn\", \"Uranus\"],\n        \"Saturn\": [\"Uranus\", \"Neptune\"],\n        \"Uranus\": [\"Neptune\"]\n    }\n\n    if planet1 not in planet_position or planet2 not in planet_position:\n        return {}\n\n    if planet1 == planet2:\n        return {}\n\n    min_distance = float('inf')\n    result = {}\n\n    for planet in planet_position:\n        if planet in planet_orbit[planet1] and planet in planet_orbit[planet2]:\n            distance = abs(planet_position[planet1] - planet_position[planet2])\n            if distance < min_distance:\n                min_distance = distance\n                result = {planet: min_distance}\n            elif distance == min_distance:\n                result[planet] = min_distance\n\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    letter_grades = {'A+': 4.0, 'A': 4.0, 'A-': 3.0, 'B+': 2.7, 'B': 2.7, 'B-': 2.3, 'C+': 1.7, 'C': 1.7, 'C-': 1.3, 'D+': 0.7, 'D': 0.0, 'D-': 0.0, 'E': 0.0}\n    result = []\n    for name, gpa in name_grade_list:\n        if gpa < 0 or gpa > 4.0:\n            result.append((name.capitalize(), 'E'))\n        else:\n            for grade, mark in letter_grades.items():\n                if gpa >= mark:\n                    result.append((name.capitalize(), grade))\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def get_grade(gpa):\n        if gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'B'\n        elif gpa > 3.0:\n            return 'C'\n        elif gpa > 2.7:\n            return 'D'\n        else:\n            return 'E'\n\n    def get_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def get_final_grade(name, gpa):\n        consonants = get_consonants(name)\n        if consonants < n:\n            return f'{name} {get_grade(gpa)}'\n        else:\n            return f'{name} {get_grade(gpa + 1)}'\n\n    return [get_final_grade(name, gpa) for name, gpa in student_info]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    def first_signed_digit(n):\n        return int(str(n)[0]) if n >= 0 else -int(str(n)[1:])\n\n    def exchange_elements(arr, lst1):\n        arr.sort(reverse=True)\n        lst1.sort()\n        for i in range(len(arr)):\n            if sum_digits(arr[i]) > sum_digits(lst1[i]):\n                lst1[i], arr[i] = arr[i], lst1[i]\n                if sum_digits(lst1[i]) > sum_digits(lst1[i - 1]) if i > 0 else False:\n                    return \"YES\"\n        return \"NO\"\n\n    return exchange_elements(arr, lst1)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    return [f\"0b{bin(i)}\" for i in primes]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiou\"\n    notes = {\n        \"a\": \"o o| .| o| o| .| .| o\",\n        \"e\": \"o o| .| o| o| .| .| o o\",\n        \"i\": \"o o| .| o| o| .| .| o o o\",\n        \"o\": \"o o| .| o| o| .| .| o o o o\",\n        \"u\": \"o o| .| o| o| .| .| o o o o o\"\n    }\n    result = []\n    for i, letter in enumerate(word):\n        if letter in vowels:\n            result.append(notes[letter][i])\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_lst = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_lst.append(fibfib_lst[i-1] + fibfib_lst[i-2] + fibfib_lst[i-3])\n\n    if n >= len(fibfib_lst):\n        return -1\n\n    return fibfib_lst[n]\n\n"}
{"task_id": "EvoEval/18", "completion": "\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return largest_withdrawal, smallest_deposit, True\n        if largest_withdrawal is None or operation > largest_withdrawal:\n            largest_withdrawal = operation\n        if smallest_deposit is None or operation < smallest_deposit:\n            smallest_deposit = operation\n    return largest_withdrawal, smallest_deposit, False\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(s):\n        return s.lower() if s.isupper() else s.upper()\n\n    def assign_grade(gpa):\n        if gpa > 3.7:\n            return 'A+'\n        elif gpa > 3.3:\n            return 'A'\n        elif gpa > 2.7:\n            return 'B+'\n        elif gpa > 2.3:\n            return 'B'\n        elif gpa > 2.0:\n            return 'B-'\n        elif gpa > 1.7:\n            return 'C+'\n        elif gpa > 1.3:\n            return 'C'\n        elif gpa > 1.0:\n            return 'C-'\n        elif gpa > 0.7:\n            return 'D+'\n        elif gpa > 0.0:\n            return 'D'\n        else:\n            return 'F'\n\n    return [(reverse_case(s), assign_grade(g)) for s, g in zip(s.split(), grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    return [base_change(i, base) for i in range(x + 1)]\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(brazilian_factorial(i))\n\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        return len(set(s)) == len(s)\n\n    def sort_string(s: str) -> str:\n        return ' '.join(sorted(s.split()))\n\n    strings = numbers.split()\n    happy_strings = [s for s in strings if is_happy(s)]\n    not_happy_strings = [s for s in strings if not is_happy(s)]\n\n    if not happy_strings:\n        return 'Not happy string'\n    else:\n        return sort_string(' '.join(happy_strings))\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    valid_triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not valid_triples:\n        return 0, 1\n    else:\n        return sum(valid_triples), reduce(lambda x, y: x * y, [a[i] for i in valid_triples[0]])\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_values = [int(v) for v in values if int(v) % 2 == 0]\n    if even_values:\n        even_values.sort()\n        smallest_even_value_index = even_values.index(even_values[0])\n        smallest_even_value = even_values[0]\n        return (' '.join(sorted(values)), smallest_even_value_index)\n    else:\n        return ('', '')\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes_lst1 = [i for i in lst1 if is_prime(i)]\n    primes_lst2 = [i for i in lst2 if is_prime(i)]\n\n    if len(primes_lst1) > x:\n        return y\n    elif len(primes_lst2) > y:\n        return x\n    else:\n        return max(len(primes_lst1), len(primes_lst2))\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    result = []\n    for grade, s0, s1 in zip(grades, s0, s1):\n        if s0 == s1 and grade > 3.0:\n            result.append('A+')\n        elif s0 == s1 and grade > 2.0:\n            result.append('A')\n        elif s0 == s1 and grade > 1.0:\n            result.append('B+')\n        elif s0 == s1 and grade > 0.0:\n            result.append('B')\n        elif s0 != s1 and grade > 3.0:\n            result.append('C+')\n        elif s0 != s1 and grade > 2.0:\n            result.append('C')\n        elif s0 != s1 and grade > 1.0:\n            result.append('B-')\n        elif s0 != s1 and grade > 0.0:\n            result.append('B-')\n        else:\n            result.append('D')\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return y\n    else:\n        return largest_prime_factor(n)\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if '/' in note:\n            numerator, denominator = note.split('/')\n            result.append(int(x) * int(numerator) <= int(denominator))\n        else:\n            result.append(note == 'o')\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def prime_factorial(n: int) -> int:\n        i = 2\n        count = 0\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                count += 1\n        return count * factorial(count)\n\n    return prime_factorial(n)\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    def shift_s(s: str, shift: int) -> str:\n        return s[-shift:] + s[:-shift]\n\n    result = []\n    for s in input:\n        max_depth = get_max_depth(s)\n        shifted = shift_s(s, max_depth - shift)\n        result.append(shifted)\n    return result\n"}
{"task_id": "EvoEval/33", "completion": "\n    def roman_to_int(s):\n        roman_val = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and roman_val[s[i]] > roman_val[s[i - 1]]:\n                int_val += roman_val[s[i]] - 2 * roman_val[s[i - 1]]\n            else:\n                int_val += roman_val[s[i]]\n        return int_val\n\n    def int_to_roman(num):\n        val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        syb = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n        roman_num = ''\n        i = 0\n        while num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n\n    if len(s) < 3:\n        return False\n    if s.count('i') > 1 or s.count('v') > 1 or s.count('x') > 1 or s.count('l') > 1 or s.count('c') > 1 or s.count('d') > 1 or s.count('m') > 1:\n        return False\n    if s.count('iv') > 1 or s.count('ix') > 1 or s.count('xl') > 1 or s.count('xc') > 1 or s.count('cd') > 1 or s.count('cm') > 1:\n        return False\n    if s.count('i') > 1 or s.count('v')"}
{"task_id": "EvoEval/34", "completion": "\n    def md5(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(s: str) -> int:\n        max_level = level = 0\n        for c in s:\n            if c == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                level -= 1\n        return max_level\n\n    def group(s: str) -> List[str]:\n        groups = []\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')' and stack:\n                groups.append(''.join(stack))\n                stack = []\n        if stack:\n            groups.append(''.join(stack))\n        return groups\n\n    if not paren_string:\n        return []\n\n    groups = group(paren_string)\n    results = []\n    for group in groups:\n        level = deepest_level(group)\n        result = md5(' '.join(group.split()))\n        results.append(result)\n    return results\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n    for key in dict:\n        if len(key) != 3:\n            return False\n        if key[0] == key[1] or key[1] == key[2] or key[0] == key[2]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n\n    mod_p = [0] * len(arr)\n    for i in range(len(arr)):\n        mod_p[i] = arr[i] % p\n\n    mod_p.sort()\n\n    for i in range(len(arr)):\n        if mod_p[i] != i % p:\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    min_sub_array = (0, 0)\n    even_count = 0\n    odd_count = 0\n    current_sum = 0\n    for i, num in enumerate(nums):\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        current_sum += num\n        if current_sum % 2 == 0:\n            even_count -= 1\n        else:\n            odd_count -= 1\n        if even_count == 0 and odd_count == 0 and current_sum < min_sum:\n            min_sum = current_sum\n            min_sub_array = (i - even_count, i)\n    return min_sub_array, min_sum\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_distinct(l, n):\n        return len(l) == len(set(l))\n\n    even_palindromes = [i for i in range(1, n, 2) if is_palindrome(i)]\n    odd_palindromes = [i for i in range(1, n, 2) if not is_palindrome(i)]\n\n    return is_distinct([i for i in l if is_palindrome(i)], 4), is_distinct([i for i in l if not is_palindrome(i)], 5)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def smallest(a, b):\r\n        return a if a < b else b\r\n\r\n    def count_changes(arr, i, j):\r\n        changes = 0\r\n        while i < j:\r\n            if arr[i] != arr[j]:\r\n                changes += 1\r\n            i += 1\r\n            j -= 1\r\n        return changes\r\n\r\n    def make_palindrome(arr, i, j):\r\n        changes = 0\r\n        while i < j:\r\n            if arr[i] != arr[j]:\r\n                arr[i] = arr[j]\r\n                changes += 1\r\n            i += 1\r\n            j -= 1\r\n        return changes\r\n\r\n    n = len(arr)\r\n    i = 0\r\n    j = n - 1\r\n    changes = 0\r\n    while i < j:\r\n        if arr[i] != arr[j]:\r\n            changes += count_changes(arr, i, j)\r\n            arr[i] = arr[j]\r\n        i += 1\r\n        j -= 1\r\n    changes += make_palindrome(arr, 0, n - 1)\r\n    return changes\r\n\r"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_largest_prime(n):\n        while n % 2 == 0:\n            n = n // 2\n        if is_prime(n):\n            return n\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                if is_prime(i):\n                    return i\n                if is_prime(n // i):\n                    return n // i\n        return None\n\n    def get_last_digits(nums, n):\n        return [num % 10**n for num in nums]\n\n    last_digits = get_last_digits(nums, 2)\n    if all(last_digit in [1, 3, 5, 7, 9] for last_digit in last_digits):\n        return get_largest_prime(max(nums))\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    shifted_s = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            shifted_s += s[i]\n        else:\n            shifted_s += s[i-shift] if i-shift >= 0 else s[i-shift+len(s)]\n    count = 0\n    for char in shifted_s:\n        if char in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n\n    def is_whole_number(n):\n        return n.is_integer() and n > 0\n\n    def is_fraction(s):\n        num, den = map(int, s.split('/'))\n        return is_whole_number(num) and is_whole_number(den) and den != 0\n\n    def is_valid_expression(s):\n        s = re.sub(r'<|>', '', s)\n        parts = s.split(',')\n        for part in parts:\n            if not is_fraction(part):\n                return False\n        return True\n\n    return is_valid_expression(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    def fib4(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        else:\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n    sequence = [fib4(n) for _ in range(n)]\n    sequence.sort(reverse=(n%2==0))\n    return sequence\n"}
{"task_id": "EvoEval/44", "completion": "\n    def one(n: int) -> str:\n        return 'i' if n == 1 else ''\n\n    def four(n: int) -> str:\n        return 'iv' if n == 4 else ''\n\n    def five(n: int) -> str:\n        return 'v' if n == 5 else ''\n\n    def nine(n: int) -> str:\n        return 'ix' if n == 9 else ''\n\n    def ten(n: int) -> str:\n        return 'x' if n == 10 else ''\n\n    def forty(n: int) -> str:\n        return 'xl' if n == 40 else ''\n\n    def fifty(n: int) -> str:\n        return 'l' if n == 50 else ''\n\n    def ninety(n: int) -> str:\n        return 'xc' if n == 90 else ''\n\n    def hundred(n: int) -> str:\n        return 'c' if n == 100 else ''\n\n    def thousand(n: int) -> str:\n        return 'm' if n == 1000 else ''\n\n    def four_digit(n: int) -> str:\n        return hundred(n // 100) + ten(n % 100)\n\n    def three_digit(n: int) -> str:\n        return one(n // 100) + hundred(n % 100)\n\n    def two_digit(n: int) -> str:\n        return four(n // 10) + ten(n % 10)\n\n    result = ''\n\n    result += thousand(number // 1000)\n    number %= 1000\n\n    result += four_digit(number // 100)\n    number %= 100\n\n    result += three_digit(number // 100)\n    number %= 100\n\n    result += two_digit(number // 10)\n    number %= 10\n\n    result += one(number)\n\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    max_even = -1\n    for num in l:\n        if num % 2 == 0 and num > 0:\n            max_even = num\n    return max_even\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    result = []\n    for i in range(len(lst)):\n        n = 0\n        m = 0\n        for j in range(len(s)):\n            if j % 2 == 0 and s[j] in vowels:\n                n += 1\n            if s[j] in '13579' and int(s[j]) % 2 != 0:\n                m += 1\n        result.append(f\"String number {i+1} uppercase vowels in even indices is {n} odd digits {m}.\")\n    return result\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def count(arr, n, p):\n        res = 0\n        for i in range(n):\n            res += arr[i] % p\n        return res % p\n\n    return count(arr, n, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            if i < len(word)-1 and word[i+1] not in vowels and word[i-1] not in vowels:\n                return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def convert_to_lower_upper(a):\n        if a.isalpha():\n            return a.lower() if a.islower() else a.upper()\n        return a\n\n    def reverse_string(a):\n        return a[::-1]\n\n    def compare_real_numbers(a, b):\n        try:\n            a = float(a)\n            b = float(b)\n            return a if a > b else b\n        except ValueError:\n            return None\n\n    a = convert_to_lower_upper(a)\n    b = convert_to_lower_upper(b)\n\n    if a.isalpha() or b.isalpha():\n        return None\n\n    if a == b:\n        return None\n\n    if a.replace('.', '').isdigit() and b.replace('.', '').isdigit():\n        return compare_real_numbers(a, b)\n\n    return reverse_string(a) if reverse_string(a) > reverse_string(b) else reverse_string(b)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        even_values = [i for i in arr if i % 2 == 0]\n        if even_values:\n            smallest_value = min(even_values)\n            smallest_index = arr.index(smallest_value)\n            sum_magnitudes = sum(map(abs, arr))\n            product_signs = [1 if i > 0 else -1 if i < 0 else 0 for i in arr]\n            remaining_nodes = [i for i in arr if i != smallest_value]\n            return [smallest_value, smallest_index], sum_magnitudes * product_signs\n        else:\n            return ([], None)\n\n    print(pluck_and_prod([4,2,3]))\n    print(pluck_and_prod([1,2,3]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n\npluck_and_prod_solution()\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupy"}
{"task_id": "EvoEval/53", "completion": "\n    grades_dict = {'A': 4.0, 'B': 3, 'C': 2.75, 'D': 1.9, 'E': 3.5, 'F': 3}\n    prime_hex_grades = ['2', '3', '5', '7', 'B', 'D', '13']\n    count = 0\n    for grade in grades:\n        if str(grade) in prime_hex_grades:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = math.isqrt(n)\n        for i in range(3, sqrt_n + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(sum(nums[i:j+1])):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\r\n    roman_numerals_reverse = {v: k for k, v in roman_numerals.items()}\r\n    num = [v for v in roman_numerals_reverse.keys() if v <= number]\r\n    num.sort(reverse=True)\r\n    result = ''\r\n    for i in num:\r\n        result += roman_numerals[i]\r\n    return hashlib.md5(result.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def odd_prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                if is_prime(i) and i % 2 != 0:\n                    factors.append(i)\n        if n > 1 and is_prime(n) and n % 2 != 0:\n            factors.append(n)\n        return factors\n\n    return eval('*'.join(map(str, odd_prime_factors(n))))\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def odd_digit_array(arr):\n        return [i for i in arr if i % 2 != 0]\n\n    def palindromic_array(arr):\n        return arr[::-1]\n\n    odd_nums = odd_digit_array(arr)\n    palindromic_nums = palindromic_array(odd_nums)\n\n    return len(odd_nums) - len(palindromic_nums)\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    def max_freq_and_sum_check(lst, a, b):\n        from collections import Counter\n        count_dict = Counter(lst)\n        max_freq = -1\n        for key, value in count_dict.items():\n            if key == a or key == b:\n                max_freq = max(max_freq, value)\n        if max_freq == -1:\n            return (-1, False)\n        after_freq = [value for value in count_dict.values() if value >= max_freq]\n        if a in after_freq or b in after_freq:\n            return (max_freq, True)\n        else:\n            return (max_freq, False)\n\n    print(max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_freq_and_sum_check([1, 2, 3, 3, 4, 4, 4], 5, 2))\n    print(max_freq_and_sum_check([5, 4, 4], 8, 3))\n    print(max_freq_and_sum_check([5, 10, 5], 11, 6))\n    print(max_freq_and_sum_check([5, 10, 5], 11, 6))\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def odd_count_base_change_helper(lst, base, index):\n        if index == len(lst):\n            return []\n        else:\n            num = sum(int(x) for x in lst[index])\n            if num % 2 != 0:\n                return [str(num) + lst[index]] + odd_count_base_change_helper(lst, base, index + 1)\n            else:\n                return odd_count_base_change_helper(lst, base, index + 1)\n\n    return odd_count_base_change_helper(lst, base, 0)\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    arr.sort()\n    res = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            res.append(arr[i])\n    if len(res) < 3:\n        return []\n    else:\n        return [res[0], res[1], res[2]]\n\n"}
{"task_id": "EvoEval/61", "completion": "\n"}
{"task_id": "EvoEval/62", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    planet_order = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n        \"ten\": 10,\n        \"eleven\": 11,\n        \"twelve\": 12,\n        \"thirteen\": 13,\n        \"fourteen\": 14,\n        \"fifteen\": 15,\n        \"sixteen\": 16,\n        \"seventeen\": 17,\n        \"eighteen\": 18,\n        \"nineteen\": 19,\n        \"twenty\": 20,\n        \"twenty-one\": 21,\n        \"twenty-two\": 22,\n        \"twenty-three\": 23,\n        \"twenty-four\": 24,\n        \"twenty-five\": 25,\n        \"twenty-six\": 26,\n        \"twenty-seven\": 27,\n        \"thirty\": 30,\n        \"thirty-one\": 31,\n        \"thirty-two\": 32,\n        \"thirty-three\": 33,\n        \"thirty-four\": 34,\n        \"thirty-five\": 35,\n        \"thirty-six\": 36,\n        \"thirty-seven\": 37,\n        \"forty\": 40,\n        \"forty-five\": 45,\n        \"fifty\": 50,\n        \"sixty\": 60,\n        \"sixty-five\": 65,\n        \"seventy\": 70,\n        \"eighty\": 80,\n        \"ninety\": 90,\n        \"hundred\": 100,\n        \"thousand\": 1000,\n        \"million\": 1000000,\n        \"billion\": "}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def numbers(n, p):\n        return [i for i in range(n, p) if is_prime(i)]\n\n    if n > p:\n        return []\n    else:\n        return numbers(n, p)\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (n - 1) % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    a.sort()\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    return a[i] + a[j] + a[k]\n    return -1\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    left, right = 0, len(numbers) - 1\n    min_diff = float('inf')\n    while left < right:\n        diff = abs(numbers[left] - numbers[right])\n        if diff < min_diff:\n            min_diff = diff\n        if numbers[left] < numbers[right]:\n            left += 1\n        else:\n            right -= 1\n    return min_diff if min_diff <= threshold else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    def product(num):\n        if num % 2 != 0:\n            return num\n        else:\n            return 1\n\n    def minOddDigitsProduct(nums):\n        min_product = float('inf')\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                sub_array = nums[i:j]\n                prod = reduce(lambda x, y: x * y, [product(num) for num in sub_array if num % 2 != 0])\n                if prod != 0 and prod < min_product:\n                    min_product = prod\n        return min_product if min_product != float('inf') else 0\n\n    return minOddDigitsProduct(nums)\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i:i+3] in [\"abcd\", \"adb\"]:\n                return True\n        return False\n\n    return sorted([s for s in lst if is_happy(s) and len(set(s)) == len(s)])\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n-1)\n\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n\n    for i in range(1, len(numbers)):\n        diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[i-1]))\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    weights = sorted([brazilian_factorial(i) for i in range(n + 1)])\n    return weights[-1] <= sum(w)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    for n in numbers:\n        if factorial(n) < factorial(n-1) + factorial(n-2):\n            return False\n        if factorial(n) > threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> str:\n        numerator, denominator = map(int, fraction.split('/'))\n        gcd = numerator if numerator > denominator else denominator\n        return f'{numerator//gcd}/{denominator//gcd}'\n\n    def multiply(fractions: List[str]) -> str:\n        result = Fraction(1, 1)\n        for fraction in fractions:\n            result *= Fraction(fraction)\n        return str(result)\n\n    fractions = [simplify(f) for f in fractions]\n    n = simplify(n)\n    return [multiply(fractions) == n]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def can_exchange(lst1, lst2, x, y, z):\n        sum1 = sum_of_elements(lst1)\n        sum2 = sum_of_elements(lst2)\n        return sum1 == x and sum2 == y and is_even(z)\n\n    def append_to_answer(answer, string):\n        return answer + \" \" + string\n\n    answer = \"\"\n    if can_exchange(lst1, lst2, x, y, z):\n        answer = append_to_answer(answer, \"YES\")\n    else:\n        answer = append_to_answer(answer, \"NO\")\n\n    if x == sum_of_elements(lst1) + sum_of_elements(lst2) and y == sum_of_elements(lst1) + sum_of_elements(lst2) and z == sum_of_elements(lst1) + sum_of_elements(lst2):\n        answer = append_to_answer(answer, \"SUM\")\n    else:\n        answer = append_to_answer(answer, \"NO_SUM\")\n\n    return answer.strip()\n\n"}
{"task_id": "EvoEval/75", "completion": "\n\n    def transform_dict(input_dict):\n        if not isinstance(input_dict, dict) or not all(isinstance(v, str) for v in input_dict.values()):\n            return {}\n\n        if not all(k.isupper() or k.islower() for k in input_dict.keys()):\n            return {}\n\n        result = {}\n        for k, v in input_dict.items():\n            try:\n                num = float(v)\n                if num.is_integer():\n                    result[k] = int(num)\n                else:\n                    result[k] = round(num)\n            except ValueError:\n                return {}\n\n        return result\n\n    print(transform_dict({\"a\":\"10\", \"b\":\"15.3\"}))  # 10 15\n    print(transform_dict({\"A\":\"10.5\", \"B\":\"-15.5\"}))  # {\"A\": 11, \"B\":}\n    print(transform_dict({\"a\":\"10.5\", \"B\":\"-15.5\"}))  # {\"a\": 11, \"B\":}\n    print(transform_dict(\"10\", \"15.3\"))  # {}\n    print(transform_dict({\"a\": \"10.5\", 8: \"-15.5\"}))  # {}\n    print(transform_dict({}))  # {}\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-15.5\"}))  # {\"A\": 11, \"B\": -15}\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-15.5\"}))  # {\"A\": 11, \"B\": -15}\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-15.5\"}))  # {\"A\": 11, \"B\": -15}\n    print(transform_dict({\"A\": \"10.5\", \"B\": \"-15.5\"}))  # {\"A\": 11, \"B\": -15}\n    print(transform_"}
{"task_id": "EvoEval/76", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    def sort_list(lst):\n        lst.sort()\n        return lst\n\n    def replace_prime_with_sum(lst):\n        for i in range(len(lst)):\n            if digit_sum(lst[i]) in primes:\n                lst[i] = digit_sum(lst[i])\n        return lst\n\n    primes = [2, 3, 5, 7]\n    lst = [2, 4, 3, 0, 1, 5, 6, 0, 3, 2, 1, 0, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\n    lst = replace_prime_with_sum(lst)\n    lst = sort_list(lst)\n    return lst\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_odd_elements(arr):\n        return sum(i for i in arr if i % 2 != 0)\n\n    def sum_positive_first_digit(arr):\n        return sum(i for i in arr if str(i)[0] == '1' or str(i)[0] == '3' or str(i)[0] == '5' or str(i)[0] == '7' or str(i)[0] == '9')\n\n    def sum_negative_first_digit(arr):\n        return sum(i for i in arr if str(i)[0] == '-' or str(i)[0] == '2' or str(i)[0] == '4' or str(i)[0] == '6' or str(i)[0] == '8')\n\n    def sum_digits_greater_than_zero(arr):\n        return sum(i for i in arr if int(str(i).replace('-', '')) > 0)\n\n    return sum_odd_elements(arr) + sum_positive_first_digit(arr) + sum_negative_first_digit(arr) + sum_digits_greater_than_zero(arr)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if i % 2 == 0:\n            result += s[i].upper()\n        else:\n            result += s[i].lower()\n    return result, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not s:\n        return s\n    if len(s) < 3:\n        return s[::-1]\n    if len(s) == 3:\n        if s[0] == s[1] == s[2]:\n            return s[::-1]\n        else:\n            return s\n    else:\n        if s[0] != s[1] and s[0] != s[2] and s[1] != s[2]:\n            return s[::-1]\n        else:\n            return s\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join(s[i:i+3] for i in range(0, len(s), 3))\n\n    def decode(s: str) -> str:\n        return ''.join(s[i+3-len(s[i:i+3]):i+3] for i in range(0, len(s), 3))\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n\n    return (decoded, is_palindrome(decoded))\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n\n    mean_absolute_deviation = sum([abs(x - fibfib[i]) for i, x in enumerate(fibfib)]) / n\n\n    return mean_absolute_deviation\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for i in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_+_\", \"_\")\n    text = text.replace(\"_\", \"-\")\n\n    return is_prime(len(text))\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    prefix = ''\n    for char in string:\n        prefix += char\n        if prefix not in histogram:\n            histogram[prefix] = {}\n        if char not in histogram[prefix]:\n            histogram[prefix][char] = 0\n        histogram[prefix][char] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n    return None\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    def find_common_elements(list1, list2):\n        return list(set(list1) & set(list2))\n\n    common_operands = find_common_elements(operand_lists[0], operand_lists[1])\n\n    if not common_operands:\n        return None\n\n    result = 0\n    for i, operand in enumerate(common_operands):\n        for j, operator in enumerate(operators):\n            if operator == '+':\n                result += operand\n            elif operator == '-':\n                result -= operand\n            elif operator == '*':\n                result *= operand\n            elif operator == '**':\n                result **= operand\n\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def remove_unbalanced(text):\n        stack = []\n        result = ''\n        for char in text:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                result += char\n        return result\n\n    def match_and_remove_unbalanced(text):\n        stack = []\n        result = ''\n        for char in text:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                result += char\n            else:\n                result += char\n        return result\n\n    return match_and_remove_unbalanced(remove_unbalanced(text))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    def md5_hash(s: str) -> str:\n        return hashlib.md5(s.encode()).hexdigest()\n\n    return [s for s in strings if md5_hash(s) == md5_hash(hash_substring)]\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict:\n        if key.islower() or key.isupper():\n            count = 0\n            for char in key:\n                if char in vowels:\n                    count += 1\n            result[key] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(len(l)):\n        if i % 2 == 0 and is_prime(l[i]):\n            l[i] = x\n        elif i % 2 != 0 and l[i] % 2 != 0:\n            l[i] = y\n\n    l.sort()\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in l1]\n    common_elements = [i for i in a if a.count(i) > 1]\n    valid_triples = [(i, j, k) for i in common_elements for j in common_elements for k in common_elements if i * j * k == max(common_elements)]\n    return sorted(valid_triples), len(valid_triples)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    string = string.lower()\n    if len(string) == 1:\n        return string if string in vowels else \"\"\n    else:\n        for i in range(len(string) - 1, 0, -1):\n            if string[i] in vowels and string[i - 1] in consonants:\n                return string[i]\n        return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_digits(num):\n        return len(str(abs(num)))\n\n    def sort_array(arr):\n        return sorted(arr)\n\n    def sort_array_desc(arr):\n        return sorted(arr, reverse=True)\n\n    def sort_array_odd(arr):\n        return sorted(filter(lambda x: x % 2 != 0, arr))\n\n    def sort_array_even(arr):\n        return sorted(filter(lambda x: x % 2 == 0, arr))\n\n    if not arr:\n        return arr\n\n    count_arr = [count_digits(num) for num in arr]\n\n    if all(num > 0 for num in arr):\n        if all(num % 2 == 0 for num in arr):\n            return sort_array_even(arr)\n        else:\n            return sort_array_odd(arr)\n    else:\n        if all(num < 0 for num in arr):\n            return sort_array_desc(arr)\n        else:\n            return sort_array(arr)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    result = [s for s in strings if s.find(substring) != -1]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n"}
{"task_id": "EvoEval/96", "completion": "\n    def common_pairs_with_zero_sum(l1: list, l2: list) -> bool:\n        if len(l1) != len(l2):\n            return False\n        s = set()\n        for i in range(len(l1)):\n            if -l1[i] in s:\n                return True\n            s.add(l1[i])\n        return False\n\n    def common_pairs_with_zero_sum(l1: list, l2: list) -> bool:\n        if len(l1) != len(l2):\n            return False\n        s = set()\n        for i in range(len(l1)):\n            if -l1[i] in s:\n                return True\n            s.add(l1[i])\n        return False\n\n    def common_pairs_with_zero_sum(l1: list, l2: list) -> bool:\n        if len(l1) != len(l2):\n            return False\n        s = set()\n        for i in range(len(l1)):\n            if -l1[i] in s:\n                return True\n            s.add(l1[i])\n        return False\n\n    def common_pairs_with_zero_sum(l1: list, l2: list) -> bool:\n        if len(l1) != len(l2):\n            return False\n        s = set()\n        for i in range(len(l1)):\n            if -l1[i] in s:\n                return True\n            s.add(l1[i])\n        return False\n\n    def common_pairs_with_zero_sum(l1: list, l2: list) -> bool:\n        if len(l1) != len(l2):\n            return False\n        s = set()\n        for i in range(len(l1)):\n            if -l1[i] in s:\n                return True\n            s.add(l1[i])\n        return False\n\n    def common_pairs_with_zero_sum(l1: list, l2: list"}
{"task_id": "EvoEval/97", "completion": "\n    if n == 0:\n        return [0, 0, 0]\n    if n == 1:\n        return [0, 0, 1]\n    if n == 2:\n        return [0, 1, 1]\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n    triples = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if fib[k] % 3 == 0:\n                    triples.append([i, j, k])\n    return triples[-1]\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not key.islower() or not key.isupper():\n            return False\n        if not value.startswith(\"(\") or not value.endswith(\")\"):\n            return False\n    return True\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return len_base_conversion(x // base, base) + str(x % base)\n\n"}
