{"task_id": "EvoEval/0", "completion": "\n    if len(a) < 3 or len(b) < 3:\n        return None\n    if a.count(',') == 1 and b.count(',') == 1:\n        a = a.replace(',', '')\n        b = b.replace(',', '')\n    if a.isdigit() and b.isdigit():\n        return max(a, b)\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n\"\"\"\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n):\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(int(i) for i in str(n))\n\n    return max(digit_sum(largest_prime_divisor(n)) for n in lst)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    if len(numbers) < 2:\n        return numbers\n    closest = False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            closest = True\n            break\n    if not closest:\n        return numbers\n    if round(sum(numbers)) % 2 == 0:\n        numbers.sort(reverse=True)\n    else:\n        numbers.sort()\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    total_stones = 0\n    stones = n\n    while stones > 0:\n        total_stones += stones\n        if n % 2 == 0:\n            stones = stones - 2\n        else:\n            stones = stones - 2\n        n -= 1\n    if total_stones % 2 == 0:\n        return float(total_stones / 2)\n    else:\n        return float(total_stones)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    count = string.count(bracket)\n    is_sequence_correct = string == string.replace('><', '')\n    is_bracket_in_string = bracket in string\n    return is_sequence_correct, count, is_bracket_in_string\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    planet1_position = planets.get(planet1, None)\n    planet2_position = planets.get(planet2, None)\n\n    if planet1_position is None or planet2_position is None:\n        return {}\n\n    if planet1_position > planet2_position:\n        planet1_position, planet2_position = planet2_position, planet1_position\n\n    roman_numerals = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\"\n    }\n\n    return {planet: roman_numerals[position] for planet, position in planets.items() if planet1_position < position < planet2_position}\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grades_table = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n    name_grade_list = [(name[0].upper() + name[1:].lower(), grades_table[grade]) for name, grade in name_grade_list]\n    return name_grade_list\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    def grade_scale(gpa):\n        if gpa > 4.0 or gpa < 0.0:\n            return 'Invalid GPA'\n        elif gpa >= 3.7:\n            return 'A+'\n        elif gpa >= 3.3:\n            return 'A'\n        elif gpa >= 3.0:\n            return 'A-'\n        elif gpa >= 2.7:\n            return 'B+'\n        elif gpa >= 2.3:\n            return 'B'\n        elif gpa >= 2.0:\n            return 'B-'\n        elif gpa >= 1.7:\n            return 'C+'\n        elif gpa >= 1.3:\n            return 'C'\n        elif gpa >= 1.0:\n            return 'C-'\n        elif gpa >= 0.7:\n            return 'D+'\n        elif gpa >= 0.0:\n            return 'D'\n        else:\n            return 'F'\n\n    result = {}\n    for info in student_info:\n        name, gpa = info\n        consonants = count_consonants(name)\n        if consonants == n:\n            gpa_grade = grade_scale(gpa)\n        else:\n            gpa_grade = grade_scale(gpa + 1)\n        result[name] = gpa_grade\n\n    return result\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n\n    arr = [i for i in arr if sum_digits(i) > 0]\n    lst1 = [i for i in lst1 if i % 2 == 0]\n\n    if len(arr) == 0 or len(lst1) == 0:\n        return \"NO\"\n\n    for i in range(len(arr)):\n        for j in range(len(lst1)):\n            if arr[i] % 2 == 1 and lst1[j] % 2 == 0:\n                return \"YES\"\n\n    return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n, m+1) if is_prime(x)]\n\n    if not primes:\n        return -1\n    else:\n        avg = round(sum(primes) / len(primes))\n        return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = 'aeiou'\n    word = word.lower()\n    word_length = len(word)\n    music_notes = music_string.split(' ')\n    music_length = len(music_notes)\n    result = []\n\n    for i in range(word_length - 1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i - 1, -1, -1):\n                if word[j] not in vowels:\n                    for k in range(j + 1, word_length):\n                        if word[k] in vowels:\n                            vowel_index = k\n                            break\n                    break\n            else:\n                continue\n            break\n\n    vowel_position = vowel_index - j\n    vowel_duration = i - j\n    vowel_note = word[vowel_index]\n    vowel_music_notes = music_notes[vowel_position:vowel_position + vowel_duration]\n    result.append((vowel_duration, vowel_position, vowel_note, ' '.join(vowel_music_notes)))\n\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib.append(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3])\n    count = lst.count(fibfib[n])\n    if count >= n:\n        return fibfib[n]\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    smallest_deposit = None\n    largest_withdrawal = None\n    balance_below_zero = False\n    for operation in operations:\n        if operation > 0:\n            balance += operation\n            if smallest_deposit is None or operation < smallest_deposit:\n                smallest_deposit = operation\n        else:\n            balance += operation\n            if balance < 0:\n                balance_below_zero = True\n            if largest_withdrawal is None or operation > largest_withdrawal:\n                largest_withdrawal = operation\n    if balance < 0:\n        return largest_withdrawal, smallest_deposit, True\n    else:\n        return largest_withdrawal, smallest_deposit, False\n"}
{"task_id": "EvoEval/20", "completion": "\n    grade_book = []\n    for i in range(len(s)):\n        if grades[i] > 4.0 or grades[i] < 0.0:\n            grade_book.append((s[i][::-1], 'E'))\n        elif grades[i] >= 3.7:\n            grade_book.append((s[i][::-1], 'A+'))\n        elif grades[i] >= 3.3:\n            grade_book.append((s[i][::-1], 'A-'))\n        elif grades[i] >= 3.0:\n            grade_book.append((s[i][::-1], 'B+'))\n        elif grades[i] >= 2.7:\n            grade_book.append((s[i][::-1], 'B'))\n        elif grades[i] >= 2.3:\n            grade_book.append((s[i][::-1], 'B-'))\n        elif grades[i] >= 2.0:\n            grade_book.append((s[i][::-1], 'C+'))\n        elif grades[i] >= 1.7:\n            grade_book.append((s[i][::-1], 'C'))\n        elif grades[i] >= 1.3:\n            grade_book.append((s[i][::-1], 'C-'))\n        elif grades[i] >= 1.0:\n            grade_book.append((s[i][::-1], 'D+'))\n        elif grades[i] >= 0.7:\n            grade_book.append((s[i][::-1], 'D'))\n        else:\n            grade_book.append((s[i][::-1], 'F'))\n    return grade_book\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return [str(x % base)] + base_change_prefixes(x // base, base)\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    def special_stone_factorial_helper(n, level):\n        if level == 0:\n            return [n]\n        else:\n            stones = special_stone_factorial_helper(n, level - 1)\n            stones.append(n * (n - level) * brazilian_factorial(level))\n            return stones\n\n    return special_stone_factorial_helper(n, n)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    happy_numbers = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    happy_strings = []\n    not_happy_strings = []\n    for number in numbers.split():\n        if number in happy_numbers:\n            happy_strings.append(number)\n        else:\n            not_happy_strings.append(number)\n    if len(not_happy_strings) > 0:\n        return 'Not happy string'\n    else:\n        return ' '.join(sorted(happy_strings))\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_result = 0\n    product_result = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    sum_result += a[0]\n                    product_result *= a[0]\n    return (sum_result, product_result if product_result != 1 else 0)\n"}
{"task_id": "EvoEval/26", "completion": "\n    num_to_word = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    word_to_num = {v: k for k, v in num_to_word.items()}\n    values.sort(key=lambda x: num_to_word[x])\n    even_nums = [num_to_word[v] for v in values if num_to_word[v] % 2 == 0]\n    if not even_nums:\n        return ()\n    smallest_even = min(even_nums)\n    index = values.index(word_to_num[smallest_even])\n    return (word_to_num[smallest_even], index)\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes1 = [n for n in lst1 if is_prime(n)]\n    primes2 = [n for n in lst2 if is_prime(n)]\n\n    if len(primes1) == 0:\n        return y\n    elif len(primes2) == 0:\n        return x\n    else:\n        return min(x, y)\n"}
{"task_id": "EvoEval/28", "completion": "\n    if not grades or not s0 or not s1:\n        return []\n    if len(s0) != len(s1):\n        return []\n    result = []\n    for i in range(len(s0)):\n        if s0[i] == s1[i]:\n            result.append(grades[i])\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return y\n    else:\n        return max(largest_prime_factor(n), x)\n"}
{"task_id": "EvoEval/30", "completion": "\n    beats_per_note = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        note_duration = beats_per_note[note]\n        note_beats = int(x.split('/')[0]) * note_duration\n        result.append(note_beats % 4 == 0)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_factorial(n: int) -> int:\n        factors = prime_factors(n)\n        result = 1\n        for i in set(factors):\n            result *= factorial(factors.count(i))\n        return result\n\n    return special_factorial(n)\n"}
{"task_id": "EvoEval/32", "completion": "\n    def calculate_depth(s: str) -> int:\n        count = 0\n        max_count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif c == ')':\n                count -= 1\n        return max_count\n\n    def circular_shift(lst: List[int], n: int) -> List[int]:\n        return lst[-n:] + lst[:-n]\n\n    depths = [calculate_depth(s) for s in input]\n    shifted_depths = circular_shift(depths, shift)\n    return shifted_depths\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_numerals = {\n        'i': 1,\n        'v': 5,\n        'x': 10,\n        'l': 50,\n        'c': 100,\n        'd': 500,\n        'm': 1000\n    }\n    if len(s) < 3:\n        return False\n    total = 0\n    prev = 0\n    for c in s:\n        if c not in roman_numerals:\n            return False\n        if roman_numerals[c] > prev:\n            if prev * 2 == roman_numerals[c] or prev * 4 == roman_numerals[c]:\n                return False\n            total += roman_numerals[c] - prev\n            prev = roman_numerals[c]\n        elif roman_numerals[c] == prev:\n            if prev == 0:\n                return False\n            total += roman_numerals[c]\n        else:\n            total += roman_numerals[c]\n            prev = roman_numerals[c]\n    if total % 10 == 0:\n        return False\n    return total\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    for key in dict.keys():\n        if len(key) != 3:\n            return False\n        if not key.isalpha():\n            return False\n        if len(set(key)) != len(key):\n            return False\n        if key != key.lower() and key != key.upper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    arr = sorted(arr)\n    for i in range(n):\n        if arr == sorted(arr[i:] + arr[:i]):\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    n = len(nums)\n    min_even = min_odd = math.inf\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            min_even = min(min_even, nums[i])\n        else:\n            min_odd = min(min_odd, nums[i])\n    return (min_even, min_odd)\n"}
{"task_id": "EvoEval/38", "completion": "\n    even_palindrome = [i for i in range(1, n+1) if i == int(str(i)[::-1]) and i % 2 == 0]\n    odd_palindrome = [i for i in range(1, n+1) if i == int(str(i)[::-1]) and i % 2 != 0]\n    even_sum = [(i, j) for i in l for j in l if i != j and (i+j) in even_palindrome]\n    odd_sum = [(i, j) for i in l for j in l if i != j and (i+j) in odd_palindrome]\n    return len(even_sum) > 0, len(odd_sum) > 0\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    i = 0\n    j = n - 1\n    count = 0\n    while i <= j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count * x + y\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def ends_with_odd(n):\n        return str(n)[-1] in '13579'\n\n    def first_last_odd(n):\n        return str(n)[0] in '13579' and str(n)[-1] in '13579'\n\n    def largest_prime_odd(n):\n        for i in range(n, 0, -1):\n            if n % i == 0 and ends_with_odd(i) and is_prime(i) and first_last_odd(i):\n                return i\n        return None\n\n    return max(largest_prime_odd(num) for num in nums if num > 0)\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    if shift > len(s):\n        shift = shift % len(s)\n    s = s[-shift:] + s[:-shift]\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import fractions\n    import re\n\n    # remove spaces from expression\n    expression = expression.replace(\" \", \"\")\n\n    # check if expression starts and ends with \"<\" and \">\"\n    if expression[0] != \"<\" or expression[-1] != \">\":\n        return False\n\n    # remove \"<\" and \">\" from expression\n    expression = expression[1:-1]\n\n    # split expression into fractions\n    fractions_list = expression.split(\",\")\n\n    # initialize product\n    product = fractions.Fraction(1, 1)\n\n    # iterate over fractions\n    for fraction in fractions_list:\n        # check if fraction is valid\n        if not re.match(r'\\d+/\\d+', fraction):\n            return False\n\n        # split numerator and denominator\n        numerator, denominator = map(int, fraction.split(\"/\"))\n\n        # add fraction to product\n        product *= fractions.Fraction(numerator, denominator)\n\n    # check if product is a whole number\n    return product.denominator == 1\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n    if n == 4:\n        return [0, 0, 2, 2]\n\n    sequence = [0, 0, 2, 2]\n    for i in range(4, n):\n        sequence.append(sequence[-1] + sequence[-2] + sequence[-3] + sequence[-4])\n\n    if n % 2 == 0:\n        sequence.sort(reverse=True)\n    else:\n        sequence.sort()\n\n    return sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    prefixes = []\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            prefixes.append(roman_numerals[key])\n            number -= key\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_numbers = [num for num in l if num > 0 and num % 2 == 0]\n    return max(even_numbers) if even_numbers else -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    digits = '13579'\n    result = []\n    for i, string in enumerate(lst):\n        n = sum(1 for j, c in enumerate(s) if j % 2 == 0 and c in vowels)\n        m = sum(1 for c in string if c in digits)\n        result.append(f\"string number {i+1} uppercase vowels in even indices is {n} odd digits {m}.\")\n    return result\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    count = 0\n    for i in arr:\n        if i < 0:\n            continue\n        sum_digits = sum(int(digit) for digit in str(i))\n        result = pow(2, sum_digits, p)\n        if result == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i + 2] in vowels:\n            return \"\"\n        elif word[i] in vowels:\n            return word[i + 1]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if a.isalpha() and b.isalpha():\n        if a.islower():\n            a = a.upper()\n        else:\n            a = a.lower()\n        if b.islower():\n            b = b.upper()\n        else:\n            b = b.lower()\n        return a if a == b else None\n    elif a.isdigit() and b.isdigit():\n        return max(int(a), int(b))\n    elif '.' in a or ',' in a:\n        a = a.replace('.', '').replace(',', '.')\n        a = float(a)\n    elif '.' in b or ',' in b:\n        b = b.replace('.', '').replace(',', '.')\n        b = float(b)\n    else:\n        return None\n    return max(a, b)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    even_values = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_values:\n        return ([], sum(abs(v) for v in arr))\n\n    smallest_even = min(even_values)\n    arr[smallest_even[1]] = 0\n\n    sum_remaining = sum(abs(v) for v in arr)\n    prod_signs = sum(1 if v > 0 else -1 if v < 0 else 0 for v in arr)\n\n    return ([smallest_even[0], smallest_even[1]], (sum_remaining, prod_signs))\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {\n        \"4.0\": \"F\",\n        \"3.7\": \"F\",\n        \"3.3\": \"E\",\n        \"3.0\": \"D\",\n        \"2.7\": \"D\",\n        \"2.3\": \"C\",\n        \"2.0\": \"B\",\n        \"1.7\": \"B\",\n        \"1.3\": \"A\",\n        \"1.0\": \"A\",\n        \"0.7\": \"C\",\n        \"0.0\": \"F\",\n        \"4.0\": \"F\",\n        \"3.0\": \"D\",\n        \"2.0\": \"B\",\n        \"1.0\": \"A\",\n        \"0.0\": \"F\",\n        \"3\": \"D\",\n        \"2\": \"B\",\n        \"5\": \"7\",\n        \"7\": \"5\",\n        \"13\": \"3\",\n    }\n    prime_grades = [\"D\", \"B\", \"7\", \"5\", \"3\"]\n    gpa_grades = []\n    prime_prime_grades = []\n    for grade in grades:\n        gpa_grades.append(hex_grades[str(grade)])\n    for gpa in gpa_grades:\n        if gpa in prime_grades:\n            prime_prime_grades.append(gpa)\n    return len(prime_prime_grades)\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: 'I', 4: 'IV', 5: 'V', 9: 'IX', 10: 'X', 40: 'XL', 50: 'L', 90: 'XC', 100: 'C', 400: 'CD', 500: 'D', 900: 'CM', 1000: 'M'}\r\n    result = ''\r\n    for key in sorted(roman_numerals.keys(), reverse=True):\r\n        while number >= key:\r\n            result += roman_numerals[key]\r\n            number -= key\r\n    return hashlib.md5(result.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    product = 1\n    for factor in factors:\n        if factor % 2 != 0:\n            product *= factor\n    return product if product != 1 else 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def is_odd_digit(n):\n        return sum(int(i) % 2 for i in str(n)) % 2 == 1\n\n    def count_changes(lst):\n        return sum(not is_odd_digit(i) for i in lst)\n\n    changes = count_changes(arr)\n    if is_palindrome(arr) and is_odd_digit(sum(int(i) for i in arr)):\n        return changes\n    else:\n        return changes + 1\n\n"}
{"task_id": "EvoEval/58", "completion": "\n"}
{"task_id": "EvoEval/59", "completion": "\n    def odd_count(s):\n        return sum(int(c) % 2 != 0 for c in s)\n\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else oct(int(s, 10))[2:] if base == 8 else hex(int(s, 10))[2:]\n\n    return [f\"number odd elements {odd_count(s)}n str{odd_count(s)}ng {odd_count(s)}nput.\" for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # create an array of squares of integers from 1 to n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # add the elements of arr to a\n    a.extend(arr)\n    # sort the array a\n    a.sort()\n    # iterate over the array a\n    for i in range(len(a) - 2):\n        # if the sum of the current triple is a multiple of 3 and the smallest value is even\n        if a[i] % 2 == 0 and a[i] + a[i + 1] + a[i + 2] % 3 == 0:\n            # return the triple\n            return [a[i], a[i + 1], a[i + 2]]\n    # if no such triple is found, return an empty list\n    return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\nfrom typing import List, Optional, Tuple\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split(' ')\n    words = [w for w in words if w != '']\n    if len(words) == 0:\n        return ''\n    if len(words) == 1:\n        return words[0]\n    words.sort(key=lambda w: (w.lower(), w))\n    words[0] = words[0].lower()\n    words[-1] = words[-1].upper()\n    return '-'.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, p):\n        if is_prime(i):\n            primes.append(i)\n    return primes[:n]\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return max(2 ** (n % p), 2 ** (n % p - 1))\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    a.sort(reverse=True)\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] <= x + y:\n                    return a[i] + a[j] + a[k]\n    return -1\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff <= threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(nums)\n    prefix = [0] * (n + 1)\n    odd_prefix = [0] * (n + 1)\n    even_prefix = [0] * (n + 1)\n    for i in range(n):\n        if nums[i] % 2 == 0:\n            even_prefix[i + 1] = even_prefix[i] + nums[i]\n            odd_prefix[i + 1] = odd_prefix[i]\n        else:\n            even_prefix[i + 1] = odd_prefix[i]\n            odd_prefix[i + 1] = even_prefix[i] + nums[i]\n    return min(odd_prefix[-1], even_prefix[-1])\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2]:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    return sorted(happy_strings, key=lambda s: (len(s), s))\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n\n    special_factorials = [(i, special_factorial(i)) for i in range(1, max(numbers) + 1)]\n    closest_pair = min(special_factorials[i:], key=lambda x: (abs(x[1] - special_factorials[numbers[0] - 1][1]), x[0]))\n\n    return closest_pair[0], closest_pair[1]\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    brazilian_factorial = math.factorial(n)\n    total_weight = sum(w)\n    return total_weight <= brazilian_factorial + n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def brazilian_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    for number in numbers:\n        if abs(brazilian_factorial(number) - brazilian_factorial(number + 1)) >= threshold:\n            return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n_fraction = Fraction(n)\n    results = []\n    for fraction in fractions:\n        f = Fraction(fraction)\n        results.append(f * n_fraction == f.numerator)\n    return results\n"}
{"task_id": "EvoEval/74", "completion": "\n    # check if lst1 has even number of elements\n    lst1_even = sum(i % 2 == 0 for i in lst1)\n    lst2_even = sum(i % 2 == 0 for i in lst2)\n    if lst1_even >= lst2_even:\n        exchange = \"YES\"\n    else:\n        exchange = \"NO\"\n\n    # check if x + y = z\n    if x + y == z:\n        sum_check = \"SUM\"\n    else:\n        sum_check = \"NO_SUM\"\n\n    return f\"{sum_check} {exchange}\"\n\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def digit_sum(n):\r\n        return sum(int(i) for i in str(n))\r\n\r\n    primes = [i for i in lst if is_prime(i)]\r\n    non_primes = [i for i in lst if not is_prime(i)]\r\n\r\n    primes.sort(key=digit_sum)\r\n    non_primes.sort(reverse=len(non_primes) % 2 == 0)\r\n\r\n    return primes + non_primes\r\n\r\n\r"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] > 0:\n            sum += sum_odd_digits(arr[i])\n    return sum\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = list(s)\n    reversed_s = s[::-1]\n    upper_vowels = [c for c in reversed_s if c in vowels]\n    upper_vowels_even_indices = [c for i, c in enumerate(upper_vowels) if i % 2 == 0]\n    count = len(upper_vowels_even_indices)\n\n    for i, c in enumerate(reversed_s):\n        if c in vowels:\n            if i % 2 == 0:\n                reversed_s[i] = c.lower()\n            else:\n                reversed_s[i] = c.upper()\n        else:\n            reversed_s[i] = c\n\n    return (\"\".join(reversed_s), count)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) < 3:\n        return s[::-1]\n    else:\n        happy = True\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n                happy = False\n                break\n        if happy:\n            result = \"\"\n            for c in s:\n                if c.islower():\n                    result += c.upper()\n                else:\n                    result += c.lower()\n            return result\n        else:\n            return s[::-1]\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return s[-1] + s[:-1]\n\n    def decode(s: str) -> str:\n        return s[1:] + s[0]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    s = list(s)\n    c = list(c)\n    for i in c:\n        s.remove(i)\n    encoded_s = ''.join(encode(decode(''.join(s[i:i+3]))) for i in range(0, len(s), 3))\n    return (encoded_s, is_palindrome(encoded_s))\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n < 2:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n    sequence = [fibfib(i) for i in range(n)]\n    mean = sum(sequence) / n\n    mad = sum(abs(x - mean) for x in sequence) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib.append(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3])\n        return fibfib[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace multiple underscores with single underscore\n    text = re.sub(r'_{2,}', '_', text)\n    # Remove leading and trailing underscores\n    text = text.strip(\"_\")\n    # Calculate length of new string\n    length = len(text)\n    # Check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n    binary_lst = [bin(i)[2:] for i in lst]\n    binary_lst.sort()\n    unique_binaries = set(binary_lst)\n    if len(unique_binaries) < 2:\n        return None\n    else:\n        return min(unique_binaries)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0]).intersection(*operand_lists)\n    if not common_operands:\n        return None\n    common_operands = sorted(list(common_operands))\n    results = []\n    for operand in common_operands:\n        result = operand\n        for i in range(len(operators)):\n            if operators[i] == '+':\n                result += operand_lists[i + 1][operand_lists[i + 1].index(operand)]\n            elif operators[i] == '-':\n                result -= operand_lists[i + 1][operand_lists[i + 1].index(operand)]\n            elif operators[i] == '*':\n                result *= operand_lists[i + 1][operand_lists[i + 1].index(operand)]\n            elif operators[i] == '/':\n                if operand_lists[i + 1][operand_lists[i + 1].index(operand)] != 0:\n                    result /= operand_lists[i + 1][operand_lists[i + 1].index(operand)]\n            elif operators[i] == '**':\n                result **= operand_lists[i + 1][operand_lists[i + 1].index(operand)]\n        results.append(result)\n    return results, common_operands\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in text:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                continue\n            else:\n                stack.pop()\n        elif i in vowels:\n            continue\n        result += i\n    if stack:\n        return result + '_unbalanced'\n    else:\n        return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        md5_hash = hashlib.md5(string.encode()).hexdigest()\n        if hash_substring in md5_hash:\n            result.append(string)\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return {}\n        count = 0\n        for char in key:\n            if char in vowels:\n                count += 1\n        result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sorted_l = sorted(l)\n    for i in range(len(l)):\n        if i % 2 == 0 and is_prime(l[i]):\n            l[i] = x\n        elif i % 2 == 0:\n            l[i] = y\n    return l\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = list(set(a) & set(l1))\n    common_elements.sort()\n    triples = [(i, j, k) for i in common_elements for j in common_elements for k in common_elements if i < j < k and (i + j + k) % 3 == 0]\n    return (common_elements, len(triples))\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    if len(string) in prime_numbers:\n        for i in range(len(string) - 2, 0, -1):\n            if string[i] not in vowels and string[i - 1] not in vowels and string[i + 1] not in vowels:\n                return string[i]\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_nums(n):\n        if n < 0:\n            return sum(int(i) for i in str(n)[1:])\n        return sum(int(i) for i in str(n))\n\n    arr.sort(key=lambda x: (count_nums(x) % 2, count_nums(x), x))\n    return arr\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s]\n    filtered_strings.sort(key=lambda s: (len(s), s))\n    return filtered_strings\n"}
{"task_id": "EvoEval/96", "completion": "\n    # Your code here\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        if i == 0:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    triples = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if fib[i] + fib[j] + fib[k] % 3 == 0:\n                    triples.append((fib[i], fib[j], fib[k]))\n    return len(triples), triples\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not key.islower() or not value.startswith(\"(\") and value.endswith(\")\"):\n            return False\n        else:\n            count = 0\n            for char in value:\n                if char == \"(\":\n                    count += 1\n                elif char == \")\":\n                    if count == 0:\n                        return False\n                    count -= 1\n            if count != 0:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
