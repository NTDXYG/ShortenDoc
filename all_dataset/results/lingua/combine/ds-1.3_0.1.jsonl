{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] != s[i + 1] and s[i + 1] != s[i + 2] and s[i] != s[i + 2]:\n                return True\n        return False\n\n    if is_happy(a) and is_happy(b):\n        a = a.replace(',', '.').split('.')\n        b = b.replace(',', '.').split('.')\n        if float(a[0]) > float(b[0]):\n            return a[0] + '.' + a[1]\n        elif float(a[0]) < float(b[0]):\n            return b[0] + '.' + b[1]\n        else:\n            if len(a[1]) > len(b[1]):\n                return a[0] + '.' + a[1]\n            elif len(a[1]) < len(b[1]):\n                return b[0] + '.' + b[1]\n            else:\n                return None\n    elif is_happy(a):\n        return a\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_and_flip(value: str) -> str:\n        number, string = value[:-2], value[-2:]\n        number = int(number)\n        if string.isupper():\n            string = string.lower()\n        else:\n            string = string.upper()\n        if number > 0:\n            number = round(number)\n        else:\n            number = -round(-number)\n        return f'{number} {string}'\n\n    print(round_and_flip(\"10.5abc\"))  # '11 ABC'\n    print(round_and_flip(\"15.3ABC\"))  # '15 abc'\n    print(round_and_flip(\"14.5abc\"))  # '15 ABC'\n    print(round_and_flip(\"-14.5ABC\"))  # '-15 abc'\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(pow(2, numbers[i], p))\n        else:\n            result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    def sort_parentheses(lst: List[str]) -> str:\n        # sort the list of strings\n        lst.sort(key=len)\n\n        # iterate over the list\n        for i in range(len(lst) - 1):\n            # if the current string is not balanced, return 'No'\n            if not is_balanced(lst[i]) or not is_balanced(lst[i + 1]):\n                return 'No'\n\n        # if we've made it here, the list is balanced, so return 'Yes'\n        return 'Yes'\n\n    def is_balanced(s: str) -> bool:\n        # count the number of open and close parentheses\n        count_open = s.count('(')\n        count_close = s.count(')')\n\n        # if the number of open and close parentheses are not equal, the string is not balanced\n        if count_open != count_close:\n            return False\n\n        # if the string is balanced, return True\n        return True\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    return sum(map(str, [largest_prime_divisor(i) for i in lst]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n\n    first_num = round(numbers[0])\n    last_num = round(numbers[-1])\n    sum_num = first_num + last_num\n\n    if sum_num % 2 == 0:\n        numbers.sort(reverse=True)\n    else:\n        numbers.sort()\n\n    for i in range(1, len(numbers) - 1):\n        if round(numbers[i]) - first_num <= threshold or last_num - round(numbers[i]) <= threshold:\n            return numbers\n\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    def next_odd(n):\n        return n + 1 if n % 2 == 0 else n + 2\n\n    def next_even(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    if n % 2 == 0:\n        return sum(next_even(i) for i in range(1, n + 1)) / n\n    else:\n        return sum(next_odd(i) for i in range(1, n + 1)) / n\n"}
{"task_id": "EvoEval/7", "completion": "\n    def square(x):\n        return x * x\n\n    def cube(x):\n        return x * x * x\n\n    def sum_list(lst):\n        return sum(lst)\n\n    lst = [(i ** 3 if i % 3 == 0 else i) * (i ** 2 if i % 4 == 0 else i) for i in range(1, n + 1)]\n    return sum_list(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    for br in string:\n        if br == bracket:\n            stack.append(br)\n        elif len(stack) == 0:\n            return False, 0\n        else:\n            stack.pop()\n    if len(stack) == 0:\n        count = string.count(bracket)\n        return True, count\n    else:\n        return False, 0\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_dict = {\"mercury\": 1, \"venus\": 2, \"earth\": 3, \"mars\": 4, \"jupiter\": 5, \"saturn\": 6, \"uranus\": 7, \"neptune\": 8}\n    result = {}\n    if planet1 in planet_dict and planet2 in planet_dict:\n        for planet in sorted(planet_dict, key=planet_dict.get):\n            if planet_dict[planet] > planet_dict[planet1] and planet_dict[planet] < planet_dict[planet2]:\n                result[planet] = planet[0].lower() * planet[1]\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_map = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'B', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.0: 'D'}\n    return [(name.capitalize(), grade_map.get(gpa, '')) for name, gpa in name_grade_list]\n"}
{"task_id": "EvoEval/11", "completion": "\n    planet_orbits = {\n        \"Mercury\": 1,\n        \"Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\": 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n    }\n\n    def get_vowel_count(planet1, planet2):\n        if planet1 not in planet_orbits or planet2 not in planet_orbits:\n            return 0\n\n        planet1_index = planet_orbits[planet1]\n        planet2_index = planet_orbits[planet2]\n\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n\n        return sum(1 for c in \"aeiou\" if c in \"aeiouy\"[planet1_index-1::-1])\n\n    return get_vowel_count(planet1, planet2)\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def get_grade(n_consonants):\n        if n_consonants == 0:\n            return 'E'\n        elif n_consonants == 1:\n            return 'D'\n        elif n_consonants == 2:\n            return 'D-'\n        elif n_consonants == 3:\n            return 'D0'\n        elif n_consonants == 4:\n            return 'D+'\n        elif n_consonants == 5:\n            return 'C-'\n        elif n_consonants == 6:\n            return 'C'\n        elif n_consonants == 7:\n            return 'C+'\n        elif n_consonants == 8:\n            return 'B-'\n        elif n_consonants == 9:\n            return 'B'\n        elif n_consonants == 10:\n            return 'B+'\n        elif n_consonants == 11:\n            return 'A-'\n        elif n_consonants == 12:\n            return 'A'\n        elif n_consonants == 13:\n            return 'A+'\n        else:\n            return 'Invalid number of consonants'\n\n    return [{'name': student['name'], 'grade': get_grade(count_consonants(student['name']))} for student in student_info if count_consonants(student['name']) == n]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_of_digits(n):\n        if n < 0:\n            return -1 * sum_of_digits(-1 * n)\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    filtered_arr = [num for num in arr if sum_of_digits(num) > 0]\n    lst1.sort(reverse=True)\n\n    for i in range(len(filtered_arr)):\n        if sum_of_digits(filtered_arr[i]) % 2 == 1:\n            for j in range(len(lst1)):\n                if sum_of_digits(lst1[j]) % 2 == 0:\n                    filtered_arr[i], lst1[j] = lst1[j], filtered_arr[i]\n                    break\n\n    return \"YES\" if all(num % 2 == 0 for num in lst1) else \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)[2:]\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    points = set()\n    for op in operations:\n        balance += op\n        if balance in points:\n            return True\n        points.add(balance)\n        if balance < 0:\n            return False\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    notes = \"o o| .| o| o| .| .| .| .| o o\"\n    music_dict = {vowels[i]: notes[i*2:i*2+2].split() for i in range(len(vowels))}\n    word_list = list(word)\n    result = []\n    for i in range(len(word_list)-1, -1, -1):\n        if word_list[i] in music_dict:\n            result.extend(music_dict[word_list[i]])\n    return result\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_list = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    count_list = [0] * (max(lst)+1)\n    for num in lst:\n        count_list[num] += 1\n\n    for i in range(1, len(count_list)):\n        if count_list[i] >= fibfib_list[n]:\n            return i\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(len(nums) - 2):\n        for j in range(i + 1, len(nums) - 1):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k] < min_sum:\n                    min_sum = nums[i] + nums[j] + nums[k]\n\n    return min_sum if min_sum != float('inf') else 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    max_withdrawal = min_deposit = max_balance = 0\n    for op in operations:\n        max_balance += op\n        if max_balance < 0:\n            return None, None, True\n        max_withdrawal = max(max_withdrawal, op)\n        min_deposit = min(min_deposit, op)\n    return max_withdrawal, min_deposit, max_balance < 0\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    def letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa == 3.7:\n            return 'A'\n        elif gpa == 3.3:\n            return 'B'\n        elif gpa == 3.0:\n            return 'B+'\n        elif gpa == 2.7:\n            return 'B-'\n        elif gpa == 2.3:\n            return 'B'\n        elif gpa == 2.0:\n            return 'C'\n        elif gpa == 1.7:\n            return 'C+'\n        elif gpa == 1.3:\n            return 'C'\n        elif gpa == 1.0:\n            return 'C-'\n        elif gpa == 0.7:\n            return 'D'\n        else:\n            return 'D-'\n\n    result = []\n    for name, gpa in zip(s, grades):\n        result.append((name[::-1], letter_grade(gpa)))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    return [base_change(i, base) for i in range(x + 1)]\n"}
{"task_id": "EvoEval/22", "completion": "\n    def binary_planet_distance(planet1, planet2):\n        planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n            return ''.join('1' if planet1_index < i < planet2_index else '0' for i in range(len(planets))) + 'bd'\n        else:\n            return ''.join('1' if planet2_index < i < planet1_index else '0' for i in range(len(planets))) + 'bd'\n\n    print(binary_planet_distance(\"Jupiter\", \"Neptune\"))\n    print(binary_planet_distance(\"Earth\", \"Mercury\"))\n    print(binary_planet_distance(\"Mercury\", \"Uranus\"))\n    print(binary_planet_distance(\"Earth\", \"Earth\"))\n    print(binary_planet_distance(\"Earth\", \"Jupiter\"))\n    print(binary_planet_distance(\"Earth\", \"Mercury\"))\n    print(binary_planet_distance(\"Earth\", \"Uranus\"))\n    print(binary_planet_distance(\"Earth\", \"Neptune\"))\n    print(binary_planet_distance(\"Earth\", \"Solar_System\"))\n    print(binary_planet_distance(\"Solar_System\", \"Earth\"))\n    print(binary_planet_distance(\"Earth\", \"\"))\n    print(binary_planet_distance(\"\", \"Earth\"))\n    print(binary_planet_distance(\"Earth\", None))\n    print(binary_planet_distance(None, \"Earth\"))\n    print(binary_planet_distance(\"Earth\", 123456))\n    print(binary_planet_distance(123456, \"Earth\"))\n    print(binary_planet_distance(\"Earth\", \"Pluto\"))\n    print(binary_planet_distance(\"Pluto\", \"E"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if n % 2 == 0:\n            result.append(brazilian_factorial(i) * brazilian_factorial(i-1))\n        else:\n            result.append(brazilian_factorial(i) * brazilian_factorial(i-1) * brazilian_factorial(i-2))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        chars = [c for c in s if c != ' ']\n        for i in range(len(chars)-2):\n            if len(set(chars[i:i+3])) != 3:\n                return False\n        return True\n\n    if not is_happy(numbers):\n        return 'Not a happy string'\n\n    return ' '.join(sorted(numbers.split()))\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    valid_triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not valid_triples:\n        return (0, 1)\n    else:\n        sum_valid_triples = sum(sum(triple) for triple in valid_triples)\n        product_valid_triples = 1\n        for triple in valid_triples:\n            product_valid_triples *= triple[0]\n        return (sum_valid_triples, product_valid_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_values = []\n    for value in values:\n        nums = value.split()\n        nums = [int(num) for num in nums]\n        even_nums = [num for num in nums if num % 2 == 0]\n        if even_nums:\n            even_values.append((min(even_nums), nums.index(min(even_nums))))\n        else:\n            even_values.append((\"\", -1))\n    if even_values:\n        even_values.sort()\n        return even_values[0]\n    else:\n        return ()\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes_lst1 = [i for i in lst1 if is_prime(i)]\n    primes_lst2 = [i for i in lst2 if is_prime(i)]\n\n    if len(primes_lst1) == 0:\n        return y\n    elif len(primes_lst2) == 0:\n        return x\n    else:\n        return x\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    def is_same_chars(s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)\n\n    def grade_from_gpa(gpa: float) -> str:\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa == 3.7:\n            return 'A'\n        elif gpa == 3.3:\n            return 'B'\n        elif gpa == 3.0:\n            return 'B+'\n        elif gpa == 2.7:\n            return 'B-'\n        elif gpa == 2.3:\n            return 'B'\n        elif gpa == 2.0:\n            return 'C'\n        elif gpa == 1.7:\n            return 'C+'\n        elif gpa == 1.3:\n            return 'C-'\n        elif gpa == 1.0:\n            return 'D'\n        elif gpa == 0.7:\n            return 'D+'\n        else:\n            return 'D-'\n\n    def grade_from_letter(letter: str) -> float:\n        if letter == 'A+':\n            return 4.0\n        elif letter == 'A':\n            return 3.7\n        elif letter == 'B+':\n            return 3.3\n        elif letter == 'B':\n            return 3.0\n        elif letter == 'B-':\n            return 2.7\n        elif letter == 'B':\n            return 2.3\n        elif letter == 'C':\n            return 2.0\n        elif letter == 'C+':\n            return 1.7\n        elif letter == 'C-':\n            return 1.3\n        elif letter == 'D':\n            return 1.0\n        elif letter == 'D+':\n            return 0.7\n        else:\n            return 0.0\n\n    result = []\n    for gpa, name in zip(grades, s0*len(grades)):\n        if is_same_chars(name, s1):\n            result.append(grade_from_gpa(gpa))\n    return result\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        factors = []\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                factors.append(i)\n        return max(factors)\n    else:\n        return x if n == 1 else y\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(x.numerator / x.denominator == 1)\n        elif note == 'o|':\n            result.append(x.numerator / x.denominator == 2)\n        elif note == '.|':\n            result.append(x.numerator / x.denominator == 4)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorize(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = factorize(n)\n    special_factorial = 1\n    for factor in set(factors):\n        special_factorial *= (factors.count(factor) * factorial(factor))\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    depths = [get_max_depth(s) for s in input]\n    total_depth = sum(depths)\n    shift %= total_depth\n    for i, depth in enumerate(depths):\n        depths[i] = (depth - shift) % total_depth\n    return [int(d) for d in str(list(map(str, depths)))]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    last_char = None\n    total = 0\n    for char in s:\n        if last_char and roman_dict[char] > last_char:\n            return False\n        total += roman_dict[char]\n        last_char = roman_dict[char]\n    if len(s) < 3 or total > 1000:\n        return False\n    if s.count('vvv') > 0 or s.count('vvvv') > 0:\n        return False\n    if s.count('iii') > 0 or s.count('iiii') > 0:\n        return False\n    if s.count('xxxx') > 0 or s.count('xxxxx') > 0:\n        return False\n    if s.count('lxxxx') > 0 or s.count('lllll') > 0:\n        return False\n    return total\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    if not paren_string:\n        return []\n\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(s: str) -> int:\n        max_level = level = 0\n        for c in s:\n            if c == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif c == ')':\n                level -= 1\n        return max_level\n\n    def group_hashes(s: str) -> List[str]:\n        groups = s.split()\n        return [md5_hash(str(deepest_level(g))) for g in groups]\n\n    return group_hashes(paren_string)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n        if len(key) < 3:\n            return False\n        for i in range(len(key) - 2):\n            if key[i] == key[i+1] or key[i+1] == key[i+2] or key[i] == key[i+2]:\n                return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n\n    mod_p = [0] * len(arr)\n    for i in range(len(arr)):\n        mod_p[i] = arr[i] % p\n\n    mod_p.sort()\n\n    for i in range(len(arr)):\n        if mod_p[i] != i % p:\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    min_sub_array = None\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            if sum(sub_array) % 2 == 0:\n                even_digits = len([n for n in sub_array if n % 2 == 0])\n                odd_digits = len([n for n in sub_array if n % 2 != 0])\n                if sum(sub_array) < min_sum:\n                    min_sum = sum(sub_array)\n                    min_sub_array = (even_digits, odd_digits)\n    return min_sub_array\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def count_palindromes(l, n, is_even):\n        count = 0\n        for i in range(1, n + 1):\n            if is_even:\n                if is_palindrome(i) and i % 2 == 0:\n                    count += 1\n            else:\n                if is_palindrome(i) and i % 2 != 0:\n                    count += 1\n        return count\n\n    even_count = count_palindromes(l, n, True)\n    odd_count = count_palindromes(l, n, False)\n\n    return (even_count >= 2, odd_count >= 2)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n\n    changes = count_changes(arr)\n    return changes + x + y\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_largest_prime(n):\n        largest_prime = None\n        while n % 2 == 0:\n            largest_prime = 2\n            n = n / 2\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                largest_prime = i\n                n = n / i\n        if n > 2:\n            largest_prime = n\n        return largest_prime\n\n    primes = []\n    for num in nums:\n        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':\n            primes.append(get_largest_prime(abs(num)))\n    return max(primes) if primes else None\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s[::-1] if shift > len(s) else s\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/42", "completion": "\n    def check_fraction(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator and denominator\n\n    def check_brackets(expression: str) -> bool:\n        open_brackets = expression.count('<')\n        close_brackets = expression.count('>')\n        return open_brackets == close_brackets\n\n    def check_valid_expression(expression: str) -> bool:\n        if not check_brackets(expression):\n            return False\n\n        fractions = expression[1:-1].split(',')\n        product = 1\n        for fraction in fractions:\n            if not check_fraction(fraction):\n                return False\n            numerator, denominator = map(int, fraction.split('/'))\n            product *= numerator / denominator\n\n        return product.is_integer()\n\n    return check_valid_expression(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 0]\n    if n == 2:\n        return [2, 0]\n    if n == 3:\n        return [0, 2, 0]\n\n    fib4_sequence = [0, 0, 0, 2]\n\n    for i in range(4, n):\n        fib4_sequence.append(fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4])\n\n    sum_of_first_and_last_elements = fib4_sequence[0] + fib4_sequence[-1]\n\n    if sum_of_first_and_last_elements % 2 == 0:\n        fib4_sequence.sort(reverse=True)\n    else:\n        fib4_sequence.sort()\n\n    return fib4_sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n\n    roman_numerals = []\n    for value in values:\n        while number >= value:\n            number -= value\n            roman_numerals.append(symbols[values.index(value)])\n\n    return roman_numerals\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n        if is_prime(number):\n            sum_numbers += number\n            product_numbers *= number\n\n    return sum_numbers, product_numbers\n"}
{"task_id": "EvoEval/46", "completion": "\n    # filter out negative numbers\n    l = [i for i in l if i >= 0]\n    # filter out odd numbers\n    l = [i for i in l if i % 2 == 0]\n    # return the largest even number\n    return max(l) if l else -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    result = []\n    n = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            n += 1\n    for l in lst:\n        m = 0\n        for c in l:\n            if int(c) % 2 != 0:\n                m += 1\n        result.append(\"In string, number of uppercase vowels in even indices is {}, and number of odd digits is {}.\".format(n, m))\n    return result\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def digit_sum(n: int) -> int:\n        if n < 0:\n            return -digit_sum(-n)\n        return sum(map(int, str(n)))\n\n    mod_2_n = pow(2, n, p)\n    return sum(digit_sum(x) > mod_2_n for x in arr)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "EvoEval/51", "completion": "\n    def modify(x):\n        if isinstance(x, str):\n            return x.lower() if x.isupper() else x.upper()\n        elif isinstance(x, int) or isinstance(x, float):\n            return x\n        else:\n            return x[::-1]\n\n    def compare(a, b):\n        if isinstance(a, str) and isinstance(b, str):\n            if a.replace('.', '', 1).isdigit() and b.replace('.', '', 1).isdigit():\n                return float(a) if a > b else float(b)\n            else:\n                return a if a > b else b\n        elif isinstance(a, str):\n            return b\n        elif isinstance(b, str):\n            return a\n        else:\n            return b if a > b else None\n\n    a = modify(a)\n    b = modify(b)\n\n    return compare(a, b)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        if not arr:\n            return ([], None)\n        smallest_even = min(node for node in arr if node % 2 == 0)\n        smallest_index = arr.index(smallest_even)\n        remaining_nodes = [node for node in arr if node != smallest_even]\n        return ([smallest_even, smallest_index], sum(remaining_nodes) * (1 if smallest_even > 0 else -1 if smallest_even < 0 else 0))\n\n    print(pluck_and_prod([4,2,3]))\n    print(pluck_and_prod([1,2,3]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n\npluck_and_prod()\n"}
{"task_id": "EvoEval/53", "completion": "\n    def is_prime(n):\n        if n in (2, 3):\n            return True\n        if n % 2 == 0 or n == 1:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    hex_grades = ['F', 'B', 'B', '8', 'D']\n    count = 0\n    for grade in grades:\n        if grade in hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = math.isqrt(n)\n        for i in range(3, sqrt_n + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]):\n                subarray_sum = sum(nums[i:j+1])\n                if subarray_sum > max_sum:\n                    max_sum = subarray_sum\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"}\r\n    roman_numerals_reverse = {v: k for k, v in roman_numerals.items()}\r\n    numeral_string = \"\"\r\n    if number <= 0:\r\n        return None\r\n    for i in sorted(roman_numerals.keys(), reverse=True):\r\n        while number >= i:\r\n            numeral_string += roman_numerals[i]\r\n            number -= i\r\n    return hashlib.md5(numeral_string.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [factor for factor in factors if factor % 2 != 0 and is_prime(factor)]\n\n    if not odd_factors:\n        return 0\n\n    product = 1\n    for factor in odd_factors:\n        product *= factor\n\n    return product\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindromic(arr):\n        return arr == arr[::-1]\n\n    def is_odd_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n\n    changes = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_palindromic(arr[i:j+1]) and is_odd_digit(arr[i]):\n                changes += j - i\n                break\n    return changes\n"}
{"task_id": "EvoEval/58", "completion": "\n    from collections import Counter\n\n    def max_freq_and_sum_check(lst, a, b):\n        count = Counter(lst)\n        max_freq = -1\n        for i in count:\n            if count[i] >= i:\n                max_freq = i\n                break\n        if max_freq != -1:\n            if a == b == max_freq + max_freq or a == max_freq + max_freq or b == max_freq + max_freq:\n                return (max_freq, True)\n        return (-1, False)\n\n    print(max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5))\n\n\nmax_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0)\nmax_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2)\nmax_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3)\nmax_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5)\n\n\nThe function works by first counting the frequency of each number in the list using the Counter class from the collections module. It then iterates over the count to find the first number with a frequency greater than or equal to its own value. If such a number is found, it checks if either"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    def convert_to_base(n, base):\n        if n < base:\n            return str(n)\n        else:\n            return convert_to_base(n // base, base) + str(n % base)\n\n    def replace_with_count(s, count):\n        return s.replace(\"n\", str(count))\n\n    result = []\n    for i, s in enumerate(lst):\n        count = count_odd_digits(s)\n        converted = convert_to_base(count, base)\n        result.append(replace_with_count(s, converted))\n    return result\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [0] * n\n    for i in range(n):\n        a[i] = i * i - i + 1\n    a.sort()\n    for i in range(n - 2):\n        if (a[i] + a[i + 1] + a[i + 2]) % 3 == 0:\n            return [a[i] + a[i + 1] + a[i + 2], i]\n    return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        for chain in chains:\n            if chain[0] == planet1 and chain[-1] == planet2:\n                if len(chain) > len(longest_chain):\n                    longest_chain = chain\n        return longest_chain\n\n    longest_chain = None\n    for chain in chains:\n        if chain[0] == planet1 and chain[-1] == planet2:\n            if longest_chain is None or len(chain) > len(longest_chain):\n                longest_chain = chain\n    return longest_chain\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.lower() for word in words]\n    words = sorted(words)\n    result = []\n    for word in words:\n        if word.isalpha():\n            if len(result) % 2 == 0:\n                result.append(word)\n            else:\n                result.insert(0, word)\n        else:\n            result.append(word)\n    result = '-'.join(result)\n    result = result.replace('-_', '- ').replace('_ -', ' _-')\n    result = result.replace('--', '-').replace('-', '_')\n    return result\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def power_mod(base, exp, mod):\n        result = 1\n        while exp > 0:\n            if exp % 2 == 1:\n                result = (result * base) % mod\n            exp = exp >> 1\n            base = (base * base) % mod\n        return result\n\n    def find_primes(n, mod):\n        result = []\n        for i in range(2, mod):\n            if is_prime(i) and power_mod(i, n, mod) == 1:\n                result.append(i)\n        return result\n\n    if n == 0:\n        return []\n    mod = 2**n\n    primes = find_primes(mod, p)\n    return primes[:min(len(primes), n)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (n % p)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def find_max_even(x, y):\n        max_even = -1\n        for i in range(x, y + 1):\n            if i % 2 == 0 and i > max_even:\n                max_even = i\n        return max_even\n\n    def find_triple_sum(a, sum_of_max_even):\n        n = len(a)\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        return a[i] + a[j] + a[k] + sum_of_max_even\n        return -1\n\n    max_even = find_max_even(x, y)\n    a = [i * i - i + 1 for i in range(max_even + 1, max_even + n + 1)]\n    return find_triple_sum(a, max_even)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    diffs = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) > threshold:\n                diffs.append(abs(numbers[i] - numbers[j]))\n    if not diffs:\n        return 0\n    else:\n        return max(diffs)\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        product = 1\n        for digit in str(num):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_product = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            product = minOddDigitsProduct(sub_array[0])\n            for num in sub_array[1:]:\n                product = min(product, minOddDigitsProduct(num))\n            min_product = min(min_product, product)\n    return min_product if min_product != float('inf') else 0\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return len(s) >= 3\n\n    lst = [s for s in lst if is_happy(s)]\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_factorial(n):\n        result = 1\n        for i in range(1, n+1):\n            result *= factorial(i)\n        return result\n\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, max(numbers)+1):\n        for j in range(i+1, max(numbers)+1):\n            if special_factorial(i) - special_factorial(j) < min_diff:\n                min_diff = special_factorial(i) - special_factorial(j)\n                result = (i, j)\n            elif special_factorial(i) - special_factorial(j) == min_diff:\n                if i < result[0] or (i == result[0] and j < result[1]):\n                    result = (i, j)\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    total_weight = sum(w)\n    max_weight = brazilian_factorial(n)\n\n    if total_weight <= max_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    for n in numbers:\n        if factorial(n) > threshold:\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> str:\n        return str(Fraction(fraction))\n\n    def is_valid(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator and denominator\n\n    return [is_valid(fraction) and simplify(fraction) == n for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def sum_of_two(lst, x, y):\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if lst[i] + lst[j] == x and lst[i] + lst[j] == y:\n                    return True\n        return False\n\n    def sum_of_three(lst, x, y, z):\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                for k in range(j + 1, len(lst)):\n                    if lst[i] + lst[j] + lst[k] == x and lst[i] + lst[j] + lst[k] == y and lst[i] + lst[j] + lst[k] == z:\n                        return True\n        return False\n\n    def sum_of_four(lst, x, y, z, w):\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                for k in range(j + 1, len(lst)):\n                    for l in range(k + 1, len(lst)):\n                        if lst[i] + lst[j] + lst[k] + lst[l] == x and lst[i] + lst[j] + lst[k] + lst[l] == y and lst[i] + lst[j] + lst[k] + lst[l] == z and lst[i] + lst[j] + lst[k] + lst[l] == w:\n                            return True\n        return False\n\n    if sum_of_two(lst1, x, y) or sum_of_three(lst1, x, y, z) or sum_of_four(lst1, x, y, z, w):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "EvoEval/75", "completion": "\n    def transform_dict(input_dict):\n        if not input_dict or not all(isinstance(k, str) and k.isupper() or k.islower() for k in input_dict.keys()):\n            return {}\n\n        output_dict = {}\n        for key, value in input_dict.items():\n            try:\n                num = float(value)\n                if num.is_integer():\n                    output_dict[key] = int(num)\n                else:\n                    output_dict[key] = round(num)\n            except ValueError:\n                continue\n\n        return output_dict\n\n    print(transform_dict({\"a\":\"10\", \"b\":\"15.3\"}))\n    print(transform_dict({\"A\":\"10.5\", \"B\":\"-15.5\"}))\n    print(transform_dict({\"a\":\"10\", \"B\":\"15.3\"}))\n    print(transform_dict({\"a\": \"10.5\", 8: \"-15.5\"}))\n\nThe function transform_dict takes a dictionary as input and returns a new dictionary where each value is replaced with the closest integer to it. If the value is not a number, it is ignored. If the keys are not all upper or lower case, it returns an empty dictionary. If the dictionary is empty or if the keys are not all strings, it also returns an empty dictionary.\n\nThe function is tested with the provided examples.\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n\n    modified_lst = lst.copy()\n    for i in range(len(modified_lst)):\n        if is_prime(modified_lst[i]):\n            modified_lst[i] = digit_sum(modified_lst[i])\n    if sum(modified_lst[0], modified_lst[-1]) % 2 == 0:\n        modified_lst.sort(reverse=True)\n    else:\n        modified_lst.sort()\n    return modified_lst\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def get_signed_digits(n):\n        if n < 0:\n            return -1 * sum(map(int, str(abs(n))[::-1]))\n        else:\n            return sum(map(int, str(n)[::-1]))\n\n    return sum(i for i in arr if i % 2 != 0 and get_signed_digits(i) > 0)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    result = \"\"\n    upper_vowel_count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i] in vowels:\n                upper_vowel_count += 1\n            if i % 2 == 0:\n                result += s[i].upper()\n            else:\n                result += s[i].lower()\n        else:\n            if i % 2 == 0:\n                result = result[::-1]\n            else:\n                result = result.upper()\n    return result, upper_vowel_count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    def is_happy_string(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n                return False\n        return True\n\n    def reverse_case(s):\n        return s.swapcase()\n\n    def reverse_string(s):\n        return s[::-1]\n\n    if is_happy_string(s):\n        return ''.join(reverse_case(i) for i in s)\n    else:\n        return reverse_string(s)\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\n    def decode(s: str) -> str:\n        return ''.join([s[-i] for i in range(1, len(s)+1)])\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n    result = ''.join([ch for ch in decoded if ch not in c])\n\n    return (result, is_palindrome(result))\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            fibfib_list = [0, 0, 1]\n            for i in range(3, n+1):\n                fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n            return fibfib_list[-1]\n\n    fibfib_list = [fibfib(i) for i in range(n)]\n    mean = sum(fibfib_list) / n\n    mad = sum([abs(x - mean) for x in fibfib_list]) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n\n    def get_odd_digits(n: int) -> int:\n        return int(str(n)[-1])\n\n    def get_product_of_odd_digits(n: int) -> int:\n        product = 1\n        while n > 0:\n            digit = n % 10\n            if is_even(digit):\n                product *= digit\n            n = n // 10\n        return product\n\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return odd_fibfib(n-1) + odd_fibfib(n-2) + odd_fibfib(n-3)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = text.replace(\" \", \"_\")\n    if len(text) > 2:\n        text = text.replace(\"__\", \"_\")\n    text = re.sub(r\"[^A-Za-z0-9_]\", \"\", text)\n    if len(text) > 1:\n        for i in range(2, len(text)):\n            if text[i] == text[i-1] == text[i-2] == \"_\":\n                return False\n    return len(text) > 0 and text.isdigit()\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {}\n        if string[i - 1] not in histogram[prefix]:\n            histogram[prefix][string[i - 1]] = 1\n        else:\n            histogram[prefix][string[i - 1]] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst.sort(key=lambda x: (count_ones(x), x))\n    return lst[1] if len(lst) > 1 else None\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands &= set(operand_list)\n    if not common_operands:\n        return None\n    result = int(common_operands.pop())\n    for operator in operators:\n        if operator == '+':\n            for operand_list in operand_lists:\n                result += int(set(operand_list).intersection(common_operands).pop())\n        elif operator == '-':\n            for operand_list in operand_lists:\n                result -= int(set(operand_list).intersection(common_operands).pop())\n        elif operator == '*':\n            for operand_list in operand_lists:\n                result *= int(set(operand_list).intersection(common_operands).pop())\n        elif operator == '//':\n            for operand_list in operand_lists:\n                result //= int(set(operand_list).intersection(common_operands).pop())\n        elif operator == '**':\n            for operand_list in operand_lists:\n                result **= int(set(operand_list).intersection(common_operands).pop())\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')' and stack:\n                stack.pop()\n        return not stack\n\n    def remove_vowels(s):\n        vowels = 'aeiouAEIOU'\n        return ''.join([c for c in s if c not in vowels])\n\n    if is_balanced(text):\n        return text\n    else:\n        return remove_vowels(text)\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    if not strings:\n        return None\n    return [s for s in strings if hashlib.md5(s.encode()).hexdigest() == hash_substring]\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict:\n        if not isinstance(key, str):\n            return {}\n        count = 0\n        for char in key:\n            if char.lower() in vowels:\n                count += 1\n        result[key.lower()] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(0, len(l), 2):\n        if not is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = [i for i in a if i in l1]\n    common_elements.sort()\n    count = 0\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            for k in range(j + 1, len(common_elements)):\n                if (common_elements[i] + common_elements[j] + common_elements[k]) % 3 == 0:\n                    count += 1\n    if count == 0:\n        return ([], 0)\n    else:\n        return (common_elements[:count], count)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    string = string.lower()\n    string_length = len(string)\n    if is_prime(string_length):\n        for i in range(1, string_length - 1):\n            if string[i] in vowels and string[i - 1] in consonants and string[i + 1] in consonants:\n                return string[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_sum_of_digits(num):\n        if num < 0:\n            return -1 * sum(int(digit) for digit in str(abs(num))[1:])\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    arr.sort(key=count_sum_of_digits)\n    if len(arr) % 2 == 0:\n        arr.reverse()\n    return arr\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    result = [s for s in strings if substring in s]\n    result.sort(key=lambda s: (len(s), s))\n    return result\n"}
{"task_id": "EvoEval/96", "completion": "\n    if len(l1) != len(l2):\n        return False\n\n    s = set()\n    for i in range(len(l1)):\n        if -l1[i] in s:\n            return True\n        s.add(l1[i])\n\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + i*i - i + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n        if value[0] != \"(\" or value[-1] != \")\":\n            return False\n    return True\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
