{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        s = s.replace(',', '.')\n        if len(s) < 3 or len(set(s[i:i+3] for i in range(len(s)))) < 3:\n            return None\n        return s\n\n    a = is_happy(a)\n    b = is_happy(b)\n\n    if a is None and b is None:\n        return None\n    if a is not None:\n        return a\n    if b is not None:\n        return b\n    return a if float(a) > float(b) else b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_and_flip(value: str) -> str:\n        parts = value.split()\n        number = float(''.join(filter(str.isdigit, parts[0])))\n        string = ''.join(filter(str.isalpha, parts[1]))\n        rounded_number = round(number)\n        if number - rounded_number >= 0.5:\n            rounded_number += 1\n        if number - rounded_number <= -0.5:\n            rounded_number -= 1\n        flipped_string = string.swapcase()\n        return f'{rounded_number} {flipped_string}'\n\n    print(round_and_flip(\"10.5abc\"))  # '11 ABC'\n    print(round_and_flip(\"15.3ABC\"))  # '15 abc'\n    print(round_and_flip(\"14.5abc\"))  # '15 ABC'\n    print(round_and_flip(\"-14.5ABC\"))  # '-15 abc'\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(pow(2, n, p))\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    def sort_parentheses(lst: List[str]) -> str:\n        s = ''.join(lst)\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n        return 'Yes' if not stack else 'No'\n\n    print(sort_parentheses(['(three)(', '(five)', '(one)']))\n    print(sort_parentheses(['(five)', '(three)', '(one)']))\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def largest_prime_divisor(n: int) -> int:\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    return max(digit_sum(n) for n in lst if is_prime(n) and n != 0)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if len(numbers) < 2:\n        return numbers\n\n    sum_numbers = [round(sum(numbers))]\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                sum_numbers.append(round(numbers[i] + numbers[j]))\n\n    if len(sum_numbers) == 1:\n        return numbers\n\n    if sum_numbers[0] % 2 == 0:\n        return sorted(numbers, key=lambda x: -x)\n    else:\n        return sorted(numbers)\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n\n    else:\n        return n + 1\n"}
{"task_id": "EvoEval/7", "completion": "\n    def sum_square_cube(lst: list):\n        return sum(x**2 if i % 3 == 0 else x**3 for i, x in enumerate(lst))\n\n    return sum_square_cube([i for i in range(1, n+1)])\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    bracket_dict = {\n        '<': '>',\n        '>': '<'\n    }\n\n    open_brackets = string.count('<')\n    close_brackets = string.count('>')\n\n    if open_brackets != close_brackets:\n        return (False, open_brackets, close_brackets)\n\n    bracket_count = {bracket: string.count(bracket) for bracket in bracket_dict.keys()}\n\n    if any(count % 2 != 0 for count in bracket_count.values()):\n        return (False, *bracket_count.values())\n\n    if any(bracket_dict[bracket] != string[i+1] for i, bracket in enumerate(string[:-1])):\n        return (False, *bracket_count.values())\n\n    return (True, *bracket_count.values())\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_positions = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    if planet1 not in planet_positions or planet2 not in planet_positions:\n        return {}\n\n    planets_in_order = sorted(\n        [planet for planet in planet_positions if planet_positions[planet] <= planet_positions[planet1]],\n        key=lambda planet: planet_positions[planet]\n    )\n\n    return {planet: planet_to_roman(planet_positions[planet]) for planet in planets_in_order if planet_positions[planet] <= planet_positions[planet2]}\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_table = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 2.7, 'B': 2.3, 'B-': 2.0, 'C+': 1.7, 'C': 1.3, 'C-': 1.0, 'D+': 0.7, 'D': 0.0, 'D-': 0.0, 'E': 0.0}\n    result = []\n    for name, gpa in name_grade_list:\n        if gpa in grade_table:\n            result.append((name.capitalize(), grade_table[gpa]))\n        else:\n            result.append((name, 'E'))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def get_grade(gpa):\n        if gpa > 3.7:\n            return 'A+'\n        elif gpa > 3.3:\n            return 'A'\n        elif gpa > 2.7:\n            return 'B+'\n        elif gpa > 2.3:\n            return 'B'\n        elif gpa > 1.7:\n            return 'B-'\n        elif gpa > 1.3:\n            return 'C+'\n        elif gpa > 1.0:\n            return 'C'\n        elif gpa > 0.7:\n            return 'C-'\n        else:\n            return 'D'\n\n    return [{'name': student['name'], 'grade': get_grade(student['GPA'])} for student in student_info if count_consonants(student['name']) == n]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def get_signed_digits(n):\n        if n < 0:\n            return -1 * int(str(abs(n))[0])\n        else:\n            return int(str(n)[0])\n\n    filtered_arr = [n for n in arr if get_signed_digits(n) > 0]\n    lst1 = [n for n in lst1 if get_signed_digits(n) > 0]\n\n    if len(filtered_arr) == 0 or len(lst1) == 0:\n        return \"NO\"\n\n    for i in range(len(filtered_arr)):\n        for j in range(len(lst1)):\n            if (filtered_arr[i] + lst1[j]) % 2 != 0:\n                return \"NO\"\n\n    return \"YES\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    return bin(int(sum(primes) / len(primes)))\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n    count = 0\n    for op in operations:\n        balance += op\n        count += 1\n        if balance == 0 and count >= 3:\n            return True\n    return False\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    notes = {\"o\": 4, \"|\": 2, \".\": 1}\n    music_notes = [notes[c] for c in music_string.split()]\n    word_notes = [notes[c] for c in word if c in notes]\n    if not word_notes:\n        return []\n    closest_vowel_notes = [note for note in word_notes if note == min(word_notes, key=lambda x:abs(x-note))]\n    return closest_vowel_notes\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_list = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n\n    if n < len(fibfib_list):\n        return fibfib_list[n]\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    n = len(nums)\n    if n < 3:\n        return 0\n\n    min_sum = float('inf')\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] + nums[j] + nums[k] < min_sum:\n                    min_sum = nums[i] + nums[j] + nums[k]\n\n    return min_sum if min_sum != float('inf') else 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return largest_withdrawal, smallest_deposit, True\n        if largest_withdrawal is None and op < 0:\n            largest_withdrawal = op\n        if smallest_deposit is None and op > 0:\n            smallest_deposit = op\n    return largest_withdrawal, smallest_deposit, balance < 0\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(s):\n        return s.lower() if s.isupper() else s.upper()\n\n    def grade_to_letter(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa == 3.7:\n            return 'A'\n        elif gpa == 3.3:\n            return 'B+'\n        elif gpa == 3.0:\n            return 'B'\n        elif gpa == 2.7:\n            return 'B-'\n        elif gpa == 2.3:\n            return 'C+'\n        elif gpa == 2.0:\n            return 'C'\n        elif gpa == 1.7:\n            return 'C-'\n        elif gpa == 1.3:\n            return 'D+'\n        elif gpa == 1.0:\n            return 'D'\n        else:\n            return 'D-'\n\n    return [(reverse_case(name), grade_to_letter(gpa)) for name, gpa in zip(s, grades)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def base_change(n: int, base: int) -> str:\n        if n < base:\n            return str(n)\n        else:\n            return base_change(n // base, base) + str(n % base)\n\n    return [base_change(i, base) for i in range(1, x + 1)]\n"}
{"task_id": "EvoEval/22", "completion": "\n    def binary_planet_distance(planet1, planet2):\n        planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n\n        binary_planets = [format(i, 'b') for i in range(planet1_index + 1, planet2_index)]\n        return 'bd' + ''.join(binary_planets) + 'bd'\n\n    print(binary_planet_distance(\"Jupiter\", \"Neptune\"))\n    print(binary_planet_distance(\"Earth\", \"Mercury\"))\n    print(binary_planet_distance(\"Mercury\", \"Uranus\"))\n    print(binary_planet_distance(\"Earth\", \"Earth\"))\n    print(binary_planet_distance(\"Earth\", \"Jupiter\"))\n    print(binary_planet_distance(\"Earth\", \"Uranus\"))\n    print(binary_planet_distance(\"Earth\", \"Neptune\"))\n    print(binary_planet_distance(\"Earth\", \"Unknown\"))\n    print(binary_planet_distance(\"Unknown\", \"Earth\"))\n\nThis code will print the binary representation of the planets between the two input planets. The function will return an empty string if the input planets are not valid.\n\nPlease note that the function is case-sensitive, so \"Earth\" and \"earth\" would be considered different planets.\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(brazilian_factorial(i))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        chunks = [s[i:i+3] for i in range(0, len(s), 3)]\n        return len(chunks) == len(set(chunks))\n\n    if is_happy(numbers):\n        return ' '.join(sorted(numbers.split()))\n    else:\n        return 'Not a happy string'\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    valid_triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not valid_triples:\n        return (0, 1)\n    else:\n        sum_valid_triples = sum(sum(triple) for triple in valid_triples)\n        product_valid_triples = 1\n        for triple in valid_triples:\n            product_valid_triples *= triple[0]\n        return (sum_valid_triples, product_valid_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    even_values = []\n    for value in values:\n        nums = value.split()\n        nums = [int(num) for num in nums]\n        even_nums = [num for num in nums if num % 2 == 0]\n        if even_nums:\n            even_values.append((min(even_nums), nums.index(min(even_nums))))\n\n    if not even_values:\n        return ()\n\n    even_values.sort()\n    return even_values[0]\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_prime = [i for i in lst1 if is_prime(i)]\n    lst2_prime = [i for i in lst2 if is_prime(i)]\n\n    if len(lst1_prime) > 0 and len(lst2_prime) > 0:\n        return x\n    else:\n        return y\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    def grade(gpa: float, s0: str, s1: str) -> str:\n        if gpa >= 3.7 and s0 == s1:\n            return 'A'\n        elif gpa >= 3.3 and s0 == s1:\n            return 'B'\n        elif gpa >= 3.0 and s0 == s1:\n            return 'C'\n        elif gpa >= 2.7 and s0 == s1:\n            return 'B+'\n        elif gpa >= 2.3 and s0 == s1:\n            return 'B'\n        elif gpa >= 2.0 and s0 == s1:\n            return 'B-'\n        elif gpa >= 1.7 and s0 == s1:\n            return 'C+'\n        elif gpa >= 1.3 and s0 == s1:\n            return 'C'\n        elif gpa >= 1.0 and s0 == s1:\n            return 'C-'\n        elif gpa >= 0.7 and s0 == s1:\n            return 'D'\n        elif gpa >= 0.0 and s0 == s1:\n            return 'D+'\n        else:\n            return 'E'\n\n    return [grade(gpa, s0, s1) for gpa in grades if grade(gpa, s0, s1) != 'E']\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return largest_prime_factor(n)\n    else:\n        return x if n > 1 else y\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note == 'o':\n            result.append(x == '4')\n        elif note == 'o|':\n            result.append(x == '2')\n        elif note == '.|':\n            result.append(x == '1')\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    special_factorial = 1\n    for factor in factors:\n        special_factorial *= factorial(factor)\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def shift_digits(num: int, shift: int) -> int:\n        num_str = str(num)\n        return int(num_str[-shift:] + num_str[:-shift])\n\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    depths = [get_max_depth(s) for s in input]\n    result = []\n    for d in depths:\n        result.append(shift_digits(d, shift))\n    return result\n"}
{"task_id": "EvoEval/33", "completion": "\n    def check_criteria(s):\n        if len(s) < 3:\n            return False\n        if not s.isdigit() or any(int(c) > 1000 for c in s):\n            return False\n        for i in range(len(s) - 2):\n            if s[i] == s[i+1] == s[i+2]:\n                return False\n        return True\n\n    if not check_criteria(s):\n        return False\n\n    roman_numerals = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    num = 0\n    for i in range(len(s)):\n        if i > 0 and roman_numerals[s[i]] > roman_numerals[s[i-1]]:\n            num += roman_numerals[s[i]] - 2 * roman_numerals[s[i-1]]\n        else:\n            num += roman_numerals[s[i]]\n    return num\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    if not paren_string:\n        return []\n\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(paren_string: str) -> str:\n        max_level = 0\n        current_level = 0\n        max_md5 = None\n\n        for c in paren_string:\n            if c == '(':\n                current_level += 1\n                if current_level > max_level:\n                    max_level = current_level\n                    max_md5 = md5_hash(paren_string)\n            elif c == ')':\n                current_level -= 1\n\n        return max_md5\n\n    return [deepest_level(p) for p in paren_string.split()]\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if len(key) < 3 or len(set(key[i] + key[i+1] + key[i+2] for i in range(len(key)-2))) != 3:\n            return False\n        if not key.isalpha():\n            return False\n\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n\n    mod_p = [0] * len(arr)\n    for i in range(len(arr)):\n        mod_p[i] = arr[i] % p\n\n    mod_p.sort()\n\n    for i in range(len(arr)):\n        if mod_p[i] != i % 2:\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    min_even_digit = float('inf')\n    min_odd_digit = float('inf')\n\n    for i in range(len(nums)):\n        even_digit = 0\n        odd_digit = 0\n        for j in range(i, len(nums)):\n            if nums[j] % 2 == 0:\n                even_digit += nums[j]\n            else:\n                odd_digit += nums[j]\n            if even_digit + odd_digit < min_sum:\n                min_sum = even_digit + odd_digit\n                min_even_digit = even_digit\n                min_odd_digit = odd_digit\n\n    return (min_sum, min_even_digit, min_odd_digit)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindromes = []\n    odd_palindromes = []\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindromes.append(i)\n            else:\n                odd_palindromes.append(i)\n\n    return (len(even_palindromes) > 0, len(odd_palindromes) > 0)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def count_changes(arr):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes\r\n\r\n    if is_palindrome(arr):\r\n        return 0\r\n\r\n    changes = count_changes(arr)\r\n    return changes + x + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime(n):\n        while n % 2 == 0:\n            n = n // 2\n        if is_prime(n):\n            return n\n        for i in range(3, int(n**0.5) + 1, 2):\n            while n % i == 0:\n                n = n // i\n        if n > 2:\n            return n\n        return None\n\n    if not nums:\n        return None\n\n    first_last_digits = str(abs(nums[0]))[-1] + str(abs(nums[-1]))[-1]\n    if int(first_last_digits) > 10:\n        return largest_prime(abs(nums[0])) if is_prime(abs(nums[0])) else largest_prime(abs(nums[-1]))\n    else:\n        return None\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s[::-1]\n    s = s[shift:] + s[:shift]\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n\n    def is_whole_number(n):\n        try:\n            int(n)\n            return True\n        except ValueError:\n            return False\n\n    def is_valid_fraction(f):\n        numerator, denominator = map(int, f.split('/'))\n        return is_whole_number(numerator) and is_whole_number(denominator) and denominator != 0\n\n    def is_valid_expression(e):\n        opening, closing = re.findall(r'<(.+?)>', e)\n        if not re.fullmatch(r'<(.+?)>', opening) or not re.fullmatch(r'<(.+?)>', closing):\n            return False\n        fractions = opening.split(',')\n        if not all(is_valid_fraction(f) for f in fractions):\n            return False\n        product = reduce(lambda x, y: x * y, (int(f.split('/')[0]) for f in fractions))\n        return product == int(closing)\n\n    return is_valid_expression(expression)\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [0, 0]\n    if n == 2:\n        return [2, 0]\n    if n == 3:\n        return [0, 2, 0]\n\n    fib4_sequence = [0, 0, 0, 2]\n\n    for i in range(4, n):\n        fib4_sequence.append(fib4_sequence[-1] + fib4_sequence[-2] + fib4_sequence[-3] + fib4_sequence[-4])\n\n    if sum(fib4_sequence[-2:]) % 2 == 0:\n        fib4_sequence.sort(reverse=True)\n    else:\n        fib4_sequence.sort()\n\n    return fib4_sequence\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    roman_numerals = []\n\n    for i in range(len(values)):\n        count = int(number / values[i])\n        roman_numerals.append(symbols[i] * count)\n        number -= values[i] * count\n\n    return roman_numerals\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_num += num\n            product_num *= num\n\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/46", "completion": "\n    max_even = -1\n    for num in l:\n        if num % 2 == 0 and num > 0:\n            max_even = num\n    return max_even\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    result = []\n    for i in range(len(lst)):\n        n = 0\n        m = 0\n        for j in range(0, len(lst[i]), 2):\n            if lst[i][j] in vowels:\n                n += 1\n            if int(lst[i][j]) % 2 != 0:\n                m += 1\n        result.append(f\"In string, number of uppercase vowels in even indices is {n}, number of odd digits is {m}.\")\n    return result\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    return [s for s in strings if is_prime(len(s)) and s.startswith(prefix)]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def digit_sum(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if digit_sum(num) > 2**num % p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOUaeiou\"\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    def compare_numbers(a, b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n\n    def compare_strings(a, b):\n        if a > b:\n            return a\n        elif a < b:\n            return b\n        else:\n            return None\n\n    def modify_string(s):\n        if s.isalpha():\n            if s.isupper():\n                return s.lower()\n            else:\n                return s.upper()\n        else:\n            return s\n\n    def compare_real_numbers(a, b):\n        if isinstance(a, str):\n            a = float(a.replace(',', '.'))\n        if isinstance(b, str):\n            b = float(b.replace(',', '.'))\n        return compare_numbers(a, b)\n\n    a = str(a)\n    b = str(b)\n\n    if a.replace('.', '', 1).isdigit() and b.replace('.', '', 1).isdigit():\n        return compare_real_numbers(a, b)\n    elif a.replace('.', '', 1).isalpha() and b.replace('.', '', 1).isalpha():\n        return compare_strings(modify_string(a), modify_string(b))\n    else:\n        return compare_strings(a, b)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        smallest_even = [float('inf'), -1]\n        for i, num in enumerate(arr):\n            if num % 2 == 0 and num < smallest_even[0]:\n                smallest_even = [num, i]\n        if smallest_even[1] == -1:\n            return ([], None)\n        else:\n            return (smallest_even, sum(abs(x) for x in arr[smallest_even[1]+1:]))\n\n    print(pluck_and_prod([4,2,3]))\n    print(pluck_and_prod([1,2,3]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n"}
{"task_id": "EvoEval/53", "completion": "\n    grade_map = {4.0: 'A', 3.7: 'B', 3.3: 'C', 3.0: 'D', 2.7: 'E', 2.3: 'F', 2.0: 'G', 1.7: 'H', 1.3: 'I', 1.0: 'J', 0.7: 'K', 0.0: 'L'}\n    prime_hex_grades = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for grade in grades:\n        if grade in grade_map:\n            if grade_map[grade] in prime_hex_grades:\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if is_prime(nums[i]) and is_prime(nums[j]):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: \"i\", 4: \"iv\", 5: \"v\", 9: \"ix\", 10: \"x\", 40: \"xl\", 50: \"l\", 90: \"xc\", 100: \"c\", 400: \"cd\", 500: \"d\", 900: \"cm\", 1000: \"m\"}\r\n    roman_numerals_reverse = {v: k for k, v in roman_numerals.items()}\r\n    numeral_string = \"\"\r\n    if number <= 0:\r\n        return None\r\n    for i in sorted(roman_numerals.keys(), reverse=True):\r\n        while number >= i:\r\n            numeral_string += roman_numerals[i]\r\n            number -= i\r\n    return hashlib.md5(numeral_string.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def odd_prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                if is_prime(i) and i % 2 != 0:\n                    factors.append(i)\n        if n > 1 and is_prime(n) and n % 2 != 0:\n            factors.append(n)\n        return factors\n\n    factors = odd_prime_factors(n)\n    if not factors:\n        return 0\n    product = 1\n    for factor in factors:\n        product *= factor\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def palindromic_odd_digit_array(arr):\n        odd_digit_arr = [i for i in arr if i % 2 != 0]\n        if len(odd_digit_arr) % 2 != 0:\n            odd_digit_arr.append(0)\n        return len(odd_digit_arr)\n\n    def make_palindromic(arr):\n        changes = 0\n        for i in range(len(arr)//2):\n            if arr[i] != arr[-i-1]:\n                changes += 1\n                if arr[i] > arr[-i-1]:\n                    arr[-i-1] = arr[i]\n                else:\n                    arr[i] = arr[-i-1]\n        return changes\n\n    return min(make_palindromic(arr), palindromic_odd_digit_array(arr))\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    def max_freq_and_sum_check(lst, a, b):\n        from collections import Counter\n        c = Counter(lst)\n        max_freq = -1\n        for i in c:\n            if c[i] >= a and i >= b:\n                max_freq = i\n                break\n        if max_freq == -1:\n            return (-1, False)\n        elif a + b == max_freq:\n            return (max_freq, True)\n        else:\n            return (max_freq, False)\n\n    print(max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5))\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s, base):\n        return sum(1 for c in s if int(c, base) % 2 != 0)\n\n    def replace_with_odd_count(s, base, n):\n        return s.replace(s, str(n))\n\n    return [replace_with_odd_count(str(i), base, count_odd_digits(i, base)) for i in lst]\n"}
{"task_id": "EvoEval/60", "completion": "\n    def smallest_even_triple(arr, n):\n        arr.sort()\n        res = []\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                        res.append(arr[i])\n                        break\n        if res:\n            return [min(res), arr.index(min(res))]\n        else:\n            return []\n\n    print(smallest_even_triple([4,2,3], 5))\n    print(smallest_even_triple([1,2,3,4,5,6,7,8,9,10], 10))\n    print(smallest_even_triple([1,3,5,7,9], 5))\n    print(smallest_even_triple([2,4,6,8,10,12,14,16,18,20], 10))\n    print(smallest_even_triple([], 0))\n"}
{"task_id": "EvoEval/61", "completion": "\n    def longest_planet_chain(starting_planet: str, ending_planet: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        planet_chains = {planet: [] for planet in chains}\n        for chain in chains:\n            for i in range(len(chain) - 1):\n                planet_chains[chain[i]].append(chain[i+1])\n        starting_planet_chain = planet_chains.get(starting_planet)\n        if not starting_planet_chain:\n            return None\n        longest_chain = starting_planet_chain\n        for planet in planet_chains:\n            if planet == ending_planet:\n                current_chain = planet_chains[planet]\n                if len(current_chain) > len(longest_chain):\n                    longest_chain = current_chain\n        if not longest_chain:\n            return None\n        return tuple(longest_chain)\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.lower() for word in words]\n    words = sorted(words, key=lambda x: (x[0], -ord(x[-1]), x))\n    words = [word.replace('-', '').replace('_', '-') for word in words]\n    words = ['-' + word if len(word) > 2 else word for word in words]\n    words = [word.replace('-', '_') if '-' in word else word for word in words]\n    words = [word.replace('_', '') if '_' in word else word for word in words]\n    words = [word.capitalize() if len(word) > 1 else word for word in words]\n    return '-'.join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    planet_orbits = {\n        \"zero\": \"Mercury\",\n        \"one\": \"Venus\",\n        \"two\": \"Earth\",\n        \"three\": \"Mars\",\n        \"four\": \"Jupiter\",\n        \"five\": \"Saturn\",\n        \"six\": \"Uranus\",\n        \"seven\": \"Neptune\"\n    }\n\n    valid_planets = set(planet_orbits.values())\n\n    if planet1 not in valid_planets or planet2 not in valid_planets:\n        return 'Invalid'\n\n    order_list = order.split()\n    for num in order_list:\n        if not num.isdigit() or int(num) not in range(8):\n            return 'Invalid'\n\n    if len(order_list) != len(set(order_list)):\n        return 'Invalid'\n\n    return ' '.join(sorted(order_list, key=lambda x: planet_orbits.index(x)))\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def power_mod(base, power, mod):\n        result = 1\n        while power > 0:\n            if power % 2 == 1:\n                result = (result * base) % mod\n            base = (base * base) % mod\n            power = power // 2\n        return result\n\n    result = [i for i in range(2, n + 1) if power_mod(2, i, p) == p - 1 and not is_prime(power_mod(2, i, p))]\n    return result if result else []\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (n % p)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_multiple_of_three(n):\n        return n % 3 == 0\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_in_range(n, x, y):\n        return x <= n <= y\n\n    def find_largest_even(x, y):\n        for i in range(x, y, -1):\n            if is_even(i) and is_in_range(i, x, y):\n                return i\n        return -1\n\n    def find_largest_triple(a, x, y):\n        n = len(a)\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if is_multiple_of_three(a[i] + a[j] + a[k]):\n                        return a[i] + a[j] + a[k]\n        return -1\n\n    a = [i * i - i + 1 for i in range(x, y + 1)]\n    largest_even = find_largest_even(x, y)\n    if largest_even != -1:\n        a.append(largest_even)\n    largest_triple = find_largest_triple(a, x, y)\n    if largest_triple != -1:\n        return largest_triple + largest_even\n    return -1\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    left, right = 0, len(numbers) - 1\n    min_diff = float('inf')\n    while left < right:\n        diff = abs(numbers[left] - numbers[right])\n        if diff < threshold:\n            min_diff = min(min_diff, diff)\n            left += 1\n            right -= 1\n        elif numbers[left] < numbers[right]:\n            left += 1\n        else:\n            right -= 1\n    return min_diff if min_diff != float('inf') else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    def minOddDigitsProduct(num):\n        return int(''.join(str(num) for num in str(num) if int(num) % 2 != 0))\n\n    def minOddDigitsProductSubArray(nums):\n        n = len(nums)\n        min_product = float('inf')\n        for i in range(n):\n            product = 1\n            for j in range(i, n):\n                product *= minOddDigitsProduct(nums[j])\n                min_product = min(min_product, product)\n        return min_product\n\n    return minOddDigitsProductSubArray(nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) == 3:\n                return False\n        return True\n\n    return sorted(s for s in lst if is_happy(s))\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_factorial(n):\n        result = 1\n        for i in range(1, n+1):\n            result *= factorial(i)\n        return result\n\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)+1):\n            sum_factorial = sum(special_factorial(k) for k in range(i, j))\n            diff = abs(sum_factorial - special_factorial(numbers[i]))\n            if diff < min_diff:\n                min_diff = diff\n                result = (numbers[i], numbers[j-1])\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        return math.factorial(n) * brazilian_factorial(n-1) if n > 0 else 1\n\n    max_weight = brazilian_factorial(n)\n    if sum(w) <= max_weight and w == w[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return factorial(n) // (factorial(n-1) * factorial(n-2) * ... * factorial(1))\n\n    for n in numbers:\n        if brazilian_factorial(n) < threshold:\n            return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> str:\n        numerator, denominator = map(int, fraction.split('/'))\n        gcd = numerator if numerator > denominator else denominator\n        return f'{numerator//gcd}/{denominator//gcd}'\n\n    return [simplify(fraction) == n for fraction in fractions]\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def sum_of_two(lst, x, y):\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                if lst[i] + lst[j] == x and lst[i] + lst[j] == y:\n                    return \"SUM\"\n        return \"NO\"\n\n    def sum_of_three(lst, x, y, z):\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                for k in range(j + 1, len(lst)):\n                    if lst[i] + lst[j] + lst[k] == x and lst[i] + lst[j] + lst[k] == y and lst[i] + lst[j] + lst[k] == z:\n                        return \"SUM\"\n        return \"NO\"\n\n    if len(lst1) != len(lst2) or len(lst1) != len(lst3):\n        return \"INVALID_INPUT\"\n\n    result = \"\"\n    result += sum_of_two(lst1, x, y)\n    result += \" \" + sum_of_two(lst2, x, y)\n    result += \" \" + sum_of_two(lst3, x, y)\n    result += \" \" + sum_of_three(lst1, x, y, z)\n    result += \" \" + sum_of_three(lst2, x, y, z)\n    result += \" \" + sum_of_three(lst3, x, y, z)\n\n    return result\n\n"}
{"task_id": "EvoEval/75", "completion": "\n\n    def transform_dict(input_dict):\n        if not input_dict or not all(isinstance(k, str) and k.isupper() for k in input_dict.keys()):\n            return {}\n\n        output_dict = {}\n        for key, value in input_dict.items():\n            try:\n                num = float(value)\n                if num.is_integer():\n                    output_dict[key] = int(num)\n                else:\n                    output_dict[key] = round(num)\n            except ValueError:\n                continue\n\n        return output_dict\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    def sort_list(lst, ascending=True):\n        return sorted(lst, key=lambda x: (sum_digits(x), lst.index(x) if is_prime(sum_digits(x)) != ascending else -lst.index(x)), reverse=not ascending)\n\n    lst = lst.copy()\n    return sort_list(lst)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def is_signed(n):\n        return n < 0\n\n    def get_digits(n):\n        return [int(d) for d in str(abs(n))]\n\n    def get_odd_in_even_pos(arr):\n        return sum(a for i, a in enumerate(arr) if i % 2 == 0 and a % 2 != 0)\n\n    return get_odd_in_even_pos(arr)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    result = \"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].isupper():\n                if i % 2 == 0:\n                    result += s[i].swapcase()\n                else:\n                    result += s[i]\n            else:\n                if i % 2 == 0:\n                    result += s[i]\n                else:\n                    result += s[i].swapcase()\n        else:\n            if i % 2 == 0:\n                result += s[i]\n            else:\n                result += s[i]\n    for i in range(len(result)):\n        if result[i] in vowels:\n            count += 1\n    return result, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    def happy_case_string(s):\n        if not s or not s.isalpha():\n            return \"\"\n        s = list(s)\n        for i in range(len(s)):\n            if i % 3 == 0 and len(set(s[i:i+3])) == 3:\n                if i % 2 == 0:\n                    s[i:i+3] = s[i:i+3][::-1]\n                else:\n                    s[i:i+3] = [i.upper() if i.islower() else i.lower() for i in s[i:i+3]]\n            elif i % 2 == 0:\n                s[i] = s[i].upper() if s[i].islower() else s[i].lower()\n        return \"\".join(s)\n\n    print(happy_case_string(\"1234\")) # \"4321\"\n    print(happy_case_string(\"ab\")) # \"ba\"\n    print(happy_case_string(\"#a@C\")) # \"#A@c\"\n    print(happy_case_string(\"abcd\")) # \"ABCD\"\n    print(happy_case_string(\"aabb\")) # \"bbaa\"\n    print(happy_case_string(\"adb\")) # \"ADB\"\n    print(happy_case_string(\"*#@\")) # \"@#*\"\n\nhappy_case_string(\"1234\") = \"4321\" happy_case_string(\"ab\") = \"ba\" happy_case_string(\"#a@C\") = \"#A@c\" happy_string(\"abcd\") = \"ABCD\" happy_string(\"aabb\") = \"bbaa\" happy_case_string(\"adb\") = \"ADB\" happy_case_string(\"*#@\") = \"@#*\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join([s[i:i+3] for i in range(0, len(s), 3)])\n\n    def decode(s: str) -> str:\n        return ''.join([s[-i] for i in range(1, len(s)+1)])\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n    result = ''.join([ch for ch in decoded if ch not in c])\n    palindrome = is_palindrome(result)\n    return result, palindrome\n"}
{"task_id": "EvoEval/81", "completion": "\n    def fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n    sum_fibfib = sum(fibfib(i) for i in range(n))\n    mean_fibfib = sum_fibfib / n\n\n    deviations = [abs(fibfib(i) - mean_fibfib) for i in range(n)]\n    mad = sum(deviations) / n\n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n\n    def get_odd_digits(n: int) -> int:\n        return int(''.join(str(n)[(i+1)%2] for i in range(len(str(n)))))\n\n    def odd_fibfib(n: int) -> int:\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return odd_fibfib(n-1) + odd_fibfib(n-2) + odd_fibfib(n-3)\n\n    if is_even(n):\n        return 0\n    else:\n        return get_odd_digits(odd_fibfib(n))\n"}
{"task_id": "EvoEval/83", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"__\", \"_\")\n\n    return is_prime(len(text))\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        for j in range(len(string) - i + 1):\n            prefix = string[j:j+i]\n            if prefix not in histogram:\n                histogram[prefix] = {}\n            if string[j] not in histogram[prefix]:\n                histogram[prefix][string[j]] = 1\n            else:\n                histogram[prefix][string[j]] += 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n\n    def count_ones(n):\n        return bin(n).count('1')\n\n    lst.sort(key=count_ones)\n\n    if len(lst) == 1:\n        return None\n\n    return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = [item for sublist in operand_lists for item in sublist if item in set(operand_lists[0])]\n    if not common_operands:\n        return None\n    result = common_operands[0]\n    for operator, operand in zip(operators, common_operands[1:]):\n        if operator == '+':\n            result += operand\n        elif operator == '-':\n            result -= operand\n        elif operator == '*':\n            result *= operand\n        elif operator == '//':\n            result //= operand\n        elif operator == '**':\n            result **= operand\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    result = ''\n    for char in text:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    if not strings:\n        return None\n    result = []\n    for string in strings:\n        if hashlib.md5(string.encode()).hexdigest() == hash_substring:\n            result.append(string)\n    return result\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = {}\n    for key in dict:\n        if isinstance(dict[key], str):\n            if key.islower() or key.isupper():\n                count = 0\n                for char in key:\n                    if char in vowels:\n                        count += 1\n                result[key] = count\n            else:\n                return {}\n        else:\n            return {}\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(0, len(l), 2):\n        if is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common_elements = [i for i in a if i in l1]\n    common_elements.sort()\n    count = 0\n    for i in range(len(common_elements)):\n        for j in range(i + 1, len(common_elements)):\n            for k in range(j + 1, len(common_elements)):\n                if (common_elements[i] + common_elements[j] + common_elements[k]) % 3 == 0:\n                    count += 1\n    if count == 0:\n        return \"No numbers multiples of 3 in list common elements\"\n    else:\n        return common_elements, count\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    string = string.lower()\n    if len(string) % 2 != 0:\n        return \"\"\n    for i in range(1, len(string) - 1, 2):\n        if string[i] in vowels and string[i - 1] in consonants and string[i + 1] in consonants:\n            return string[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_sum_digits(arr):\n        count = 0\n        for num in arr:\n            if num < 0:\n                count += 1\n                num = abs(num)\n            sum_digits = sum(map(int, str(num)))\n            if sum_digits > 0:\n                count += 1\n        return count\n\n    def sort_array(arr):\n        arr.sort()\n        if count_sum_digits(arr) % 2 == 0:\n            arr.reverse()\n        return arr\n\n    return sort_array(arr)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    return sorted([s for s in strings if substring in s])\n"}
{"task_id": "EvoEval/96", "completion": "\n    if len(l1) != len(l2):\n        return False\n\n    s = set()\n\n    for i in range(len(l1)):\n        if -l1[i] in s:\n            return True\n        else:\n            s.add(l1[i])\n\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + i*i - i + 1)\n\n    triples = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    triples.append((fib[i], fib[j], fib[k]))\n\n    return len(triples), triples\n\n\nn = 5\nfib, triples = fib_max_triples(n)"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n\n    for key, value in dict.items():\n        if not key.islower() and not key.isupper():\n            return False\n        if not (value.count('(') == value.count(')') and value[0] == '(' and value[-1] == ')'):\n            return False\n    return True\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
