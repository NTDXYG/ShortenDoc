{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) < 3:\n                return False\n        return True\n\n    def to_float(s):\n        return float(s.replace(',', '.'))\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if a_happy and b_happy:\n        return max(a, b, key=to_float)\n    elif a_happy:\n        return a\n    elif b_happy:\n        return b\n    else:\n        return None\n"}
{"task_id": "EvoEval/1", "completion": "\n\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')\n        num = int(num)\n        decimal = float('0.' + value.split('.')[1])\n        if decimal >= 0.5:\n            num += 1\n        num = str(num)\n        string = string.swapcase()\n        return num + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')\n        num = int(num)\n        decimal = float('0.' + value.split('.')[1])\n        if decimal >= 0.5:\n            num += 1\n        num = str(num)\n        string = string.swapcase()\n        return num + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')\n        num = int(num)\n        decimal = float('0.' + value.split('.')[1])\n        if decimal >= 0.5:\n            num += 1\n        num = str(num)\n        string = string.swapcase()\n        return num + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')\n        num = int(num)\n        decimal = float('0.' + value.split('.')[1])\n        if decimal >= 0.5:\n            num += 1\n        num = str(num)\n        string = string.swapcase()\n        return num + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('."}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append((2 ** n) % p)\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n: int) -> int:\n        largest_prime = 0\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                largest_prime = i\n        return largest_prime\n\n    def digit_sum(n: int) -> int:\n        return sum(map(int, str(n)))\n\n    return max(digit_sum(largest_prime_divisor(n)) for n in lst if largest_prime_divisor(n))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            if round(numbers[0] + numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    total_stones = 0\n    level = n\n    while level > 0:\n        total_stones += level\n        level = level - 2 if level % 2 == 0 else level - 1\n    median = total_stones / n if n % 2 == 0 else (total_stones + n) / 2\n    return median\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    count = string.count(bracket)\n    if bracket == \"<\":\n        return (string.count(\"<\") == string.count(\">\"), count)\n    else:\n        return (string.count(\"<\") == string.count(\">\"), count)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8,\n    }\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n    }\n    planet1_position = planets.get(planet1.lower())\n    planet2_position = planets.get(planet2.lower())\n    if planet1_position is None or planet2_position is None:\n        return {}\n    if planet1_position > planet2_position:\n        planet1_position, planet2_position = planet2_position, planet1_position\n    return {\n        planet: roman_numerals[position]\n        for planet, position in planets.items()\n        if planet1_position < position < planet2_position\n    }\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    def grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif 3.7 <= gpa < 4.0:\n            return 'A'\n        elif 3.3 <= gpa < 3.7:\n            return 'A-'\n        elif 3.0 <= gpa < 3.3:\n            return 'B+'\n        elif 2.7 <= gpa < 3.0:\n            return 'B'\n        elif 2.3 <= gpa < 2.7:\n            return 'B-'\n        elif 2.0 <= gpa < 2.3:\n            return 'C+'\n        elif 1.7 <= gpa < 2.0:\n            return 'C'\n        elif 1.3 <= gpa < 1.7:\n            return 'C-'\n        elif 1.0 <= gpa < 1.3:\n            return 'D+'\n        elif 0.7 <= gpa < 1.0:\n            return 'D'\n        elif 0.0 <= gpa < 0.7:\n            return 'D-'\n        else:\n            return 'E'\n\n    return [(name[0].upper() + name[1:].lower(), grade(gpa)) for name, gpa in name_grade_list]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\n    planet1_index = planets.index(planet1) if planet1 in planets else -1\n    planet2_index = planets.index(planet2) if planet2 in planets else -1\n\n    if planet1_index == -1 or planet2_index == -1:\n        return 0\n\n    vowel_count = 0\n    for planet in planets[planet1_index+1:planet2_index]:\n        for char in planet:\n            if char in vowels or (char == 'y' and planet == planet):\n                vowel_count += 1\n\n    return vowel_count\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Define the grading scale\n    grading_scale = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n\n    # Define the consonants\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n\n    # Initialize the result list\n    result = []\n\n    # Loop through each student\n    for student in student_info:\n        # Calculate the number of consonants in the name\n        consonant_count = sum(1 for char in student['name'].lower() if char in consonants)\n\n        # Determine the grade based on the number of consonants\n        grade = student['GPA'] + (1 if consonant_count == n else 0)\n\n        # Determine the letter grade based on the grade\n        letter_grade = grading_scale[max(key for key in grading_scale if key <= grade)]\n\n        # Add the student's name and letter grade to the result list\n        result.append({'name': student['name'], 'grade': letter_grade})\n\n    return result\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    arr = [i for i in arr if sum_digits(i) > 0]\n    odd_arr = [i for i in arr if not is_even(i)]\n    even_lst1 = [i for i in lst1 if is_even(i)]\n\n    if len(odd_arr) > len(even_lst1):\n        return \"NO\"\n    else:\n        return \"YES\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n, m+1) if is_prime(x)]\n\n    if not primes:\n        return -1\n\n    avg = round(sum(primes) / len(primes))\n\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_triples = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance == 0:\n            zero_sum_triples += 1\n    return zero_sum_triples >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    music_string = music_string[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            for j in range(i + 1, len(music_string)):\n                if music_string[j] == \"o\":\n                    result.append(4)\n                elif music_string[j] == \"o|\":\n                    result.append(2)\n                elif music_string[j] == \".|\":\n                    result.append(1)\n                if music_string[j - 1] in vowels:\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_seq = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib_seq.append(fibfib_seq[i - 1] + fibfib_seq[i - 2] + fibfib_seq[i - 3])\n    freq = lst.count(fibfib_seq[n])\n    if freq == 0:\n        return -1\n    else:\n        return fibfib_seq[n]\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    smallest_deposit = None\n    largest_withdrawal = None\n    negative_balance_reached = False\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            negative_balance_reached = True\n        if operation > 0:\n            if smallest_deposit is None or operation < smallest_deposit:\n                smallest_deposit = operation\n        if operation < 0:\n            if largest_withdrawal is None or operation > largest_withdrawal:\n                largest_withdrawal = operation\n    return largest_withdrawal, smallest_deposit, negative_balance_reached\n"}
{"task_id": "EvoEval/20", "completion": "\n    def letter_grade(gpa):\n        if gpa == 4.0: return 'A+'\n        elif 3.7 <= gpa < 4.0: return 'A'\n        elif 3.3 <= gpa < 3.7: return 'A-'\n        elif 3.0 <= gpa < 3.3: return 'B+'\n        elif 2.7 <= gpa < 3.0: return 'B'\n        elif 2.3 <= gpa < 2.7: return 'B-'\n        elif 2.0 <= gpa < 2.3: return 'C+'\n        elif 1.7 <= gpa < 2.0: return 'C'\n        elif 1.3 <= gpa < 1.7: return 'C-'\n        elif 1.0 <= gpa < 1.3: return 'D+'\n        elif 0.7 <= gpa < 1.0: return 'D'\n        elif 0.0 <= gpa < 0.7: return 'D-'\n        else: return 'E'\n\n    return [(name[::-1].swapcase(), letter_grade(gpa)) for name, gpa in zip(s, grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return [str(x % base)] + base_change_prefixes(x // base, base)\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    def next_odd_or_even(n):\n        if n % 2 == 0:\n            return n + 1\n        else:\n            return n + 2\n\n    result = []\n    for i in range(n, 0, -1):\n        result.append(brazilian_factorial(i))\n        i = next_odd_or_even(i)\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    num_list = numbers.split()\n    if len(num_list) != len(set(num_list)):\n        return 'Not a happy string'\n    else:\n        num_list = [num_dict[i] for i in num_list]\n        num_list.sort()\n        num_list = [str(i) for i in num_list]\n        return ' '.join(num_list)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_triples = 0\n    product_triples = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum_triples += a[i]\n                    product_triples *= a[i]\n    return (sum_triples, product_triples if product_triples != 1 else 0)\n"}
{"task_id": "EvoEval/26", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    result = []\n    for i, value in enumerate(values):\n        nums = value.split()\n        nums = sorted(nums, key=lambda x: num_dict[x])\n        for num in nums:\n            if num_dict[num] % 2 == 0:\n                result.append((num, i))\n                break\n    if not result:\n        return ()\n    else:\n        result.sort(key=lambda x: (num_dict[x[0]], x[1]))\n        return result[0]\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = sum(is_prime(n) for n in lst1)\n    non_prime_count = len(lst1) - prime_count\n\n    if non_prime_count <= sum(n % 2 == 0 for n in lst2):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    grade_table = {4.0: \"A+\", 3.7: \"A+\", 3.3: \"A\", 3.0: \"A-\", 2.7: \"B+\", 2.3: \"B\", 2.0: \"B-\", 1.7: \"C+\", 1.3: \"C\", 1.0: \"C-\", 0.7: \"D+\", 0.0: \"D-\", 0.0: \"E\"}\n    result = []\n    for i in range(len(grades)):\n        if set(s0[i] for i in range(len(s0))).issubset(set(s1[i] for i in range(len(s1)))):\n            result.append(grade_table[grades[i]])\n    return result\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return y\n    else:\n        return largest_prime_factor(n) or x\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # split the music_string into a list of notes\n    notes = music_string.split()\n    # split the fraction into numerator and denominator\n    numerator, denominator = map(int, x.split('/'))\n    # calculate the number of beats per note\n    beats_per_note = denominator // numerator\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the notes\n    for note in notes:\n        # calculate the number of beats for the current note\n        beats = len(note) * beats_per_note\n        # if the number of beats is a whole number, add True to the result\n        if beats % denominator == 0:\n            result.append(True)\n        # otherwise, add False to the result\n        else:\n            result.append(False)\n    # return the result\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    prime_factor_list = prime_factors(n)\n    unique_prime_factors = set(prime_factor_list)\n    special_factorial = 1\n    for prime_factor in unique_prime_factors:\n        special_factorial *= factorial(prime_factor_list.count(prime_factor))\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def nested_parens(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    def circular_shift(num: int, shift: int) -> int:\n        num_str = str(num)\n        num_str = num_str[-shift:] + num_str[:-shift]\n        return int(num_str)\n\n    return [circular_shift(nested_parens(s), shift) for s in input]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    if not 3 <= len(s) <= 1000:\n        return False\n    if not all(roman_dict[c] for c in s):\n        return False\n    if any(s[i] == s[i+1] == s[i+2] for i in range(len(s)-2)):\n        return False\n    if any(roman_dict[s[i]] < roman_dict[s[i+1]] for i in range(len(s)-1)):\n        return sum(roman_dict[s[i]] for i in range(len(s)-1) if roman_dict[s[i]] < roman_dict[s[i+1]])\n    return sum(roman_dict[c] for c in s)\n"}
{"task_id": "EvoEval/34", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/35", "completion": "\n    def check_key(key):\n        if len(key) < 3:\n            return False\n        for i in range(len(key)-2):\n            if key[i] == key[i+1] or key[i] == key[i+2] or key[i+1] == key[i+2]:\n                return False\n        return True\n\n    def check_value(value):\n        if len(value) < 3:\n            return False\n        for i in range(len(value)-2):\n            if value[i] == value[i+1] or value[i] == value[i+2] or value[i+1] == value[i+2]:\n                return False\n        return True\n\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if not check_key(key) or not check_value(value):\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return pow(2, len(arr), p) < p\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    even_count, odd_count = 0, 0\n    for i in range(len(nums)):\n        sum_even, sum_odd = 0, 0\n        for j in range(i, len(nums)):\n            if nums[j] % 2 == 0:\n                sum_even += nums[j]\n            else:\n                sum_odd += nums[j]\n            if sum_even % 2 == 0 and sum_odd % 2 != 0 and sum_even + sum_odd < min_sum:\n                min_sum = sum_even + sum_odd\n                even_count, odd_count = sum_even, sum_odd\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        return num % 2 == 0\n\n    even_palindromes = [i for i in range(n+1) if is_palindrome(i) and is_even(i)]\n    odd_palindromes = [i for i in range(n+1) if is_palindrome(i) and not is_even(i)]\n\n    even_sum = any(i+j in l for i in even_palindromes for j in even_palindromes if i != j)\n    odd_sum = any(i+j in l for i in odd_palindromes for j in odd_palindromes if i != j)\n\n    return (even_sum, odd_sum)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-1-i]:\n            changes += 1\n    return changes*x + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def ends_odd(n):\n        return str(n)[0] in '13579' and str(n)[-1] in '13579'\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    nums = [n for n in nums if n > 10 and ends_odd(n)]\n    if not nums:\n        return None\n    return max(largest_prime_factor(n) for n in nums)\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    if shift > len(s):\n        shift = shift % len(s)\n    s = s[-shift:] + s[:-shift]\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n    from fractions import Fraction\n\n    # split the expression by \"<\" and \">\"\n    parts = re.split('<|>', expression)\n\n    # remove empty strings\n    parts = [part for part in parts if part]\n\n    # check if the number of \"<\" and \">\" is even\n    if len(parts) % 2 != 0:\n        return False\n\n    # check each part\n    for i in range(0, len(parts), 2):\n        # split the part by \",\"\n        fractions = parts[i].split(',')\n\n        # calculate the product of the fractions\n        product = Fraction(1, 1)\n        for fraction in fractions:\n            numerator, denominator = map(int, fraction.split('/'))\n            product *= Fraction(numerator, denominator)\n\n        # check if the product is a whole number\n        if product.denominator != 1:\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n    if n == 4:\n        return [0, 0, 2, 0]\n\n    fib4 = [0, 0, 2, 0] + [0] * (n - 4)\n    for i in range(4, n):\n        fib4[i] = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4]\n\n    if (fib4[0] + fib4[-1]) % 2 == 0:\n        fib4.sort(reverse=True)\n    else:\n        fib4.sort()\n\n    return fib4\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = []\n    for i in sorted(roman_numerals.keys(), reverse=True):\n        while number >= i:\n            result.append(roman_numerals[i])\n            number -= i\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive = [i for i in l if i > 0 and i % 2 == 0]\n    if even_positive:\n        return max(even_positive)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    digits = '13579'\n    n = sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)\n    return [f\"In string number of uppercase vowels in even indices is {n}, number of odd digits is {sum(1 for c in lst[i] if c in digits)}. \" for i in range(len(lst))]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if is_prime(len(s)) and s.startswith(prefix)]\n"}
{"task_id": "EvoEval/49", "completion": "\n    result = 2**n % p\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * sum(map(int, str(abs(num))[1:]))\n        else:\n            num = sum(map(int, str(num)))\n        if num > result:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if isinstance(a, str) and a.isalpha():\n        a = a.swapcase()\n    elif isinstance(a, str) and a.replace('.', '', 1).isdigit():\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str) and b.isalpha():\n        b = b.swapcase()\n    elif isinstance(b, str) and b.replace('.', '', 1).isdigit():\n        b = float(b.replace(',', '.'))\n\n    if a == b:\n        return None\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    even_nodes = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_nodes:\n        return ([], None)\n\n    smallest_even_node = min(even_nodes)\n    arr.pop(smallest_even_node[1])\n\n    if not arr:\n        return (list(smallest_even_node), None)\n\n    sum_of_magnitudes = sum(abs(v) for v in arr)\n    sign_product = eval('*'.join(str(1 if v > 0 else -1) for v in arr))\n\n    return (list(smallest_even_node), sum_of_magnitudes * sign_product)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {4.0: 'F', 3.7: 'F', 3.3: 'D', 3.0: 'D', 2.7: 'C', 2.3:: 'B', 2.0: 'A', 1.7: '9', 1.3: '8', 1.0: '7', 0.7: '6', 0.0: '5', 4.0: '5', 3.0: '5', 2.0: '5'}\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for gpa in grades:\n        if hex_grades[gpa] in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number <= 0 or number > 1000:\n        return None\n\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n\n    for key in roman_numerals:\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n\n    return hashlib.md5(result.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [i for i in factors if i % 2 != 0]\n    if not odd_factors:\n        return 0\n    else:\n        product = 1\n        for i in odd_factors:\n            product *= i\n        return product\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def has_odd_digits(n):\r\n        return all(int(d) % 2 for d in str(n))\r\n\r\n    changes = 0\r\n    for i in range(len(arr) // 2):\r\n        if not is_palindrome(arr[i:i+3]):\r\n            changes += 1\r\n        if not has_odd_digits(arr[i]):\r\n            changes += 1\r\n    if len(arr) % 2:\r\n        if not has_odd_digits(arr[len(arr)//2]):\r\n            changes += 1\r\n    return changes\r\n\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(n, b):\n        return int(n, b)\n    def odd_count(n):\n        return sum(1 for i in n if int(i) % 2 != 0)\n    res = []\n    for i, s in enumerate(lst):\n        base_10 = base_change(s, 10)\n        odd_num = odd_count(s)\n        base_b = base_change(str(base_10), base)\n        odd_num_b = odd_count(str(base_b))\n        res.append(f\"the number of odd elements {odd_num}n str{odd_num}ng {odd_num_b} of {odd_num}nput.\")\n    return res\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triples.append((a[i], a[j], a[k]))\n    if not triples:\n        return []\n    triples.sort()\n    smallest_triple = triples[0]\n    arr.append(smallest_triple[0])\n    smallest_even = [num for num in arr if num % 2 == 0]\n    if not smallest_even:\n        return []\n    smallest_even.sort()\n    return [smallest_even[0], arr.index(smallest_even[0])]\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n    # Create a dictionary to store the chains\n    chain_dict = {}\n\n    # Iterate over the chains\n    for chain in chains:\n        # If the chain starts with planet1 and ends with planet2\n        if chain[0] == planet1 and chain[-1] == planet2:\n            # Add the chain to the dictionary with its length as the key\n            chain_dict[len(chain)] = chain\n\n    # If no chains were found\n    if not chain_dict:\n        return None\n\n    # Return the longest chain\n    return chain_dict[max(chain_dict.keys())]\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    if len(words) == 0:\n        return \"\"\n    words = [word.strip() for word in words]\n    words.sort(key=str.lower)\n    result = words[0]\n    for word in words[1:]:\n        if word.lower() > result[-1].lower():\n            result += \"-\" + word\n        else:\n            result += \"_\" + word\n    return result\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n    def sort_planets(planet1: str, planet2: str, order: str) -> str:\n        planets = {\n            'zero': 'Mercury',\n            'one': 'Venus',\n            'two': 'Earth',\n            'three': 'Mars',\n            'four': 'Jupiter',\n            'five': 'Saturn',\n            'six': 'Uranus',\n            'seven': 'Neptune'\n        }\n\n        reverse_planets = {v: k for k, v in planets.items()}\n\n        if planet1 not in planets.values() or planet2 not in planets.values():\n            return 'Invalid'\n\n        if set(order.split()).difference(planets.keys()):\n            return 'Invalid'\n\n        if len(order.split()) != len(set(order.split())):\n            return 'Invalid'\n\n        start = min(reverse_planets[planet1], reverse_planets[planet2])\n        end = max(reverse_planets[planet1], reverse_planets[planet2])\n\n        return ' '.join([planets[i] for i in order.split() if start <= reverse_planets[planets[i]] <= end])\n\n    print(sort_planets(\"Jupiter\", \"Neptune\", \"zero one two three four five six seven\"))\n    print(sort_planets(\"Earth\", \"Mercury\", \"seven six five four three two one zero\"))\n    print(sort_planets(\"Mercury\", \"Uranus\", \"zero one two three four five six seven\"))\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Calculate 2^n modulo p\n    mod_result = pow(2, n, p)\n\n    # Check if mod_result is prime\n    if mod_result < 2:\n        return []\n\n    # Check if mod_result is prime\n    for i in range(2, int(mod_result ** 0.5) + 1):\n        if mod_result % i == 0:\n            return []\n\n    # If mod_result is prime, return all prime numbers less than mod_result\n    primes = [2]\n    for i in range(3, mod_result, 2):\n        if all(i % p > 0 for p in primes):\n            primes.append(i)\n\n    return primes\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    max_sum = -1\n    max_num = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k])\n    for i in range(x, y + 1):\n        if i % 2 == 0 and i % 3 == 0:\n            max_num = max(max_num, i)\n    if max_num != -1 and max_sum != -1:\n        return max_num + max_sum\n    elif max_num != -1:\n        return max_num\n    elif max_sum != -1:\n        return max_sum\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_digits_product(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_product_sum = 0\n    for i in range(len(nums)):\n        min_product = odd_digits_product(nums[i])\n        for j in range(i+1, len(nums)):\n            nums[j] = nums[j-1]\n            min_product = min(min_product, odd_digits_product(nums[j]))\n        min_product_sum += min_product\n    return min_product_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) % 3 != 0:\n            return False\n        for i in range(len(s)):\n            if i % 3 == 2:\n                if s[i] == s[i-2] or s[i] == s[i-1]:\n                    return False\n            else:\n                if i > 1 and s[i] == s[i-1] or s[i] == s[i-2]:\n                    return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_strings\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    numbers.sort()\n    min_diff = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(1, len(numbers)):\n        diff = abs(special_factorial(numbers[i - 1]) - special_factorial(numbers[i]))\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i - 1], numbers[i])\n\n    return min_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    max_weight = brazilian_factorial(n)\n    sum_weight = sum(w)\n\n    if sum_weight <= max_weight and w == w[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n\n    def close_special_factorial(n: int, threshold: int) -> bool:\n        for i in range(n, 0, -1):\n            if abs(special_factorial(i) - special_factorial(n) / special_factorial(i - 1)) < threshold:\n                return True\n        return False\n\n    return all(close_special_factorial(n, threshold) for n in numbers)\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator % denominator == 0\n\n    n_numerator, n_denominator = map(int, n.split('/'))\n\n    return [simplify(fraction) for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # check if all elements in lst1 are even\n    lst1_even = all(i % 2 == 0 for i in lst1)\n    # check if all elements in lst2 are odd\n    lst2_odd = all(i % 2 == 1 for i in lst2)\n    \n    # if lst1 is all even and lst2 is all odd, then possible to exchange\n    if lst1_even and lst2_odd:\n        exchange = \"YES\"\n    else:\n        exchange = \"NO\"\n    \n    # check if sum of x and y equals z\n    if x + y == z:\n        sum_check = \"SUM\"\n    else:\n        sum_check = \"NO_SUM\"\n    \n    return f\"{sum_check} {exchange}\"\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_digits(n):\r\n        return sum(map(int, str(n)))\r\n\r\n    modified = lst[:]\r\n    for i in range(len(modified)):\r\n        if is_prime(modified[i]):\r\n            modified[i] = sum_digits(modified[i])\r\n    if sum_digits(modified[0]) % 2 == sum_digits(modified[-1]) % 2:\r\n        modified.sort()\r\n    else:\r\n        modified.sort(reverse=True)\r\n    return modified\r\n\r\n\r"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 != 0:\n            sum += arr[i]\n        if arr[i] < 0:\n            str_num = str(arr[i])\n            for ch in str_num:\n                if ch.isdigit():\n                    if int(ch) % 2 != 0:\n                        sum += int(ch)\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s_rev = s[::-1]\n    s_res = \"\"\n    count = 0\n    for ch in s_rev:\n        if ch.isalpha():\n            if ch.islower():\n                s_res += ch.upper()\n            else:\n                s_res += ch.lower()\n            if ch in vowels and s_res.index(ch) % 2 == 0:\n                count += 1\n        else:\n            s_res += ch\n    return s_res, count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if not s:\n        return s\n\n    happy = True\n    result = []\n\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if i > 1 and s[i-2:i+1].isalpha() and s[i-2:i+1] in s[i+1:]:\n                happy = False\n                break\n            result.append(s[i].swapcase())\n        else:\n            result.append(s[i])\n\n    if happy:\n        return ''.join(result)\n    else:\n        return s[::-1]\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return s[-1] + s[:-1]\n\n    def decode(s: str) -> str:\n        return s[1:] + s[0]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = ''.join(encode(s[i:i+3]) for i in range(0, len(s), 3))\n    for ch in c:\n        encoded = encoded.replace(ch, '')\n\n    if is_palindrome(encoded):\n        return (encoded, True)\n    else:\n        decoded = ''.join(decode(encoded[i:i+3]) for i in range(0, len(encoded), 3))\n        return (decoded, False)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    mean = sum(fibfib) / n\n    mad = sum(abs(x - mean) for x in fibfib) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        if fib[i] % 2 == 0:\n            fib[i] = odd_product(fib[i])\n    return fib[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(key=lambda x: (bin(x).count('1'), x))\n    return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands &= set(operand_list)\n    common_operands = sorted(list(common_operands))\n    if not common_operands:\n        return None\n    result = common_operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += common_operands[i+1]\n        elif operators[i] == '-':\n            result -= common_operands[i+1]\n        elif operators[i] == '*':\n            result *= common_operands[i+1]\n        elif operators[i] == '//':\n            result //= common_operands[i+1]\n        elif operators[i] == '**':\n            result **= common_operands[i+1]\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in text:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                text = text.replace(i, '')\n            else:\n                stack.pop()\n        elif i in vowels:\n            if not stack:\n                text = text.replace(i, '')\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    s = s.replace(\",\", \" \")\n    words = s.split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if hash_substring in hashlib.md5(string.encode()).hexdigest():\n            result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        if not key.islower() and not key.isupper():\n            return {}\n        count = 0\n        for char in key:\n            if char in vowels:\n                count += 1\n        result[key] = count\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    for i in range(0, len(l), 2):\n        if is_prime(even_indices_values[i // 2]):\n            l[i] = x\n        else:\n            l[i] = y\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = sorted(list(set(a) & set(l1)))\n    if len(common) < 3:\n        return (common, 0)\n    else:\n        triples = [(i, j, k) for i in common for j in common for k in common if i < j < k and (i + j + k) % 3 == 0]\n        return (common, len(triples))\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    if not is_prime(len(string)):\n        return ''\n    for i in range(len(string) - 2, 0, -1):\n        if string[i] not in vowels and string[i-1] in vowels and string[i+1] in vowels:\n            return string[i]\n    return ''\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(map(int, str(n)))\n\n    def count_nums(arr):\n        return sum(sum_digits(i) > 0 for i in arr)\n\n    count = count_nums(arr)\n    if count % 2 == 0:\n        return sorted(arr, key=lambda x: (-sum_digits(x), x))\n    else:\n        return sorted(arr, key=lambda x: (sum_digits(x), x))\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(filtered_strings, key=lambda s: (len(s), s))\n"}
{"task_id": "EvoEval/96", "completion": "\n    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] + l2[j] == 0:\n            return True\n        elif l1[i] + l2[j] < 0:\n            i += 1\n        else:\n            j += 1\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n    triples = []\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    triples.append((fib[i], fib[j], fib[k]))\n    return len(triples), triples\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not key.islower() and not key.isupper():\n            return False\n        if not value.startswith('(') and not value.endswith(')'):\n            return False\n        if value.count('(') != value.count(')'):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
