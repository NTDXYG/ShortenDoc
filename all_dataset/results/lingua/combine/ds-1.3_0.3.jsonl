{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        if len(s) < 3:\n            return None\n        if len(set(s)) != len(s):\n            return None\n        return s\n\n    a = is_happy(a)\n    b = is_happy(b)\n\n    if a is None or b is None:\n        return None\n\n    if a == b:\n        return None\n\n    a = a.replace(',', '.')\n    b = b.replace(',', '.')\n\n    return a if float(a) > float(b) else b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def round_and_flip(value: str) -> str:\n        parts = value.split()\n        number = float(''.join(parts[0:1]))\n        if parts[1] in ['abc', 'ABC']:\n            return ' '.join(parts[1:3])\n        else:\n            return ' '.join(parts[1:3])\n\n    return number\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        if i != 0:\n            result.append(pow(2, n, p))\n        result.append(numbers[i])\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    def sort_parentheses(lst: List[str]) -> str:\n        s = ''.join(lst)\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return 'No'\n        return 'Yes' if not stack else 'No'\n\n    print(sort_parentheses(['(three)(', '(five)', '(one)']))\n    print(sort_parentheses(['(five)', '(three)', '(one)']))\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    def largest_prime_divisor(n: int) -> int:\n        for i in range(n - 1, 1, -1):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    return max(sum_digits(n) for n in lst if is_prime(n) and largest_prime_divisor(n) == n)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    if len(numbers) < 2:\n        return numbers\n    if numbers[0] < numbers[-1]:\n        return numbers\n    else:\n        if sum(numbers) % 2 == 0:\n            return numbers[::-1]\n        else:\n            return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    if n % 2 == 0:\n        return n\n    else:\n        return (n + 1) / 2\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    def square(x):\n        return x * x\n\n    def cube(x):\n        return x * x * x\n\n    def is_multiple_of_3_or_4(n: int):\n        return n % 3 == 0 or n % 4 == 0\n\n    def is_not_multiple_of_3_or_4(n: int):\n        return not is_multiple_of_3_or_4(n)\n\n    def sum_list(lst):\n        return sum(lst)\n\n    lst = [i for i in range(1, n + 1)]\n    lst = [square(i) if is_multiple_of_3_or_4(i) else i for i in lst]\n    lst = [cube(i) if is_not_multiple_of_3_or_4(i) else i for i in lst]\n    return sum_list(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not string:\n        return (True, 0, True, 0)\n\n    count_bracket = 0\n    is_bracket_open = False\n    is_bracket_close = False\n\n    for char in string:\n        if char == bracket:\n            count_bracket += 1\n            if not is_bracket_open:\n                is_bracket_open = True\n        elif char == '<' if bracket == '>' else '>':\n            if is_bracket_open and not is_bracket_close:\n                is_bracket_close = True\n            elif is_bracket_open and is_bracket_close:\n                is_bracket_open = False\n                is_bracket_close = False\n\n    return (is_bracket_open, count_bracket, is_bracket_close, count_bracket)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_distance = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    planets_in_order = sorted(\n        [planet for planet in planet_distance if planet_distance[planet] <= planet_distance[planet1]],\n        key=lambda planet: planet_distance[planet]\n    )\n\n    if planet2 in planets_in_order:\n        planets_in_order.remove(planet2)\n\n    return {planet: chr(65+i) for i, planet in enumerate(planets_in_order)}\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    letter_grade_table = {'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 2.7, 'B': 2.3, 'B-': 2.0, 'C+': 1.7, 'C': 1.3, 'C-': 1.0, 'D+': 0.7, 'D': 0.0, 'D-': 0.0, 'E': 0.0}\n    result = []\n    for name, gpa in name_grade_list:\n        if gpa < 0 or gpa > 4:\n            result.append((name.capitalize(), 'E'))\n        else:\n            for grade, mark in letter_grade_table.items():\n                if gpa >= mark:\n                    result.append((name.capitalize(), grade))\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() not in 'aeiou')\n\n    def get_grade(gpa):\n        if gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'B'\n        elif gpa > 2.3:\n            return 'C'\n        elif gpa > 1.7:\n            return 'D'\n        else:\n            return 'E'\n\n    def get_final_grade(name, gpa):\n        if count_consonants(name) <= n:\n            return {'name': name, 'grade': get_grade(gpa)}\n        else:\n            return {'name': name, 'grade': 'N/A'}\n\n    return [get_final_grade(student['name'], student['GPA']) for student in student_info]\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    def first_negative_digit(n):\n        return next((digit for digit in str(n) if digit == '-'), None)\n\n    def filter_arr(arr, lst1):\n        return [num for num in arr if sum_digits(num) > 0 or (first_negative_digit(num) and sum_digits(int(first_negative_digit(num))) > 0)]\n\n    filtered_arr = filter_arr(arr, lst1)\n\n    if len(filtered_arr) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m + 1) if is_prime(i)]\n    if not primes:\n        return -1\n    return f\"0b{''.join(format(i, 'b') for i in primes)}\"\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = 'aeiou'\n    notes = {'a': 'o', 'e': 'o|', 'i': '.|', 'o': 'o|', 'u': '.|', ' ': ' '}\n    result = []\n    for i, c in enumerate(word):\n        if c in vowels:\n            if i < len(word) - 1 and word[i + 1] in vowels:\n                result.append(notes[c])\n            else:\n                result.append(notes[c][:-1])\n        else:\n            result.append(notes[c])\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_lst = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_lst.append(fibfib_lst[i-1] + fibfib_lst[i-2] + fibfib_lst[i-3])\n\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n\n    for key, value in freq_dict.items():\n        if key in fibfib_lst:\n            n -= value\n            if n <= 0:\n                return key\n\n    return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    min_sub_array = None\n\n    for i in range(len(nums)):\n        for j in range(i + 2, len(nums)):\n            sub_array = nums[i:j+1]\n            sub_array_sum = sum(sub_array)\n            if sub_array_sum < min_sum:\n                min_sum = sub_array_sum\n                min_sub_array = sub_array\n\n    return min_sub_array[0] if min_sub_array else 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    largest_withdrawal = None\n    smallest_deposit = None\n    balance = 0\n    below_zero = False\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            below_zero = True\n        if largest_withdrawal is None or op > largest_withdrawal:\n            largest_withdrawal = op\n        if smallest_deposit is None or op < smallest_deposit:\n            smallest_deposit = op\n\n    return largest_withdrawal, smallest_deposit, below_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(s):\n        return s.lower() if s.isupper() else s.upper()\n\n    def assign_grade(gpa):\n        if gpa > 3.7:\n            return 'A+'\n        elif gpa > 3.3:\n            return 'A'\n        elif gpa > 2.7:\n            return 'B+'\n        elif gpa > 2.3:\n            return 'B'\n        elif gpa > 1.7:\n            return 'C+'\n        elif gpa > 1.3:\n            return 'C'\n        elif gpa > 0.7:\n            return 'D+'\n        elif gpa > 0.0:\n            return 'D'\n        else:\n            return 'E'\n\n    return [(reverse_case(s), assign_grade(g)) for s, g in zip(s.split(), grades)]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return base_change_prefixes(x // base, base) + [str(x % base)]\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        result.append(brazilian_factorial(i))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    def is_happy(s: str) -> bool:\n        return len(set(s)) == 1\n\n    def remove_spaces(s: str) -> str:\n        return ''.join(s.split())\n\n    def sort_string(s: str) -> str:\n        return ' '.join(sorted(s.split()))\n\n    s = remove_spaces(numbers)\n    if is_happy(s):\n        return sort_string(s)\n    else:\n        return 'Not happy string'\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triples = [(a[i], a[j], a[k]) for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0]\n    if not triples:\n        return (0, 1)\n    else:\n        return (sum(triples[0]), reduce(lambda x, y: x * y, triples[0]))\n"}
{"task_id": "EvoEval/26", "completion": "\n    # sort the list\n    values.sort()\n\n    # initialize variables\n    even_values = []\n    smallest_even_value = None\n    smallest_index = None\n\n    # iterate over the sorted list\n    for i, value in enumerate(values):\n        # split the value into numerals\n        nums = value.split()\n\n        # iterate over the numerals\n        for num in nums:\n            # check if the numeral is even\n            if int(num) % 2 == 0:\n                # if it is, add it to the even_values list\n                even_values.append(num)\n\n                # if it's the first even numeral we've found, or it's smaller than the current smallest_even_value, update the smallest_even_value and smallest_index\n                if smallest_even_value is None or int(num) < int(smallest_even_value):\n                    smallest_even_value = num\n                    smallest_index = i\n\n    # if no even values were found, return an empty tuple\n    if not even_values:\n        return ()\n\n    # return the smallest even numeral and its index\n    return even_values[0], smallest_index\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    lst1_prime = [i for i in lst1 if is_prime(i)]\n    lst2_prime = [i for i in lst2 if is_prime(i)]\n\n    if len(lst1_prime) > len(lst2_prime):\n        return x\n    elif len(lst1_prime) < len(lst2_prime):\n        return y\n    else:\n        return x\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    def same_chars(s0, s1):\n        return sorted(s0) == sorted(s1)\n\n    def grade(gpa):\n        if gpa >= 3.7:\n            return 'A'\n        elif gpa >= 3.3:\n            return 'B'\n        elif gpa >= 3.0:\n            return 'C'\n        elif gpa >= 2.7:\n            return 'D'\n        elif gpa >= 2.0:\n            return 'E'\n        else:\n            return 'F'\n\n    def pass_condition(gpa):\n        return gpa >= 2.0\n\n    def convert_grade(gpa, s0, s1):\n        if same_chars(s0, s1) and pass_condition(gpa):\n            return grade(gpa)\n        else:\n            return ''\n\n    return [convert_grade(gpa, s0, s1) for gpa in grades]\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return largest_prime_factor(n)\n    else:\n        return x if n > 1 else y\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if '/' in note:\n            numerator, denominator = map(int, note.split('/'))\n            result.append(x * numerator == denominator)\n        else:\n            result.append(x * int(note) == 1)\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def prime_factorial(n: int) -> int:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return product_factorial(factors)\n\n    def product_factorial(factors: List[int]) -> int:\n        product = 1\n        for factor in factors:\n            product *= factorial(factor)\n        return product\n\n    return prime_factorial(n)\n"}
{"task_id": "EvoEval/32", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    def shift_string(s: str, shift: int) -> str:\n        return s[-shift:] + s[:-shift]\n\n    def circular_shift(s: str, shift: int) -> str:\n        return shift_string(s, len(s) - shift) + shift_string(s, shift)\n\n    def circular_shift_nested(s: str, shift: int) -> int:\n        max_depth = 0\n        for group in s.split():\n            group_shifted = ''.join(circular_shift(p, shift) for p in group.split())\n            group_depth = get_max_depth(group_shifted)\n            max_depth = max(max_depth, group_depth)\n        return max_depth\n\n    return [circular_shift_nested(s, shift) for s in input]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_numerals = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    last_numeral = None\n    for numeral in s:\n        if last_numeral and roman_numerals[numeral] > last_numeral:\n            return False\n        last_numeral = roman_numerals[numeral]\n    if len(s) < 3:\n        return False\n    return sum(roman_numerals[numeral] for numeral in s)\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    def md5_hash(s: str) -> str:\n        import hashlib\n        return hashlib.md5(s.encode()).hexdigest()\n\n    def deepest_level(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    def group_to_hash(s: str) -> str:\n        groups = s.split(' ')\n        hashes = []\n        for group in groups:\n            if '(' in group and ')' in group:\n                hashes.append(md5_hash(group))\n            else:\n                hashes.append(None)\n        return hashes\n\n    if not paren_string:\n        return []\n\n    groups = paren_string.split(' ')\n    hashes = []\n    for group in groups:\n        if '(' in group and ')' in group:\n            hashes.append(md5_hash(group_to_hash(group)))\n        else:\n            hashes.append(None)\n    return hashes\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n\n    for key in dict:\n        if len(key) < 3:\n            return False\n        if len(set(key)) != len(key):\n            return False\n        if key.lower() != key and key.upper() != key:\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    if not arr:\n        return True\n    count = 0\n    for i in range(len(arr)):\n        if i > 0 and arr[i] < arr[i - 1]:\n            count += 1\n    return count <= (2 ** (len(arr) - 1) % p)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    min_sub_array = (0, 0)\n    even_count = 0\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        for j in range(i, len(nums)):\n            if nums[j] % 2 == 0:\n                even_count -= 1\n            else:\n                odd_count -= 1\n            if even_count == 0 and odd_count == 0 and j - i + 1 < min_sum:\n                min_sum = j - i + 1\n                min_sub_array = (i, j)\n    return min_sub_array, min_sum\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_even_palindrome(n):\n        return is_palindrome(n) and n % 2 == 0\n\n    def is_odd_palindrome(n):\n        return is_palindrome(n) and n % 2 != 0\n\n    even_palindromes = [n for n in l if is_even_palindrome(n)]\n    odd_palindromes = [n for n in l if is_odd_palindrome(n)]\n\n    return (len(even_palindromes) > 1, len(odd_palindromes) > 1)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def smallest_change(arr, x, y):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes\r\n\r\n    def smallest_change_sum(arr, x, y):\r\n        changes = smallest_change(arr, x, y)\r\n        return changes * x + y\r\n\r\n    return smallest_change_sum(arr, x, y)\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = []\n    for num in nums:\n        str_num = str(abs(num))\n        if str_num[-1] in ['1', '3', '5', '7', '9'] and is_prime(int(str_num[-2])):\n            primes.append(num)\n\n    if not primes:\n        return None\n\n    return max(primes)\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = s.upper()\n    shift %= len(s)\n    s = s[shift:] + s[:shift]\n    return sum(1 for i in range(len(s)) if s[i] in vowels and i % 2 == 0)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n\n    def is_valid_fraction(fraction: str) -> bool:\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator and denominator\n\n    def is_valid_expression(expression: str) -> bool:\n        open_brackets = expression.count('<')\n        close_brackets = expression.count('>')\n        if open_brackets != close_brackets:\n            return False\n        fractions = re.findall(r'<\\d+/\\d+>', expression)\n        for fraction in fractions:\n            if not is_valid_fraction(fraction):\n                return False\n        return True\n\n    return is_valid_expression(expression)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    def fib4(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 0\n        else:\n            return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n    sequence = [fib4(n) for _ in range(n)]\n    sequence.sort(reverse=(n%2==0))\n    return sequence\n"}
{"task_id": "EvoEval/44", "completion": "\n    def one(num: int) -> str:\n        return 'i' if num == 1 else ''\n\n    def four(num: int) -> str:\n        return 'iv' if num == 4 else ''\n\n    def five(num: int) -> str:\n        return 'v' if num == 5 else ''\n\n    def nine(num: int) -> str:\n        return 'ix' if num == 9 else ''\n\n    def ten(num: int) -> str:\n        return 'x' if num == 10 else ''\n\n    def fourteen(num: int) -> str:\n        return 'xl' if num == 14 else ''\n\n    def nineteen(num: int) -> str:\n        return 'xix' if num == 19 else ''\n\n    def fifty(num: int) -> str:\n        return 'l' if num == 50 else ''\n\n    def hundred(num: int) -> str:\n        return 'c' if num == 100 else ''\n\n    def thousand(num: int) -> str:\n        return 'm' if num == 1000 else ''\n\n    def get_roman(num: int, roman: str) -> str:\n        if num == 900:\n            return 'cm' + roman\n        if num == 400:\n            return 'cd' + roman\n        if num == 90:\n            return 'xc' + roman\n        if num == 40:\n            return 'xl' + roman\n        if num == 9:\n            return 'ix' + roman\n        if num == 4:\n            return 'iv' + roman\n        if num < 4:\n            return roman * num\n        return ''\n\n    thousands = thousand(number // 1000)\n    number %= 1000\n    hundreds = hundred(number // 100)\n    number %= 100\n    tens = ten(number // 10)\n    number %= 10\n    ones = one(number)\n\n    result = ''\n    result += get_roman(thousands, 'm')\n    result += get_roman(hundreds"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_nums = [num for num in l if num % 2 == 0]\n    if not even_nums:\n        return -1\n    else:\n        return max(even_nums)\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    def count_vowels(s):\n        return sum(1 for c in s if c in vowels)\n\n    def count_odds(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"In string number of uppercase vowels in even indices is {count_vowels(s[::2])} number of odd digits is {count_odds(s[::2])}.\" for s in lst]\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    def count_digits(n: int, p: int) -> int:\n        return sum(1 for i in str(n) if int(i) > p)\n\n    return sum(count_digits(i, p) for i in arr)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i % 2 == 0:\n                for j in range(i - 1, -1, -1):\n                    if word[j] in vowels:\n                        return word[i]\n            else:\n                for j in range(i + 1, len(word)):\n                    if word[j] in vowels:\n                        return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    def compare(a, b):\n        if isinstance(a, str) and isinstance(b, str):\n            if a.isalpha() or b.isalpha():\n                return a.swapcase() if a.isalpha() else b.swapcase()\n            else:\n                return a if a > b else b\n        elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return b if a > b else a\n        else:\n            return None\n\n    def modify(a, b):\n        if isinstance(a, str) and isinstance(b, str):\n            if a.isalpha() or b.isalpha():\n                return a.swapcase() if a.isalpha() else b.swapcase()\n            else:\n                return a if a > b else b\n        elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            return b if a > b else a\n        else:\n            return None\n\n    a = modify(a, b)\n    b = modify(b, a)\n\n    return compare(a, b)\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def pluck_and_prod(arr):\n        smallest_even = None\n        smallest_index = None\n        sum_remaining = 0\n        for i, num in enumerate(arr):\n            if num % 2 == 0:\n                if smallest_even is None or num < smallest_even:\n                    smallest_even = num\n                    smallest_index = i\n            sum_remaining += abs(num)\n        if smallest_even is None:\n            return ([], None)\n        else:\n            product_sign = 1 if smallest_even > 0 else -1\n            return ([smallest_even, smallest_index], sum_remaining * product_sign)\n\n    print(pluck_and_prod([4,2,3]))\n    print(pluck_and_prod([1,2,3]))\n    print(pluck_and_prod([]))\n    print(pluck_and_prod([-5, -2, 3, 0, -4]))\n"}
{"task_id": "EvoEval/53", "completion": "\n    grade_map = {'4.0': 'A', '3.7': 'B', '3.3': 'C', '3.0': 'D', '2.7': 'E', '2.3': 'F', '2.0': 'G', '1.7': 'H', '1.3': 'I', '1.0': 'J', '0.7': 'K', '0.0': 'L', '0.0': 'M', '3': 'N', '2': 'O', '1': 'P', '0': 'Q'}\n    prime_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for grade in grades:\n        if grade in grade_map:\n            if grade_map[grade] in prime_grades:\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        sqrt_n = math.isqrt(n)\n        for i in range(3, sqrt_n + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if all(is_prime(num) for num in nums[i:j+1]):\n                max_sum = max(max_sum, sum(nums[i:j+1]))\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\r\n    roman_numerals_reverse = {v: k for k, v in roman_numerals.items()}\r\n    numeral = ''\r\n    i = 1000\r\n    while number > 0:\r\n        while number >= i:\r\n            number -= i\r\n            numeral += roman_numerals[i]\r\n        i //= 10\r\n    return numeral.lower()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [factor for factor in factors if factor % 2 != 0]\n    return len(odd_factors) if odd_factors else 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def digit_array(arr):\n        return [int(i) for i in str(arr)]\n\n    def palindromic_and_odd_digit_array(arr):\n        digit_arr = digit_array(arr)\n        odd_digit_arr = [i for i in digit_arr if i % 2 != 0]\n        if len(odd_digit_arr) == 0:\n            return 0\n        else:\n            min_changes = len(digit_arr) - len(odd_digit_arr)\n            return min_changes\n\n    print(palindromic_and_odd_digit_array(12354296))\n    print(palindromic_and_odd_digit_array(12321))\n    print(palindromic_and_odd_digit_array(123321))\n\n\npalindromic_and_odd_digit_array([1, 2, 3, 5, 4, 2, 9, 6])\npalindromic_and_odd_digit_array([1, 2, 3, 2, 1])\npalindromic_and_odd_digit_array([1, 2, 3, 3, 1])\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n"}
{"task_id": "EvoEval/58", "completion": "\n\n    def max_freq_and_sum_check(lst, a, b):\n        freq = {}\n        for i in lst:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n        max_freq = -1\n        for key, value in freq.items():\n            if key >= a and key <= b and value >= max_freq:\n                max_freq = value\n        if a in freq.values() or b in freq.values():\n            return (max_freq, True)\n        else:\n            return (max_freq, False)\n\n    print(max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_freq_and_sum_check([1, 2, 2, 2, 3, 3, 4], 5, 2))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5))\n\n\nmax_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0)\nmax_freq_and_sum_check([1, 2, 2, 2, 3, 3, 4], 5, 2)\nmax_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3)\nmax_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5)\n\n\nThe function max_freq_and_sum_check(lst, a, b) takes a list of positive integers lst, two additional integers a and b. The function first creates a dictionary to count the frequency of each integer in the list. Then it iterates over the dictionary to find"}
{"task_id": "EvoEval/59", "completion": "\n    def count_odd_digits(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [count_odd_digits(str(i)) for i in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    def smallest_even_triple(arr, n):\n        even_values = [x for x in arr if x % 2 == 0]\n        if even_values:\n            smallest_even_value = min(even_values)\n            smallest_even_value_index = arr.index(smallest_even_value)\n            arr.append(smallest_even_value)\n        else:\n            return []\n        return [smallest_even_value_index, arr.index(smallest_even_value)]\n\n    arr = [x*x - x + 1 for x in range(1, n+1)]\n    return smallest_even_triple(arr, n)\n"}
{"task_id": "EvoEval/61", "completion": "\n    def longest_planet_chain(planet1: str, planet2: str, *chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        planet_map = {planet: i for i, planet in enumerate([\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"])}\n        if planet1 not in planet_map or planet2 not in planet_map:\n            return None\n        longest_chain = None\n        for chain in chains:\n            if chain[0] == planet1 and chain[-1] == planet2:\n                if longest_chain is None or len(chain) > len(longest_chain):\n                    longest_chain = chain\n        if longest_chain is None:\n            return None\n        return longest_chain[0], longest_chain[-1]\n\n    print(longest_planet_chain(\"Earth\", \"Mars\", \"Venus\", \"Mars\", (\"Earth\", \"Mars\", \"Jupiter\")))\n    print(longest_planet_chain(\"Earth\", \"Pluto\", (\"Earth\", \"Mars\", \"Jupiter\")))\n    print(longest_planet_chain(\"Earth\", \"Mars\", \"Venus\", \"Mars\", (\"Earth\", \"Mars\", \"Jupiter\", \"Pluto\")))\n    print(longest_planet_chain(\"Earth\", \"Saturn\", (\"Earth\", \"Mars\", \"Jupiter\")))\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words = [word.lower() for word in words]\n    words = sorted(words)\n    words = [word.replace(\"-\", \"_\") for word in words]\n    words = [word.replace(\" \", \"-\") for word in words]\n    words = [word.replace(\"--\", \"-\") for word in words]\n    words = [word.replace(\"--\", \"_\") for word in words]\n    words = [word.replace(\"_\", \" \") for word in words]\n    words = [word.replace(\"-\", \"\") for word in words]\n    words = [word.replace(\" \", \"\") for word in words]\n    return \"-\".join(words)\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def sort_planets(planet1: str, planet2: str, order: str) -> str:\n        planets = {\n            \"zero\": 0,\n            \"one\": 1,\n            \"two\": 2,\n            \"three\": 3,\n            \"four\": 4,\n            \"five\": 5,\n            \"six\": 6,\n            \"seven\": 7,\n            \"Earth\": 1,\n            \"Mercury\": 2,\n            \"Venus\": 3,\n            \"Mars\": 4,\n            \"Jupiter\": 5,\n            \"Saturn\": 6,\n            \"Uranus\": 7,\n            \"Neptune\": 8\n        }\n        try:\n            order_list = list(map(int, order.split()))\n            if set(order_list) != set(range(8)):\n                return \"Invalid\"\n            if planet1 not in planets or planet2 not in planets:\n                return \"Invalid\"\n            if planets[planet1] > planets[planet2]:\n                planet1, planet2 = planet2, planet1\n            return \" \".join(str(planets[p]) for p in sorted(planets, key=lambda p: planets[p], reverse=planet1 == p))\n        except ValueError:\n            return \"Invalid\"\n\n    print(sort_planets(\"Jupiter\", \"Neptune\", \"zero one two three four five six seven\"))\n    print(sort_planets(\"Earth\", \"Mercury\", \"seven six five four three two one zero\"))\n    print(sort_planets(\"Mercury\", \"Uranus\", \"zero one two three six seven\"))\n    print(sort_planets(\"Earth\", \"Earth\", \"zero one\"))\n    print(sort_planets(\"Earth\", \"Earth\", \"zero one two three six seven\"))\n    print(sort_planets(\"Earth\", \"Earth\", \"zero one two three six seven eight\"))\n\n\nThe function `sort_planets` takes three arguments: `planet1`, `planet2`, and `order`. It first checks if the order string is a valid sequence of numbers"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def power_mod(base, exp, mod):\n        result = 1\n        while exp > 0:\n            if exp % 2 == 1:\n                result = (result * base) % mod\n            exp = exp >> 1\n            base = (base * base) % mod\n        return result\n\n    primes = [i for i in range(2, p) if is_prime(i)]\n    result = [primes[i] for i in range(len(primes)) if power_mod(2, i, p) == primes[i]]\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (2**n) % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_multiple_of_three(n):\n        return n % 3 == 0\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_in_range(n, y):\n        return n >= y\n\n    def find_largest_even_in_range(y):\n        for i in range(y, 0, -1):\n            if is_even(i) and is_in_range(i, y):\n                return i\n        return -1\n\n    def find_largest_triple(a, y):\n        a.sort()\n        for i in range(0, len(a)):\n            for j in range(i + 1, len(a)):\n                for k in range(j + 1, len(a)):\n                    if is_multiple_of_three(a[i] + a[j] + a[k]) and is_in_range(a[i] + a[j] + a[k], y):\n                        return a[i] + a[j] + a[k]\n        return -1\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    y_range_sum = find_largest_even_in_range(y)\n    if y_range_sum != -1:\n        a.append(y_range_sum)\n    return find_largest_triple(a, y)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    left, right = 0, len(numbers) - 1\n    min_diff = float('inf')\n    while left < right:\n        diff = abs(numbers[left] - numbers[right])\n        if diff < min_diff:\n            min_diff = diff\n        if numbers[left] < numbers[right]:\n            left += 1\n        else:\n            right -= 1\n    return min_diff if min_diff <= threshold else 0\n"}
{"task_id": "EvoEval/68", "completion": "\n    def product(num):\n        if num % 2 == 0:\n            return 0\n        else:\n            return num\n\n    def minOddDigitsProduct(nums):\n        return min(product(x) for x in nums)\n\n    return minOddDigitsProduct(nums)\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n        return True\n\n    return sorted(s for s in lst if is_happy(s))\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_factorial(n):\n        res = 1\n        for i in range(1, n+1):\n            res *= factorial(i)\n        return res\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if special_factorial(numbers[i]) - special_factorial(numbers[j]) < min_diff:\n                min_diff = special_factorial(numbers[i]) - special_factorial(numbers[j])\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n-1)\n\n    total_weight = sum(w)\n    max_weight = brazilian_factorial(n)\n\n    if total_weight <= max_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    for n in numbers:\n        if factorial(n) < factorial(n-1) + threshold:\n            return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    def simplify(fraction: str) -> str:\n        numerator, denominator = map(int, fraction.split('/'))\n        gcd = numerator if numerator > denominator else denominator\n        return f'{numerator // gcd}/{denominator // gcd}'\n\n    return [simplify(fraction) == n for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def sum_to_x(lst, x):\n        return sum(lst) == x\n\n    def sum_to_y_z(lst1, lst2, y, z):\n        return sum(lst1) + sum(lst2) == y + z\n\n    def exchange_possible(lst1, lst2, x, y, z):\n        return sum_to_x(lst1, x) and sum_to_y_z(lst1, lst2, y, z) and all(is_even(n) for n in lst1)\n\n    answer = \"NO\" if not exchange_possible(lst1, lst2, x, y, z) else \"YES\"\n    return f\"{answer} {answer}\"\n\n"}
{"task_id": "EvoEval/75", "completion": "\n\n    def transform_dict(input_dict):\n        if not input_dict:\n            return {}\n        for key in input_dict:\n            if not key.isupper():\n                return {}\n        new_dict = {}\n        for key, value in input_dict.items():\n            try:\n                new_dict[key] = round(float(value))\n            except ValueError:\n                return {}\n        return new_dict\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(map(int, str(n)))\n\n    def sort_list(lst):\n        lst.sort()\n        return lst\n\n    def replace_primes_with_sum(lst):\n        for i in range(len(lst)):\n            if is_prime(lst[i]):\n                lst[i] = sum_digits(lst[i])\n        return lst\n\n    lst = replace_primes_with_sum(lst)\n    if lst[0] % 2 == 0:\n        lst = sort_list(lst)\n    else:\n        lst = sort_list(lst)[::-1]\n    return lst\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def sum_odd_elements_even_positions(arr):\n        return sum(x for i, x in enumerate(arr) if i % 2 == 0 and x % 2 != 0)\n\n    def sum_digits_greater_than_zero(arr):\n        return sum(int(x) for x in str(arr) if int(x) > 0)\n\n    if not arr:\n        return 0\n\n    first_digit = str(arr[0])\n    if first_digit in '-+':\n        arr = arr[1:]\n\n    if not arr:\n        return 0\n\n    return sum_odd_elements_even_positions(arr) + sum_digits_greater_than_zero(arr)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = s[::-1]\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if i % 2 == 0:\n            s = s[:i] + s[i].upper() + s[i+1:]\n    return s, count\n"}
{"task_id": "EvoEval/79", "completion": "\n    def reverse_case(s):\n        return s.swapcase()\n\n    def check_string(s):\n        for i in range(0, len(s)-2, 3):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    if not check_string(s):\n        return s[::-1]\n    else:\n        return ''.join(reverse_case(i) for i in s)\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return ''.join(s[i:i+3] for i in range(0, len(s), 3))\n\n    def decode(s: str) -> str:\n        return ''.join(s[i+3-len(s)%3:i+3] for i in range(0, len(s), 3))\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = encode(s)\n    decoded = decode(encoded)\n    palindrome = is_palindrome(decoded)\n\n    return (decoded, palindrome)\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n\n    mean_absolute_deviation = sum([abs(fibfib_sequence[i] - (i+1)) for i in range(n)]) / n\n\n    return mean_absolute_deviation\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_even(n: int) -> bool:\n        return n % 2 == 0\n\n    def product_of_odds(n: int) -> int:\n        product = 1\n        while n > 0:\n            if is_even(n):\n                product *= 0\n            else:\n                product *= n\n            n -= 1\n        return product\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return odd_fibfib(n-1) + odd_fibfib(n-2) + odd_fibfib(n-3)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"  \", \"_\")\n\n    return is_prime(len(text))\n"}
{"task_id": "EvoEval/84", "completion": "\n    histogram = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        if prefix not in histogram:\n            histogram[prefix] = {string[i - 1]: 1}\n        else:\n            if string[i - 1] in histogram[prefix]:\n                histogram[prefix][string[i - 1]] += 1\n            else:\n                histogram[prefix][string[i - 1]] = 1\n    return histogram\n"}
{"task_id": "EvoEval/85", "completion": "\n    if not lst:\n        return None\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i] < lst[i + 1]:\n            return lst[i + 1]\n    return None\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = [i for i in operand_lists[0] if all(i in lst for lst in operand_lists[1:])]\n    if common_operands:\n        result = common_operands[0]\n        for operator in operators:\n            if operator == '+':\n                result += common_operands[0]\n            elif operator == '-':\n                result -= common_operands[0]\n            elif operator == '*':\n                result *= common_operands[0]\n            elif operator == '//':\n                result //= common_operands[0]\n            elif operator == '**':\n                result **= common_operands[0]\n        return result\n    return None\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def remove_unbalanced(text):\n        stack = []\n        result = ''\n        for char in text:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                result += char\n        return result\n\n    def match(text):\n        stack = []\n        result = ''\n        for char in text:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if stack:\n                    stack.pop()\n                result += char\n        return result\n\n    if match(text) == remove_unbalanced(text):\n        return text\n    else:\n        return match(text) + '_' + remove_unbalanced(text)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    def md5_hash(s: str) -> str:\n        return hashlib.md5(s.encode()).hexdigest()\n\n    return [s for s in strings if md5_hash(s) == md5_hash(hash_substring)]\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    vowels_in_keys = {}\n    for key in dict:\n        if isinstance(key, str):\n            key = key.lower()\n            if all(char in key for char in vowels):\n                vowels_in_keys[key] = sum(1 for char in key if char in vowels)\n    return vowels_in_keys\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(len(l)):\n        if i % 2 != 0 and is_prime(l[i]):\n            l[i] = x\n        else:\n            l[i] = y\n\n    l.sort()\n\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in l1]\n    common = [i for i in a if a.count(i) > 1]\n    common_triples = [(i, j, k) for i in common for j in common for k in common if (i + j + k) % 3 == 0]\n    return sorted(common_triples), len(common_triples)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    string = string.lower()\n    if len(string) == 1:\n        return \"\"\n    if string[0] in vowels or string[-1] in vowels:\n        return \"\"\n    for i in range(1, len(string) - 1):\n        if string[i] in vowels and string[i - 1] in consonants and string[i + 1] in consonants:\n            return string[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_nums(arr):\n        count = 0\n        for num in arr:\n            if num < 0:\n                count += 1\n        return count\n\n    def sort_array(arr):\n        arr.sort()\n        return arr\n\n    def sort_descending(arr):\n        arr.sort(reverse=True)\n        return arr\n\n    def sort_array_with_count(arr, count):\n        if count % 2 == 0:\n            return sort_descending(arr)\n        else:\n            return sort_array(arr)\n\n    count = count_nums(arr)\n    return sort_array_with_count(arr, count)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s]\n    filtered_strings.sort(key=len)\n    return filtered_strings\n"}
{"task_id": "EvoEval/96", "completion": "\n    if not l1 or not l2:\n        return False\n\n    s = set()\n    for i in l1:\n        for j in l2:\n            if -(i + j) in s:\n                return True\n            s.add(i)\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2) + fib(n-3) + n*n - n + 1\n\n    fib_list = [fib(i) for i in range(n+1)]\n    triples = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if fib_list[i] + fib_list[j] + fib_list[k] % 3 == 0:\n                    triples.append([fib_list[i], fib_list[j], fib_list[k]])\n    return triples\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not key.islower() or not key.isupper():\n            return False\n        if value[0] != \"(\" or value[-1] != \")\":\n            return False\n    return True\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return len_base_conversion(x // base, base) + str(x % base)\n\n"}
