{"task_id": "EvoEval/0", "completion": "\n    import re\n    a_happy = re.findall(r'\\d{1,3}(?=(\\d{1,3}))', a)\n    b_happy = re.findall(r'\\d{1,3}(?=(\\d{1,3}))', b)\n    if len(a_happy) < 3 and len(b_happy) < 3:\n        return None\n    if len(a_happy) >= 3 and len(b_happy) >= 3:\n        return max(a_happy, b_happy)\n    if len(a_happy) >= 3:\n        return a\n    if len(b_happy) >= 3:\n        return b\n\n"}
{"task_id": "EvoEval/1", "completion": "\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append((2 ** n) % p)\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    ## Solution:\n    ## The idea is to sort the list of strings based on the number of open parentheses they contain.\n    ## Then, we check if the resulting string is balanced by counting the number of open and close parentheses.\n    ## If the number of open parentheses is equal to the number of close parentheses, then the string is balanced.\n    ## If not, return 'No'.\n    ## If the string is balanced, return 'Yes'.\n\n    lst.sort(key=lambda s: s.count('('))\n    balance = 0\n    for s in lst:\n        balance += s.count('(') - s.count(')')\n        if balance < 0:\n            return 'No'\n    return 'Yes'\n\n    \"\"\"\n    lst.sort(key=lambda s: s.count('('))\n    balance = 0\n    for s in lst:\n        balance += s.count('(') - s.count(')')\n        if balance < 0:\n            return 'No'\n    return 'Yes'\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_divisor(n):\n        for i in range(2, n):\n            if n % i == 0 and is_prime(i):\n                return i\n        return 0\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    return max(digit_sum(largest_prime_divisor(n)) for n in lst)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    # find the two numbers that are closest to each other\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest_pair[0] - closest_pair[1]):\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    # if the two numbers are closer than the threshold, sort the array\n    if abs(closest_pair[0] - closest_pair[1]) < threshold:\n        if round(sum(closest_pair)) % 2 == 0:\n            return sorted(numbers, reverse=True)\n        else:\n            return sorted(numbers)\n\n    # if no two numbers are closer than the threshold, return the array as is\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    total_stones = 0\n    level = n\n    while level > 0:\n        total_stones += level\n        level = level - 2 if level % 2 == 0 else level - 1\n    median = total_stones / n if n % 2 == 0 else (total_stones + n) / 2\n    return median\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    count = string.count(bracket)\n    if bracket == \"<\":\n        return (string.count(\"<\") == string.count(\">\"), count)\n    elif bracket == \">\":\n        return (string.count(\"<\") == string.count(\">\"), count)\n    else:\n        return (False, 0)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8,\n    }\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\",\n    }\n    planet1_position = planets.get(planet1.lower())\n    planet2_position = planets.get(planet2.lower())\n    if planet1_position is None or planet2_position is None:\n        return {}\n    if planet1_position > planet2_position:\n        planet1_position, planet2_position = planet2_position, planet1_position\n    return {\n        planet: roman_numerals[position]\n        for planet, position in planets.items()\n        if planet1_position < position < planet2_position\n    }\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Define the letter grade scale\n    letter_grades = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', -0.6: 'E'}\n\n    # Initialize an empty list to store the corrected grades\n    corrected_grades = []\n\n    # Loop through the input list\n    for student in name_grade_list:\n        # Split the student's name and grade\n        name, grade = student\n\n        # Correct the case of the name\n        name = name.title()\n\n        # Find the closest letter grade for the given GPA\n        for gpa, letter in sorted(letter_grades.items(), reverse=True):\n            if grade >= gpa:\n                corrected_grades.append((name, letter))\n                break\n\n    # Return the corrected grades\n    return corrected_grades\n\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    grades = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', 0.0: 'E'}\n\n    result = []\n    for student in student_info:\n        name = student['name']\n        gpa = student['GPA']\n        consonants = count_consonants(name)\n        if consonants >= n:\n            gpa += 1\n        for grade, letter_grade in grades.items():\n            if gpa >= grade:\n                result.append({'name': name, 'grade': letter_grade})\n                break\n\n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(i) for i in str(n))\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def can_exchange(arr, lst1):\n        odd_arr = [n for n in arr if not is_even(n)]\n        even_lst1 = [n for n in lst1 if is_even(n)]\n        return len(odd_arr) <= len(even_lst1)\n\n    arr = [n for n in arr if sum_digits(n) > 0]\n    return \"YES\" if can_exchange(arr, lst1) else \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    if n > m:\n        return -1\n    primes = []\n    for num in range(n, m + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes.append(num)\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = 'aeiou'\n    notes = []\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            for j in range(len(music_string) - 1, -1, -1):\n                if music_string[j] == 'o':\n                    if j - 1 >= 0 and music_string[j - 1] == '|':\n                        notes.append(4)\n                    else:\n                        notes.append(1)\n                elif music_string[j] == '.':\n                    if j - 1 >= 0 and music_string[j - 1] == '|':\n                        notes.append(2)\n                    else:\n                        notes.append(1)\n                elif music_string[j] == ' ':\n                    break\n            break\n    return notes[::-1]\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib.append(fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3])\n    if fibfib[n] in lst:\n        return lst.count(fibfib[n])\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n    nums.sort()\n    return nums[0] + nums[1] + nums[2]\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    balance_below_zero = False\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            balance_below_zero = True\n        if operation > 0:\n            if min_deposit is None or operation < min_deposit:\n                min_deposit = operation\n        elif operation < 0:\n            if max_withdrawal is None or operation > max_withdrawal:\n                max_withdrawal = operation\n    return max_withdrawal, min_deposit, balance_below_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    grade_book = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', 0.0: 'E'}\n    result = []\n    for i in range(len(s)):\n        name = s[i]\n        grade = grades[i]\n        name = name[::-1].lower()\n        for key in grade_book.keys():\n            if grade >= key:\n                letter_grade = grade_book[key]\n                break\n        result.append((name, letter_grade))\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return [str(x % base)] + base_change_prefixes(x // base, base)\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    def special_stone_factorial(n):\n        if n == 1:\n            return [1]\n        else:\n            return [brazilian_factorial(n)] + [brazilian_factorial(n) * i for i in special_stone_factorial(n - 1)]\n\n    return special_stone_factorial(n)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    if len(num_list) != len(set(num_list)):\n        return 'Not happy string'\n\n    num_list = [num_dict[i] for i in num_list]\n    num_list.sort()\n\n    return ' '.join([str(i) for i in num_list])\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_triples = product_triples = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum_triples += a[i]\n                    if product_triples == 0:\n                        product_triples = a[i]\n                    else:\n                        product_triples *= a[i]\n    return (sum_triples, product_triples if product_triples != 0 else 1)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Mapping of numerals to their corresponding integer values\n    numeral_values = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # List to store tuples of (numeral, index) for even numerals\n    even_numerals = []\n\n    # Iterate over the list of strings\n    for i, value in enumerate(values):\n        # Split the string into a list of numerals\n        numerals = value.split()\n        # Sort the numerals by their corresponding integer values\n        numerals.sort(key=lambda x: numeral_values[x])\n        # Check if the smallest numeral is even\n        if numeral_values[numerals[0]] % 2 == 0:\n            # If so, add it to the list of even numerals\n            even_numerals.append((numerals[0], i))\n\n    # If there are no even numerals, return an empty tuple\n    if not even_numerals:\n        return ()\n\n    # Otherwise, sort the list of even numerals by the numeral value\n    even_numerals.sort(key=lambda x: x[0])\n\n    # Return the smallest even numeral and its index\n    return even_numerals[0]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = 0\n    for num in lst1:\n        if is_prime(num):\n            prime_count += 1\n\n    if prime_count == len(lst1):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    grade_table = {4.0: 'A+', 3.7: 'A+', 3.3: 'A-', 3.0: 'B+', 2.7: 'B+', 2.3: 'B-', 2.0: 'C+', 1.7: 'C+', 1.3: 'C-', 1.0: 'D+', 0.7: 'D+', 0.0: 'D-', -1.0: 'D-'}\n    result = []\n    for gpa in grades:\n        if gpa in grade_table.keys():\n            result.append(grade_table[gpa])\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    if is_prime(n):\n        return y\n    else:\n        return largest_prime_factor(n) or x\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # split the music_string into a list of notes\n    notes = music_string.split()\n    # split the fraction into numerator and denominator\n    numerator, denominator = map(int, x.split('/'))\n    # calculate the beats per note\n    beats_per_note = denominator // numerator\n    # initialize an empty list to store the result\n    result = []\n    # iterate over the notes\n    for note in notes:\n        # calculate the length of the note\n        note_length = len(note)\n        # if the note is a rest, add False to the result\n        if note == '|':\n            result.append(False)\n        # if the note is a whole note, add True to the result if the beats per note is 4 or more\n        elif note == 'o':\n            result.append(beats_per_note >= 4)\n        # if the note is a half note, add True to the result if the beats per note is 2 or more\n        elif note == 'o|':\n            result.append(beats_per_note >= 2)\n        # if the note is a quater note, add True to the result if the beats per note is 1 or more\n        elif note == '.|':\n            result.append(beats_per_note >= 1)\n    # return the result\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    prime_factor_list = prime_factors(n)\n    unique_prime_factors = set(prime_factor_list)\n    special_factorial = 1\n\n    for prime in unique_prime_factors:\n        special_factorial *= prime ** (prime_factor_list.count(prime) * factorial(prime_factor_list.count(prime)))\n\n    return special_factorial\n"}
{"task_id": "EvoEval/32", "completion": "\n    def calculate_depth(s: str) -> int:\n        count = 0\n        max_count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n                max_count = max(max_count, count)\n            elif c == ')':\n                count -= 1\n        return max_count\n\n    def circular_shift(n: int, shift: int) -> int:\n        return (n // (10 ** shift)) + (n % (10 ** shift)) * (10 ** (len(str(n)) - shift))\n\n    result = []\n    for s in input:\n        depth = calculate_depth(s)\n        number = int(''.join(str(depth) for _ in range(len(s))))\n        shifted = circular_shift(number, shift)\n        result.append(shifted)\n    return result\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    int_val = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if i > 0 and roman_dict[s[i]] > roman_dict[s[i - 1]]:\n            int_val += roman_dict[s[i]] - 2 * roman_dict[s[i - 1]]\n        else:\n            int_val += roman_dict[s[i]]\n    if int_val > 1000 or len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    for i in range(len(s) - 2):\n        if s[i:i + 3] in ['iii', 'lll', 'ddd']:\n            return False\n    return int_val\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    from hashlib import md5\n    def md5_hash(s: str) -> str:\n        return md5(s.encode()).hexdigest()\n\n    if not paren_string:\n        return []\n\n    stack = [[]]\n    for ch in paren_string:\n        if ch == '(':\n            stack.append([])\n        elif ch == ')':\n            if not stack[-1]:\n                return ['None']\n            hash_str = ''.join(stack.pop())\n            stack[-1].append(md5_hash(hash_str))\n        else:\n            stack[-1].append(ch)\n\n    if len(stack) > 1:\n        return ['None']\n\n    return [md5_hash(''.join(stack[0]))]\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if len(key) < 3:\n            return False\n        if key.lower() != key and key.upper() != key:\n            return False\n        if len(set(key[i:i+3].lower() for i in range(len(key)-2))) != len(key)-2:\n            return False\n        if len(value) < 3:\n            return False\n        if value.lower() != value and value.upper() != value:\n            return False\n        if len(set(value[i:i+3].lower() for i in range(len(value)-2))) != len(value)-2:\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i] != min(arr[i:]) or arr[i] != max(arr[:i+1]):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum_even = min_sum_odd = math.inf\n    for i in range(len(nums)):\n        sum_even = sum_odd = 0\n        for j in range(i, len(nums)):\n            if nums[j] % 2 == 0:\n                sum_even += nums[j]\n            else:\n                sum_odd += nums[j]\n        if sum_even < min_sum_even:\n            min_sum_even = sum_even\n        if sum_odd < min_sum_odd:\n            min_sum_odd = sum_odd\n    return min_sum_even, min_sum_odd\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        return num % 2 == 0\n\n    even_palindromes = [i for i in range(1, n+1) if is_palindrome(i) and is_even(i)]\n    odd_palindromes = [i for i in range(1, n+1) if is_palindrome(i) and not is_even(i)]\n\n    even_sum = any(i+j in even_palindromes for i in l for j in l if i != j)\n    odd_sum = any(i+j in odd_palindromes for i in l for j in l if i != j)\n\n    return even_sum, odd_sum\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if l == 2:\n                dp[i][j] = arr[i] != arr[j]\n            else:\n                dp[i][j] = dp[i+1][j-1] + (arr[i] != arr[j])\n    return dp[0][n-1]*x + y\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def ends_with_odd_digit(n):\n        last_digit = abs(n) % 10\n        return last_digit in {1, 3, 5, 7, 9}\n\n    def has_odd_prime_factor(n):\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0 and is_prime(i) and i % 2 != 0:\n                return True\n        return False\n\n    nums = [n for n in nums if n > 10 and ends_with_odd_digit(n)]\n    if not nums:\n        return None\n    max_prime = max(n for n in nums if is_prime(n) and has_odd_prime_factor(n))\n    return max_prime\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    s = list(s)\n    if shift > len(s):\n        shift = shift % len(s)\n    else:\n        s = s[::-1]\n    for i in range(shift):\n        s.insert(0, s.pop())\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    # split the expression by \"<\" and \">\"\n    fractions = expression.split(\"<\")[1].split(\">\")[0].split(\",\")\n\n    # initialize the product\n    product = 1\n\n    # iterate over each fraction\n    for fraction in fractions:\n        # split the numerator and denominator\n        numerator, denominator = map(int, fraction.split(\"/\"))\n\n        # update the product\n        product *= numerator / denominator\n\n    # check if the product is a whole number\n    return product.is_integer()\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    fib4_sequence = [0, 0, 2, 0]\n    while len(fib4_sequence) < n:\n        fib4_sequence.append(fib4_sequence[-1] + fib4_sequence[-2] + fib4_sequence[-3] + fib4_sequence[-4])\n    return sorted(fib4_sequence[:n])\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    prefixes = []\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            prefixes.append(roman_numerals[key])\n            number -= key\n    return prefixes\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes if product_primes != 1 else 1)\n"}
{"task_id": "EvoEval/46", "completion": "\n    l = [i for i in l if i > 0 and i % 2 == 0]\n    return max(l) if l else -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    digits = '13579'\n    result = []\n    for i in range(len(lst)):\n        n = sum(1 for j in range(len(s)) if j % 2 == 0 and s[j] in vowels)\n        m = sum(1 for k in lst[i] if k in digits)\n        result.append(f\"In string number {i+1} number of uppercase vowels in even indices is {n} number of odd digits is {m}.\")\n    return result\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if is_prime(len(prefix)) and s.startswith(prefix)]\n"}
{"task_id": "EvoEval/49", "completion": "\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * (num % 10)\n        else:\n            num = num % 10\n        if num > (2**n) % p:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i + 1] not in vowels:\n            for j in range(i + 2, len(word)):\n                if word[j] in vowels and word[j - 1] not in vowels:\n                    return word[i:j + 1]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if isinstance(a, str) and isinstance(b, str):\n        if a.isalpha() and b.isalpha():\n            a = a.swapcase()\n            b = b.swapcase()\n        else:\n            a = a[::-1]\n            b = b[::-1]\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    elif isinstance(a, str) and a.replace('.', '', 1).isdigit():\n        a = float(a.replace(',', '.'))\n        if a > b:\n            return a\n        else:\n            return b\n    elif isinstance(b, str) and b.replace('.', '', 1).isdigit():\n        b = float(b.replace(',', '.'))\n        if b > a:\n            return b\n        else:\n            return a\n    return a if a > b else b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    even_nodes = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    if not even_nodes:\n        return ([], None)\n\n    smallest_even_node = min(even_nodes)\n    arr.pop(smallest_even_node[1])\n\n    sum_remaining = sum(abs(v) * (1 if v > 0 else -1) for v in arr)\n\n    return (list(smallest_even_node), sum_remaining)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {\n        4.0: 'F',\n        3.7: 'F',\n        3.3: 'D',\n        3.0: 'D',\n        2.7: 'D',\n        2.3: 'C',\n        2.0: 'C',\n        1.7: 'B',\n        1.3: 'B',\n        1.0: 'A',\n        0.7: 'A',\n        0.0: 'E',\n        4.0: 'E',\n        3.0: 'E',\n    }\n    prime_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for grade in grades:\n        if hex_grades[grade] in prime_grades:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for key in sorted(roman_numerals.keys(), reverse=True):\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n    return hashlib.md5(result.encode()).hexdigest()\r\n\r"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [factor for factor in factors if factor % 2 != 0]\n    if not odd_factors:\n        return 0\n    else:\n        product = 1\n        for factor in odd_factors:\n            product *= factor\n        return product\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def has_odd_digits(n):\n        return all(int(digit) % 2 for digit in str(n))\n\n    changes = 0\n    for i in range(len(arr)):\n        if not is_palindrome(arr[:i] + arr[i:]) or not has_odd_digits(arr[i]):\n            changes += 1\n            arr[i] = str(arr[i]) + '1'\n    return changes\n\n"}
{"task_id": "EvoEval/58", "completion": "\n"}
{"task_id": "EvoEval/59", "completion": "\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else oct(int(s, 10))[2:] if base == 8 else hex(int(s, 10))[2:]\n\n    return [f\"the number of odd elements {odd_count(base_change(s, base))}n str{len(s)}ng {odd_count(s)} {len(s)}nput.\" for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    arr.extend(a)\n    arr.sort()\n    for i in range(len(arr) - 2):\n        if (arr[i] + arr[i + 1] + arr[i + 2]) % 3 == 0:\n            return [i + 1]\n    return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n\n    ## Solution\n\n    def longest_planet_chain(planet1: str, planet2: str, chains: List[Tuple[str,...]]) -> Optional[Tuple[str,...]]:\n        planet_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n        planet_dict = {planet: i for i, planet in enumerate(planet_order)}\n        chain_dict = {planet1: []}\n        for chain in chains:\n            if chain[0] in chain_dict:\n                for i in range(1, len(chain)):\n                    if chain[i] not in chain_dict or len(chain_dict[chain[i]]) < len(chain) - 1:\n                        chain_dict[chain[i]] = chain_dict[chain[0]][:] + [chain[i]]\n        if planet2 not in chain_dict or len(chain_dict[planet2]) == 0:\n            return None\n        longest_chain = max(chain_dict.values(), key=len)\n        if longest_chain[-1] != planet2 or longest_chain[0] != planet1:\n            return None\n        return tuple(longest_chain)\n\n    print(longest_planet_chain(\"Earth\", \"Saturn\", [(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")]))\n    print(longest_planet_chain(\"Earth\", \"Mars\", [(\"Earth\", \"Mars\")]))\n    print(longest_planet_chain(\"Earth\", \"Pluto\", [(\"Earth\", \"Mars\", \"Jupiter\")]))\n    \"\"\"\n\n    ## Explanation\n\n    The function `longest_planet_chain` takes three parameters: the names of the starting and ending planets, and a list of chains. It first creates a list of the planets in order from the closest to the Sun to the furthest. It then creates a dictionary that maps each planet to"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words.sort(key=lambda w: (w.lower(), w))\n    result = ' '.join(words)\n    result = result.replace('  ', '-')\n    result = result.replace(' ', '_')\n    return result\n\n"}
{"task_id": "EvoEval/63", "completion": "\n"}
{"task_id": "EvoEval/64", "completion": "\n    if n == 0:\n        return []\n    else:\n        result = [2]\n        for i in range(3, p, 2):\n            if all(i % j != 0 for j in range(2, int(i**0.5) + 1)):\n                result.append(i)\n            if len(result) == n:\n                return result\n        return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return (2 ** n) % p\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    max_sum = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_sum = max(max_sum, a[i] + a[j] + a[k] + y)\n    return max_sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff <= threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_digits_product(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_product_sum = 0\n    for num in nums:\n        min_product_sum += odd_digits_product(num)\n\n    return min_product_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) % 3 != 0:\n            return False\n        for i in range(len(s) // 3):\n            if len(set(s[i*3:(i+1)*3])) != 3:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    return sorted(happy_strings, key=lambda s: (len(s), s))\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def special_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return factorial(n) * special_factorial(n-1)\n\n    special_factorial_numbers = [(i, special_factorial(i)) for i in numbers]\n    special_factorial_numbers.sort(key=lambda x: x[1])\n\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(special_factorial_numbers)):\n        diff = abs(special_factorial_numbers[i][1] - special_factorial_numbers[i-1][1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (special_factorial_numbers[i-1][0], special_factorial_numbers[i][0])\n\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\n    max_weight = brazilian_factorial(n)\n    return sum(w) <= max_weight\n"}
{"task_id": "EvoEval/72", "completion": "\n    def brazilian_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    for number in numbers:\n        if abs(brazilian_factorial(number) - brazilian_factorial(number - 1)) >= threshold:\n            return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n_fraction = Fraction(n)\n    return [Fraction(fraction) * n_fraction == Fraction(int(Fraction(fraction) * n_fraction)) for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # your code here\n    sum_lst1 = sum(lst1)\n    sum_lst2 = sum(lst2)\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\n    lst2_even = [i for i in lst2 if i % 2 == 0]\n    if len(lst1_odd) > len(lst2_even):\n        return \"NO\"\n    else:\n        if sum_lst1 + sum_lst2 == x + y + z:\n            return \"SUM NO\"\n        else:\n            return \"NO_SUM NO\"\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_digits(n):\r\n        return sum(int(digit) for digit in str(n))\r\n\r\n    modified = lst[:]\r\n    for i in range(len(modified)):\r\n        if is_prime(modified[i]):\r\n            modified[i] = sum_digits(modified[i])\r\n\r\n    if len(modified) % 2 == 0:\r\n        modified.sort(reverse=True)\r\n    else:\r\n        modified.sort()\r\n\r\n    return modified\r\n\r\n\r"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 != 0:\n            sum += arr[i]\n        if arr[i] < 0:\n            str_num = str(arr[i])\n            for ch in str_num:\n                if ch.isdigit():\n                    if int(ch) > 0:\n                        sum += int(ch)\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s_rev = s[::-1]\n    s_res = \"\"\n    count = 0\n    for c in s_rev:\n        if c.isalpha():\n            if c.islower():\n                s_res += c.upper()\n            else:\n                s_res += c.lower()\n            if c in vowels and s_res.index(c) % 2 == 0:\n                count += 1\n        else:\n            s_res += c\n    return (s_res, count)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) < 3:\n        return s[::-1]\n    res = []\n    for i in range(len(s)):\n        if i % 3 == 0 and i + 2 < len(s):\n            if s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2]:\n                res.append(s[i].swapcase())\n                res.append(s[i+1].swapcase())\n                res.append(s[i+2].swapcase())\n            else:\n                return s[::-1]\n        else:\n            res.append(s[i])\n    return ''.join(res)\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return s[-1] + s[:-1]\n\n    def decode(s: str) -> str:\n        return s[1:] + s[0]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def delete(s: str, c: str) -> str:\n        return ''.join([i for i in s if i not in c])\n\n    s = delete(s, c)\n    encoded = ''.join([encode(s[i:i+3]) for i in range(0, len(s), 3)])\n    if is_palindrome(encoded):\n        return encoded, True\n    else:\n        decoded = ''.join([decode(encoded[i:i+3]) for i in range(0, len(encoded), 3)])\n        return decoded, False\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    # generate fibfib sequence\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n\n    # calculate mean\n    mean = sum(fibfib_sequence) / n\n\n    # calculate absolute deviation\n    absolute_deviation = [abs(x - mean) for x in fibfib_sequence]\n\n    # calculate mean absolute deviation\n    mean_absolute_deviation = sum(absolute_deviation) / n\n\n    return mean_absolute_deviation\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3])\n        if fib[i] % 2 == 0:\n            fib[i] = fib[i] * odd_fibfib(i - 1) * odd_fibfib(i - 2) * odd_fibfib(i - 3)\n        else:\n            fib[i] = fib[i]\n    return fib[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace all more than 2 consecutive underscores with single underscore\n    text = re.sub('_+', '_', text)\n    # Remove leading and trailing underscores\n    text = text.strip('_')\n    # Calculate length of new string\n    length = len(text)\n    # Check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(len(string)):\n        prefix = string[:i+1]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) < 2:\n        return None\n    binary_lst = [bin(i)[2:] for i in lst]\n    binary_lst.sort()\n    unique_binaries = list(set(binary_lst))\n    unique_binaries.sort(key=lambda x: (len(x.replace('0', '')), x))\n    smallest_binary = unique_binaries[0]\n    smallest_numbers = [i for i, b in enumerate(binary_lst) if b == smallest_binary]\n    if len(smallest_numbers) > 1:\n        return lst[smallest_numbers[1]]\n    else:\n        return lst[binary_lst.index(unique_binaries[1])]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Your code here\n    from itertools import permutations\n    from operator import add, sub, mul\n    import numpy as np\n\n    if not operand_lists or not operators:\n        return None\n\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands = common_operands.intersection(set(operand_list))\n\n    common_operands = sorted(list(common_operands))\n\n    if not common_operands:\n        return None\n\n    operators_dict = {'+': add, '-': sub, '*': mul, '//': np.floor_divide, '**': pow}\n\n    results = []\n    for perm in permutations(common_operands, len(common_operands)):\n        for op in operators:\n            result = perm[0]\n            for i in range(1, len(perm)):\n                result = operators_dict[op](result, perm[i])\n            results.append(result)\n\n    return results\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in text:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                text = text.replace(i, '')\n            else:\n                stack.pop()\n        elif not stack and i in vowels:\n            text = text.replace(i, '')\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        md5_hash = hashlib.md5(string.encode()).hexdigest()\n        if hash_substring in md5_hash:\n            result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n\n    if not dict:\n        return {}\n\n    for key in dict.keys():\n        if not key.islower() and not key.isupper():\n            return {}\n\n        count = 0\n        for char in key:\n            if char in vowels:\n                count += 1\n        result[key] = count\n\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sorted_l = sorted(l)\n    for i in range(0, len(l), 2):\n        if is_prime(sorted_l[i]):\n            sorted_l[i] = x\n        else:\n            sorted_l[i] = y\n    return sorted_l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = list(set(a) & set(l1))\n    common.sort()\n    triples = 0\n    for i in range(len(common)):\n        for j in range(i + 1, len(common)):\n            for k in range(j + 1, len(common)):\n                if common[i] + common[j] + common[k] % 3 == 0:\n                    triples += 1\n    return (common, triples)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    string_length = len(string)\n    if string_length in prime_numbers:\n        for i in range(1, len(string) - 1):\n            if string[-i] not in vowels and string[-(i + 1)] not in vowels:\n                for j in range(i - 1, -1, -1):\n                    if string[-(j + 1)] in vowels and string[-j] in vowels:\n                        return string[-i]\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def count_nums(n):\n        if n < 0:\n            return sum(map(int, str(n)[1:]))\n        else:\n            return sum(map(int, str(n)))\n\n    odd_count = sum(count_nums(n) % 2 for n in arr)\n    return sorted(arr, key=lambda n: (count_nums(n) % 2, -n if n < 0 else n)) if odd_count % 2 else sorted(arr)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(filtered_strings, key=lambda s: (len(s), s))\n"}
{"task_id": "EvoEval/96", "completion": "\n    for i in l1:\n        for j in l2:\n            if i + j == 0:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n    triples = []\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    triples.append([fib[i], fib[j], fib[k]])\n    return len(triples), triples\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not key.islower():\n            return False\n        if value[0] != \"(\" or value[-1] != \")\":\n            return False\n        count = 0\n        for char in value:\n            if char == \"(\":\n                count += 1\n            elif char == \")\":\n                if count == 0:\n                    return False\n                count -= 1\n        if count != 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
