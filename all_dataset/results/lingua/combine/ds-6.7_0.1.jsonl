{"task_id": "EvoEval/0", "completion": "\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if len(set(s[i:i + 3])) != 3:\n                return False\n        return len(s) >= 3\n\n    def to_float(s):\n        return float(s.replace(',', '.'))\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if not a_happy and not b_happy:\n        return None\n    elif a_happy and not b_happy:\n        return a\n    elif not a_happy and b_happy:\n        return b\n    else:\n        a_float = to_float(a)\n        b_float = to_float(b)\n        return str(max(a_float, b_float)).replace('.', ',') if a_float != b_float else None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append((2 ** n) % p)\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    def is_good(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1] != '(':\n                    return False\n                stack.pop()\n        return not stack\n\n    lst = sorted(lst, key=lambda s: int(s[1:-1]))\n    return 'Yes' if is_good(''.join(lst)) else 'No'\n\"\"\"\n\"\"\"\n    from typing import List\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_sum = 0\n    for num in lst:\n        largest_prime = 0\n        for i in range(2, num):\n            if num % i == 0 and is_prime(i) and i > largest_prime:\n                largest_prime = i\n        if largest_prime:\n            largest_sum = max(largest_sum, sum_of_digits(largest_prime))\n    return largest_sum\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if round(numbers[i]) - round(numbers[i - 1]) < threshold:\n            if round(numbers[0]) + round(numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    total_stones = 0\n    for i in range(n):\n        if n % 2 == 0:\n            total_stones += n + (2 * i)\n        else:\n            total_stones += n + (2 * i)\n    median = total_stones / n\n    return median\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n+1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        if char == \"<\":\n            stack.append(char)\n        if char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return (False, count)\n    return (not stack, count)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planets_order = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\"\n    }\n\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return {}\n\n    planet1_position = planets_order[planet1]\n    planet2_position = planets_order[planet2]\n\n    if planet1_position > planet2_position:\n        planet1_position, planet2_position = planet2_position, planet1_position\n\n    return {planet: roman_numerals[position] for planet, position in planets_order.items() if planet1_position < position < planet2_position}\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3::'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0: 'D-', -1: 'E'}\n    result = []\n    for student in name_grade_list:\n        name = student[0].title()\n        grade = grade_scale.get(student[1])\n        result.append((name, grade))\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    grades = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E',\n    }\n\n    def get_grade(gpa):\n        for grade, letter_grade in sorted(grades.items(), reverse=True):\n            if gpa >= grade:\n                return letter_grade\n        return 'E'\n\n    result = []\n    for student in student_info:\n        consonants = count_consonants(student['name'])\n        if consonants == n:\n            gpa = student['GPA'] + 0.3\n            grade = get_grade(gpa)\n        else:\n            gpa = student['GPA']\n            grade = get_grade(gpa)\n        result.append({'name': student['name'], 'grade': grade})\n\n    return result\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    arr = [n for n in arr if sum_digits(n) > 0]\n    odd_arr = [n for n in arr if n % 2 != 0]\n    even_lst1 = [n for n in lst1 if n % 2 == 0]\n\n    if len(odd_arr) <= len(even_lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n, m+1) if is_prime(x)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        if balance == 0:\n            zero_sum_points += 1\n    return zero_sum_points >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    music_string = music_string.split()\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            result = music_string[:i + 1]\n            break\n    return [4 if note == 'o' else 2 if note == 'o|' else 1 if note == '.|' else 0 for note in result]\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_seq = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib_seq.append(fibfib_seq[i - 1] + fibfib_seq[i - 2] + fibfib_seq[i - 3])\n    fibfib_n = fibfib_seq[n]\n    if fibfib_n == 0:\n        return -1\n    count = lst.count(fibfib_n)\n    if count >= fibfib_n:\n        return fibfib_n\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if len(nums) < 3:\n        return 0\n\n    nums.sort()\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    min_deposit = None\n    max_withdrawal = None\n    balance_below_zero = False\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            balance_below_zero = True\n        if operation > 0:\n            if min_deposit is None or operation < min_deposit:\n                min_deposit = operation\n        elif operation < 0:\n            if max_withdrawal is None or operation > max_withdrawal:\n                max_withdrawal = operation\n    return max_withdrawal, min_deposit, balance_below_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    result = []\n    for i in range(len(s)):\n        name = s[i]\n        gpa = grades[i]\n        if gpa >= 4.0:\n            grade = 'A+'\n        elif gpa >= 3.7:\n            grade = 'A'\n        elif gpa >= 3.3:\n            grade = 'A-'\n        elif gpa >= 3.0:\n            grade = 'B+'\n        elif gpa >= 2.7:\n            grade = 'B'\n        elif gpa >= 2.3:\n            grade = 'B-'\n        elif gpa >= 2.0:\n            grade = 'C+'\n        elif gpa >= 1.7:\n            grade = 'C'\n        elif gpa >= 1.3:\n            grade = 'C-'\n        elif gpa >= 1.0:\n            grade = 'D+'\n        elif gpa >= 0.7:\n            grade = 'D'\n        elif gpa >= 0.0:\n            grade = 'D-'\n        else:\n            grade = 'E'\n        result.append((name.swapcase(), grade))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n\n    def to_base(n, b):\n        if n < b:\n            return str(n)\n        else:\n            return to_base(n // b, b) + str(n % b)\n\n    base_x = to_base(x, base)\n    return [base_x[:i] for i in range(1, len(base_x) + 1)]\n"}
{"task_id": "EvoEval/22", "completion": "\n"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return factorial(n) * brazilian_factorial(n-1)\n\n    result = []\n    for i in range(n, 0, -1):\n        result.append(brazilian_factorial(i))\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    num_list = numbers.split()\n    if len(set(num_list[i:i+3] for i in range(0, len(num_list), 3))) != 1:\n        return 'Not a happy string'\n    num_list = [num_dict[i] for i in num_list]\n    num_list.sort()\n    num_list = [str(i) for i in num_list]\n    return ' '.join(num_list)\n"}
{"task_id": "EvoEval/25", "completion": "\n    if n < 3:\n        return (0, 1)\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_triples, product_triples = 0, 1\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum_triples += a[0]\n                    product_triples *= a[0]\n\n    return (sum_triples, product_triples)\n"}
{"task_id": "EvoEval/26", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    result = ()\n    min_even = float('inf')\n    for i, value in enumerate(values):\n        nums = value.split()\n        nums.sort(key=lambda x: num_dict[x])\n        for num in nums:\n            if num_dict[num] % 2 == 0 and num_dict[num] < min_even:\n                min_even = num_dict[num]\n                result = (num, i)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = sum(is_prime(n) for n in lst1)\n    non_prime_count = len(lst1) - prime_count\n\n    if non_prime_count <= sum(n % 2 != 0 for n in lst2):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    grades_table = {4.0: \"A+\", 3.7: \"A+\", 3.3: \"A\", 3.0: \"A-\", 2.7: \"B+\", 2.3: \"B\", 2.0: \"B-\", 1.7: \"C+\", 1.3: \"C\", 1.0: \"C-\", 0.7: \"D+\", 0.0: \"D\", -0.3: \"D-\", 0.0: \"E\"}\n    result = []\n    for gpa in grades:\n        if gpa in grades_table.keys():\n            if s0[0] == s1[0] and s0[1] == s1[1] and s0[2] == s1[2] and s0[3] == s1[3]:\n                result.append(grades_table[gpa])\n    return result\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return y\n    elif is_prime(n):\n        return x\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # split the fraction\n    num, den = map(int, x.split('/'))\n    # create a dictionary to map notes to their beats\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    # split the music_string into a list of notes\n    music = music_string.split()\n    # create a list to store the result\n    result = []\n    # iterate over the list of notes\n    for note in music:\n        # calculate the beats for the note\n        beats = notes[note] * num / den\n        # if the beats is a whole number, add True to the result list, otherwise add False\n        result.append(beats.is_integer())\n    # return the result list\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    prime_factor_counts = {}\n    for prime in prime_factors(n):\n        if prime not in prime_factor_counts:\n            prime_factor_counts[prime] = 1\n        else:\n            prime_factor_counts[prime] += 1\n\n    result = 1\n    for prime, count in prime_factor_counts.items():\n        result *= factorial(prime) ** count\n\n    return result\n"}
{"task_id": "EvoEval/32", "completion": "\n    def nested_parens(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    def circular_shift(num: int, shift: int) -> List[int]:\n        num_str = str(num)\n        num_len = len(num_str)\n        shift %= num_len\n        return [int(num_str[(i - shift) % num_len]) for i in range(num_len)]\n\n    return [nested_parens(s) for s in input]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    invalid_sequences = ['ii', 'xx', 'cc']\n    invalid_sequences_3 = ['iii', 'xxxx', 'cccc']\n    invalid_sequences_4 = ['iv', 'ix', 'xl', 'xc', 'cd', 'cm']\n    invalid_sequences_5 = ['v', 'l', 'd']\n    invalid_sequences_6 = ['vi', 'xi', 'xv', 'lv', 'xc', 'lv', 'lx', 'li']\n    invalid_sequences_7 = ['vii', 'viii', 'ixi', 'xxi', 'xxv', 'xlv', 'xli', 'xlii', 'lxii', 'lxiv', 'lxix', 'lxxv', 'xciv', 'xcix', 'xcxv', 'cxiv', 'cxix', 'cxcv', 'cdiv', 'cdix', 'cdcx', 'mdiv', 'mdix', 'mdcx', 'mmdix', 'mmdcx']\n    invalid_sequences_8 = ['viii', 'ixii', 'xxii', 'xxii', 'xxvi', 'xxlv', 'xxli', 'xxlii', 'xliii', 'lxiii', 'lxvii', 'lxvii', 'lxixi', 'lxixi', 'lxcvii', 'lxcvii', 'xcixi', 'xcixi', 'xccvii', 'xccvii', 'cdixi', 'cdixi', 'cdcixi', 'mdixi', 'mdixi', 'mdcixi', 'mmdixi', 'mmdixi', 'mmdcixi']\n    invalid_sequences_9 = ['ixxi', 'xlix', 'xlii', 'xliii', 'lxixi', 'lxixi', 'lxcvii', 'lxcvii', 'xc"}
{"task_id": "EvoEval/34", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/35", "completion": "\n    def check_key(key):\n        if key.islower() or key.isupper():\n            return True\n        return False\n\n    def check_value(value):\n        if len(value) >= 3:\n            for i in range(len(value) - 2):\n                if len(set(value[i:i+3])) != 3:\n                    return False\n            return True\n        return False\n\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not isinstance(key, str) or not isinstance(value, str):\n            return False\n        if not check_key(key) or not check_value(value):\n            return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    # Initialize the minimum sum to be the maximum possible integer\n    min_sum = float('inf')\n    # Initialize the count of even and odd digits in the minimum sum\n    even_count = 0\n    odd_count = 0\n    # Iterate over all possible sub-arrays of nums\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            # Calculate the sum of the current sub-array\n            sub_sum = sum(nums[i:j+1])\n            # If the sum is less than the current minimum sum, update the minimum sum and the count of even and odd digits\n            if sub_sum < min_sum:\n                min_sum = sub_sum\n                even_count = sum(1 for digit in str(min_sum) if int(digit) % 2 == 0)\n                odd_count = sum(1 for digit in str(min_sum) if int(digit) % 2 != 0)\n    # Return the count of even and odd digits in the minimum sum\n    return (even_count, odd_count)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_palindromes(n, is_even):\n        count = 0\n        for i in range(1, n):\n            if is_even:\n                if i % 2 == 0 and is_palindrome(i):\n                    count += 1\n            else:\n                if i % 2 != 0 and is_palindrome(i):\n                    count += 1\n        return count\n\n    even_count = count_palindromes(n, True)\n    odd_count = count_palindromes(n, False)\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == even_count:\n                even_bool = True\n            if l[i] + l[j] == odd_count:\n                odd_bool = True\n\n    return (even_bool, odd_bool) if 'even_bool' in locals() and 'odd_bool' in locals() else (False, False)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes*x + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def has_odd_ends(n):\n        str_n = str(n)\n        return int(str_n[0]) in [1, 3, 5, 7, 9] and int(str_n[-1]) in [1, 3, 5, 7, 9]\n\n    primes = [n for n in nums if n > 10 and is_prime(n) and has_odd_ends(n)]\n    return max(primes) if primes else None\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    if shift > len(s):\n        s = s[::-1]\n    for i in range(0, len(s), 2):\n        char = chr((ord(s[i]) - 65 + shift) % 26 + 65)\n        if char in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    import re\n    from fractions import Fraction\n\n    def is_whole_number(n):\n        return n.is_integer()\n\n    def is_valid_expression(expression):\n        # remove leading and trailing \"<\" and \">\"\n        expression = expression.strip(\"<>\")\n        # split by \",\"\n        fractions = expression.split(\",\")\n        product = Fraction(1, 1)\n        for fraction in fractions:\n            try:\n                product *= Fraction(fraction)\n            except ZeroDivisionError:\n                return False\n        return is_whole_number(product)\n\n    # find all expressions in the string\n    expressions = re.findall(r\"<[^>]*>\", expression)\n    # check each expression\n    return all(is_valid_expression(expr) for expr in expressions)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n    if n == 4:\n        return [0, 0, 2, 2]\n\n    fib4 = [0, 0, 2, 2]\n    for i in range(4, n):\n        fib4.append(fib4[-1] + fib4[-2] + fib4[-3] + fib4[-4])\n\n    if (fib4[0] + fib4[-1]) % 2 == 0:\n        fib4.sort(reverse=True)\n    else:\n        fib4.sort()\n\n    return fib4\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = []\n    for i in range(1, len(str(number))):\n        for j in range(number // 10**i, number // 10**(i-1)):\n            roman = ''\n            for key in sorted(roman_numerals.keys(), reverse=True):\n                while j >= key:\n                    roman += roman_numerals[key]\n                    j -= key\n            result.append(roman)\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive = [i for i in l if i > 0 and i % 2 == 0]\n    if even_positive:\n        return max(even_positive)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = 'AEIOU'\n    n = sum(1 for c in s[::2] if c in vowels)\n    m = sum(1 for num in lst for digit in num if int(digit) % 2 != 0)\n    return [f\"In string, number of uppercase vowels in even indices is {n}, number of odd digits is {m}.\" for m in range(len(lst))]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(prefix))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_n_mod_p = pow(2, n, p)\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -sum(int(digit) for digit in str(num)[1:])\n        else:\n            num = sum(int(digit) for digit in str(num))\n        if num > two_n_mod_p:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1, 2):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if isinstance(a, str) and a.isalpha():\n        a = a.swapcase()\n        if a.isalpha() and not a.isupper():\n            a = a[::-1]\n    if isinstance(b, str) and b.isalpha():\n        b = b.swapcase()\n        if b.isalpha() and not b.isupper():\n            b = b[::-1]\n\n    if isinstance(a, str):\n        if '.' in a:\n            a = float(a.replace('.', ''))\n        elif ',' in a:\n            a = float(a.replace(',', '.'))\n        else:\n            a = int(a)\n\n    if isinstance(b, str):\n        if '.' in b:\n            b = float(b.replace('.', ''))\n        elif ',' in b:\n            b = float(b.replace(',', '.'))\n        else:\n            b = int(b)\n\n    if isinstance(a, int) or isinstance(a, float) and isinstance(b, int) or isinstance(b, float):\n        if a > b:\n            return a if isinstance(a, int) else float(a)\n        elif b > a:\n            return b if isinstance(b, int) else float(b)\n        else:\n            return None\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    smallest_even_val = float('inf')\n    smallest_even_idx = -1\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_val:\n            smallest_even_val = num\n            smallest_even_idx = i\n\n    if smallest_even_idx == -1:\n        return ([], None)\n\n    plucked_node = [smallest_even_val, smallest_even_idx]\n\n    for i, num in enumerate(arr):\n        if i != smallest_even_idx:\n            sum_of_magnitudes += abs(num)\n            product_of_signs *= (1 if num > 0 else -1)\n\n    return (plucked_node, sum_of_magnitudes * product_of_signs)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {4.0: 'F', 3.7: 'F', 3.3: 'E', 3.0: 'D', 2.7: 'D', 2.3: 'C', 2.0: 'B', 1.7: 'B', 1.3: 'A', 1.0: 'A', 0.7: '9', 0.0: '8', 4.0: '8'}\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for grade in grades:\n        if hex_grades[grade] in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    if number <= 0 or number > 1000:\n        return None\n\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n\n    for key in roman_numerals:\n        while number >= key:\n            result += roman_numerals[key]\n            number -= key\n\n    return hashlib.md5(result.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [i for i in factors if i % 2 != 0]\n    if not odd_factors:\n        return 0\n    else:\n        product = 1\n        for i in odd_factors:\n            product *= i\n        return product\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def is_odd_digit(arr):\r\n        return all(int(digit) % 2 == 1 for num in arr for digit in str(num))\r\n\r\n    def count_changes(arr):\r\n        changes = 0\r\n        for i in range(len(arr) // 2):\r\n            if arr[i] != arr[-i - 1]:\r\n                changes += 1\r\n        return changes\r\n\r\n    changes = 0\r\n    if not is_palindrome(arr):\r\n        changes += count_changes(arr)\r\n    if not is_odd_digit(arr):\r\n        changes += count_changes([str(num) for num in arr])\r\n    return changes\r\n\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(n, b):\n        return int(n, 10) if b == 10 else hex(int(n, 10))[2:] if b == 16 else ''\n\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [\n        \"the number of odd elements {}n the str{}ng {} of {}nput.\".format(\n            base_change(str(odd_count(s)), base),\n            base_change(str(odd_count(s)), base),\n            base_change(str(odd_count(s)), base),\n            base_change(str(odd_count(s)), base)\n        )\n        for s in lst\n    ]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    arr.extend(a)\n    arr.sort()\n    for i in range(len(arr) - 2):\n        if (arr[i] + arr[i + 1] + arr[i + 2]) % 3 == 0:\n            return [arr[i], i]\n    return []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n\"\"\"\n\nfrom typing import List, Optional, Tuple\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words.sort(key=str.lower)\n    result = []\n    while words:\n        result.append(words.pop(0))\n        if words:\n            result.append(words.pop(-1))\n    return \"-\".join(result).replace(\" \", \"_\")\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    # calculate 2^n modulo p\n    modulo_result = 2 ** n % p\n\n    # create a list of prime numbers less than modulo_result\n    primes = [i for i in range(2, modulo_result) if all(i % j != 0 for j in range(2, i))]\n\n    return primes\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return pow(2, n, p)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # find largest even number in range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # create array a\n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = i * i - i + 1\n\n    # find largest triple sum\n    triple_sum = -1\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    temp_sum = a[i] + a[j] + a[k]\n                    if triple_sum == -1 or temp_sum > triple_sum:\n                        triple_sum = temp_sum\n\n    if triple_sum == -1:\n        return -1\n    else:\n        return triple_sum + largest_even\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                max_diff = max(max_diff, abs(numbers[i] - numbers[j]))\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_digits_product(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_product_sum = 0\n    for num in nums:\n        min_product_sum += odd_digits_product(num)\n    return min_product_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    def is_happy(s):\n        if len(s) % 3 != 0:\n            return False\n        for i in range(0, len(s), 3):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    happy_strings = [s for s in lst if is_happy(s)]\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    numbers.sort()\n    min_diff = float('inf')\n    min_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[i + 1]))\n        if diff < min_diff:\n            min_diff = diff\n            min_pair = (numbers[i], numbers[i + 1])\n\n    return min_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    max_weight = brazilian_factorial(n)\n\n    if sum(w) <= max_weight and w == w[::-1]:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * special_factorial(n - 1)\n\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(special_factorial(numbers[i]) - special_factorial(numbers[i + 1])) < threshold:\n            return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    result = []\n    for fraction in fractions:\n        f = Fraction(fraction)\n        result.append(f * n == f)\n    return result\n"}
{"task_id": "EvoEval/74", "completion": "\n    # your code here\n    lst1_odd = [i for i in lst1 if i % 2 != 0]\n    lst2_even = [i for i in lst2 if i % 2 == 0]\n    if len(lst1_odd) > len(lst2_even):\n        return \"NO\"\n    else:\n        lst1_even = [i for i in lst1 if i % 2 == 0]\n        lst2_odd = [i for i in lst2 if i % 2 != 0]\n        if len(lst2_odd) < len(lst1_odd):\n            return \"NO\"\n        else:\n            result = \"YES\"\n            if x + y == z or x + z == y or y + z == x:\n                result = \"SUM \" + result\n            else:\n                result = \"NO_SUM \" + result\n            return result\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_of_digits(n):\r\n        return sum(int(digit) for digit in str(n))\r\n\r\n    modified = [sum_of_digits(n) if is_prime(n) else n for n in lst]\r\n    return sorted(modified, reverse=(lst[0] + lst[-1]) % 2 == 0) if lst else []\r\n\r\n\r"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] < 0:\n            digits = [int(d) for d in str(arr[i]) if d.isdigit()]\n            if sum(digits) > 0:\n                sum += arr[i]\n        else:\n            if sum_of_digits(arr[i]) > 0:\n                sum += arr[i]\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s_list = list(s)\n    upper_vowels_even_indices = sum(1 for i in range(len(s_list)) if i % 2 == 0 and s_list[i] in vowels)\n\n    for i in range(len(s_list)):\n        if s_list[i].isalpha():\n            s_list[i] = s_list[i].lower() if s_list[i].isupper() else s_list[i].upper()\n        else:\n            s_list = s_list[::-1]\n\n    return \"\".join(s_list), upper_vowels_even_indices\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    if len(s) < 3:\n        return s[::-1]\n    for i in range(len(s)-2):\n        if len(set(s[i:i+3])) != 3:\n            return s[::-1]\n    return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s):\n        return s[-1] + s[:-1]\n\n    def decode(s):\n        return s[1:] + s[0]\n\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    encoded = ''.join(encode(s[i:i+3]) for i in range(0, len(s), 3))\n    deleted = ''.join(ch for ch in encoded if ch not in c)\n\n    if is_palindrome(deleted):\n        return (deleted, True)\n    else:\n        decoded = ''.join(decode(deleted[i:i+3]) for i in range(0, len(deleted), 3))\n        return (decoded, False)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib = [0, 0, 1]\n    for i in range(3, n):\n        fibfib.append(fibfib[i-1] + fibfib[i-2] + fibfib[i-3])\n    mean = sum(fibfib) / n\n    mad = sum(abs(x - mean) for x in fibfib) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fib = [0, 0, 1]\n    for i in range(3, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3])\n        if fib[i] % 2 == 0:\n            fib[i] = product_of_odd_digits(fib[i])\n    return fib[n]\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r' {2,}', '-', text.replace(' ', '_'))\n    length = len(text)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        result[prefix] = histogram\n    return result\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(key=lambda x: (bin(x).count('1'), x))\n    return lst[1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands = common_operands & set(operand_list)\n    if not common_operands:\n        return None\n    common_operands = sorted(list(common_operands))\n    result = common_operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += common_operands[i+1]\n        elif operators[i] == '-':\n            result -= common_operands[i+1]\n        elif operators[i] == '*':\n            result *= common_operands[i+1]\n        elif operators[i] == '//':\n            result //= common_operands[i+1]\n        elif operators[i] == '**':\n            result **= common_operands[i+1]\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in text:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                text = text.replace(i, '')\n                for j in text:\n                    if j in vowels:\n                        text = text.replace(j, '')\n            else:\n                stack.pop()\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    s = s.replace(\",\", \" \")\n    words = s.split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if hashlib.md5(string.encode()).hexdigest().find(hash_substring) != -1:\n            result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = {}\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        if key != key.lower() and key != key.upper():\n            return {}\n        count = 0\n        for char in key:\n            if char in vowels:\n                count += 1\n        result[key] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    even_indices_values = sorted([l[i] for i in range(0, len(l), 2)])\n    for i in range(0, len(l), 2):\n        if is_prime(even_indices_values[i // 2]):\n            l[i] = x\n        else:\n            l[i] = y\n    return l\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = sorted(list(set(a) & set(l1)))\n    if not common:\n        return ([], 0)\n    triples = [(i, j, k) for i in common for j in common for k in common if i < j < k and (i + j + k) % 3 == 0]\n    return (common, len(triples))\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if not is_prime(len(string)):\n        return ''\n\n    for i in range(len(string) - 3, 0, -1):\n        if string[i] not in vowels and string[i-1] in vowels and string[i+1] in vowels:\n            return string[i]\n\n    return ''\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    positive_count = sum(sum_digits(n) > 0 for n in arr)\n    result = sorted(arr, key=lambda n: (-n if n < 0 else n, sum_digits(n)))\n    return result if positive_count % 2 == 0 else result[::-1]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(sorted(filtered_strings), key=len)\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        if -i in common_elements:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def check_bracketing(s):\n        count = 0\n        for c in s:\n            if c == \"(\":\n                count += 1\n            elif c == \")\":\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    if not dict:\n        return False\n\n    for key, value in dict.items():\n        if not (key.islower() or key.isupper()):\n            return False\n        if not check_bracketing(value):\n            return False\n\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
