{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize a list to hold the groups and a stack to track the parentheses\n    groups = []\n    stack = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                current_group = char  # Start a new group\n            else:\n                current_group += char  # Continue the current group\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                current_group += char  # Continue the current group\n                stack.pop()\n                if not stack:  # If the stack is empty, we have a complete group\n                    groups.append(current_group)\n                    current_group = \"\"  # Reset for the next group\n    \n    # Remove duplicates and sort the groups\n    unique_groups = sorted(set(groups))\n    \n    return unique_groups\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not numbers:\n        return float('nan')\n\n    # Calculate the median\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    mid = n // 2\n    median = (sorted_numbers[mid] + sorted_numbers[mid - 1]) / 2 if n % 2 == 0 else sorted_numbers[mid]\n\n    # Calculate the absolute deviations from the median\n    absolute_deviations = [abs(x - median) for x in numbers]\n\n    # Calculate the median of the absolute deviations\n    sorted_deviations = sorted(absolute_deviations)\n    n_devs = len(sorted_deviations)\n    mad = (sorted_deviations[n_devs // 2] + sorted_deviations[n_devs // 2 - 1]) / 2 if n_devs % 2 == 0 else sorted_deviations[n_devs // 2]\n\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    depths = [get_depth(group) for group in groups]\n    return sorted(depths, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    total_sum = sum(num for num in numbers if num >= 0)\n    total_product = 1\n    for num in numbers:\n        if num >= 0:\n            total_product *= num\n    return total_sum, total_product\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    rolling_mins = []\n    current_min = float('inf')\n\n    for number in numbers:\n        current_min = min(current_min, number)\n        rolling_mins.append(current_min)\n\n    return rolling_mins\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return \"\"\n    \n    # Find the longest palindromic prefix\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            # Append the reverse of the suffix to the original string\n            return string + string[i:][::-1]\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Ensure both strings are of the same length by padding the shorter one with leading zeros\n    max_length = max(len(a), len(b))\n    a = a.zfill(max_length)\n    b = b.zfill(max_length)\n\n    # Perform XOR operation\n    result = ''.join('1' if a[i] != b[i] else '0' for i in range(max_length))\n\n    # Return the result string reversed\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    return abs(a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    note_values = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    unique_beats = set(note_values[note] for note in notes if note in note_values)\n    \n    return sorted(unique_beats, reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move one character forward to allow for overlapping\n        \n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert words to their corresponding numeric values\n    numeric_values = [num_dict[word] for word in words]\n\n    # Sort the numeric values in descending order\n    sorted_values = sorted(numeric_values, reverse=True)\n\n    # Convert sorted numeric values back to words\n    sorted_words = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in sorted_values]\n\n    # Join the sorted words into a single string and return\n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n\n    return closest_pair\n"}
{"task_id": "EvoEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)  # All values are the same, return a list of zeros.\n    \n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return sorted(rescaled, reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n <= 1:\n        return n\n    \n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors[::-1]\n"}
{"task_id": "EvoEval/26", "completion": "\n    unique_numbers = list(set(numbers))\n    unique_numbers.reverse()\n    return unique_numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case not in ['lower', 'upper']:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n    result = []\n    for char in string:\n        if char.islower() and exclusive_case == 'upper':\n            result.append(char)\n        elif char.isupper() and exclusive_case == 'lower':\n            result.append(char)\n        else:\n            result.append(char.swapcase())\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted(num for num in l if num > 0)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Find the largest non-zero coefficient to determine the range for the search\n    largest_coeff = max(abs(coeff) for coeff in xs)\n    \n    # Use a simple method like bisection to find a root\n    low, high = -largest_coeff, largest_coeff\n    tolerance = 1e-7\n    max_iterations = 1000\n    iteration = 0\n    \n    while iteration < max_iterations:\n        mid = (low + high) / 2\n        f_mid = poly(xs, mid)\n        \n        if abs(f_mid) < tolerance:\n            return mid  # Found a root\n        \n        if f_mid > 0:\n            high = mid\n        else:\n            low = mid\n        \n        iteration += 1\n    \n    return None  # No root found within the given iterations\n"}
{"task_id": "EvoEval/33", "completion": "\n    sorted_third = sorted((l[i] for i in range(len(l)) if i % 3 == 0), reverse=True)\n    result = l[:]\n    \n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third[j]\n            j += 1\n            \n    return result\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not l:\n        return None\n    min_val = l[0]\n    for num in l:\n        if num < min_val:\n            min_val = num\n    return min_val\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '8' in str(i):\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = sorted(l[::2], reverse=True)\n    result = l[:]\n    result[::2] = even_indices\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements back in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(k):\n        a, b = 0, 1\n        for _ in range(k):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    fib_index = 0\n    while count < n:\n        fib_number = fibonacci(fib_index)\n        if is_prime(fib_number):\n            count += 1\n            if count == n:\n                return fib_number if fib_number % 2 != 0 else None\n        fib_index += 1\n\n    return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if 1 - number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x == 0:\n        return \"0\"\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n - 1) + fib4(n - 2) + (n - 3) + (n - 4)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    \n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return (modp(n // 2, p, q) ** 2) % p * (2 if n % 2 == 1 else 1) % p\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char in vowels)\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [x for x in l if x <= t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"Input should be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    # Find common elements\n    common_elements = set(l1) & set(l2)\n    \n    # Sort the common elements in descending order\n    sorted_common = sorted(common_elements, reverse=True)\n    \n    return sorted_common\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n  # n is prime\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    return sum(range(m, n + 1))\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for char in brackets:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * coeff for i, coeff in enumerate(xs)][1:]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 3) + fibfib(n - 2) - fibfib(n - 1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s and s[-1].lower() in vowels:\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    str_x = str(x)\n    n = len(str_x)\n    shift = shift % n  # Normalize shift to avoid unnecessary full rotations\n    if shift == 0:\n        return str_x\n    shifted = str_x[shift:] + str_x[:shift]\n    return shifted\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(char) for char in s if char.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Parse the input string to extract the number of apples and oranges\n    parts = s.split(',')\n    apples = int(parts[0].split()[0])\n    oranges = int(parts[1].split()[0])\n    \n    # Calculate the number of mangoes\n    mangoes = n + 1 - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    \n    smallest_odd_value = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 1:  # Check if the value is odd\n            if value < smallest_odd_value:\n                smallest_odd_value = value\n                smallest_index = index\n            elif value == smallest_odd_value and index < smallest_index:\n                smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_index, smallest_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n    \n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q, w):\n    def is_balanced(lst):\n        return lst == lst[::-1]\n\n    def is_palindromic(lst):\n        return lst == lst[::-1]\n\n    total_weight = sum(q)\n    return is_balanced(q) and is_palindromic(q) and total_weight <= w and total_weight % 2 == 0\n"}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 < total_chars_lst2:\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a >= 100:\n        return False\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n\n    return len(prime_factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n <= 1:\n        return (x == 1, 0 if x == 1 else None)\n\n    power = 0\n    current = 1\n    while current < x:\n        current *= n\n        power += 1\n\n    if current == x:\n        return (True, power)\n    \n    return (False, None)\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n    if a < 0:\n        return False\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    non_prime_digits = {'0', '1', '4', '6', '8', '9', 'A', 'C', 'E'}\n    count = 0\n    for digit in num:\n        if digit in non_prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_mapping = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        -0.1: 'E'  # Assuming any GPA below 0.0 is an E\n    }\n\n    letter_grades = []\n    for gpa in grades:\n        for threshold in sorted(grade_mapping.keys(), reverse=True):\n            if gpa >= threshold:\n                letter_grades.append(grade_mapping[threshold])\n                break\n\n    return sorted(letter_grades, key=lambda x: grades[letter_grades.index(x)])\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove whitespace and calculate the length of the string\n    length = len(string.replace(\" \", \"\"))\n    \n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Return True if the length is prime, otherwise False\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n < 1:\n        return 0\n\n    # Count n-digit numbers that start with 1\n    start_with_1 = 10**(n - 1)\n\n    # Count n-digit numbers that end with 2\n    end_with_2 = 10**(n - 1)\n\n    # Count n-digit numbers that start with 1 and end with 2\n    start_with_1_end_with_2 = 10**(n - 2) if n > 1 else 0\n\n    # Total count\n    total_count = start_with_1 + end_with_2 - start_with_1_end_with_2\n\n    return total_count\n"}
{"task_id": "EvoEval/84", "completion": "\n    digit_sum = sum(int(digit) for digit in str(N))\n    return hex(digit_sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word, reverse=True))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    \n    # Sort by row descending and column ascending\n    result.sort(key=lambda coord: (-coord[0], coord[1]))\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    \n    unique_array = list(set(array))\n    last_element = unique_array[-1]\n    \n    if last_element % 2 == 0:\n        return sorted(unique_array, reverse=True)\n    else:\n        return sorted(unique_array)\n"}
{"task_id": "EvoEval/89", "completion": "\n    result = []\n    for char in s:\n        if char.isalpha():\n            # Calculate the new character with a shift of 2\n            new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a')) if char.islower() else chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char)  # Non-alphabetic characters remain unchanged\n    return ''.join(result)\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    \n    unique_lst.sort()\n    return unique_lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n\n    # Split the input string into sentences using regex\n    sentences = re.split(r'[.!?]', S)\n\n    # Initialize boredom count\n    boredom_count = 0\n\n    # Check each sentence\n    for sentence in sentences:\n        sentence = sentence.strip()  # Remove leading/trailing whitespace\n        if sentence.startswith(\"I\") and sentence.endswith(\"boredom\"):\n            boredom_count += 1\n\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (abs(x) == abs(y) + abs(z) or abs(y) == abs(x) + abs(z) or abs(z) == abs(x) + abs(y))\n"}
{"task_id": "EvoEval/93", "completion": "\n    def swap_case(c):\n        return c.lower() if c.isupper() else c.upper()\n\n    def replace_vowel(c):\n        vowels = 'aeiouAEIOU'\n        if c in vowels:\n            if c.islower():\n                return chr((ord(c) - ord('a') + 3) % 26 + ord('a')) if c.islower() else chr((ord(c) - ord('A') + 3) % 26 + ord('A'))\n            else:\n                return chr((ord(c) - ord('A') + 3) % 26 + ord('A'))\n        return c\n\n    encoded_message = ''.join(replace_vowel(swap_case(c)) for c in message)\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    smallest_prime = float('inf')\n    for num in lst:\n        if is_prime(num) and num < smallest_prime:\n            smallest_prime = num\n\n    if smallest_prime == float('inf'):\n        return None  # No prime found\n\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n\n    keys = list(dict.keys())\n    \n    if all(k.islower() for k in keys):\n        return True\n    if all(k.isupper() for k in keys):\n        return True\n    \n    return False\n"}
{"task_id": "EvoEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10 + b % 10) % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(1, len(s), 2):  # Start from index 1 and step by 2 to get odd indices\n        if s[i] in 'AEIOU':  # Check if the character is an uppercase vowel\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        num = float(value)\n        if num > 0:\n            return int(num + 0.5) if num % 1 >= 0.5 else int(num)\n        else:\n            return int(num - 0.5) if num % 1 <= -0.5 else int(num)\n"}
