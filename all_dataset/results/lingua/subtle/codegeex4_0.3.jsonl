{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n            else:\n                raise ValueError(\"Unbalanced parentheses\")\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median(sorted([abs(x - median) for x in numbers]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n    result = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n\n    result.append(max_depth)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_value = numbers[0]\n    result = [min_value]\n    for number in numbers[1:]:\n        min_value = min(min_value, number)\n        result.append(min_value)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a[::-1], b[::-1]))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    min_length = min(len(s) for s in strings)\n    shortest_strings = [s for s in strings if len(s) == min_length]\n    return shortest_strings[0] if shortest_strings else None\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_list = music_string.split()\n    music_dict = {}\n    for note in music_list:\n        if note in music_dict:\n            music_dict[note] += 1\n        else:\n            music_dict[note] = 1\n    return sorted(music_dict.keys(), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list = [number_dict[num] for num in numbers_list]\n    numbers_list.sort(reverse=True)\n    return ' '.join([str(num) for num in numbers_list])\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return sorted([(num - min_num) / (max_num - min_num) for num in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    def check(divisor):\n        return n % divisor == 0\n\n    for i in range(1, n+1):\n        if check(i):\n            return i\n    return -1\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(list(set(numbers)), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"At least two coefficients are required\")\n    if xs[0] == 0:\n        raise ValueError(\"The first coefficient must be non-zero\")\n    if xs[1] == 0:\n        raise ValueError(\"The second coefficient must be non-zero\")\n    if xs[-1] == 0:\n        raise ValueError(\"The last coefficient must be non-zero\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the second and last coefficients must be negative\")\n    if xs[0] * xs[1] > 0:\n        raise ValueError(\"The product of the first and second coefficients must be negative\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"The product of the first and last coefficients must be negative\")\n    if xs[1] * xs[-1] > 0:\n        raise ValueError(\"The product of the"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3], reverse=True)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(str(i).count('8') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n % 2 == 0:\n        return None\n    else:\n        return fib(n)\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be a positive integer\")\n    return int(str(x), base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '2'\n    elif n == 2:\n        return '0'\n    elif n == 3:\n        return '0'\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]"}
{"task_id": "EvoEval/49", "completion": "\n    return n % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    return ''.join([char for char in text if char.lower() in 'aeiou'])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1) and set(s0) == set(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i - 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] > l[i - 1]:\n                return False\n        return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s.lower() if c in 'aeiouy')\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # split the string into a list of words\n    words = s.split()\n    # find the index of the word \"apples\"\n    index = words.index(\"apples\")\n    # get the number of apples from the string\n    apples = int(words[index - 1])\n    # find the index of the word \"oranges\"\n    index = words.index(\"oranges\")\n    # get the number of oranges from the string\n    oranges = int(words[index - 1])\n    # calculate the number of mangoes\n    mangoes = n + 1 - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        if len(lst) == 0:\n            return -1\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num, count in freq.items():\n            if count >= num:\n                return num\n        return -1\n    return search(lst)\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    return [lst.pop()] + strange_sort_list(lst)\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * a * b * math.sqrt(1 - (c ** 2) / (2 * a * b)), 3)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q,w):\n        if sum(q)%2==0 and sum(q)<=w:\n            return True\n        else:\n            return False\n    return will_it_fly(q,w)\n"}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 8:\n        if arr[0] == arr[7] and arr[1] == arr[6] and arr[2] == arr[5] and arr[3] == arr[4]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 9:\n        if arr[0] == arr[8] and arr[1] == arr[7] and arr[2] == arr[6] and arr[3] == arr[5]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 10:\n        if arr[0] == arr[9] and arr[1] == arr[8] and arr[2] == arr[7] and arr[3] == arr[6] and arr[4] == arr[5]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 11:\n        if arr[0] == arr[10] and arr[1] == arr"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if sum([len(i) for i in lst1]) > sum([len(i) for i in lst2]):\n            return lst1\n        elif sum([len(i) for i in lst1]) < sum([len(i) for i in lst2]):\n            return lst2\n        else:\n            return lst2\n    return total_match(lst1, lst2)\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return True, 0\n    if x == n:\n        return True, 1\n    if x % n != 0:\n        return False, None\n    if n % x != 0:\n        return False, None\n    if x == n ** int(x ** 0.5):\n        return True, int(x ** 0.5)\n    if n == x ** int(n ** 0.5):\n        return True, int(n ** 0.5)\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == int(a**(1/3))\n    return iscube\n"}
{"task_id": "EvoEval/78", "completion": "\n    # define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # define a list of hexadecimal digits\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    # define a list of non-prime hexadecimal digits\n    non_prime_hex_digits = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    # initialize a counter\n    counter = 0\n    # iterate over the digits in the input string\n    for digit in num:\n        # check if the digit is a non-prime hexadecimal digit\n        if digit in non_prime_hex_digits:\n            # increment the counter\n            counter += 1\n    # return the counter\n    return counter\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade > 3.7:\n            letter_grades.append('A+')\n        elif grade > 3.3:\n            letter_grades.append('A')\n        elif grade > 3.0:\n            letter_grades.append('A-')\n        elif grade > 2.7:\n            letter_grades.append('B+')\n        elif grade > 2.3:\n            letter_grades.append('B')\n        elif grade > 2.0:\n            letter_grades.append('B-')\n        elif grade > 1.7:\n            letter_grades.append('C+')\n        elif grade > 1.3:\n            letter_grades.append('C')\n        elif grade > 1.0:\n            letter_grades.append('C-')\n        elif grade > 0.7:\n            letter_grades.append('D+')\n        elif grade > 0.0:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return sorted(letter_grades, reverse=True)\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n    # Check if the length of the string is a prime number\n    if is_prime(len(string)):\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 10**(n-2) * 2\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(N)[2:].upper()\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(s.split(), key=lambda x: x[::-1]))\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    array.sort()\n    if array[-1] % 2 == 0:\n        array.reverse()\n    return array\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            encrypted += alphabet[(index + 4) % 26]\n        else:\n            encrypted += letter\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    return len(re.findall(r'\\bI.*boredom\\b', S, re.I))\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def is_even(n): Create function takes number Returns true if number is even Returns false if number is odd Examples is_even(2) \u279e True is_even(0) \u279e True is_even(3) \u279e False\n    \"\"\"\n    def is_even(n):\n        if n % 2 == 0:\n            return True\n        else:\n            return False\n\n    print(is_even(2))\n    print(is_even(0))\n    print(is_even(3))\n\n    \"\"\"\n    def is_odd(n): Create function takes number Returns true if number is odd Returns false if number is even Examples is_odd(2) \u279e False is_odd(0) \u279e False is_odd(7) \u279e True\n    \"\"\"\n    def is_odd(n):\n        if n % 2 == 1:\n            return True\n        else:\n            return False\n\n    print(is_odd(2))\n    print(is_odd(0))\n    print(is_odd(7))\n\n    \"\"\"\n    def is_prime(n): Create function takes number Returns true if number is prime Returns false if number is not prime Examples is_prime(2) \u279e True is_prime(4) \u279e False is_prime(11) \u279e True\n    \"\"\"\n    def is_prime(n):\n        if n == 1:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n\n    print(is_prime(2))\n    print(is_prime(4))\n    print(is_prime(11))\n\n    \"\"\"\n    def is_square(n): Create function takes number Returns true if number is square Returns false if number is not square Examples is_square(4) \u279e True is_square(5) \u279e False is_square(25) \u279e True\n    \"\"\"\n    def is_square(n):\n        if n == 0:\n            return"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97).upper()\n            else:\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    return sum_digits(min(primes))\n\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n:\n            break\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a*b) % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper() and s.index(c) % 2 == 0)\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        if value.isdigit():\n            return int(value)\n        else:\n            number = float(value)\n            if number >= 0:\n                return int(number + 0.5)\n            else:\n                return int(number - 0.5)\n    return closest_integer\n"}
