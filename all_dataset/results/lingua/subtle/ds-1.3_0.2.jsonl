{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n    result.sort()\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum(abs(x - median) for x in numbers) / length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    xor_result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n    # Reverse the result\n    reversed_xor_result = xor_result[::-1]\n\n    return reversed_xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    unique_beats = set()\n    for note in music_string:\n        if note == 'o':\n            unique_beats.add(4)\n        elif note == 'o|':\n            unique_beats.add(2)\n        elif note == '.|':\n            unique_beats.add(1)\n    return sorted(list(unique_beats), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x])[::-1])\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    if result is None:\n        return (numbers[-1], numbers[0])\n    else:\n        return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    for i in range(len(numbers)):\n        numbers[i] = (numbers[i] - min_val) / (max_val - min_val)\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    if string == '':\n        return 1\n    else:\n        return 1 + strlen(string[1:])\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return [round(i, 2) for i in range(-100, 100) if round(poly(xs, i), 2) == 0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(0, len(l), 3)]\n    l_third.sort(reverse=True)\n    for i in range(0, len(l), 3):\n        l[i] = l_third.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int) -> int:\n        return str(n).count(str(digit))\n\n    def fizz_buzz_count(n: int) -> int:\n        return sum(count_digit(i, 8) for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n    return fizz_buzz_count(n)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse the cycling operation.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        else:\n            a, b = 0, 1\n            for _ in range(n - 1):\n                a, b = b, a + b\n            return b\n\n    i, count, fib_num = 0, 0, 0\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib_num if count == n else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            l[i][j] += 1\n    return l\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return str(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 2 % p\n    else:\n        return pow(2, n+q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        return monotonic(l[1:])\n    if l[0] < l[1]:\n        return monotonic(l[1:])\n    if l[0] > l[1]:\n        return all(x < y for x, y in zip(l[1:], l[2:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(common_list, reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n < m:\n        return 0\n    else:\n        return m + sum_to_n(n-1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            elif (bracket == \"]\" and stack[-1] != \"[\") or (bracket == \"}\" and stack[-1] != \"{\"):\n                return False\n            else:\n                stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    derivative_list = []\n    for i in range(1, len(xs)):\n        derivative_list.append(i * xs[i])\n    return derivative_list\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-3] + fibfib_list[-2] - fibfib_list[-1])\n        return fibfib_list[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    def reverse(s):\n        return s[::-1]\n\n    def shift_left(s, shift):\n        return s[shift:] + s[:shift]\n\n    s = str(x)\n    if shift > len(s):\n        return reverse(s)\n    else:\n        return shift_left(s, shift)\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    total_fruits = apples + oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [(i, val) for i, val in enumerate(arr) if val % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values, key=lambda x: (x[1], x[0]))\n    return [smallest_odd_value[0], smallest_odd_value[1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        freq_dict = {}\n        for num in lst:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n        for i in range(1, max(freq_dict.values())+1):\n            if i not in freq_dict:\n                return -1\n        return i\n\n    print(search([4, 1, 2, 2, 3, 1])) # 1\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # 1\n    print(search([5, 5, 4, 4, 4])) # -1\n\nThe function search() takes a list of integers as input. It first creates a dictionary to store the frequency of each integer in the list. Then it iterates over the range from 1 to the maximum frequency in the list. If it finds a number that is not in the dictionary, it returns -1. Otherwise, it returns the first number that is not in the dictionary.\n\nThe time complexity of the function is O(n), where n is the number of elements in the list. The space complexity is also O(n), as in the worst case scenario, all elements in the list are unique and store in the dictionary.\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    def strange_sort_list(lst):\n        if not lst:\n            return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(lst) + [max_val]\n\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        elif sum(q) == w:\n            return True\n        else:\n            return not any(i in q for i in reversed(q))\n\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3], 5))\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_changes(arr, start, end):\n        changes = 0\n        while start < end:\n            if arr[start] != arr[end]:\n                changes += 1\n            start += 1\n            end -= 1\n        return changes\n\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += count_changes(arr, i + 1, n - i - 1)\n        else:\n            changes += count_changes(arr, i, n - i - 1)\n    return changes\n\n"}
{"task_id": "EvoEval/74", "completion": "\n\n    def total_match(lst1, lst2):\n        count1 = sum(s.count(c) for s in lst1 for c in s)\n        count2 = sum(s.count(c) for s in lst2 for c in s)\n        if count1 > count2:\n            return lst1\n        elif count1 < count2:\n            return lst2\n        else:\n            return lst2 if lst1 > lst2 else lst1\n\n    print(total_match([], []))\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))\n    print(total_match(['hi', 'admin'], ['hi', 'admin']))\n    print(total_match(['4'], ['1', '2', '3', '4', '5']))\n\n\ntotal_match([], [])\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])\ntotal_match(['hi', 'admin'], ['hi', 'admin'])\ntotal_match(['4'], ['1', '2', '3', '4', '5'])\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                for l in range(k + 1, len(primes)):\n                    if primes[i] * primes[j] * primes[k] * primes[l] == a:\n                        return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return (True, 0)\n    if x == 2:\n        return (True, 1)\n    if x == 8:\n        return (True, 3)\n    if x == 3:\n        return (False, None)\n    if x == 5:\n        return (False, None)\n\n    i = 0\n    while i**n <= x:\n        if i**n == x:\n            return (True, i)\n        i += 1\n    return (False, None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        c = a ** (1./3.)\n        return c == int(c)\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in num:\n        if i in hex_digits:\n            if hex_digits[i] in primes:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else 'A' if grade == 3.7 else 'B+' if grade == 3.3 else 'B' if grade == 3.0 else 'B-' if grade == 2.7 else 'C+' if grade == 2.3 else 'C' if grade == 2.0 else 'C-' if grade == 1.7 else 'D+' if grade == 1.3 else 'D' if grade == 1.0 else 'D-' for grade in grades]\n\n    return grade_equation(grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = len(string.replace(\" \", \"\"))\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 9 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def hex_sum(N):\n        return hex(sum(int(digit) for digit in str(N)))[2:]\n\n    return hex_sum(N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=ord, reverse=True)\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    def sum_of_first_last(array):\n        if not array:\n            return 0\n        return array[0] + array[-1]\n\n    def remove_duplicates(array):\n        return list(dict.fromkeys(array))\n\n    array = remove_duplicates(array)\n\n    if sum_of_first_last(array) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max:\n            second_max = num\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.')\n    boredom_count = 0\n    for sentence in S:\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z):\n        if (x == abs(int(x)) + abs(int(y)) + abs(int(z)) or\n            y == abs(int(x)) + abs(int(y)) + abs(int(z)) or\n            z == abs(int(x)) + abs(int(y)) + abs(int(z))):\n            return True\n        else:\n            return False\n\n    print(any_int(5, 2, 7))  # \u279e True\n    print(any_int(3, 2, 2))  # \u279e False\n    print(any_int(3, -2, 1))  # \u279e True\n    print(any_int(3.6, -2.2, 2))  # \u279e False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += chr(ord(char) + 3)\n            else:\n                encoded_message += chr(ord(char) + 3).lower()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(i) for i in lst if is_prime(i))\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [num for num in range(n, 0, -1) if is_prime(num)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    return sum(int(digit) for digit in str(abs(a*b)))\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        return round(float(value))\n\n    print(closest_integer(\"10\"))\n    print(closest_integer(\"15.3\"))\n    print(closest_integer(\"14.5\"))\n    print(closest_integer(\"-14.5\"))\n\n"}
