{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            depth += 1\n            current_group.append(char)\n        elif char == \")\":\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(\"\".join(current_group))\n                current_group = []\n\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not numbers:\n        return 0.0\n\n    numbers.sort()\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 != 0 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    mad = median([abs(x - median) for x in numbers])\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    result = []\n    for number in numbers[:-1]:\n        result.extend([number, delimeter])\n    result.append(numbers[-1])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return sorted([max_depth(group) for group in paren_string.split(' ') if group], reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_so_far = float('inf')\n    result = []\n    for num in numbers:\n        min_so_far = min(min_so_far, num)\n        result.append(min_so_far)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[::-1][:len(string)-i] + string\n    return string[::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // greatest_common_divisor(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(sorted_nums)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers) - 1):\n        current_diff = abs(numbers[i + 1] - numbers[i])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair if closest_pair[0] < closest_pair[1] else (closest_pair[1], closest_pair[0])\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    if string == '':\n        return 1\n    else:\n        return strlen(string[1:]) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while (n % divisor) == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors[::-1]\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    counts = {}\n    for num in numbers:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return sorted([num for num in numbers if counts[num] == 1], reverse=True)\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    else:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) == 1:\n        return -xs[0]\n    else:\n        return find_zero([xs[1] / xs[0]] + [i * xs[i] / xs[0] for i in range(1, len(xs))])\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_third.sort(reverse=True)\n    l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l_third.pop(0))\n        else:\n            l_prime.append(l[i])\n    return l_prime\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_num = l[0]\n    for i in l:\n        if i < min_num:\n            min_num = i\n    return min_num\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i // 2]\n    return l\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while True:\n        fib_num = fibonacci(i)\n        if fib_num % 2 == 0:\n            i += 1\n            continue\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n ** 2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(digits))\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return ''.join([char for char in text if char in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    common_elements = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == m:\n        return n\n    else:\n        return n + sum_to_n(n - 1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"[\":\n            balance += 1\n        elif bracket == \"]\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    elif shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n + 1 - apples - oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 != 0]\n    return list(min(odd_nodes, default=([], float('inf')))) if odd_nodes else []\n"}
{"task_id": "EvoEval/69", "completion": "\ndef search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq):\n        if freq[num] >= num:\n            return num\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\ndef strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(max(lst))\n        lst.remove(max(lst))\n        if lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n"}
{"task_id": "EvoEval/71", "completion": "\n\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\"\"\"\n\"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\"\"\"\n\"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\"\"\"\n\"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\"\"\"\n\"\"\"\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and"}
{"task_id": "EvoEval/72", "completion": "\n"}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        count1 = sum(len(s) for s in lst1)\n        count2 = sum(len(s) for s in lst2)\n        \n        if count1 > count2:\n            return lst1\n        elif count2 > count1:\n            return lst2\n        else:\n            return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return False, None\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True, power\n        power += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        '''\n        Write function takes integer a returns True if integer cube of positive integer number. assume input always valid.\n        Examples:\n        iscube(1) ==> True\n        iscube(2) ==> False\n        iscube(-1) ==> False\n        iscube(64) ==> True\n        iscube(0) ==> True\n        iscube(180) ==> False\n        '''\n        a = abs(a)\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        '''\n        Write function takes integer a returns True if integer cube of positive integer number. assume input always valid.\n        Examples:\n        iscube(1) ==> True\n        iscube(2) ==> False\n        iscube(-1) ==> False\n        iscube(64) ==> True\n        iscube(0) ==> True\n        iscube(180) ==> False\n        '''\n        a = abs(a)\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        '''\n        Write function takes integer a returns True if integer cube of positive integer number. assume input always valid.\n        Examples:\n        iscube(1) ==> True\n        iscube(2) ==> False\n        iscube(-1) ==> False\n        iscube(64) ==> True\n        iscube(0) ==> True\n        iscube(180) ==> False\n        '''\n        a = abs(a)\n        cube_root = round(a ** (1. / 3.))\n        return cube_root ** 3 == a\n    \"\"\"\n    def iscube(a):\n        '''\n        Write function takes integer a returns True if integer cube of positive integer number. assume input always"}
{"task_id": "EvoEval/78", "completion": "\n    # define a list of non-prime hexadecimal digits\n    non_prime_hex_digits = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    \n    # initialize a counter for non-prime hexadecimal digits\n    non_prime_count = 0\n    \n    # iterate over each character in the input string\n    for char in num:\n        # if the character is a non-prime hexadecimal digit, increment the counter\n        if char in non_prime_hex_digits:\n            non_prime_count += 1\n    \n    # return the count of non-prime hexadecimal digits\n    return non_prime_count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    # your code here\n    pass\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * (10 ** (n - 2))\n"}
{"task_id": "EvoEval/84", "completion": "\n    hex_sum = 0\n    while N > 0:\n        hex_sum += N % 16\n        N //= 16\n    return hex(hex_sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    return sorted(coords, key=lambda x: (-x[0], x[1]))\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(set(array), reverse=True)\n    else:\n        return sorted(set(array))\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            encrypted_char = chr((ord(char) - base + shift) % 26 + base)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\") and sentence.endswith(\"boredom\"):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\ndef any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check if one number is equal to the sum of the absolute values of the other two\n        return x + y == z or x + z == y or y + z == x\n    return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the new vowel\n                new_vowel = chr((ord(char.lower()) - 97 + 3) % 26 + 97)\n                # Swap case and replace vowel\n                encoded_message += new_vowel.swapcase()\n            else:\n                # Swap case for consonants\n                encoded_message += char.swapcase()\n        else:\n            # Non-alphabetic characters are added as is\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    smallest_prime = float('inf')\n    for num in lst:\n        if num > 1 and is_prime(num) and num < smallest_prime:\n            smallest_prime = num\n\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower = upper = False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower = True\n        elif key.isupper():\n            upper = True\n        if lower and upper:\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) * (b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(1, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(float(value)) if float(value).is_integer() else round(float(value)) if float(value) > 0 else round(float(value)) - 1 if float(value) < 0 else 0\n"}
