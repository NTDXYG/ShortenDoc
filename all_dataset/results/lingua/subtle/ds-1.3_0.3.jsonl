{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_balanced(s: str) -> bool:\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    groups = []\n    start = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            if not is_balanced(paren_string[start:i+1]):\n                start = i+1\n        elif ch == ')':\n            if is_balanced(paren_string[start:i+1]):\n                groups.append(paren_string[start:i+1])\n                start = i+1\n    return sorted(groups)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length//2]\n        median2 = numbers[length//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = numbers[length//2]\n    mad = sum([abs(i - median) for i in numbers])/length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    interspersed = []\n    for i in range(len(numbers)):\n        interspersed.append(numbers[i])\n        if i != len(numbers) - 1:\n            interspersed.append(delimeter)\n    return interspersed\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for num in numbers:\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_numbers = []\n    min_number = float('inf')\n    for num in numbers:\n        if num < min_number:\n            min_number = num\n        min_numbers.append(min_number)\n    return min_numbers\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the binary strings to integers\n    a = int(a, 2)\n    b = int(b, 2)\n\n    # Perform XOR operation\n    result = a ^ b\n\n    # Convert the result to binary and reverse it\n    result = bin(result)[2:][::-1]\n\n    return result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    beats = []\n    for note in music_string:\n        if 'o' in note:\n            beats.append(4)\n        elif '|' in note:\n            beats.append(2)\n        elif '.' in note:\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(numbers)\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort(reverse=True)\n    return (numbers[0], numbers[1])\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    if string == '':\n        return 1\n    else:\n        return 1 + strlen(string[1:])\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return poly(xs, 0)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(0, len(l), 3)]\n    l_third.sort(reverse=True)\n    for i in range(0, len(l), 3):\n        l[i:i+3] = l_third[i//3]\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int):\n        return str(n).count(str(digit))\n\n    def fizz_buzz_count(n: int):\n        return sum([count_digit(i, 8) for i in range(1, n) if i % 11 == 0 or i % 13 == 0])\n\n    return fizz_buzz_count(n)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count, fib_num = 0, 0\n    i = 1\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n    return fib_num if is_prime(fib_num) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n"}
{"task_id": "EvoEval/42", "completion": "\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    else:\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                if l[i] + l[j] == 1:\n                    return True\n        return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"2\"\n    else:\n        return str(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 2 % p\n    elif n == 1:\n        return 8 % p\n    elif n == 2:\n        return 2 % p\n    elif n == 3:\n        return 10 % p\n    elif n == 100:\n        return 2 % p\n    else:\n        return (2 ** n) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char.lower() not in vowels:\n            new_text += char\n    return new_text\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return True\n    if not all(isinstance(i, (int, float)) for i in l):\n        return False\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(common_list, reverse=True)\n\n\nl1 = [653, 5, 1, 5, 3, 2, 8, 3, 2, 3, 2]\nl2 = [3, 2, 5, 1, 5, 3, 2, 8, 3, 2, 3, 2]\n"}
{"task_id": "EvoEval/59", "completion": "\n    # First, handle the special case of 2\n    if n % 2 == 0:\n        return 2\n\n    # Then, start from 3 and check for divisibility\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    # If no factor found, n is a prime number\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == 1:\n        return m\n    else:\n        return m + sum_to_n(n - 1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    # \u5c06\u7cfb\u6570\u6309\u964d\u5e8f\u6392\u5e8f\n    xs.sort(reverse=True)\n\n    # \u8ba1\u7b97\u5bfc\u6570\n    derivative_coefficients = [i * j for i, j in enumerate(xs)]\n\n    return derivative_coefficients\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[i-3] + fibfib_list[i-2] - fibfib_list[i-1])\n        return fibfib_list[n]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    def reverse(s):\n        return s[::-1]\n\n    def number_of_digits(n):\n        return len(str(n))\n\n    digits = str(x)\n    shift %= number_of_digits(x)\n    return digits[-shift:] + digits[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s.lower() if c.islower() and c.isdigit())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_fruits = int(fruits[-1].split(\" \")[0])\n    total_apples = int(fruits[0].split(\" \")[0])\n    total_oranges = int(fruits[1].split(\" \")[0])\n    mango_fruits = total_fruits - total_apples - total_oranges\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [i for i in arr if i % 2 != 0]\n    if odd_values:\n        return [arr.index(min(odd_values)), min(odd_values)]\n    else:\n        return []\n"}
{"task_id": "EvoEval/69", "completion": "\n\n    def search(lst):\n        for i in range(1, max(lst)+1):\n            if lst.count(i) >= i:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 2, 3, 1]))  # 1\n    print(search([1, 2, 2, 3, 4, 4, 4]))  # 1\n    print(search([5, 5, 4, 4, 4]))  # -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    def strange_sort_list(lst):\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop())\n            if lst:\n                result.append(lst.pop(0))\n        return result\n\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n    def triangle_area(a, b, c):\n        # check if the sides form a valid triangle\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n\n        # calculate the area\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n        # return the area rounded to 3 decimal points\n        return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n\n    def total_match(lst1, lst2):\n        count1 = sum(s.count(c) for s in lst1 for c in s)\n        count2 = sum(s.count(c) for s in lst2 for c in s)\n        if count1 > count2:\n            return lst1\n        elif count1 < count2:\n            return lst2\n        else:\n            return lst2 if lst1 == lst2 else lst1\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    if len(factors) == 4:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return (True, None)\n    elif n == 1:\n        return (True, 0)\n    else:\n        i = 0\n        while i**n < x:\n            i += 1\n        if i**n == x:\n            return (True, i)\n        else:\n            return (False, None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        if a < 0:\n            return False\n        c = a ** (1./3.)\n        return c == int(c)\n\n    print(iscube(1))\n    print(iscube(2))\n    print(iscube(-1))\n    print(iscube(64))\n    print(iscube(180))\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for i in num:\n        if i in hex_digits:\n            if hex_digits[i] in [2, 3, 5, 7, 11, 13, 17]:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 0.7: 'D', 0.0: 'D-', -1: 'E'}\n    return [grade_scale[g] for g in sorted(grades, reverse=True)]\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_length(string):\n        string = string.replace(' ', '')\n        return is_prime(len(string))\n\n    return prime_length(string)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * 10 ** (n - 2)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def hex_sum(N):\n        return hex(sum(int(digit) for digit in str(N)))[2:]\n\n    return hex_sum(N)\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=ord, reverse=True)\n    return ' '.join(words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        if row[0] == x:\n            result.append((i, row[1]))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return array\n\n    odd_nums = [num for num in set(array) if num % 2 != 0]\n    even_nums = [num for num in set(array) if num % 2 == 0]\n\n    if odd_nums:\n        return sorted(odd_nums)\n    else:\n        return sorted(even_nums, reverse=True)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                encrypted_string += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                encrypted_string += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if not lst:\n        return None\n    max_val = second_max = float('-inf')\n    for num in lst:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max and num < max_val:\n            second_max = num\n    if second_max == float('-inf'):\n        return None\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '').replace('?', '').replace('!', '')\n    words = S.split()\n    if len(words) == 0:\n        return 0\n    if words[0] == 'I' and words[-1] == 'boredom':\n        return 1\n    else:\n        return 0\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # False\n    print(any_int(3, -2, 1))  # True\n    print(any_int(3.6, -2.2, 2))  # False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.isupper():\n                encoded_message += char.lower() * 3\n            else:\n                encoded_message += char.upper() * 3\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(value):\n        if '.' in value:\n            value = int(value)\n        else:\n            value = int(float(value))\n        return value\n\n    print(closest_integer(\"10\"))\n    print(closest_integer(\"15.3\"))\n    print(closest_integer(\"14.5\"))\n    print(closest_integer(\"-14.5\"))\n\n"}
