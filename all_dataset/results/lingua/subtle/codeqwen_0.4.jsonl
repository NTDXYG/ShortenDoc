{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part, decimal_part = divmod(number, 1)\n    return integer_part, decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    n = len(numbers)\n    median = numbers[n // 2] if n % 2 != 0 else (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    mad = [abs(x - median) for x in numbers]\n    mad_median = numbers[n // 2] if n % 2 != 0 else (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    return mad_median\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return sorted(max_depth(group) for group in paren_string.split())[::-1]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = sum(num for num in numbers if num >= 0)\n    product_of_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            product_of_numbers *= num\n    return sum_of_numbers, product_of_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_num = float('inf')\n    result = []\n    for num in numbers:\n        min_num = min(min_num, num)\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if i != j else '0' for i, j in zip(a, b))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // greatest_common_divisor(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                beats.append(4)\n                i += 2\n            else:\n                beats.append(1)\n                i += 1\n        elif music_string[i] == '.' and i + 1 < len(music_string) and music_string[i + 1] == '|':\n            beats.append(2)\n            i += 2\n        else:\n            i += 1\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    start = 0\n    while start < len(string):\n        position = string.find(substring, start)\n        if position != -1:\n            count += 1\n            start = position + 1\n        else:\n            break\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(sorted_nums)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            current_diff = abs(numbers[j] - numbers[i])\n            if current_diff < min_diff:\n                min_diff = current_diff\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    count = 0\n    for i in string:\n        count += 1\n    return count\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors[::-1]\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    else:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    x = 0\n    while True:\n        if poly(xs, x) == 0:\n            return x\n        x -= poly(xs, x) / (poly(xs, x + 0.0001) - poly(xs, x))\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_copy = l.copy()\n    l_copy[::3] = sorted(l[::3], reverse=True)\n    return l_copy\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    l.sort(reverse=True)\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_num = l[0]\n    for i in l:\n        if i < min_num:\n            min_num = i\n    return min_num\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            if str(i).count('8') > 0:\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    for i in range(0, len(even_indices)):\n        l[2 * i] = even_indices[i]\n    return l\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num <= 0:\n            return None\n        elif num == 1:\n            return 0\n        elif num == 2:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if fib_num is None:\n            break\n        if is_prime(fib_num) and fib_num % 2 == 0:\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n**2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 9:\n        return \"Invalid base\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"2\"\n    elif n == 2:\n        return \"0\"\n    elif n == 3:\n        return \"2\"\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n, p) % q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return ''.join([char for char in text if char in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(set(s0)) == len(set(s1))\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    result = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            if l1[i] not in result:\n                result.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n < m:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return fibfib(n - 3) + fibfib(n - 2) - fibfib(n - 1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    return x[shift:] + x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    #split the string into two parts\n    fruits = s.split(\" \")\n    #get the number of apples and oranges\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    #calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [node for node in arr if node % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values)\n    smallest_odd_value_indices = [i for i, node in enumerate(arr) if node == smallest_odd_value]\n    return [smallest_odd_value, smallest_odd_value_indices[0]]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    freq = Counter(lst)\n    for i in range(1, max(lst)+1):\n        if freq[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\nfrom typing import List\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n    \n    # Test cases\n    assert triangle_area(3, 4, 5) == 6.000\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(5, 5, 5) == 10.825\n    assert triangle_area(6, 8, 10) == 24.000\n    assert triangle_area(7, 10, 5) == 16.248\n    print(\"All test cases passed.\")\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    def balanced(lst):\n        return sum(lst) % 2 == 0\n    \n    return balanced(q) and is_palindrome(q) and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if not lst1 and not lst2:\n            return []\n        elif len(lst1) == len(lst2):\n            return lst2\n        else:\n            total_chars_lst1 = sum(len(s) for s in lst1)\n            total_chars_lst2 = sum(len(s) for s in lst2)\n            if total_chars_lst1 > total_chars_lst2:\n                return lst1\n            else:\n                return lst2\n    \n    # Test cases\n    assert total_match([], []) == []\n    assert total_match(['hi', 'admin'], ['hI', 'Hi']) == ['hi', 'admin']\n    assert total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin', 'project']\n    assert total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hi', 'admin']\n    assert total_match(['4'], ['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\n    assert total_match(['hi '], ['hi', 'admin']) == ['hi', 'admin']\n    assert total_match(['hi '], ['hi', 'hi', 'admin']) == ['hi', 'hi', 'admin']\n    assert total_match(['hi '], ['hi', 'hi', 'admin', 'project']) == ['hi', 'hi', 'admin', 'project']\n    assert total_match(['hi '], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert total_match(['hi '], ['4']) == ['4']\n    assert total_match(['hi '], ['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\n    assert total_match(['hi '], ['1', '2', '3', '4', '5', '6']) == ['1', '2', '3', '4', '5', '6']\n    assert"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return False, None\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True, power\n        power += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        return a**(1./3).is_integer()\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == round(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return a**(1./3) == int(a**(1./3))\n"}
{"task_id": "EvoEval/78", "completion": "\n    # define a set of non-prime hexadecimal digits\n    non_prime_hex_digits = {'0', '1', '4', '6', '8', '9', 'A', 'C', 'E'}\n    \n    # count the number of non-prime hexadecimal digits in the input string\n    count = sum(1 for digit in num if digit in non_prime_hex_digits)\n    \n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 18\n    else:\n        return 18 * (10 ** (n - 2))\n"}
{"task_id": "EvoEval/84", "completion": "\n    sum_digits = 0\n    while N > 0:\n        sum_digits += N % 10\n        N //= 10\n    return hex(sum_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even_sum += lst[i]\n        else:\n            odd_sum += lst[i]\n    return odd_sum if odd_sum > even_sum else even_sum\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Split the string into words\n    words = s.split()\n    \n    # Sort the words based on the ASCII value of their last character\n    words.sort(key=lambda word: -ord(word[-1]))\n    \n    # Join the sorted words back into a string\n    return ' '.join(words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    else:\n        array = list(set(array))\n        array.sort()\n        if len(array) % 2 == 0:\n            return array\n        else:\n            return array[::-1]\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                start = ord('a')\n            else:\n                start = ord('A')\n            encrypted_char = chr((ord(char) - start + shift) % 26 + start)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = S.split('.')\n    boredom_count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I' and 'boredom' in words:\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\ndef any_int(x, y, z):\n    return all(isinstance(i, int) for i in [x, y, z]) and abs(x) == abs(y) == abs(z)\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the vowel 3 places ahead in the alphabet\n                if char.lower() == 'e':\n                    new_char = 'b'\n                elif char.lower() == 'a':\n                    new_char = 'd'\n                elif char.lower() == 'i':\n                    new_char = 'k'\n                elif char.lower() == 'o':\n                    new_char = 'q'\n                elif char.lower() == 'u':\n                    new_char = 'w'\n                else:\n                    new_char = chr(ord(char) + 2)\n                # Swap case\n                new_char = new_char.swapcase()\n            else:\n                new_char = char\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_sum(lst):\n        return sum(n for n in lst if is_prime(n))\n\n    return [prime_sum(lst[i:i+n]) for i in range(0, len(lst), n)]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict.keys():\n        if len(key) < 3:\n            return False\n        if not key.isalpha():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 1, -1) if is_prime(i)]\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) * (b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(1, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(float(value)) if float(value).is_integer() else round(float(value), -len(str(int(float(value)))) + 1) if float(value) > 0 else round(float(value), len(str(int(float(value)))) - 1) if float(value) < 0 else 0\n"}
