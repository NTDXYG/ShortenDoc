{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    groups = []\n    stack = []\n    start = 0\n    for i, c in enumerate(paren_string):\n        if c == '(':\n            if not stack:\n                start = i\n            stack.append(c)\n        elif c == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start:i+1])\n    return sorted(groups)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median(sorted([abs(x - median) for x in numbers]))\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    result.sort(reverse=True)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(min(result[-1], numbers[i]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[:i]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a[::-1], b[::-1]))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_list = music_string.split()\n    music_dict = {}\n    for note in music_list:\n        if note in music_dict:\n            music_dict[note] += 1\n        else:\n            music_dict[note] = 1\n    music_dict = dict(sorted(music_dict.items(), key=lambda item: item[1], reverse=True))\n    return list(music_dict.keys())\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list = [number_dict[num] for num in numbers_list]\n    numbers_list.sort(reverse=True)\n    return ' '.join([str(num) for num in numbers_list])\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in sorted(numbers, reverse=True)]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(list(set(numbers)), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if xs[0] == 0:\n        raise ValueError(\"First coefficient must be non-zero\")\n    if xs[1] == 0:\n        raise ValueError(\"Second coefficient must be non-zero\")\n    if xs[0] * xs[-1] > 0:\n        raise ValueError(\"Polynomial must have opposite signs at ends\")\n    if len(xs) % 2 == 0:\n        raise ValueError(\"Polynomial must have odd degree\")\n    if xs[0] > 0:\n        return -xs[1] / xs[0]\n    else:\n        return -xs[-1] / xs[0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x for i, x in enumerate(l) if i % 3 != 0] + sorted([x for i, x in enumerate(l) if i % 3 == 0], reverse=True)\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted(l[::2], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n % 2 == 0:\n        return None\n    else:\n        fib = [0, 1]\n        for i in range(2, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2])\n        for i in range(n + 1):\n            if is_prime(fib[i]):\n                return fib[i]\n        return None"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"x must be a positive integer\")\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return \"\".join(digits[::-1])\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    return ''.join([char for char in text if char.lower() in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    for c in s0:\n        if c not in s1:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i - 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] > l[i - 1]:\n                return False\n        return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s.lower() if c in 'aeiou' and (c != 'y' or c == s[-1]))\n"}
{"task_id": "EvoEval/65", "completion": "\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # split the string into two parts: apples and oranges\n    apples, oranges = s.split(', ')\n    # convert the number of apples and oranges to integers\n    apples = int(apples.split(' ')[0])\n    oranges = int(oranges.split(' ')[0])\n    # calculate the number of mangoes\n    mangoes = n + 1 - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        freq = {}\n        for num in lst:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n        for num in sorted(freq.keys()):\n            if freq[num] >= num:\n                return num\n        return -1\n    print(search([4, 1, 2, 2, 3, 1]))\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n    print(search([5, 5, 4, 4, 4]))\n    print(search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        if not lst:\n            return []\n        lst.sort(reverse=True)\n        return [lst.pop(0)] + strange_sort_list(lst[1:])\n    return strange_sort_list(lst)\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(s * (s - a) * (s - b) * (s - c) ** 0.5, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n        else:\n            return False\n    \"\"\"\n    def will_it_fly(q,w):\n        if sum(q) > w:\n            return False\n        if sum(q) % 2 == 0 and sum(q) <= w:\n            return True\n       "}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[3] or arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        elif arr[0] == arr[4] or arr[1] == arr[3]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        elif arr[0] == arr[5] and arr[1] == arr[4] or arr[1] == arr[4] and arr[2] == arr[3] or arr[0] == arr[5] and arr[2] == arr[3]:\n            return 1\n        elif arr[0] == arr[5] or arr[1] == arr[4] or arr[2] == arr[3]:\n            return 2\n        else:\n            return 3\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        elif arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] or arr[0] == arr[6] and arr[1] == arr[5] and arr[3] == arr[3] or arr[0] == arr[6"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        if sum([len(i) for i in lst1]) > sum([len(i) for i in lst2]):\n            return lst1\n        elif sum([len(i) for i in lst1]) < sum([len(i) for i in lst2]):\n            return lst2\n        else:\n            return lst2"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n    return len(factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == n:\n        return True, 1\n    if n == 1:\n        return True, 0\n    if n == x:\n        return True, 1\n    if x % n != 0:\n        return False, None\n    if n % x != 0:\n        return False, None\n    if x == n ** 2:\n        return True, 2\n    if x == n ** 3:\n        return True, 3\n    if x == n ** 4:\n        return True, 4\n    if x == n ** 5:\n        return True, 5\n    if x == n ** 6:\n        return True, 6\n    if x == n ** 7:\n        return True, 7\n    if x == n ** 8:\n        return True, 8\n    if x == n ** 9:\n        return True, 9\n    if x == n ** 10:\n        return True, 10\n    if x == n ** 11:\n        return True, 11\n    if x == n ** 12:\n        return True, 12\n    if x == n ** 13:\n        return True, 13\n    if x == n ** 14:\n        return True, 14\n    if x == n ** 15:\n        return True, 15\n    if x == n ** 16:\n        return True, 16\n    if x == n ** 17:\n        return True, 17\n    if x == n ** 18:\n        return True, 18\n    if x == n ** 19:\n        return True, 19\n    if x == n ** 20:\n        return True, 20\n    if x == n ** 21:\n        return True, 21\n    if x == n ** 22:\n        return True, 22\n    if x == n ** 23:\n        return True, 23\n    if x == n ** 24:\n        return True, 24\n    if x == n ** 25:\n        return True, 25\n    if x == n ** 26:\n        return True, 26\n    if x == n ** 27:\n        return True, 27\n    if x == n ** 28:\n        return True"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n        else:\n            return a**(1/3) == round(a**(1/3))\n    \"\"\"\n    def iscube(a):\n        if a < 0:\n            return False\n       "}
{"task_id": "EvoEval/78", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = {'2', '3', '5', '7', 'B', 'D', 'F'}\n    count = 0\n    for digit in num:\n        if digit not in primes and not is_prime(int(digit, 16)):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return f\"db{bin(decimal)[2:]}bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return sorted(letter_grades)\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    return len(string.replace(' ', '')) in primes(1, 100)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 9 * (10 ** (n - 2)) + starts_one_ends(n - 1)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(N)[2:].upper()\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(''.join(sorted(word, reverse=True)) for word in s.split(' '))\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # create a copy of the array\n    array_copy = array.copy()\n    # sort the array in ascending order\n    array_copy.sort()\n    # check if the sum of the first and last elements is even or odd\n    if (array_copy[0] + array_copy[-1]) % 2 == 0:\n        # if even, sort the array in descending order\n        array_copy.sort(reverse=True)\n    # remove duplicate values from the array\n    array_copy = list(set(array_copy))\n    # return the sorted array\n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for letter in s:\n        if letter in alphabet:\n            index = alphabet.index(letter)\n            encrypted += alphabet[index + 4]\n        else:\n            encrypted += letter\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    return len(re.findall(r'\\bI.*?boredom\\b', S, re.I))\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and y == int(y) and z == int(z)):\n            return True\n        else:\n            return False\n    \"\"\"\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and y == int(y) and z == int(z)):\n            return True\n        else:\n            return False\n    \"\"\"\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and y == int(y) and z == int(z)):\n            return True\n        else:\n            return False\n    \"\"\"\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and y == int(y) and z == int(z)):\n            return True\n        else:\n            return False\n    \"\"\"\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and y == int(y) and z == int(z)):\n            return True\n        else:\n            return False\n    \"\"\"\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and y == int(y) and z == int(z)):\n            return True\n        else:\n            return False\n    \"\"\"\n    def any_int(x, y, z):\n        if (x + abs(y) + abs(z)) == (abs(x) + abs(y) + abs(z)) and (x == int(x) and"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 3)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    smallest_prime = min(primes)\n    return sum(int(digit) for digit in str(smallest_prime))\n\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if key.islower() or key.isupper():\n            continue\n        else:\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a*b) % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s[::2] if c in 'AEIOU')\n"}
{"task_id": "EvoEval/99", "completion": "\n    if value.isdigit():\n        return int(value)\n    else:\n        value = float(value)\n        if value >= 0:\n            return int(value + 0.5)\n        else:\n            return int(value - 0.5)"}
