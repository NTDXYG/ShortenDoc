{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            depth += 1\n            current_group.append(char)\n        elif char == ')':\n            depth -= 1\n            current_group.append(char)\n            if depth == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    mad = [abs(x - median) for x in numbers]\n    mad_median = numbers[len(mad) // 2]\n    return mad_median\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result += [delimeter, num]\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    def max_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return sorted([max_depth(group) for group in paren_string.split(' ') if group], reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(num for num in numbers if num >= 0)\n    product_of_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            product_of_numbers *= num\n    return (sum_of_numbers, product_of_numbers)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_num = float('inf')\n    result = []\n    for num in numbers:\n        min_num = min(min_num, num)\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[:i] + string[::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b))[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    min_len = min(len(s) for s in strings)\n    for s in strings:\n        if len(s) == min_len:\n            return s\n    return None\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return abs(a*b) // greatest_common_divisor(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    if n == 1:\n        return '1'\n    else:\n        return string_sequence(n - 1) + ' ' + str(n)\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(len(numbers) - 1):\n        current_diff = abs(numbers[i] - numbers[i + 1])\n        if current_diff < min_diff:\n            min_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    if string == '':\n        return 1\n    else:\n        return strlen(string[1:]) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    count_dict = {}\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    result = [num for num in numbers if count_dict[num] == 1]\n    return result[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    elif exclusive_case == 'upper':\n        return ''.join([char.upper() if char.islower() else char.lower() for char in string])\n    else:\n        return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if xs[-1] == 0:\n        raise ValueError(\"The last coefficient must not be zero.\")\n    \n    low = -1000\n    high = 1000\n    while high - low > 1e-10:\n        mid = (low + high) / 2\n        if poly(xs, low) * poly(xs, mid) <= 0:\n            high = mid\n        else:\n            low = mid\n    return round(low, 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_copy = l.copy()\n    l_copy[::3] = sorted(l[::3], reverse=True)\n    return l_copy\n"}
{"task_id": "EvoEval/34", "completion": "\n    l.sort(reverse=True)\n    unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_num = l[0]\n    for i in l:\n        if i < min_num:\n            min_num = i\n    return min_num\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices[i // 2]\n    return l\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # decycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(num):\n        if num <= 0:\n            return None\n        elif num == 1:\n            return 0\n        elif num == 2:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, num):\n                a, b = b, a + b\n            return b\n\n    count = 0\n    i = 1\n    while True:\n        fib_num = fibonacci(i)\n        if fib_num is None:\n            break\n        if fib_num % 2 == 0:\n            i += 1\n            continue\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num\n        i += 1\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n**2\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 9:\n        return \"Invalid base\"\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result if result else \"0\"\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n, p) % q\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return ''.join([char for char in text if char in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            balance += 1\n        elif bracket == \")\":\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    common_elements = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b - c\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = 'aeiouy'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count -= 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    shift = shift % len(x)\n    if shift == 0:\n        return x\n    elif shift > len(x):\n        return x[::-1]\n    else:\n        return x[shift:] + x[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # your code here\n    apples, oranges = map(int, s.split())\n    return n - apples - oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [(i, val) for i, val in enumerate(arr) if val % 2 != 0]\n    return list(min(odd_values, key=lambda x: (x[1], x[0]), default=[]))\n"}
{"task_id": "EvoEval/69", "completion": "\n\n    def search(lst):\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in sorted(freq):\n        if freq[i] >= i:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    def search(lst):\n    freq = {}\n    for i in lst:\n        freq[i] = freq.get(i, 0) + 1\n    for i in sorted(freq):\n        if freq[i] >= i:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    def search(lst):\n    freq = {}\n    for i in lst:\n        freq[i] = freq.setdefault(i, 0) + 1\n    for i in sorted(freq):\n        if freq[i] >= i:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    def search(lst):\n    freq = {}\n    for i in lst:\n        freq[i] = freq.setdefault(i, 0) + 1\n    for i in sorted(freq):\n        if freq[i] >= i:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    def search(lst):\n    freq = {}\n    for i in lst:\n        freq[i] = freq.setdefault(i, 0) + 1\n    for i in sorted(freq):\n        if freq[i] >= i:\n            return i\n    return -1\n    \"\"\"\n    \"\"\"\n    def search(lst):\n    freq = {}\n    for i in lst:\n        freq[i] = freq.setdefault(i, 0) + 1\n    for i in sorted(freq):\n        if freq[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    strange_sort_list(lst): Given list integers return strange order Strange sorting start maximum value minimum remaining integers maximum Examples strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2] strange_sort_list([5, 5, 5, 5]) [5, 5, 5 5] strange_sort_list([]) []\n    \"\"\"\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n    \"\"\"\n    strange_sort_list(lst): Given list integers return strange order Strange sorting start maximum value minimum remaining integers maximum Examples strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2] strange_sort_list([5, 5, 5, 5]) [5, 5, 5 5] strange_sort_list([]) []\n    \"\"\"\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n    \"\"\"\n    strange_sort_list(lst): Given list integers return strange order Strange sorting start maximum value minimum remaining integers maximum Examples strange_sort_list([1, 2, 3, 4]) == [4, 1, 3, 2] strange_sort_list([5, 5, 5, 5]) [5, 5, 5 5] strange_sort_list([]) []\n    \"\"\"\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n    \"\"\"\n    strange_sort_list(lst): Given list integers"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # Round the area to 3 decimal places\n    return round(area, 3)\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    def is_even(n):\n        return n % 2 == 0\n    \n    def sum_is_even(lst):\n        return is_even(sum(lst))\n    \n    def sum_is_less_than_max(lst, max_weight):\n        return sum(lst) <= max_weight\n    \n    def is_balanced(lst):\n        return is_palindrome(lst) and sum_is_even(lst)\n    \n    return is_balanced(q) and sum_is_less_than_max(q, w) and sum_is_even(q) and is_even(w) and is_palindrome(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max(q, w) and is_balanced(q) and sum_is_even(q) and sum_is_less_than_max("}
{"task_id": "EvoEval/73", "completion": "\n    changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 > total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 > total_chars_lst1:\n        return lst2\n    else:\n        return lst2  # Return the second list if the total number of characters is the same\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors += 1\n            while a % i == 0:\n                a //= i\n    return prime_factors == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return False, None\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True, power\n        power += 1\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        return a**(1./3.) == round(a**(1./3.))\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a >= 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0 and a > 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0 and a >= 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0 and a >= 0 and a % 1 == 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0 and a >= 0 and a % 1 == 0 and a % 2 == 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0 and a >= 0 and a % 1 == 0 and a % 2 == 0 and a % 3 == 0\n    \"\"\"\n    \"\"\"\n    def iscube(a):\n        return round(a ** (1. / 3.)) ** 3 == a and a != 0 and a >= 0 and a % 1 == 0 and a % 2 == 0 and a % 3 == 0 and a % 4 == 0\n    \"\"\"\n    \"\"\"\n    def is"}
{"task_id": "EvoEval/78", "completion": "\n    # define a list of non-prime hexadecimal digits\n    non_prime_hex_digits = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    \n    # initialize a counter for non-prime hexadecimal digits\n    non_prime_count = 0\n    \n    # iterate over each character in the input string\n    for char in num:\n        # if the character is a non-prime hexadecimal digit, increment the counter\n        if char in non_prime_hex_digits:\n            non_prime_count += 1\n    \n    # return the count of non-prime hexadecimal digits\n    return non_prime_count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return sorted(letter_grades)\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 18 * (10 ** (n - 2))\n"}
{"task_id": "EvoEval/84", "completion": "\n    sum = 0\n    while N > 0:\n        sum += N % 10\n        N = N // 10\n    return hex(sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(i for i in lst[::2] if i % 2)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (-x[0], x[1]))"}
{"task_id": "EvoEval/88", "completion": "\n    if not array:\n        return []\n    else:\n        if array[-1] % 2 == 0:\n            return sorted(set(array), reverse=True)\n        else:\n            return sorted(set(array))\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4\n            if char.islower():\n                encrypted_string += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted_string += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\ndef any_int(x, y, z):\n    # Check if all numbers are integers\n    if all(isinstance(i, int) for i in [x, y, z]):\n        # Check if any number is equal to the sum of the other two\n        return x + y == z or x + z == y or y + z == x\n    return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the next vowel\n                next_vowel = vowels[(vowels.index(char.lower()) + 3) % len(vowels)]\n                # Swap case and replace vowel\n                encoded_message += next_vowel.swapcase()\n            else:\n                # Swap case\n                encoded_message += char.swapcase()\n        else:\n            # Non-letter characters are added without changes\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_values = [x for x in lst if is_prime(x)]\n    smallest_prime = min(prime_values) if prime_values else 0\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower = upper = False\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if len(key) < 3:\n            return False\n        if key.islower():\n            lower = True\n        elif key.isupper():\n            upper = True\n        else:\n            return False\n        if lower and upper:\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (a % 10) * (b % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(1, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(float(value)) if float(value).is_integer() else round(float(value)) if float(value) > 0 else round(float(value)) - 1 if float(value) < 0 else 0\n"}
