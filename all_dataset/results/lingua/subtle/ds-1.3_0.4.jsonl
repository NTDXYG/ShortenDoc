{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n    return sorted(result)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum([abs(i - median) for i in numbers]) / len(numbers)\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def count_nested(s: str, level: int) -> int:\n        count = 0\n        max_count = 0\n        for i, c in enumerate(s):\n            if c == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif c == ')':\n                count -= 1\n        return max_count if max_count > level else 0\n\n    return [count_nested(s, level) for level, s in enumerate(paren_string.split(' '))]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_numbers = []\n    min_num = numbers[0]\n    for num in numbers:\n        if num < min_num:\n            min_num = num\n        min_numbers.append(min_num)\n    return min_numbers\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    else:\n        for i in range(len(string)):\n            if is_palindrome(string[i:]):\n                return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary\n    a_bin = bin(int(a, 2))[2:]\n    b_bin = bin(int(b, 2))[2:]\n\n    # Pad the shorter string with zeros\n    max_len = max(len(a_bin), len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n\n    # Perform XOR operation\n    xor_result = ''.join(str(int(x != y)) for x, y in zip(a_bin, b_bin))\n\n    # Convert the result back to string and reverse it\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    distinct_chars = set(string)\n    return len(distinct_chars)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.replace(' ', '')\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort(reverse=True)\n\n    return ' '.join(str(num) for num in numbers)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort(reverse=True)\n    return (numbers[0], numbers[1])\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    count = 0\n    for _ in string:\n        count += 1\n    return count\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(dict.fromkeys(numbers))\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return poly(xs[1:], x)\n\n    def ddf(x):\n        return poly(xs[2:], x)\n\n    def find_zero_newton(f, df, x0, epsilon=1e-5):\n        x = x0\n        while abs(f(x)) > epsilon:\n            x = x - f(x) / df(x)\n        return x\n\n    return find_zero_newton(f, df, 0)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(0, len(l), 3)]\n    l_third.sort(reverse=True)\n    for i in range(0, len(l), 3):\n        l[i:i+3] = l_third[i//3]\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_divisible(n: int, divisor: int) -> int:\n        count = 0\n        for i in range(1, n):\n            if i % divisor == 0:\n                count += 1\n        return count\n\n    return [\n        count_divisible(n, 11) + count_divisible(n, 13)\n        if i % 8 == 0\n        else i\n        for i in range(n)\n    ]\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_indices_values[i // 2]\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n < 2:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count, a, b = 0, 0, 1\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return b\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    n = len(l)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # calculate number of collisions\n    collisions = n * (n - 1) // 2\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            l[i][j] += 1\n    return l\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if not l:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '2'\n    elif n == 2:\n        return '0'\n    elif n == 3:\n        return '4'\n    else:\n        return str(fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def same_chars(s0: str, s1: str) -> bool:\n        return sorted(s0) == sorted(s1)\n\n    return same_chars(s0, s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) < 2:\n        return True\n    if l[0] == l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n        return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    l1.sort(reverse=True)\n    l2.sort(reverse=True)\n    common_list = [value for value in l1 if value in l2]\n    return common_list\n\n\nl1 = [1, 4, 3, 34, 653, 2, 5, 7, 1, 5, 9, 121, 5, 1, 5, 3, 2, 8, 3, 2, 3]\nl2 = [3, 2, 3, 2, 8, 3, 2, 3]"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n == 1:\n        return m\n    else:\n        return m + sum_to_n(n - 1, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 1:\n        return [0]\n    if len(xs) == 2:\n        return [xs[1], 2 * xs[0]]\n    return [xs[i] * (i + 1) for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[-1] - fibfib_list[-2] + fibfib_list[-3])\n        return fibfib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiouy\"\n    count = 0\n    for char in s.lower():\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    def reverse(s):\n        return s[::-1]\n\n    def digits(n):\n        return str(n)\n\n    if shift > len(str(x)):\n        return reverse(digits(x))\n\n    return reverse(digits(x)[shift:] + digits(x)[:shift])\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s)\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    total_fruits = sum(int(fruit.split(\" \")[0]) for fruit in fruits)\n    total_oranges = sum(int(fruit.split(\" \")[1]) for fruit in fruits)\n    return total_fruits + total_oranges - n\n"}
{"task_id": "EvoEval/68", "completion": "\n    def smallest_odd_value(arr):\n        smallest_odd_value = float('inf')\n        smallest_index = -1\n        for i, num in enumerate(arr):\n            if num % 2 != 0 and num < smallest_odd_value:\n                smallest_odd_value = num\n                smallest_index = i\n        return smallest_odd_value, smallest_index\n\n    def smallest_value(arr):\n        smallest_value = float('inf')\n        smallest_index = -1\n        for i, num in enumerate(arr):\n            if num < smallest_value:\n                smallest_value = num\n                smallest_index = i\n        return smallest_value, smallest_index\n\n    if not arr:\n        return []\n\n    smallest_odd_value, smallest_odd_index = smallest_odd_value(arr)\n    smallest_value, smallest_index = smallest_value(arr)\n\n    if smallest_odd_value < smallest_value:\n        return [smallest_odd_index, smallest_odd_index]\n    else:\n        return [smallest_index, smallest_index]\n"}
{"task_id": "EvoEval/69", "completion": "\n\n    def search(lst):\n        from collections import Counter\n        count = Counter(lst)\n        for i in range(1, max(count)+1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 2, 3, 1]))  # 1\n    print(search([1, 2, 3, 4, 4, 4]))  # 1\n    print(search([5, 5, 4, 4, 4]))  # -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    def strange_sort_list(lst):\n        lst.sort()\n        lst[0], lst[-1] = lst[-1], lst[0]\n        return lst\n\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n    def triangle_area(a, b, c):\n        # check if the triangle is valid\n        if a + b <= c or a + c <= b or b + c <= a:\n            return -1\n\n        # calculate the semi-perimeter\n        s = (a + b + c) / 2\n\n        # calculate the area\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n        # return the area rounded to 3 decimal points\n        return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    def will_it_fly(q, w):\n        if sum(q) <= w:\n            return False\n        elif sum(q) > w:\n            return True\n\n    return will_it_fly(q, w)\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def smallest_change(arr):\n        n = len(arr)\n        count = 0\n        for i in range(n//2):\n            if arr[i] != arr[n-i-1]:\n                count += 1\n        return count\n\n    print(smallest_change([1,2,3,5,4,7,9,6])) # 4\n    print(smallest_change([1, 2, 3, 4, 3, 2, 2])) # 1\n    print(smallest_change([1, 2, 3, 2, 1])) # 0\n\nsmallest_change()\n<jupyter_output>\n<empty_output>\n<jupyter_text>\nThe function smallest_change(arr) takes an array of integers as input. It then counts the number of elements that are not in the same position from the beginning and end of the array. This count is the minimum number of changes required to make the array palindromic.\n<jupyter_code>"}
{"task_id": "EvoEval/74", "completion": "\n\n    def total_match(lst1, lst2):\n        count1 = sum(s.count(c) for s in lst1 for c in s)\n        count2 = sum(s.count(c) for s in lst2 for c in s)\n        if count1 > count2:\n            return lst1\n        elif count1 < count2:\n            return lst2\n        else:\n            return lst2 if len(lst2) > len(lst1) else lst1\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n            if is_prime(i):\n                factors.append(i)\n            if is_prime(a // i):\n                factors.append(a // i)\n    factors = list(set(factors))\n    factors.sort()\n    if len(factors) == 2 and factors[0]**2 == a and factors[1]**2 == a:\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return (True, 0)\n    elif n == 1:\n        return (True, x)\n    else:\n        i = 0\n        while i**n <= x:\n            if i**n == x:\n                return (True, i)\n            i += 1\n        return (False, None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n\n    def iscube(a):\n        if a < 0:\n            return False\n        c = a ** (1./3.)\n        return c == int(c)\n\n    print(iscube(1))\n    print(iscube(2))\n    print(iscube(-1))\n    print(iscube(64))\n    print(iscube(0))\n    print(iscube(180))\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_dict = {\"0\": 0, \"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    hex_reverse_dict = {v: k for k, v in hex_dict.items()}\n    num_list = list(num)\n    num_list.reverse()\n    num_list = [hex_reverse_dict[i] for i in num_list]\n    return sum(num_list)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == 4\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = {4.0: 'A+', 3.7: 'A', 3.3: 'B+', 3.0: 'B', 2.7: 'B-', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.0: 'D'}\n    return [letter_grades[grade] for grade in sorted(grades, reverse=True)]\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    length = 0\n    for char in string:\n        if char.isdigit():\n            length += 1\n        elif is_prime(length):\n            return True\n        else:\n            length = 0\n    return is_prime(length)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 90 * (10 ** (n - 2))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_of_digits(N))[2:]\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    words.sort(key=lambda x: [ord(c) for c in x], reverse=True)\n    return ' '.join(words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not lst:\n        return []\n    result = []\n    for i, row in enumerate(lst):\n        if not row:\n            continue\n        if x < len(row):\n            result.append((i, row[x]))\n        else:\n            result.append((i, -1))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    def sort_array(array):\n        array.sort()\n        if len(array) % 2 == 0:\n            array = list(set(array))\n        if len(array) % 2 != 0:\n            array = list(set(array))\n            array.sort(reverse=True)\n        return array\n\n    print(sort_array([]))\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n    print(sort_array([2, 2, 4, 3, 0, 1, 5, 6]))\n\nsort_array()\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_string += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encrypted_string += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) == 0:\n        return max_val\n    else:\n        return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.replace(' ', '')\n    S = S.lower()\n    if S.endswith('boredom'):\n        return 1\n    else:\n        return 0\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z):\n        return (x == int(x) and y == int(y) and z == int(z))\n\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # False\n    print(any_int(3, -2, 1))  # True\n    print(any_int(3.6, -2.2, 2))  # False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def swap_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def replace_vowels(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            if c.isupper():\n                return chr(ord(c) + 3)\n            else:\n                return chr(ord(c.lower()) + 3)\n        return c\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    return sum(primes)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    return a * b\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n    def closest_integer(value):\n        if isinstance(value, str):\n            value = float(value)\n        return round(value)\n\n    print(closest_integer(\"10\"))  # 10\n    print(closest_integer(\"15.3\"))  # 15\n    print(closest_integer(\"14.5\"))  # 14\n    print(closest_integer(\"-14.5\"))  # -14\n\n"}
