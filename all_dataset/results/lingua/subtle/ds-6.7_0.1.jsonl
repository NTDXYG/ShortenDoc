{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if temp:\n                stack.append(temp)\n                temp = \"\"\n            stack.append(char)\n        else:\n            stack.append(char)\n            if len(stack) % 2 == 0:\n                temp = \"\".join(stack[-2:])\n                stack = stack[:-2]\n                result.append(temp)\n    result.sort()\n    return result\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    int_part = int(number)\n    dec_part = number - int_part\n    return (int_part, dec_part)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median(abs(x - median) for x in numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        results.append(max_count)\n    return results\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            sum_numbers += num\n            product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:].zfill(len(a))[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    from math import gcd\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note in music_dict:\n            result.append(music_dict[note])\n    return sorted(list(set(result)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i - 1])\n    return result[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(max_num - num) / range_num for num in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    n = len(xs) // 2\n    a = [0] * (2 * n)\n    b = [0] * (2 * n)\n    c = [0] * (2 * n)\n    d = [0] * (2 * n)\n    for i in range(n):\n        a[2 * i] = xs[2 * i]\n        b[2 * i] = xs[2 * i + 1]\n        c[2 * i + 1] = xs[2 * i]\n        d[2 * i + 1] = xs[2 * i + 1]\n    roots = [0] * n\n    for i in range(n - 1, -1, -1):\n        if a[2 * i + 1] == 0:\n            roots[i] = -b[2 * i] / c[2 * i]\n        else:\n            q = (b[2 * i] * b[2 * i] - 4 * a[2 * i] * c[2 * i]) / (4 * a[2 * i + 1] * c[2 * i])\n            r = -b[2 * i] / (2 * a[2 * i + 1])\n            if q >= 0:\n                s = math.sqrt(q)\n                roots[i] = (-s - r) / (2 * a[2 * i + 1])\n            else:\n                return None\n    return roots[0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    div_by_three.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = div_by_three[i // 3]\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    even_index_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_index_values.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if fib_num % 2 != 0 and is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l)-2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+2 for i in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * base + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n\n    return str(fib[-1])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    if len(l) == 0:\n        return 0\n    elif len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    # your code here\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels or not char.isalpha()])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    fib_numbers = [0, 1]\n    for i in range(2, n + 1):\n        fib_numbers.append(fib_numbers[i - 1] + fib_numbers[i - 2])\n    return fib_numbers[n]\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    else:\n        diff = [l[i + 1] - l[i] for i in range(len(l) - 1)]\n        return all(x >= 0 for x in diff) or all(x <= 0 for x in diff)\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_n_3 = 0\n        fibfib_n_2 = 1\n        fibfib_n_1 = 0\n        for _ in range(3, n+1):\n            fibfib_n = fibfib_n_2 + fibfib_n_3 - fibfib_n_1\n            fibfib_n_3 = fibfib_n_2\n            fibfib_n_2 = fibfib_n_1\n            fibfib_n_1 = fibfib_n\n        return fibfib_n\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    apples, oranges = map(int, s.split()[::2])\n    total_fruits = int(s.split()[1])\n    return total_fruits - 1 - apples - oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = [float('inf'), float('inf')]\n    for i, n in enumerate(arr):\n        if n % 2 == 1 and n < smallest_odd[1]:\n            smallest_odd = [i, n]\n    return smallest_odd if smallest_odd[1] != float('inf') else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n"}
{"task_id": "EvoEval/70", "completion": "\n\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n        if a + b > c and a + c > b and b + c > a:\n            s = (a + b + c) / 2\n            area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n            return round(area, 3)\n        else:\n            return -1\n\n    print(triangle_area(3, 4, 5))  # 6.000\n    print(triangle_area(1, 2, 10))  # -1\n    print(triangle_area(3, 4, 5))  # 6.000\n    print(triangle_area(5, 12, 13))  # 30.000\n    print(triangle_area(7, 24, 25))  # 84.000\n    print(triangle_area(3, 3, 3))  # 3.905\n    print(triangle_area(4, 4, 4))  # 6.000\n    print(triangle_area(10, 10, 10))  # 43.301\n    print(triangle_area(1, 1, 1))  # 0.433\n    print(triangle_area(1, 2, 3))  # -1\n    print(triangle_area(1, 1, 2))  # -1\n    print(triangle_area(2, 2, 4))  # -1\n    print(triangle_area(1, 2, 2))  # -1\n    print(triangle_area(2, 2, 2))  # 1.732\n    print(triangle_area(2, 3, 4))  # 2.905\n    print(triangle_area(3, 4, 6))  # 0.000\n    print(triangle_area(3, 5, 7))  # 14.696\n    print(triangle_area(4, 5, 7))"}
{"task_id": "EvoEval/72", "completion": "\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) == 0 or len(lst2) == 0:\n            return []\n        else:\n            sum1 = sum(len(i) for i in lst1)\n            sum2 = sum(len(i) for i in lst2)\n            if sum1 > sum2:\n                return lst1\n            elif sum1 < sum2:\n                return lst2\n            else:\n                return lst2\n\n    print(total_match([], []))\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))\n    print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\n    print(total_match(['4'], ['1', '2', '3', '4', '5']))\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if a % i == 0:\n                return False\n    return len(factors) == 4 and is_prime(a)\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return (x == 1, 0)\n    elif n == 0:\n        return (x == 0, 0)\n    else:\n        power = 0\n        while n ** power < x:\n            power += 1\n        return (n ** power == x, power)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_nums = \"014689ABCDEF\"\n    count = 0\n    for i in num:\n        if i not in hex_nums:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D-', 0.0: 'E'}\n    grades.sort()\n    return [grade_dict.get(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces\n    string = string.replace(\" \", \"\")\n\n    # Calculate length\n    length = len(string)\n\n    # Check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Initialize count\n    count = 0\n\n    # Loop through all n-digit numbers\n    for i in range(10**(n-1), 10**n):\n        # Check if the number starts with 1 or ends with 2\n        if str(i)[0] == '1' or str(i)[-1] == '2':\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_digits = sum(int(digit, 16) for digit in hex_num)\n    # convert the sum to hexadecimal\n    hex_sum = hex(sum_digits)[2:]\n    return hex_sum\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(ordered_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # your code here\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_string += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) < 1:\n        return None\n    return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = re.split('[.?!]', S)\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == \"I\" and words[-1] == \"boredom\":\n            boredoms += 1\n    return boredoms\n\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n\n        if char.lower() in vowels:\n            if char.islower():\n                encoded_message += chr(ord(char) + 23)\n            else:\n                encoded_message += chr(ord(char) + 23).upper()\n\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    return min(sum_of_digits(prime) for prime in primes)\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    keys_lower = [k for k in dict.keys() if isinstance(k, str) and k.islower()]\n    keys_upper = [k for k in dict.keys() if isinstance(k, str) and k.isupper()]\n    return len(keys_lower) == len(dict) or len(keys_upper) == len(dict)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    a_str = str(abs(a))\n    b_str = str(abs(b))\n    a_sum = sum(int(i) for i in a_str)\n    b_sum = sum(int(i) for i in b_str)\n    return a_sum * b_sum\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n\n"}
