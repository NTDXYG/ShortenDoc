{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_valid(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def dfs(s: str, start: int, groups: List[str], res: List[str]):\n        if start == len(s) and is_valid(s):\n            res.append(''.join(groups))\n            return\n        for i in range(start, len(s)):\n            for j in range(i+1, len(s)+1):\n                if is_valid(s[i:j]):\n                    dfs(s, j, groups+[s[i:j]], res)\n\n    res = []\n    dfs(paren_string, 0, [], res)\n    return sorted(res)\n"}
{"task_id": "EvoEval/2", "completion": "\n    return int(number), number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return median_absolute_deviation_around_median(numbers, median)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if len(numbers) == 0:\n        return [delimeter]\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        results.append(max_count)\n    return results\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            sum_numbers += num\n            product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note in music_dict:\n            result.append(music_dict[note])\n    result.sort(reverse=True)\n    return result\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i]) if numbers[i] > numbers[i + 1] else (numbers[i], numbers[i + 1])\n    return closest_pair\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(max_num - num) / range_num for num in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase().lower()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    a, b = xs[-1], xs[-2]\n    c = -sum(xs[:-2])\n    return round((-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a), 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = l[:]\n    l_sorted = sorted(l[::3], reverse=True)\n    for i in range(0, len(l), 3):\n        l_prime[i] = l_sorted[i // 3]\n    return l_prime\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    even_index_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_index_values.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x+2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    if len(l) == 0:\n        return 0\n    elif len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, (n + q) % p, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels or not char.isalpha()])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0 or len(l) == 1:\n        return True\n    else:\n        increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n        decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n        return increasing or decreasing\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    sqrt_n = int(n**0.5) + 1\n    for i in range(3, sqrt_n, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[i-3] + fibfib_list[i-2] - fibfib_list[i-1])\n        return fibfib_list[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    if shift >= len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    apples, oranges = map(int, s.split()[::2])\n    total_fruits = int(s.split()[-1])\n    mangoes = total_fruits - apples - oranges - 1\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 1 and num < smallest_odd:\n            smallest_odd = num\n            smallest_index = i\n    return [smallest_index, smallest_odd] if smallest_index != -1 else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        if len(lst) == 0:\n            return []\n        else:\n            max_val = max(lst)\n            min_val = min(lst)\n            max_index = lst.index(max_val)\n            min_index = lst.index(min_val)\n            lst[max_index], lst[min_index] = lst[min_index], lst[max_index]\n            return lst\n\n    print(strange_sort_list([1, 2, 3, 4]))  # [4, 1, 3, 2]\n    print(strange_sort_list([5, 5, 5, 5]))  # [5, 5, 5, 5]\n    print(strange_sort_list([]))  # []\n\n"}
{"task_id": "EvoEval/71", "completion": "\n"}
{"task_id": "EvoEval/72", "completion": "\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n\n\n    print(total_match([], []))  # \u279e []\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hi', 'admin']\n    print(total_match(['hi', 'admin'], ['hi', 'Hi', 'project']))  # \u279e ['hi', 'admin']\n    print(total_match(['hi', 'admin'], ['hI', 'hi']))  # \u279e ['hi', 'admin']\n    print(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['1', '2', '3', '4', '5']\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                for l in primes:\n                    if i * j * k * l == a:\n                        return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return (x == 1, 0)\n    elif n == 0:\n        return (x == 0, 0)\n    elif x == 0:\n        return (True, 0)\n    else:\n        power = 0\n        while n ** power < x:\n            power += 1\n        return (n ** power == x, power if n ** power == x else None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        a = abs(a)\n        return int(a ** (1. / 3.)) ** 3 == a\n\n    print(iscube(1))  # ==> True\n    print(iscube(2))  # ==> False\n    print(iscube(-1))  # ==> False\n    print(iscube(64))  # ==> True\n    print(iscube(0))  # ==> True\n    print(iscube(180))  # ==> False\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    non_prime_hex = ['0', '1', '4', '6', '8', '9', 'A', 'C', 'E']\n    return sum(1 for i in num if i in non_prime_hex)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', 0.0: 'E'}\n    grades.sort(reverse=True)\n    return [grade_dict.get(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces\n    string = string.replace(\" \", \"\")\n\n    # Calculate length\n    length = len(string)\n\n    # Check if length is prime\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Your code here\n    count = 0\n    for i in range(1, n):\n        count += 2 * 9 * 10 ** (i - 1)\n    count += 9 * 10 ** (n - 1)\n    return count\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    hex_sum = hex(sum(int(i) for i in str(N)))[2:]\n    return hex_sum\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(ordered_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # your code here\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = re.split('[.?!]', S)\n    boredoms = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I' and words[-1] == 'boredom':\n            boredoms += 1\n    return boredoms\n\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 3)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    return sum_of_digits(min(primes))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower_count = 0\n    upper_count = 0\n    for key in dict.keys():\n        if isinstance(key, str):\n            if key.islower():\n                lower_count += 1\n            elif key.isupper():\n                upper_count += 1\n        else:\n            return False\n    return lower_count > 0 and upper_count > 0\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    a_str = str(a)\n    b_str = str(b)\n    a_sum = 0\n    b_sum = 0\n    for i in a_str:\n        if i != '-':\n            a_sum += int(i)\n    for i in b_str:\n        if i != '-':\n            b_sum += int(i)\n    return a_sum * b_sum\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 1 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n"}
