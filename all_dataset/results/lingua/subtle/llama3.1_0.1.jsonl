{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n            # If the balance is zero, it means we've reached the end of a group\n            if balance == 0:\n                groups.append(current_group)\n                current_group = \"\"\n        # If the character is not a parenthesis, skip it\n\n    # Sort the groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the sorted list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Calculate the absolute differences between each number and the median\n    absolute_differences = [abs(num - median) for num in numbers]\n\n    # Sort the absolute differences\n    absolute_differences.sort()\n\n    # Calculate the median of the absolute differences\n    mad = absolute_differences[len(absolute_differences) // 2] if len(absolute_differences) % 2 else (absolute_differences[len(absolute_differences) // 2 - 1] + absolute_differences[len(absolute_differences) // 2]) / 2\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Split the input string into groups\n    groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting level for each group\n    max_nesting_levels = []\n\n    # Iterate over each group\n    for group in groups:\n        # Initialize counters for opening and closing parentheses\n        open_count = 0\n        close_count = 0\n\n        # Initialize the maximum nesting level for the current group\n        max_nesting = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            # If the character is an opening parenthesis, increment the opening count\n            if char == '(':\n                open_count += 1\n                # Update the maximum nesting level if necessary\n                max_nesting = max(max_nesting, open_count - close_count)\n            # If the character is a closing parenthesis, increment the closing count\n            elif char == ')':\n                close_count += 1\n\n        # Append the maximum nesting level for the current group to the list\n        max_nesting_levels.append(max_nesting)\n\n    # Return the list of maximum nesting levels in descending order\n    return sorted(max_nesting_levels, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        if num < min_val:\n            min_val = num\n        result.append(min_val)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return ''\n\n    # Find longest palindromic prefix\n    i = 0\n    while i < len(string) and string[:i+1] == string[:i+1][::-1]:\n        i += 1\n\n    # Append to the start of string reverse of a string suffix comes after palindromic prefix\n    return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore\n\n"}
{"task_id": "EvoEval/13", "completion": "\nReturn greatest common divisor of a and b\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    return a * b // gcd(a, b)  # type: ignore\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(map(str, range(1, n + 1)))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # set() removes duplicates, len() returns the number of elements in the set\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        result.append(music_dict[note])\n    return sorted(result, reverse=True)  # return list in descending order\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of strings\n    num_list: List[str] = numbers.split()\n\n    # Create a dictionary to map string numbers to their integer values\n    num_dict: dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Use a list comprehension to convert the list of strings to a list of integers\n    num_list: List[int] = [num_dict[num] for num in num_list]\n\n    # Sort the list of integers in descending order\n    num_list.sort(reverse=True)\n\n    # Use a list comprehension to convert the list of integers back to a list of strings\n    num_list: List[str] = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n\n    # Join the list of strings into a single string with spaces in between\n    sorted_str: str = ' '.join(num_list)\n\n    return sorted_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    return sorted([((x - min_val) / (max_val - min_val)),] * len(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    if abs(xs[0]) < 1e-6:\n        raise ValueError(\"xs must have largest non zero coefficient as first element\")\n    return -xs[1] / xs[0]\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0], reverse=True)[i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '8' in str(i):\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [l[i] if i % 2 == 0 else l[i] for i in range(len(l))] + [sorted([l[i] for i in range(len(l)) if i % 2 == 0], reverse=True)]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return None\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    else:\n        a, b = 0, 1\n        for _ in range(4, n + 1):\n            a, b = b, a + b\n        if b % 2 == 0:\n            return None\n        else:\n            return is_prime(b)\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    # sort the list in ascending order\n    l.sort()\n    # iterate over the list\n    for i in range(len(l) - 2):\n        # initialize two pointers\n        left, right = i + 1, len(l) - 1\n        # iterate until the two pointers meet\n        while left < right:\n            # calculate the sum of the three elements\n            total = l[i] + l[left] + l[right]\n            # if the sum is ten, return True\n            if total == 10:\n                return True\n            # if the sum is less than ten, move the left pointer to the right\n            elif total < 10:\n                left += 1\n            # if the sum is greater than ten, move the right pointer to the left\n            else:\n                right -= 1\n    # if no three distinct elements sum to ten, return False\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize a list to store the number of cars that have passed each point on the road\n    cars_passed = [0] * (2 * n)\n    \n    # Initialize the number of collisions\n    collisions = 0\n    \n    # Iterate over the cars moving left to right\n    for i in range(n):\n        # Iterate over the cars moving right to left\n        for j in range(n):\n            # If the cars collide, increment the number of collisions\n            if cars_passed[i] == j:\n                collisions += 1\n            # Increment the number of cars that have passed the point where the car is currently at\n            cars_passed[i] += 1\n    \n    # Return the number of collisions\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    if x == 0:\n        return 0\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return int(''.join(map(str, digits[::-1])))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        fib4_prev_prev_prev = 0\n        fib4_prev_prev = 0\n        fib4_prev = 2\n        fib4_curr = 0\n        for _ in range(4, n + 1):\n            fib4_curr = fib4_prev_prev_prev + fib4_prev_prev + fib4_prev + fib4_curr\n            fib4_prev_prev_prev = fib4_prev_prev\n            fib4_prev_prev = fib4_prev\n            fib4_prev = fib4_curr\n        return str(fib4_curr)  # return string representation of fib4 number\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text.lower()[::-1]  # Convert to lowercase before checking\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # filter out consonants and return the string\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i <= t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)  # return sorted common elements in descending order\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs[1:], 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, b + c - a\n        return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Initialize a counter for vowels\n    count = 0\n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char in 'aeiou':\n            # If it is, increment the counter\n            count += 1\n    # Return the count of vowels\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression to sum ASCII codes of lower case letters in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into two parts: apples and oranges\n    apples, oranges = s.split(', ')\n    \n    # Extract the number of apples and oranges\n    num_apples = int(apples.split(' ')[0])\n    num_oranges = int(oranges.split(' ')[0])\n    \n    # Calculate the number of mangoes\n    num_mangoes = n + 1 - num_apples - num_oranges\n    \n    return num_mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd = [i for i, x in enumerate(arr) if x % 2]\n    if not odd:\n        return []\n    min_odd = min(arr[i] for i in odd)\n    return [min(odd, key=lambda x: (arr[x], x)), min_odd]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return ["}
{"task_id": "EvoEval/69", "completion": "\n    for i in lst:\n        if lst.count(i) >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst)) + [sorted(lst)[0]]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst, reverse=True)) + [sorted(lst, reverse=True)[0]]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst, reverse=True)) + [min(lst)]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst, reverse=True)) + [sorted(lst, reverse=True)[0]]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst, reverse=True)) + [min(lst)]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst, reverse=True)) + [sorted(lst, reverse=True)[0]]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst, reverse=True)) + [min(lst)]\n    \"\"\"\n    \"\"\"\n    # Alternative solution\n    \"\"\"\n    def strange_sort_list(lst):\n        if not lst: return []\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [max_val] + strange_sort_list(sorted(lst"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    return q == q[::-1] and sum(q) % 2 == 0 and sum(q) <= w\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Create a dictionary to store the frequency of each number in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a variable to store the number of elements that need to be changed\n    changes = 0\n\n    # Iterate over the frequency dictionary\n    for count in freq.values():\n        # If the count is odd, increment the changes by 1\n        if count % 2 != 0:\n            changes += 1\n\n    # Return the minimum number of elements that need to be changed\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    return lst2 if sum(len(i) for i in lst1) <= sum(len(i) for i in lst2) else lst1\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 4 and all(is_prime(f) for f in factors)\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    # Initialize the power to 0\n    power = 0\n    # Check if x is a simple power of n\n    while n ** power <= x:\n        # If n to the power is equal to x, return True and the power\n        if n ** power == x:\n            return True, power\n        # If n to the power is greater than x, return False and None\n        power += 1\n    # If the loop ends without finding a match, return False and None\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'A', 'B', 'D', 'F'}\n    \n    # Initialize a counter for non-prime hexadecimal digits\n    non_prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is not a prime hexadecimal digit\n        if char not in prime_hex_digits:\n            # Increment the counter\n            non_prime_count += 1\n    \n    # Return the count of non-prime hexadecimal digits\n    return non_prime_count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade table\n    grade_table = {\n        'A+': (4.0, float('inf')),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (3.0, 3.3),\n        'B': (2.7, 3.0),\n        'B-': (2.3, 2.7),\n        'C+': (2.0, 2.3),\n        'C': (1.7, 2.0),\n        'C-': (1.3, 1.7),\n        'D+': (1.0, 1.3),\n        'D': (0.7, 1.0),\n        'D-': (0.0, 0.7),\n        'E': (0.0, 0.0)\n    }\n\n    # Sort the grades in ascending order\n    sorted_grades = sorted(grades)\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over the sorted grades\n    for grade in sorted_grades:\n        # Initialize a flag to check if the grade is found\n        found = False\n\n        # Iterate over the grade table\n        for letter, (lower, upper) in grade_table.items():\n            # Check if the grade is within the range of the current letter grade\n            if lower <= grade <= upper:\n                # Append the letter grade to the list\n                letter_grades.append(letter)\n                # Set the flag to True\n                found = True\n                # Break the loop\n                break\n\n        # If the grade is not found, append 'E' to the list\n        if not found:\n            letter_grades.append('E')\n\n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Calculate the length of the string\n    length = len(string)\n\n    # Check if the length is a prime number\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True  # If the length is a prime number, return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**n:\n            count += 1\n        if i % 10 == 2:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert the number to a string to easily iterate over its digits\n    str_N = str(N)\n    \n    # Initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the string\n    for digit in str_N:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])  # sum of odd elements at even indices\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)  # join the words back together with spaces in between\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array to avoid modifying the original array\n    array_copy = array.copy()\n    \n    # Check if the array is empty\n    if not array_copy:\n        return array_copy\n    \n    # Calculate the sum of the first and last elements of the array\n    first_last_sum = array_copy[0] + array_copy[-1]\n    \n    # Sort the array in ascending order if the sum is odd, or in descending order if the sum is even\n    array_copy.sort(reverse=(first_last_sum % 2 == 0))\n    \n    # Remove duplicate values from the array\n    array_copy = list(dict.fromkeys(array_copy))\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += alphabet[(alphabet.index(char) + 4) % 26]\n            else:\n                encrypted += alphabet[(alphabet.index(char.lower()) + 4) % 26].upper()\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return second last element of sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = S.split('. ')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n\n    def any_int(x, y, z): ''' Create function takes 3 numbers. Returns true if one numbers equal to sum of absolute values of other two, all numbers are integers. Returns false in any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False '''\n    \"\"\"\n    return (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n    \n    \"\"\"\n    def any_int(x, y, z): ''' Create function takes 3 numbers. Returns true if one numbers equal to sum of absolute values of other two, all numbers are integers. Returns false in any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False '''\n    \"\"\"\n    return (x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n    \n    \"\"\"\n    def any_int(x, y, z): ''' Create function takes 3 numbers. Returns true if one numbers equal to sum of absolute values of other two, all numbers are integers. Returns false in any other cases. Examples any_int(5, 2, 7) \u279e True any_int(3, 2, 2) \u279e False any_int(3, -2, 1) \u279e True any_int(3.6, -2.2, 2) \u279e False '''\n    \"\"\"\n    return (x == abs(y) + abs(z) or y == abs(x) + abs"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += char.swapcase()\n            else:\n                encoded_message += char.swapcase()\n            if char.lower() in vowels:\n                index = ord(char.lower()) - ord('a')\n                encoded_message += chr(ord('a') + (index + 3) % 6 + ord('a'))\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = float('inf')\n    for num in lst:\n        if num > 1 and is_prime(num):\n            min_prime = min(min_prime, num)\n    return sum(int(digit) for digit in str(min_prime)) if min_prime != float('inf') else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return sorted(primes, reverse=True)  # sort in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract unit digits from both numbers\n    a_unit = a % 10\n    b_unit = b % 10\n    \n    # Multiply unit digits\n    product = a_unit * b_unit\n    \n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
