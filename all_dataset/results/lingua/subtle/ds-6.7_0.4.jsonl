{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    stack = []\n    result = []\n    current = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if current:\n                stack.append(current)\n                current = \"\"\n            stack.append(char)\n        elif char == \")\":\n            stack.append(char)\n            while stack and stack[-1] != \"(\":\n                current = stack.pop() + current\n                if stack and stack[-1] == \"(\":\n                    current = stack.pop() + current\n            if stack:\n                stack.pop()\n            if current:\n                result.append(current)\n                current = \"\"\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            count = 0\n            while stack and stack[-1] != '(':\n                stack.pop()\n                count += 1\n            if stack:\n                stack.pop()\n            if count:\n                result.append(count)\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) <= len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    # your code here\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.replace('o|', 'o')\n    music_string = music_string.replace('.|', 'o')\n    music_string = music_string.split()\n    notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n    notes.sort(reverse=True)\n    return notes\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i - 1], numbers[i])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(max_num - num) / range_num for num in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n <= 1:\n        return 2\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        raise ValueError(\"exclusive_case must be 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"At least two coefficients are required\")\n\n    a, b = xs[0], xs[1]\n    if abs(a) < 1e-10:\n        raise ValueError(\"First coefficient cannot be zero\")\n\n    return -b / a\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_prime = [l[i] for i in range(len(l)) if i % 3 == 0]\n    l_prime.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = l_prime.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    min_el = l[0]\n    for el in l:\n        if el < min_el:\n            min_el = el\n    return min_el\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            print(i)\n\n\nfizz_buzz(50)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    even_index_values.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_index_values.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1:\n        return None\n\n    fib_numbers = [0, 1]\n    prime_numbers = [2]\n    while len(fib_numbers) < n + 5:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n        if fib_numbers[-1] % 2 != 0 and is_prime(fib_numbers[-1]):\n            prime_numbers.append(fib_numbers[-1])\n\n    return prime_numbers[n - 1] if n - 1 < len(prime_numbers) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l)):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '2'\n    elif n == 2:\n        return '0'\n    else:\n        return str(int(fib4(n - 1)) + int(fib4(n - 2)) + int(fib4(n - 3)) + int(fib4(n - 4)))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    if len(l) == 0:\n        return 0\n    elif len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(n, p, q)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    return ''.join([char for char in text if char in vowels or not char.isalpha()])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x+y+1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort(reverse=True)\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n == 1:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack.pop() != \"[\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2 or n == 3:\n        return 1\n    else:\n        fib_minus_1 = 1\n        fib_minus_2 = 0\n        fib_minus_3 = 1\n        for _ in range(3, n):\n            fib_n = fib_minus_2 + fib_minus_3 - fib_minus_1\n            fib_minus_1, fib_minus_2, fib_minus_3 = fib_n, fib_minus_1, fib_minus_2\n        return fib_n\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.split(\",\")\n    fruits = int(s[1][1:])\n    oranges = int(s[2][1:])\n    apples = int(s[0][1:])\n    total_fruits = fruits - oranges - apples + 1\n    return total_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd_values = [(i, v) for i, v in enumerate(arr) if v % 2 == 1]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values, key=lambda x: x[1])\n    return [smallest_odd_value[0], arr.count(smallest_odd_value[1])]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    return strange_sort_list(lst)\n\"\"\"\n"}
{"task_id": "EvoEval/71", "completion": "\n"}
{"task_id": "EvoEval/72", "completion": "\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    i, j = 0, n - 1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    if count == 0 and n % 2 == 1:\n        return 1\n    return count\n\n"}
{"task_id": "EvoEval/74", "completion": "\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if a % i == 0:\n            a = a // i\n            if a in primes:\n                return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 0:\n        return (True, 0) if x == 1 else (False, None)\n    elif n == 1:\n        return (True, 0) if x >= 1 else (False, None)\n    elif x == 0:\n        return (True, 0) if n > 1 else (False, None)\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                break\n        else:\n            i = n\n\n        while i > 1:\n            if x % (i ** i) == 0:\n                return (True, i)\n            i -= 1\n\n        return (False, None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_dict = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    non_prime_count = 0\n    for i in num:\n        if int(i) in [0, 1, 4, 6, 8, 9]:\n            non_prime_count += 1\n        elif i in hex_dict:\n            if hex_dict[i] in [10, 12, 14, 15]:\n                non_prime_count += 1\n    return non_prime_count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == len(s)\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A-', 3.0: 'B', 2.7: 'B+', 2.3: 'B-', 2.0: 'C', 1.7: 'C+', 1.3: 'C-', 1.0: 'D', 0.7: 'D+', 0: 'E'}\n    grades.sort(reverse=True)\n    return [grade_dict[grade] for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(1, n):\n        count += 9 * 10 ** (i - 1)\n    return count\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert decimal to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate sum of digits\n    sum_digits = sum(int(digit, 16) for digit in hex_num)\n    # convert sum to hexadecimal\n    result = hex(sum_digits)[2:]\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ''.join(sorted(s, reverse=True))\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        if x in lst[i]:\n            result.append((i, lst[i].index(x)))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Sort the array in ascending order\n    array.sort()\n\n    # Initialize an empty list to store the sorted array\n    sorted_array = []\n\n    # Loop through the array\n    for i in range(len(array)):\n        # If the number is odd, add it to the sorted_array in reverse order\n        if array[i] % 2 != 0:\n            sorted_array.insert(0, array[i])\n        # If the number is even, add it to the sorted_array in normal order\n        else:\n            sorted_array.append(array[i])\n\n    # Remove duplicate values from the sorted_array\n    sorted_array = list(set(sorted_array))\n\n    return sorted_array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) + 2) % 26\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if 'boredom' in sentence:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = {'a': 'd', 'e': 'h', 'i': 'm', 'o': 'q', 'u': 't', 'A': 'D', 'E': 'H', 'I': 'M', 'O': 'Q', 'U': 'T'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n        elif char in vowels:\n            encoded_message += vowels[char]\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def smallest_prime(lst):\n        for i in lst:\n            if is_prime(i):\n                return i\n        return None\n\n    return [smallest_prime(lst[i:i+k]) for i in range(len(lst))]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(2, n+1) if is_prime(x)]\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    if a == 0 or b == 0:\n        return 0\n\n    sign = -1 if (a < 0) ^ (b < 0) else 1\n\n    a = abs(a)\n    b = abs(b)\n\n    res = 0\n    while b > 0:\n        if b % 2 != 0:\n            res += a\n        a <<= 1\n        b >>= 1\n\n    return sign * (res % 10)\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 1 and s[i] in vowels)\n\n"}
{"task_id": "EvoEval/99", "completion": "\n"}
