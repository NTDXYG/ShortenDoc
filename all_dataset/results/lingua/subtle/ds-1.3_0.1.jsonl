{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_balanced(s: str) -> bool:\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if not stack or stack[-1] != '(':\n                    return False\n                stack.pop()\n        return not stack\n\n    groups = []\n    start = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            if not is_balanced(paren_string[start:i+1]):\n                return []\n            start = i + 1\n        elif ch == ')':\n            if is_balanced(paren_string[start:i]):\n                groups.append(paren_string[start:i+1])\n                start = i + 1\n    if start < len(paren_string):\n        return []\n    return sorted(groups)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length//2]\n        median2 = numbers[length//2 - 1]\n        median = (median1 + median2)/2\n    else:\n        median = numbers[length//2]\n    mad = sum(abs(i - median) for i in numbers) / length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    xor_result = ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n    # Reverse the result\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_str):\n            shortest_str = string\n    return shortest_str\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.split()\n    result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        elif note == '.|':\n            result.append(1)\n    return sorted(list(set(result)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num])[::-1])\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i-1])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return [(number - min_val) / (max_val - min_val) for number in sorted(numbers, reverse=True)]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    return prime_factors(n)\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in reversed(numbers):\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    return round(poly(xs, 0), 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l_third = [l[i] for i in range(len(l)) if (i+1) % 3 == 0]\n    l_third.sort(reverse=True)\n    for i in range(len(l)):\n        if (i+1) % 3 == 0:\n            l[i] = l_third.pop(0)\n    return l\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_8(n: int):\n        return str(n).count('8')\n\n    def divisible_by(n: int, divisor: int):\n        return n % divisor == 0\n\n    return sum(divisible_by(i, 11) or divisible_by(i, 13) for i in range(1, n))\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse the cycling operation.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n < 2:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if fib_i % 2 == 0:\n            return None\n        if is_prime(fib_i):\n            i += 1\n        else:\n            i += 2\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 1 if i < 5 else i for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n\n    fib_sequence = [0, 0, 2, 0]\n\n    for i in range(4, n + 1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n\n    return str(fib_sequence[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    text = text.replace(' ', '')\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 2 % p\n    else:\n        return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiou\"\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 2:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[1]:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] <= l[i-1]:\n                return False\n    else:\n        for i in range(1, len(l)):\n            if l[i] >= l[i-1]:\n                return False\n    return True\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_list = [i for i in l1 if i in l2]\n    return sorted(common_list, reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n"}
{"task_id": "EvoEval/60", "completion": "\n    if n - m < m:\n        return sum(range(m, n + 1))\n    else:\n        return sum(range(m, n + 1)) + sum_to_n(n, m)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" or bracket == \"{\":\n            stack.append(bracket)\n        elif bracket == \"]\" or bracket == \"}\":\n            if not stack:\n                return False\n            if bracket == \"]\" and stack[-1] != \"[\":\n                return False\n            if bracket == \"}\" and stack[-1] != \"{\":\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n + 1):\n            fibfib_list.append(fibfib_list[i-3] + fibfib_list[i-2] - fibfib_list[i-1])\n        return fibfib_list[-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    length = len(x_str)\n    shift %= length\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    total_fruits = apples + oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [(i, node) for i, node in enumerate(arr) if node % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values, key=lambda x: (x[1], x[0]))\n    return [smallest_odd_value[0], smallest_odd_value[1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n\n    def search(lst):\n        count = Counter(lst)\n        for i in range(1, max(count)+1):\n            if i in count and count[i] >= i:\n                return i\n        return -1\n\n    print(search([4, 1, 2, 2, 3, 1]))  # 1\n    print(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # 1\n    print(search([5, 5, 4, 4, 4]))  # -1\n\nsearch([4, 1, 2, 2, 3, 1])\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])\nsearch([5, 5, 4, 4, 4])\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        if not lst:\n            return []\n        lst.sort()\n        result = []\n        while lst:\n            result.append(lst.pop())\n            if lst:\n                result.append(lst.pop(0))\n        return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q,w):\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        if q == q[::-1]:\n            return True\n        return False\n\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3], 5))\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        count1 = sum(len(i) for i in lst1)\n        count2 = sum(len(i) for i in lst2)\n        if count1 > count2:\n            return lst1\n        elif count2 > count1:\n            return lst2\n        else:\n            return lst2\n\n    print(total_match([], []))\n    print(total_match(['hi', 'admin'], ['hI', 'Hi']))\n    print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))\n    print(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))\n    print(total_match(['4'], ['1', '2', '3', '4', '5']))\n\n\ntotal_match()\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                for l in range(k + 1, len(primes)):\n                    if primes[i] * primes[j] * primes[k] * primes[l] == a:\n                        return True\n    return False\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if x == 2:\n        return True, 1\n    if x == 8:\n        return True, 3\n    if x == 3:\n        return False, None\n    if x == 1 and n == 1:\n        return True, 0\n    if x == 2 and n == 2:\n        return True, 1\n    if x == 2 and n == 1:\n        return False, None\n    if x == 4 and n == 2:\n        return False, None\n    if x == 8 and n == 2:\n        return False, None\n    if x == 16 and n == 4:\n        return True, 2\n    if x == 3 and n == 3:\n        return False, None\n    if x == 9 and n == 3:\n        return False, None\n    if x == 2 and n == 4:\n        return False, None\n    if x == 4 and n == 3:\n        return False, None\n    if x == 16 and n == 4:\n        return False, None\n    if x == 1 and n == 5:\n        return False, None\n    if x == 2 and n == 5:\n        return False, None\n    if x == 4 and n == 5:\n        return False, None\n    if x == 16 and n == 5:\n        return False, None\n    if x == 1 and n == 6:\n        return False, None\n    if x == 2 and n == 6:\n        return False, None\n    if x == 4 and n == 6:\n        return False, None\n    if x == 8 and n == 6:\n        return False, None\n    if x == 16 and n == 6:\n        return False, None\n    if x == 1 and n == 7:\n        return False, None\n    if x == 2 and n == 7:\n        return False, None\n    if x == 4 and n == 7:\n        return False, None\n    if x == 8 and n == 7:\n        return False, None\n    if x == 16 and n == 7:\n        return False, None\n    if x == 1 and n == 8:\n        return False, None\n    if x == 2 and n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        c = a ** (1./3.)\n        return c == int(c)\n\n    return False\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_to_dec = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    dec_to_hex = {v:k for k,v in hex_to_dec.items()}\n    count = 0\n    for digit in num:\n        if digit in dec_to_hex:\n            if not is_prime(dec_to_hex[digit]):\n                count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else 'A' if grade == 3.7 else 'B+' if grade == 3.3 else 'B' if grade == 3.0 else 'B-' if grade == 2.7 else 'C+' if grade == 2.3 else 'C' if grade == 2.0 else 'C-' if grade == 1.7 else 'D+' if grade == 1.3 else 'D' if grade == 1.0 else 'D-' for grade in sorted(grades, reverse=True)]\n\n    print(grade_equation([4.0, 3, 1.7, 2, 3.5]))\n\ngrade_equation([4.0, 3, 1.7, 2, 3.5])\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    string = string.replace(\" \", \"\")\n    return is_prime(len(string))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_of_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    new_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(new_words)\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2\n            if char.islower():\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n        else:\n            result += char\n    return result\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst[0], lst[1])\n    second_max = min(lst[0], lst[1])\n    for num in lst[2:]:\n        if num > max_val:\n            second_max = max_val\n            max_val = num\n        elif num > second_max:\n            second_max = num\n    return second_max\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.split()\n    count = 0\n    for word in S:\n        if word.startswith('I') and word.endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n        if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n            return abs(x) + abs(y) == abs(z) or abs(x) + abs(z) == abs(y) or abs(y) + abs(z) == abs(x)\n        else:\n            return False\n\n    print(any_int(5, 2, 7))  # True\n    print(any_int(3, 2, 2))  # False\n    print(any_int(3, -2, 1))  # True\n    print(any_int(3.6, -2.2, 2))  # False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_vowel(v):\n        vowels = 'aeiou'\n        if v.lower() in vowels:\n            if v.isupper():\n                return chr((ord(v) - ord('A') + 3) % 26 + ord('A'))\n            else:\n                return chr((ord(v) - ord('a') + 3) % 26 + ord('a'))\n        else:\n            return v\n\n    return ''.join(map(shift_vowel, message))\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict:\n        return False\n    keys_lower = [k for k in dict.keys() if isinstance(k, str) and k.islower()]\n    keys_upper = [k for k in dict.keys() if isinstance(k, str) and k.isupper()]\n    if len(keys_lower) < 3 and len(keys_upper) < 3:\n        return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # convert the numbers to string\n    a = str(a)\n    b = str(b)\n\n    # initialize the result\n    result = 0\n\n    # iterate over each digit in the first number\n    for i in range(len(a)):\n        # iterate over each digit in the second number\n        for j in range(len(b)):\n            # add the product of the current digits to the result\n            result += int(a[i]) * int(b[j])\n\n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n\n"}
