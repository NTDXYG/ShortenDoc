{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n        # If the balance is zero, it means we've found a complete group\n        if balance == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group and balance\n            current_group = \"\"\n            balance = 0\n\n    # If there are any remaining characters in the current group, add it to the list of groups\n    if current_group:\n        groups.append(current_group)\n\n    # Sort the list of groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers\n    numbers.sort()\n\n    # Calculate the median of the list\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Initialize a list to store the absolute deviations from the median\n    absolute_deviations = []\n\n    # For each number in the list, calculate the absolute deviation from the median and add it to the list\n    for num in numbers:\n        absolute_deviations.append(abs(num - median))\n\n    # Sort the list of absolute deviations\n    absolute_deviations.sort()\n\n    # If the list of absolute deviations is empty, return 0\n    if not absolute_deviations:\n        return 0\n\n    # Calculate the median of the list of absolute deviations\n    mad = absolute_deviations[len(absolute_deviations) // 2] if len(absolute_deviations) % 2 else (absolute_deviations[len(absolute_deviations) // 2 - 1] + absolute_deviations[len(absolute_deviations) // 2]) / 2\n\n    # Return the median absolute deviation\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    if result:  # if list is not empty\n        result.pop()  # remove last element\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            stack.pop()\n            depth -= 1\n    for group in paren_string.split():\n        depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth - depth)\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number in numbers:\n        if number >= 0:\n            sum_of_numbers += number\n            product_of_numbers *= number\n    return sum_of_numbers, product_of_numbers\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string[:i] + string[i:][::-1]\n    return string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # type: ignore"}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string), 0, -1):\n        prefixes.append(string[:i])\n    return prefixes\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # return the number of unique characters in the string"}
{"task_id": "EvoEval/17", "completion": "\n    music = music_string.split()\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = [notes[note] for note in music]\n    return sorted(set(beats), reverse=True)  # return unique values in descending order\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return string.count(substring)\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of strings, each representing a number\n    numbers_list: List[str] = numbers.split()\n\n    # Define a dictionary to map number strings to their integer values\n    num_dict: dict[str, int] = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Use a list comprehension to convert each number string to its integer value\n    numbers_list: List[int] = [num_dict[num] for num in numbers_list]\n\n    # Sort the list of numbers in descending order\n    numbers_list.sort(reverse=True)\n\n    # Use a list comprehension to convert each number back to its string representation\n    numbers_list: List[str] = [str(num) for num in numbers_list]\n\n    # Join the sorted list of numbers into a string with spaces in between\n    sorted_numbers: str = ' '.join(numbers_list)\n\n    # Return the sorted string\n    return sorted_numbers\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return sorted([(x - min_val) / (max_val - min_val) for x in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([num for num in l if num > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) == 1:\n        return -xs[0]\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    if len(xs) == 3:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 4:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 5:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 6:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 7:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 8:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 9:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 10:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 11:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 12:\n        return -xs[0] / (xs[1] + math.sqrt(xs[1] ** 2 - 4 * xs[2] * xs[0]))\n    if len(xs) == 13:\n        return -xs[0] / (xs[1] + math.sqrt"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0], reverse=True)[i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [x if i % 2 == 0 else y for i, (x, y) in enumerate(zip(l, sorted(l, reverse=True)))]\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n        if a % 2 == 0:\n            return None\n        for i in range(2, int(a ** 0.5) + 1):\n            if a % i == 0:\n                return None\n    return a\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize a list to store the positions of the cars moving left to right\n    left_cars = [i for i in range(1, n + 1)]\n    \n    # Initialize a list to store the positions of the cars moving right to left\n    right_cars = [i for i in range(n * 2, n * 3 + 1)]\n    \n    # Initialize a variable to store the number of collisions\n    collisions = 0\n    \n    # Iterate over the positions of the cars moving left to right\n    for i in range(n):\n        # Iterate over the positions of the cars moving right to left\n        for j in range(n):\n            # Check if the cars at positions i and j collide\n            if left_cars[i] == right_cars[n - j - 1]:\n                # If they collide, increment the number of collisions\n                collisions += 1\n    \n    # Return the total number of collisions\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))  # convert to int and then to str\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text.casefold()[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)  # type: ignore\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return a string with only vowels\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = False\n        if l[i] > l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * x for i, x in enumerate(xs)][1:]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Initialize a counter for vowels\n    count = 0\n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is a lowercase vowel\n        if char in 'aeiou':\n            # If it is, increment the counter\n            count += 1\n    # Return the total count of vowels\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression to sum ASCII values of lower case letters in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into two parts: apples and oranges\n    apples, oranges = s.split(\", \")\n    \n    # Extract the numbers of apples and oranges\n    apples = int(apples.split(\" \")[0])\n    oranges = int(oranges.split(\" \")[0])\n    \n    # Calculate the total number of fruits in the basket\n    total_fruits = n + 1 - apples - oranges\n    \n    return total_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd = [i for i, x in enumerate(arr) if x % 2]\n    if not odd:\n        return []\n    min_odd = min(arr[i] for i in odd)\n    return [min(odd, key=lambda x: (arr[x], x))[0], min_odd]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  # return [index, value]  #"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in sorted(freq.keys()):\n        if freq[i] >= value:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    lst.remove(max_val)\n    lst.remove(min_val)\n    return [max_val] + strange_sort_list(lst) + [min_val]\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s*(s-a)*(s-b)*(s-c)) ** 0.5, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n\n    def will_it_fly(q,w): \n        # Check if the list is balanced (palindromic)\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is even and less than or equal to the maximum possible weight\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        return True\n    \"\"\"\n    def will_it_fly(q,w): \n        # Check if the list is balanced (palindromic)\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is even and less than or equal to the maximum possible weight\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        return True\n    \"\"\"\n    def will_it_fly(q,w): \n        # Check if the list is balanced (palindromic)\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is even and less than or equal to the maximum possible weight\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        return True\n    \"\"\"\n    def will_it_fly(q,w): \n        # Check if the list is balanced (palindromic)\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is even and less than or equal to the maximum possible weight\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        return True\n    \"\"\"\n    def will_it_fly(q,w): \n        # Check if the list is balanced (palindromic)\n        if q != q[::-1]:\n            return False\n        # Check if the sum of elements is even and less than or equal to the maximum possible weight\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        return True\n    \"\"\"\n    def"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    if n % 2 == 0:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n    else:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid + 1:]\n    right = right[::-1]\n    diff = 0\n    for i in range(min(len(left), len(right))):\n        if left[i] != right[i]:\n            diff += 1\n    diff += abs(len(left) - len(right))\n    return diff\n"}
{"task_id": "EvoEval/74", "completion": "\n\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n    return lst2\n    \"\"\"\n    return lst1\n    \"\"\"\n   "}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            a //= i\n            if a % i == 0 and is_prime(i):\n                a //= i\n                if a % i == 0 and is_prime(i):\n                    a //= i\n                    if a % i == 0 and is_prime(i):\n                        a //= i\n                        return True\n    return False\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return True, 0\n    i = 0\n    while n ** i <= x:\n        if n ** i == x:\n            return True, i\n        i += 1\n    return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = set('23')\n    \n    # Initialize a counter for non-prime hexadecimal digits\n    count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a hexadecimal digit\n        if char in '0123456789ABCDEF':\n            # If the character is not a prime hexadecimal digit, increment the counter\n            if char not in prime_hex_digits:\n                count += 1\n    \n    # Return the count of non-prime hexadecimal digits\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]  # convert decimal to binary and remove '0b' prefix\n    return \"db\" + binary + \"bd\"  # add 'db' prefix and 'bd' suffix\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grading table as a dictionary\n    grading_table = {\n        'A+': (4.0, float('inf')),\n        'A': (3.7, 4.0),\n        'A-': (3.3, 3.7),\n        'B+': (3.0, 3.3),\n        'B': (2.7, 3.0),\n        'B-': (2.3, 2.7),\n        'C+': (2.0, 2.3),\n        'C': (1.7, 2.0),\n        'C-': (1.3, 1.7),\n        'D+': (1.0, 1.3),\n        'D': (0.7, 1.0),\n        'D-': (0.0, 0.7),\n        'E': (0.0, 0.0)\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over the GPAs in the input list\n    for gpa in grades:\n        # Initialize a variable to store the letter grade\n        letter_grade = 'E'\n\n        # Iterate over the grading table in ascending order of GPA\n        for letter, (lower, upper) in sorted(grading_table.items(), key=lambda x: x[1]):\n            # If the GPA is greater than or equal to the lower bound and less than the upper bound, update the letter grade\n            if lower <= gpa < upper:\n                letter_grade = letter\n                break\n\n        # Append the letter grade to the list\n        letter_grades.append(letter_grade)\n\n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Calculate the length of the string\n    length = len(string)\n\n    # Check if the length is a prime number\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True  # If the length is a prime number, return True\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**n:\n            if i >= 10**(n-1) and i < 10**(n-1)*10:\n                if i % 10 == 2:\n                    count += 1\n            else:\n                if i % 10 == 2:\n                    count += 1\n                if i // 10**n == 1:\n                    count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert N to hexadecimal and remove the '0x' prefix\n    hex_N = hex(N)[2:]\n    \n    # Initialize sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the hexadecimal string\n    for digit in hex_N:\n        # Convert the character to an integer and add it to the sum\n        sum_of_digits += int(digit, 16)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])  # sum of odd elements at even indices\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word, reverse=True)))\n    return ' '.join(result)  # join the sorted words back into a string with spaces in between\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # First, we need to calculate the sum of the first and last elements of the array\n    first_last_sum = array[0] + array[-1]\n    \n    # Then, we need to determine the sorting order based on the sum\n    if first_last_sum % 2 == 0:\n        # If the sum is even, we sort the array in descending order\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # If the sum is odd, we sort the array in ascending order\n        sorted_array = sorted(array)\n    \n    # Next, we need to remove duplicate values from the sorted array\n    # We can use a list comprehension to create a new list with unique elements\n    unique_array = [x for i, x in enumerate(sorted_array) if i == 0 or x != sorted_array[i-1]]\n    \n    # Finally, we return the sorted array with unique elements\n    return unique_array\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted += chr((ord(char) - 97 + 2 * 2) % 26 + 97)\n            else:\n                encrypted += chr((ord(char) - 65 + 2 * 2) % 26 + 65)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]  # return second last element in sorted list\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = S.split('. ')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (abs(x) + abs(y) == abs(z)) or (abs(x) + abs(z) == abs(y)) or (abs(y) + abs(z) == abs(x)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += chr(ord(char) + 3)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    min_prime = float('inf')\n    for num in lst:\n        if num > 1 and is_prime(num):\n            min_prime = min(min_prime, num)\n    return sum(int(digit) for digit in str(min_prime)) if min_prime != float('inf') else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not key.isupper() and not key.islower():\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return primes[::-1]  # Return list in descending order\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Convert the numbers to strings to easily extract the last digit\n    str_a = str(a)\n    str_b = str(b)\n    \n    # Extract the last digit of each number\n    last_digit_a = int(str_a[-1])\n    last_digit_b = int(str_b[-1])\n    \n    # Multiply the last digits and get the last digit of the result\n    result = (last_digit_a * last_digit_b) % 10\n    \n    return result\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
