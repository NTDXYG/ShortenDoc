{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n        # If the balance is zero, it means we've found a complete group\n        if balance == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group and balance\n            current_group = \"\"\n            balance = 0\n\n    # If there are any remaining characters in the current group, add it to the list of groups\n    if current_group:\n        groups.append(current_group)\n\n    # Sort the list of groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n\n    # Calculate the median of the numbers\n    median = numbers[len(numbers) // 2] if len(numbers) % 2 else (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n    # Initialize a list to store the absolute deviations from the median\n    absolute_deviations = []\n\n    # For each number in the list, calculate the absolute deviation from the median and add it to the list\n    for num in numbers:\n        absolute_deviations.append(abs(num - median))\n\n    # Sort the list of absolute deviations in ascending order\n    absolute_deviations.sort()\n\n    # Calculate the median of the absolute deviations\n    mad = absolute_deviations[len(absolute_deviations) // 2] if len(absolute_deviations) % 2 else (absolute_deviations[len(absolute_deviations) // 2 - 1] + absolute_deviations[len(absolute_deviations) // 2]) / 2\n\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    # Remove the last delimeter\n    result.pop()\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n    for depth in range(max_depth, 0, -1):\n        result.append(max_depth - depth + 1)\n    return result\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring not in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for num in numbers:\n        if num >= 0:\n            sum += num\n            product *= num\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    return [min(numbers[:i+1]) for i in range(len(numbers))]\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return ''\n\n    # Find the longest prefix of the string that is a palindrome\n    prefix = ''\n    for char in string:\n        if is_palindrome(prefix + char):\n            prefix += char\n\n    # Append the reverse of the suffix after the palindromic prefix\n    return prefix + prefix[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len)  # Return the shortest string in the list\n    # return min(strings, key=len) "}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the greatest common divisor of a and b\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the least common multiple of a and b\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    return lcm(a, b)  # Return the least common multiple of a and b\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))  # <--- changed here\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # return the number of unique characters in the string\n"}
{"task_id": "EvoEval/17", "completion": "\n    # Split the input string into a list of notes\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beats\n    beats = []\n    \n    # Define a dictionary to map notes to their corresponding beats\n    note_beats = {'o': 4, 'o|': 2, '.|': 1}\n    \n    # Iterate over each note in the list\n    for note in notes:\n        # Append the beat of the current note to the list\n        beats.append(note_beats[note])\n    \n    # Sort the list of beats in descending order\n    beats.sort(reverse=True)\n    \n    # Return the sorted list of beats\n    return beats\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of numbers\n    num_list = numbers.split()\n    \n    # Sort the list of numbers in descending order\n    num_list.sort(reverse=True)\n    \n    # Join the sorted list back into a string with spaces in between\n    sorted_str = ' '.join(num_list)\n    \n    return sorted_str\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort(reverse=True)\n    return numbers[0], numbers[1]\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return sorted([(n - min_val) / (max_val - min_val) for n in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(dict.fromkeys(numbers))[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) == 1:\n        return -xs[0]\n    elif len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return -xs[0] / xs[1] + poly(xs[2:], -xs[0] / xs[1])\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for y in l if y % 3 == 0], reverse=True)[i // 3] for i, x in enumerate(l)]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    return [x for i, x in enumerate(l) if i % 2 == 0] + sorted([x for i, x in enumerate(l) if i % 2 == 0], reverse=True)\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n == 1:\n        return None\n    elif n == 2:\n        return 3\n    else:\n        a, b = 3, 5\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b if b % 2 != 0 else None\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                collisions += 1\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\nincr_list([1, 2, 3])  # [3, 4, 5]\nincr_list([3, 4, 5])  # [5, 6, 7]\nincr_list([5, 3, 9, 0, 123])  # [7, 5, 11, 2, 125]\nincr_list([7, 5, 4, 5, 11, 2, 125])  # [9, 7, 6, 7, 13, 4, 127]\nincr_list([])  # []\n\nincr_list([1, 2, 3, 4, 5])  # [3, 4, 5, 6, 7]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nincr_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])  # [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\nincr_list([1, 2"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '2'\n    elif n == 2:\n        return '0'\n    elif n == 3:\n        return '0'\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + (n-3) + (n-4))\n\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text[::-1].casefold()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n, p) * pow(3, q, p) % p\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return a string with only vowels\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] < l[i + 1]:\n            increasing = False\n        if l[i] > l[i + 1]:\n            decreasing = False\n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))  # range(m, n + 1) generates numbers from m to n (inclusive) and sum() adds them up\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    derivative = [0] * n\n    for i in range(1, n):\n        derivative[i - 1] = i * xs[i]\n    return derivative\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Define the vowels\n    vowels = 'aeiouy'\n    # Initialize the count of vowels\n    count = 0\n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char.lower() in vowels:\n            # If it is, increment the count\n            count += 1\n    # Return the count of vowels\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Convert the integer to a string to easily manipulate the digits\n    str_x = str(x)\n    \n    # Calculate the effective shift, which is the remainder of the shift divided by the number of digits\n    effective_shift = shift % len(str_x)\n    \n    # If the shift is greater than the number of digits, reverse the string\n    if shift > len(str_x):\n        return str_x[::-1]\n    \n    # Otherwise, shift the digits to the left by the effective shift\n    else:\n        return str_x[-effective_shift:] + str_x[:-effective_shift]  # This line was corrected to use string slicing to shift the digits\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())  # using generator expression to sum ASCII values of lower case letters in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string into a list of strings using the comma as a delimiter\n    fruit_list = s.split(\", \")\n    \n    # Initialize variables to store the total number of apples and oranges\n    total_apples = 0\n    total_oranges = 0\n    \n    # Iterate over each string in the list\n    for fruit in fruit_list:\n        # Split the string into a list of strings using the space as a delimiter\n        fruit_parts = fruit.split(\" \")\n        \n        # The first part of the string is the number of fruits\n        num_fruit = int(fruit_parts[0])\n        \n        # The second part of the string is the type of fruit\n        fruit_type = fruit_parts[1]\n        \n        # If the fruit is an apple, add the number to the total number of apples\n        if fruit_type == \"apples\":\n            total_apples += num_fruit\n        # If the fruit is an orange, add the number to the total number of oranges\n        elif fruit_type == \"oranges\":\n            total_oranges += num_fruit\n    \n    # Calculate the total number of fruits minus one\n    total_fruits = n + 1 - total_apples - total_oranges\n    \n    # Return the total number of mango fruits\n    return total_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    odd = [node for node in arr if node % 2]\n    if not odd:\n        return []\n    smallest = min(odd)\n    return [arr.index(next(node for node in arr if node == smallest)), smallest]\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    counter = Counter(lst)\n    for i in sorted(counter.keys()):\n        if counter[i] >= value:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    max_val = max(lst)\n    min_val = min(lst)\n    max_lst = [i for i in lst if i == max_val]\n    min_lst = [i for i in lst if i == min_val]\n    return max_lst + [i for i in lst if i != max_val and i != min_val] + min_lst\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 3 decimal points\n        return round(area, 3)\n    else:\n        # Return -1 if three sides do not form a valid triangle\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q,w):\n        # Check if list is balanced\n        if q != q[::-1]:\n            return False\n        # Check if sum of elements is even and less than or equal to maximum weight\n        if sum(q) % 2 != 0 or sum(q) > w:\n            return False\n        return True\n    # Test cases\n    print(will_it_fly([1, 2], 5))  # False\n    print(will_it_fly([3, 2, 3], 1))  # False\n    print(will_it_fly([3, 2, 3], 9))  # True\n    print(will_it_fly([3], 5))  # False\n    return will_it_fly([1, 2, 3], 5)  # False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    if n % 2 == 0:\n        return 0\n    else:\n        return min(abs(arr[i] - arr[n - i - 1]) for i in range(n // 2))  # calculate the minimum difference between elements at the same distance from the start and end of the array\n"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) > len(lst2):\n        return lst2\n    elif len(lst1) < len(lst2):\n        return lst1\n    else:\n        return lst1\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = get_prime_factors(a)\n    return len(factors) == 4 and all(is_prime(factor) for factor in factors)\n"}
{"task_id": "EvoEval/76", "completion": "\n    # Check if x is a simple power of n\n    if n ** int(x ** (1. / n)) == x:\n        # If x is a simple power of n, return True and the smallest power\n        return True, int(x ** (1. / n))\n    else:\n        # If x is not a simple power of n, return False and None\n        return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    return sum(1 for c in num if c in '01689ACE')\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]  # convert decimal to binary and remove '0b' prefix\n    return \"db\" + binary + \"bd\"  # add extra characters and return string\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) == 4:\n            return True\n    return False\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the GPA ranges and corresponding letter grades\n    gpa_ranges = [(4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), (2.7, 'B'), (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), (1.3, 'C-'), (1.0, 'D+'), (0.7, 'D'), (0.0, 'D-')]\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Initialize a variable to store the corresponding letter grade\n        letter_grade = ''\n        \n        # Iterate over each GPA range and corresponding letter grade\n        for gpa_range, letter_grade_range in gpa_ranges:\n            # If the GPA is greater than or equal to the current GPA range, update the letter grade\n            if gpa >= gpa_range:\n                letter_grade = letter_grade_range\n                break\n        \n        # Append the letter grade to the list\n        letter_grades.append(letter_grade)\n    \n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Check if the string is empty\n    if not string:\n        return False\n\n    # Convert the string to an integer\n    num = int(string)\n\n    # Check if the number is prime\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if i >= 10**(n-1) and i < 10**(n-1) + 10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 10**(n-2) and i < 10**(n-1) + 2*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 2*10**(n-2) and i < 10**(n-1) + 3*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 3*10**(n-2) and i < 10**(n-1) + 4*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 4*10**(n-2) and i < 10**(n-1) + 5*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 5*10**(n-2) and i < 10**(n-1) + 6*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 6*10**(n-2) and i < 10**(n-1) + 7*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 7*10**(n-2) and i < 10**(n-1) + 8*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 8*10**(n-2) and i < 10**(n-1) + 9*10**(n-2):\n            count += 1\n        elif i >= 10**(n-1) + 9*10**(n-2) and i < 10**n:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # Convert N to hexadecimal and remove the '0x' prefix\n    hex_N = hex(N)[2:]\n    \n    # Initialize sum of digits\n    sum_of_digits = 0\n    \n    # Iterate over each character (digit) in the hexadecimal string\n    for digit in hex_N:\n        # Convert the character to an integer and add it to the sum\n        sum_of_digits += int(digit, 16)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(sum_of_digits)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Split the string into words\n    words = s.split()\n    \n    # Sort the words in descending order based on ASCII value\n    sorted_words = sorted(words, key=lambda x: x.encode('ascii', 'ignore').decode('ascii'), reverse=True)\n    \n    # Join the sorted words back into a string\n    ordered_string = ' '.join(sorted_words)\n    \n    return ordered_string\n"}
{"task_id": "EvoEval/87", "completion": "\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array to avoid modifying the original array\n    array_copy = array.copy()\n    \n    # Remove duplicates by converting the array to a set and then back to a list\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order if the last element is odd, otherwise sort in descending order\n    if array_copy[-1] % 2 != 0:\n        array_copy.sort()\n    else:\n        array_copy.sort(reverse=True)\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort(reverse=True)\n    return lst[1] if lst[1] != lst[0] else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    words = S.split()\n    count = 0\n    for i in range(len(words)):\n        if words[i] == \"I\" and words[-1] == \"boredom\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (abs(x + y) == z or abs(x + z) == y or abs(y + z) == x) and all(isinstance(i, int) for i in [x, y, z])  # Check if the sum of two numbers is equal to the third number and all numbers are integers\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                encoded_char = chr(ord(char.lower()) + 3)\n                if char.isupper():\n                    encoded_char = encoded_char.upper()\n            else:\n                encoded_char = char\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    smallest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if smallest_prime is None or num < smallest_prime:\n                smallest_prime = num\n    return sum_digits(smallest_prime) if smallest_prime else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(2, n + 1):\n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes[::-1]  # Return list in descending order\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Extract unit digits from both numbers\n    a_unit = a % 10\n    b_unit = b % 10\n\n    # Multiply unit digits\n    product = a_unit * b_unit\n\n    # Return the unit digit of the product\n    return product % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return int(round(float(value)))\n"}
