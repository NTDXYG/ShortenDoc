{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_valid(s: str) -> bool:\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    def remove_spaces(s: str) -> str:\n        return ''.join(s.split())\n\n    def dfs(s: str, start: int) -> List[str]:\n        if start == len(s):\n            return ['']\n        if s[start] == '(':\n            count = 1\n            end = start + 1\n            while count != 0:\n                if s[end] == '(':\n                    count += 1\n                elif s[end] == ')':\n                    count -= 1\n                end += 1\n            return [s[start:end]] + dfs(s, end)\n        return dfs(s, start + 1)\n\n    paren_string = remove_spaces(paren_string)\n    groups = dfs(paren_string, 0)\n    return sorted([group for group in groups if is_valid(group)])\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    int_part = int(number)\n    dec_part = number - int_part\n    return int_part, dec_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if len(numbers) == 0:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    depths = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            if len(stack) > max_depth:\n                max_depth = len(stack)\n        elif char == ')':\n            if not stack:\n                raise ValueError(\"Mismatched parentheses\")\n            stack.pop()\n    depths.append(max_depth)\n    return depths[::-1]\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        sum_numbers += num\n        product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) <= len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1, '|': 0.5, '>': 0.25}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note[-1] == '>':\n            note = note[:-1] + '|'\n        if note in music_dict:\n            result.append(music_dict[note])\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    result = (None, None)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i - 1])\n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(max_num - num) / range_num for num in numbers]\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase().lower()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    a, b = max([(abs(c), i) for i, c in enumerate(xs) if c != 0])\n    return round((b - 0.5) / a, 2)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    div_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    div_by_three.sort(reverse=True)\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = div_by_three.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    result = []\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_elements = [l[i] for i in range(0, len(l), 2)]\n    even_index_elements.sort(reverse=True)\n    for i in range(0, len(l), 2):\n        l[i] = even_index_elements.pop(0)\n    return l\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1:\n        return None\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    i = 1\n    while True:\n        fib_num = fib(i)\n        if fib_num % 2 != 0 and is_prime(fib_num):\n            n -= 1\n            if n == 0:\n                return fib_num\n        i += 1\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x+2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return fib4(2)\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    else:\n        return str(int(fib4(n-1)) + int(fib4(n-2)) + int(fib4(n-3)) + int(fib4(n-4)))\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    if len(l) == 0:\n        return 0\n    elif len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return (n % p) % q\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels or not char.isalpha()])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x+y+1\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"Negative arguments are not allowed\")\n    fib_1 = 1\n    fib_2 = 1\n    for _ in range(n - 1):\n        fib_1, fib_2 = fib_2, fib_1 + fib_2\n    return fib_1\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    common_elements = list(set(l1) & set(l2))\n    common_elements.sort(reverse=True)\n    return common_elements\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return xs[1:]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    fibfib_sequence = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib_sequence.append(fibfib_sequence[i - 3] + fibfib_sequence[i - 2] - fibfib_sequence[i - 1])\n    return fibfib_sequence[n]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for letter in s:\n        if letter.lower() in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[shift:] + digits[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    s = s.split(\", \")\n    apples = int(s[0].split(\" \")[0])\n    oranges = int(s[1].split(\" \")[0])\n    mangoes = n - 1 - apples - oranges\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = float('inf')\n    smallest_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 1 and num < smallest_odd:\n            smallest_odd = num\n            smallest_index = i\n    return [smallest_index, smallest_odd] if smallest_index != -1 else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n"}
{"task_id": "EvoEval/70", "completion": "\n"}
{"task_id": "EvoEval/71", "completion": "\n"}
{"task_id": "EvoEval/72", "completion": "\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    i, j = 0, n - 1\n    count = 0\n    while i < j:\n        if arr[i] != arr[j]:\n            count += 1\n        i += 1\n        j -= 1\n    return count\n\n"}
{"task_id": "EvoEval/74", "completion": "\n"}
{"task_id": "EvoEval/75", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89]\n    factors = []\n    for prime in primes:\n        while a % prime == 0:\n            factors.append(prime)\n            a = a / prime\n    if len(factors) > 4:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 0:\n        return (x == 1, 0)\n    elif n == 1:\n        return (x >= 1, 1)\n    elif x == 0:\n        return (True, 0)\n    else:\n        power = 0\n        while n ** power < x:\n            power += 1\n        return (n ** power == x, power if n ** power == x else None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n"}
{"task_id": "EvoEval/78", "completion": "\n    # list of prime hexadecimal digits\n    prime_hex = ['2', '3', '5', '7', 'B', 'D', 'E']\n\n    # count the number of prime hexadecimal digits\n    count = sum(num.count(i) for i in prime_hex)\n\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] == s[i + 2] == s[i + 3]:\n            return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D-', 0.0: 'E'}\n    grades.sort(reverse=True)\n    return [grade_dict.get(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    string = string.replace(\" \", \"\")\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if i % 10 == 2 or i // 10**(i-1) == 1:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    hex_sum = hex(sum(int(i) for i in str(N)))[2:]\n    return hex_sum.upper()\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2))\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(s, reverse=True))\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    return sorted(result, key=lambda x: (-x[0], x[1]))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    if len(array) == 0:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        even_indexes = [i for i in range(len(array)) if array[i] % 2 == 0]\n        odd_indexes = [i for i in range(len(array)) if array[i] % 2 != 0]\n        even_numbers = [array[i] for i in even_indexes]\n        odd_numbers = [array[i] for i in odd_indexes]\n        even_numbers.sort(reverse=True)\n        odd_numbers.sort()\n        result = []\n        for i in range(len(even_indexes)):\n            result.append(odd_numbers.pop(0))\n            result.append(even_numbers.pop(0))\n        if len(odd_numbers) > 0:\n            result.append(odd_numbers.pop(0))\n        return result\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    return max(lst)\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == \"I\" and words[-1] == \"boredom\":\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/92", "completion": "\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n                else:\n                    encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n            else:\n                if char.islower():\n                    encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n                else:\n                    encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    # Your code here\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(map(int, str(n)))\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    min_prime = min(primes)\n    return sum(sum_digits(i) for i in lst if i == min_prime)\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower_case = 0\n    upper_case = 0\n    for key in dict.keys():\n        if key.islower():\n            lower_case += 1\n        elif key.isupper():\n            upper_case += 1\n        else:\n            return False\n    if lower_case == len(dict) or upper_case == len(dict):\n        return True\n    return False\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 0, -1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    a_str = str(a)\n    b_str = str(b)\n    a_unit = int(a_str[-1])\n    b_unit = int(b_str[-1])\n    a_tens = int(a_str[-2]) if len(a_str) > 1 else 0\n    b_tens = int(b_str[-2]) if len(b_str) > 1 else 0\n    result = a * b\n    result_unit = result % 10\n    result_tens = (result // 10) % 10\n    result_hundreds = (result // 100) % 10\n    if result_unit == a_unit and result_unit == b_unit:\n        return result_unit\n    elif result_tens == a_unit and result_tens == b_unit:\n        return result_tens\n    elif result_hundreds == a_unit and result_hundreds == b_unit:\n        return result_hundreds\n    elif result_unit == a_tens and result_unit == b_tens:\n        return result_unit\n    elif result_tens == a_tens and result_tens == b_tens:\n        return result_tens\n    elif result_hundreds == a_tens and result_hundreds == b_tens:\n        return result_hundreds\n    elif result_unit == a_tens * 10 + a_unit and result_unit == b_tens * 10 + b_unit:\n        return result_unit\n    elif result_tens == a_tens * 10 + a_unit and result_tens == b_tens * 10 + b_unit:\n        return result_tens\n    elif result_hundreds == a_tens * 10 + a_unit and result_hundreds == b_tens * 10 + b_unit:\n        return result_hundreds\n    else:\n        return result_unit * 10 + result_tens\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 1 and s[i] in vowels)\n\n"}
{"task_id": "EvoEval/99", "completion": "\n"}
