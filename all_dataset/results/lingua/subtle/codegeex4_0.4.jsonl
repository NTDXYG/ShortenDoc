{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return sorted(result)\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    deviations = [abs(x - median) for x in numbers]\n    mad = sorted(deviations)[len(deviations) // 2]\n    return mad\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n\n    return [max_depth] + parse_nested_parens(paren_string[1:]) if stack else []\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for number in numbers:\n        if number >= 0:\n            sum += number\n            product *= number\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        result.append(min(result[-1], numbers[i]))\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string[i:][::-1] + string\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(a) != len(b):\n        raise ValueError(\"Strings must be of equal length\")\n\n    result = []\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result.append('0')\n        else:\n            result.append('1')\n\n    return ''.join(result)[::-1]\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_str = min(strings, key=len)\n    for string in strings:\n        if len(string) != len(shortest_str):\n            return shortest_str\n    return shortest_str\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    return a * b // gcd(a, b)\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_string = music_string.replace(' ', '')\n    music_list = []\n    for note in music_string:\n        if note == 'o':\n            music_list.append(4)\n        elif note == 'o|':\n            music_list.append(2)\n        elif note == '.|':\n            music_list.append(1)\n    music_list = list(set(music_list))\n    music_list.sort(reverse=True)\n    return music_list\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)\n"}
{"task_id": "EvoEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list = [number_dict[num] for num in numbers_list]\n    numbers_list.sort(reverse=True)\n    return ' '.join([str(num) for num in numbers_list])\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n\n    numbers.sort(reverse=True)\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return list(set(numbers))[::-1]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.lower()\n    elif exclusive_case == 'upper':\n        return string.upper()\n    else:\n        return string.swapcase()\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    a = xs[0]\n    b = xs[1]\n    c = xs[2]\n    d = xs[3]\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                if d == 0:\n                    return None\n                else:\n                    return -d / c\n            else:\n                return -c / b\n        else:\n            return -b / a\n    else:\n        # solve quadratic equation\n        discriminant = b * b - 4 * a * c\n        if discriminant < 0:\n            return None\n        else:\n            x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n            x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n            return x1 if abs(x1) < abs(x2) else x2\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3], reverse=True)\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even = sorted([l[i] for i in range(len(l)) if i % 2 == 0], reverse=True)\n    return [even.pop() if i % 2 == 0 else l[i] for i in range(len(l))]\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1:\n        return None\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b if is_prime(b) else None\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return a + b + c\n    else:\n        return \"Not a triangle\"\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(n, p, q)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    return ''.join([char for char in text if char not in consonants])\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [x for x in l if x < t]\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return len(s0) == len(s1) and set(s0) == set(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] < l[1]:\n        for i in range(1, len(l)):\n            if l[i] < l[i - 1]:\n                return False\n        return True\n    if l[0] > l[1]:\n        for i in range(1, len(l)):\n            if l[i] > l[i - 1]:\n                return False\n        return True\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [xs[i] * i for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-3) + fibfib(n-2) - fibfib(n-1)\n"}
{"task_id": "EvoEval/64", "completion": "\n    return sum(1 for c in s.lower() if c in \"aeiouy\")\n"}
{"task_id": "EvoEval/65", "completion": "\n    return str(x)[-shift:] + str(x)[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s if c.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # split the string into a list of words\n    words = s.split()\n    # initialize a dictionary to store the count of each fruit\n    fruit_count = {}\n    # iterate over the words in the list\n    for word in words:\n        # if the word is a number, skip it\n        if word.isdigit():\n            continue\n        # if the word is a fruit, add it to the dictionary with a count of 1\n        if word in fruit_count:\n            fruit_count[word] += 1\n        else:\n            fruit_count[word] = 1\n    # initialize a variable to store the total number of fruits\n    total_fruits = 0\n    # iterate over the fruit_count dictionary\n    for fruit, count in fruit_count.items():\n        # add the count of each fruit to the total_fruits variable\n        total_fruits += count\n    # return the total number of fruits\n    return total_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    # create a dictionary to store the frequency of each number\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    # find the smallest number with frequency >= value\n    for num, freq in frequency.items():\n        if freq >= num:\n            return num\n\n    return -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order.\n    \"\"\"\n    def reverse_list(lst):\n        return lst[::-1]\n    \"\"\"\n    Given a list of integers, return a new list with the elements in reverse order"}
{"task_id": "EvoEval/71", "completion": "\n###PATH:./python-leetcode-master/leetcode/leetcode_938.py"}
{"task_id": "EvoEval/72", "completion": "\n    if sum(q) % 2 == 0 and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[3] or arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        elif arr[0] == arr[4] or arr[1] == arr[3]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        elif arr[0] == arr[5] and arr[1] == arr[4] or arr[1] == arr[4] and arr[2] == arr[3] or arr[0] == arr[5] and arr[2] == arr[3]:\n            return 1\n        elif arr[0] == arr[5] or arr[1] == arr[4] or arr[2] == arr[3]:\n            return 2\n        else:\n            return 3\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        elif arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] or arr[0] == arr[6] and arr[1] == arr[5] and arr[3] == arr[3] or arr[0] == arr[6"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        if len(lst1) == len(lst2):\n            return lst2\n        elif len(lst1) > len(lst2):\n            return lst1\n        else:\n            return lst2\n    return total_match(lst1, lst2)\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a < 2:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return x == 1, 0\n    if x == n:\n        return True, 1\n    if x % n != 0:\n        return False, None\n    return is_simple_power(x // n, n)[0], is_simple_power(x // n, n)[1] + 1\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        elif a == 0:\n            return True\n        else:\n            return a**(1/3) == int(a**(1/3))\n    return iscube(a)\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = \"0123456789ABCDEF\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime_hex_digits = [hex_digits[i] for i in range(len(hex_digits)) if hex_digits[i] in primes]\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    for i in range(3):\n        if s[i] == s[i+1]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    return len(string.replace(' ', '')) in prime_numbers(1000)\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 10**(n-2)\n"}
{"task_id": "EvoEval/84", "completion": "\n    return hex(N)[2:].upper()\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ' '.join(sorted(s.split(), key=lambda x: x[::-1]))\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not lst:\n        return []\n    if not lst[0]:\n        return []\n    if x not in lst[0]:\n        return []\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    return sorted(set(array), key=lambda x: (-x if x % 2 == 0 else x))\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_alphabet = alphabet[2:] + alphabet[:2]\n    encrypted_alphabet = encrypted_alphabet * 2\n    encrypted_string = ''\n    for letter in s:\n        if letter in alphabet:\n            encrypted_string += encrypted_alphabet[alphabet.index(letter)]\n        else:\n            encrypted_string += letter\n    return encrypted_string\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2]\n"}
{"task_id": "EvoEval/91", "completion": "\n    if not S:\n        return 0\n    sentences = re.split(r'[.?!]\\s*', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if abs(x) == abs(y) or abs(x) == abs(z) or abs(y) == abs(z):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def smallest_prime(lst):\n        primes = [x for x in lst if is_prime(x)]\n        if primes:\n            return min(primes)\n        else:\n            return 0\n\n    def sum_lst(lst):\n        return sum(lst)\n\n    return sum_lst([smallest_prime(lst)])\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not key.islower() and not key.isupper():\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes[::-1]\n"}
{"task_id": "EvoEval/97", "completion": "\n    return abs(a*b) % 10\n"}
{"task_id": "EvoEval/98", "completion": "\n    return sum(1 for c in s if c.isupper() and c in 'AEIOU' and s.index(c) % 2 == 0)\n"}
{"task_id": "EvoEval/99", "completion": "\n    if value.is_integer():\n        return int(value)\n    else:\n        if value - int(value) < 0.5:\n            return int(value)\n        else:\n            return int(value) + 1\n"}
