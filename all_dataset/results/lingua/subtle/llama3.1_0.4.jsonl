{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    # Initialize an empty list to store the separated groups\n    groups = []\n\n    # Initialize an empty string to build the current group\n    current_group = \"\"\n\n    # Initialize a counter to keep track of the balance of parentheses\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, increment the balance\n        if char == \"(\":\n            balance += 1\n            current_group += char\n        # If the character is a close parenthesis, decrement the balance\n        elif char == \")\":\n            balance -= 1\n            current_group += char\n        # If the character is not a parenthesis, skip it\n        else:\n            continue\n\n        # If the balance is zero, it means we've found a complete group\n        if balance == 0:\n            # Add the current group to the list of groups\n            groups.append(current_group)\n            # Reset the current group and balance\n            current_group = \"\"\n            balance = 0\n\n    # Sort the list of groups in ascending alphabetical order\n    groups.sort()\n\n    # Return the list of groups\n    return groups\n\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = statistics.median(numbers)\n    return statistics.median([abs(x - median) for x in numbers])\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # remove the last delimeter\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    stack = []\n    nesting = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            nesting += 1\n        elif char == ')':\n            stack.pop()\n            nesting -= 1\n        elif char == ' ':\n            result.append(nesting)\n    result.append(nesting)\n    return sorted(result, reverse=True)\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [string for string in strings if substring in string]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum = 0\n    product = 1\n    for num in numbers:\n        if num < 0:\n            return None\n        sum += num\n        product *= num\n    return sum, product\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    min_val = float('inf')\n    for num in numbers:\n        if num < min_val:\n            min_val = num\n        result.append(min_val)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        prefix = string[:i]\n        if is_palindrome(prefix):\n            return prefix + string[i:][::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    return ''.join('1' if (a[i] == '1' and b[i] == '0') or (a[i] == '0' and b[i] == '1') else '0' for i in range(len(a)))\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)  # Return the shortest string in the list\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Calculate the least common multiple (LCM) of two numbers\n    def lcm(x, y):\n        # Calculate the greatest common divisor (GCD) of x and y\n        def gcd(x, y):\n            while(y):\n                x, y = y, x % y\n            return x\n        # Calculate the LCM using the formula: LCM(a, b) = |a*b| / GCD(a, b)\n        return abs(x*y) // gcd(x,y)\n    \n    # Return the LCM of a and b\n    return lcm(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i+1] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))  # return the number of unique characters in the string\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music = music_string.split()\n    notes = []\n    for note in music:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n    return sorted(notes, reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Split the input string into a list of numbers\n    numbers_list = numbers.split()\n    \n    # Convert the list of strings into a list of integers\n    numbers_list = [int(num) for num in numbers_list]\n    \n    # Sort the list of integers in descending order\n    numbers_list.sort(reverse=True)\n    \n    # Convert the list of integers back into a list of strings\n    numbers_list = [str(num) for num in numbers_list]\n    \n    # Join the list of strings into a single string with spaces in between\n    sorted_numbers = ' '.join(numbers_list)\n    \n    return sorted_numbers\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    return closest_pair\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if max_val == min_val:\n        return [0.0] * len(numbers)\n    return sorted([(n - min_val) / (max_val - min_val) for n in numbers], reverse=True)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string)  # Return the length of the string\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    return sorted(set(numbers), reverse=True)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.swapcase()\n    else:\n        return string.swapcase()  # default behavior\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [string for string in strings if string.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"At least two coefficients are required to find a zero point.\")\n\n    # Newton's method\n    def f(x):\n        return poly(xs, x)\n\n    def f_prime(x):\n        return poly([i * coeff for i, coeff in enumerate(xs[1:])], x)\n\n    def newton(x0, epsilon=1e-6, max_iter=100):\n        x = x0\n        for _ in range(max_iter):\n            x_new = x - f(x) / f_prime(x)\n            if abs(x_new - x) < epsilon:\n                return x_new\n            x = x_new\n        return x\n\n    return newton(0)\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    return [x if i % 3 != 0 else sorted([y for i, y in enumerate(l) if i % 3 == 0], reverse=True)[j // 3] for i, x in enumerate(l) for j in range(i % 3, i % 3 + 1)]  # <--- changed here\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n"}
{"task_id": "EvoEval/36", "completion": "\n    return sum(1 for i in range(n) if i % 11 == 0 or i % 13 == 0)  # <--- changed here\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    return l[:len(l):2] + sorted(l[len(l):len(l):2], reverse=True)\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n <= 0:\n        return None\n    elif n == 1:\n        return None\n    elif n == 2:\n        return 3\n    else:\n        a, b = 3, 5\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if (i + 1) * (n - j) == (j + 1) * (n - i):\n                    collisions += 1\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    # Iterate over the list\n    for num in l:\n        # Calculate the complement of the current number\n        complement = 1 - num\n        # If the complement is in the set, return True\n        if complement in seen:\n            return True\n        # Otherwise, add the current number to the set\n        seen.add(num)\n    # If we have iterated over the entire list and haven't found a pair that sums to 1, return False\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < 2 or base < 2:\n        raise ValueError(\"Invalid base\")\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '2'\n    else:\n        return str(fib4(n-1) + (n-2)*(n-3) + (n-4))  # <--- BUG INTRODUCED HERE\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 0:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n    else:\n        return sorted_l[n // 2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.casefold() == text[::-1].casefold()\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(n, p, q)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])  # return a string with only vowels\n"}
{"task_id": "EvoEval/52", "completion": "\n    return [i for i in l if i < t]\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "EvoEval/57", "completion": "\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1)) or len(l) == 0\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if stack and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    derivative = [0] * n\n    for i in range(1, n):\n        derivative[i - 1] = i * xs[i]\n    return derivative\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (n - 3) + (n - 2) - fibfib(n - 1)  # Corrected the formula to match the problem description\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    # Define the vowels\n    vowels = 'aeiouy'\n    # Initialize the count\n    count = 0\n    # Iterate over the characters in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char in vowels:\n            # If it is, increment the count\n            count += 1\n    # Return the count\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    shift = shift % len(str(x))\n    return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]  # return str(x)[shift:] + str(x)[:shift]"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(c) for c in s.lower() if c.isalpha())  # calculate the sum of ASCII values of lowercase letters in the string\n"}
{"task_id": "EvoEval/67", "completion": "\n    #split the string to get the number of apples and oranges\n    apples, oranges = map(int, s.split(', ')[0].split(' ')[0]), map(int, s.split(', ')[1].split(' ')[0])\n    #split the string to get the total number of fruits\n    total_fruits = int(s.split(', ')[1].split(' ')[1])\n    #calculate the total number of fruits minus one and minus the number of apples and oranges\n    return total_fruits + 1 - apples - oranges\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Initialize variables to store the smallest odd value and its index\n    smallest_value = float('inf')\n    smallest_index = -1\n\n    # Iterate over the array to find the smallest odd value and its index\n    for i, node in enumerate(arr):\n        # Check if the node value is odd\n        if node % 2 != 0:\n            # If the node value is smaller than the current smallest odd value, update the smallest value and its index\n            if node < smallest_value:\n                smallest_value = node\n                smallest_index = i\n\n    # If no odd values are found, return an empty list\n    if smallest_index == -1:\n        return []\n\n    # Create a list to store the plucked nodes\n    plucked_nodes = []\n\n    # Iterate over the array to pluck the nodes with the smallest odd value\n    for i, node in enumerate(arr):\n        # Check if the node value is equal to the smallest odd value\n        if node == smallest_value:\n            # Add the node index to the list of plucked nodes\n            plucked_nodes.append(i)\n\n    # Return the list of plucked nodes\n    return plucked_nodes\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    for num in sorted(freq.keys()):\n        if freq[num] >= 2:\n            return num\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n   "}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the input is valid\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        return -1\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    # Check if the sides can form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # Return the area with three decimal points\n    return round(area, 3)  # Changed to round() function to get 3 decimal points\n"}
{"task_id": "EvoEval/72", "completion": "\n    return (is_balanced(q) and is_palindromic(q) and sum(q) <= w and sum(q) % 2 == 0)"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    # create a 2D table to store the minimum number of changes\n    dp = [[0] * n for _ in range(n)]\n    # fill the diagonal of the table with 0\n    for i in range(n):\n        dp[i][i] = 0\n    # fill the table in a bottom-up manner\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n            # if the current element is equal to the corresponding element from the end\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                # otherwise, try all possible changes and take the minimum\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]  # return the minimum number of changes for the entire array\n"}
{"task_id": "EvoEval/74", "completion": "\n    if len(lst1) > len(lst2):\n        return lst1\n    elif len(lst1) < len(lst2):\n        return lst2\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        while a % i == 0:\n            factors.append(i)\n            a //= i\n    return len(factors) == 4 and all(is_prime(i) for i in factors)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 0:\n        return True, 0\n    if x == 1:\n        return True, 0\n    if x < 0 or n < 0:\n        return False, None\n    if n == 1:\n        return True, 0\n    if x % n != 0:\n        return False, None\n    x = abs(x)\n    n = abs(n)\n    power = 0\n    while x % n == 0:\n        x = x // n\n        power += 1\n    if x == 1:\n        return True, power\n    return False, None\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a >= 0 and round(a ** (1. / 3)) ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    return sum(1 for digit in num if digit not in '23')\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    return len(set(s)) == 4 and len(s) == 4\n"}
{"task_id": "EvoEval/81", "completion": "\n    # Define the grade boundaries\n    grade_boundaries = [(4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), (2.7, 'B'), (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), (1.3, 'C-'), (1.0, 'D+'), (0.7, 'D'), (0.0, 'E')]\n\n    # Sort the grades in descending order\n    grades.sort(reverse=True)\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over the grades\n    for grade in grades:\n        # Iterate over the grade boundaries\n        for boundary in grade_boundaries:\n            # If the grade is greater than or equal to the boundary, append the corresponding letter grade\n            if grade >= boundary[0]:\n                letter_grades.append(boundary[1])\n                break\n\n    # Return the list of letter grades\n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Check if the string is empty\n    if not string:\n        return False\n\n    # Check if the string is a single character\n    if len(string) == 1:\n        return True\n\n    # Check if the string is a prime number\n    if int(string) > 1:\n        for i in range(2, int(string)):\n            if (int(string) % i) == 0:\n                return False\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/83", "completion": "\n    return 9 * (10 ** (n - 2))  # 9 * (10 ** (n - 2)) = 9 * 10^(n-2) = 9 * 10^(n-2) * 10^0 = 9 * 10^(n-1) = 9 * 10^(n-1) * 10^(-1) = 9 * 10^(n-2) * 10^(-1) = 9 * 10^(n-2) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 = 9 * 10^(n-1) * 10^(-1) * 10^1 ="}
{"task_id": "EvoEval/84", "completion": "\n    # Convert N to hexadecimal and remove the '0x' prefix\n    hex_N = hex(N)[2:]\n    \n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over each character in the hexadecimal string\n    for digit in hex_N:\n        # Convert the character to an integer and add it to the sum\n        total_sum += int(digit)\n    \n    # Convert the sum to a hexadecimal string and return it\n    return hex(total_sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])\n"}
{"task_id": "EvoEval/86", "completion": "\n    return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # sorted() function sorts the list of characters in the string in-place, and returns the sorted list. The key argument is a function that takes one argument and returns one value. It is used to determine the sort order. The reverse argument is a boolean value that determines whether the list is sorted in ascending or descending order. In this case, we use a lambda function as the key, which returns a tuple. The first element of the tuple is a boolean value indicating whether the character is a letter or not. If it is a letter, the second element of the tuple is the lowercase version of the character. This ensures that letters are sorted in ascending order, and non-letters are sorted after letters. The reverse argument is set to True, so the list is sorted in descending order. Finally, we use the join() method to concatenate the sorted characters into a string.  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x.isalpha(), x.lower()), reverse=True))  # return ''.join(sorted(s, key=lambda x: (x"}
{"task_id": "EvoEval/87", "completion": "\n    if not lst or not lst[0]:\n        return []\n    row = [i for i, x in enumerate(lst[0]) if x == x]\n    return [(i, j) for i, sub_lst in enumerate(lst) for j, x in enumerate(sub_lst) if x == x and (i, j) not in row]\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Create a copy of the array to avoid modifying the original array\n    array_copy = array.copy()\n    \n    # Sort the array in ascending order if the length of the array is odd\n    if len(array_copy) % 2 != 0:\n        array_copy.sort()\n    # Sort the array in descending order if the length of the array is even\n    else:\n        array_copy.sort(reverse=True)\n    \n    # Remove duplicate values from the sorted array\n    array_copy = list(set(array_copy))\n    \n    # Sort the array in ascending order\n    array_copy.sort()\n    \n    return array_copy\n"}
{"task_id": "EvoEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.isupper():\n                encrypted += alphabet[(alphabet.index(char.lower()) + shift) % 26].upper()\n            else:\n                encrypted += alphabet[(alphabet.index(char) + shift) % 26]\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[-2] if lst[-1] != lst[-2] else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    words = S.split()\n    boredom_count = 0\n    for i in range(len(words)):\n        if words[i].lower() == \"i\" and words[i+1].lower() == \"am\" and words[i+2].lower() == \"bored\" and words[i+3].lower() == \"with\" and words[i+4].lower() == \"this\" and words[i+5].lower() == \"task\" and words[i+6].lower() == \"and\" and words[i+7].lower() == \"i\" and words[i+8].lower() == \"am\" and words[i+9].lower() == \"feeling\" and words[i+10].lower() == \"boredom\":\n            boredom_count += 1\n    return boredom_count\n"}
{"task_id": "EvoEval/92", "completion": "\n    return (abs(x) == abs(y) == abs(z)) and (isinstance(x, int) and isinstance(y, int) and isinstance(z, int))\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n            else:\n                encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [1 if is_prime(i) else i for i in lst]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    for key in dict:\n        if not (key.islower() or key.isupper()):\n            return False\n    return True\n"}
{"task_id": "EvoEval/96", "completion": "\n    primes = []\n    for possiblePrime in range(n, 1, -1):\n        # assume number is prime until shown it is not. \n        isPrime = True\n        for num in range(2, int(possiblePrime ** 0.5) + 1):\n            if possiblePrime % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(possiblePrime)\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Calculate the sum of unit digits of a and b\n    sum_unit_digits = (a % 10) + (b % 10)\n    \n    # Calculate the sum of unit digits of the product of a and b\n    product_unit_digits = (a * b) % 10\n    \n    # Return the sum of unit digits and the product of unit digits\n    return sum_unit_digits, product_unit_digits\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in 'AEIOU' and i % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(value)\n"}
