{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 1\n        else:\n            total_cost += item\n    if total_cost > 5:\n        total_cost += 10\n    if location == 'Local':\n        total_cost *= 1.5\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        total_cost += 5 * weight\n        if weight > 5:\n            total_cost += 10\n    if location == 'Local':\n        total_cost *= 1\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shift_amount = shift % 26\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n                else:\n                    result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            else:\n                result += char\n        return result\n\n    if isinstance(key, str):\n        shift = sum(ord(char) for char in key)\n    else:\n        shift = key\n\n    return [caesar_cipher(word, shift) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if len(s) == 1:\n            return [chr(int(s) + ord('a') - 1)]\n        if int(s[:2]) <= 26:\n            return [chr(int(s[:2]) + ord('a') - 1)] + [chr(int(s[1]) + ord('a') - 1) + t for t in helper(s[2:])]\n        else:\n            return [chr(int(s[0]) + ord('a') - 1) + t for t in helper(s[1:])]\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle >= max_height:\n            lit_candles += 1\n            max_height = candle\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    pass\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shangri-La found'\r\n    return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    pass\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lowercase\n    string = string.lower().replace('.', '').replace(',', '')\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = {}\r\n    result = []\r\n    for animal in animal_string.split():\r\n        if animal[0] in animals and animal[1:].count('|') + sounds.get(animal[0], 0) < 2:\r\n            sounds[animal[0]] = sounds.get(animal[0], 0) + 1\r\n            result.append(animal[1:].count('|') + 1)\r\n        if len(result) == 5:\r\n            break\r\n    return result\r\n\n\r\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {fruits[0]}, {fruits[1]} {fruits[2]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    \n    # Count the occurrence of each element in the list\n    element_count = Counter(flux_values)\n    \n    # Find the element with the maximum occurrence\n    max_occurrence_element = max(element_count, key=element_count.get)\n    \n    # Find the sum of all elements in the list\n    total_sum = sum(flux_values)\n    \n    # Multiply the sum of elements with the most occurred number\n    energy_signature = total_sum * max_occurrence_element\n    \n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    element_count = {}\n    for elem in elems:\n        if elem in element_count:\n            element_count[elem] += 1\n        else:\n            element_count[elem] = 1\n    \n    rarest_element = min(element_count, key=element_count.get)\n    return rarest_element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [int(card[:-1]) for card in hand]\n    counter = Counter(values)\n    max_count = max(counter.values())\n    if max_count == 5:\n        return 52  # five of a kind\n    elif max_count == 4:\n        return sum(values) * 4  # four of a kind\n    elif max_count == 3:\n        return sum(values) * 2  # triple\n    elif max_count == 2:\n        pair_value = [value for value, count in counter.items() if count == 2][0]\n        triple_value = [value for value, count in counter.items() if count == 3][0]\n        if pair_value == triple_value:\n            return pair_value * 3  # pair + triple\n        else:\n            return pair_value * 2  # pair\n    else:\n        return 0  # no pairs, triples, or fours\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    num = 0\n    while True:\n        num += 1\n        if sum_of_digits(num) == 7:\n            count += 1\n            if count == n:\n                return num\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                for k in range(len(m[i])):\n                    if k != j and m[i][k] == 1:\n                        vampires += 1\n    return vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_grid(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == word[0]:\n                    for k in range(len(word)):\n                        if i + k < len(grid) and grid[i + k][j] == word[k]:\n                            continue\n                        elif j + k < len(grid[0]) and grid[i][j + k] == word[k]:\n                            continue\n                        else:\n                            break\n                    else:\n                        return True\n        return False\n\n    for word in words:\n        if not is_word_in_grid(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v * 9.461e-12\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            index = ord(char) - ord('a')\n            result += str(primes[index])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_language_dict[letter]\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return (max_frequency, max_sentence.strip()) if max_frequency > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    directions = [\"up\", \"down\", \"left\", \"right\"]\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for direction in directions:\n            if direction == \"up\":\n                new_position = (current[0] - 1, current[1])\n            elif direction == \"down\":\n                new_position = (current[0] + 1, current[1])\n            elif direction == \"left\":\n                new_position = (current[0], current[1] - 1)\n            elif direction == \"right\":\n                new_position = (current[0], current[1] + 1)\n            if 0 <= new_position[0] < len(maze) and 0 <= new_position[1] < len(maze[0]) and maze[new_position[0]][new_position[1]] == 0 and new_position not in visited:\n                queue.append((new_position, path + [direction]))\n                visited.add(new_position)\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = max(income - deductions, 0)\n    tax = 0\n    if taxable_income > 10000:\n        tax += 1500 * 0.15\n        taxable_income -= 1500\n    if taxable_income > 25000:\n        tax += 12500 * 0.25\n        taxable_income -= 12500\n    if taxable_income > 45000:\n        tax += 22500 * 0.25\n        taxable_income -= 22500\n    if taxable_income > 130000:\n        tax += 70000 * 0.30\n        taxable_income -= 70000\n    tax += taxable_income * 0.30\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    transformation_percentages[m - 1] = 100\n    for i in range(m, n):\n        transformation_percentages[i] = transformation_percentages[i - 1] + 10\n    for i in range(m - 2, -1, -1):\n        transformation_percentages[i] = max(0, transformation_percentages[i + 1] - 10)\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1 or email.index(\"@\") == 0 or email.index(\".\") < email.index(\"@\"):\r\n        return False\r\n    else:\r\n        return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 1) % len(vowels)]\n                transformed += new_char.upper() if char.isupper() else new_char\n            else:\n                index = consonants.index(char.lower())\n                new_char = consonants[(index + 1) % len(consonants)]\n                transformed += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    result = []\n    for i in range(n):\n        row = '*'\n        for char in s:\n            row += char\n        row += '*'\n        result.append(row)\n    return result\n"}
{"task_id": "EvoEval/40", "completion": "\n    def dfs(target, path):\n        if target == 0:\n            return [path]\n        if target < 0:\n            return []\n        res = []\n        for potion in potions:\n            potion_name, power = potion.split()\n            power = int(power)\n            res += dfs(target - power, path + [potion_name])\n        return res\n\n    res = dfs(target, [])\n    if not res:\n        return []\n    min_len = min(len(r) for r in res)\n    min_res = [r for r in res if len(r) == min_len]\n    min_res.sort(key=lambda x: ''.join(x))\n    return min_res[0]\n"}
{"task_id": "EvoEval/41", "completion": "\n    # find the safe cell\n    safe_cell = None\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 0:\n                safe_cell = (i, j)\n                break\n        if safe_cell:\n            break\n    \n    # calculate the minimum energy required\n    min_energy = float('inf')\n    def dfs(i, j, energy):\n        nonlocal min_energy\n        if i == safe_cell[0] and j == safe_cell[1]:\n            min_energy = min(min_energy, energy)\n            return\n        if i < 0 or i >= len(arr) or j < 0 or j >= len(arr[i]) or arr[i][j] == 99:\n            return\n        dfs(i+1, j, energy+arr[i][j])\n        dfs(i-1, j, energy+arr[i][j])\n        dfs(i, j+1, energy+arr[i][j])\n        dfs(i, j-1, energy+arr[i][j])\n    \n    dfs(0, 0, 0)\n    return min_energy if min_energy != float('inf') else 0\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if player_input:\n                return True, max(player_input)\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if player_input:\n                return True, max(player_input)\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if player_input:\n                return True, max(player_input)\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if player_input:\n                return True, max(player_input)\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if player_input:\n                return True, max(player_input)\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\ndef fairy_tale_transport(q,w,e):\n    total_weight = sum(q)\n    unicorns = sum(i for i in q if i <= w)\n    dragons = sum(i for i in q if i <= e)\n    griffins = sum(i for i in q if i <= e)\n    return total_weight <= (unicorns * w + dragons * e + griffins * e)\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret if secret else 'Take the cannoli.')\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret if secret else 'Take the cannoli.')\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret if secret else 'Take the cannoli.')\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret if secret else 'Take the cannoli.')\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret if secret else 'Take the cannoli.')\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret if secret else 'Take the cannoli.')\n        return result\n    \"\"\"\n    "}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        if isinstance(log, dict):\n            item = log[\"item\"]\n            quantity = log[\"quantity\"]\n        else:\n            item, quantity = log.split(\" \")\n            quantity = int(quantity)\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    decoded_message = \"\"\n    word = \"\"\n    for char in msg:\n        if char == \" \":\n            decoded_message += morse_code_dict[word]\n            word = \"\"\n        elif char == \"/\":\n            decoded_message += morse_code_dict[word] + \" \"\n            word = \"\"\n        else:\n            word += char\n    decoded_message += morse_code_dict[word]\n    return decoded_message.upper()\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ': ' ' ', '1': '.----', '2': '..---', '3': '...--',\n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',\n        '9': '----.', '0': '-----', ',': '--..--', '.': '.-.-.-', '?': '..--..',\n        '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', '!': '-.-.--',\n        '@': '.--.-.', '#': '.-..-.', '$': '...-..-', '%': '..--..', '^': '-.--.',\n        '&': '.-...', '*': '.-.-.-', '+': '.-..-.', '=': '-...-', '[': '-.--.',\n        ']': '-.--.-', '{': '.-.-.', '}': '.-.-.-', '|': '-..-.', ';': '-.-.-',\n        ':': '---...', '_': '..--.-', '\"': '.-..-.', '\\'': '.----.', '~': '-....-',\n        '<': '.-..-', '>': '-.--.-', '\\\\': '-..-.', ',': '--..--', '.': '.-.-.-',\n        '?"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    max_orders = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i * j <= max(orders):\n                max_orders = max(max_orders, sum([x // i for x in orders if x % i == 0]))\n    return max_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1] if i % 2 == 0 else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '?'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1] if i % 2 == 0 else consonants[consonants.index(char.lower()) + 1].upper()\n        else:\n            transformed += char if i % 2 == 0 else char.lower() if char.isupper() else char.upper()\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            shifted_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += shifted_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.- ', 'b': '-... ', 'c': '-.- ', 'd': '-.. ', 'e': '. ', 'f': '..-. ', 'g': '--. ', 'h': '.... ', 'i': '.. ', 'j': '.--- ', 'k': '-.- ', 'l': '.-.. ', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--. ', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..- ', 'y': '-.-- ', 'z': '--..', ' ': '/'\n    }\n    return ''.join(morse_code_dict[char] for char in s)\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                if letter == 'z':\n                    new_word += 'b'\n                else:\n                    new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            else:\n                new_word += letter\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new_word.capitalize() + '@'\n    return translated_phrase[:-1]\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    recipe_count = {}\n    for ingredient, recipes in ingredient_dict.items():\n        for recipe in recipes:\n            if recipe in recipe_count:\n                recipe_count[recipe] += 1\n            else:\n                recipe_count[recipe] = 1\n    sorted_recipes = sorted(recipe_count.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_recipes\n"}
{"task_id": "EvoEval/60", "completion": "\n    sugar_locations.sort()\n    sugar_locations.append(path_length)\n    sugar_locations.insert(0, 0)\n    sugar_count = 0\n    happy_ants = 0\n    for ant in ant_positions:\n        if ant[1] == \"right\":\n            for i in range(sugar_locations.index(ant[0]) + 1, len(sugar_locations)):\n                if sugar_locations[i] - ant[0] <= 1:\n                    sugar_count += 1\n                    break\n                elif sugar_locations[i] - ant[0] > 1:\n                    break\n        elif ant[1] == \"left\":\n            for i in range(sugar_locations.index(ant[0]) - 1, -1, -1):\n                if ant[0] - sugar_locations[i] <= 1:\n                    sugar_count += 1\n                    break\n                elif ant[0] - sugar_locations[i] > 1:\n                    break\n        if sugar_count > 0:\n            happy_ants += 1\n            sugar_count -= 1\n    return happy_ants\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                # Swap case\n                result += char.swapcase()\n            else:\n                # Replace vowels with next vowel sequence\n                if char.lower() in vowels:\n                    index = vowels.index(char.lower())\n                    next_vowel = vowels[(index + 1) % len(vowels)]\n                    result += next_vowel.upper() if char.isupper() else next_vowel\n                # Replace consonants with preceding consonant\n                else:\n                    index = consonants.index(char.lower())\n                    prev_consonant = consonants[(index - 1) % len(consonants)]\n                    result += prev_consonant.upper() if char.isupper() else prev_consonant\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_numbers = [i for i in range(start, end + 1) if is_prime(i)]\n    return [num for num in prime_numbers if num % divisor == 0]\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    ingredients.append(ingredient)\n        final_order[food] = ingredients\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n"}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    \n    # Find the index where the array is not in ascending order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break\n    else:\n        # If the array is already sorted, return True\n        return True\n    \n    # Check if the array can be sorted by rotating\n    rotated = arr[i + 1:] + arr[:i + 1]\n    for j in range(len(rotated) - 1):\n        if rotated[j] > rotated[j + 1]:\n            break\n    else:\n        # If the rotated array is sorted, return True\n        return True\n    \n    # Check if the array can be sorted by swapping\n    swapped = arr[:i] + [arr[i + 1]] + arr[i:i + 1] + arr[i + 2:]\n    for j in range(len(swapped) - 1):\n        if swapped[j] > swapped[j + 1]:\n            break\n    else:\n        # If the swapped array is sorted, return True\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not all(planet in planets for planet in path):\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        digit_count = sum(c.isdigit() for c in string)\n        result.append(f\"Once upon time in kingdom far away, lived magical creature '{string}' known for telling {digit_count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the number of rows and columns in the grid\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Initialize the number of trips to 0\n    trips = 0\n    \n    # Initialize the current position to the top-left corner of the grid\n    row = 0\n    col = 0\n    \n    # Initialize the number of treasures collected to 0\n    treasures_collected = 0\n    \n    # Initialize the number of treasures in the current chamber to the number of treasures in the top-left chamber\n    treasures_in_chamber = grid[0][0]\n    \n    # Initialize the number of trips to the top-left chamber to 0\n    trips_to_chamber = 0\n    \n    # Initialize the number of trips to the bottom-right chamber to 0\n    trips_to_bottom_right = 0\n    \n    # Initialize the number of trips to the top-right chamber to 0\n    trips_to_top_right = 0\n    \n    # Initialize the number of trips to the bottom-left chamber to 0\n    trips_to_bottom_left = 0\n    \n    # Initialize the number of trips to the top-left chamber to 0\n    trips_to_top_left = 0\n    \n    # Initialize the number of trips to the bottom-right chamber to 0\n    trips_to_bottom_right = 0\n    \n    # Initialize the number of trips to the top-right chamber to 0\n    trips_to_top_right = 0\n    \n    # Initialize the number of trips to the bottom-left chamber to 0\n    trips_to_bottom_left = 0\n    \n    # Initialize the number of trips to the top-left chamber to 0\n    trips_to_top_left = 0\n    \n    # Initialize the number of trips to the bottom-right chamber to 0\n    trips_to_bottom_right = 0\n    \n    # Initialize the number of trips to the top-right chamber to 0\n    trips_to_top_"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(c, c) for c in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\ndef create_pyramid(lst):\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * sum(lst[:i+1]))\n    return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 1\n        else:\n            return points(n // k, k) + 1\n\n    return sorted([points(n, k) for n in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                for k in range(i, n):\n                    if mat[k][n - k - 1] != mat[i][j]:\n                        break\n                else:\n                    return True\n    return False\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    \"\"\"\n    def adventure_game(map, instructions):\n        start = None\n        end = None\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start = (i, j)\n                elif map[i][j] == 'E':\n                    "}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday.split(\"-\")[1])\n        day = int(birthday.split(\"-\")[2])\n        zodiac_sign = None\n        if (month == 3 and day >= 21) or (month == 4 and day <= 19):\n            zodiac_sign = \"Aries\"\n        elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n            zodiac_sign = \"Taurus\"\n        elif (month == 5 and day >= 21) or (month == 6 and day <= 20):\n            zodiac_sign = \"Gemini\"\n        elif (month == 6 and day >= 21) or (month == 7 and day <= 22):\n            zodiac_sign = \"Cancer\"\n        elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n            zodiac_sign = \"Leo\"\n        elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n            zodiac_sign = \"Virgo\"\n        elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n            zodiac_sign = \"Libra\"\n        elif (month == 10 and day >="}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node['value']])\n            dfs(node.get('left'), path + [node['value']])\n            dfs(node.get('right'), path + [node['value']])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    \"\"\"\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node['value']])\n            dfs(node.get('left'), path + [node['value']])\n            dfs(node.get('right'), path + [node['value']])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    \"\"\"\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node['value']])\n            dfs(node.get('left'), path + [node['value']])\n            dfs(node.get('right'), path + [node['value']])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    \"\"\"\n    def tree_traversal(tree):\n        def dfs(node, path):"}
{"task_id": "EvoEval/85", "completion": "\n    # find princess's position\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 2:\n                princess = (i, j)\n                break\n    # find minimum number of moves\n    moves = 0\n    while True:\n        # check if reached princess\n        if coord == princess:\n            return moves\n        # check if can move right\n        if coord[1] < len(grid[0]) - 1 and grid[coord[0]][coord[1] + 1] != 1:\n            coord = (coord[0], coord[1] + 1)\n            moves += 1\n        # check if can move down\n        elif coord[0] < len(grid) - 1 and grid[coord[0] + 1][coord[1]] != 1:\n            coord = (coord[0] + 1, coord[1])\n            moves += 1\n        # if cannot move, return -1\n        else:\n            return -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            density = round(features[0] / features[1], 2)\n            result[planet] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # Convert strings to lists of digits\n    digits1 = list(s1)\n    digits2 = list(s2)\n    \n    # Sort the lists\n    digits1.sort()\n    digits2.sort()\n    \n    # Initialize the product to 0\n    product = 0\n    \n    # Iterate over all possible unique combinations of digits from both lists\n    for i in range(len(digits1)):\n        for j in range(len(digits2)):\n            product += int(digits1[i]) * int(digits2[j])\n    \n    return product\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            if char.islower():\n                encoded_message += alphabet[(alphabet.index(char) + n) % 26]\n            else:\n                encoded_message += alphabet[(alphabet.index(char.lower()) + n) % 26].upper()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        n = abs(n)\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    \n    encountered = []\n    continents = [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]\n    \n    for continent in continents:\n        for human, home in humans.items():\n            if home == continent and alien in human:\n                encountered.append(human)\n    \n    return encountered\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    for i in range(2, len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence[:n]\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round_duration in rounds:\n        current_position = (current_position + round_duration * music - 1) % n\n        players.pop(current_position)\n    return players\n"}
