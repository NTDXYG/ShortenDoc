{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = float(item[-5:])\n            if location == \"Local\":\n                total_cost += 5.0 * weight\n            elif location == \"International\":\n                total_cost += 5.0 * weight * 2.5\n            else:\n                total_cost += 5.0 * weight * 1.5\n        else:\n            total_cost += 5.0 * item\n    if total_cost > 50.0:\n        total_cost += 10.0\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            if item == 'Local':\n                total_cost *= 1.0\n            elif item == 'National':\n                total_cost *= 1.5\n            elif item == 'International':\n                total_cost *= 2.5\n        else:\n            total_cost += 5.0\n            if item > 5.0:\n                total_cost += 10.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shift_amount = shift % 26\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n                else:\n                    result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            else:\n                result += char\n        return result\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s):\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        res = [s[0]]\n        if len(s) > 1 and 10 <= int(s[:2]) <= 26:\n            res.append(s[:2])\n        for i in range(1, len(s)):\n            res += [s[i]] + [s[i:i+2]]\n        return [helper(s[i:])[0] + r for r in res]\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle == max_height:\n            lit_candles += 1\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:\n            # move right\n            if col < len(matrix[0]) - 1:\n                col += 1\n            else:\n                row += 1\n        else:\n            # move down\n            if row < len(matrix) - 1:\n                row += 1\n            else:\n                col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    pass\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    pass\n"}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    from collections import Counter\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    return dict(Counter(words))\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_list = []\r\n    animal_count = 0\r\n    for char in animal_string:\r\n        if char in animal_dict:\r\n            animal_count += 1\r\n            if animal_count == 5:\r\n                break\r\n            animal_list.append(animal_count)\r\n        elif char == '|':\r\n            if animal_count == 0:\r\n                continue\r\n            animal_count = 0\r\n    return animal_list[:5]  # Return only the first 5 elements if there are more than 5 animals valid reached\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    fruits_str = ', '.join(fruits)\n    return f\"{fruits_str} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    \n    # Count the occurrences of each number in the list\n    num_counts = Counter(flux_values)\n    \n    # Find the maximum occurrence of any number\n    max_occurrence = max(num_counts.values())\n    \n    # Find the smallest number with the maximum occurrence\n    smallest_max_num = min([num for num, count in num_counts.items() if count == max_occurrence])\n    \n    # Find the sum of all elements in the list\n    total_sum = sum(flux_values)\n    \n    # Multiply the sum with the smallest number with the maximum occurrence\n    result = total_sum * smallest_max_num\n    \n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    min_count = min(counts.values())\n    rarest_elements = [elem for elem, count in counts.items() if count == min_count]\n    \n    return rarest_elements[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name.lower():\n        if char in vowels:\n            index = vowels.index(char)\n            alias += vowels[(index + 1) % len(vowels)]\n        elif char in consonants:\n            index = consonants.index(char)\n            alias += consonants[(index + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.capitalize()\n"}
{"task_id": "EvoEval/15", "completion": "\n    pass\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    def is_seven_digit_sum_seven(num):\n        return sum(int(digit) for digit in str(num)) == 7\n    \n    count = 0\n    num = 7\n    while True:\n        if is_seven_digit_sum_seven(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append([i, j])\n    if len(vampires) == 0:\n        return 0\n    else:\n        return len(vampires)\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_valid(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == word[0]:\n                    for k in range(len(word)):\n                        if i + k < len(grid) and grid[i + k][j] == word[k]:\n                            continue\n                        elif j + k < len(grid[0]) and grid[i][j + k] == word[k]:\n                            continue\n                        else:\n                            break\n                    else:\n                        return True\n        return False\n\n    for word in words:\n        if not is_valid(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance = t * v\n    light_years = distance / 9461000000\n    return light_years\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            index = ord(char) - ord('a')\n            result += str(primes[index])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_dict = {'a': '#%((', 'b': '+($%=', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': 'g', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': 'r', 's': '`', 't': 's', 'u': '~', 'v': 't', 'w': '>', 'x': '<', 'y': 'v', 'z': '{', '|': '}'}\n    translated_word = ''\n    for letter in english_word:\n        translated_word += alien_language_dict[letter]\n    return translated_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return (max_frequency, max_sentence.strip()) if max_frequency > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    directions = [\"up\", \"down\", \"left\", \"right\"]\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for direction in directions:\n            if direction == \"up\":\n                new_position = (current[0] - 1, current[1])\n            elif direction == \"down\":\n                new_position = (current[0] + 1, current[1])\n            elif direction == \"left\":\n                new_position = (current[0], current[1] - 1)\n            elif direction == \"right\":\n                new_position = (current[0], current[1] + 1)\n            if 0 <= new_position[0] < len(maze) and 0 <= new_position[1] < len(maze[0]) and maze[new_position[0]][new_position[1]] == 0 and new_position not in visited:\n                visited.add(new_position)\n                queue.append((new_position, path + [direction]))\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    income = max(income - deductions, 0)\n    tax = 0\n    if income > 30000:\n        tax += (income - 30000) * 0.3\n        income = 30000\n    if income > 15000:\n        tax += (income - 15000) * 0.25\n        income = 15000\n    if income > 5000:\n        tax += (income - 5000) * 0.15\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_staircase(n - stone, magic_stones)\n    return count\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    transformation_percentages[m - 1] = 100\n    for i in range(m, n):\n        if i % 2 == 0:\n            transformation_percentages[i] = transformation_percentages[i - 1] + 10\n        else:\n            transformation_percentages[i] = transformation_percentages[i - 1] - 10\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email.count(\".\") < 1:\r\n        return False\r\n    username, domain = email.split(\"@\")\r\n    if username == \"\" or domain == \"\" or domain.count(\".\") < 1:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    xs = [float(x) for x in xs]\n    xs = [0] + xs\n    for i in range(len(xs)):\n        xs[i] = xs[i] / (i + 1)\n    return xs\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.isdigit():\n            transformed += char\n        else:\n            transformed += char.upper() if char.islower() else char.lower()\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n        \":P\": \"\ud83d\ude1c\",\n        \":O\": \"\ud83d\ude2e\",\n        \":(\": \"\ud83d\ude1e\",\n        \":]\": \"\ud83d\ude03\",\n        \":[\": \"\ud83d\ude14\",\n        \":|\": \"\ud83d\ude10\",\n        \":*\": \"\ud83d\ude18\",\n        \":$\": \"\ud83d\ude1c\",\n        \":@\": \"\ud83d\ude20\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\": \"\ud83d\ude22\",\n        \":'D\": \"\ud83d\ude02\",\n        \":'(\""}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Get the dimensions of the array\n    rows, cols = len(arr), len(arr[0])\n    \n    # Initialize the minimum energy array with the same dimensions as the input array\n    min_energy = [[float('inf')] * cols for _ in range(rows)]\n    \n    # Set the minimum energy for the starting cell to 0\n    min_energy[0][0] = 0\n    \n    # Initialize the queue with the starting cell\n    queue = [(0, 0)]\n    \n    # While there are cells in the queue\n    while queue:\n        # Get the current cell from the queue\n        row, col = queue.pop(0)\n        \n        # For each neighbor of the current cell\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            # Get the neighbor's row and column\n            nr, nc = row + dr, col + dc\n            \n            # If the neighbor is within the bounds of the array\n            if 0 <= nr < rows and 0 <= nc < cols:\n                # Calculate the minimum energy to reach the neighbor\n                new_energy = min_energy[row][col] + arr[nr][nc]\n                \n                # If the new energy is less than the current minimum energy\n                if new_energy < min_energy[nr][nc]:\n                    # Update the minimum energy and add the neighbor to the queue\n                    min_energy[nr][nc] = new_energy\n                    queue.append((nr, nc))\n    \n    # Return the minimum energy array\n    return min_energy[rows-1][cols-1] if min_energy[rows-1][cols-1] != float('inf') else 0\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    find_legendary_item(player_input): In popular multiplayer online game players acquire items Each item rarity value 1 (common to 5 (legendary). single game player acquire multiple items rarity each unique player_input is list items acquired each represented by rarity task write function determines if player acquired legendary item (rarity 5) function return True if legendary acquired False otherwise if legendary item acquired return rarity of second most valuable item If only acquired legendary item return -1. function handle player_input lists any length Examples: find_legendary_item([1, 2 3 4 5]) == (True, 4) find_legendary_item([5]) == (True, -1)_item([1, 3 4]) == (False, None) find_legendary_item([]) == (False, None)\n    \"\"\"\n    legendary_item = False\n    second_most_valuable = None\n    for rarity in player_input:\n        if rarity == 5:\n            legendary_item = True\n        elif second_most_valuable is None or rarity > second_most_valuable:\n            second_most_valuable = rarity\n    if legendary_item:\n        return (True, second_most_valuable if second_most_valuable is not None else -1)\n    else:\n        return (False, None)\n    \"\"\"\n    find_legendary_item(player_input): In popular multiplayer online game players acquire items Each item rarity value 1 (common to 5 (legendary). single game player acquire multiple items rarity each unique player_input is list items acquired each represented by rarity task write function determines if player acquired legendary item (rarity"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    if fuel < duration:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n        remaining_fuel = fuel - fuel_consumption\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\ndef fairy_tale_transport(q, w, e):\n    total_weight_unicorns = sum(q)\n    total_weight_dragons = sum(e)\n    total_weight_items = total_weight_unicorns + total_weight_dragons\n    if total_weight_items <= w + e:\n        return True\n    else:\n        return False\n    "}
{"task_id": "EvoEval/45", "completion": "\n    max_height = -1\n    max_count = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > max_height:\n            max_height = arr[i]\n            count = 1\n        elif arr[i] == max_height:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 1\n    if count > max_count:\n        max_count = count\n    return max_count * 2 + 1\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    hidden_message(test_cases): Covert Agent X secret messages encrypts providing strings words first letter each word forms secret message. task write function test cases returns secret message from each Each test case is list of strings function return each string secret message decoded If secret message found within original strings \"Take the cannoli.\" Words have symbols next ignored Return message in lowercase Examples hidden_message([['Hello, world!' 'okay?' ['Every' 'good' 'boy' 'does' 'fine']]) -> ['ho', 'egbdf'] hidden_message(['apple''Banana' 'grape' 'kiwi' 'melon']] -> ['Take the cannoli.' 'bgkm'] hidden_message([['This' 'is' '?a' 'test' 'case??' ['hi']] -> ['tiatc', 'Take cannoli.']\n    \"\"\"\n    import re\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''\n            for word in case:\n                word = re.sub(r'\\W+', '', word).lower()\n                secret += word[0]\n            result.append(secret)\n        return result\n    return hidden_message(test_cases)\n    \"\"\"\n    hidden_message(test_cases): Covert Agent X secret messages encrypts providing strings words first letter each word forms secret message. task write function test cases returns secret message from each Each test case is list of strings function return each string secret message decoded If secret message found within original strings \"Take the cannoli.\" Words have symbols next ignored Return message in lowercase Examples hidden_message([['Hello, world!' 'okay?' ['Every' 'good' 'boy' 'does' 'fine']]) -> ['ho', 'egbdf'] hidden_message(['apple''Banana' 'grape' '"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '0': '01111', '1': '00111', '2': '11000', '3': '11100', '4': '11110', '5': '11111', '6': '00000', '7': '10000', '8': '11000', '9': '11100', ' ': ' ', '/': '/'}\n    decoded_message = ''\n    current_code = ''\n    for char in msg:\n        if char in morse_code_dict:\n            current_code += morse_code_dict[char]\n            if len(current_code) == 5:\n                decoded_message += chr(int(current_code, 2))\n                current_code = ''\n        elif char == '/':\n            decoded_message += ' '\n    return decoded_message.strip()\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': ' '\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Calculate the maximum number of cookies that can be baked in one batch\n    max_cookies_per_batch = min(n, m)\n    \n    # Initialize the maximum number of orders for the day\n    max_orders_for_day = 0\n    \n    # Iterate through the list of orders\n    for order in orders:\n        # Calculate the number of batches needed for the current order\n        batches_needed = (order + max_cookies_per_batch - 1) // max_cookies_per_batch\n        \n        # Update the maximum number of orders for the day\n        max_orders_for_day = max(max_orders_for_day, batches_needed)\n    \n    # Return the maximum number of orders for the day\n    return max_orders_for_day\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char == '?':\n            transformed += '!'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if c.isalpha():\n            start = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - start + shift) % 26 + start)\n        else:\n            return c\n\n    result = []\n    for i, c in enumerate(message):\n        shift_amount = (i % shift) + 1\n        result.append(shift_char(c, shift_amount))\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': ' ', '/': '//'\n    }\n    return ' '.join(morse_code_dict[char] for char in s)\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alien_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            elif letter == ' ':\n                new_word += '@'\n        if new_word[0] in vowels:\n            new_word = 'xy' + new_word\n        else:\n            new_word = new_word + 'yz'\n        alien_phrase += new_word.capitalize() + ' '\n    return alien_phrase.strip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    recipe_dict = {}\n    for ingredient, number in ingredient_dict.items():\n        recipe_dict[ingredient] = number\n    sorted_recipes = sorted(recipe_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_recipes\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants_count = 0\n    sugar_count = len(sugar_locations)\n    \n    # Iterate through ant positions\n    for ant_position, ant_direction in ant_positions:\n        # Check if ant is at a sugar location\n        if ant_position in sugar_locations:\n            # Increment happy ants count\n            happy_ants_count += 1\n            # Remove sugar from locations\n            sugar_locations.remove(ant_position)\n            # Decrement sugar count\n            sugar_count -= 1\n        # Check if there is sugar left\n        if sugar_count > 0:\n            # Move ant in the opposite direction\n            if ant_direction == \"right\":\n                ant_position -= 1\n            else:\n                ant_position += 1\n            # Check if ant is at a sugar location\n            if ant_position in sugar_locations:\n                # Increment happy ants count\n                happy_ants_count += 1\n                # Remove sugar from locations\n                sugar_locations.remove(ant_position)\n                # Decrement sugar count\n                sugar_count -= 1\n    \n    # Return the number of happy ants\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                # Swap case\n                char = char.swapcase()\n                # Replace vowels with next vowel\n                if char.lower() in vowels:\n                    index = vowels.index(char.lower())\n                    char = vowels[(index + 1) % len(vowels)]\n                    if char.isupper():\n                        char = char.upper()\n                # Replace consonants with preceding consonant\n                elif char.lower() in consonants:\n                    index = consonants.index(char.lower())\n                    char = consonants[(index - 1) % len(consonants)]\n                    if char.isupper():\n                        char = char.upper()\n        result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    # Create a new dictionary to store the converted quantities\n    converted_recipe = {}\n    \n    # Iterate over the items in the recipe dictionary\n    for ingredient, quantity in recipe.items():\n        # Multiply the quantity by the conversion factor\n        converted_quantity = quantity * conversion_factor\n        \n        # Add the converted ingredient and quantity to the new dictionary\n        converted_recipe[ingredient] = converted_quantity\n    \n    # Return the new dictionary with the converted quantities\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while pyramid[-1] > 0:\n        if pyramid[-1] % 2 == 0:\n            pyramid.append(pyramid[-1] - 2)\n        else:\n            pyramid.append(pyramid[-1] - 3)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n\n    Test Cases:\n    food_order({\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}, {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}) == {\"Burger\": [\"Bun\", \"Meat\", \"Mushrooms\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\", \"Pepperoni\"]}\n    food_order({\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}, {}) == {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\n    food_order({\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}, {\"Burger\": {\"remove\": [\"Cheese\", \"Meat\"]}}) == {\"Burger\": [\"Bun\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\n    food_order({\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}, {\"Pizza\": {\"add\": [\"Pepperoni\"]}}) == {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \""}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n    for customer in customers:\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meals[customer][meal]\n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    \n    arr_sorted = sorted(arr)\n    \n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == arr_sorted:\n            return True\n    \n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        output.append(f\"Once kingdom far away lived magical creature '{i}' known for telling {count} tales a day\")\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    num_trips = 0\n    current_row = 0\n    current_col = 0\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    \n    # Traverse the pyramid\n    while current_row < num_rows and current_col < num_cols:\n        # Check if there are treasures in the current chamber\n        if grid[current_row][current_col] > 0:\n            # Calculate the number of trips needed to collect the treasures\n            num_trips += math.ceil(grid[current_row][current_col] / bag_capacity)\n            # Update the current chamber\n            current_row += 1\n            current_col = 0\n        else:\n            # Move to the next chamber\n            current_col += 1\n    \n    return num_trips\r\n"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(c, c) for c in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\n\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n    \"\"\"\n    if not lst:\n        return []\n    \n    max_len = len(str(max(lst)))\n    pyramid = []\n    \n    for num in lst:\n        num_str = str(num).zfill(max_len)\n        pyramid.append(num_str)\n    \n    return pyramid\n    \"\"\"\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n    \"\"\"\n    if not lst:\n        return []\n    \n    max_len = len(str(max(lst)))\n    pyramid = []\n    \n    for num in lst:\n        num_str = str(num).zfill(max_len)\n        pyramid.append(num_str)\n    \n    return pyramid\n    \"\"\"\n    create_"}
{"task_id": "EvoEval/77", "completion": "\n    # Calculate the points for each number in the sequence\n    points = [sum([int(digit) for digit in str(num)]) // k for num in sequence]\n    \n    # Sort the sequence in decreasing order of points\n    sorted_sequence = sorted(sequence, key=lambda x: sum([int(digit) for digit in str(x)]), reverse=True)\n    \n    # Return the list of points\n    return points\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = len(mat[0])\n    pattern = []\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                pattern.append(mat[i][j])\n            elif i == 0 and j == m - 1:\n                pattern.append(mat[i][j])\n            elif i == n - 1 and j == 0:\n                pattern.append(mat[i][j])\n            elif i == n - 1 and j == m - 1:\n                pattern.append(mat[i][j])\n            elif i == 0 and j % 2 == 0:\n                pattern.append(mat[i][j])\n            elif i == n - 1 and j % 2 == 0:\n                pattern.append(mat[i][j])\n            elif i % 2 == 0 and j == 0:\n                pattern.append(mat[i][j])\n            elif i % 2 == 0 and j == m - 1:\n                pattern.append(mat[i][j])\n            elif i % 2 == 1 and j % 2 == 1:\n                pattern.append(mat[i][j])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[j] - prices[i] > max_profit:\n                max_profit = prices[j] - prices[i]\n    return max_profit if max_profit > 0 else 0\n"}
{"task_id": "EvoEval/80", "completion": "\ndef adventure_game(map_instructions):\n    # Initialize player position\n    player_position = (0, 0)\n    # Initialize path\n    path = [(0, 0)]\n    # Get the dimensions of the map\n    rows = len(map_instructions)\n    cols = len(map_instructions[0])\n    \n    # Function to move player\n    def move(direction):\n        nonlocal player_position\n        row, col = player_position\n        if direction == 'up' and row > 0 and map_instructions[row-1][col] != 'X':\n            player_position = (row-1, col)\n        elif direction == 'down' and row < rows-1 and map_instructions[row+1][col] != 'X':\n            player_position = (row+1, col)\n        elif direction == 'left' and col > 0 and map_instructions[row][col-1] != 'X':\n            player_position = (row, col-1)\n        elif direction == 'right' and col < cols-1 and map_instructions[row][col+1] != 'X':\n            player_position = (row, col+1)\n        path.append(player_position)\n    \n    # Process instructions\n    for instruction in map_instructions:\n        if instruction == 'S':\n            continue\n        elif instruction == 'E':\n            break\n        else:\n            move(instruction)\n    \n    # Check if player found end\n    if player_position == (rows-1, cols-1):\n        return path\n    else:\n        return path[:-1]  # Return player's path before hitting wall or edge\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    sorted_word_list = sorted(word_list, key=lambda word: [alien_dictionary.index(char) for char in word])\n    \n    for i in range(len(sorted_word_list) - 1):\n        if sorted_word_list[i] > sorted_word_list[i + 1]:\n            return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aries\": {\"start_date\": \"03-21\", \"end_date\": \"04-19\", \"element\": \"Fire\"},\n        \"Taurus\": {\"start_date\": \"04-20\", \"end_date\": \"05-20\", \"element\": \"Earth\"},\n        \"Gemini\": {\"start_date\": \"06-21\", \"end_date\": \"07-22\", \"element\": \"Air\"},\n        \"Cancer\": {\"start_date\": \"07-23\", \"end_date\": \"08-22\", \"element\": \"Water\"},\n        \"Leo\": {\"start_date\": \"08-23\", \"end_date\": \"09-22\", \"element\": \"Fire\"},\n        \"Virgo\": {\"start_date\": \"09-23\", \"end_date\": \"10-22\", \"element\": \"Earth\"},\n        \"Libra\": {\"start_date\": \"10-23\", \"end_date\": \"11-21\", \"element\": \"Air\"},\n        \"Scorpio\": {\"start_date\": \"11-22\", \"end_date\": \"12-21\", \"element\": \"Water\"},\n        \"Sagittarius\": {\"start_date\": \"12-22\", \"end_date\": \"01-19\", \"element\": \"Fire\"},\n        \"Capricorn\": {\"start_date\": \"01-20\", \"end_date\": \"02-18\", \"element\": \"Earth\"},\n        \"Aquarius\": {\"start_date\": \"02-19\", \"end_date\": \"03-20\", \"element\": \"Air\"},\n        \"Pisces\": {\"start_date\": \"03-21\", \"end_date\": \"04-20\", \"element\": \"Water\"}\n    }\n\n    if not birthdays:\n        return None\n\n    result = {}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:3])\n        for sign, details in zodiac_signs.items():\n            start_month, start_day = map(int, details[\"start_date\"].split(\"-\"))"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    tree_traversal land magical trees spell cast shuffled tree trunks branches leaves task create function binary tree input returns paths from root to leaves tree represented as nested dictionary keys represent node values values represent left right branches sub-dictionaries function return paths list of lists Each sublist path from root to leaf containing node values Example tree = {1: {2: {4: {} 5: {}}, 3: {6: {}, 7: {}}}} assert tree_traversal) == [[1, 2, 4] [1 5 3 6 tree = {1: {2 {4: {7: {}} 5: {8: {}}} 3: {6: {}}}} assert tree_traversal(tree) == [[1, 2, 4, 7] [1 2 5 8] 3 6]] Note binary tree one node root). values nodes single digit numbers output paths sorted to search traversal\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if node in tree:\n                path.append(node)\n                dfs(tree[node].get('left'), path)\n                dfs(tree[node].get('right'), path)\n                if not tree[node].get('left') and not tree[node].get('right'):\n                    paths.append(path[:])\n                path.pop()\n        dfs(next(iter(tree)), [])\n        return paths\n    \"\"\"\n    tree_traversal land magical trees spell cast shuffled tree trunks branches leaves task create function binary tree input returns paths from"}
{"task_id": "EvoEval/85", "completion": "\n    def bfs(start, end):\n        queue = [(start, 0)]\n        visited = set()\n        while queue:\n            (x, y), steps = queue.pop(0)\n            if (x, y) == end:\n                return steps\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            if x < end[0]:\n                queue.append(((x+1, y), steps+1))\n            if y < end[1]:\n                queue.append(((x, y+1), steps+1))\n        return -1\n\n    start = (0, 0)\n    end = coord\n    return bfs(start, end)\n"}
{"task_id": "EvoEval/86", "completion": "\n\n    \"\"\"\n    def sort_movies_by_ratings_release_date(movies_dict, genre):\n        # Filter movies by genre\n        genre_movies = {movie: data for movie, data in movies_dict.items() if genre in movie}\n        \n        # Sort movies by ratings and release year\n        sorted_movies = sorted(genre_movies.items(), key=lambda x: (-x[1][0], x[1][1]))\n        \n        # Return sorted list of movie names"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(planet_dict):\n        result = {}\n        for planet, features in planet_dict.items():\n            population, size = features\n            if population is not None and size is not None:\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \n    # Test cases\n    assert planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}) == {'Earth': 466.67, 'Mars': 0.0}\n    assert planet_population({\"Jupiter\": [None, 64000000], \"Venus\": [500000000, None]}) == {}\n    assert planet_population({}) == {}\n    assert planet_population({\"Saturn\": [1000000000, 9000000]}) == {'Saturn': 111.11}\n    print(\"All test cases passed.\")\n    \n    return planet_population\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    # convert strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n    \n    # calculate product\n    product = num1 * num2\n    \n    # convert product to string to iterate over digits\n    product_str = str(product)\n    \n    # create a set to store unique combinations of digits\n    unique_combinations = set()\n    \n    # iterate over all possible combinations of digits\n    for i in range(len(product_str)):\n        for j in range(i + 1, len(product_str) + 1):\n            # add the combination to the set\n            unique_combinations.add(product_str[i:j])\n    \n    # calculate the sum of the unique combinations\n    sum_combinations = sum(int(comb) for comb in unique_combinations)\n    \n    # return the product of the sum of unique combinations and the product\n    return product * sum_combinations\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            continue\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_position = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_position]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        if n < 0:\n            n = -n\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        encountered = []\n        for human, continent in humans.items():\n            if not isinstance(human, str) or not isinstance(continent, str):\n                return []\n            if continent == \"Asia\":\n                encountered.append(human)\n            elif continent == \"Africa\":\n                encountered.append(human)\n            elif continent == \"North America\":\n                encountered.append(human)\n            elif continent == \"South America\":\n                encountered.append(human)\n            elif continent == \"Europe\":\n                encountered.append(human)\n        encountered.sort()\n        return encountered\n    \"\"\"\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        encountered = []\n        for human, continent in humans.items():\n            if not isinstance(human, str) or not isinstance(continent, str):\n                return []\n            if continent == \"Asia\":\n                encountered.append(human)\n            elif continent == \"Africa\":\n                enc"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = []\n    for i in range(n):\n        if i == 0:\n            sequence.append(a)\n        elif i == 1:\n            sequence.append(b)\n        else:\n            next_num = sequence[-1] + sequence[-2] + i + 1\n            sequence.append(next_num)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    # Create a list of players\n    players = list(range(1, n + 1))\n    # Create a list to keep track of eliminated players\n    eliminated = []\n    # Create a variable to keep track of the current position\n    current_position = 0\n    # Create a variable to keep track of the round number\n    round_number = 1\n    # Create a variable to keep track of the number of seconds passed\n    seconds_passed = 0\n    # Create a variable to keep track of the number of positions advanced per second\n    positions_advanced = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced_in_round = 0\n    # Create a variable to keep track of the number of positions advanced in the current round\n    positions_advanced"}
