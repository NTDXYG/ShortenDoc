{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    factor = 1\n    has_string = False\n    for item in items:\n        if isinstance(item, str):\n            if not has_string:\n                factor *= 1.5\n                has_string = True\n        else:\n            total_cost += 5.0\n            if item > 5:\n                total_cost += 10.0\n    total_cost *= factor\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return \"{:.2f}\".format(total_cost)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0\n        if weight > 5:\n            base_cost += 10.0\n        total_cost += base_cost\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shift = key % 26\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n                else:\n                    result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            else:\n                result += char\n        return result\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def dfs(s, path):\n        if not s:\n            res.append(path)\n            return\n        if s[0] != '0':\n            dfs(s[1:], path + chr(int(s[0]) + ord('a') - 1))\n        if len(s) > 1 and s[0] != '0' and int(s[:2]) <= 26:\n            dfs(s[2:], path + chr(int(s[:2]) + ord('a') - 1))\n    \n    res = []\n    dfs(input_string, '')\n    return res\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    lit_candles = 1\n    max_height = candles[0]\n    for candle in candles[1:]:\n        if candle > max_height:\n            lit_candles += 1\n            max_height = candle\n    return lit_candles\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] != -1:\n        return grid\n    grid[x][y] = 0\n    for i in range(max(0, x-1), min(len(grid), x+2)):\n        for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n            if grid[i][j] == 1:\n                grid[x][y] += 1\n    if grid[x][y] == 0:\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == -1:\n                    minesweeper_clicked(grid, (i, j))\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 161, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    painter_index = canvas.index('P')\n    painted_spaces = 0\n    for i in range(painter_index, len(canvas)):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    for i in range(painter_index, -1, -1):\n        if canvas[i] == '-':\n            canvas = canvas[:i] + '*' + canvas[i+1:]\n            painted_spaces += 1\n        elif canvas[i] == '#':\n            break\n    if painted_spaces % (canvas.count('-') - painted_spaces) != 0:\n        return 'Invalid canvas'\n    return canvas\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    \r\n    for animal in animal_string.split():\r\n        if animal[0] in animals and len(animal) > 1:\r\n            sound = animals[animal[0]]\r\n            count = animal.count(sound)\r\n            if count > 0:\r\n                if animal[0] not in animal_count or animal_count[animal[0]] < 2:\r\n                    sounds.append(count)\r\n                    animal_count[animal[0]] = animal_count.get(animal[0], 0) + 1\r\n    \r\n    return sounds[:5]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]}, {fruits[1]} and {fruits[2]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    max_count = max(Counter(flux_values).values())\n    max_values = [k for k, v in Counter(flux_values).items() if v == max_count]\n    return sum(flux_values) * min(max_values)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    rarest_elem = min(counts, key=counts.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [int(card[:-1]) for card in hand]\n    counts = Counter(values)\n    max_count = max(counts.values())\n    if max_count == 5:\n        return 52\n    elif max_count == 4:\n        return 4 * max(counts)\n    elif max_count == 3:\n        return 2 * max(counts)\n    else:\n        return sum(values)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1  # 1 is the sum of first two numbers in Fibonacci sequence\n        for i in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if num % 7 == 0 and sum_of_digits(num) == 7:\n            count += 1\n    return num\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                humans.append((i, j))\n            elif m[i][j] == 2:\n                vampires.append((i, j))\n    count = 0\n    for h in humans:\n        if h[0] in [v[0] for v in vampires] or h[1] in [v[1] for v in vampires]:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    patterns = []\n    for i in range(1, n + 1):\n        patterns.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        patterns.append(','.join(map(str, range(i, 0, -1))))\n    return patterns\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_valid(word, row, col, dr, dc):\n        for i in range(len(word)):\n            if row + i * dr < 0 or row + i * dr >= len(grid) or col + i * dc < 0 or col + i * dc >= len(grid[0]) or grid[row + i * dr][col + i * dc] != word[i]:\n                return False\n        return True\n\n    for word in words:\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == word[0]:\n                    if is_valid(word, i, j, 0, 1) or is_valid(word, i, j, 1, 0) or is_valid(word, i, j, 0, -1) or is_valid(word, i, j, -1, 0):\n                        break\n            else:\n                continue\n            break\n        else:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/22", "completion": "\n    # Conversion factor from km to light years\n    conversion_factor = 9.461 * 10**12\n    # Calculate distance traveled in light years\n    distance = t * v * conversion_factor\n    return distance\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 126, in <module>\n  File \"<string>\", line 124, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in prime_cipher\n            result += str(primes[ord(char) - ord('a')])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence.strip() if max_sentence else \"\"\r\n\nword_frequency_analysis(\"Hello world. I love this world.\", \"world\")\nword_frequency_analysis(\"This is the best day. I love this day because it's sunny.\", \"day\")\nword_frequency_analysis(\"This is a test. Testing is fun.\", \"test\")\nword_frequency_analysis(\"Welcome to the world of coding.\", \"python\")\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        visited.add(current)\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_x, new_y = current[0] + dx, current[1] + dy\n            if 0 <= new_x < len(maze) and 0 <= new_y < len(maze[0]) and (new_x, new_y) not in visited and maze[new_x][new_y] == 0:\n                queue.append(((new_x, new_y), path + [[\"right\" if dx == 0 and dy == 1 else \"left\" if dx == 0 and dy == -1 else \"down\" if dx == 1 and dy == 0 else \"up\"]]))\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 66, in <module>\n  File \"<string>\", line 64, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 55, in _check_maze\n            current_position = (current_position[0] + move_to_direction[move][0], current_position[1] + move_to_direction[move][1])\nTypeError: unhashable type: 'list'\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_staircase(n - stone, magic_stones)\n    return count", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day == m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] + 20 if day > 0 else 20))\n        elif day < m - 1:\n            transformation_percentages.append(min(100, transformation_percentages[-1] + 10 if day > 0 else 10))\n        else:\n            transformation_percentages.append(max(0, transformation_percentages[-1] - 10 if day > 0 else 0))\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.startswith(\"@\") or email.endswith(\"@\"):\r\n        return False\r\n    if email.count(\"@\") != 1:\r\n        return False\r\n    username, domain = email.split(\"@\")\r\n    if \".\" not in domain:\r\n        return False\r\n    if domain.startswith(\".\") or domain.endswith(\".\"):\r\n        return False\r\n    return True\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                new_char = consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                new_char = new_char.upper()\n            transformed += new_char\n        else:\n            transformed += char\n    return transformed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    # Create a list to store the ASCII art\n    art = []\n    # Add the top and bottom border\n    art.append('*' * (len(s) * 2 + 2))\n    # Add the middle rows\n    for i in range(n):\n        row = '*' + s * 2 + '*'\n        art.append(row)\n    # Add the bottom border\n    art.append('*' * (len(s) * 2 + 2))\n    # Return the ASCII art as a string\n    return '\\n'.join(art)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    from collections import defaultdict\n    import heapq\n\n    # Parse potions into a dictionary where key is power level and value is list of potions\n    potion_dict = defaultdict(list)\n    for potion in potions:\n        potion_name, power_level = potion.split()\n        power_level = int(power_level)\n        potion_dict[power_level].append(potion_name)\n\n    # Create a min heap to store potential solutions\n    heap = [(0, [])]\n\n    while heap:\n        current_power, current_potion_list = heapq.heappop(heap)\n        if current_power == target:\n            return current_potion_list\n        for power_level, potion_names in potion_dict.items():\n            if current_power + power_level <= target:\n                for potion_name in potion_names:\n                    new_potion_list = current_potion_list + [potion_name]\n                    heapq.heappush(heap, (current_power + power_level, new_potion_list))\n\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 27, in potion_mixing\n        potion_name, power_level = potion.split()\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Find the size of the array\n    rows, cols = len(arr), len(arr[0])\n    \n    # Initialize a 2D array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * cols for _ in range(rows)]\n    \n    # Set the minimum energy required to reach the safe cell to 0\n    min_energy[0][0] = 0\n    \n    # Define the directions in which the spider can move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Perform a breadth-first search to find the minimum energy required to reach each cell\n    queue = [(0, 0)]\n    while queue:\n        x, y = queue.pop(0)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and min_energy[nx][ny] > min_energy[x][y] + arr[nx][ny]:\n                min_energy[nx][ny] = min_energy[x][y] + arr[nx][ny]\n                queue.append((nx, ny))\n    \n    # Return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\ndef find_legendary_item(player_input):\n    if 5 in player_input:\n        legendary_item = True\n        player_input.remove(5)\n        if player_input:\n            second_most_valuable_item = max(player_input)\n        else:\n            second_most_valuable_item = -1\n    else:\n        legendary_item = False\n        second_most_valuable_item = None\n    return legendary_item, second_most_valuable_item\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/43", "completion": "\n    trip_duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * trip_duration\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\ndef fairy_tale_transport(q,w,e):\n    total_weight = sum(q)\n    return total_weight <= w + e * 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0] for word in case if word.isalpha())\n            result.append(secret.lower())\n        return result\n    \n    # Test cases\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))  # ['ho', 'egbdf']\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))  # ['Take the cannoli.', 'bgkm']\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))  # ['tiatc', 'Take cannoli.']\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret = ''.join(word[0] for word in case if word.isalpha())\n            result.append(secret.lower())\n        return result\n    \n    # Test cases\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))  # ['ho', 'egbdf']", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 157)\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quantity = log[\"quantity\"]\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n        return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    decoded_message = \"\"\n    current_code = \"\"\n    for char in msg:\n        if char == \" \":\n            if current_code:\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n        elif char == \"/\":\n            if current_code:\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n            decoded_message += \" \"\n        else:\n            current_code += char\n    if current_code:\n        decoded_message += morse_code_dict[current_code]\n    return decoded_message.upper()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 160, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 42, in morse_decoder\n                decoded_message += morse_code_dict[current_code]\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    total_orders = sum(orders)\n    if total_orders <= m * n:\n        return total_orders\n    else:\n        return m * n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1] if i % 2 == 0 else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '!'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1] if i % 2 == 0 else consonants[consonants.index(char.lower()) + 1].upper()\n        elif char == '?':\n            transformed += '!' if i % 2 == 0 else '?'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = (i % shift) + 1\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            encrypted_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            encrypted_message += encrypted_char\n        else:\n            encrypted_message += char\n    return encrypted_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char != \" \":\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += \"/ \"\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''.join([magic_spell[i % len(magic_spell)] for i in range(len(dish))])\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                if letter == 'z':\n                    new_word += 'b'\n                else:\n                    new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            else:\n                new_word += letter\n        if word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new_word.capitalize() + '@'\n    return translated_phrase[:-1]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    happy_ants = 0\n    sugar_count = 0\n    for ant in ant_positions:\n        if ant[1] == \"right\":\n            if ant[0] < path_length:\n                if ant[0] in sugar_locations:\n                    sugar_count += 1\n                    sugar_locations.remove(ant[0])\n                for i in range(ant[0] + 1, path_length):\n                    if i in sugar_locations:\n                        sugar_count += 1\n                        sugar_locations.remove(i)\n                        break\n        else:\n            if ant[0] >= 0:\n                if ant[0] in sugar_locations:\n                    sugar_count += 1\n                    sugar_locations.remove(ant[0])\n                for i in range(ant[0] - 1, -1, -1):\n                    if i in sugar_locations:\n                        sugar_count += 1\n                        sugar_locations.remove(i)\n                        break\n        if sugar_count > 0:\n            happy_ants += 1\n    return happy_ants\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 162, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper() if char.isupper() else vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                else:\n                    result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)].upper() if char.isupper() else consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n            else:\n                result += char\n        else:\n            result += char.swapcase()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    ingredients.append(ingredient)\n        final_order[food] = ingredients\n    return final_order\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                anagram_pairs.append((prime_numbers[i], prime_numbers[j]))\n\n    return anagram_pairs\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meal['calories']\n    return total_calories\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    \n    # Find the index where the array is not in ascending order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            # Perform a rotation from that index\n            arr = arr[i + 1:] + arr[:i + 1]\n            break\n    \n    # Check if the array is now sorted\n    return arr == sorted(arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not path or path[0] not in planets or path[-1] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n    pass", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_string += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for string in lst:\n        count = sum(c.isdigit() for c in string)\n        output.append(f\"Once upon time, in kingdom far away, lived a magical creature with the name of '{string}' known for telling {count} tales a day\")\n    return output\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the number of rows and columns in the pyramid\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Initialize the number of trips to 0\n    trips = 0\n    \n    # Initialize the current position to the top-left corner of the pyramid\n    row = 0\n    col = 0\n    \n    # Initialize the number of treasures collected to 0\n    treasures = 0\n    \n    # Initialize the number of treasures in the current chamber to the number of treasures in the top-left chamber\n    treasures_in_chamber = grid[0][0]\n    \n    # Initialize the number of treasures in the current chamber to the number of treasures in the top-left chamber\n    treasures_in_chamber = grid[0][0]\n    \n    # While there are still treasures to collect\n    while treasures_in_chamber > 0:\n        # If the current chamber has more treasures than the bag can carry\n        if treasures_in_chamber > bag_capacity:\n            # Collect the maximum number of treasures that the bag can carry\n            treasures += bag_capacity\n            # Subtract the number of treasures collected from the number of treasures in the current chamber\n            treasures_in_chamber -= bag_capacity\n            # Move to the next chamber to collect the remaining treasures\n            col += 1\n            # Increment the number of trips\n            trips += 1\n        # If the current chamber has fewer treasures than the bag can carry\n        else:\n            # Collect all the treasures in the current chamber\n            treasures += treasures_in_chamber\n            # Set the number of treasures in the current chamber to 0\n            treasures_in_chamber = 0\n            # If the current chamber is not the bottom row\n            if row < rows - 1:\n                # Move to the next chamber below\n                row += 1\n                # Set the number of treasures in the current chamber to the number of treasures in the next chamber\n                treasures_in_chamber = grid[row][col]\n                # Increment the number of", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 190, in <module>\n  File \"<string>\", line 188, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(char, char) for char in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                new_char = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            result += new_char.upper() if char.isupper() else new_char\n        elif char.isdigit():\n            new_char = str((int(char) + 1) % 10)\n            result += new_char\n        elif char == '?':\n            result += '!' if i % 2 == 0 else '?'\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\ndef create_pyramid(lst):\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * sum(lst[:i+1]))\n    return pyramid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 0\n        else:\n            return points(n//k, k) + 1\n    \n    return sorted([points(n, k) for n in sequence], reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n-i-1])\n    return result[:-1] if n % 2 == 0 else result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    if len(prices) == 0 or days == 0:\n        return 0\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[j] > prices[i]:\n                max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        start = None\n        end = None\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start = (i, j)\n                elif map[i][j] == 'E':\n                    end = (i", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 41\n                    end = (i\n    end = (i\n          ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_dict = {'Fire': 0, 'Water': 0, 'Air': 0, 'Earth': 0}\n    for date in birthdays:\n        month = int(date[5:7])\n        day = int(date[8:])\n        if (month == 3 and 21 <= day <= 19) or (month == 4 and 20 <= day <= 20):\n            zodiac_dict['Fire'] += 1\n        elif (month == 4 and 21 <= day <= 22) or (month == 5 and 23 <= day <= 31):\n            zodiac_dict['Earth'] += 1\n        elif (month == 5 and 21 <= day <= 20) or (month == 6 and 21 <= day <= 22):\n            zodiac_dict['Air'] += 1\n        elif (month == 6 and 23 <= day <= 22) or (month == 7 and 23 <= day <= 31):\n            zodiac_dict['Water'] += 1\n        elif (month == 7 and 23 <= day <= 22) or (month == 8 and 23 <= day <= 22):\n            zodiac_dict['Fire'] += 1\n        elif (month == 8 and 23 <= day <= 22) or (month == 9 and 23 <= day <= 22):\n            zodiac_dict['Earth'] += 1\n        elif (month == 9 and 23 <= day <= 22) or (month == 10 and 23 <= day <= 22):\n            zodiac_dict['Air'] += 1\n        elif (month == 10 and 23 <= day <= 22) or (month == 11 and 23 <= day <= 21):\n            zodiac_dict['Water'] += 1\n        elif (month == 11 and 22 <= day <= 21) or (month == 12 and 22 <= day <= 19):\n            zodiac_dict['Fire'] += 1\n        elif (month == 12 and 20 <= day <= 20) or (", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 57\n        elif (month == 12 and 20 <= day <= 20) or (\n    elif (month == 12 and 20 <= day <= 20) or (\n                                              ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in tree_traversal\n    dfs(tree, [])\n  File \"<string>\", line 29, in dfs\n            paths.append(path + [node['value']])\nKeyError: 'value'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\ndef sort_movies_by_ratings_and_release_date(movies_dict):\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\nmovies_dict = {\"Inception\": [8.8, 2010], \"The Dark Knight\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [8.4, 2012]}", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 138, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 25, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            population, size = features\n            if population is not None and size is not None:\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n\n    # Test cases\n    assert planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}) == {'Earth': 466.67, 'Mars': 0.0}\n    assert planet_population({}) == {}\n    assert planet_population({\"Jupiter\": [None, 64000000]}) == {}\n    assert planet_population({\"Venus\": [500000000, None]}) == {}\n    print(\"All test cases passed.\")\n\nplanet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]})\nplanet_population({})\nplanet_population({\"Jupiter\": [None, 64000000]})\nplanet_population({\"Venus\": [500000000, None]})\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def sum_of_combinations(num):\n        num_list = list(num)\n        result = 0\n        for i in range(len(num_list)):\n            for j in range(i + 1, len(num_list) + 1):\n                result += sum(int(digit) for digit in num_list[i:j])\n        return result\n\n    num1 = sum_of_combinations(s1)\n    num2 = sum_of_combinations(s2)\n    return num1 * num2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = alphabet[i % 26] * (2 * i + 1)\n        fountain += layer.center(2 * n - 1) + '\\n'\n    return fountain.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_index = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_index]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        n = abs(n)\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        continents = [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]\n        encountered = []\n        for continent in continents:\n            for human, home in humans.items():\n                if home == continent and human not in encountered:\n                    encountered.append(human)\n        return encountered\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round_duration in rounds:\n        for _ in range(round_duration):\n            current_position = (current_position + music) % n\n        players.pop(current_position)\n        if current_position == 0:\n            current_position = len(players) - 1\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
