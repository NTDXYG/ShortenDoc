{"task_id": "EvoEval/0", "completion": "\n    base_shipping_cost = 5.0\n    additional_shipping_cost_per_kg = 10.0\n    weight_factor = 1.5\n    total_shipping_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_shipping_cost += item * weight_factor\n        if item > 5.0:\n            total_shipping_cost += additional_shipping_cost_per_kg\n\n    if location == 'Local':\n        total_shipping_cost *= 1.0\n    elif location == 'National':\n        total_shipping_cost *= 1.5\n    elif location == 'International':\n        total_shipping_cost *= 2.5\n\n    return round(total_shipping_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 32, in calculate_shipping_cost\n            item = float(item)\nValueError: could not convert string to float: 'c'\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    local_shipping_cost_factor = 1.5\n    national_shipping_cost_factor = 2.5\n    additional_weight_cost = 10.0\n\n    total_shipping_cost = base_shipping_cost\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        if item > 5.0:\n            total_shipping_cost += additional_weight_cost\n        elif location == 'Local':\n            total_shipping_cost += item * local_shipping_cost_factor\n        elif location == 'National':\n            total_shipping_cost += item * national_shipping_cost_factor\n        else:\n            total_shipping_cost += item\n\n    return round(total_shipping_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in calculate_shipping_cost\n            item = float(item)\nValueError: could not convert string to float: 'Book'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str, index: int, current_string: str, result: List[str]) -> None:\n        if index == len(input_string):\n            result.append(current_string)\n            return\n        for i in range(index, len(input_string)):\n            get_combinations(input_string, i + 1, current_string + input_string[i], result)\n\n    result = []\n    get_combinations(input_string, 0, \"\", result)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_candle = candles[0]\n    count = 0\n    for candle in candles:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n\n        if row >= rows:\n            row = rows - 1\n            if col >= cols:\n                col = cols - 1\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 150, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 15, in zigzag_traversal\n        result.append(matrix[row][col])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        if x > 0:\n            grid[x-1][y] = 0 if grid[x-1][y] != 1 else 1\n        if x < len(grid)-1:\n            grid[x+1][y] = 0 if grid[x+1][y] != 1 else 1\n        if y > 0:\n            grid[x][y-1] = 0 if grid[x][y-1] != 1 else 1\n        if y < len(grid[0])-1:\n            grid[x][y+1] = 0 if grid[x][y+1] != 1 else 1\n    elif grid[x][y] == -1:\n        return grid\n    else:\n        grid[x][y] = 1\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 162, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # Define the starting point\n    point = (0, 0)\n\n    # Define the directions\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Define the sequence\n    sequence = [0, 1, 2, 3]\n\n    # Check if the sequence leads back to the starting point\n    if point in [(x, y) for x, y in directions.values()]:\n        return 'Shangri-La found'\n\n    # Check if the sequence is a valid sequence\n    for i in range(len(code_sequence)):\n        if code_sequence[i] not in directions:\n            return 'Shangri-La not found'\n\n    # Check if the sequence leads to the starting point\n    for i in range(len(code_sequence)):\n        point = (point[0] + directions[code_sequence[i]][0], point[1] + directions[code_sequence[i]][1])\n        if point in [(x, y) for x, y in directions.values()]:\n            return 'Shangri-La found'\n\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_list = []\n    animal_string_list = animal_string.split()\n\n    for animal_sound in animal_string_list:\n        animal, sound = animal_sound.split('|')\n        if animal in animal_dict and animal_dict[animal] < 2:\n            animal_dict[animal] += 1\n            animal_list.append(animal_dict[animal])\n        else:\n            continue\n\n    return animal_list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in count_animals\n        animal, sound = animal_sound.split('|')\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {' and '.join(fruits)} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    sum_elements = sum(k * v for k, v in count.items())\n    return sum_elements * max_occurrence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n    count_dict = Counter(elems)\n    min_count = min(count_dict.values())\n    rarest_elems = [k for k, v in count_dict.items() if v == min_count]\n\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    def count_card_values(hand: list):\n        values = [int(card[0]) for card in hand]\n        return values\n\n    def count_card_pairs(values: list):\n        pairs = [values.count(i) for i in set(values) if values.count(i) > 1]\n        return sum(pairs)\n\n    def count_card_triples(values: list):\n        triples = [values.count(i) for i in set(values) if values.count(i) > 2]\n        return sum(triples)\n\n    def count_card_quadruples(values: list):\n        quadruples = [values.count(i) for i in set(values) if values.count(i) > 3]\n        return sum(quadruples)\n\n    def count_card_fives(values: list):\n        fives = [values.count(i) for i in set(values) if values.count(i) > 4]\n        return sum(fives)\n\n    values = count_card_values(hand)\n    pairs = count_card_pairs(values)\n    triples = count_card_triples(values)\n    quadruples = count_card_quadruples(values)\n    fives = count_card_fives(values)\n\n    score = pairs * 3 + triples * 2 + quadruples * 1 + fives * 0\n\n    return score\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 167, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return sum(fib_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard[1] *= -1\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        dragon_hp -= wizards[0][1]\n        wizards.pop(0)\n        if len(wizards) == 0:\n            return 'The dragon won!'\n    return wizards[0][0]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 140, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in wizard_battle\n        wizard[1] *= -1\nTypeError: 'tuple' object does not support item assignment\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    else:\n        return \"Invalid input\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    def vampires(m):\n        vampires_count = 0\n        for i in range(len(m)):\n            for j in range(len(m[i])):\n                if m[i][j] == 2:\n                    vampires_count += 1\n        return vampires_count\n\n    def vampires_in_matrix(m):\n        vampires_count = 0\n        for i in range(len(m)):\n            for j in range(len(m[i])):\n                if m[i][j] == 2:\n                    vampires_count += 1\n                if j < len(m[i]) - 1 and m[i][j] == 1 and m[i][j+1] == 1:\n                    vampires_count += 1\n        return vampires_count\n\n    return vampires_in_matrix(m)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    result = []\n    for i in range(n, 0, -1):\n        result.append(','.join(str(j) for j in range(i, 0, -1)))\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in transposed:\n            if word in ''.join(i):\n                return True\n        return False\n\n    for word in words:\n        if not is_word_in_row(grid, word) and not is_word_in_col(grid, word):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_years = 9.461 * 10**12\n    distance = t * v\n    return distance / light_years\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 123, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            if char in \"aeiou\":\n                result += char\n            else:\n                result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    text = text.lower()\n    word = word.lower()\n    words = text.split('. ')\n    word_count = {}\n    for sentence in words:\n        sentence_words = sentence.split(' ')\n        for w in sentence_words:\n            if w == word:\n                if w in word_count:\n                    word_count[w] += 1\n                else:\n                    word_count[w] = 1\n    max_count = max(word_count.values()) if word_count else 0\n    max_words = [k for k, v in word_count.items() if v == max_count]\n    return (max_count, ' '.join(max_words)) if max_words else (0, \"\")\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    maze[start[0]][start[1]] = 1\n    stack = [start]\n    while stack:\n        current = stack[-1]\n        if current == end:\n            return []\n        for direction in directions:\n            next_point = (current[0] + direction[0], current[1] + direction[1])\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 0:\n                maze[next_point[0]][next_point[1]] = 1\n                stack.append(next_point)\n                break\n        else:\n            stack.pop()\n    return []\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 69, in <module>\n  File \"<string>\", line 67, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 61, in _check_maze\n        assert current_position == end\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        tax = 0\n    elif income <= 25000:\n        tax = (income - 10000) * 0.15\n    elif income <= 45000:\n        tax = (income - 25000) * 0.25\n    else:\n        tax = (income - 45000) * 0.30\n\n    tax -= deductions\n\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(list(set(palindromes)))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_move in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            next_point = (start[0] + next_move[0], start[1] + next_move[1])\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 1:\n                return dfs(maze, next_point, end, path)\n        return None\n\n    return dfs(maze, start, end)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 63, in <module>\n  File \"<string>\", line 61, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 32, in find_path\n    return dfs(maze, start, end)\n  File \"<string>\", line 29, in dfs\n                return dfs(maze, next_point, end, path)\n                return dfs(maze, next_point, end, path)\n                return dfs(maze, next_point, end, path)\n  File \"<string>\", line 29, in dfs\n                return dfs(maze, next_point, end, path)\n                return dfs(maze, next_point, end, path)\n                return dfs(maze, next_point, end, path)\n  File \"<string>\", line 29, in dfs\n                return dfs(maze, next_point, end, path)\n                return dfs(maze, next_point, end, path)\n                return dfs(maze, next_point, end, path)\n  [Previous line repeated 976 more times]\n  File \"<string>\", line 24, in dfs\n        if start == end:\nRecursionError: maximum recursion depth exceeded in comparison\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    new_playlist = playlist.copy()\n    for i in range(len(playlist)):\n        if \"Rock\" not in playlist[i]:\n            j = random.randint(0, len(playlist) - 1)\n            while j == i:\n                j = random.randint(0, len(playlist) - 1)\n            new_playlist[i], new_playlist[j] = new_playlist[j], new_playlist[i]\n    return new_playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # Initialize the number of ways to reach the first step\n    ways[0] = 1\n    # Initialize a set to store the unique powers of magic stones\n    magic_stones_set = set(magic_stones)\n\n    # Iterate over each step\n    for i in range(1, n + 1):\n        # Iterate over each magic stone\n        for stone in magic_stones:\n            # If the stone's power is less than or equal to the current step\n            if stone <= i:\n                # Add the number of ways to reach the current step minus the number of ways to reach the step that the stone can jump to\n                ways[i] += ways[i - stone]\n        # If the number of steps 'i' is a magic stone's power, add the number of ways to reach the current step to the set\n        if i in magic_stones_set:\n            magic_stones_set.add(i + stone)\n\n    return ways[n]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    if m > n:\n        return \"Invalid day\"\n    if m == 1:\n        return [0] * n\n    transformation_percentage = [0] * n\n    for i in range(1, m):\n        transformation_percentage[i] = 10\n    transformation_percentage[m - 1] = 100\n    for i in range(m, n):\n        transformation_percentage[i] = transformation_percentage[i - 1] + 10\n    return transformation_percentage\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    if email[0] == \".\" or email[-1] == \".\":\n        return False\n    if \"..\" in email:\n        return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    if not xs:\n        return [0]\n    result = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        for j in range(i + 1, len(xs)):\n            result[i] += xs[j] / (i - j + 1)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 131, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 18, in calculate_integral_coefficients\n            result[i] += xs[j] / (i - j + 1)\nZeroDivisionError: division by zero\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            new_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n        elif char.lower() in consonants:\n            new_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        elif char == ' ':\n            new_s += ' '\n        else:\n            new_s += char\n    return new_s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    if n <= 0:\n        return []\n    if not s:\n        return []\n    result = []\n    for i in range(n):\n        result.append(\"*\" + s + \"*\" * (n - 1))\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    def sort_key(potion):\n        name, power = potion.split()\n        return (power, name)\n\n    potions.sort(key=sort_key, reverse=True)\n    used_potions = []\n    total_power = 0\n    for potion in potions:\n        name, power = potion.split()\n        power = int(power)\n        if total_power + power > target:\n            break\n        total_power += power\n        used_potions.append(potion)\n\n    if total_power != target:\n        return []\n\n    used_potions.sort()\n    return used_potions\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in potion_mixing\n    potions.sort(key=sort_key, reverse=True)\n  File \"<string>\", line 22, in sort_key\n        name, power = potion.split()\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input):\n        legendary_item = -1\n        legendary_item_rarity = -1\n        legendary_item_count = 0\n        rarity_count = {}\n\n        for rarity in player_input:\n            if rarity == 5:\n                legendary_item_count += 1\n                legendary_item = max(legendary_item, rarity)\n            rarity_count[rarity] = rarity_count.get(rarity, 0) + 1\n\n        second_most_rarity = sorted(list(rarity_count.keys()))[-2]\n\n        if legendary_item_count > 0:\n            return (True, legendary_item)\n        else:\n            return (False, legendary_item)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    if distance <= (speed * fuel):\n        return round(fuel - (spaceship_weight * planet_gravity * 0.1) * (distance / speed), 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q, w, e):\n        total_weight = 0\n        for item in q:\n            total_weight += item\n        if total_weight > w:\n            return False\n        if total_weight > e:\n            return False\n        return True\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20))  # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10))  # False\n    print(fairy_tale_transport([1, 2, 3], 1, 5))  # True\n    print(fairy_tale_transport([5, 10, 15], 15, 15))  # True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(1, len(arr)-1):\n        left_view = arr[i] - arr[i-1]\n        right_view = arr[i] - arr[i+1]\n        max_view = max(max_view, left_view, right_view)\n    return max_view + 2\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if '?' in word:\n                    secret_message += 'Take the cannoli.'\n                else:\n                    secret_message += word[0]\n            secret_messages.append(secret_message)\n        return secret_messages\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n\nhidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']])\nhidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']])\nhidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']])\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            if isinstance(log, dict):\n                item = log['item']\n                quantity = log['quantity']\n            else:\n                item = log\n                quantity = -1\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '0': '11111', '1': '00111', '2': '00011', '3': '00001', '4': '00000', '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110', ' ': '01111'\n    }\n\n    decoded_msg = \"\"\n    words = msg.split(\"/\")\n\n    for word in words:\n        chars = word.split(\" \")\n        for char in chars:\n            decoded_msg += morse_code_dict[char]\n        decoded_msg += \" \"\n\n    return decoded_msg.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 157, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 42, in morse_decoder\n            decoded_msg += morse_code_dict[char]\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', '@': '.--.-.', '(': '-.--.', ')': '-.--.-', '=': '-...-', '+': '.-.-.', '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', '@': '.--.-.', '(': '-.--.', ')': '-.--.-', '=': '-...-', '+': '.-.-.', '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '0': '-----',", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', '@': '.--.-.', '(': '-.--.', ')': '-.--.-', '=': '-...-', '+': '.-.-.', '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', '@': '.--.-.', '(': '-.--.', ')': '-.--.-', '=': '-...-', '+': '.-.-.', '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '0': '-----',\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', '@': '.--.-.', '(': '-.--.', ')': '-.--.-', '=': '-...-', '+': '.-.-.', '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', '@': '.--.-.', '(': '-.--.', ')': '-.--.-', '=': '-...-', '+': '.-.-.', '-': '-....-', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '0': '-----',\n                      ^\nSyntaxError: '{' was never closed\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            list_of_alphabets = list_of_alphabets[1:] + [list_of_alphabets[0]]\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    # sort the orders in descending order\n    orders.sort(reverse=True)\n\n    # initialize variables\n    current_cookies = 0\n    current_batches = 0\n    max_orders = 0\n\n    # iterate over the orders\n    for order in orders:\n        # if the order is less than the remaining cookies, bake the order\n        if order <= n:\n            current_cookies += order\n            max_orders = max(max_orders, current_cookies // m)\n        # otherwise, bake a batch of cookies\n        else:\n            current_cookies += m * (order // m)\n            max_orders = max(max_orders, current_cookies // m)\n\n    return max_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            new_s += vowels[(vowels.index(s[i])+1)%5]\n        elif s[i] in consonants:\n            new_s += consonants[(consonants.index(s[i])+1)%21]\n        elif s[i] == 'y':\n            new_s += 'z'\n        elif s[i] == 'z':\n            new_s += 'b'\n        elif i%2 == 0:\n            new_s += '!'\n        else:\n            new_s += '?'\n    return new_s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_list.append((i, j))\n    return star_list\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return new_c\n\n    return ''.join(shift_char(c, shift) for c in message)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': ' / '}\n    return ' '.join(morse_code_dict[i] for i in s.lower())\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        return ''.join([spell[i % len(spell)] for i in range(len(dish))])\n\n    return {transform_dish(dish, magic_spell): price for dish, price in menu.items()}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                new_word += '@'\n            elif char == 'z':\n                new_word += 'b'\n            else:\n                new_word += char\n        if word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        new_word = new_word[0].upper() + new_word[1:]\n        trans_phrase += new_word + ' '\n    return trans_phrase.rstrip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    result = []\n    for ingredient, num in sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0])):\n        result.append((ingredient, num))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = vowels + vowels.upper()\n    consonants = consonants + consonants.upper()\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                if s[i] == 'a':\n                    result += 'e'\n                elif s[i] == 'e':\n                    result += 'i'\n                elif s[i] == 'i':\n                    result += 'o'\n                elif s[i] == 'o':\n                    result += 'u'\n                elif s[i] == 'u':\n                    result += 'a'\n            elif s[i] in consonants:\n                if s[i] == 'b':\n                    result += 'z'\n                elif s[i] == 'c':\n                    result += 'b'\n                elif s[i] == 'd':\n                    result += 'c'\n                elif s[i] == 'e':\n                    result += 'd'\n                elif s[i] == 'f':\n                    result += 'e'\n                elif s[i] == 'g':\n                    result += 'f'\n                elif s[i] == 'h':\n                    result += 'g'\n                elif s[i] == 'j':\n                    result += 'h'\n                elif s[i] == 'k':\n                    result += 'i'\n                elif s[i] == 'l':\n                    result += 'j'\n                elif s[i] == 'm':\n                    result += 'k'\n                elif s[i] == 'n':\n                    result += 'l'\n                elif s[i] == 'p':\n                    result += 'm'\n                elif s[i] == 'q':\n                    result += 'n'\n                elif s[i] == 'r':\n                    result += 'o'\n                elif s[i] == 's':\n                    result += 'p'\n                elif s[i] == 't':\n                    result += 'q'\n                elif s[", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 70\n                elif s[\n    elif s[\n          ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n\n    def recipe_converter(recipe, conversion_factor):\n        new_recipe = {}\n        for ingredient, quantity in recipe.items():\n            new_recipe[ingredient] = quantity * conversion_factor\n        return new_recipe\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    def next_layer(p):\n        if p % 2 == 0:\n            return p - 2\n        else:\n            return p - 3\n\n    def create_pyramid(p):\n        pyramid = []\n        while p > 0:\n            pyramid.append(p)\n            p = next_layer(p)\n        return pyramid[::-1]\n\n    return create_pyramid(p)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def magical_sequence_helper(start, end, divisor, result=[]):\n        if start > end:\n            return result\n        if start % divisor == 0 and is_prime(start):\n            result.append(start)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n\n    return magical_sequence_helper(start, end, divisor)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 138, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in magical_sequence\n    return magical_sequence_helper(start, end, divisor)\n  File \"<string>\", line 24, in magical_sequence_helper\n        return magical_sequence_helper(start + 1, end, divisor, result)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n  File \"<string>\", line 24, in magical_sequence_helper\n        return magical_sequence_helper(start + 1, end, divisor, result)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n  File \"<string>\", line 24, in magical_sequence_helper\n        return magical_sequence_helper(start + 1, end, divisor, result)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n        return magical_sequence_helper(start + 1, end, divisor, result)\n  [Previous line repeated 976 more times]\n  File \"<string>\", line 22, in magical_sequence_helper\n        if start % divisor == 0 and is_prime(start):\n  File \"<string>\", line 14, in is_prime\n        for i in range(2, int(n**0.5) + 1):\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    new_menu = {}\n    for food, details in menu.items():\n        new_details = details.copy()\n        if food in order:\n            for action, items in order[food].items():\n                if action == \"remove\":\n                    for item in items:\n                        if item in new_details:\n                            new_details.remove(item)\n                elif action == \"add\":\n                    new_details += items\n        new_menu[food] = new_details\n    return new_menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if sorted(str(primes[i])) == sorted(str(primes[j])):\n                pairs.append((primes[i], primes[j]))\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    return pairs\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    def meal_calculator(customers, meals):\n        result = {}\n        for customer in customers:\n            total_calories = 0\n            for meal in meals[customer]:\n                if meal in meals:\n                    total_calories += meals[meal]['calories']\n            result[customer] = total_calories\n        return result\n\n    print(meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice':'dish':'Pizza' 'calories': 300}dish:'Burger' 'calories 500}dish:'Salad' 'calories 100}dish':'Fries' 'calories': 200}dish':'Ice Cream' 'calories': 250}dish':'Pasta' 'calories': 300}dish':'Cake' 'calories': 400}dish':'Ice Cream' 'calories': 250}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake'", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30\n    print(meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice':'dish':'Pizza' 'calories': 300}dish:'Burger' 'calories 500}dish:'Salad' 'calories 100}dish':'Fries' 'calories': 200}dish':'Ice Cream' 'calories': 250}dish':'Pasta' 'calories': 300}dish':'Cake' 'calories': 400}dish':'Ice Cream' 'calories': 250}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake'\n    print(meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice':'dish':'Pizza' 'calories': 300}dish:'Burger' 'calories 500}dish:'Salad' 'calories 100}dish':'Fries' 'calories': 200}dish':'Ice Cream' 'calories': 250}dish':'Pasta' 'calories': 300}dish':'Cake' 'calories': 400}dish':'Ice Cream' 'calories': 250}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake' 'calories': 400}dish':'Cake'\n                                                                                                                                                     ^\nSyntaxError: closing parenthesis '}' does not match opening parenthesis '('\n", "passed": false}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    rotations = 0\n    swaps = 0\n\n    for i in range(len(arr)):\n        if i + 1 < len(arr) and arr[i] > arr[i + 1]:\n            rotations += 1\n            arr[i:i + 2] = arr[i + 1:i + 2][::-1]\n        elif i > 0 and arr[i] < arr[i - 1]:\n            swaps += 1\n            arr[i], arr[i - 1] = arr[i - 1], arr[i]\n\n    return rotations <= 1 and swaps <= 1\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in magical_sorting\n        elif i > 0 and arr[i] < arr[i - 1]:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_string = \"\"\n    vowel_count = 0\n\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted_char in vowels:\n                vowel_count += 1\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n\n    return (encrypted_string, vowel_count)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon time in kingdom far away, lived magical creature '{s}' known for telling {count} tales a day\")\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * (bag_capacity + 1) for _ in range(m + 1)]\n        dp[0][0] = 1\n        for i in range(1, m + 1):\n            for j in range(1, bag_capacity + 1):\n                if grid[i - 1][j - 1] == 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1]\n        return dp[m][bag_capacity]\n\n    return count_trips(grid, bag_capacity)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    return ''.join([cipher.get(c, c) for c in s])\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i].isdigit():\n            result += str((int(input_str[i])+1)%10)\n        else:\n            result += input_str[i]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        max_len = max(lst)\n        for i in range(max_len):\n            level = []\n            for j in lst:\n                if i < j:\n                    level.append('#')\n            pyramid.append(''.join(level))\n        return pyramid\n\n    print(create_pyramid([3, 2, 1]))\n    print(create_pyramid([5, 4, 2]))\n    print(create_pyramid([]))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(sequence, k):\n        points = []\n        for num in sequence:\n            points.append(num / k)\n        return points\n\n    def sort_descending(points):\n        points.sort(reverse=True)\n        return points\n\n    points = calculate_points(sequence, k)\n    return sort_descending(points)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = len(mat[0])\n    for i in range(n):\n        for j in range(m):\n            if i < j:\n                if mat[i][j] == \"X\":\n                    return mat[i][j]\n    return \"No X pattern found\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit if max_profit > 0 else 0\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        moves = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n        start_row, start_col = 0, 0\n        for i, row in enumerate(map):\n            for j, cell in enumerate(row):\n                if cell == 'S':\n                    start_row, start_col = i, j\n        position = (start_row, start_col)\n        for move in instructions:\n            row_move, col_move = moves[move]\n            new_row, new_col = position[0] + row_move, position[1] + col_move\n            if (0 <= new_row < len(map)) and (0 <= new_col < len(map[0])) and map[new_row][new_col] != 'X':\n                position = (new_row, new_col)\n            else:\n                return [position]\n        return [position]\n\n    print(adventure_game([['S', '.', '.'], ['X', 'X', 'E']], ['right', 'right', 'down', 'down', 'right']))\n    print(adventure_game([['.', '.', 'S'], ['.', 'X', 'X', 'E']], ['left', 'left', 'up']))\n    print(adventure_game([['S', 'X', 'E']], ['right', 'right']))\n\n\nadventure_game()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 55, in <module>\nadventure_game()\nTypeError: adventure_game() missing 2 required positional arguments: 'map' and 'instructions'\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    def zodiac_sign(birthday):\n        months = [(1, 20), (2, 18), (3, 21), (4, 19), (5, 20), (6, 20), (7, 22), (8, 22), (9, 22), (10, 23), (11, 21), (12, 20)]\n        day, month = map(int, birthday.split('-'))\n        for i, (m, d) in enumerate(months):\n            if month == m:\n                return ['Fire', 'Air', 'Earth', 'Water'][i]\n\n    def zodiac_date(birthday):\n        months = [(1, 20), (2, 18), (3, 21), (4, 19), (5, 20), (6, 20), (7, 22), (8, 22), (9, 22), (10, 23), (11, 21), (12, 20)]\n        day, month = map(int, birthday.split('-'))\n        for i, (m, d) in enumerate(months):\n            if day == d:\n                return ['Fire', 'Air', 'Earth', 'Water'][i]\n\n    if not birthdays:\n        return None\n\n    return {zodiac_sign(birthday): zodiac_date(birthday) for birthday in birthdays}\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 165, in <module>\n  File \"<string>\", line 162, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 50, in zodiac_element\n    return {zodiac_sign(birthday): zodiac_date(birthday) for birthday in birthdays}\n  File \"<string>\", line 50, in <dictcomp>\n    return {zodiac_sign(birthday): zodiac_date(birthday) for birthday in birthdays}\n  File \"<string>\", line 35, in zodiac_sign\n        day, month = map(int, birthday.split('-'))\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if node is None:\n                return\n            if node is not None and node.get('value'):\n                path.append(node.get('value'))\n            if node.get('left'):\n                dfs(node.get('left'), path)\n            if node.get('right'):\n                dfs(node.get('right'), path)\n            if not node.get('left') and not node.get('right'):\n                path.append(path[:])\n        paths = []\n        dfs(tree, [])\n        return paths\n\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 68\n    print(\n    print(\n         ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        start_pos = (coord[0]*2, coord[1]*2)\n        end_pos = (coord[0]*2+1, coord[1]*2+1)\n        queue = [(start_pos, 0)]\n        visited = {start_pos}\n        while queue:\n            current_pos, step = queue.pop(0)\n            if current_pos == end_pos:\n                return step\n            for direction in [(0, 1), (1, 0)]:\n                next_pos = (current_pos[0]+direction[0], current_pos[1]+direction[1])\n                if 0 <= next_pos[0] < len(grid[0])*2 and 0 <= next_pos[1] < len(grid)*2 and grid[next_pos[1]//2][next_pos[0]//2] == 0 and next_pos not in visited:\n                    visited.add(next_pos)\n                    queue.append((next_pos, step+1))\n        return -1\n\n    return min_moves(coord, grid)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr or not arr[0]:\n            return \"\"\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return \"\".join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]))\n    print(word_spiral([]))\n\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\nword_spiral([]", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 44\nword_spiral([]\n    word_spiral([]\n               ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    def destroy_aliens(aliens, aimed_at):\n        return [alien for alien in aliens if alien != aimed_at and (alien + aimed_at) % 2 != 0]\n\n    aliens = [alien for alien in aliens if alien != ray]\n    aliens = destroy_aliens(aliens, ray)\n\n    return aliens\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(num):\n        return [(i, j) for i in range(10) for j in range(10) if i != j]\n\n    def get_sum(num):\n        return sum(int(i) + int(j) for i, j in get_combinations(num))\n\n    return get_sum(s1) * get_sum(s2)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = alphabet[i] * (2 * n - 1)\n        if i == n - 1:\n            result.append(layer.center(2 * n - 1))\n        else:\n            result.append(layer.center(2 * n - 2))\n    return '\\n'.join(result)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n_values[i % len(n_values)]) for i, c in enumerate(message))\n\n    return shift_message(message, n_values)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    def sort_key(s):\n        return len(s), s\n\n    return sorted(strings, key=sort_key)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(matrix):\n        return all(len(row) == len(matrix) for row in matrix)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    primary_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    secondary_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        n = abs(n)\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if alien not in ['Xenomorph', 'Predator', 'Klingon'] or not isinstance(humans, dict):\n            return []\n        else:\n            continents = ['Asia', 'Africa', 'North America', 'South America', 'Europe']\n            alien_continent = continents[0] if alien == 'Xenomorph' else continents[2] if alien == 'Predator' else continents[3]\n            humans_encounter = sorted([name for name, continent in humans.items() if continent == alien_continent])\n            return humans_encounter\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 36, in nature_sequence_generator\n        next_num = sequence[i-1] + sequence[i-2]\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        for i in range(round):\n            if i < len(players):\n                players.pop(i)\n            else:\n                i = i % len(players)\n        music -= 1\n        if music == 0:\n            music = len(players)\n    return players\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 33, in musical_chairs\n                i = i % len(players)\nZeroDivisionError: integer modulo by zero\n", "passed": false}
