{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 5.0\n        else:\n            total_cost += 5.0 + min(item, 5.0) * 10.0\n    if location == 'Local':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        if weight > 5:\n            total_cost += 10\n        total_cost += 5 * weight\n    if location == 'Local':\n        total_cost *= 1\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        result = []\n        for char in word:\n            if char.isalpha():\n                shifted_char = chr(((ord(char.lower()) - ord('a') + shift) % 26) + ord('a'))\n                result.append(shifted_char)\n            else:\n                result.append(char)\n        return ''.join(result)\n\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    return [caesar_cipher(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str) -> List[str]:\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        res = [chr(int(s[0]) + ord('a') - 1)]\n        if len(s) > 1 and int(s[:2]) <= 26:\n            res.append(chr(int(s[:2]) + ord('a') - 1))\n        return [c + r for c in res for r in helper(s[len(c):])]\n    \n    return helper(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle >= max_height:\n            lit_candles += 1\n    return lit_candles\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while len(result) < len(matrix) * len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0 and row < len(matrix) - 1:\n            row += 1\n        elif col == len(matrix[0]) - 1 and row < len(matrix) - 1:\n            row += 1\n        elif row == 0 and col < len(matrix[0]) - 1:\n            col += 1\n        elif row == len(matrix) - 1 and col < len(matrix[0]) - 1:\n            col += 1\n        else:\n            if row > 0:\n                row -= 1\n            col += 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    pass\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    pass\n"}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    from collections import Counter\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    return dict(Counter(words))\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'Cat', 'D': 'Dog', 'B': 'Bird'}\r\n    sounds = {'meow': 'C', 'woof': 'D', 'chirp': 'B'}\r\n    result = []\r\n    count = 0\r\n    for sound in animal_string.split():\r\n        if sound in sounds:\r\n            count += 1\r\n            if count == 2:\r\n                break\r\n            result.append(count)\r\n        elif sound in animals:\r\n            count = 0\r\n    return result[:5]  # Return only the first 5 elements if there are more than 5 animals or sounds.\n\ncount_animals('C||| D|| B| C| B||| D|||')"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {fruits[0]}, {fruits[1]} and {fruits[2]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    \n    # Count the occurrences of each element in the list\n    element_counts = Counter(flux_values)\n    \n    # Find the element with the maximum occurrence\n    max_occurrence_element = max(element_counts, key=element_counts.get)\n    \n    # Find the sum of all elements in the list\n    total_sum = sum(flux_values)\n    \n    # Multiply the sum of all elements with the most occurred number\n    result = total_sum * max_occurrence_element\n    \n    return result\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    rarest_elem = elems[0]\n    min_count = count_dict[elems[0]]\n    \n    for elem, count in count_dict.items():\n        if count < min_count:\n            rarest_elem = elem\n            min_count = count\n    \n    return rarest_elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)]\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [int(card[:-1]) for card in hand]\n    counter = Counter(values)\n    max_count = max(counter.values())\n    if max_count == 5:\n        return 52  # five of a kind\n    elif max_count == 4:\n        return sum(values) * 4  # four of a kind\n    elif max_count == 3:\n        return sum(values) * 3  # three of a kind\n    elif max_count == 2:\n        if len(counter) == 2:\n            return sum(values) * 2  # pair\n        else:\n            return sum(values)  # pair + score triple\n    else:\n        return 0  # no pairs triples fours\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n"}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            if isinstance(wizard, tuple):\n                wizard_name, wizard_power = wizard\n                dragon_hp -= wizard_power\n            else:\n                dragon_hp -= wizard\n            if dragon_hp <= 0:\n                return wizard_name\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    \n    count = 0\n    num = 0\n    while True:\n        num += 1\n        if sum_of_digits(num) == 7 and len(str(num)) == n:\n            count += 1\n            if count == n:\n                return num\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                for k in range(len(m[i])):\n                    if k != j and m[i][k] == 1:\n                        vampires += 1\n                        break\n    return vampires\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    patterns = []\n    for i in range(1, n + 1):\n        patterns.append(','.join(str(j) for j in range(i, 0, -1)))\n    for i in range(n - 1, 0, -1):\n        patterns.append(','.join(str(j) for j in range(i, 0, -1)))\n    return patterns\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_grid(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == word[0]:\n                    for k in range(len(word)):\n                        if i + k < len(grid) and grid[i + k][j] == word[k]:\n                            continue\n                        elif j + k < len(grid[0]) and grid[i][j + k] == word[k]:\n                            continue\n                        else:\n                            break\n                    else:\n                        return True\n        return False\n\n    for word in words:\n        if not is_word_in_grid(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v * 9.461e-12\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_number(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            prime = prime_number(ord(char) - ord('a') + 1)\n            result += str(prime)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '#', 'b': '+', 'c': '*', 'd': '/', 'e': '%', 'f': '^', 'g': '&', 'h': '(', 'i': ')', 'j': '=', 'k': '[', 'l': ']', 'm': '{', 'n': '}', 'o': '|', 'p': ':', 'q': ';', 'r': '?', 's': '~', 't': '>', 'u': '<', 'v': '!', 'w': 'a', 'x': 'b', 'y': 'c', 'z': 'd'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return (max_frequency, max_sentence.strip()) if max_frequency > 0 else (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [[\"right\", \"down\", \"left\", \"up\"][(dx, dy).index((0, 1))]]))\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = max(income - deductions, 0)\n    tax = 0\n    if taxable_income > 30000:\n        tax += (taxable_income - 30000) * 0.3\n        taxable_income = 30000\n    if taxable_income > 15000:\n        tax += (taxable_income - 15000) * 0.25\n        taxable_income = 15000\n    if taxable_income > 5000:\n        tax += (taxable_income - 5000) * 0.15\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[m-1][n-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    for i in range(len(playlist)):\n        if \"Rock\" not in playlist[i]:\n            j = random.randint(i + 1, len(playlist) - 1)\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    transformation_percentages[m - 1] = 100\n    for i in range(m, n):\n        if i % 2 == 0:\n            transformation_percentages[i] = min(transformation_percentages[i - 1] + 10, 100)\n        else:\n            transformation_percentages[i] = max(transformation_percentages[i - 1] - 10, 0)\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or \".\" not in email or email.startswith(\"@\") or email.endswith(\"@\") or email.count(\"@\") > 1 or email.count(\".\") < 1 or email.rfind(\".\") < email.find(\"@\"):\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowels[(index + 1) % len(vowels)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonants[(index + 1) % len(consonants)]\n            transformed += new_char.upper() if char.isupper() else new_char\n        elif char.isalpha():\n            transformed += char\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/40", "completion": "\n    def can_reach(potion, target):\n        return int(potion.split()[-1]) <= target\n\n    def dfs(potions, target, path, result):\n        if target == 0:\n            result.append(path)\n            return\n        for potion in potions:\n            if can_reach(potion, target):\n                dfs(potions, target - int(potion.split()[-1]), path + [potion], result)\n\n    result = []\n    dfs(potions, target, [], result)\n    if not result:\n        return []\n    return min(result, key=lambda x: (len(x), x))\n"}
{"task_id": "EvoEval/41", "completion": "\n    # find the safe cell\n    safe_cell = (0, 0)\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == 0:\n                safe_cell = (i, j)\n                break\n    # calculate the minimum energy required\n    min_energy = float('inf')\n    def dfs(i, j, energy):\n        nonlocal min_energy\n        if i < 0 or j < 0 or i >= len(arr) or j >= len(arr[i]) or arr[i][j] == 99:\n            return\n        if (i, j) == safe_cell:\n            min_energy = min(min_energy, energy)\n            return\n        dfs(i+1, j, energy+arr[i][j])\n        dfs(i-1, j, energy+arr[i][j])\n        dfs(i, j+1, energy+arr[i][j])\n        dfs(i, j-1, energy+arr[i][j])\n    dfs(0, 0, 0)\n    return min_energy if min_energy != float('inf') else 0\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    find_legendary_item(player_input): In popular multiplayer online game players acquire items Each item has rarity value from 1 (common) to 5 (legendary). In single game player can acquire multiple items rarity each item is unique. player_input is list representing items acquired each item represented by rarity. task to write function determines if player acquired legendary item (rarity 5) function should return True if legendary item acquired False otherwise. if legendary item acquired function return rarity of second most valuable item acquired. If player only acquired legendary item return -1. function should handle player_input lists of any length. Examples: find_legendary_item([1, 2, 3 4, 5]) == (True, 4) find_legendary_item([5]) == (True, -1) find_legendary_item([1, 3, 4]) == (False, None) find_legendary_item([]) == (False, None) ''\n    \"\"\"\n    legendary_item = False\n    second_most_valuable = None\n    for rarity in player_input:\n        if rarity == 5:\n            legendary_item = True\n        elif rarity > 1:\n            if second_most_valuable is None or rarity > second_most_valuable:\n                second_most_valuable = rarity\n    if legendary_item:\n        return (True, second_most_valuable if second_most_valuable is not None else -1)\n    else:\n        return (False, None)\n    \"\"\"\n    find_legendary_item(player_input): In popular multiplayer online game players acquire"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n    if fuel >= fuel_consumption:\n        remaining_fuel = fuel - fuel_consumption\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\ndef fairy_tale_transport(q,w,e):\n    total_weight = sum(q)\n    if total_weight <= w*3 and total_weight <= e*3:\n        return True\n    else:\n        return False\n    "}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''.join(word[0].lower() for word in case if word.isalpha())\n            result.append(secret_message)\n        return result\n    \n    # Test cases\n    print(hidden_message([['Hello, world!', 'okay?']]))  # Output: ['ho']\n    print(hidden_message([['Every', 'good', 'boy', 'does', 'fine']]))  # Output: ['egbdf']\n    print(hidden_message([['apple']]))  # Output: ['Take the cannoli.']\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??']]))  # Output: ['tiatc', 'Take cannoli.']\n    print(hidden_message([['hi']]))  # Output: ['Take the cannoli.']\n    print(hidden_message([['Take', 'the', 'cannoli.']]))  # Output: ['Take the cannoli.']\n    print(hidden_message([['Take', 'the', 'cannoli.'], ['hi']]))  # Output: ['Take the cannoli.', 'Take the cannoli.']\n    print(hidden_message([['Take', 'the', 'cannoli.'], ['hi'], ['Take', 'the', 'cannoli.']]))  # Output: ['Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.']\n    print(hidden_message([['Take', 'the', 'cannoli.'], ['hi'], ['Take', 'the', 'cannoli.'], ['hi']]))  # Output: ['Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.']\n    print(hidden_message([['Take', 'the', 'cannoli.'], ['hi'], ['Take', 'the', 'cannoli.'], ['hi'], ['Take', 'the', 'cannoli.']]))  # Output: ['Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.']\n    print(hidden_message(["}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log[\"item\"]\n        quantity = log[\"quantity\"]\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111'}\n    decoded_message = \"\"\n    current_code = \"\"\n    for char in msg:\n        if char == \" \":\n            if current_code:\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n        elif char == \"/\":\n            if current_code:\n                decoded_message += morse_code_dict[current_code]\n                current_code = \"\"\n            decoded_message += \" \"\n        else:\n            current_code += char\n    if current_code:\n        decoded_message += morse_code_dict[current_code]\n    return decoded_message.upper()\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': ' '\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    result = ''\n    alphabet_index = 0\n    \n    for char in string:\n        if char in list_of_alphabets:\n            result += list_of_alphabets[alphabet_index]\n            alphabet_index = (alphabet_index + 1) % len(list_of_alphabets)\n        else:\n            result += char\n    \n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    max_orders = 0\n    for i in range(1, n + 1):\n        if i * m > max_orders:\n            max_orders = i * m\n    for order in orders:\n        if order > max_orders:\n            max_orders = order\n    return max_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1] if i % 2 == 0 else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '!'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1] if i % 2 == 0 else consonants[consonants.index(char.lower()) + 1].upper()\n        elif char == '?':\n            transformed += '!' if i % 2 == 0 else '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            new_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += new_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char != \" \":\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += \"/ \"\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split(' '):\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                if letter == 'z':\n                    new_word += 'b'\n                else:\n                    new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            else:\n                new_word += letter\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new_word.capitalize() + '@'\n    return translated_phrase[:-1]\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    recipe_count = {}\n    for ingredient, recipes in ingredient_dict.items():\n        for recipe in recipes:\n            if recipe in recipe_count:\n                recipe_count[recipe] += 1\n            else:\n                recipe_count[recipe] = 1\n    sorted_recipes = sorted(recipe_count.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_recipes\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants_count = 0\n    sugar_count = len(sugar_locations)\n    \n    # Iterate over ant positions\n    for ant_position, ant_direction in ant_positions:\n        # Check if ant is at a sugar location\n        if ant_position in sugar_locations:\n            happy_ants_count += 1\n            sugar_count -= 1\n            sugar_locations.remove(ant_position)\n        # Check if ant is at the beginning or end of the path and can't turn back\n        elif (ant_position == 0 and ant_direction == \"left\") or (ant_position == path_length - 1 and ant_direction == \"right\"):\n            happy_ants_count += 1\n        # Check if ant is moving towards a sugar location\n        elif (ant_direction == \"right\" and ant_position < max(sugar_locations)) or (ant_direction == \"left\" and ant_position > min(sugar_locations)):\n            happy_ants_count += 1\n    \n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                # Swap case\n                result += char.swapcase()\n            else:\n                # Replace vowels with next vowel\n                if char.lower() in vowels:\n                    next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                    result += next_vowel.upper() if char.isupper() else next_vowel\n                else:\n                    # Replace consonants with preceding consonant\n                    next_consonant = consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n                    result += next_consonant.upper() if char.isupper() else next_consonant\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    layers = []\n    while p > 0:\n        layers.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return layers[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [num for num in range(start, end + 1) if is_prime(num) and num % divisor == 0]\n"}
{"task_id": "EvoEval/65", "completion": "\n    new_menu = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in new_ingredients:\n                        new_ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    if ingredient not in new_ingredients:\n                        new_ingredients.append(ingredient)\n            new_menu[food] = new_ingredients\n        else:\n            new_menu[food] = ingredients\n    return new_menu\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n"}
{"task_id": "EvoEval/67", "completion": "\n    calories_dict = {}\n    for customer in customers:\n        calories_dict[customer] = 0\n    for customer in meals:\n        for meal in meals[customer]:\n            calories_dict[customer] += meal['calories']\n    return calories_dict\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    \n    for i in range(len(arr)):\n        if arr == sorted(arr):\n            return True\n        arr.insert(0, arr.pop())\n    \n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not all(planet in planets for planet in path):\r\n        return False\r\n    for i in range(len(path) - 1):\r\n        if path[i] not in planets[path[i + 1]]:\r\n            return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_s += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, vowel_count)\n"}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i, string in enumerate(lst, start=1):\n        digit_count = sum(c.isdigit() for c in string)\n        output.append(f\"Once upon time in kingdom far away, lived magical creature '{string}' known for telling {digit_count} tales a day\")\n    return output\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    num_trips = 0\n    num_chests = 0\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    \n    # Count the number of treasures and chests\n    for i in range(num_rows):\n        for j in range(num_cols):\n            num_chests += sum(grid[i])\n            num_trips += 1\n    \n    # Calculate the number of trips needed\n    num_trips = math.ceil(num_chests / bag_capacity)\n    \n    return num_trips\r\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not cipher:\n        return s\n    return ''.join(cipher.get(c, c) for c in s)\n"}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/76", "completion": "\n\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * lst[i])\n        return pyramid\n    \"\"\"\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 0\n        else:\n            return points(n // k, k) + 1\n\n    return sorted([points(n, k) for n in sequence], reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = len(mat[0])\n    pattern = []\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                pattern.append(mat[i][j])\n            elif i == 0 and j == m - 1:\n                pattern.append(mat[i][j])\n            elif i == n - 1 and j == 0:\n                pattern.append(mat[i][j])\n            elif i == n - 1 and j == m - 1:\n                pattern.append(mat[i][j])\n            elif i == 0:\n                pattern.append(mat[i][j])\n            elif j == 0:\n                pattern.append(mat[i][j])\n            elif i == n - 1:\n                pattern.append(mat[i][j])\n            elif j == m - 1:\n                pattern.append(mat[i][j])\n            elif i == j:\n                pattern.append(mat[i][j])\n            elif i + j == n - 1:\n                pattern.append(mat[i][j])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days+1):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit if max_profit > 0 else 0\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    adventure_game([ ['S', '.', '.'], ['X', 'X 'E'] ['right', 'right' 'down', 'down', 'right']) [(0, 0), (0, 1) (0, 2) (1, 2) (2, 2)] adventure_game( ['.', '.' 'S'] ['.', 'X', ['E', ['left"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n\n    if not birthdays:\n        return None\n\n    elements = {\n        \"Fire\": [],\n        \"Earth\": [],\n        \"Air\": [],\n        \"Water\": []\n    }\n\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:3])\n        zodiac_sign = None\n\n        if 3 <= month <= 5:\n            zodiac_sign = \"Aries\"\n        elif 6 <= month <= 8:\n            zodiac_sign = \"Leo\"\n        elif 9 <= month <= 11:\n            zodiac_sign = \"Virgo\"\n        elif month == 2 and day >= 19:\n            zodiac_sign = \"Aquarius\"\n        elif month == 2 and day < 19:\n            zodiac_sign = \"Capricorn\"\n        elif month == 3 and day < 21:\n            zodiac_sign = \"Aries\"\n        elif month == 5 and day < 21:\n            zodiac_sign = \"Taurus\"\n        elif month == 7 and day < 23:\n            zodiac_sign = \"Gemini\"\n        elif month == 8 and day < 23:\n            zodiac_sign = \"Cancer\"\n        elif month == 10 and day < 23:\n            zodiac_sign = \"Libra\"\n        elif month == 12 and day < 21:\n            zodiac_sign = \"Sagittarius\"\n        elif month == 1 and day"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node['value']])\n            dfs(node.get('left'), path + [node['value']])\n            dfs(node.get('right'), path + [node['value']])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    \"\"\"\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node['value']])\n            dfs(node.get('left'), path + [node['value']])\n            dfs(node.get('right'), path + [node['value']])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    \"\"\"\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node['value']])\n            dfs(node.get('left'), path + [node['value']])\n            dfs(node.get('right'), path + [node['value']])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    \"\"\"\n    def tree_traversal(tree):\n        def dfs(node, path):"}
{"task_id": "EvoEval/85", "completion": "\n    # find princess's position\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 2:\n                princess = (i, j)\n                break\n    # find minimum number of moves\n    moves = 0\n    while True:\n        # check if princess is at the destination\n        if princess == coord:\n            return moves\n        # check if there is a monster in the way\n        if grid[princess[0]][princess[1]+1] == 1 or grid[princess[0]+1][princess[1]] == 1:\n            return -1\n        # move right\n        if princess[1] < coord[1]:\n            princess = (princess[0], princess[1]+1)\n        # move down\n        elif princess[1] > coord[1]:\n            princess = (princess[0]+1, princess[1])\n        # move up\n        elif princess[0] > coord[0]:\n            princess = (princess[0]-1, princess[1])\n        # move left\n        elif princess[0] < coord[0]:\n            princess = (princess[0], princess[1]-1)\n        moves += 1\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Sorting the movies dictionary based on ratings in descending order and release year in ascending order\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n    # Extracting only the movie names from the sorted list\n    sorted_movie_names = [movie[0] for movie in sorted_movies]\n    return sorted_movie_names\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    while arr:\n        result += arr.pop(0)\n        if arr and arr[0]:\n            for row in arr:\n                result.append(row.pop())\n        if arr:\n            result += arr.pop()[::-1]\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result.append(row.pop(0))\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\ndef planet_population(dict_of_planets):\n    population_density = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] is not None and features[1] is not None:\n            population_density[planet] = round(features[0] / features[1], 2)\n    return population_density\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def unique_combinations(s):\n        result = set()\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                result.add(int(s[i:j]))\n        return result\n\n    def product(s):\n        result = 1\n        for num in unique_combinations(s):\n            result *= num\n        return result\n\n    return product(s1) * product(s2)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            continue\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            new_index = (alphabet.index(char.lower()) + n_values[i % len(n_values)]) % 26\n            new_char = alphabet[new_index]\n            encoded_message += new_char.upper() if char.isupper() else new_char\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        n = abs(n)\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if i % lst[i] == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        encountered = []\n        for human, continent in humans.items():\n            if continent == \"Asia\":\n                encountered.append(human + \" \" + alien)\n            elif continent == \"Africa\":\n                encountered.append(human + \" \" + alien)\n            elif continent == \"Europe\":\n                encountered.append(human + \" \" + alien)\n            elif continent == \"North America\":\n                encountered.append(human + \" \" + alien)\n            elif continent == \"South America\":\n                encountered.append(human + \" \" + alien)\n        return encountered\n    \"\"\"\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        encountered = []\n        for human, continent in humans.items():\n            if continent == \"Asia\":\n                encountered.append(human + \" \" + alien)\n            elif continent == \"Africa\":\n                encountered.append(human + \" \" + alien)\n            elif continent == \"Europe\":\n                encountered.append(human + \" \" + alien)\n            elif continent"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    next_num = 3\n    while len(sequence) < n:\n        next_sum = sum(sequence[-2:]) + next_num\n        sequence.append(next_sum)\n        next_num += 1\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence[:n]\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round_duration in rounds:\n        current_position = (current_position + round_duration * music) % n\n        players.pop(current_position)\n    return players\n"}
