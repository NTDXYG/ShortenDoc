{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    additional_charge = 10.0\n    max_weight = 5.0\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = float(item.split()[0])\n            location_type = item.split()[1]\n            if location_type == 'Local':\n                factor = local_factor\n            elif location_type == 'National':\n                factor = national_factor\n            elif location_type == 'International':\n                factor = international_factor\n            else:\n                factor = 1.0\n            if weight > max_weight:\n                total_cost += (weight * factor * base_cost) + additional_charge\n            else:\n                total_cost += weight * factor * base_cost\n        else:\n            weight = item\n            total_cost += weight * base_cost\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    additional_charge = 10.0\n    max_weight = 5.0\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            location = item\n        else:\n            weight = item\n            if location == \"Local\":\n                total_cost += base_cost * local_factor * weight\n            elif location == \"National\":\n                total_cost += base_cost * national_factor * weight\n            elif location == \"International\":\n                total_cost += base_cost * international_factor * weight\n            if weight > max_weight:\n                total_cost += additional_charge\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def encrypt_word(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(c) for c in key)\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    return [encrypt_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, curr: str, res: List[str]):\n        if not s:\n            res.append(curr)\n            return\n        for i in range(1, len(s)+1):\n            if int(s[:i]) <= 26:\n                helper(s[i:], curr+chr(int(s[:i])+96), res)\n            if s[0] == '0':\n                break\n    res = []\n    helper(input_string, '', res)\n    return res\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = max(candles)\n    return candles.count(max_candle)\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n\n    # going right\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:  # moving diagonally up\n            if col == cols - 1:  # move down\n                row += 1\n            elif row == 0:  # move right\n                col += 1\n            else:  # move up and right\n                row -= 1\n                col += 1\n        else:  # moving diagonally down\n            if row == rows - 1:  # move right\n                col += 1\n            elif col == 0:  # move down\n                row += 1\n            else:  # move down and right\n                row += 1\n                col -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into lines\n    lines = canvas.split('\\n')\n\n    # Initialize variables\n    painter_x, painter_y = None, None\n    walls = set()\n\n    # Parse the canvas\n    for y, line in enumerate(lines):\n        for x, char in enumerate(line):\n            if char == 'P':\n                if painter_x is not None:\n                    return 'Invalid canvas'\n                painter_x, painter_y = x, y\n            elif char == '#':\n                walls.add((x, y))\n\n    # If no painter, return the original canvas\n    if painter_x is None:\n        return canvas\n\n    # Initialize a queue with the painter's position\n    queue = [(painter_x, painter_y)]\n\n    # Initialize a set to keep track of visited positions\n    visited = set()\n\n    # While there are positions to visit\n    while queue:\n        # Get the next position\n        x, y = queue.pop(0)\n\n        # If this position has already been visited, skip it\n        if (x, y) in visited:\n            continue\n\n        # Mark this position as visited\n        visited.add((x, y))\n\n        # If this position is a wall, skip it\n        if (x, y) in walls:\n            continue\n\n        # Add the position to the queue\n        queue.extend([(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)])\n\n    # Replace the original canvas with the updated canvas\n    lines = [''.join(line) for line in lines]\n    for x, y in visited:\n        if (x, y) in walls:\n            lines[y] = lines[y][:x] + '#' + lines[y][x + 1:]\n        else:\n            lines[y] = lines[y][:x] + '*' + lines[y][x + 1:]\n\n    # Return the updated canvas\n    return '\\n'.join(lines)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    words = string.lower().split()\n    frequency = {}\n    for word in words:\n        word = word.strip('.,')\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_counts = {animal: 0 for animal in animal_sounds.keys()}\n    animal_order = []\n    sound_index = 0\n    animal_index = 0\n\n    while animal_index < len(animal_counts):\n        if animal_sounds[list(animal_counts.keys())[animal_index]] == animal_string[sound_index]:\n            animal_counts[list(animal_counts.keys())[animal_index]] += 1\n            sound_index += 1\n            if animal_counts[list(animal_counts.keys())[animal_index]] == 2:\n                animal_order.append(list(animal_counts.keys())[animal_index])\n                animal_index += 1\n        else:\n            sound_index += 1\n\n    return [animal_counts[animal] for animal in animal_order]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])}, and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    most_common = counter.most_common(1)[0][0]\n    min_value = min(counter.keys())\n    return sum(counter.keys()) * most_common\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    rarest_elements = [k for k, v in count_dict.items() if v == min_count]\n    return rarest_elements[0] if rarest_elements else None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    name = name.lower()\n    alias = ''\n    for char in name:\n        if char in vowels:\n            index = vowels.index(char)\n            alias += vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            alias += consonants[(index+1)%21]\n        else:\n            alias += char\n    return alias.upper()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [card[0] for card in hand]\n    values = [10 if card == 'J' else 11 if card == 'Q' else 12 if card == 'K' else 13 if card == 'A' else int(card) for card in values]\n    counts = {i: values.count(i) for i in values}\n    counts_values = list(counts.values())\n    if sorted(counts_values) == [1, 1, 1, 1, 2]:\n        return sum(values)\n    elif sorted(counts_values) == [1, 1, 1, 2, 2]:\n        return sum(values)\n    elif sorted(counts_values) == [1, 1, 2, 2, 2]:\n        return sum(values) * 2\n    elif sorted(counts_values) == [1, 2, 2, 2, 2]:\n        return sum(values) * 3\n    elif sorted(counts_values) == [2, 2, 2, 2, 2]:\n        return sum(values) * 4\n    else:\n        return 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    fib_nums = [0, 1]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n    return sum(fib_nums)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return int(str(magical_seven(n-1)) + '7')\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n    count = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[1] == vampire[1]:\n                count += 1\n    return count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(\",\".join(str(j) for j in range(1, i + 1)))\n    for i in range(n - 1, 0, -1):\n        result.append(\",\".join(str(j) for j in range(1, i + 1)))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, grid, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def check_grid(word, grid):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                # check horizontally\n                if check_word(word, grid, row, col, (0, 1)):\n                    return True\n                # check vertically\n                if check_word(word, grid, row, col, (1, 0)):\n                    return True\n                # check diagonally\n                if check_word(word, grid, row, col, (1, 1)):\n                    return True\n                # check anti-diagonally\n                if check_word(word, grid, row, col, (1, -1)):\n                    return True\n        return False\n\n    for word in words:\n        if not check_grid(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return (t * v) / 9.461e12\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '&',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '(',\n        'l': ')',\n        'm': '=',\n        'n': '~',\n        'o': '>',\n        'p': '<',\n        'q': '{',\n        'r': '}',\n        's': '[',\n        't': ']',\n        'u': '|',\n        'v': '1',\n        'w': '2',\n        'x': '3',\n        'y': '4',\n        'z': '5',\n    }\n    alien_word = \"\"\n    for letter in english_word:\n        alien_word += alien_language_dict[letter]\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    # split the text into sentences\n    sentences = text.split('. ')\n    max_freq = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        # count the frequency of the word in the sentence\n        freq = sentence.split().count(word)\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    if max_freq == 0:\n        return (0, \"\")\n    else:\n        return (max_freq, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # check if start and end are the same\n    if start == end:\n        return []\n\n    # check if start or end are out of bounds\n    if start[0] < 0 or start[1] < 0 or end[0] >= len(maze) or end[1] >= len(maze[0]):\n        return []\n\n    # check if start or end is a wall\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n\n    # initialize the stack with the start position and the path\n    stack = [(start, [])]\n\n    # initialize the visited set\n    visited = set()\n\n    while stack:\n        # pop the current position and path\n        current, path = stack.pop()\n\n        # add the current position to the visited set\n        visited.add(current)\n\n        # check if the current position is the end position\n        if current == end:\n            return path\n\n        # get the row and column of the current position\n        row, col = current\n\n        # get the possible next positions\n        next_positions = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n\n        # filter the next positions that are in bounds, not a wall, and have not been visited\n        next_positions = [(r, c) for r, c in next_positions if 0 <= r < len(maze) and 0 <= c < len(maze[0]) and maze[r][c] == 0 and (r, c) not in visited]\n\n        # add the next positions to the stack with the corresponding path\n        for next_position in next_positions:\n            stack.append((next_position, path + [get_direction(current, next_position)]))\n\n    # if no path is found, return an empty list\n    return []\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    income -= deductions\n    if income <= 10000:\n        return 0\n    elif income <= 30000:\n        return (income - 10000) * 0.15\n    elif income <= 60000:\n        return (income - 30000) * 0.25 + 3750\n    else:\n        return (income - 60000) * 0.30 + 11250\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str):\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the directions to move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Define the queue for BFS\n    queue = [(start, [start])]\n\n    # Define the visited set\n    visited = set()\n\n    # BFS\n    while queue:\n        (x, y), path = queue.pop(0)\n        if (x, y) == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n                visited.add((nx, ny))\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    new_playlist = playlist.copy()\n    for i in range(playlist_length):\n        if \"Rock\" not in new_playlist[i]:\n            swap_index = i + random.randint(0, playlist_length - i - 1)\n            new_playlist[i], new_playlist[swap_index] = new_playlist[swap_index], new_playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return new_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i >= stone:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    intense_day = m - 1\n    for i in range(n):\n        if i == intense_day:\n            transformation[i] = 100\n        elif i < intense_day:\n            transformation[i] = 10 + (transformation[i - 1] if i > 0 else 0)\n        else:\n            transformation[i] = max(0, transformation[i - 1] - 10)\n    return transformation\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email:\r\n        if \".\" in email[email.index(\"@\")+1:]:\r\n            if email[0] != \"@\" and email[-1] != \".\":\r\n                return True\r\n    return False\r\n\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    ys = [0] * n\n    ys[0] = xs[0]\n    for i in range(1, n):\n        ys[i] = xs[i] / (i + 1)\n    return ys\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = {'a': 'e', 'e': 'i', 'i': 'o', 'o': 'u', 'u': 'a', 'A': 'E', 'E': 'I', 'I': 'O', 'O': 'U', 'U': 'A'}\n    consonants = {'b': 'c', 'm': 'n', 'n': 'z', 'z': 'b', 'B': 'C', 'M': 'N', 'N': 'Z', 'Z': 'B'}\n    transformed_s = \"\"\n    for char in s:\n        if char in vowels.keys():\n            transformed_s += vowels[char]\n        elif char in consonants.keys():\n            transformed_s += consonants[char]\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if word in emoticons_dict:\n            result += emoticons_dict[word] + \" \"\n        else:\n            result += word + \" \"\n    return result.strip()\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    s = \"*\" + s + \"*\"\n    n = n + 1\n    result = [s]\n    for _ in range(n - 2):\n        result.append(\"*\" + s[1:-1] + \"*\")\n    result.append(s)\n    return result\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions = [(potion[0] + ' ' + potion[1], int(potion[2])) for potion in potions]\n    potions.sort(key=lambda x: x[1])\n    min_potions = []\n    min_count = float('inf')\n\n    def dfs(index, total, count, curr_potions):\n        nonlocal min_potions, min_count\n        if total > target:\n            return\n        if total == target:\n            if count < min_count:\n                min_count = count\n                min_potions = curr_potions[:]\n        if index == len(potions):\n            return\n        potion = potions[index]\n        for i in range(1, min(target // potion[1] + 1, min_count - count + 1)):\n            curr_potions.append(potion[0])\n            dfs(index + 1, total + i * potion[1], count + i, curr_potions)\n            curr_potions.pop()\n\n    dfs(0, 0, 0, [])\n    min_potions.sort()\n    return min_potions if min_count < float('inf') else []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    m, n = len(arr), len(arr[0])\n    dp = [[0]*n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + arr[0][i]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1 * duration\n\n    if fuel >= duration:\n        remaining_fuel = round(fuel - fuel_consumption, 2)\n        return remaining_fuel\n    else:\n        return 'Insufficient fuel'\n\n"}
{"task_id": "EvoEval/44", "completion": "\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    left_max = [0]*n\n    right_max = [0]*n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n    count = 0\n    for i in range(0, n):\n        count += min(left_max[i], right_max[i]) - arr[i]\n    return count\n\n"}
{"task_id": "EvoEval/46", "completion": "\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient in available:\n            if quantity > available[ingredient]:\n                return False\n        else:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F',\n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L',\n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '01111': 'W', '1001': 'X',\n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '11100': '3',\n        '11110': '4', '11111': '5', '00000': '6', '00001': '7', '00011': '8',\n        '00110': '9', '00100': '0'\n    }\n    msg = msg.split(' ')\n    decoded_msg = ''\n    for word in msg:\n        if word != '/':\n            decoded_msg += morse_code[word]\n        else:\n            decoded_msg += ' '\n    return decoded_msg\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---',\n        '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...',\n        '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..',\n        '\\'': '.----.', '!--': '-.-.--', ')': '-.--.-', '(': '-.--.', '/': '-..-.',\n        '-': '-....-', '_': '..--.-', '@': '.--.-.', '=': '-...-', '+': '.-.-.',\n        ' ': '/'\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return \"\"\n    encoded_string = \"\"\n    for i in range(len(string)):\n        encoded_string += list_of_alphabets[i % len(list_of_alphabets)]\n    return encoded_string\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            if i % 2 == 0:\n                transformed_s += '!'\n            else:\n                transformed_s += '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    encrypted_message = ''\n    shift_count = 0\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encrypted_message += alphabet[(alphabet.index(char) + shift_count) % 26]\n            else:\n                encrypted_message += ALPHABET[(ALPHABET.index(char) + shift_count) % 26]\n        else:\n            encrypted_message += char\n        shift_count = (shift_count + 1) % shift\n    return encrypted_message\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..'\n    }\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += '/ '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        i = 0\n        for letter in dish:\n            new_dish += magic_spell[i % len(magic_spell)]\n            i += 1\n        new_menu[new_dish] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    earth_phrase = earth_phrase.split(\" \")\n    alien_phrase = []\n    for word in earth_phrase:\n        new_word = \"\"\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == \" \":\n                new_word += \"@\"\n        if new_word[0] in vowels:\n            new_word += \"xy\"\n        else:\n            new_word += \"yz\"\n        alien_phrase.append(new_word.capitalize())\n    return \" \".join(alien_phrase)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_list = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants = 0\n    sugar_positions = [0] * path_length\n\n    # Mark the sugar positions\n    for sugar in sugar_locations:\n        sugar_positions[sugar - 1] = 1\n\n    # Simulate the marching ants\n    for ant in ant_positions:\n        position, direction = ant\n        position -= 1  # Adjust for 0-indexing\n\n        # March the ant until it finds a sugar piece\n        while sugar_positions[position] == 0:\n            if direction == \"right\":\n                position = (position + 1) % path_length\n            else:\n                position = (position - 1) % path_length\n\n        # Mark the sugar piece as picked up\n        sugar_positions[position] = 0\n\n        # Increment the happy ants counter\n        happy_ants += 1\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            transformed_string += ' '\n        elif i % 2 == 0:\n            transformed_string += char.swapcase()\n        else:\n            if char.lower() in vowels:\n                transformed_string += vowels[(vowels.index(char.lower())+1)%5]\n            else:\n                transformed_string += consonants[(consonants.index(char.lower())-1)%21]\n    return transformed_string\n"}
{"task_id": "EvoEval/62", "completion": "\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        p = p - 2 if p % 2 == 0 else p - 3\n    return pyramid[::-1]\r\n\r\n\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [i for i in range(start, end + 1) if is_prime(i) and is_divisible(i, divisor)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    else:\n        for food, instructions in order.items():\n            if food in menu:\n                for action, items in instructions.items():\n                    if action == \"remove\":\n                        for item in items:\n                            if item in menu[food]:\n                                menu[food].remove(item)\n                    elif action == \"add\":\n                        for item in items:\n                            menu[food].append(item)\n    return menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n\n    return pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        result[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                result[customer] += meal['calories']\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Your code here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            encrypted_string += encrypted_char\n            if encrypted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        i = string\n        j = sum(c.isdigit() for c in string)\n        result.append(f\"Once kingdom far away lived magical creature '{i}' known for telling {j} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    rows = len(grid)\n    cols = len(grid[0])\n    dp = [[0 for _ in range(cols + 1)] for _ in range(rows + 1)]\n    dp[rows - 1][cols] = bag_capacity\n\n    # Iterate through the grid in reverse order\n    for row in range(rows - 1, -1, -1):\n        for col in range(cols - 1, -1, -1):\n            # Calculate the maximum number of treasures that can be collected\n            dp[row][col] = max(dp[row + 1][col], dp[row][col + 1])\n\n            # If there is a treasure chest in the current chamber, update the dp array\n            if grid[row][col] == 1:\n                dp[row][col] = max(dp[row][col], dp[row + 1][col + 1] + 1)\n\n            # If the maximum number of treasures that can be collected is more than the bag capacity, update the dp array\n            if dp[row][col] > bag_capacity:\n                dp[row][col] = bag_capacity\n\n    # Calculate the total number of trips\n    total_trips = sum([math.ceil(dp[row][0] / bag_capacity) for row in range(rows)])\n\n    return total_trips\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    return \"\".join(cipher.get(c, c) for c in s)\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    digits = '0123456789'\n    special_characters = '`~1234567890-=[]\\\\;',',./'\n    transformed_str = ''\n    for i in range(len(input_str)):\n        char = input_str[i]\n        if char.lower() in vowels:\n            if char.islower():\n                index = vowels.index(char)\n                transformed_str += vowels[(index+1)%5]\n            else:\n                index = vowels.upper().index(char)\n                transformed_str += vowels.upper()[(index+1)%5]\n        elif char.lower() in consonants:\n            if char.islower():\n                index = consonants.index(char)\n                transformed_str += consonants[(index+1)%21]\n            else:\n                index = consonants.upper().index(char)\n                transformed_str += consonants.upper()[(index+1)%21]\n        elif char in digits:\n            index = digits.index(char)\n            transformed_str += digits[(index+1)%10]\n        elif char in special_characters:\n            if char == '`':\n                transformed_str += '~'\n            elif char == '1':\n                transformed_str += '2'\n            elif char == '2':\n                transformed_str += '3'\n            elif char == '3':\n                transformed_str += '4'\n            elif char == '4':\n                transformed_str += '5'\n            elif char == '5':\n                transformed_str += '6'\n            elif char == '6':\n                transformed_str += '7'\n            elif char == '7':\n                transformed_str += '8'\n            elif char == '8':\n                transformed_str += '9'\n            elif char == '9':\n                transformed_str += '0'\n            elif char == '0':\n                transformed_str += '-'"}
{"task_id": "EvoEval/76", "completion": "\n\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    sequence.sort(reverse=True)\n    result = [0] * len(sequence)\n    for i in range(len(sequence)):\n        for j in range(i, len(sequence), k):\n            result[j] += sequence[i] // k\n    return result\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1 or i == n // 2 or j == n // 2:\n                pattern.append(mat[i][j])\n    return pattern\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    min_price = prices[0]\n\n    for i in range(1, days):\n        max_profit = max(max_profit, prices[i] - min_price)\n        min_price = min(min_price, prices[i])\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {}\n    for i in range(26):\n        alien_dict[alien_dictionary[i]] = chr(97 + i)\n\n    alien_word_list = [''.join([alien_dict[c] for c in word]) for word in word_list]\n\n    return \"CORRECT\" if alien_word_list == sorted(alien_word_list) else \"INCORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_elements = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    element_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        date = datetime.datetime.strptime(birthday, \"%Y-%m-%d\")\n        zodiac_sign = zodiacs[date.month - 1]\n        element_count[zodiac_elements[zodiac_sign]] += 1\n    return element_count\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n"}
{"task_id": "EvoEval/85", "completion": "\n    # Initialize variables\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    dp[0][0] = 0\n    queue = [(0, 0)]\n    directions = [(0, 1), (1, 0)]\n\n    # BFS\n    while queue:\n        x, y = queue.pop(0)\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and dp[nx][ny] == float('inf') and grid[nx][ny] == 0:\n                dp[nx][ny] = dp[x][y] + 1\n                queue.append((nx, ny))\n\n    # Return result\n    if dp[coord[0]-1][coord[1]-1] == float('inf'):\n        return -1\n    else:\n        return dp[coord[0]-1][coord[1]-1]\n\n"}
{"task_id": "EvoEval/86", "completion": "\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    result = ''\n    while arr:\n        # top row\n        result += ''.join(arr.pop(0))\n        # right column\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        # bottom row\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        # left column\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    if ray % 2 == 0:\n        aliens = [i for i in aliens if i != ray - 1 and i != ray + 1]\n    else:\n        aliens = [i for i in aliens if i != ray - 1 and i != ray + 1]\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # convert the strings to integers\n    num1 = int(s1)\n    num2 = int(s2)\n\n    # multiply the numbers\n    product = num1 * num2\n\n    # convert the product to a string and iterate over each digit\n    for digit in str(product):\n        # convert each digit back to an integer and add it to the sum\n        product += int(digit)\n\n    # return the sum\n    return product\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            pass\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    # create a list to store the layers\n    layers = []\n    # create a list to store the letters\n    letters = [chr(i) for i in range(65, 91)]\n    # create the first layer\n    layers.append('A')\n    # create the rest of the layers\n    for i in range(1, n):\n        # create the new layer\n        layer = letters[i%26] + layers[-1] + letters[i%26]\n        layers.append(layer)\n    # create the final string\n    fountain = '\\n'.join(layers)\n    return fountain\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the result\n    result = ''\n\n    # Loop over the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet and upper/lower case\n            alphabet_to_use = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position\n            new_pos = (alphabet_to_use.index(char) + n_values[i % len(n_values)]) % 26\n\n            # Add the new character to the result\n            result += alphabet_to_use[new_pos]\n        else:\n            # Add the non-letter character to the result\n            result += char\n\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    spell_list = []\n    for spell in strings:\n        words = spell.split(' ')\n        words.sort(key=len)\n        spell_list.append(' '.join(words))\n    return spell_list\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) == 0 or len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    sum1 = 0\n    sum2 = 0\n\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m)-i-1]\n\n    return abs(sum1 - sum2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = -lst[i]\n        if lst[i] % i == 0 and product_of_digits(i) == i:\n            magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    chairs = list(range(1, n + 1))\n    for round in range(rounds):\n        seconds = music[round]\n        for _ in range(seconds):\n            chairs = chairs[1:] + chairs[:1]\n        del chairs[0]\n    return chairs\n\n"}
