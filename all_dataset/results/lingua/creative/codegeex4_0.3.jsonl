{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n            total_cost += 5.0\n        else:\n            weight = item\n            total_cost += 5.0\n        if weight > 5.0:\n            total_cost += 10.0\n    if location == \"Local\":\n        pass\n    elif location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    else:\n        pass\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        total_cost += 5.0\n        if weight > 5.0:\n            total_cost += 10.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        total_cost *= 1.0\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word, key):\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n\n    return [caesar_cipher(word, key) if word.isalpha() else word for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            if int(input_string[i:j]) <= 26:\n                result.append(chr(ord('a') + int(input_string[i:j]) - 1))\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    count = candles.count(tallest)\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n\n            if (i + j) % (rows + cols - 2) == 0:\n                direction *= -1\n\n            if direction == 1:\n                if j == cols - 1:\n                    i += 1\n                else:\n                    j += 1\n            else:\n                if i == rows - 1:\n                    j += 1\n                else:\n                    i += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = 1\n        for i in range(max(0, x - 1), min(len(grid), x + 2)):\n            for j in range(max(0, y - 1), min(len(grid[0]), y + 2)):\n                if grid[i][j] == 0:\n                    grid[i][j] = 1\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for code in code_sequence:\n        if code == 0:\n            y += 1\n        elif code == 1:\n            x += 1\n        elif code == 2:\n            y -= 1\n        elif code == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Find the index of the painter 'P'\n    painter_index = canvas.index('P')\n    \n    # Remove the painter 'P' from the canvas\n    canvas = canvas.replace('P', '')\n    \n    # Split the canvas into rows\n    rows = canvas.split('#')\n    \n    # Initialize a list to store the painted rows\n    painted_rows = []\n    \n    # Iterate over the rows\n    for row in rows:\n        # If the row is empty, skip it\n        if not row:\n            continue\n        \n        # Split the row into segments of empty spaces\n        segments = row.split('-')\n        \n        # Initialize a list to store the painted segments\n        painted_segments = []\n        \n        # Iterate over the segments\n        for segment in segments:\n            # If the segment is empty, skip it\n            if not segment:\n                continue\n            \n            # Calculate the number of spaces in the segment\n            num_spaces = len(segment)\n            \n            # Calculate the number of painted spaces in the segment\n            num_painted_spaces = num_spaces // 2\n            \n            # Add the painted spaces to the painted segments\n            painted_segments.append('*' * num_painted_spaces)\n        \n        # Join the painted segments with '-' and add the row to the painted rows\n        painted_rows.append('-'.join(painted_segments))\n    \n    # Join the painted rows with '#' and add the painter 'P' back to the canvas\n    painted_canvas = '#'.join(painted_rows)\n    painted_canvas = 'P' + painted_canvas\n    \n    # Return the painted canvas\n    return painted_canvas\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    # TODO: Implement function here\n    word_list = string.split()\n    word_dict = {}\n    for word in word_list:\n        word = word.lower()\n        word = word.strip('.,!?')\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {'C': 0, 'D': 0, 'B': 0}\n    animal_sounds = animal_string.split(' ')\n    for sound in animal_sounds:\n        if len(sound) > 1 and sound[0] in animal_counts:\n            animal_counts[sound[0]] += len(sound) - 1\n    return [animal_counts['C'], animal_counts['D'], animal_counts['B']]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f'Oh {fruits[0]} from {location}? Marvelous!'\n    elif len(fruits) == 2:\n        return f'Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!'\n    else:\n        return f'Oh {\", \".join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!'\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    max_elements = [k for k, v in count.items() if v == max_count]\n    max_element = min(max_elements)\n    total_sum = sum(flux_values)\n    return total_sum * max_element\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [int(card[:-1]) for card in hand]\n    values.sort()\n    pairs = 0\n    triples = 0\n    fours = 0\n    for value in values:\n        if values.count(value) == 2:\n            pairs += 1\n        elif values.count(value) == 3:\n            triples += 1\n        elif values.count(value) == 4:\n            fours += 1\n    if fours == 1:\n        return values[0] * 4\n    elif triples == 1 and pairs == 1:\n        return values[0] * 2 + values[1] * 2\n    elif triples == 1:\n        return values[0] * 3\n    elif pairs == 2:\n        return values[0] * 2 + values[1] * 2\n    elif pairs == 1:\n        return values[0] * 2\n    else:\n        return 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if isinstance(wizard, str):\n            wizards.remove(wizard)\n    for wizard in wizards:\n        if wizard[1] > dragon_hp:\n            return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return 10 * magical_seven(n - 1) + 3\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                for k in range(len(m)):\n                    if m[k][j] == 2:\n                        danger += 1\n    return danger\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.isalpha() and char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '#', 'b': '+', 'c': '-', 'd': '*', 'e': '/', 'f': '%', 'g': '@', 'h': '!', 'i': '#', 'j': '&', 'k': '(', 'l': ')', 'm': '=', 'n': '?', 'o': ':', 'p': ';', 'q': '`', 'r': '~', 's': '>', 't': '<', 'u': '{', 'v': '}', 'w': '[', 'x': ']', 'y': '|', 'z': 'z'}\n    return ''.join(alien_dict[i] for i in english_word)\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    max_count = 0\n    for sentence in sentences:\n        count = sentence.count(word)\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count += count\n    return word_count, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end are walls\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue with the start position\n    queue = [start]\n    # Initialize the visited set with the start position\n    visited = set([start])\n    # Initialize the parent dictionary with the start position\n    parent = {start: None}\n    # Initialize the directions list\n    directions = []\n    # While the queue is not empty\n    while queue:\n        # Pop the first position from the queue\n        current = queue.pop(0)\n        # If the current position is the end position, break the loop\n        if current == end:\n            break\n        # Get the neighbors of the current position\n        neighbors = get_neighbors(maze, current)\n        # For each neighbor\n        for neighbor in neighbors:\n            # If the neighbor has not been visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue\n                queue.append(neighbor)\n                # Add the neighbor to the visited set\n                visited.add(neighbor)\n                # Add the current position as the parent of the neighbor\n                parent[neighbor] = current\n    # If the end position has not been reached, return an empty list\n    if end not in parent:\n        return []\n    # Otherwise, backtrack from the end position to the start position\n    current = end\n    while current != start:\n        # Get the direction from the current position to the parent position\n        direction = get_direction(current, parent[current])\n        # Add the direction to the directions list\n        directions.append(direction)\n        # Set the current position to the parent position\n        current = parent[current]\n    # Reverse the directions list\n    directions.reverse()\n    # Return the directions list\n    return directions"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 12500 + (taxable_income - 80000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s):\n        return s == s[::-1]\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue for BFS\n    queue = []\n    # Mark the start node as visited and enqueue it\n    queue.append(start)\n    # Create a set to store visited nodes\n    visited = set()\n    visited.add(start)\n    # Create a dictionary to store the path\n    path = {}\n    path[start] = []\n    # Perform BFS\n    while queue:\n        # Dequeue a node from the queue\n        node = queue.pop(0)\n        # If the node is the end node, return the path\n        if node == end:\n            return path[node]\n        # Get the neighbors of the node\n        neighbors = get_neighbors(maze, node)\n        # Iterate over the neighbors\n        for neighbor in neighbors:\n            # If the neighbor has not been visited, mark it as visited and enqueue it\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n                # Update the path dictionary\n                path[neighbor] = path[node] + [neighbor]\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    # create a 2D array to store the number of unique paths to each cell\n    paths = [[0] * n for _ in range(m)]\n    # initialize the starting cell\n    paths[0][0] = 1\n    # fill in the number of unique paths to each cell\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                paths[i][j] += paths[i - 1][j]\n            if j > 0:\n                paths[i][j] += paths[i][j - 1]\n    # return the number of unique paths to the final cell\n    return paths[m - 1][n - 1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            j = seed % playlist_length\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n            seed = (seed * 16807) % 2147483647\n    return playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i >= stone:\n                ways[i] += ways[i - stone]\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i == m:\n            transformation.append(100)\n        elif i < m:\n            transformation.append(transformation[-1] + 10)\n        else:\n            transformation.append(transformation[-1] - 10)\n        if transformation[-1] > 100:\n            transformation[-1] = 100\n        elif transformation[-1] < 0:\n            transformation[-1] = 0\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email.count(\"@\") > 1:\n        return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    coefficients = [0]\n    for i, x in enumerate(xs):\n        coefficients.append(x / (i + 1))\n    return coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return ['*'*(len(s)+2)] + [('*'+s)*n + '*' for _ in range(n)] + ['*'*(len(s)+2)]\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions.sort()\n    potions = [potion.split() for potion in potions]\n    potions = [[potion[0], int(potion[1])] for potion in potions]\n    potions.sort(key=lambda x: x[1])\n    target = int(target)\n    if target < potions[0][1]:\n        return []\n    if target == potions[0][1]:\n        return [potions[0][0]]\n    if target == potions[-1][1]:\n        return [potions[-1][0]]\n    for i in range(len(potions)):\n        if potions[i][1] == target:\n            return [potions[i][0]]\n        if potions[i][1] > target:\n            if i == 0:\n                return []\n            if target - potions[i-1][1] < potions[i][1] - target:\n                return [potions[i-1][0]]\n            else:\n                return [potions[i][0]]\n    return []"}
{"task_id": "EvoEval/41", "completion": "\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(m):\n        for j in range(n):\n            if arr[i][j] == 0:\n                dp[i][j] = 0\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    if len(player_input) == 0:\n        return (False, None)\n    if 5 in player_input:\n        if len(player_input) == 1:\n            return (True, -1)\n        else:\n            player_input.remove(5)\n            return (True, max(player_input))\n    else:\n        return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    duration = distance / speed\n    if fuel >= duration * fuel_consumption:\n        return round(fuel - duration * fuel_consumption, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5,"}
{"task_id": "EvoEval/45", "completion": "\n    if not arr:\n        return 0\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            result.append(secret_message)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            secret_message = ''\n            for word in case:\n                if word"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I',\n        '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '2',\n        '00111': '3', '00011': '4', '00001': '5', '00000': '6', '10000': '7', '11000': '8', '11100': '9', '11110': '0'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        decoded_chars = []\n        for char in word.split():\n            decoded_chars.append(morse_code[char])\n        decoded_words.append(''.join(decoded_chars))\n    return ' '.join(decoded_words)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': '/'\n    }\n    morse = ''\n    for char in text.upper():\n        if char in morse_code:\n            morse += morse_code[char] + ' '\n        else:\n            morse += char + ' '\n    return morse.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            result += list_of_alphabets[list_of_alphabets.index(char) % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    total = 0\n    for order in orders:\n        if order <= n:\n            total += 1\n        else:\n            batches = order // n\n            if batches <= m:\n                total += 1\n    return total\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels)).upper()\n            else:\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants)).upper()\n            else:\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants))\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        elif char == '!':\n            if i % 2 == 0:\n                transformed += '?'\n            else:\n                transformed += '!'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                star_map.append((i, j))\n    return star_map\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                shifted_char = chr((ord(char.lower()) - 97 + shift + i) % 26 + 97)\n                result += shifted_char.upper()\n            else:\n                shifted_char = chr((ord(char) - 97 + shift + i) % 26 + 97)\n                result += shifted_char\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': ' '}\n    morse_code = ''\n    for char in s:\n        morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for letter in dish:\n            new_name += magic_spell[ord(letter) - ord('a')]\n        new_menu[new_name] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[vowels.index(char) + 1]\n        elif char in consonants:\n            translated_phrase += consonants[consonants.index(char) + 1]\n        elif char == 'z':\n            translated_phrase += 'b'\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_words = translated_phrase.split('@')\n    translated_words = [word.capitalize() for word in translated_words]\n    for i in range(len(translated_words)):\n        if translated_words[i][0] in vowels:\n            translated_words[i] += 'xy'\n        else:\n            translated_words[i] += 'yz'\n    return '@'.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredient_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_ingredient_dict\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            result += ' '\n        elif i % 2 == 0:\n            result += char.swapcase()\n        elif char.lower() in vowels:\n            result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        else:\n            result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, ingredients in order.items():\n        if food in menu:\n            if \"remove\" in ingredients:\n                for ingredient in ingredients[\"remove\"]:\n                    if ingredient in menu[food]:\n                        menu[food].remove(ingredient)\n            if \"add\" in ingredients:\n                for ingredient in ingredients[\"add\"]:\n                    if ingredient not in menu[food]:\n                        menu[food].append(ingredient)\n    return menu\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs)\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        result[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                result[customer] += meal['calories']\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        rotated = arr[i:] + arr[:i]\n        if rotated == sorted(rotated):\n            return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            shifted = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            result += shifted\n            if shifted.lower() in vowels:\n                vowel_count += 1\n        else:\n            result += char\n    return result, vowel_count\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time in kingdom far away, lived magical creature name '{string}' known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    if not grid or not grid[0]:\n        return 0\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * (bag_capacity + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, bag_capacity + 1):\n            dp[i][j] = dp[i - 1][j]\n            if grid[i - 1][j - 1] == 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n    return dp[m][bag_capacity] * 2\n"}
{"task_id": "EvoEval/74", "completion": "\n    new_string = \"\"\n    for char in s:\n        if char in cipher:\n            new_string += cipher[char]\n        else:\n            new_string += char\n    return new_string\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.isdigit():\n            result += str((int(char) + 1) % 10)\n        else:\n            result += char\n        if i % 2 == 0 and char == '?':\n            result = result[:-1] + '!'\n        elif i % 2 == 1 and char == '?':\n            result = result[:-1] + '!'\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    while lst:\n        level += 1\n        level_sum = sum(lst[:level])\n        level_str = '#' * level_sum\n        pyramid.append(level_str)\n        lst = lst[level:]\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = []\n    for num in sequence:\n        total_points = 0\n        while num > 1:\n            total_points += num // k\n            num = num // k\n        points.append(total_points)\n    return sorted(points, reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return []\n    mid = n // 2\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if (i == 0 or i == n-1) and (j == 0 or j == n-1):\n                pattern.append(mat[i][j])\n            elif (i == 0 or i == n-1) and (j == mid):\n                pattern.append(mat[i][j])\n            elif (j == 0 or j == n-1) and (i == mid):\n                pattern.append(mat[i][j])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, min(i + days, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(self, map, instructions):\n        # Initialize player's position\n        player_row, player_col = 0, 0\n        for row in range(len(map)):\n            for col in range(len(map[row])):\n                if map[row][col] == 'S':\n                    player_row, player_col = row, col\n                    break\n            if player_row != 0 or player_col != 0:\n                break\n\n        # Initialize path\n        path = [(player_row, player_col)]\n\n        # Process instructions\n        for instruction in instructions:\n            if instruction == 'up':\n                if player_row > 0 and map[player_row - 1][player_col] != 'X':\n                    player_row -= 1\n            elif instruction == 'down':\n                if player_row < len(map) - 1 and map[player_row + 1][player_col] != 'X':\n                    player_row += 1\n            elif instruction == 'left':\n                if player_col > 0 and map[player_row][player_col - 1] != 'X':\n                    player_col -= 1\n            elif instruction == 'right':\n                if player_col < len(map[player_row]) - 1 and map[player_row][player_col + 1] != 'X':\n                    player_col += 1\n\n            # Check if player has reached the end\n            if map[player_row][player_col] == 'E':\n                break\n\n            # Add current position to path\n            path.append((player_row, player_col))\n\n        return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_order = alien_dictionary\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_order.index(word1[j]) > alien_order.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": {\"start\": \"03-21\", \"end\": \"04-19\", \"element\": \"Fire\"},\n        \"Taurus\": {\"start\": \"04-20\", \"end\": \"05-20\", \"element\": \"Earth\"},\n        \"Gemini\": {\"start\": \"05-21\", \"end\": \"06-20\", \"element\": \"Air\"},\n        \"Cancer\": {\"start\": \"06-21\", \"end\": \"07-22\", \"element\": \"Water\"},\n        \"Leo\": {\"start\": \"07-23\", \"end\": \"08-22\", \"element\": \"Fire\"},\n        \"Virgo\": {\"start\": \"08-23\", \"end\": \"09-22\", \"element\": \"Earth\"},\n        \"Libra\": {\"start\": \"09-23\", \"end\": \"10-22\", \"element\": \"Air\"},\n        \"Scorpio\": {\"start\": \"10-23\", \"end\": \"11-21\", \"element\": \"Water\"},\n        \"Sagittarius\": {\"start\": \"11-22\", \"end\": \"12-21\", \"element\": \"Fire\"},\n        \"Capricorn\": {\"start\": \"12-22\", \"end\": \"01-19\", \"element\": \"Earth\"},\n        \"Aquarius\": {\"start\": \"01-20\", \"end\": \"02-18\", \"element\": \"Air\"},\n        \"Pisces\": {\"start\": \"02-19\", \"end\": \"03-20\", \"element\": \"Water\"}\n    }\n    element_count = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, sign_info in zodiac_signs.items():\n            if sign_info[\"start\"] <= f\"{month:02d}-{day:02d}\" <= sign_info[\"end\"]:\n                element_count[sign_info[\"element\"]] += 1\n                break\n    return element_count\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    "}
{"task_id": "EvoEval/85", "completion": "\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    else:\n        return len(grid) + len(grid[0]) - 3\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    words = []\n    while arr:\n        words.extend(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                words.append(row.pop())\n        if arr:\n            words.extend(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                words.append(row.pop(0))\n    return ''.join(words)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(planets):\n        result = {}\n        for planet, data in planets.items():\n            if data[0] is not None and data[1] is not None:\n                result[planet] = round(data[0] / data[1], 2)\n        return result\n\n    return planet_population\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    ray = ray - 1\n    if ray in aliens:\n        aliens.remove(ray)\n    if ray - 1 in aliens:\n        aliens.remove(ray - 1)\n    if ray + 1 in aliens:\n        aliens.remove(ray + 1)\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    return sum(set(int(str(i) + str(j)) for i in s1 for j in s2))\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                continue\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        result.append(layer.center(2 * n - 1))\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            if message[i].isupper():\n                result += chr((ord(message[i]) - 65 + n_values[i % len(n_values)]) % 26 + 65)\n            else:\n                result += chr((ord(message[i]) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n        else:\n            result += message[i]\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(spell.split(), key=len)) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_magic_index(i, value):\n        if value % i == 0 and product_of_digits(value) == i:\n            return True\n        return False\n\n    def product_of_digits(n):\n        product = 1\n        while n != 0:\n            product *= abs(n % 10)\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if is_magic_index(i, lst[i]):\n            magic_indices.append(i)\n\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i\n        sequence.append(next_num)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = round * music\n        for i in range(time):\n            if not players:\n                return []\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n\n"}
