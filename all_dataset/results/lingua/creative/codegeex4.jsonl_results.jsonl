{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n            total_cost += 5.0 * 1.5\n        else:\n            weight = item\n            total_cost += 5.0\n        if weight > 5.0:\n            total_cost += 10.0\n    if location == \"Local\":\n        pass\n    elif location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    else:\n        pass\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        total_cost += weight * 5.0\n        if weight > 5.0:\n            total_cost += 10.0\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        total_cost *= 1.0\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            result.append(input_string[i:j])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    count = 0\n    for candle in candles:\n        if candle == tallest:\n            count += 1\n    return count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n\n            if (i + j) % (rows + cols - 2) == 0:\n                direction *= -1\n\n            if direction == 1:\n                if j == cols - 1:\n                    i += 1\n                else:\n                    j += 1\n            else:\n                if i == rows - 1:\n                    j += 1\n                else:\n                    i += 1\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = -1\n        for i in range(x-1, x+2):\n            for j in range(y-1, y+2):\n                if i >= 0 and i < len(grid) and j >= 0 and j < len(grid[0]):\n                    if grid[i][j] == 0:\n                        grid[i][j] = -1\n        return grid\n    if grid[x][y] == -1:\n        return grid", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    if canvas.count('*') > 0:\n        return canvas\n    canvas = list(canvas)\n    for i in range(len(canvas)):\n        if canvas[i] == 'P':\n            j = i\n            while j < len(canvas) and canvas[j] != '#':\n                if canvas[j] == '-':\n                    canvas[j] = '*'\n                j += 1\n            j = i\n            while j >= 0 and canvas[j] != '#':\n                if canvas[j] == '-':\n                    canvas[j] = '*'\n                j -= 1\n            break\n    if canvas.count('*') == 0:\n        return 'Invalid canvas'\n    return ''.join(canvas)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_counts = {}\n    animal_list = []\n    for animal in animal_string.split():\n        if animal[0] in animal_sounds and animal[0] not in animal_counts:\n            animal_counts[animal[0]] = len(animal) - 1\n            animal_list.append(animal_counts[animal[0]])\n        elif animal[0] in animal_counts and animal_counts[animal[0]] < 2:\n            animal_counts[animal[0]] += len(animal) - 1\n            animal_list.append(animal_counts[animal[0]])\n        elif len(animal_list) < 5:\n            animal_list.append(0)\n    return animal_list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_occurrence = max(counter.values())\n    most_occurred_number = min([num for num, count in counter.items() if count == max_occurrence])\n    sum_of_elements = sum(flux_values)\n    return sum_of_elements * most_occurred_number\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            elif char.lower() in consonants:\n                alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            else:\n                alias += char\n        else:\n            alias += char\n    return alias\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    values = [int(card[:-1]) for card in hand]\n    values.sort()\n    pairs = 0\n    triples = 0\n    fours = 0\n    for value in values:\n        if values.count(value) == 2:\n            pairs += 1\n        elif values.count(value) == 3:\n            triples += 1\n        elif values.count(value) == 4:\n            fours += 1\n    if fours == 1:\n        return values[0] * 3\n    elif triples == 1:\n        return values[0] * 2\n    elif pairs == 1:\n        return values[0]\n    else:\n        return 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return 10 * magical_seven(n - 1) + 7\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                for k in range(len(m)):\n                    if m[k][j] == 2:\n                        danger += 1\n    return danger\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 138, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in vampires_in_matrix\n                    if m[k][j] == 2:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 121, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    return english_word.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '+-*/%@!#?$^&()=<>:;`~[]{}|'))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 128, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        frequency = sentence.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n\n    # Initialize the queue with the start position\n    queue = [start]\n    # Initialize the visited set with the start position\n    visited = set([start])\n    # Initialize the parent dictionary with the start position\n    parent = {start: None}\n\n    # Define the directions\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    # Loop until the queue is empty\n    while queue:\n        # Get the current position from the queue\n        current = queue.pop(0)\n\n        # Check if the current position is the end position\n        if current == end:\n            # Reconstruct the path from the start to the end\n            path = []\n            while current != start:\n                path.append(current)\n                current = parent[current]\n            path.append(start)\n            path.reverse()\n            return path\n\n        # Get the neighbors of the current position\n        for direction in directions:\n            # Calculate the neighbor position\n            neighbor = (current[0] + direction[0], current[1] + direction[1])\n\n            # Check if the neighbor is within the maze and is not a wall\n            if 0 <= neighbor[0] < len(maze) and 0 <= neighbor[1] < len(maze[0]) and maze[neighbor[0]][neighbor[1]] == 0:\n                # Check if the neighbor has not been visited\n                if neighbor not in visited:\n                    # Add the neighbor to the queue\n                    queue.append(neighbor)\n                    # Add the neighbor to the visited set\n                    visited.add(neighbor)\n                    # Add the current position as the parent of the neighbor\n                    parent[neighbor] = current\n\n    # If the end position is not reachable, return an empty list\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 98, in <module>\n  File \"<string>\", line 96, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 87, in _check_maze\n            current_position = (current_position[0] + move_to_direction[move][0], current_position[1] + move_to_direction[move][1])\nKeyError: (0, 0)\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 12500 + (taxable_income - 80000) * 0.30\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    # Initialize an empty set to store unique palindrome substrings\n    palindromes = set()\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring\n            substring = s[i:j]\n\n            # Check if the substring is a palindrome\n            if substring == substring[::-1]:\n                # Add the palindrome to the set\n                palindromes.add(substring)\n\n    # Convert the set to a list and sort it in ascending order\n    palindromes = sorted(list(palindromes))\n\n    return palindromes\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 0 or maze[end[0]][end[1]] == 0:\n        return []\n    \n    # Initialize the queue with the start point\n    queue = [(start[0], start[1], [start])]\n    \n    # Initialize the visited set\n    visited = set()\n    \n    # Perform breadth-first search\n    while queue:\n        x, y, path = queue.pop(0)\n        \n        # Check if we have reached the end point\n        if (x, y) == end:\n            return path\n        \n        # Mark the current point as visited\n        visited.add((x, y))\n        \n        # Add the neighboring points to the queue\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append((nx, ny, path + [(nx, ny)]))\n    \n    # If we have exhausted the queue without finding the end point, return an empty list\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            j = seed % playlist_length\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n            seed = (seed * 16807) % 2147483647\n    return playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                ways[i] += ways[i - stone]\n    return ways[n]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(transformation[-1] + 10)\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(transformation[-1] - 10)\n        if transformation[-1] > 100:\n            transformation[-1] = 100\n        elif transformation[-1] < 0:\n            transformation[-1] = 0\n    return transformation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email.count(\"@\") > 1:\n        return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in string_transform\n                transformed += vowels[vowels.index(char.lower()) + 1]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    return ['*' + s * n + '*' for _ in range(n)] + ['*' * (len(s) * n + 2)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions.sort()\n    potion_dict = {}\n    for potion in potions:\n        name, power = potion.split()\n        potion_dict[name] = int(power)\n    target_potions = []\n    for potion in potions:\n        name, power = potion.split()\n        if int(power) == target:\n            target_potions.append(potion)\n            return target_potions\n        elif int(power) < target:\n            target_potions.append(potion)\n            target -= int(power)\n            if target == 0:\n                return target_potions\n            elif target < 0:\n                target_potions.pop()\n                return target_potions\n    return target_potions\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 151, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in potion_mixing\n        name, power = potion.split()\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input):\n        legendary = False\n        second_most_valuable = None\n        for item in player_input:\n            if item == 5:\n                legendary = True\n            elif item > 1 and item < 5:\n                if second_most_valuable is None or item > second_most_valuable:\n                    second_most_valuable = item\n        if legendary:\n            if second_most_valuable is None:\n                return True, -1\n            else:\n                return True, second_most_valuable\n        else:\n            return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        legendary = False\n        second_most_valuable = None\n        for item in player_input:\n            if item == 5:\n                legendary = True\n            elif item > 1 and item < 5:\n                if second_most_valuable is None or item > second_most_valuable:\n                    second_most_valuable = item\n        if legendary:\n            if second_most_valuable is None:\n                return True, -1\n            else:\n                return True, second_most_valuable\n        else:\n            return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        legendary = False\n        second_most_valuable = None\n        for item in player_input:\n            if item == 5:\n                legendary = True\n            elif item > 1 and item < 5:\n                if second_most_valuable is None or item > second_most_valuable:\n                    second_most_valuable = item\n        if legendary:\n            if second_most_valuable is None:\n                return True, -1\n            else:\n                return True, second_most_valuable\n        else:\n            return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        legendary = False\n        second_most_valuable = None\n        for item in player_input:\n            if item", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 73\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 191)\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    duration_trip = distance / speed\n    if fuel >= duration_trip:\n        remaining_fuel = fuel - (fuel_consumption * duration_trip)\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 104\n        if sum(q) <= w\n    if sum(q) <= w\n                  ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    if len(arr) == 0:\n        return 0\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message)\n        return secret_messages\n    \"\"\"\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message)\n        return secret_messages\n    \"\"\"\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message)\n        return secret_messages\n    \"\"\"\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message)\n        return secret_messages\n    \"\"\"\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message)\n        return secret_messages\n    \"\"\"\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message)\n        return secret_messages\n    \"\"\"\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            secret_messages.append(secret_message", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 91\n            secret_messages.append(secret_message\n    secret_messages.append(secret_message\n                          ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I',\n        '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '2',\n        '00111': '3', '00011': '4', '00001': '5', '00000': '6', '10000': '7', '11000': '8', '11100': '9', '11110': '0'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        characters = word.split(' ')\n        decoded_characters = []\n        for character in characters:\n            if character in morse_code:\n                decoded_characters.append(morse_code[character])\n        decoded_words.append(''.join(decoded_characters))\n    return ' '.join(decoded_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.', '$': '...-..-', '@': '.--.-.', ' ': '/'\n    }\n    morse_text = ''\n    for char in text.upper():\n        if char in morse_code:\n            morse_text += morse_code[char] + ' '\n        else:\n            morse_text += char + ' '\n    return morse_text.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        index = ord(char) - ord('a')\n        result += list_of_alphabets[index % len(list_of_alphabets)]\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    total_orders = 0\n    for order in orders:\n        if order <= n:\n            total_orders += 1\n        else:\n            batches = order // n\n            if batches <= m:\n                total_orders += batches\n            else:\n                total_orders += m\n    return total_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels)).upper()\n            else:\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants)).upper()\n            else:\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants))\n        elif char == '?':\n            if s.index(char) % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    return {magic_spell[i % len(magic_spell)] * len(dish): dish for dish, price in menu.items() for i in range(len(dish))}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_words = translated_phrase.split('@')\n    translated_words = [word.capitalize() for word in translated_words]\n    for i in range(len(translated_words)):\n        if translated_words[i][0] in vowels:\n            translated_words[i] += 'xy'\n        else:\n            translated_words[i] += 'yz'\n    return '@'.join(translated_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            result += ' '\n        elif i % 2 == 0:\n            result += char.swapcase()\n        elif char.lower() in vowels:\n            result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        else:\n            result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = int(quantity * conversion_factor)\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            if \"remove\" in ingredients:\n                for ingredient in ingredients[\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in ingredients:\n                for ingredient in ingredients[\"add\"]:\n                    final_order[food].append(ingredient)\n    return final_order\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort(key=lambda x: (x[0], x[1]))\n    return anagram_pairs\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        rotated = arr[i:] + arr[:i]\n        if rotated == sorted(rotated):\n            return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in planets:\n        if planet not in path:\n            return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time{' in kingdom far away' if fairy_tales else ''}, lived magical creature '{string}' known for telling {tales} tales a day\")\n    return fairy_tales\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_treasures = sum(sum(row) for row in grid)\n    num_trips = 0\n\n    # Calculate the number of trips\n    for i in range(num_chambers):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                num_trips += math.ceil(grid[i][j] / bag_capacity)\n\n    return num_trips\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return ''\n    result = ''\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.isdigit():\n            result += str((int(char) + 1) % 10)\n        else:\n            result += char\n        if char == '?' and i % 2 == 0:\n            result = result[:-1] + '!'\n        elif char == '?' and i % 2 == 1:\n            result = result[:-1] + '?'\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    level = 0\n    for i in range(len(lst)):\n        level += lst[i]\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * len(sequence)\n    for i, num in enumerate(sequence):\n        while num > 1:\n            points[i] += num // k\n            num = num % k\n    return sorted(points, reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return []\n    mid = n // 2\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if (i == 0 and j == 0) or (i == n-1 and j == n-1) or (i == 0 and j == n-1) or (i == n-1 and j == 0):\n                pattern.append(mat[i][j])\n            elif (i == 0 or i == n-1) and (j == mid):\n                pattern.append(mat[i][j])\n            elif (j == 0 or j == n-1) and (i == mid):\n                pattern.append(mat[i][j])\n    return pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, min(i + days, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    def __init__(self, map, instructions):\n        self.map = map\n        self.instructions = instructions\n        self.start = None\n        self.end = None\n        self.path = []\n        self.current_position = None\n        self.find_start_and_end()\n        self.move_player()\n\n    def find_start_and_end(self):\n        for i in range(len(self.map)):\n            for j in range(len(self.map[i])):\n                if self.map[i][j] == 'S':\n                    self.start = (i, j)\n                    self.current_position = self.start\n                elif self.map[i][j] == 'E':\n                    self.end = (i, j)\n\n    def move_player(self):\n        for instruction in self.instructions:\n            if instruction == 'up':\n                if self.current_position[0] > 0:\n                    self.current_position = (self.current_position[0] - 1, self.current_position[1])\n            elif instruction == 'down':\n                if self.current_position[0] < len(self.map) - 1:\n                    self.current_position = (self.current_position[0] + 1, self.current_position[1])\n            elif instruction == 'left':\n                if self.current_position[1] > 0:\n                    self.current_position = (self.current_position[0], self.current_position[1] - 1)\n            elif instruction == 'right':\n                if self.current_position[1] < len(self.map[0]) - 1:\n                    self.current_position = (self.current_position[0], self.current_position[1] + 1)\n            self.path.append(self.current_position)\n            if self.current_position == self.end:\n                break\n        return self.path\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 183, in <module>\n  File \"<string>\", line 181, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        if not is_sorted(word_list[i], word_list[i + 1], alien_dictionary):\n            return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 135, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in alien_language\n        if not is_sorted(word_list[i], word_list[i + 1], alien_dictionary):\nNameError: name 'is_sorted' is not defined\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\"),\n        \"Taurus\": (\"April 20\", \"May 20\"),\n        \"Gemini\": (\"May 21\", \"June 20\"),\n        \"Cancer\": (\"June 21\", \"July 22\"),\n        \"Leo\": (\"July 23\", \"August 22\"),\n        \"Virgo\": (\"August 23\", \"September 22\"),\n        \"Libra\": (\"September 23\", \"October 22\"),\n        \"Scorpio\": (\"October 23\", \"November 21\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\"),\n        \"Capricorn\": (\"December 22\", \"January 19\"),\n        \"Aquarius\": (\"January 20\", \"February 18\"),\n        \"Pisces\": (\"February 19\", \"March 20\"),\n    }\n    zodiac_elements = {\n        \"Fire\": [\"Aries\", \"Leo\", \"Sagittarius\"],\n        \"Water\": [\"Cancer\", \"Scorpio\", \"Pisces\"],\n        \"Air\": [\"Gemini\", \"Libra\", \"Aquarius\"],\n        \"Earth\": [\"Taurus\", \"Virgo\", \"Capricorn\"],\n    }\n    result = {element: 0 for element in zodiac_elements.keys()}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                for element, signs in zodiac_elements.items():\n                    if sign in signs:\n                        result[element] += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 179, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 59, in zodiac_element\n            start_month, start_day = map(int, start.split())\nValueError: invalid literal for int() with base 10: 'March'\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    \n    def tree_traversal(tree):\n        paths = []\n        stack = [(tree, [])]\n        \n        while stack:\n            node, path = stack.pop()\n            path = path + [node.keys()]\n            \n            if not node.values():\n                paths.append(path)\n            else:\n                for child in node.values():\n                    stack.append((child, path))\n        \n        return paths\n    \n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]\n    \n    tree = {1: {2: {4: {7: {}}, 5: {8: {}}}, 3: {6: {}}}}\n    assert tree_traversal(tree) == [[1, 2, 4, 7], [1, 2, 5, 8], [1, 3, 6]]\n    \n    print(\"All tests passed!\")\n\ntree_traversal()# Task: Create a function that takes a binary tree as input and returns a list of all possible paths from the root to the leaves. The binary tree is represented as a nested dictionary, where the keys represent the node values and the values represent the left and right branches of the tree. The function should return a list of lists, where each sublist represents a path from the root to a leaf, containing the node values in the path. The paths should be sorted according to depth-first search traversal.\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 50, in <module>\ntree_traversal()# Task: Create a function that takes a binary tree as input and returns a list of all possible paths from the root to the leaves. The binary tree is represented as a nested dictionary, where the keys represent the node values and the values represent the left and right branches of the tree. The function should return a list of lists, where each sublist represents a path from the root to a leaf, containing the node values in the path. The paths should be sorted according to depth-first search traversal.\nTypeError: tree_traversal() missing 1 required positional argument: 'tree'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    else:\n        return len(grid) + len(grid[0]) - 2 - coord[0] - coord[1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 24, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, data in dict_of_planets.items():\n        if data[0] is not None and data[1] is not None:\n            new_dict[planet] = round(data[0] / data[1], 2)\n    return new_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    ray = aliens.index(ray)\n    if ray % 2 == 0:\n        return aliens[:ray-1] + aliens[ray+1:]\n    else:\n        return aliens[:ray-1] + aliens[ray+1:]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.append(int(s[i]) * int(s[j]))\n        return combinations\n\n    return sum(get_combinations(s1)) * sum(get_combinations(s2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            continue\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1)\n        result.append(layer.center(2 * n - 1))\n    return '\\n'.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                result += alphabet[(alphabet.index(char.lower()) + n_values[i % len(n_values)]) % 26].upper()\n            else:\n                result += alphabet[(alphabet.index(char) + n_values[i % len(n_values)]) % 26]\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in get_magic_indices\n        if value % i == 0 and product_of_digits(value) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order", "result": "passed", "passed": true}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i\n        sequence.append(next_num)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        for i in range(round):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
