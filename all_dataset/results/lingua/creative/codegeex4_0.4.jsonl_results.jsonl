{"task_id": "EvoEval/0", "completion": "\n    shipping_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            shipping_cost += 5.0 * 1.5\n        else:\n            shipping_cost += 5.0\n            if item > 5.0:\n                shipping_cost += 10.0\n    if location == \"Local\":\n        return round(shipping_cost, 2)\n    elif location == \"National\":\n        return round(shipping_cost * 1.5, 2)\n    elif location == \"International\":\n        return round(shipping_cost * 2.5, 2)\n    else:\n        return round(shipping_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    total_cost = 0.0\n    weight_factor = 1.0\n    location_factor = 1.0\n\n    if location == \"Local\":\n        location_factor = 1.0\n    elif location == \"National\":\n        location_factor = 1.5\n    elif location == \"International\":\n        location_factor = 2.5\n\n    for item in items:\n        if isinstance(item, str):\n            total_cost += base_cost * location_factor\n        else:\n            weight = item\n            total_cost += base_cost * location_factor\n            if weight > 5.0:\n                total_cost += 10.0\n\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(c) for c in key)\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    return [caesar_cipher(word, key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def helper(input_string: str, index: int, current_string: str, result: List[str]):\n        if index == len(input_string):\n            result.append(current_string)\n            return\n        helper(input_string, index + 1, current_string + chr(ord('a') + int(input_string[index])), result)\n        if index + 1 < len(input_string):\n            helper(input_string, index + 2, current_string + chr(ord('a') + int(input_string[index:index+2])), result)\n    result = []\n    helper(input_string, 0, '', result)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    count = candles.count(tallest)\n    return count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n\n            if (i + j) % (rows + cols - 2) == 0:\n                direction *= -1\n\n            if direction == 1:\n                j += 1\n            else:\n                j -= 1\n\n            if j >= cols:\n                j = cols - 1\n                i += 1\n            elif j < 0:\n                j = 0\n                i += 1\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = 1\n        for i in range(max(0, x - 1), min(len(grid), x + 2)):\n            for j in range(max(0, y - 1), min(len(grid[0]), y + 2)):\n                if grid[i][j] == 0:\n                    grid[i][j] = 1\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for code in code_sequence:\r\n        if code == 0:\r\n            y += 1\r\n        elif code == 1:\r\n            x += 1\r\n        elif code == 2:\r\n            y -= 1\r\n        elif code == 3:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    if canvas.count('*') != 0:\n        return canvas\n    canvas = canvas.replace('P', '*')\n    canvas = canvas.replace('-', '*')\n    return canvas\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    from collections import Counter\n    string = string.translate(str.maketrans('', '', string.punctuation))\n    words = string.split()\n    word_counts = Counter(words)\n    return dict(word_counts)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 130, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 16, in calculate_word_frequency\n    string = string.translate(str.maketrans('', '', string.punctuation))\nAttributeError: module 'string' has no attribute 'translate'\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = [0, 0, 0, 0, 0]  # Initialize counts for each animal\r\n    animal_sounds = {'C': 0, 'D': 1, 'B': 2}  # Mapping of animal to index in animal_counts\r\n    animal_sound_counts = {'C': 0, 'D': 0, 'B': 0}  # Count of each animal sound\r\n    animal_sound_index = 0  # Index of current animal sound in animal_counts\r\n    animal_sound_count = 0  # Count of current animal sound\r\n    animal_sound_valid = False  # Flag to indicate if current animal sound is valid\r\n\r\n    for char in animal_string:\r\n        if char == '|':\r\n            animal_sound_count += 1\r\n        elif char in animal_sounds:\r\n            if animal_sound_valid:\r\n                animal_counts[animal_sound_index] += animal_sound_count\r\n                animal_sound_counts[animal_sound_index] += animal_sound_count\r\n                animal_sound_count = 0\r\n                animal_sound_valid = False\r\n            animal_sound_index = animal_sounds[char]\r\n            animal_sound_valid = True\r\n        else:\r\n            animal_sound_valid = False\r\n\r\n    if animal_sound_valid:\r\n        animal_counts[animal_sound_index] += animal_sound_count\r\n        animal_sound_counts[animal_sound_index] += animal_sound_count\r\n\r\n    return [animal_sound_counts['C'], animal_sound_counts['D'], animal_sound_counts['B']]\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 160, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 47, in count_animals\n        animal_sound_counts[animal_sound_index] += animal_sound_count\r\nKeyError: 2\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{fruits[0]} {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])} {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_count = max(counter.values())\n    max_elements = [k for k, v in counter.items() if v == max_count]\n    min_element = min(max_elements)\n    sum_elements = sum(flux_values)\n    return sum_elements * min_element\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.lower() in vowels:\n            alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Create a dictionary to store the value of each card\n    card_values = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13}\n    \n    # Extract the value of each card from the hand\n    values = [card_values[card[0]] for card in hand]\n    \n    # Check for pairs, triples, and fours\n    pairs = [value for value in values if values.count(value) == 2]\n    triples = [value for value in values if values.count(value) == 3]\n    fours = [value for value in values if values.count(value) == 4]\n    \n    # Calculate the score based on the number of pairs, triples, and fours\n    score = 0\n    if len(pairs) == 1 and len(triples) == 1:\n        score = pairs[0] + 2 * triples[0]\n    elif len(pairs) == 1:\n        score = pairs[0]\n    elif len(triples) == 1:\n        score = 2 * triples[0]\n    elif len(fours) == 1:\n        score = 3 * fours[0]\n    elif len(values) == 5:\n        score = sum(values)\n    \n    return score\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 162, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return a + b\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return 7 * 10 ** (n - 1) + 7\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    if not m:\n        return 0\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                danger += m[i].count(1)\n                for k in range(len(m[i])):\n                    if m[i][k] == 1:\n                        m[i][k] = 2\n                for k in range(len(m)):\n                    if m[k][j] == 1:\n                        m[k][j] = 2\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                danger += 1\n    return danger\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 148, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 30, in vampires_in_matrix\n                    if m[k][j] == 1:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    pattern.append(','.join(pattern))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    pattern.append(','.join(pattern[::-1]))\n    return pattern\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 182, in <module>\n  File \"<string>\", line 180, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 123, in <module>\n  File \"<string>\", line 121, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    return english_word.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '#%(( +($%='))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 130, in <module>\n  File \"<string>\", line 127, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 15, in alien_language_translator\n    return english_word.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', '#%(( +($%='))\nValueError: the first two maketrans arguments must have equal length\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        count = sentence.lower().count(word.lower())\n        if count > max_frequency:\n            max_frequency = count\n            max_sentence = sentence\n        word_count += count\n    return (word_count, max_sentence)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n\n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n\n    # Initialize the queue with the start position\n    queue = [start]\n\n    # Initialize the visited set with the start position\n    visited = set([start])\n\n    # Initialize the parent dictionary with the start position\n    parent = {start: None}\n\n    # Initialize the directions dictionary with the start position\n    directions = {start: []}\n\n    # Loop until the queue is empty\n    while queue:\n        # Get the current position from the queue\n        current = queue.pop(0)\n\n        # Check if the current position is the end position\n        if current == end:\n            # Reconstruct the path from the start to the end\n            path = []\n            while current != start:\n                path.append(directions[current])\n                current = parent[current]\n            path.reverse()\n            return path\n\n        # Get the neighbors of the current position\n        neighbors = get_neighbors(maze, current)\n\n        # Loop through the neighbors\n        for neighbor in neighbors:\n            # Check if the neighbor has not been visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue\n                queue.append(neighbor)\n\n                # Add the neighbor to the visited set\n                visited.add(neighbor)\n\n                # Set the parent of the neighbor to the current position\n                parent[neighbor] = current\n\n                # Set the directions of the neighbor to the directions of the current position plus the direction to the neighbor\n                directions[neighbor] = directions[current] + get_direction(current, neighbor)\n\n    # If the end position is not reachable, return an empty list\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 106, in <module>\n  File \"<string>\", line 104, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 57, in pathfinder\n        neighbors = get_neighbors(maze, current)\nNameError: name 'get_neighbors' is not defined\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 25000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 45000:\n        return 1500 + (taxable_income - 25000) * 0.25\n    else:\n        return 7500 + (taxable_income - 45000) * 0.30\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    # Initialize an empty set to store unique palindrome substrings\n    palindromes = set()\n\n    # Iterate over all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring\n            substring = s[i:j]\n\n            # Check if the substring is a palindrome\n            if substring == substring[::-1]:\n                # Add the palindrome to the set\n                palindromes.add(substring)\n\n    # Convert the set to a list and sort it in ascending order\n    palindromes = sorted(list(palindromes))\n\n    return palindromes\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue for BFS and enqueue the start node\n    queue = [(start[0], start[1])]\n    # Create a set to store visited nodes\n    visited = set()\n    # Create a dictionary to store the parent of each node\n    parent = {}\n    # Mark the start node as visited\n    visited.add(start)\n    # Perform BFS\n    while queue:\n        # Dequeue a node from the queue\n        x, y = queue.pop(0)\n        # If the current node is the end node, return the path\n        if (x, y) == end:\n            path = []\n            while (x, y) != start:\n                path.append((x, y))\n                x, y = parent[(x, y)]\n            path.append(start)\n            return path[::-1]\n        # Check all possible moves from the current node\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            # If the new node is within the maze and is not a wall and has not been visited, enqueue it and mark it as visited\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append((nx, ny))\n                visited.add((nx, ny))\n                parent[(nx, ny)] = (x, y)\n    # If no path is found, return an empty list\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/31", "completion": "\n    # create 2D array of size m x n\n    dp = [[0] * n for _ in range(m)]\n    # initialize first row and column to 1\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    # fill in rest of dp array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    # return last element in dp array\n    return dp[m - 1][n - 1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        seed = (seed * 16807) % 2147483647\n        j = seed % (i + 1)\n        if \"Rock\" not in playlist[i]:\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n    return playlist\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # There is 1 way to reach the 0th step (doing nothing)\n    ways[0] = 1\n    # Iterate over each step\n    for i in range(1, n + 1):\n        # Iterate over each magic stone\n        for stone in magic_stones:\n            # If the power of the stone is greater than the current step, skip it\n            if stone > i:\n                continue\n            # Add the number of ways to reach the current step from the previous step\n            ways[i] += ways[i - stone]\n    # Return the number of ways to reach the nth step\n    return ways[n]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i == m:\n            transformation.append(100)\n        elif i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email[email.index(\"@\"):] == \".\" or email[email.index(\"@\"):] == \"..\":\r\n        return False\r\n    else:\r\n        return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        coefficients[i] = xs[i] / (i + 1)\n    return coefficients\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    space = ' '\n    digit = '0123456789'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[vowels.index(char.lower()) + 1].upper()\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[consonants.index(char.lower()) + 1].upper()\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1]\n        elif char in punctuation:\n            transformed += char\n        elif char in space:\n            transformed += char\n        elif char in digit:\n            transformed += char\n    return transformed\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in string_transform\n                transformed += vowels[vowels.index(char.lower()) + 1]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    return ['*'*(len(s)+2)] + [s[i]+s[i+1] for i in range(0, len(s), 2)]*n + ['*'*(len(s)+2)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 138, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in asciiArt\n    return ['*'*(len(s)+2)] + [s[i]+s[i+1] for i in range(0, len(s), 2)]*n + ['*'*(len(s)+2)]\n  File \"<string>\", line 26, in <listcomp>\n    return ['*'*(len(s)+2)] + [s[i]+s[i+1] for i in range(0, len(s), 2)]*n + ['*'*(len(s)+2)]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions = [(potion[0], int(potion[2])) for potion in potions]\n    potions.sort(key=lambda x: x[1])\n    target = int(target)\n    result = []\n    for potion in potions:\n        if potion[1] <= target:\n            result.append(potion[0])\n            target -= potion[1]\n        if target == 0:\n            break\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    if not arr or not arr[0]:\n        return 0\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player has acquired a legendary item\n    if 5 in player_input:\n        # If a legendary item is acquired, return True and the rarity of the second most valuable item\n        return (True, max(set(player_input) - {5}, default=None))\n    else:\n        # If no legendary item is acquired, return False and None\n        return (False, None)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    if fuel >= duration:\n        fuel -= spaceship_weight * planet_gravity * 0.1 * duration\n        return round(fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n\n    Write a function that takes a string as input and returns True if the string is a palindrome, False otherwise. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward, ignoring spaces, punctuation, and capitalization.\n    \"\"\"\n    def is_palindrome(s):\n        s = s.lower()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"_\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"!\", \"\")\n        s = s.replace(\"@\", \"\")\n        s = s.replace(\"#\", \"\")\n        s = s.replace(\"$\", \"\")\n        s = s.replace(\"%\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"&\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"_\", \"\")\n        s = s.replace(\"+\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"[\",", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 176)\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    if not arr:\n        return 0\n\n    n = len(arr)\n    left_max = [0] * n\n    right_max = [0] * n\n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n\n    max_view = 0\n    for i in range(n):\n        if arr[i] == left_max[i] and arr[i] == right_max[i]:\n            max_view = max(max_view, i+1)\n\n    return max_view\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            if isinstance(test, list):\n                test = ' '.join(test)\n            message = ''\n            for word in test.split():\n                message += word[0].lower()\n            result.append(message)\n        return result\n\n    print(hidden_message([['Hello, world!' 'okay?' ['Every' 'good' 'boy' 'does' 'fine']]))\n    print(hidden_message(['apple''Banana' 'grape' 'kiwi' 'melon']))\n    print(hidden_message([['This' 'is' '?a' 'test' 'case??' ['hi']]))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 34\n    print(hidden_message([['Hello, world!' 'okay?' ['Every' 'good' 'boy' 'does' 'fine']]))\n    print(hidden_message([['Hello, world!' 'okay?' ['Every' 'good' 'boy' 'does' 'fine']]))\n                                                                                        ^\nSyntaxError: closing parenthesis ')' does not match opening parenthesis '['\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity <= 0}\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '!', '00111': '@', '00011': '#', '00001': '$', '5': '%', '00000': '^', '10000': '&', '11000': '*', '11100': '(', '11110': ')', '11111': '-'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        decoded_word = ''\n        characters = word.split(' ')\n        for character in characters:\n            if character in morse_code:\n                decoded_word += morse_code[character]\n            else:\n                decoded_word += ' '\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        ',': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', ' ': '/'\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += char + ' '\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            result += list_of_alphabets[list_of_alphabets.index(char) % len(list_of_alphabets)]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 141, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in alien_encoding\n            result += list_of_alphabets[list_of_alphabets.index(char) % len(list_of_alphabets)]\nValueError: 'H' is not in list\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    # Sort orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize variables\n    max_orders = 0\n    current_orders = 0\n    current_batches = 0\n    \n    # Iterate through orders\n    for order in orders:\n        # Check if order can be baked in current batch\n        if order <= n:\n            current_orders += order\n            current_batches += 1\n        # Check if current batch is full\n        elif current_batches < m:\n            current_orders = order\n            current_batches = 1\n        # Check if order can be baked in next batch\n        elif order <= n * m:\n            max_orders += current_batches\n            current_orders = order\n            current_batches = 1\n        # Order cannot be baked\n        else:\n            max_orders += current_batches\n            break\n    \n    # Add remaining orders\n    max_orders += current_batches\n    \n    return max_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 174, in <module>\n  File \"<string>\", line 172, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                result += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels)).upper()\n            else:\n                result += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants)).upper()\n            else:\n                result += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants))\n        elif char == '?':\n            if i % 2 == 0:\n                result += '!'\n            else:\n                result += '?'\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = alphabet.upper()\n    result = ''\n    for i in range(len(message)):\n        if message[i].isalpha():\n            if message[i].islower():\n                index = alphabet.index(message[i])\n                new_index = (index + shift) % 26\n                result += alphabet[new_index]\n            else:\n                index = alphabet_upper.index(message[i])\n                new_index = (index + shift) % 26\n                result += alphabet_upper[new_index]\n        else:\n            result += message[i]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' '\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = ''\n        for letter in dish:\n            new_dish += magic_spell[ord(letter) - ord('a')]\n        new_menu[new_dish] = price\n    return new_menu\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in magical_cafe\n            new_dish += magic_spell[ord(letter) - ord('a')]\nIndexError: string index out of range\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n    if earth_phrase[0] in vowels:\n        translated_phrase = 'xy' + translated_phrase\n    else:\n        translated_phrase = 'yz' + translated_phrase\n    return translated_phrase.capitalize()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_dict\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize a list to keep track of the number of sugar pieces each ant has\n    sugar_pieces = [0] * len(ant_positions)\n\n    # Iterate over each ant\n    for i, (position, direction) in enumerate(ant_positions):\n        # Initialize the current position of the ant\n        current_position = position\n\n        # While the ant is still on the path\n        while 0 <= current_position < path_length:\n            # Check if the current position has a sugar piece\n            if current_position in sugar_locations:\n                # If the ant is moving right, increment the number of sugar pieces it has\n                if direction == \"right\":\n                    sugar_pieces[i] += 1\n                # If the ant is moving left, decrement the number of sugar pieces it has\n                elif direction == \"left\":\n                    sugar_pieces[i] -= 1\n\n            # Move the ant forward or backward depending on its direction\n            if direction == \"right\":\n                current_position += 1\n            elif direction == \"left\":\n                current_position -= 1\n\n    # Return the number of happy ants, which is the number of ants that have more sugar pieces than they started with\n    return sum(1 for pieces in sugar_pieces if pieces > 0)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 164, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, char in enumerate(s):\n        if char == ' ':\n            result += ' '\n        elif i % 2 == 0:\n            if char in vowels:\n                result += chr((ord(char) - ord('a') + 1) % 26 + ord('a'))\n            elif char in consonants:\n                result += chr((ord(char) - ord('a') - 1) % 26 + ord('a'))\n            else:\n                result += char.swapcase()\n        else:\n            result += char.swapcase()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_dict = {}\n    for key, value in recipe.items():\n        new_dict[key] = value * conversion_factor\n    return new_dict\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        p -= 2\n        pyramid.append(p)\n    return pyramid\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, modifications in order.items():\n        if food not in menu:\n            continue\n        if \"remove\" in modifications:\n            for ingredient in modifications[\"remove\"]:\n                if ingredient in menu[food]:\n                    menu[food].remove(ingredient)\n        if \"add\" in modifications:\n            for ingredient in modifications[\"add\"]:\n                if ingredient not in menu[food]:\n                    menu[food].append(ingredient)\n    return menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(a, b):\n        return sorted(str(a)) == sorted(str(b))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    if arr == sorted(arr):\n        return True\n    for i in range(len(arr)):\n        rotated = arr[i:] + arr[:i]\n        if rotated == sorted(rotated):\n            return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n        else:\n            result += char\n    return result, sum(1 for char in result if char.lower() in vowels)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        tales = string.count(str(string))\n        fairy_tales.append(f\"Once kingdom far away lived magical creature '{string}' known for telling {tales} tales a day\")\n    return fairy_tales\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_treasures = len(grid[0])\n    total_treasures = 0\n    trips = 0\n    \n    # Calculate total number of treasures\n    for i in range(num_chambers):\n        for j in range(num_treasures):\n            total_treasures += grid[i][j]\n    \n    # If bag capacity is greater than or equal to total treasures, return 1\n    if bag_capacity >= total_treasures:\n        return 1\n    \n    # Calculate number of trips\n    trips = math.ceil(total_treasures / bag_capacity)\n    \n    return trips\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 164, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    new_s = \"\"\n    for char in s:\n        if char in cipher:\n            new_s += cipher[char]\n        else:\n            new_s += char\n    return new_s\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for char in input_str:\n        if char.lower() in vowels:\n            result.append(vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n        elif char.lower() in consonants:\n            result.append(consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        else:\n            result.append('!')\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(1, len(lst) + 1):\n            pyramid.append('#' * sum(lst[:i]))\n        return pyramid[::-1]\n\n    \"\"\"\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(1, len(lst) + 1):\n            pyramid.append('#' * sum(lst[:i]))\n        return pyramid[::-1]\n\n    \"\"\"\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n    \"\"\"\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 42\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n    create_pyramid(lst): given list of positive integers task create pyramid numbers every level represented by string equal length number characters in string equals sum positive integers level pyramid pyramid built from bottom up first element bottom level Return pyramid as list of strings If list empty return empty list Use character '#' represent numbers Examples create_pyramid([3, 2, 1]) == ['#', '##', '###'] create_pyramid([5, 4, 2]) == ['##', '####', '#####']_pyramid([]) == [] '''\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 160)\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    points = []\n    for num in sequence:\n        total_points = 0\n        while num > 1:\n            total_points += num // k\n            num = num // k\n        points.append(total_points)\n    return sorted(points, reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return None\n    mid = n // 2\n    for i in range(mid, n):\n        for j in range(mid, n):\n            if mat[i][j] == 'X':\n                return (i, j)\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices) - days):\n        for j in range(i + days, len(prices)):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(self, map, instructions):\n        # Initialize player's position\n        player_row = map.index('S')\n        player_col = map[player_row].index('S')\n        path = [(player_row, player_col)]\n        \n        # Process each instruction\n        for instruction in instructions:\n            if instruction == 'up':\n                if player_row > 0 and map[player_row-1][player_col] != 'X':\n                    player_row -= 1\n            elif instruction == 'down':\n                if player_row < len(map)-1 and map[player_row+1][player_col] != 'X':\n                    player_row += 1\n            elif instruction == 'left':\n                if player_col > 0 and map[player_row][player_col-1] != 'X':\n                    player_col -= 1\n            elif instruction == 'right':\n                if player_col < len(map[player_row])-1 and map[player_row][player_col+1] != 'X':\n                    player_col += 1\n            \n            # Check if player has reached the end\n            if map[player_row][player_col] == 'E':\n                break\n            \n            # Add current position to path\n            path.append((player_row, player_col))\n        \n        return path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 174, in <module>\n  File \"<string>\", line 172, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        for j in range(min(len(word_list[i]), len(word_list[i + 1]))):\n            if word_list[i][j] != word_list[i + 1][j]:\n                if alien_dictionary.index(word_list[i][j]) > alien_dictionary.index(word_list[i + 1][j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word_list[i]) > len(word_list[i + 1]):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\", \"Fire\"),\n        \"Taurus\": (\"April 20\", \"May 20\", \"Earth\"),\n        \"Gemini\": (\"June 21\", \"July 22\", \"Air\"),\n        \"Cancer\": (\"July 23\", \"August 22\", \"Water\"),\n        \"Leo\": (\"August 23\", \"September 22\", \"Fire\"),\n        \"Virgo\": (\"September 23\", \"October 22\", \"Earth\"),\n        \"Libra\": (\"October 23\", \"November 21\", \"Air\"),\n        \"Scorpio\": (\"November 22\", \"December 21\", \"Water\"),\n        \"Sagittarius\": (\"December 22\", \"January 19\", \"Fire\"),\n        \"Capricorn\": (\"January 20\", \"February 18\", \"Earth\"),\n        \"Aquarius\": (\"February 19\", \"March 20\", \"Air\"),\n        \"Pisces\": (\"March 21\", \"April 19\", \"Water\")\n    }\n    elements = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n    for birthday in birthdays:\n        for sign, (start, end, element) in zodiac_signs.items():\n            if start <= birthday <= end:\n                elements[element] += 1\n                break\n    return elements\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 167, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n###PATH:./python-projects-master/Python Projects/Project 1 - Madlibs Generator/madlibs.py\nfrom random import choice, randint\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    else:\n        return len(grid) + len(grid[0]) - 2 - coord[0] - coord[1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 137, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 24, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    rows, cols = len(arr), len(arr[0])\n    result = []\n    left, right, top, bottom = 0, cols - 1, 0, rows - 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(planets):\n        result = {}\n        for planet, data in planets.items():\n            if data[0] is not None and data[1] is not None:\n                result[planet] = round(data[0] / data[1], 2)\n        return result\n    return planet_population\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    ray = sorted(ray)\n    result = []\n    for alien in aliens:\n        if alien not in ray:\n            result.append(alien)\n        else:\n            if alien % 2 == 0:\n                result.append(alien)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in space_invaders\n    ray = sorted(ray)\nTypeError: 'int' object is not iterable\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_unique_combinations(s):\n        unique_combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                unique_combinations.add(int(s[i]) + int(s[j]))\n        return unique_combinations\n\n    return sum(get_unique_combinations(s1)) + sum(get_unique_combinations(s2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            continue\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * i + 'A' + ' ' * (2 * (n - i - 1)) + 'A' + ' ' * i\n        result.append(layer)\n    for i in range(n - 2, -1, -1):\n        layer = ' ' * i + alphabet[i] + ' ' * (2 * (n - i - 1)) + alphabet[i] + ' ' * i\n        result.append(layer)\n    return '\\n'.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            if message[i].isupper():\n                result += chr((ord(message[i]) - 65 + n_values[i % len(n_values)]) % 26 + 65)\n            else:\n                result += chr((ord(message[i]) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n        else:\n            result += message[i]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(spell.split(), key=len)) for spell in strings]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) == 0 or len(m[0]) == 0 or len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return sum1 - sum2\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    if not all(isinstance(name, str) and isinstance(continent, str) for name, continent in humans.items()):\n        return []\n    if not all(continent in [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"] for continent in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.isalpha() for name in humans.values()):\n        return []\n    if not all(name.isalpha() for name in humans.keys()):\n        return []\n    if not all(name.is", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 78\n    if not all(name.is\n    if not all(name.is\n                    ^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i\n        sequence.append(next_num)\n\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = round * music\n        for i in range(time):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
