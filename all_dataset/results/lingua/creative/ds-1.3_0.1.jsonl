{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            try:\n                weight = float(item)\n                if weight > 5:\n                    total_cost += 10.0\n                total_cost += weight * 1.5\n            except ValueError:\n                total_cost += item\n        else:\n            total_cost += item\n\n    if location == 'Local':\n        total_cost *= 1.0\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n\n    return \"{:.2f}\".format(round(total_cost, 2))\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    additional_shipping_cost_per_kg = 10.0\n    factor_local = 1.0\n    factor_national = 1.5\n    factor_international = 2.5\n\n    total_shipping_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_shipping_cost += base_shipping_cost + (item * additional_shipping_cost_per_kg)\n\n    if location == 'Local':\n        total_shipping_cost *= factor_local\n    elif location == 'National':\n        total_shipping_cost *= factor_national\n    elif location == 'International':\n        total_shipping_cost *= factor_international\n\n    return round(total_shipping_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    pass\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str, index: int, current_string: str, result: List[str]) -> None:\n        if index == len(input_string):\n            result.append(current_string)\n            return\n        for i in range(index, len(input_string)):\n            get_combinations(input_string, i + 1, current_string + input_string[i], result)\n\n    result = []\n    get_combinations(input_string, 0, \"\", result)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if (row + col) % 2 == 0:  # moving right\n            if col == cols - 1:  # reached right end, move down\n                row += 1\n            elif row == 0:  # reached down end, move left\n                col -= 1\n            else:  # moving diagonally down-right\n                row += 1\n                col += 1\n        else:  # moving down\n            if row == rows - 1:  # reached down end, move left\n                col -= 1\n            elif col == 0:  # reached left end, move up\n                row -= 1\n            else:  # moving diagonally up-left\n                row -= 1\n                col -= 1\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for i in range(x-1, x+2):\n            for j in range(y-1, y+2):\n                if 0 <= i < len(grid) and 0 <= j < len(grid[0]):\n                    if grid[i][j] != 1:\n                        grid[i][j] = 0\n        return grid\n    elif grid[x][y] == -1:\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define starting point\n    x, y = 0, 0\n\n    # Define direction\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Define code sequence\n    code_sequence = [(x + dx, y + dy) for dx, dy in directions]\n\n    # Check if sequence leads back to starting point\n    if (x, y) in code_sequence:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    canvas_list = list(canvas)\n    for i, char in enumerate(canvas_list):\n        if char == 'P':\n            if i > 0 and canvas_list[i-1] == '-' and i < len(canvas_list)-1 and canvas_list[i+1] == '-':\n                canvas_list[i] = '*'\n            elif i > 0 and canvas_list[i-1] == '-' and canvas_list[i+1] == '-':\n                canvas_list[i] = '*'\n            elif i < len(canvas_list)-1 and canvas_list[i+1] == '-':\n                canvas_list[i] = '*'\n        elif char == '-':\n            if i > 0 and canvas_list[i-1] == 'P' and i < len(canvas_list)-1 and canvas_list[i+1] == 'P':\n                canvas_list[i] = '*'\n            elif i > 0 and canvas_list[i-1] == 'P' and canvas_list[i+1] == 'P':\n                canvas_list[i] = '*'\n            elif i < len(canvas_list)-1 and canvas_list[i+1] == 'P':\n                canvas_list[i] = '*'\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_sounds = animal_string.split()\n    count = {animal: 0 for animal in animals.keys()}\n\n    for sound in animal_sounds:\n        animal, sound_count = sound[0], int(sound[2:])\n        if animal in animals and count[animal] < sound_count:\n            count[animal] = sound_count\n\n    return [count[animal] for animal in animals.keys()]\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    c = Counter(flux_values)\n    max_occurrence = max(c.values())\n    sum_of_elements = sum(k * v for k, v in c.items())\n    return sum_of_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Count the occurrences of each card\n    card_counts = {}\n    for card in hand:\n        if card[0] in card_counts:\n            card_counts[card[0]] += 1\n        else:\n            card_counts[card[0]] = 1\n\n    # Sort the card counts\n    sorted_card_counts = sorted(card_counts.items(), key=lambda x: x[1], reverse=True)\n\n    # Evaluate the hand\n    if len(sorted_card_counts) == 1:\n        return int(sorted_card_counts[0][0])\n    elif len(sorted_card_counts) == 2:\n        if sorted_card_counts[0][1] == 2 or sorted_card_counts[1][1] == 2:\n            return sorted_card_counts[0][1] * 2\n        else:\n            return sorted_card_counts[0][1] + sorted_card_counts[1][1]\n    elif len(sorted_card_counts) == 3:\n        if sorted_card_counts[0][1] == 3 or sorted_card_counts[1][1] == 3 or sorted_card_counts[2][1] == 3:\n            return sorted_card_counts[0][1] * 2\n        else:\n            return sorted_card_counts[0][1] + sorted_card_counts[1][1] + sorted_card_counts[2][1]\n    elif len(sorted_card_counts) == 4:\n        if sorted_card_counts[0][1] == 4 or sorted_card_counts[1][1] == 4 or sorted_card_counts[2][1] == 4 or sorted_card_counts[3][1] == 4:\n            return sorted_card_counts[0][1] * 2\n        else:\n            return sorted_card_counts[0][1] + sorted_card_counts[1][1] + sorted_card_counts[2][1] + sorted_card_counts[3][1]\n    else"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return sum(fib_list)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    i = 1\n    while True:\n        number = n * i\n        if sum_of_digits(number) == 7:\n            return number\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    def count_vampires(row):\n        return sum(1 for i in range(len(row)) if row[i] == 2)\n\n    vampire_count = sum(count_vampires(row) for row in m)\n\n    transposed = list(map(list, zip(*m)))\n    vampire_count += sum(count_vampires(row) for row in transposed)\n\n    return vampire_count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(','.join(map(str, range(1, i + 1))))\n        result.append(','.join(map(str, range(i, 0, -1))))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = list(map(list, zip(*grid)))\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v * light_years_per_year\n    return distance\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n\n    primes = [next_prime(i) for i in range(26)]\n    mapping = {chr(97 + i): chr(97 + primes[i]) for i in range(26)}\n\n    return ''.join(mapping.get(c, c) for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    pass\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\r\n    words = re.findall(r'\\b\\w+\\b', text)\r\n    word_count = words.count(word)\r\n    if word_count == 0:\r\n        return (0, \"\")\r\n    else:\r\n        sentences = re.split(r'[.!]', text)\r\n        max_sentence = max(sentences, key=lambda s: s.count(word))\r\n        return (word_count, max_sentence)\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jup"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    path = []\n    stack = [start]\n\n    while stack:\n        x, y = stack[-1]\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 0:\n                stack.append((nx, ny))\n                maze[nx][ny] = 1\n                path.append((dx, dy))\n                break\n        else:\n            stack.pop()\n            path.pop()\n\n    return [(directions[i][0] == 1 and 'down') or (directions[i][0] == -1 and 'up') or (directions[i][1] == 1 and 'right') or (directions[i][1] == -1 and 'left') for i in range(len(path))]\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25\n    else:\n        return (income - 45000) * 0.30\n\n    if deductions <= 1000:\n        return (income - deductions) * 0.01\n    elif deductions <= 2000:\n        return (income - deductions) * 0.02\n    else:\n        return (income - deductions) * 0.03\n\n    return taxable_income - deductions\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    return [s for s in substrings if is_palindrome(s)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_point in ((start[0]+1, start[1]), (start[0]-1, start[1]), (start[0], start[1]+1), (start[0], start[1]-1)):\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 1:\n                return dfs(maze, next_point, end, path)\n        return None\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    shuffled_playlist = []\n    for i in range(len(playlist)):\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[random.randint(0, i)])\n        else:\n            shuffled_playlist.append(playlist[i])\n    return shuffled_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0]*(n+1)\n    dp[0] = 1\n    for stone in magic_stones:\n        for i in range(stone, n+1):\n            dp[i] += dp[i-stone]\n    return dp[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    if n == 1:\n        return [0]\n    else:\n        result = [0] * n\n        result[m - 1] = 100\n        for i in range(m, n):\n            result[i] = result[i - 1] + 10 if i % m == 0 else result[i - 1] - 10 if i % m != 0 else result[i - 1]\n        return result\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if len(email) < 1:\n        return False\n    at_count = email.count(\"@\")\n    if at_count != 1:\n        return False\n    dot_count = email.count(\".\")\n    if dot_count < 2:\n        return False\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(xs) == 0:\n        return [0]\n    result = [0]\n    for i in range(1, len(xs)):\n        result.append(xs[i] / (i + 1))\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            new_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n        elif char.lower() in consonants:\n            new_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        elif char.isalpha():\n            new_s += char.lower().replace(char, char.upper() if char.islower() else char.lower())\n        else:\n            new_s += char\n    return new_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    def ascii_art(n, s):\n        return \"\\n\".join(\"*\" + \"\".join(c for c in s) + \"*\" for _ in range(n)) + \"\\n\"\n\n    return ascii_art(n, s)\n"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the potions by their power level in descending order.\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n\n    # Then, we iterate over the sorted potions.\n    for potion in potions:\n        # If the current potion's power level is greater than or equal to the target, we return the potion.\n        if int(potion.split()[1]) >= target:\n            return [potion]\n\n    # If we have iterated over all the potions and haven't returned, it means we can't reach the target.\n    return []\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input):\n        legendary_item_found = False\n        legendary_item_rarity = -1\n        if len(player_input) > 0:\n            legendary_item_rarity = max(player_input)\n            if legendary_item_rarity == 5:\n                legendary_item_found = True\n        if legendary_item_found:\n            player_input.remove(legendary_item_rarity)\n            if len(player_input) > 0:\n                second_most_valuable_item_rarity = max(player_input)\n            else:\n                second_most_valuable_item_rarity = -1\n        return (legendary_item_found, second_most_valuable_item_rarity)\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n    elif distance / speed <= remaining_fuel:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    This function takes a list of weights and two integers as parameters. It calculates the total weight of all items in the list. If the total weight is less than or equal to the weight capacity of the unicorns or dragons, the function returns True. Otherwise, it returns False.\n\n    The function is tested with the given examples.\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w and total_weight <= e:\n            return True\n        else:\n            return False\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20)) # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10)) # False\n    print(fairy_tale_transport([1, 2, 3], 1, 5)) # True\n    print(fairy_tale_transport([5, 10, 15], 15, 15)) # True\n    \"\"\"\n    This function takes a list of weights and two integers as parameters. It calculates the total weight of all items in the list. If the total weight is less than or equal to the weight capacity of the unicorns or dragons, the function returns True. Otherwise, it returns False.\n\n    The function is tested with the given examples.\n    \"\"\"\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(1, len(arr)-1):\n        left_view = right_view = 0\n        for j in range(i):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view + 1)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = \"\"\n            for word in test_case:\n                if \"Take the cannoli.\" in word:\n                    secret_message += \"Take the cannoli.\"\n                else:\n                    secret_message += word[0]\n            secret_messages.append(secret_message)\n        return secret_messages\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n\nhidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']])\nhidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']])\nhidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']])\n\nThe function works by iterating over each test case, and for each test case, it iterates over each word. If the word is \"Take the cannoli.\", it adds \"Take the cannoli.\" to the secret message. Otherwise, it adds the first letter of the word to the secret message. The function then appends the secret message to the list of secret messages. Finally, it returns the list of secret messages.\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or quantity > available[ingredient]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log['item']\n            quantity = log['quantity']\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n        return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111'\n    }\n\n    def decode_morse(morse_code):\n        decoded_string = ''\n        for character in morse_code.split(' '):\n            for symbol in character:\n                if symbol == '1':\n                    decoded_string += '.'\n                else:\n                    decoded_string += '-'\n            decoded_string += ' '\n        return decoded_string\n\n    decoded_msg = ''\n    for character in msg.split('/'):\n        decoded_msg += ''.join(morse_code_dict[symbol] for symbol in character.split())\n    return decoded_msg\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    text = text.upper()\n    morse_code = \"\"\n    for char in text:\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += char + \" \"\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # sort the orders in descending order\n    orders.sort(reverse=True)\n\n    # initialize the number of batches to 0\n    batches = 0\n\n    # iterate over the orders\n    for order in orders:\n        # if the order is less than or equal to the oven's capacity, bake the order\n        if order <= n:\n            batches += 1\n            n -= order\n        # if the order is more than the oven's capacity, bake as much as possible\n        else:\n            batches += n // order\n            n -= n % order\n\n    # return the number of batches\n    return batches\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:])\n    result = s.translate(trans)\n    result = ''.join([char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(result)])\n    result = ''.join([char.replace('?', '!') if i % 2 == 1 else char.replace('!', '?') for i, char in enumerate(result)])\n    return result\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            return c\n\n    return ''.join(shift_char(c, sum(ord(c) - ord(shift_char(c, i)) for i in range(1, shift + 1))) for c in message)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    return '/ '.join(morse_code_dict[i.lower()] for i in s if i.lower() in morse_code_dict)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += spell[i % len(spell)]\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                new_word += '@'\n            elif char == 'z':\n                new_word += 'b'\n        if word[0] in vowels:\n            new_word = new_word.capitalize() + 'xy'\n        else:\n            new_word = new_word.capitalize() + 'yz'\n        trans_phrase += new_word + ' '\n    return trans_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return ingredient_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    result += chr(ord(s[i].lower()) + 1)\n                else:\n                    result += s[i].lower()\n            else:\n                result += s[i]\n        else:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    result += chr(ord(s[i].lower()) - 1)\n                else:\n                    result += s[i].lower()\n            else:\n                result += s[i]\n    return result\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\n        blocks = [p]\n        while p > 0:\n            if p % 2 == 0:\n                p -= 2\n            else:\n                p -= 3\n            blocks.append(p)\n        return blocks[::-1]\n\n    print(create_pyramid(10))\n    print(create_pyramid(9))\n\ncreate_pyramid(10)\ncreate_pyramid(9)\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    result = [n for n in range(start, end + 1) if is_prime(n) and is_divisible(n, divisor)]\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    def process_order(menu, order, remove=[], add=[]):\n        new_menu = {}\n        for dish, details in order.items():\n            if dish in menu:\n                new_ingredients = menu[dish]\n                if 'remove' in details:\n                    new_ingredients = [ingredient for ingredient in new_ingredients if ingredient not in details['remove']]\n                if 'add' in details:\n                    new_ingredients.extend(details['add'])\n                new_menu[dish] = new_ingredients\n        return new_menu\n\n    return process_order(menu, order, **order)\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"], \"add\": [\"Mushrooms\"]}, \"Pizza\": {\"add\": [\"Pepperoni\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sort(n):\n        return int(''.join(sorted(str(n))))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if digit_sort(primes[i]) == digit_sort(primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort(key=lambda x: (x[0], x[1]))\n\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr.insert(0, arr.pop())\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    return all(planet in planets[planet] for planet in path)\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiouAEIOU\"\n    encrypted_string = \"\"\n    vowel_count = 0\n\n    for char in s:\n        if char in vowels:\n            vowel_count += 1\n        if char.isalpha():\n            char_code = ord(char) + n\n            if char.isupper():\n                if char_code > ord('Z'):\n                    char_code -= 26\n            elif char.islower():\n                if char_code > ord('z'):\n                    char_code -= 26\n            encrypted_string += chr(char_code)\n        else:\n            encrypted_string += char\n\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{s}' known for telling {count} tales a day\")\n    return result\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[m][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 0:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1]\n        res = 0\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    res += dp[i][j]\n        return res\n\n    return math.ceil(count_trips(grid, bag_capacity) / bag_capacity)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    return ''.join([cipher.get(c, c) for c in s])\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    output_str = ''\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            output_str += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            output_str += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            output_str += str((int(input_str[i])+1)%10)\n        else:\n            output_str += input_str[i]\n    return output_str\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(max(lst)):\n            level = []\n            for num in lst:\n                if num - 1 <= i:\n                    level.append('#')\n                else:\n                    level.append(' ')\n            pyramid.append(''.join(level))\n        return pyramid\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(n, k):\n        points = 0\n        while n != 1:\n            n = n // k\n            points += 1\n        return points\n\n    sequence.sort(reverse=True)\n    result = []\n    for num in sequence:\n        result.append(calculate_points(num, k))\n    return result\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = n // 2\n    res = []\n    for i in range(m):\n        for j in range(m):\n            res.append(mat[i][j])\n            res.append(mat[i][n-1-j])\n            res.append(mat[n-1-i][n-1-j])\n            res.append(mat[n-1-i][j])\n    if n % 2 != 0:\n        mid = m\n        for j in range(mid):\n            res.append(mat[mid][j])\n            res.append(mat[mid][n-1-j])\n            res.append(mat[n-1-mid][n-1-j])\n            res.append(mat[n-1-mid][j])\n    return res\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            if prices[j] > prices[i]:\n                max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit if max_profit > 0 else 0\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n        start_row, start_column = 0, 0\n        moves = [(0, 1), (0, -1), (-1, 0), (1, 0)]  # right, left, up, down\n\n        for i, row in enumerate(map):\n            for j, cell in enumerate(row):\n                if cell == 'S':\n                    start_row, start_column = i, j\n\n        path = [(start_row, start_column)]\n        for move in instructions:\n            current_row, current_column = path[-1]\n            next_row, next_column = current_row + moves[0][0], current_column + moves[0][1]\n\n            if (next_row, next_column) in path:\n                path.append((current_row, current_column))\n                break\n            elif map[next_row][next_column] != 'X':\n                path.append((next_row, next_column))\n                moves.append(moves.pop(0))\n            else:\n                path.append((current_row, current_column))\n                break\n\n        if map[start_row][start_column] == 'E':\n            return path\n        else:\n            return [(start_row, start_column)]\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict_set = set(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        if word_list[i] > word_list[i + 1]:\n            return \"INCORRECT\"\n        if set(word_list[i]) > alien_dict_set:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_signs = {\n        \"Aquarius\": [\"2000-01-20\", \"2000-02-18\"],\n        \"Pisces\": [\"2000-03-21\", \"2000-04-19\"],\n        \"Aries\": [\"2001-04-20\", \"2001-05-20\"],\n        \"Taurus\": [\"2001-06-21\", \"2001-07-22\"],\n        \"Gemini\": [\"2001-08-23\", \"2001-09-22\"],\n        \"Cancer\": [\"2002-01-20\", \"2002-02-19\"],\n        \"Leo\": [\"2002-03-21\", \"2002-04-20\"],\n        \"Virgo\": [\"2002-05-21\", \"2002-06-20\"],\n        \"Libra\": [\"2002-07-23\", \"2002-08-22\"],\n        \"Scorpio\": [\"2002-09-22\", \"2003-01-20\"],\n        \"Sagittarius\": [\"2003-02-19\", \"2003-03-21\"],\n        \"Capricorn\": [\"2003-04-21\", \"2003-05-21\"],\n        \"Aquarius\": [\"2004-06-21\", \"2004-07-22\"],\n        \"Pisces\": [\"2004-08-23\", \"2004-09-22\"],\n        \"Aries\": [\"2005-10-23\", \"2005-11-22\"],\n        \"Taurus\": [\"2005-12-21\", \"2006-01-20\"],"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return\n            if not node.get('left') and not node.get('right'):\n                paths.append(path + [node.keys()[0]])\n            if node.get('left'):\n                dfs(node.get('left'), path + [node.keys()[0]])\n            if node.get('right'):\n                dfs(node.get('right'), path + [node.keys()[0]])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        start = (coord[0]*2, coord[1]*2)\n        end = (coord[0]*2+1, coord[1]*2+1)\n        queue = [(start, 0)]\n        visited = {start}\n        while queue:\n            current, step = queue.pop(0)\n            if current == end:\n                return step\n            for direction in [(0, 1), (1, 0)]:\n                next_point = (current[0]+direction[0], current[1]+direction[1])\n                if 0 <= next_point[0] < 2*coord[0]+1 and 0 <= next_point[1] < 2*coord[1]+1 and grid[next_point[0]//2][next_point[1]//2] == 0 and next_point not in visited:\n                    visited.add(next_point)\n                    queue.append((next_point, step+1))\n        return -1\n\n    return min_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral_coords(matrix):\n        if not matrix:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        res = []\n        dx, dy = [0, 1, 0, -1], [1, 0, -1, 0]\n        x, y, c = 0, -1, 0\n        for _ in range(rows * cols):\n            for i in range(4):\n                nx, ny = x + dx[i], y + dy[i]\n                if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] != ' ':\n                    res.append(matrix[nx][ny])\n                    matrix[nx][ny] = ' '\n                    x, y = nx, ny\n                    c += 1\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        return res\n\n    return ''.join(spiral_coords(arr))\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, data in dict_of_planets.items():\n            if data[0] is not None and data[1] is not None:\n                population_density = round(data[0] / data[1], 2)\n                result[planet] = population_density\n        return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_ray_gun_position(n, pos):\n        return n == pos or is_adjacent(n, pos) or (is_odd(n) and is_odd(pos))\n\n    return [n for n in aliens if not is_ray_gun_position(n, pos)]\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(c) for c in s]\n\n    def get_combinations(digits):\n        if len(digits) == 1:\n            return digits\n        else:\n            combinations = []\n            for i in range(len(digits)):\n                for c in get_combinations(digits[:i] + digits[i+1:]):\n                    combinations.append((digits[i], c))\n            return combinations\n\n    s1_digits = get_digits(s1)\n    s2_digits = get_digits(s2)\n    combinations = get_combinations(s1_digits + s2_digits)\n    product = 0\n    for d1, d2 in combinations:\n        product += d1 * d2\n    return product\n"}
{"task_id": "EvoEval/91", "completion": "\n    def validate_action(action, status):\n        if action == 'Launch' and status != 'On Ground':\n            return False\n        if action == 'Move' and status != 'In Space':\n            return False\n        if action == 'Land' and status != 'In Space':\n            return False\n        return True\n\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if not validate_action(action, status):\n            return 'Invalid Action Sequence'\n        if action == 'Launch':\n            status = 'In Space'\n        elif action == 'Move':\n            status = 'In Space'\n        else:\n            status = 'On Ground'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n - i - 1):\n            layer += ' '\n        for j in range(2 * i + 1):\n            layer += alphabet[25 - 2 * i]\n            if 2 * i + 1 + j < 2 * n - 1:\n                layer += alphabet[2 * i]\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n, values):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        if c.isupper():\n            new_c = new_c.upper()\n        return new_c\n\n    def shift_message(message, values):\n        return ''.join(shift_char(c, n, values) for c, n in zip(message, values))\n\n    def unshift_message(message, values):\n        return shift_message(message, -n for n in values)\n\n    if len(n_values) > len(message):\n        n_values = n_values[:len(message)]\n    elif len(n_values) < len(message):\n        n_values += n_values[:len(message) - len(n_values)]\n\n    return shift_message(message, n_values)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(matrix):\n        return all(len(row) == len(matrix) for row in matrix)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    primary_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    secondary_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not alien or not humans:\n            return []\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien_continent = None\n        alien_encounter = []\n        for human, continent in humans.items():\n            if alien in [x.lower() for x in human.split()]:\n                alien_continent = continent\n            else:\n                alien_encounter.append(human)\n        if alien_continent:\n            alien_encounter.append(alien_continent)\n        return sorted(alien_encounter)\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                eliminated = (j + 1) % len(players)\n                players.pop(eliminated)\n    return players\n\n"}
