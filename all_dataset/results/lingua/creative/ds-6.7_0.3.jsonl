{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    additional_charge = 10.0\n    weight_limit = 5.0\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n\n        if weight > weight_limit:\n            total_cost += base_cost * national_factor + additional_charge\n        else:\n            total_cost += base_cost * national_factor\n\n    if location == 'Local':\n        total_cost *= local_factor\n    elif location == 'International':\n        total_cost *= international_factor\n    else:\n        total_cost *= national_factor\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    local_factor = 1.0\n    national_factor = 1.5\n    international_factor = 2.5\n    weight_limit = 5.0\n    additional_charge = 10.0\n    total_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n\n        if weight > weight_limit:\n            total_cost += base_cost * weight * national_factor + additional_charge\n        else:\n            total_cost += base_cost * weight * national_factor\n\n    if location == 'Local':\n        total_cost *= local_factor\n    elif location == 'International':\n        total_cost *= international_factor\n    elif location == 'National':\n        pass\n    else:\n        raise ValueError(\"Invalid location\")\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def encrypt_word(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(c) for c in key)\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    return [encrypt_word(word, key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str, index: int) -> List[str]:\n        if index == len(s):\n            return ['']\n        res = []\n        for next_string in helper(s, index + 1):\n            res.append(next_string)\n            if index < len(s) - 1:\n                res.append(chr(int(s[index:index + 2]) + 96) + next_string)\n        return res\n    return [''.join(x) for x in helper(input_string, 0)]\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = max(candles)\n    return candles.count(max_candle)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    row = col = 0\n    going_down = True\n\n    while len(result) < rows * cols:\n        result.append(matrix[row][col])\n        if going_down:\n            if col > 0 and row < rows - 1:\n                col -= 1\n                row += 1\n            elif col == 0:\n                row += 1\n                going_down = False\n            elif row == rows - 1:\n                col += 1\n                going_down = False\n        else:\n            if col < cols - 1 and row > 0:\n                col += 1\n                row -= 1\n            elif col == cols - 1:\n                row -= 1\n                going_down = True\n            elif row == 0:\n                col += 1\n                going_down = True\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Your code here\n    x, y = position\n    rows, cols = len(grid), len(grid[0])\n    if not (0 <= x < rows and 0 <= y < cols):\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    mines = 0\n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 1:\n            mines += 1\n    if mines > 0:\n        grid[x][y] = mines\n    else:\n        grid[x][y] = 0\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0:\n                grid = minesweeper_clicked(grid, (nx, ny))\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into a list of characters\n    canvas_list = list(canvas)\n\n    # Find the index of the painter\n    painter_index = canvas_list.index('P')\n\n    # Check if there are more than one 'P'\n    if canvas_list.count('P') > 1:\n        return 'Invalid canvas'\n\n    # Check if the painter is at the end of the canvas\n    if painter_index == len(canvas_list) - 1:\n        return canvas\n\n    # Check if the painter is at the start of the canvas\n    if painter_index == 0:\n        return canvas\n\n    # Check if the painter is at the start or end of a wall\n    if canvas_list[painter_index - 1] == '#' or canvas_list[painter_index + 1] == '#':\n        return 'Invalid canvas'\n\n    # Check if the painter is at the start or end of an empty space\n    if canvas_list[painter_index - 1] == '-' or canvas_list[painter_index + 1] == '-':\n        # Paint the empty space with '*'\n        canvas_list[painter_index + 1] = '*'\n\n    # Join the list of characters back into a string\n    updated_canvas = ''.join(canvas_list)\n\n    return updated_canvas\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string as st\n    string = string.translate(str.maketrans('', '', st.punctuation)).lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_sounds = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    animal_counts = {animal: 0 for animal in animal_sounds.keys()}\r\n    animal_order = []\r\n    sound_index = 0\r\n\r\n    while len(animal_order) < 5:\r\n        for animal, sound in animal_sounds.items():\r\n            if animal_counts[animal] < 2 and sound_index < len(animal_string) and animal_string[sound_index] == '|':\r\n                animal_counts[animal] += 1\r\n                sound_index += 1\r\n                if animal_counts[animal] == 1:\r\n                    animal_order.append(animal)\r\n\r\n        sound_index += 1\r\n\r\n    return [animal_counts[animal] for animal in animal_order]\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    fruit_str = \" and \".join(fruits)\n    return f\"Oh {fruit_str} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    counter = Counter(flux_values)\n    max_count = max(counter.values())\n    most_common_numbers = [k for k, v in counter.items() if v == max_count]\n    min_number = min(most_common_numbers)\n    sum_elements = sum(flux_values)\n    return sum_elements * min_number\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    min_count = min(count_dict.values())\n    for key, value in count_dict.items():\n        if value == min_count:\n            return key\n    return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    name = name.lower()\n    alias = \"\"\n    for char in name:\n        if char in vowels:\n            index = vowels.index(char)\n            alias += vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            alias += consonants[(index+1)%21]\n        else:\n            alias += char\n    return alias.upper()\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [card[0] for card in hand]\n    value_counts = Counter(values)\n    score = 0\n    pair_count = 0\n    three_count = 0\n    four_count = 0\n    for count in value_counts.values():\n        if count == 2:\n            pair_count += 1\n        elif count == 3:\n            three_count += 1\n        elif count == 4:\n            four_count += 1\n    if 'A' in value_counts:\n        score += 1\n    if pair_count == 1:\n        score += 2\n    elif pair_count == 2:\n        score += 6\n    elif pair_count == 3:\n        score += 12\n    elif pair_count == 4:\n        score += 18\n    if three_count == 1:\n        score += 3\n    elif three_count == 2:\n        score += 9\n    if four_count == 1:\n        score += 4\n    elif four_count == 2:\n        score += 16\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    fib_nums = [0, 1]\n    for i in range(2, n):\n        fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n    return sum(fib_nums)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if isinstance(wizard, tuple):\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n        else:\n            return 'The dragon won!'\n    if dragon_hp > 0:\n        return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    else:\n        return 0\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = []\n    humans = []\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires.append((i, j))\n            elif m[i][j] == 1:\n                humans.append((i, j))\n\n    danger_humans = 0\n    for human in humans:\n        for vampire in vampires:\n            if human[0] == vampire[0] or human[1] == vampire[1]:\n                danger_humans += 1\n                break\n\n    return danger_humans\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(\",\".join(str(j) for j in range(1, i + 1)))\n    for i in range(n - 1, 0, -1):\n        result.append(\",\".join(str(j) for j in range(1, i)))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def check_word(word, grid, row, col, direction):\n        for i in range(len(word)):\n            if row < 0 or col < 0 or row >= len(grid) or col >= len(grid[0]):\n                return False\n            if grid[row][col] != word[i]:\n                return False\n            row, col = row + direction[0], col + direction[1]\n        return True\n\n    def find_word(word, grid):\n        for row in range(len(grid)):\n            for col in range(len(grid[0])):\n                if check_word(word, grid, row, col, (0, 1)) or \\\n                   check_word(word, grid, row, col, (1, 0)) or \\\n                   check_word(word, grid, row, col, (1, 1)) or \\\n                   check_word(word, grid, row, col, (1, -1)):\n                    return True\n        return False\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v * 9.461e12\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return ''.join(str(primes[ord(c) - ord('a')]) if 'a' <= c <= 'z' else c for c in s)\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '&',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n\n    alien_word = \"\"\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n\n    return alien_word\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    text = text.lower()\n    word = word.lower()\n    sentences = text.split('. ')\n    max_freq = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        freq = sentence.split().count(word)\n        if freq > max_freq:\n            max_freq = freq\n            max_sentence = sentence\n    if max_freq == 0:\n        return (0, \"\")\n    else:\n        return (max_freq, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # define the directions\n    directions = [\"up\", \"right\", \"down\", \"left\"]\n    # define the path\n    path = []\n    # define the start and end points\n    start_point = start\n    end_point = end\n    # if start and end are the same, return an empty list\n    if start_point == end_point:\n        return []\n    # if there is a wall at the start point, return an empty list\n    if maze[start_point[0]][start_point[1]] == 1:\n        return []\n    # if there is a wall at the end point, return an empty list\n    if maze[end_point[0]][end_point[1]] == 1:\n        return []\n    # define the function to find the path\n    def find_path(maze, start_point, end_point, path):\n        # if the start point is the end point, return the path\n        if start_point == end_point:\n            return path\n        # if there is a wall at the start point, return an empty list\n        if maze[start_point[0]][start_point[1]] == 1:\n            return []\n        # loop through the directions\n        for direction in directions:\n            # define the new start point\n            if direction == \"up\":\n                new_start_point = (start_point[0] - 1, start_point[1])\n            elif direction == \"right\":\n                new_start_point = (start_point[0], start_point[1] + 1)\n            elif direction == \"down\":\n                new_start_point = (start_point[0] + 1, start_point[1])\n            elif direction == \"left\":\n                new_start_point = (start_point[0], start_point[1] - 1)\n            # if the new start point is within the maze and is not a wall, add the direction to the path and call the function again with the new start point\n            if (0 <= new_start_point[0] < len(maze)) and (0 <= new_start_point[1] < len(maze[0])) and (maze[new_start_point["}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 0:\n        return 0.0\n    elif taxable_income <= 10000:\n        return 0.15 * taxable_income\n    elif taxable_income <= 25000:\n        return 1500 + 0.25 * (taxable_income - 10000)\n    elif taxable_income <= 45000:\n        return 6000 + 0.25 * (25000 - 10000) + 0.3 * (taxable_income - 25000)\n    elif taxable_income <= 130000:\n        return 11500 + 0.3 * (45000 - 25000) + 0.35 * (taxable_income - 45000)\n    else:\n        return 39000 + 0.35 * (130000 - 45000) + 0.4 * (taxable_income - 130000)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s):\n        return s == s[::-1]\n\n    n = len(s)\n    substrings = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the directions to move\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Define the queue for BFS\n    queue = [(start, [start])]\n\n    # Define the visited set\n    visited = set()\n\n    # BFS\n    while queue:\n        (x, y), path = queue.pop(0)\n        if (x, y) == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [(nx, ny)]))\n                visited.add((nx, ny))\n\n    # If no path found\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1]*n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    playlist_length = len(playlist)\n    new_playlist = playlist.copy()\n    for i in range(playlist_length):\n        if \"Rock\" not in new_playlist[i]:\n            swap_index = i + seed % playlist_length\n            if swap_index >= playlist_length:\n                swap_index -= playlist_length\n            new_playlist[i], new_playlist[swap_index] = new_playlist[swap_index], new_playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return new_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n    return dp[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    intense_day = m - 1\n    for i in range(n):\n        if i == intense_day:\n            transformation_percentages[i] = 100\n            intense_day += m\n        elif i > intense_day:\n            transformation_percentages[i] = transformation_percentages[i - 1] * 0.9\n        else:\n            transformation_percentages[i] = transformation_percentages[i - 1] * 1.1\n        if transformation_percentages[i] > 100:\n            transformation_percentages[i] = 100\n        elif transformation_percentages[i] < 0:\n            transformation_percentages[i] = 0\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" in email:\n        if \".\" in email[email.index(\"@\")+1:]:\n            if email[0] != \"@\" and email[-1] != \".\":\n                if email.count(\"@\") == 1:\n                    return True\n    return False\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    upper_vowels = \"AEIOU\"\n    upper_consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\n    transformed_s = \"\"\n    for char in s:\n        if char in vowels:\n            index = vowels.index(char)\n            transformed_s += vowels[(index+1)%5]\n        elif char in upper_vowels:\n            index = upper_vowels.index(char)\n            transformed_s += upper_vowels[(index+1)%5]\n        elif char in consonants:\n            index = consonants.index(char)\n            transformed_s += consonants[(index+1)%21]\n        elif char in upper_consonants:\n            index = upper_consonants.index(char)\n            transformed_s += upper_consonants[(index+1)%21]\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons_dict = {\":)\": \"\ud83d\ude0a\", \":(\": \"\u2639\ufe0f\", \":D\": \"\ud83d\ude00\", \";)\": \"\ud83d\ude09\"}\n    words = sentence.split()\n    result = \"\"\n    for word in words:\n        if word in emoticons_dict:\n            result += emoticons_dict[word] + \" \"\n        else:\n            result += word + \" \"\n    return result.strip()\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Convert string to list of characters\n    s = list(s)\n\n    # Create a list to store the ASCII art\n    art = []\n\n    # Create the top and bottom of the frame\n    frame_top_bottom = '*' + '*' * (n * len(s) + len(s) - 1) + '*'\n\n    # Add the top of the frame to the list\n    art.append(frame_top_bottom)\n\n    # Create the sides of the frame\n    for i in range(n):\n        frame_sides = '*' + s[i] * n + '*'\n        art.append(frame_sides)\n\n    # Add the bottom of the frame to the list\n    art.append(frame_top_bottom)\n\n    return art\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [(potion.split()[0], int(potion.split()[1])) for potion in potions]\n    potions.sort(key=lambda x: (x[1], x[0]))\n    result = []\n    for i in range(len(potions)):\n        if potions[i][1] > target:\n            continue\n        temp_target = target - potions[i][1]\n        temp_result = [potions[i][0]]\n        for j in range(i+1, len(potions)):\n            if potions[j][1] > temp_target:\n                continue\n            temp_target -= potions[j][1]\n            temp_result.append(potions[j][0])\n            if temp_target == 0:\n                if len(temp_result) < len(result) or (len(temp_result) == len(result) and temp_result < result):\n                    result = temp_result\n                break\n            elif temp_target < potions[j][1]:\n                break\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0] if arr[0][0] > 0 else 0\n    for i in range(m):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    # calculate the duration of the trip\n    duration = distance / speed\n\n    # calculate the total fuel consumption for the trip\n    total_fuel_consumption = duration * (spaceship_weight * planet_gravity * 0.1)\n\n    # check if the spaceship has enough fuel for the trip\n    if fuel < duration:\n        return 'Insufficient fuel'\n\n    # calculate the remaining fuel\n    remaining_fuel = fuel - total_fuel_consumption\n\n    # return the remaining fuel rounded to 2 decimal places\n    return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n"}
{"task_id": "EvoEval/45", "completion": "\n    n = len(arr)\n    max_hills = 0\n    left_max = [0]*n\n    right_max = [0]*n\n\n    left_max[0] = arr[0]\n    for i in range(1, n):\n        left_max[i] = max(left_max[i-1], arr[i])\n\n    right_max[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        right_max[i] = max(right_max[i+1], arr[i])\n\n    for i in range(1, n-1):\n        max_hills += min(left_max[i], right_max[i]) - arr[i]\n\n    return max_hills + 1  # add the highest hill itself\n\n"}
{"task_id": "EvoEval/46", "completion": "\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient in recipe:\n        if ingredient not in available or recipe[ingredient] > available[ingredient]:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        \"01\": \"A\",\n        \"1000\": \"B\",\n        \"1010\": \"C\",\n        \"100\": \"D\",\n        \"0\": \"E\",\n        \"0010\": \"F\",\n        \"110\": \"G\",\n        \"0000\": \"H\",\n        \"00\": \"I\",\n        \"0111\": \"J\",\n        \"101\": \"K\",\n        \"0100\": \"L\",\n        \"11\": \"M\",\n        \"10\": \"N\",\n        \"111\": \"O\",\n        \"0110\": \"P\",\n        \"1101\": \"Q\",\n        \"010\": \"R\",\n        \"000\": \"S\",\n        \"1\": \"T\",\n        \"001\": \"U\",\n        \"0001\": \"V\",\n        \"011\": \"W\",\n        \"1001\": \"X\",\n        \"1011\": \"Y\",\n        \"1100\": \"Z\",\n        \"01111\": \"1\",\n        \"00111\": \"2\",\n        \"00011\": \"3\",\n        \"00001\": \"4\",\n        \"00000\": \"5\",\n        \"10000\": \"6\",\n        \"11000\": \"7\",\n        \"11100\": \"8\",\n        \"11110\": \"9\",\n        \"11111\": \"0\"\n    }\n    words = msg.split(\"/\")\n    decoded_msg = \"\"\n    for word in words:\n        letters = word.split()\n        for letter in letters:\n            decoded_msg += morse_code[letter]\n        decoded_msg += \" \"\n    return decoded_msg.strip()\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' ', '1': '.----', '2': '..---', '3': '...--',\n        '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.',\n        '0': '-----', ',': '--..--', '.': '.-.-.-', '?': '..--..', ';': '-.-.-.',\n        '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...', '=': '-...-',\n        '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.', '$': '...-..-',\n        '@': '.--.-.', ')': '-.--.-', ' ': '/'\n    }\n    return ' '.join(morse_code[i.upper()] for i in text)\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return \"\"\n    result = \"\"\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.islower():\n                transformed_s += vowels[(vowels.index(char) + 1) % 5]\n            else:\n                transformed_s += vowels[(vowels.index(char.lower()) + 1) % 5].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                transformed_s += consonants[(consonants.index(char) + 1) % 21]\n            else:\n                transformed_s += consonants[(consonants.index(char.lower()) + 1) % 21].upper()\n        elif char == '?':\n            transformed_s += '!' if i % 2 == 0 else '?'\n        else:\n            transformed_s += char\n    return transformed_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_map = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_map.append((i, j))\n    return star_map\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    encrypted_message = ''\n    current_shift = shift\n\n    for char in message:\n        if char.isalpha():\n            alphabet_to_use = ALPHABET if char.isupper() else alphabet\n            encrypted_message += alphabet_to_use[(alphabet_to_use.index(char) + current_shift) % len(alphabet_to_use)]\n            current_shift = (current_shift + 1) % len(alphabet)\n        else:\n            encrypted_message += char\n\n    return encrypted_message\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..', ' ': '/'\n    }\n    return ' '.join(morse_code_dict[i] for i in s)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        i = 0\n        for letter in dish:\n            new_dish += magic_spell[i % len(magic_spell)]\n            i += 1\n        new_menu[new_dish] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alienspeak = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        for char in word:\n            if char in vowels:\n                index = vowels.index(char)\n                alienspeak += vowels[(index+1)%5]\n            elif char in consonants:\n                index = consonants.index(char)\n                alienspeak += consonants[(index+1)%26]\n            elif char == 'z':\n                alienspeak += 'b'\n            else:\n                alienspeak += char\n        alienspeak += '@'\n    alienspeak = alienspeak.lower()\n    alienspeak = alienspeak.split('@')\n    for i in range(len(alienspeak)):\n        alienspeak[i] = alienspeak[i][0].upper() + alienspeak[i][1:]\n        if alienspeak[i][0] in 'aeiou':\n            alienspeak[i] += 'xy'\n        else:\n            alienspeak[i] += 'yz'\n    return '@'.join(alienspeak)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredients = sorted(\n            ingredient_dict.items(),\n            key=lambda x: (-x[1], x[0])\n        )\n        return sorted_ingredients\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize variables\n    happy_ants = 0\n    sugar_locations = set(sugar_locations)\n    ant_positions = {pos: direction for pos, direction in ant_positions}\n\n    # March the ants\n    for i in range(1, path_length):\n        if i in ant_positions:\n            if i in sugar_locations:\n                happy_ants += 1\n            if ant_positions[i] == \"right\":\n                del ant_positions[i]\n            else:\n                del ant_positions[i-1]\n\n    return happy_ants\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_string = ''\n    for i in range(len(s)):\n        if s[i] == ' ':\n            transformed_string += ' '\n        elif i % 2 == 0:\n            transformed_string += s[i].swapcase()\n        else:\n            if s[i].lower() in vowels:\n                transformed_string += vowels[(vowels.index(s[i].lower())+1)%5]\n            else:\n                transformed_string += consonants[(consonants.index(s[i].lower())-1)%21]\n    return transformed_string\n"}
{"task_id": "EvoEval/62", "completion": "\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[:-1]\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    return [n for n in range(start, end + 1) if is_prime(n) and is_divisible(n, divisor)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    for food in order:\n        if \"remove\" in order[food]:\n            for ingredient in order[food][\"remove\"]:\n                if ingredient in menu[food]:\n                    menu[food].remove(ingredient)\n        if \"add\" in order[food]:\n            for ingredient in order[food][\"add\"]:\n                menu[food].append(ingment)\n    return menu\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return anagram_pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum(meal['calories'] for meal in meals[customer])\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    # Your code here\n    n = len(arr)\n    if n == 0:\n        return True\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i+1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiouAEIOU\"\n    encrypted = \"\"\n    count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted[-1] in vowels:\n                count += 1\n        else:\n            encrypted += char\n    return (encrypted, count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, word in enumerate(lst):\n        count = sum(c.isdigit() for c in word)\n        result.append(f\"Once upon time in kingdom far away, lived magical creature name '{word}' known for telling {count} tales a day.\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Initialize variables\n    trips = 0\n    rows = len(grid)\n    cols = len(grid[0])\n    chests = []\n\n    # Find all chests in the grid\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                chests.append((i, j))\n\n    # Sort the chests by their distance from the top of the pyramid\n    chests.sort(key=lambda x: x[0] + x[1])\n\n    # Collect the chests\n    for chest in chests:\n        # Calculate the number of trips needed to collect this chest\n        trips += math.ceil((chest[0] + chest[1]) / bag_capacity)\n\n    return trips\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    digits = \"0123456789\"\n    special_chars = \".,;: \"\n    transformed_str = \"\"\n\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            transformed_str += chr((ord(input_str[i]) - 97 + 1) % 26 + 97) if input_str[i].islower() else chr((ord(input_str[i]) - 65 + 1) % 26 + 65)\n        elif input_str[i] in consonants:\n            transformed_str += chr((ord(input_str[i]) - 97 + 1) % 26 + 97) if input_str[i].islower() else chr((ord(input_str[i]) - 65 + 1) % 26 + 65)\n        elif input_str[i] in digits:\n            transformed_str += str((int(input_str[i]) + 1) % 10)\n        elif input_str[i] in special_chars:\n            transformed_str += input_str[i]\n        elif input_str[i] == \"?\":\n            transformed_str += \"!\" if i % 2 == 0 else \"?\"\n        elif input_str[i] == \"!\":\n            transformed_str += \"?\" if i % 2 == 0 else \"!\"\n\n    return transformed_str\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in lst:\n            pyramid.append(i * '#')\n        return pyramid\n\n    print(create_pyramid([3, 2, 1]))  # ['#', '##', '###']\n    print(create_pyramid([5, 4, 2]))  # ['##', '####', '#####']\n    print(create_pyramid([]))  # []\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * len(sequence)\n    while True:\n        max_val = max(sequence)\n        if max_val < 1:\n            break\n        max_index = sequence.index(max_val)\n        points[max_index] += max_val // k\n        sequence[max_index] %= k\n    return points\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    res = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1 or i == n // 2 or j == n // 2:\n                res.append(mat[i][j])\n    return res\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    min_price = prices[0]\n\n    for i in range(1, days):\n        max_profit = max(max_profit, prices[i] - min_price)\n        min_price = min(min_price, prices[i])\n\n    return max_profit\n\n"}
{"task_id": "EvoEval/80", "completion": "\n"}
{"task_id": "EvoEval/81", "completion": "\n    alien_dict = {alien_dictionary[i]: chr(97 + i) for i in range(26)}\n    alien_sorted_list = sorted(word_list, key=lambda word: [alien_dict[c] for c in word])\n    return \"CORRECT\" if alien_sorted_list == word_list else \"INCORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    elements = {'Fire': 0, 'Water': 0, 'Air': 0, 'Earth': 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:10])\n        if (month == 3 and day >= 21 and day <= 41) or (month == 4 and day <= 19):\n            elements['Fire'] += 1\n        elif (month == 4 and day >= 20 and day <= 50) or (month == 5 and day <= 20):\n            elements['Earth'] += 1\n        elif (month == 5 and day >= 21 and day <= 70) or (month == 6 and day <= 21):\n            elements['Air'] += 1\n        elif (month == 6 and day >= 22 and day <= 82) or (month == 7 and day <= 22):\n            elements['Water'] += 1\n        elif (month == 7 and day >= 23 and day <= 92) or (month == 8 and day <= 22):\n            elements['Fire'] += 1\n        elif (month == 8 and day >= 23 and day <= 102) or (month == 9 and day <= 22):\n            elements['Earth'] += 1\n        elif (month == 9 and day >= 23 and day <= 112) or (month == 10 and day <= 21):\n            elements['Air'] += 1\n        elif (month == 10 and day >= 22 and day <= 121) or (month == 11 and day <= 21):\n            elements['Water'] += 1\n        elif (month == 11 and day >= 22 and day <= 122) or (month == 12 and day <= 19):\n            elements['Fire'] += 1\n        elif (month == 12 and day >= 20 and day <= 20) or (month == 1 and day <= 18):\n            elements['Earth'] += 1\n        elif (month == 1 and day >= 21 and day <= 31) or (month == 2 and day <= 18):\n            elements['Air'] += 1\n        else:\n            elements['Water'] += 1\n    return elements"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n"}
{"task_id": "EvoEval/85", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    dp = [[float('inf')]*cols for _ in range(rows)]\n    dp[0][0] = 0\n    for i in range(rows):\n        for j in range(cols):\n            if (i, j) != coord:\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i-1][j]+1)\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j-1]+1)\n            elif grid[i][j] == 1:\n                dp[i][j] = float('inf')\n    return dp[coord[0]-1][coord[1]-1] if dp[coord[0]-1][coord[1]-1] != float('inf') else -1\n\n"}
{"task_id": "EvoEval/86", "completion": "\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n\n    result = ''\n    while arr:\n        # top row\n        result += ''.join(arr.pop(0))\n        # right column\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        # bottom row\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        # left column\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    if ray in aliens:\n        aliens.remove(ray)\n    if ray - 1 in aliens:\n        aliens.remove(ray - 1)\n    if ray + 1 in aliens:\n        aliens.remove(ray + 1)\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    # convert the strings to lists of digits\n    digits1 = list(map(int, list(s1)))\n    digits2 = list(map(int, list(s2)))\n\n    # calculate the product\n    product = 0\n    for d1 in digits1:\n        for d2 in digits2:\n            product += d1 * d2\n\n    return product\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            pass\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        layer = alphabet[i%26] * (2*i+1)\n        fountain += layer.center(2*n-1) + '\\n'\n    return fountain.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n\n    # Initialize the result\n    result = ''\n\n    # Loop through the message\n    for i, char in enumerate(message):\n        # If the character is a letter\n        if char.isalpha():\n            # Determine the alphabet and upper/lower case\n            alphabet_to_use = alphabet if char.islower() else ALPHABET\n\n            # Calculate the new position\n            new_pos = (alphabet_to_use.index(char) + n_values[i % len(n_values)]) % 26\n\n            # Add the new character to the result\n            result += alphabet_to_use[new_pos]\n        else:\n            # Add the character to the result as is\n            result += char\n\n    return result\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [\n        \" \".join(sorted(spell.split(), key=len))\n        for spell in strings\n    ]\n"}
{"task_id": "EvoEval/95", "completion": "\n    # Check if matrix is square\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n\n    # Calculate sum of first diagonal\n    sum_diag1 = sum(m[i][i] for i in range(len(m)))\n\n    # Calculate sum of second diagonal\n    sum_diag2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    # Return absolute difference\n    return abs(sum_diag1 - sum_diag2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = -lst[i]\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n\n"}
{"task_id": "EvoEval/97", "completion": "\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    chairs = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        seconds = rounds[i]\n        music_pos = seconds * music\n        while music_pos >= len(chairs):\n            music_pos -= len(chairs)\n        chairs.pop(music_pos)\n    return chairs\n\n"}
