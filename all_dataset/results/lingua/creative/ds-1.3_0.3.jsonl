{"task_id": "EvoEval/0", "completion": "\n    base_shipping_cost = 5.0\n    local_shipping_cost_factor = 1.5\n    international_shipping_cost_factor = 2.5\n    additional_shipping_cost_per_kg = 10.0\n\n    total_shipping_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            try:\n                weight = float(item)\n                if weight > 5:\n                    total_shipping_cost += (weight - 5) * additional_shipping_cost_per_kg\n                else:\n                    total_shipping_cost += weight * base_shipping_cost\n            except ValueError:\n                print(f\"Invalid item weight: {item}\")\n        else:\n            total_shipping_cost += item * base_shipping_cost\n\n    if location == 'Local':\n        total_shipping_cost *= local_shipping_cost_factor\n    elif location == 'International':\n        total_shipping_cost *= international_shipping_cost_factor\n\n    return round(total_shipping_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    local_shipping_cost_factor = 1.5\n    international_shipping_cost_factor = 2.5\n    additional_shipping_cost_per_kg = 10.0\n\n    total_shipping_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n\n        if item > 5:\n            total_shipping_cost += additional_shipping_cost_per_kg\n        else:\n            total_shipping_cost += base_shipping_cost\n\n        if location == 'Local':\n            total_shipping_cost *= local_shipping_cost_factor\n        elif location == 'International':\n            total_shipping_cost *= international_shipping_cost_factor\n\n    return round(total_shipping_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(char: str) -> int:\n        return ord(char)\n\n    def int_to_char(num: int) -> str:\n        return chr(num)\n\n    def shift_char(char: str, key: int) -> str:\n        num = char_to_int(char)\n        return int_to_char((num - 97 + key) % 26 + 97)\n\n    def shift_word(word: str, key: int) -> str:\n        return \"\".join(shift_char(char, key) for char in word)\n\n    def shift_words(words: List[str], key: Union[str, int]) -> List[str]:\n        if isinstance(key, str):\n            key = sum(char_to_int(char) for char in key)\n        return [shift_word(word, key) for word in words]\n\n    return shift_words(words, key)\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str, index: int, current_string: str, result: List[str]) -> List[str]:\n        if index == len(input_string):\n            result.append(current_string)\n            return result\n        else:\n            current_char = input_string[index]\n            for i in range(1, int(current_char) + 1):\n                get_combinations(input_string, index + 1, current_string + chr(ord('a') + i - 1), result)\n            return result\n\n    return get_combinations(input_string, 0, \"\", [])\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_candle = candles[0]\n    count = 0\n    for candle in candles:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n\n        if row >= rows:\n            row = rows - 1\n            if col >= cols:\n                col = cols - 1\n                if cols % 2 == 0:\n                    col -= 1\n                else:\n                    row -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        if x > 0:\n            grid[x-1][y] = 0\n        if x < len(grid)-1:\n            grid[x+1][y] = 0\n        if y > 0:\n            grid[x][y-1] = 0\n        if y < len(grid[0])-1:\n            grid[x][y+1] = 0\n    elif grid[x][y] == -1:\n        return grid\n    else:\n        grid[x][y] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define the starting point\n    x, y = 0, 0\n\n    # Define the directions\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Define the sequence\n    sequence = [(0, 0), (1, 0), (0, 1), (1, 1), (0, 2), (1, 2), (0, 3), (1, 3)]\n\n    # Check the sequence\n    for i in code_sequence:\n        dx, dy = directions[i]\n        x, y = x + dx, y + dy\n        if (x, y) in sequence:\n            return 'Shangri-La found'\n\n    return 'Shangri-La not found'\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.replace('\\n', ' ')\n    string = string.replace('\\t', ' ')\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_list = []\n    animal_string_list = animal_string.split()\n    for animal_sound in animal_string_list:\n        if animal_sound[0] in animal_dict:\n            animal_dict[animal_sound[0]] += 1\n    for animal, count in animal_dict.items():\n        if count > 0:\n            animal_list.append(count)\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) > 2:\n        return f\"Oh {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {', '.join(fruits)} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count_dict = Counter(flux_values)\n    max_occurrence = max(list(count_dict.values()))\n    max_occurrence_elements = [k for k, v in count_dict.items() if v == max_occurrence]\n    sum_elements = sum(flux_values)\n    return sum_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n    count_dict = Counter(elems)\n    rarest_element = min(count_dict, key=count_dict.get)\n\n    return rarest_element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    def count_card_values(hand: list):\n        values = [int(card[0]) for card in hand]\n        return values\n\n    def count_card_pairs(hand: list):\n        pairs = [len(set(hand))]\n        return pairs\n\n    def count_card_triples(hand: list):\n        triples = [sum(hand.count(card)//2 for card in set(hand))]\n        return triples\n\n    def count_card_quadruples(hand: list):\n        quadruples = [sum(hand.count(card)//3 for card in set(hand))]\n        return quadruples\n\n    def count_card_fives(hand: list):\n        fives = [sum(hand.count(card)//4 for card in set(hand))]\n        return fives\n\n    def count_card_sixes(hand: list):\n        sixes = [sum(hand.count(card)//5 for card in set(hand))]\n        return sixes\n\n    def evaluate_hand(hand: list):\n        values = count_card_values(hand)\n        pairs = count_card_pairs(hand)\n        triples = count_card_triples(hand)\n        quadruples = count_card_quadruples(hand)\n        fives = count_card_fives(hand)\n        sixes = count_card_sixes(hand)\n\n        score = sum(values) + sum(pairs) + sum(triples) + sum(quadruples) + sum(fives) + sum(sixes)\n        return score\n\n    return evaluate_hand(hand)\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return sum(fib_list)\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if isinstance(wizard, tuple) and len(wizard) == 3:\n            name, magic_power, dragon_hp = wizard\n            dragon_hp -= magic_power\n            if dragon_hp <= 0:\n                return name\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    else:\n        return \"Invalid input\"\n"}
{"task_id": "EvoEval/19", "completion": "\n    def vampires(m):\n        vampires_count = 0\n        for i in range(len(m)):\n            for j in range(len(m[i])):\n                if m[i][j] == 2:\n                    vampires_count += 1\n        return vampires_count\n\n    def vampires_in_matrix(m):\n        vampires_count = 0\n        for i in range(len(m)):\n            for j in range(len(m[i])):\n                if m[i][j] == 2:\n                    vampires_count += 1\n                if j < len(m[i]) - 1 and m[i][j] == 1 and m[i][j+1] == 0:\n                    vampires_count += 1\n                if i < len(m) - 1 and m[i][j] == 1 and m[i+1][j] == 0:\n                    vampires_count += 1\n        return vampires_count\n\n    return vampires_in_matrix(m)\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    result = []\n    for i in range(n, 0, -1):\n        result.append(','.join(str(j) for j in range(i, 0, -1)))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    g = 6.67430e-11  # gravitational constant\n    c = 299792458.0  # speed of light in a vacuum\n    m = 5.972e24  # mass of earth\n    r = (g*m)/(c**2)  # radius of the galaxy\n    d = (r*t)/(v)  # distance traveled\n    return d\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    result = ''\n    for char in s:\n        if 'a' <= char <= 'z':\n            index = ord(char) - ord('a')\n            result += str(primes[index])\n        else:\n            result += char\n\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    pass\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\n    text = text.lower()\n    word = word.lower()\n    sentences = re.split('[.!]', text)\n    word_count = {}\n    max_count = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = re.findall(r'\\b\\w+\\b', sentence)\n        count = sum(1 for w in words if w == word)\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count[sentence] = count\n    return (word_count.get(max_sentence, 0), max_sentence)\n\n"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(pos):\n        row, col = pos\n        if row < 0 or col < 0 or row >= len(maze) or col >= len(maze[0]):\n            return False\n        if maze[row][col] == 1:\n            return False\n        return True\n\n    def get_neighbors(pos):\n        row, col = pos\n        return [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n\n    def dfs(maze, pos, end, path=[]):\n        row, col = pos\n        path.append(pos)\n        if pos == end:\n            return path\n        for neighbor in get_neighbors(pos):\n            if is_valid(neighbor):\n                yield from dfs(maze, neighbor, end, path)\n        path.pop()\n\n    if start == end:\n        return []\n    return list(dfs(maze, start, end))\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25\n    elif income > 130000:\n        return (income - 45000) * 0.30\n    else:\n        return (income - 130000) * 0.35\n\n    if deductions > 1000:\n        deductions_tax = deductions * 0.1\n    elif deductions > 2000:\n        deductions_tax = (deductions - 2000) * 0.02\n    elif deductions > 3000:\n        deductions_tax = (deductions - 3000) * 0.03\n    else:\n        deductions_tax = deductions * 0.01\n\n    taxable_income = income - deductions\n    tax = calculate_progressive_tax(taxable_income)\n    total_tax = tax + deductions_tax\n\n    return total_tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    def find_palindrome_substrings(s: str) -> list:\n        substrings = []\n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                substring = s[i:j]\n                if is_palindrome(substring):\n                    substrings.append(substring)\n        return sorted(list(set(substrings)))\n\n    return find_palindrome_substrings(s)\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_move in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            next_point = (start[0] + next_move[0], start[1] + next_move[1])\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 1:\n                maze[next_point[0]][next_point[1]] = 0\n                path = dfs(maze, next_point, end, path)\n                maze[next_point[0]][next_point[1]] = 1\n        return path\n\n    maze[start[0]][start[1]] = 0\n    result = dfs(maze, start, end)\n    maze[start[0]][start[1]] = 1\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    new_playlist = playlist.copy()\n    for i in range(len(playlist)):\n        if \"Rock\" not in playlist[i]:\n            j = seed % len(playlist)\n            playlist[i], playlist[j] = playlist[j], playlist[i]\n            seed = (seed * 16807) % 2147483647\n    return new_playlist\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # Initialize the base case: only one way to reach the top\n    ways[0] = 1\n    # Initialize a set to store the unique magic stones\n    magic_stones_set = set(magic_stones)\n\n    # Iterate over each step\n    for i in range(1, n + 1):\n        # Iterate over each magic stone\n        for stone in magic_stones:\n            # If the stone can jump i steps at once\n            if i % stone == 0:\n                # Add the number of ways to reach the step i-stone to the number of ways to reach the step i\n                ways[i] += ways[i - stone]\n        # If the stone can jump 2 steps at once, subtract the number of ways to reach the step i-2 from the number of ways to reach the step i\n        if stone == 2:\n            ways[i] -= ways[i - 2]\n\n    return ways[n]\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    if m > n or m < 1:\n        return \"Invalid input\"\n    transformation_percentages = [0]*n\n    for i in range(m-1, n):\n        if i == m-1:\n            transformation_percentages[i] = 10\n        else:\n            transformation_percentages[i] = transformation_percentages[i-1] + 10\n    return transformation_percentages\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    at_index = email.find(\"@\")\n    if at_index == 0 or at_index == len(email) - 1:\n        return False\n    dot_index = email.rfind(\".\")\n    if dot_index < at_index + 2 or dot_index == len(email) - 1:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def calculate_coefficients(input_coefficients, integral_coefficients):\n        result = [0] * len(input_coefficients)\n        for i in range(len(input_coefficients)):\n            result[i] = input_coefficients[i] / (i + 1)\n            if i < len(integral_coefficients):\n                result[i] += integral_coefficients[i]\n        return result\n\n    return calculate_coefficients(xs, [0] * len(xs))\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    trans = str.maketrans(vowels, 'eiouAEIOU' + vowels[1:] + vowels[:1])\n    s = s.translate(trans)\n    trans = str.maketrans(consonants, 'cdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ' + consonants[1:] + consonants[:1])\n    s = s.translate(trans)\n    return s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1 or not isinstance(n, int) or not isinstance(s, str):\n        return \"Invalid input\"\n\n    result = []\n    for i in range(n):\n        result.append(\"*\" + s + \"*\" * (n - 1))\n    return result\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < distance / speed:\n        return 'Insufficient fuel'\n    else:\n        fuel -= (distance / speed) * spaceship_weight * planet_gravity * 0.1\n        return round(fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n"}
{"task_id": "EvoEval/45", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            words = [word[0] for word in case]\n            message = ''.join(words).replace('?', '').replace('.', '').replace(' ', '')\n            result.append(message)\n        return result\n\n    print(hidden_message([['Hello, world!', 'okay?'] , ['Every', 'good', 'boy' ,'does' ,'fine']]))\n    print(hidden_message([['apple'] , ['Banana' ,'grape' ,'kiwi' ,'melon']]))\n    print(hidden_message([['This' ,'is' ,'?a' ,'test' ,'case??'] , ['hi']]))\n\nhidden_message([['Hello, world!' ,'okay?'] , ['Every' ,'good' ,'boy' ,'does' ,'fine']])\nhidden_message([['apple'] , ['Banana' ,'grape' ,'kiwi' ,'melon']])\nhidden_message([['This' ,'is' ,'?a' ,'test' ,'case??'] , ['hi']])\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log['item']\n            quantity = log['quantity']\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n        return {k: v for k, v in inventory.items() if v > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111',\n        'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1',\n        'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '0': '01111', '1': '00111', '2': '00011',\n        '3': '00001', '4': '10000', '5': '11000', '6': '11100', '7': '11110', '8': '11111', '9': '11111'\n    }\n\n    morse_code_reverse_dict = {v: k for k, v in morse_code_dict.items()}\n\n    def decode_morse(msg):\n        decoded_msg = ''\n        word = ''\n        for char in msg:\n            if char == ' ':\n                decoded_msg += ' '\n            else:\n                word += char\n                if word in morse_code_reverse_dict:\n                    decoded_msg += morse_code_reverse_dict[word]\n                    word = ''\n        return decoded_msg\n\n    return decode_morse(msg)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' ', '?': '..--..', ',' : '--..--', '.': '.-.-.-', '!' : '-.-.--', '-': '-....-', '(' : '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '/': '-..-.', '-.' : '-....-', '\"': '.-..-.', '$': '...-..-', '@': '.--.-.', ' ': ' ', 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '..."}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        for j in list_of_alphabets:\n            if string[i] == j:\n                result += j\n                break\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    def split_orders(orders, n):\n        batches = []\n        for i in range(0, len(orders), n):\n            batches.append(orders[i:i+n])\n        return batches\n\n    def combine_batches(batches):\n        combined = []\n        for batch in batches:\n            combined.extend(batch)\n        return combined\n\n    def max_orders(combined, m):\n        combined.sort()\n        return len(set([combined[i:i+m] for i in range(0, len(combined), m)]))\n\n    batches = split_orders(orders, n)\n    combined = combine_batches(batches)\n    return max_orders(combined, m)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_s = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i] == 'a':\n                trans_s += 'e'\n            elif s[i] == 'e':\n                trans_s += 'i'\n            elif s[i] == 'i':\n                trans_s += 'o'\n            elif s[i] == 'o':\n                trans_s += 'u'\n            elif s[i] == 'u':\n                trans_s += 'a'\n        elif s[i] in consonants:\n            if s[i] == 'y' or s[i] == 'Y':\n                trans_s += 'b'\n            else:\n                if i % 2 == 0:\n                    trans_s += chr(ord(s[i]) + 1)\n                else:\n                    trans_s += chr(ord(s[i]) - 1)\n        elif s[i] == ' ':\n            trans_s += ' '\n        else:\n            if i % 2 == 0:\n                trans_s += '!'\n            else:\n                trans_s += '?'\n    return trans_s\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def find_star(lst, star):\n        for i in range(len(lst)):\n            for j in range(len(lst[i])):\n                if lst[i][j] == star:\n                    return [(i, j)]\n        return []\n\n    result = []\n    for i in range(len(lst)):\n        result += find_star(lst[i], star)\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def caesar_cipher(text, shift):\n        result = \"\"\n        for char in text:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                cipher_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                result += cipher_char\n            else:\n                result += char\n        return result\n\n    def jumping_caesar_cipher(text, shift):\n        result = \"\"\n        for i in range(len(text)):\n            if i % 2 == 0:\n                result += caesar_cipher(text[i], shift)\n            else:\n                result += caesar_cipher(text[i], shift + 1)\n        return result\n\n    return jumping_caesar_cipher(message, shift)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    return ' '.join(morse_code_dict[i] for i in s.lower())\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        return dish + spell\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_menu[transform_dish(dish, magic_spell)] = price\n\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == 'z':\n                new_word += 'b'\n            elif char == ' ':\n                new_word += '@'\n        if word[0] in vowels:\n            new_word = new_word.capitalize() + 'xy'\n        else:\n            new_word = new_word.capitalize() + 'yz'\n        trans_phrase += new_word + ' '\n    return trans_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    result = []\n    for ingredient, count in sorted(ingredient_dict.items(), key=lambda item: (-item[1], item[0])):\n        result.append((ingredient, count))\n\n    return result\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Initialize happy_ants count\n    happy_ants_count = 0\n\n    # Iterate over sugar locations\n    for sugar_location in sugar_locations:\n        # Initialize sugar_location_count\n        sugar_location_count = 0\n\n        # Iterate over ant_positions\n        for ant_position in ant_positions:\n            # If ant's position is in sugar location, increment sugar_location_count\n            if ant_position[0] == sugar_location:\n                sugar_location_count += 1\n\n        # If sugar_location_count is greater than 0, increment happy_ants_count\n        if sugar_location_count > 0:\n            happy_ants_count += 1\n\n    # Return happy_ants_count\n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = vowels + vowels.upper()\n    consonants = consonants + consonants.upper()\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                result += vowels[vowels.index(s[i])+1]\n            elif s[i] in consonants:\n                result += consonants[consonants.index(s[i])-1]\n            else:\n                result += s[i]\n        else:\n            if s[i] in vowels:\n                result += vowels[vowels.index(s[i])-1]\n            elif s[i] in consonants:\n                result += consonants[consonants.index(s[i])+1]\n            else:\n                result += s[i]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n\n    def recipe_converter(recipe, conversion_factor):\n        new_recipe = {}\n        for ingredient, quantity in recipe.items():\n            new_recipe[ingredient] = quantity * conversion_factor\n        return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    def get_blocks(p):\n        if p <= 0:\n            return []\n        else:\n            if p % 2 == 0:\n                return [p] + get_blocks(p - 2)\n            else:\n                return [p] + get_blocks(p - 3)\n\n    return get_blocks(p)\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def magical_sequence_helper(start, end, divisor, seq):\n        if start > end:\n            return seq\n        if is_prime(start) and start % divisor == 0:\n            return magical_sequence_helper(start + 1, end, divisor, seq + [start])\n        else:\n            return magical_sequence_helper(start + 1, end, divisor, seq)\n\n    return magical_sequence_helper(start, end, divisor, [])\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    def update_ingredients(menu, order):\n        for food, details in order.items():\n            if food in menu:\n                if 'remove' in details:\n                    for ingredient in details['remove']:\n                        if ingredient in menu[food]:\n                            menu[food].remove(ingredient)\n                if 'add' in details:\n                    for ingredient in details['add']:\n                        menu[food].append(ingredient)\n        return menu\n\n    return update_ingredients(menu, order)\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"] , \"add\": [\"Mushrooms\"]} , \"Pizza\": {\"add\": [\"Pepperoni\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n):\n        return str(n) == str(n)[::-1]\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagrams = [(i, j) for i in primes for j in primes if is_anagram(i*10 + j) and i*10 + j in primes]\n    return sorted(anagrams, key=lambda x: (x[0], x[1]))\n"}
{"task_id": "EvoEval/67", "completion": "\n    def meal_calculator(customers, meals):\n        total_calories = {}\n        for customer in customers:\n            total = 0\n            if customer in meals:\n                for meal in meals[customer]:\n                    if meal in meals[customer][meal]:\n                        total += meals[customer][meal]['calories']\n            total_calories[customer] = total\n        return total_calories\n\n    print(meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice':'dish:'Pizza' 'calories 300}'dish'Burger' 'calories 500} 'Bob':'dish'Salad' 'calories 100} 'Charlie':'dish:'Fries' 'calories 200}'Burger' 'calories 500}'dish'Ice Cream' 'calories 250}])\n    print(meal_calculator(['Tom', 'Jerry'], {'Tom''dish:'Pizza' 'calories' 300}'Burger' 'calories 500} 'Jerry':'dish:'Fries' 'calories': 200}'Burger' 'calories 500}'dish'Ice Cream' 'calories 250}])\n\nmeal_calculator()\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    rotated = sorted(arr[1:] + arr[:1])\n    for i in range(len(arr)):\n        if arr == rotated:\n            return True\n        arr = arr[-1:] + arr[:-1]\n    return False\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_string = \"\"\n    count_vowels = 0\n\n    for char in s:\n        if char.lower() in vowels:\n            count_vowels += 1\n        if char.isalpha():\n            char_code = ord(char.lower()) + n\n            if char.isupper():\n                encrypted_string += chr(char_code % 26 + 65) if char_code <= 90 else chr(char_code % 26 + 97)\n            else:\n                encrypted_string += chr(char_code % 26 + 97).upper() if char_code <= 90 else chr(char_code % 26 + 65)\n        else:\n            encrypted_string += char\n\n    return (encrypted_string, count_vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once kingdom far away lived magical creature '{s}' known for telling {count} tales a day\")\n    return result\n\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        from collections import deque\n        m, n = len(grid), len(grid[0])\n        trips = 0\n        queue = deque()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    queue.append((i, j))\n                    grid[i][j] = 0\n                    while queue:\n                        x, y = queue.popleft()\n                        if x > 0 and grid[x-1][y] == 1:\n                            grid[x-1][y] = 0\n                            queue.append((x-1, y))\n                        if y > 0 and grid[x][y-1] == 1:\n                            grid[x][y-1] = 0\n                            queue.append((x, y-1))\n                        if x < m-1 and grid[x+1][y] == 1:\n                            grid[x+1][y] = 0\n                            queue.append((x+1, y))\n                        if y < n-1 and grid[x][y+1] == 1:\n                            grid[x][y+1] = 0\n                            queue.append((x, y+1))\n                        trips += 1\n        return trips if trips <= bag_capacity else 0\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    pass\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] == ' ':\n            result += ' '\n        else:\n            result += input_str[i]\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(max(lst)):\n            level = []\n            for num in lst:\n                if num > i:\n                    level.append('#' * (i + 1))\n                    num -= 1\n                else:\n                    level.append('#' * (num + 1))\n            pyramid.append(' '.join(level))\n        return pyramid\n\n    print(create_pyramid([3, 2, 1]))\n    print(create_pyramid([5, 4, 2]))\n    print(create_pyramid([]))\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_helper(sequence, k, result=[]):\n        if not sequence:\n            return result\n        else:\n            next_num = sequence[0] * k\n            result.append(next_num)\n            return magical_sequence_helper(sequence[1:], k, result)\n\n    return magical_sequence_helper(sorted(sequence, reverse=True), k)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    def find_pattern(mat):\n        if isinstance(mat, list):\n            for i, v in enumerate(mat):\n                if isinstance(v, list):\n                    for j, v2 in enumerate(v):\n                        if v2 == 'X':\n                            return (i, j)\n                elif v == 'X':\n                    return (i, j)\n        return None\n\n    print(find_pattern(mat))\n\n\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 'X', 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 'X'], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 'X', 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 'X']])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9, 'X']])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 'X', 11]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 'X', 12]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 'X', 13]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 'X', 14]])\nfind_pattern([[1,"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map_instructions):\n        # Initialize variables\n        start_row, start_column = 0, 0\n        end_row, end_column = 0, 0\n        path = []\n        directions = ['up', 'down', 'left', 'right']\n        map_ = [list(x) for x in map_instructions]\n        rows, columns = len(map_), len(map_[0])\n\n        # Find start and end points\n        for i in range(rows):\n            for j in range(columns):\n                if map_[i][j] == 'S':\n                    start_row, start_column = i, j\n                elif map_[i][j] == 'E':\n                    end_row, end_column = i, j\n\n        # Move player\n        for direction in map_instructions:\n            if direction in directions:\n                if direction == 'up' and start_row > 0:\n                    start_row -= 1\n                elif direction == 'down' and start_row < rows - 1:\n                    start_row += 1\n                elif direction == 'left' and start_column > 0:\n                    start_column -= 1\n                elif direction == 'right' and start_column < columns - 1:\n                    start_column += 1\n                path.append((start_row, start_column))\n\n                # Check for end\n                if (start_row, start_column) == (end_row, end_column):\n                    return path\n            else:\n                return \"Invalid direction\"\n\n        # If no move from start, return start position\n        return [(start_row, start_column)]\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n\n    sorted_word_list = sorted(word_list)\n    alien_word = ''.join(sorted_word_list)\n\n    for i in range(len(alien_word)):\n        if alien_word[i] not in alien_dictionary:\n            return \"INCORRECT\"\n\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aquarius\": [\"2000-01-20\", \"2000-02-18\", \"2000-03-21\", \"2000-04-19\"],\n        \"Pisces\": [\"2001-04-20\", \"2001-05-20\", \"2001-06-21\", \"2001-07-23\"],\n        \"Aries\": [\"2002-03-21\", \"2002-04-19\", \"2002-05-21\", \"2002-06-21\"],\n        \"Taurus\": [\"2003-04-20\", \"2003-05-20\", \"2003-06-21\", \"2003-07-23\"],\n        \"Gemini\": [\"2004-05-21\", \"2004-06-21\", \"2004-07-23\", \"2004-08-22\"],\n        \"Cancer\": [\"2005-06-21\", \"2005-07-23\", \"2005-08-22\", \"2005-09-22\"],\n        \"Leo\": [\"2006-07-23\", \"2006-08-22\", \"2006-09-22\", \"2006-10-22\"],\n        \"Virgo\": [\"2007-08-22\", \"2007-09-22\", \"2007-10-22\", \"2007-11-21\"],\n        \"Libra\": [\"2008-09-22\", \"2008-10-22\", \"2008-11-21\", \"2008-12-21\"],\n       "}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i, j = i + 1, j - 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if node is None:\n                return\n            if node is not None and node.get('value'):\n                paths.append(path + [node.get('value')])\n            for k, v in node.items():\n                if k == 'left':\n                    dfs(v, path + [node.get('value')])\n                elif k == 'right':\n                    dfs(v, path + [node.get('value')])\n\n        paths = []\n        dfs(tree, [])\n        return paths\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {}}}}\n    print(tree_traversal(tree))\n"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid, moves=0):\n        if coord[0] < 0 or coord[1] < 0 or coord[0] >= len(grid) or coord[1] >= len(grid[0]):\n            return -1\n        if grid[coord[0]][coord[1]] == 1:\n            return -1\n        if coord[0] == len(grid) - 1 and coord[1] == len(grid[0]) - 1:\n            return moves\n        return min(min_moves((coord[0]+1, coord[1]), grid, moves+1), min_moves((coord[0], coord[1]+1), grid, moves+1))\n\n    return min_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n\n    def sort_movies_by_ratings_and_release_date(movies_dict):\n        return sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n\n    movies_dict = {\"Toy Story\" [8.3, 1995] \"Toy Story 2\" [7.9, 1999] \"Toy Story 3\" [8.3, 2010] \"Toy Story 4\" [7.8, 2019]}\n    print(sort_movies_by_ratings_and_release_date(movies_dict))\n\n    # Output: [('Toy Story 3', [8.3, 2010]), ('Toy Story 4', [7.8, 2019]), ('Toy Story', [8.3, 1995]), ('Toy Story 2', [7.9, 1999])]\n\n    # The lambda function in the sorted function is used to specify the sorting order. The first element of the tuple is the rating, and the second element is the release year. The \"-\" before the rating and year means that the sorting is done in descending order.\n\n    # The sorted function returns a new sorted list from the items in the dictionary.\n\n    # The sorted function sorts the items in the dictionary by the ratings in descending order and then by the release years in descending order.\n\n    # The sorted function uses a key function to determine the sort order. The key function is a function that takes a single argument and returns a key to use for sorting purposes.\n\n    # The lambda function is a small anonymous function that takes a single argument and returns a tuple.\n\n    # The lambda function returns a tuple that contains the key for each movie. The key is a tuple that contains the rating and the release year.\n\n    # The \"-\" before the rating and year means that the sorting is done in descending order.\n\n    # The \"-\" before the rating and year means that the sorting is done in descending order.\n\n    # The \"-\" before the rating and year means that the sorting is done in desc"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral(arr):\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    return spiral(arr)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n"}
{"task_id": "EvoEval/89", "completion": "\n    def destroy_aliens(aliens, aimed_at):\n        return [alien for index, alien in enumerate(aliens) if index != aimed_at]\n\n    return destroy_aliens(aliens, ray)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        s = sorted(s)\n        result = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                result.append(int(s[i] + s[j]))\n                result.append(int(s[j] + s[i]))\n        return result\n\n    s1_combinations = get_combinations(s1)\n    s2_combinations = get_combinations(s2)\n\n    return sum(s1_combinations) * sum(s2_combinations)\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = \"On Ground\"\n    for action, distance in spaceship_data:\n        if action == \"Launch\":\n            if status == \"On Ground\":\n                status = \"In Space\"\n            else:\n                return \"Invalid Action Sequence\"\n        elif action == \"Move\":\n            if status == \"In Space\":\n                status = \"In Space\"\n            else:\n                return \"Invalid Action Sequence\"\n        elif action == \"Land\":\n            if status == \"In Space\":\n                status = \"On Ground\"\n            else:\n                return \"Invalid Action Sequence\"\n        else:\n            return \"Invalid Action Sequence\"\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = alphabet[i]\n        if i % 2 == 0:\n            layer = layer.center(2*n-1, ' ')\n        else:\n            layer = layer.center(2*n-1, ' ')\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n) for c, n in zip(message, n_values))\n\n    return shift_message(message, n_values)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_spell(spell):\n        return ' '.join(sorted(spell.split(), key=len))\n\n    return [sort_spell(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not isinstance(m, list) or not all(isinstance(i, list) for i in m):\n        return 'Invalid Matrix'\n    if not all(len(i) == len(m) for i in m):\n        return 'Invalid Matrix'\n    if not all(all(isinstance(j, int) for j in i) for i in m):\n        return 'Invalid Matrix'\n\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(diagonal1 - diagonal2)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        n = abs(n)\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        lst[i] = abs(lst[i])\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n\n    def alien_invasion(alien, humans):\n        if alien not in ['Predator', 'Klingon'] or humans is None or not isinstance(humans, dict):\n            return []\n\n        result = []\n        for human in sorted(humans):\n            if humans[human] == alien:\n                result.append(human)\n\n        return result\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def game_progress(players, rounds, music):\n        players_left = list(players)\n        for round in rounds:\n            for i in range(round):\n                if i < len(players_left):\n                    players_left.pop(i)\n            if players_left:\n                for i in range(music):\n                    if players_left:\n                        players_left = [x-i if x-i > 0 else 0 for x in players_left]\n        return players_left\n\n    return game_progress(n, rounds, music)\n"}
