{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 5.0 + 10.0\n        else:\n            total_cost += 5.0 + (item > 5.0) * 10.0\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    else:\n        pass\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        base_cost = 5.0\n        if weight > 5:\n            base_cost += 10.0\n        total_cost += base_cost\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        result = \"\"\n        for char in word:\n            if char.isalpha():\n                shift_amount = shift % 26\n                if char.islower():\n                    result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n                else:\n                    result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            else:\n                result += char\n        return result\n\n    if isinstance(key, str):\n        shift = sum(ord(char) for char in key)\n    else:\n        shift = key\n\n    return [caesar_cipher(word, shift) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def dfs(s: str, path: str):\n        if not s:\n            res.append(path)\n            return\n        if s[0] != '0':\n            dfs(s[1:], path + chr(int(s[0]) + ord('a') - 1))\n        if len(s) > 1 and int(s[:2]) <= 26 and s[0] != '0':\n            dfs(s[2:], path + chr(int(s[:2]) + ord('a') - 1))\n\n    res = []\n    dfs(input_string, '')\n    return res\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    lit_candles = 1\n    max_height = candles[0]\n    for candle in candles[1:]:\n        if candle > max_height:\n            lit_candles += 1\n            max_height = candle\n    return lit_candles\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == -1:\n        return grid\n    if grid[x][y] == 0:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if 0 <= x + i < len(grid) and 0 <= y + j < len(grid[0]) and grid[x + i][y + j] == 1:\n                    grid[x + i][y + j] = 0\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n        if x == 0 and y == 0:\n            return 'Shangri-La found'\n    return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    for animal in animal_string.split():\r\n        if animal[0] in animals and len(animal) > 1:\r\n            sound = animals[animal[0]]\r\n            count = animal.count(sound)\r\n            if count == 1:\r\n                sounds.append(count)\r\n                animal_count[animal[0]] = 1\r\n            elif count == 2 and animal[0] not in animal_count:\r\n                sounds.append(count)\r\n                animal_count[animal[0]] = 2\r\n        if len(sounds) == 5:\r\n            break\r\n    return sounds\r\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are {fruits[0]}, {fruits[1]} {fruits[2]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    max_occurrence_elements = [element for element, occurrence in count.items() if occurrence == max_occurrence]\n    smallest_max_occurrence_element = min(max_occurrence_elements)\n    sum_of_elements = sum(flux_values)\n    return smallest_max_occurrence_element * sum_of_elements\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    rarest_elem = min(counts, key=counts.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            if char.isupper():\n                alias = alias.upper()\n        else:\n            alias += char\n    return alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    from collections import Counter\n    values = [int(card[:-1]) for card in hand]\n    counter = Counter(values)\n    max_count = max(counter.values())\n    if max_count == 5:\n        return 52  # five of a kind\n    elif max_count == 4:\n        return sum(values) * 3  # four of a kind\n    elif max_count == 3:\n        return sum(values) * 2  # triple\n    elif max_count == 2:\n        return sum(values)  # pair\n    else:\n        return 0  # no pairs, triples or fours\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires += 1\n                for k in range(len(m[i])):\n                    if m[i][k] == 1 and k != j:\n                        m[i][k] = 0\n                for k in range(len(m)):\n                    if m[k][j] == 1 and k != i:\n                        m[k][j] = 0\n    return vampires\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(map(str, range(1, i + 1))))\n    for i in range(n - 1, 0, -1):\n        pattern.append(','.join(map(str, range(i, 0, -1))))\n    return pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_valid(word, row, col, dr, dc):\n        for i in range(len(word)):\n            if row + i * dr < 0 or row + i * dr >= len(grid) or col + i * dc < 0 or col + i * dc >= len(grid[0]) or grid[row + i * dr][col + i * dc] != word[i]:\n                return False\n        return True\n\n    for word in words:\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == word[0]:\n                    if is_valid(word, i, j, 0, 1) or is_valid(word, i, j, 1, 0) or is_valid(word, i, j, -1, 0) or is_valid(word, i, j, 0, -1):\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        else:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    return t * v * 9.461e-12\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 122, in <module>\n  File \"<string>\", line 120, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(primes[ord(char) - ord('a')])\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in prime_cipher\n            result += str(primes[ord(char) - ord('a')])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    alien_language_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_language_dict[letter]\n    return alien_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return (max_frequency, max_sentence.strip())\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = [(start, [])]\n    visited = set()\n    \n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0 and (nx, ny) not in visited:\n                queue.append(((nx, ny), path + [[\"right\", \"down\", \"left\", \"up\"][(dx, dy).index((0, 1))]]))\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 66, in <module>\n  File \"<string>\", line 64, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 35, in pathfinder\n                queue.append(((nx, ny), path + [[\"right\", \"down\", \"left\", \"up\"][(dx, dy).index((0, 1))]]))\nValueError: tuple.index(x): x not in tuple\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = max(0, income - deductions)\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.3\n        taxable_income = 130000\n    if taxable_income > 45000:\n        tax += (taxable_income - 45000) * 0.25\n        taxable_income = 45000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                substrings.add(substring)\n\n    return sorted(list(substrings))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 51, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 38, in _check_path\n        assert solution_path[0] == start\nTypeError: 'NoneType' object is not subscriptable\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_staircase(n - stone, magic_stones)\n    return count\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    transformation_percentages[m - 1] = 100\n    for i in range(m, n):\n        transformation_percentages[i] = transformation_percentages[i - 1] + 10\n    for i in range(m - 2, -1, -1):\n        transformation_percentages[i] = max(0, transformation_percentages[i + 1] - 10)\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    username, domain = email.split(\"@\")\n    if not username or not domain:\n        return False\n    if \".\" not in domain:\n        return False\n    if domain.count(\".\") < 2:\n        return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_sequence = 'eioua'\n    consonant_sequence = 'cdfghjklmnpqrstvwxyzb'\n    transformed_sentence = ''\n\n    for char in s:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            new_char = vowel_sequence[index]\n            transformed_sentence += new_char.upper() if char.isupper() else new_char\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            new_char = consonant_sequence[index]\n            transformed_sentence += new_char.upper() if char.isupper() else new_char\n        else:\n            transformed_sentence += char\n\n    return transformed_sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    result = []\n    for i in range(n):\n        row = \"*\"\n        for char in s:\n            row += char\n        row += \"*\"\n        result.append(row)\n    for i in range(n):\n        row = \"*\" * (n + len(s) + 1)\n        result.append(row)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # find the size of the array\n    rows, cols = len(arr), len(arr[0])\n    \n    # create a new array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * cols for _ in range(rows)]\n    \n    # set the minimum energy required to reach the safe cell to 0\n    min_energy[0][0] = 0\n    \n    # loop through the array and update the minimum energy required to reach each cell\n    for i in range(rows):\n        for j in range(cols):\n            # if the cell is not a safe cell, update the minimum energy required to reach it\n            if arr[i][j] != 0:\n                # update the minimum energy required to reach the cell to the minimum of the minimum energy required to reach the cell above and to the left plus the energy required to reach the cell\n                min_energy[i][j] = min(min_energy[i-1][j], min_energy[i][j-1]) + arr[i][j]\n    \n    # return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 164, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n\n    \"\"\"\n    def find_legendary_item(player_input):\n        if not player_input:\n            return False, None\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            legendary_items = [item for item in player_input if item == 5]\n            if len(legendary_items) > 1:\n                second_most_valuable_item = sorted(unique_rarities - {5})[-2]\n                return True, second_most_valuable_item\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input):\n        if not player_input:\n            return False, None\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            legendary_items = [item for item in player_input if item == 5]\n            if len(legendary_items) > 1:\n                second_most_valuable_item = sorted(unique_rarities - {5})[-2]\n                return True, second_most_valuable_item\n            else:\n                return True, -1\n        else:\n            return False, None\n    \"\"\"\n    \"\"\"\n    def find_legendary_item(player_input):\n        if not player_input:\n            return False, None\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 171)\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    trip_duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - trip_duration * fuel_consumption\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/44", "completion": "\ndef fairy_tale_transport(q,w,e):\n    total_weight = sum(q)\n    if total_weight <= w*len(q) or total_weight <= e*len(q):\n        return True\n    else:\n        return False\n    ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                left_view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                right_view += 1\n            else:\n                break\n        max_view = max(max_view, left_view + right_view)\n    return max_view + 1  # add 1 to include the hill itself as a view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\ndef hidden_message(test_cases):\n    result = []\n    for case in test_cases:\n        secret = \"\"\n        for word in case:\n            for char in word:\n                if char.isalpha():\n                    secret += char.lower()\n                    break\n        result.append(secret if secret else \"Take the cannoli.\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            if isinstance(log, dict):\n                item = log[\"item\"]\n                quantity = log[\"quantity\"]\n            else:\n                item, quantity = log.split(\": \")\n                quantity = int(quantity)\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n    \n    # Test cases\n    assert wizard_inventory([{ \"item\" : \"Dragon Scale\", \"quantity\" : 2}, { \"item\" : \"Phoenix Feather\", \"quantity\" : 1}, \"Dragon Scale\", \"quantity : -1}]) == {\"Dragon Scale\": 1, \"Phoenix Feather\": 1}\n    assert wizard_inventory([{ \"item\" : \"Mermaid Hair\", \"quantity\" : 5}, \"Mermaid Hair\", \"quantity : -5}]) == {}\n    assert wizard_inventory([]) == {}\n    print(\"All test cases passed.\")\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 45\n    assert wizard_inventory([{ \"item\" : \"Dragon Scale\", \"quantity\" : 2}, { \"item\" : \"Phoenix Feather\", \"quantity\" : 1}, \"Dragon Scale\", \"quantity : -1}]) == {\"Dragon Scale\": 1, \"Phoenix Feather\": 1}\n    assert wizard_inventory([{ \"item\" : \"Dragon Scale\", \"quantity\" : 2}, { \"item\" : \"Phoenix Feather\", \"quantity\" : 1}, \"Dragon Scale\", \"quantity : -1}]) == {\"Dragon Scale\": 1, \"Phoenix Feather\": 1}\n                                                                                                                                                                                                 ^\nSyntaxError: unterminated string literal (detected at line 45)\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    decoded_message = \"\"\n    word = \"\"\n    for char in msg:\n        if char == \" \":\n            decoded_message += morse_code_dict[word]\n            word = \"\"\n        elif char == \"/\":\n            decoded_message += morse_code_dict[word] + \" \"\n            word = \"\"\n        else:\n            word += char\n    decoded_message += morse_code_dict[word]\n    return decoded_message.upper()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 156, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 40, in morse_decoder\n            decoded_message += morse_code_dict[word] + \" \"\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    # Calculate the maximum number of orders that can be fulfilled in a day\n    max_orders = 0\n    for order in orders:\n        if order <= n:\n            max_orders += 1\n        elif order <= 2 * n:\n            max_orders += 2\n        else:\n            max_orders += 3\n    return min(max_orders, m)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.lower() == 'u':\n                transformed += 'a' if i % 2 == 0 else '!'\n            else:\n                transformed += vowels[vowels.index(char.lower()) + 1] if i % 2 == 0 else vowels[vowels.index(char.lower()) + 1].upper()\n        elif char.lower() in consonants:\n            if char.lower() == 'z':\n                transformed += 'b' if i % 2 == 0 else '!'\n            else:\n                transformed += consonants[consonants.index(char.lower()) + 1] if i % 2 == 0 else consonants[consonants.index(char.lower()) + 1].upper()\n        elif char == '?':\n            transformed += '!' if i % 2 == 0 else '?'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = (i % shift) + 1\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            new_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += new_char\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    morse_code = \"\"\n    for char in s:\n        if char != \" \":\n            morse_code += morse_code_dict[char] + \" \"\n        else:\n            morse_code += \"/ \"\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_dish = \"\"\n        for i in range(len(dish)):\n            new_dish += magic_spell[i % len(magic_spell)]\n        new_menu[new_dish] = price\n    return new_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                if letter == 'z':\n                    new_word += 'b'\n                else:\n                    new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n            else:\n                new_word += letter\n        if new_word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        translated_phrase += new_word.capitalize() + '@'\n    return translated_phrase[:-1]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    sugar_count = 0\n    for ant in ant_positions:\n        if ant[0] in sugar_locations:\n            sugar_count += 1\n            sugar_locations.remove(ant[0])\n    return sugar_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    vowel_index = (vowels.index(char.lower()) + 1) % len(vowels)\n                    result += vowels[vowel_index].upper() if char.isupper() else vowels[vowel_index]\n                else:\n                    consonant_index = (consonants.index(char.lower()) - 1) % len(consonants)\n                    result += consonants[consonant_index].upper() if char.isupper() else consonants[consonant_index]\n            else:\n                result += char\n        else:\n            result += char.swapcase()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while pyramid[-1] > 0:\n        if pyramid[-1] % 2 == 0:\n            pyramid.append(pyramid[-1] - 2)\n        else:\n            pyramid.append(pyramid[-1] - 3)\n    return pyramid[:-1]  # remove the last element which is 0 or negative\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [n for n in range(start, end + 1) if is_prime(n) and n % divisor == 0]\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    ingredients.append(ingredient)\n        final_order[food] = ingredients\n    return final_order\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    result = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                result.append((primes[i], primes[j]))\n\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    calories_consumed = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        calories_consumed[customer] = total_calories\n    return calories_consumed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    \n    # Find the index where the array is not in ascending order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            # Perform the rotation\n            arr = arr[i + 1:] + arr[:i + 1]\n            break\n    \n    # Check if the array is now sorted\n    return arr == sorted(arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not path:\n        return False\n    if path[0] not in planets:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets[path[i + 1]]:\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_s = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shift = n % 26\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n            encrypted_s += new_char\n            if new_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_s += char\n    return (encrypted_s, vowel_count)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    output = []\n    for i in lst:\n        count = sum(c.isdigit() for c in i)\n        output.append(f\"Once upon time, in kingdom far away, lived magical creature name '{i}' known for telling {count} tales a day\")\n    return output\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the number of rows and columns in the grid\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Initialize the number of trips to 0\n    trips = 0\n    \n    # Initialize the current position to the top-left corner of the grid\n    row = 0\n    col = 0\n    \n    # Initialize the number of treasures collected to 0\n    treasures_collected = 0\n    \n    # Initialize the number of treasures in the current chamber to 0\n    treasures_in_chamber = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the number of trips to collect treasures in the current chamber to 0\n    trips_to_collect = 0\n    \n    # Initialize the", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 196, in <module>\n  File \"<string>\", line 194, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join(cipher.get(c, c) for c in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.isalpha():\n            if char.lower() in vowels:\n                new_char = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                new_char = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            result += new_char.upper() if char.isupper() else new_char\n        elif char.isdigit():\n            new_char = str((int(char) + 1) % 10)\n            result += new_char\n        else:\n            result += char\n    return result[::-1] if i % 2 == 0 else result[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\ndef create_pyramid(lst):\n    if not lst:\n        return []\n    pyramid = []\n    for i in range(len(lst)):\n        pyramid.append('#' * sum(lst[:i+1]))\n    return pyramid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        if n == 1:\n            return 1\n        else:\n            return n // k + points(n // k, k)\n    \n    return sorted([points(num, k) for num in sequence], reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    if len(prices) == 0 or days == 0:\n        return 0\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[j] > prices[i]:\n                max_profit = max(max_profit, prices[j] - prices[i])\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        start = None\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start = (i, j)\n                    break\n            if start:\n                break\n        if not start:\n            return []\n        path = [start]\n        for instruction in instructions:\n            row, col = path[-1]\n            if instruction == 'up' and row > 0 and map[row-1][col] != 'X':\n                path.append((row-1, col))\n            elif instruction == 'down' and row < len(map)-1 and map[row+1][col] != 'X':\n                path.append((row+1, col))\n            elif", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 51\n            elif\n    elif\n        ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        \n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    \n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[5:7])\n        day = int(birthday[8:])\n        zodiac = zodiac_signs[birthday[0:4]]\n        if (month == 3 and day >= 21) or (month == 4 and day <= 19):\n            elements_count[\"Fire\"] += 1\n        elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n            elements_count[\"Earth\"] += 1\n        elif (month == 5 and day >= 21) or (month == 6 and day <= 20):\n            elements_count[\"Air\"] += 1\n        elif (month == 6 and day >= 21) or (month == 7 and day <= 22):\n            elements_count[\"Water\"] += 1\n        elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n            elements_count[\"Fire\"] += 1\n        elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n            elements_count[\"Earth\"] += 1\n        elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n            elements_count[\"Air\"] += 1\n        elif (month == 10 and day >= 23)", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 68\n        elif (month == 10 and day >= 23)\n    elif (month == 10 and day >= 23)\n                                    ^\nSyntaxError: expected ':'\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node.get('left') and not node.get('right'):\n            paths.append(path + [node['value']])\n        dfs(node.get('left'), path + [node['value']])\n        dfs(node.get('right'), path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in tree_traversal\n    dfs(tree, [])\n  File \"<string>\", line 29, in dfs\n            paths.append(path + [node['value']])\nKeyError: 'value'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    # Sort the movies based on ratings and release year\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    # Extract the movie names from the sorted list\n    sorted_movie_names = [movie[0] for movie in sorted_movies]\n    return sorted_movie_names\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 139, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 25, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 25, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if len(features) == 2 and features[0] is not None and features[1] is not None:\n                population, size = features\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n\n    # Test cases\n    assert planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}) == {'Earth': 466.67, 'Mars': 0.0}\n    assert planet_population({}) == {}\n    assert planet_population({\"Jupiter\": [None, 64000000]}) == {}\n    assert planet_population({\"Venus\": [500000000, None]}) == {}\n    print(\"All test cases passed.\")\n\nplanet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]})\nplanet_population({})\nplanet_population({\"Jupiter\": [None, 64000000]})\nplanet_population({\"Venus\": [500000000, None]})\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens = [i for i in aliens if i != ray]\n    aliens = [i for i in aliens if i != ray - 1]\n    aliens = [i for i in aliens if i != ray + 1]\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Convert strings to lists of digits\n    digits1 = list(s1)\n    digits2 = list(s2)\n    \n    # Initialize result\n    result = 0\n    \n    # Iterate over all unique combinations of digits\n    for i in range(len(digits1)):\n        for j in range(len(digits2)):\n            # Convert digits back to integers and multiply\n            product = int(digits1[i]) * int(digits2[j])\n            # Add product to result\n            result += product\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] * (2 * i + 1) + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_position = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_position]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    return [''.join(sorted(spell.split(), key=len)) for spell in strings]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        n = abs(n)\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n    \n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        \n        continents = [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]\n        encountered = []\n        \n        for continent in continents:\n            for human, home in humans.items():\n                if home == continent and alien in humans.values():\n                    encountered.append(human)\n        \n        return encountered\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    prime_sequence = ['prime' if is_prime(num) else num for num in sequence]\n    return prime_sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round_duration in rounds:\n        current_position = (current_position + round_duration * music) % n\n        players.pop(current_position)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in musical_chairs\n        players.pop(current_position)\nIndexError: pop index out of range\n", "passed": false}
