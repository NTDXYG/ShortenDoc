{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 5.0 * 1.5\n        else:\n            total_cost += 5.0\n            if item > 5.0:\n                total_cost += 10.0\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    return f\"{total_cost:.2f}\""}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        if weight > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    def sum_ascii_values(string: str) -> int:\n        return sum(ord(char) for char in string)\n\n    if isinstance(key, str):\n        key = sum_ascii_values(key)\n    encrypted_words = [caesar_cipher(word.lower(), key) for word in words]\n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(index, path):\n        if index == len(input_string):\n            combinations.append(path)\n            return\n        for i in range(index, len(input_string)):\n            num = int(input_string[index:i+1])\n            if num > 26:\n                break\n            backtrack(i+1, path + chr(ord('a') + num - 1))\n    \n    combinations = []\n    backtrack(0, \"\")\n    return combinations\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] == max_height:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for rightwards, -1 for downwards\n\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n\n            if (i == 0 or i == rows - 1) and (j == 0 or j == cols - 1):\n                continue\n\n            if direction == 1:\n                if j == cols - 1:\n                    i += 1\n                    direction = -1\n                elif i == 0:\n                    j += 1\n                    direction = -1\n                else:\n                    i -= 1\n                    j += 1\n            else:\n                if i == rows - 1:\n                    j += 1\n                    direction = 1\n                elif j == 0:\n                    i += 1\n                    direction = 1\n                else:\n                    i += 1\n                    j -= 1\n\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        grid[x][y] = -1\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == 1:\n                    continue\n                grid[i][j] = -1\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    if canvas.count('-') % 2 == 0:\n        return 'Invalid canvas'\n    canvas = list(canvas)\n    painter_index = canvas.index('P')\n    canvas[painter_index] = '*'\n    if canvas[painter_index - 1] == '-':\n        canvas[painter_index - 1] = '*'\n    if canvas[painter_index + 1] == '-':\n        canvas[painter_index + 1] = '*'\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    word_list = re.findall(r'\\b\\w+\\b', string.lower())\n    word_freq = {}\n    for word in word_list:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_count = 0\n    animal_list = []\n    animal_sound = ''\n    for char in animal_string:\n        if char == ' ':\n            if animal_sound in animal_dict and animal_dict[animal_sound] < 2:\n                animal_dict[animal_sound] += 1\n                animal_count += 1\n                animal_list.append(animal_dict[animal_sound])\n            animal_sound = ''\n        elif char == '|':\n            animal_sound += char\n        else:\n            continue\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    max_value = min([k for k, v in count.items() if v == max_count])\n    return sum(flux_values) * max_value\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index + 1].upper()\n                else:\n                    alias += vowels[index + 1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index + 1].upper()\n                else:\n                    alias += consonants[index + 1]\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [int(card[:-1]) if card[:-1].isdigit() else card[:-1] for card in hand]\n    values.sort()\n    pairs = [value for value in values if values.count(value) == 2]\n    triples = [value for value in values if values.count(value) == 3]\n    fours = [value for value in values if values.count(value) == 4]\n    fives = [value for value in values if values.count(value) == 5]\n    score = 0\n    if fives:\n        score = fives[0] * 4\n    elif fours:\n        score = fours[0] * 3\n    elif triples:\n        score = triples[0] * 2\n    elif pairs:\n        score = pairs[0]\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_seq = [0, 1]\n        for i in range(2, n):\n            fib_seq.append(fib_seq[i-1] + fib_seq[i-2])\n        return sum(fib_seq)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    elif n == 6:\n        return 610\n    elif n == 7:\n        return 719\n    elif n == 8:\n        return 818\n    elif n == 9:\n        return 917\n    elif n == 10:\n        return 1026\n    elif n == 11:\n        return 1135\n    elif n == 12:\n        return 1244\n    elif n == 13:\n        return 1353\n    elif n == 14:\n        return 1462\n    elif n == 15:\n        return 1571\n    elif n == 16:\n        return 1680\n    elif n == 17:\n        return 1789\n    elif n == 18:\n        return 1898\n    elif n == 19:\n        return 2007\n    elif n == 20:\n        return 2116\n    elif n == 21:\n        return 2225\n    elif n == 22:\n        return 2334\n    elif n == 23:\n        return 2443\n    elif n == 24:\n        return 2552\n    elif n == 25:\n        return 2661\n    elif n == 26:\n        return 2770\n    elif n == 27:\n        return 2879\n    elif n == 28:\n        return 2988\n    elif n == 29:\n        return 3097\n    elif n == 30:\n        return 3206\n    elif n == 31:\n        return 3315\n    elif n == 32:\n        return 3424\n    elif n == 33:\n        return 3533\n    elif n == 34:\n        return 3642\n    elif n == 35:\n        return 3751\n    elif n == 36:\n        return 3860\n    elif n == 37:\n        return 3969\n    elif n == 38:\n        return 4078\n    elif n == 39"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    # Convert time to seconds\n    t = t * 365 * 24 * 60 * 60\n    # Convert velocity to km/s\n    v = v * 1000\n    # Calculate distance traveled\n    distance = t * v\n    # Convert distance to light years\n    distance = distance / (9.461 * 10**12)\n    return distance\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def get_prime(n):\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773"}
{"task_id": "EvoEval/24", "completion": "\n    symbol_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&',\n        'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{',\n        'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    return ''.join(symbol_map[char] for char in english_word)\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    max_count = 0\n    for sentence in sentences:\n        count = sentence.lower().count(word.lower())\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count += count\n    return word_count, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    \n    # Check if start or end is out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    \n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    \n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    \n    # Perform breadth-first search\n    while queue:\n        (current, path) = queue.pop(0)\n        visited.add(current)\n        \n        # Check if we have reached the end\n        if current == end:\n            return path\n        \n        # Check the neighbors\n        for direction in ['up', 'down', 'left', 'right']:\n            next = move(current, direction)\n            \n            # Check if the next position is valid\n            if next[0] >= 0 and next[0] < len(maze) and next[1] >= 0 and next[1] < len(maze[0]) and maze[next[0]][next[1]] == 0 and next not in visited:\n                queue.append((next, path + [direction]))\n    \n    # If we have not found a path, return an empty list\n    return []"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 12500 + (taxable_income - 80000) * 0.3\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if is_palindrome(sub):\n                palindromes.add(sub)\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Create a queue for BFS\n    queue = []\n    # Mark the start node as visited and enqueue it\n    queue.append(start)\n    # Create a set to store visited nodes\n    visited = set()\n    visited.add(start)\n    # Create a dictionary to store the path\n    path = {}\n    path[start] = [start]\n    # Perform BFS\n    while queue:\n        # Dequeue a node from the queue\n        node = queue.pop(0)\n        # If the node is the end node, return the path\n        if node == end:\n            return path[node]\n        # Get the neighbors of the node\n        neighbors = get_neighbors(maze, node)\n        # Iterate over the neighbors\n        for neighbor in neighbors:\n            # If the neighbor has not been visited, mark it as visited and enqueue it\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n                # Update the path dictionary\n                path[neighbor] = path[node] + [neighbor]\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % playlist_length\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            playlist[i], playlist[seed % playlist_length] = playlist[seed % playlist_length], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # There is 1 way to reach the 0th step (starting point)\n    ways[0] = 1\n    # Iterate through each step\n    for i in range(1, n + 1):\n        # For each step, iterate through each magic stone\n        for stone in magic_stones:\n            # If the stone's power is less than or equal to the current step\n            if stone <= i:\n                # Add the number of ways to reach the previous step(s) to the current step\n                ways[i] += ways[i - stone]\n    # Return the number of ways to reach the nth step\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):]:\r\n        return False\r\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i, x in enumerate(xs):\n        integral_coefficients.append(x / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return ['*'*(len(s)*n+2)] + ['*' + s[i]*n + '*' for i in range(len(s))] + ['*'*(len(s)*n+2)]\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions.sort()\n    for i in range(len(potions)):\n        for j in range(i+1, len(potions)):\n            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) == target:\n                return [potions[i], potions[j]]\n    return []\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize a 2D array to store the minimum energy required to reach each cell\n    min_energy = [[float('inf')] * len(arr[0]) for _ in range(len(arr))]\n    min_energy[0][0] = arr[0][0]\n    \n    # Perform a breadth-first search to find the minimum energy required to reach the safe cell\n    queue = [(0, 0)]\n    while queue:\n        x, y = queue.pop(0)\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(arr) and 0 <= ny < len(arr[0]):\n                new_energy = min_energy[x][y] + arr[nx][ny]\n                if new_energy < min_energy[nx][ny]:\n                    min_energy[nx][ny] = new_energy\n                    queue.append((nx, ny))\n    \n    # Return the minimum energy required to reach the safe cell\n    return min_energy[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input): ''' In a popular multiplayer online game, players can acquire various items. Each item has a rarity value ranging from 1 (common) to 5 (legendary). In a single game, a player can acquire multiple items with the condition rarity of each item is unique. player_input is a list representing items acquired by player in single game, each item is represented by its rarity. Your task is to write a function that determines if player has acquired a legendary item (rarity 5) in the game. function should return True if a legendary item acquired and False otherwise., if a legendary item acquired, function should return the rarity of the second most valuable item player acquired. If player only acquired the legendary item, return -1. function should be able to handle player_input lists of any length. Examples: find_legendary_item([1, 2, 3, 4, 5]) == (True, 4) find_legendary_item([5]) == (True, -1) find_legendary_item([1, 3, 4]) == (False, None) find_legendary_item([]) == (False, None) '''\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            if len(set(player_input)) == len(player_input):\n                return (True, -1)\n            else:\n                return (True, max(set(player_input) - {5}))\n        else:\n            return (False, None)\n    \"\"\"\n    def find_legendary_item(player_input): ''' In a popular multiplayer online game, players can acquire various items. Each item has a rarity value ranging from 1 (common) to 5 (legendary). In a single game, a player can acquire multiple items with the condition rarity of each item is unique. player_input is a list representing items acquired by player in single game, each item is represented by its rarity. Your task is to write a function that determines if player has acquired a legendary item (rarity 5) in the game. function should return True if a legendary item acquired and False otherwise., if a legendary item acquired, function should return"}
{"task_id": "EvoEval/43", "completion": "\n    if distance / speed > fuel:\n        return 'Insufficient fuel'\n    else:\n        fuel_consumption = spaceship_weight * planet_gravity * 0.1\n        remaining_fuel = fuel - (distance / speed) * fuel_consumption\n        return round(remaining_fuel, 2)\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w"}
{"task_id": "EvoEval/45", "completion": "\n    # Initialize variables\n    max_view = 0\n    current_view = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current hill is taller than the previous hill\n        if i == 0 or arr[i] > arr[i-1]:\n            current_view += 1\n        else:\n            current_view = 1\n\n        # Update the maximum view if necessary\n        if current_view > max_view:\n            max_view = current_view\n\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            if secret_message == '':\n                secret_message = 'Take the cannoli.'\n            secret_messages.append(secret_message)\n        return secret_messages\n    return hidden_message(test_cases)\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'\n    }\n    msg = msg.replace('/', ' / ')\n    words = msg.split(' ')\n    decoded_words = []\n    for word in words:\n        if word == '':\n            continue\n        decoded_word = ''\n        for char in word.split(' '):\n            decoded_word += morse_code[char]\n        decoded_words.append(decoded_word)\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse_text = ''\n    for char in text:\n        morse_text += morse_code[char] + ' '\n    return morse_text.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[(ord(char) - ord('a')) % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    def can_bake(order, n):\n        return order % n == 0\n\n    def max_orders(orders, n, m):\n        count = 0\n        for order in orders:\n            if can_bake(order, n):\n                count += 1\n                if count == m:\n                    break\n        return count\n\n    return max_orders(orders, n, m)\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n        if i % 2 == 0 and char == '?':\n            transformed = transformed[:-1] + '!'\n        elif i % 2 == 1 and char == '!':\n            transformed = transformed[:-1] + '?'\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char == \" \":\n            morse_code += \" \"\n        elif char == \"/\":\n            morse_code += \"/\"\n        else:\n            morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for letter in dish:\n            new_name += magic_spell[(magic_spell.index(letter) + 1) % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_words = translated_phrase.split('@')\n    translated_words = [word.capitalize() for word in translated_words]\n    for i in range(len(translated_words)):\n        if translated_words[i][0] in vowels:\n            translated_words[i] += 'xy'\n        else:\n            translated_words[i] += 'yz'\n    return '@'.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_dict\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 0:\n                if c.lower() in vowels:\n                    result += vowels[(vowels.index(c.lower()) + 1) % len(vowels)]\n                else:\n                    result += consonants[(consonants.index(c.lower()) - 1) % len(consonants)]\n            else:\n                if c.lower() in vowels:\n                    result += vowels[(vowels.index(c.lower()) + 1) % len(vowels)].upper()\n                else:\n                    result += consonants[(consonants.index(c.lower()) - 1) % len(consonants)].upper()\n        else:\n            result += c\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in range(start, end + 1) if x % divisor == 0 and is_prime(x)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n    for food, customization in order.items():\n        if customization:\n            for action, ingredients in customization.items():\n                if action == \"remove\":\n                    for ingredient in ingredients:\n                        menu[food].remove(ingredient)\n                elif action == \"add\":\n                    for ingredient in ingredients:\n                        menu[food].append(ingredient)\n    return menu\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        rotated = arr[i:] + arr[:i]\n        if is_sorted(rotated):\n            return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        name = string\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{name}' known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    if not grid or not grid[0]:\n        return 0\n    m, n = len(grid), len(grid[0])\n    total_chests = sum(sum(row) for row in grid)\n    if total_chests <= bag_capacity:\n        return 2\n    trips = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                total_chests -= 1\n                trips += math.ceil(total_chests / bag_capacity)\n                if total_chests <= bag_capacity:\n                    return trips + 2\n    return trips + 2\n"}
{"task_id": "EvoEval/74", "completion": "\n    new_string = \"\"\n    for char in s:\n        if char in cipher:\n            new_string += cipher[char]\n        else:\n            new_string += char\n    return new_string\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            result.append(vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n        elif char.lower() in consonants:\n            result.append(consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        else:\n            result.append(char)\n        if char == '?' and i % 2 == 1:\n            result[-1] = '!'\n        elif char == '!' and i % 2 == 1:\n            result[-1] = '?'\n    return ''.join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    level = 0\n    for i in lst:\n        level += i\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n):\n        count = 0\n        while n > 1:\n            n //= k\n            count += 1\n        return count\n\n    return sorted(sequence, key=points, reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n-i-1])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, min(i + days + 1, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        # Initialize the starting position\n        row, col = 0, 0\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    row, col = i, j\n                    break\n            if map[i][j] == 'S':\n                break\n\n        # Initialize the path\n        path = [(row, col)]\n\n        # Process each instruction\n        for instruction in instructions:\n            if instruction == 'up':\n                if row > 0 and map[row-1][col] != 'X':\n                    row -= 1\n            elif instruction == 'down':\n                if row < len(map)-1 and map[row+1][col] != 'X':\n                    row += 1\n            elif instruction == 'left':\n                if col > 0 and map[row][col-1] != 'X':\n                    col -= 1\n            elif instruction == 'right':\n                if col < len(map[0])-1 and map[row][col+1] != 'X"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_order = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\"),\n        \"Taurus\": (\"April 20\", \"May 20\"),\n        \"Gemini\": (\"May 21\", \"June 20\"),\n        \"Cancer\": (\"June 21\", \"July 22\"),\n        \"Leo\": (\"July 23\", \"August 22\"),\n        \"Virgo\": (\"August 23\", \"September 22\"),\n        \"Libra\": (\"September 23\", \"October 22\"),\n        \"Scorpio\": (\"October 23\", \"November 21\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\"),\n        \"Capricorn\": (\"December 22\", \"January 19\"),\n        \"Aquarius\": (\"January 20\", \"February 18\"),\n        \"Pisces\": (\"February 19\", \"March 20\"),\n    }\n    elements = {\n        \"Fire\": [\"Aries\", \"Leo\", \"Sagittarius\", \"Capricorn\"],\n        \"Water\": [\"Cancer\", \"Scorpio\", \"Pisces\", \"Aquarius\"],\n        \"Air\": [\"Gemini\", \"Libra\", \"Sagittarius\", \"Capricorn\"],\n        \"Earth\": [\"Taurus\", \"Virgo\", \"Capricorn\", \"Aquarius\"],\n    }\n    result = {}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                for element, signs in elements.items():\n                    if sign in signs:\n                        result[element] = result.get(element, 0) + 1\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree): ''' In a land filled with magical trees, a spell cast shuffled all tree trunks, branches, leaves. Your task is to create a function that takes a binary tree as input returns list of all possible paths from root to leaves. tree represented as a nested dictionary. keys represent node values, values represent left and right branches as sub-dictionaries. function should return all possible paths in format of a list of lists. Each sublist should represent a path from root to leaf, containing all node values along path. Example: tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}} assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]] tree = {1: {2: {4: {7: {}}, 5: {8: {}}}, 3: {6: {}}}} assert tree_traversal(tree) == [[1, 2, 4, 7], [1, 2, 5, 8], [1, 3, 6]] Note: - binary tree will always have at least one node (the root). - values of nodes are always single digit numbers. - output paths should be sorted according to depth first search traversal. '''\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_traversal(tree): ''' In a land filled with magical trees, a spell cast shuffled all tree trunks, branches, leaves. Your task is to create a function that takes a binary tree as"}
{"task_id": "EvoEval/85", "completion": "\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    else:\n        return len(grid) + len(grid[0]) - 2 - coord[0] - coord[1]\n"}
{"task_id": "EvoEval/86", "completion": "\n    movies_list = list(movies_dict.items())\n    movies_list.sort(key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in movies_list]"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n    \"\"\"\n    def planet_population(dict_of_planets):\n        return {planet: round(population / size, 2) for planet, (population, size) in dict_of_planets.items() if population and size}\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    if ray in aliens:\n        aliens.remove(ray)\n    if ray - 1 in aliens:\n        aliens.remove(ray - 1)\n    if ray + 1 in aliens:\n        aliens.remove(ray + 1)\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n\t\n    def get_combinations(s):\n        combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.add(int(s[i]) * int(s[j]))\n        return combinations\n\n    return sum(get_combinations(s1)) * sum(get_combinations(s2))\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch' and status == 'On Ground':\n            status = 'In Space'\n        elif action == 'Move' and status == 'In Space':\n            continue\n        elif action == 'Land' and status == 'In Space':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * i + alphabet[i % 26] + ' ' * (2 * i) + alphabet[i % 26] + ' ' * i\n        result.append(layer.center(2 * n - 1))\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            n = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + n) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + n) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m)-i-1]\n    return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_num)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        for _ in range(round * music):\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n"}
