{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n            total_cost += 5.0 * 1.5\n        else:\n            weight = item\n            total_cost += 5.0\n        if weight > 5.0:\n            total_cost += 10.0\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        if weight > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == \"Local\":\n        total_cost *= 1.0\n    elif location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    else:\n        total_cost *= 1.0\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            result.append(input_string[i:j])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = candles[0]\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] > tallest:\n            tallest = candles[i]\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    for i in range(rows + cols - 1):\n        if i % 2 == 0:\n            row, col = min(i, rows - 1), max(0, i - rows + 1)\n            while row >= 0 and col < cols:\n                result.append(matrix[row][col])\n                row -= 1\n                col += 1\n        else:\n            row, col = max(0, i - cols + 1), min(i, cols - 1)\n            while col >= 0 and row < rows:\n                result.append(matrix[row][col])\n                row += 1\n                col -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n    if grid[position[0]][position[1]] == 1:\n        return grid\n    if grid[position[0]][position[1]] == 0:\n        grid[position[0]][position[1]] = -1\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if 0 <= position[0] + i < len(grid) and 0 <= position[1] + j < len(grid[0]):\n                    if grid[position[0] + i][position[1] + j] == 1:\n                        grid[position[0]][position[1]] = 0\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    if canvas.count('P') > 1:\n        return 'Invalid canvas'\n    if canvas.count('*') % 2 == 0:\n        return 'Invalid canvas'\n    canvas = list(canvas)\n    painter_index = canvas.index('P')\n    canvas[painter_index] = '*'\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    for direction in directions:\n        x, y = painter_index // len(canvas[0]), painter_index % len(canvas[0])\n        while 0 <= x < len(canvas) and 0 <= y < len(canvas[0]) and canvas[x * len(canvas[0]) + y] != '#':\n            x += direction[0]\n            y += direction[1]\n            if 0 <= x < len(canvas) and 0 <= y < len(canvas[0]) and canvas[x * len(canvas[0]) + y] == '-':\n                canvas[x * len(canvas[0]) + y] = '*'\n    return ''.join(canvas)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    import re\n    string = re.sub(r'[^\\w\\s]', '', string)\n    string = string.lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_list = []\n    animal_count = 0\n    for animal in animal_string.split():\n        if animal_count >= 5:\n            break\n        if animal[0] in animal_dict and animal_dict[animal[0]] < 2:\n            animal_dict[animal[0]] += 1\n            animal_list.append(len(animal) - 1)\n            animal_count += 1\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    max_element = min([k for k, v in count.items() if v == max_count])\n    return sum(flux_values) * max_element\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index + 1].upper()\n                else:\n                    alias += vowels[index + 1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index + 1].upper()\n                else:\n                    alias += consonants[index + 1]\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    hand = [int(card[:-1]) for card in hand]\n    hand.sort()\n    if hand.count(hand[0]) == 5:\n        return hand[0] * 4\n    elif hand.count(hand[0]) == 4:\n        return hand[0] * 3\n    elif hand.count(hand[0]) == 3 and hand.count(hand[3]) == 2:\n        return hand[0] * 2 + hand[3]\n    elif hand.count(hand[0]) == 3 and hand.count(hand[2]) == 2:\n        return hand[0] * 2 + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 3:\n        return hand[2] * 2\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 3:\n        return hand[3] * 2\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 3:\n        return hand[4] * 2\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 2:\n        return hand[0] + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 2:\n        return hand[0] + hand[3]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 2:\n        return hand[0] + hand[4]\n    else:\n        return 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return sum(fib)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    else:\n        return 0"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(str(i))\n    for i in range(n - 1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left(word, grid, i, j) or check_right(word, grid, i, j) or check_up(word, grid, i, j) or check_down(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left(word, grid, i, j):\n        if j - len(word) + 1 < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_up(word, grid, i, j):\n        if i - len(word) + 1 < 0:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    def check_down(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {\n        'a': '+',\n        'b': '-',\n        'c': '*',\n        'd': '/',\n        'e': '%',\n        'f': '@',\n        'g': '!',\n        'h': '#',\n        'i': '$',\n        'j': '^',\n        'k': '&',\n        'l': '(',\n        'm': ')',\n        'n': '=',\n        'o': '?',\n        'p': ':',\n        'q': ';',\n        'r': '`',\n        's': '~',\n        't': '>',\n        'u': '<',\n        'v': '{',\n        'w': '}',\n        'x': '[',\n        'y': ']',\n        'z': '|'\n    }\n    return ''.join(alien_dict[i] for i in english_word)\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        frequency = sentence.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    directions = []\n    queue = [(start[0], start[1])]\n    visited = set()\n    while queue:\n        x, y = queue.pop(0)\n        if (x, y) == end:\n            break\n        if (x, y) not in visited:\n            visited.add((x, y))\n            if x > 0 and maze[x-1][y] == 0:\n                queue.append((x-1, y))\n                directions.append(\"up\")\n            if x < len(maze)-1 and maze[x+1][y] == 0:\n                queue.append((x+1, y))\n                directions.append(\"down\")\n            if y > 0 and maze[x][y-1] == 0:\n                queue.append((x, y-1))\n                directions.append(\"left\")\n            if y < len(maze[0])-1 and maze[x][y+1] == 0:\n                queue.append((x, y+1))\n                directions.append(\"right\")\n    return directions\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 12500 + (taxable_income - 80000) * 0.3\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if is_palindrome(sub):\n                substrings.add(sub)\n    return sorted(list(substrings))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 0 or maze[end[0]][end[1]] == 0:\n        return []\n    # Check if start and end are the same\n    if start == end:\n        return [start]\n    # Initialize queue and visited set\n    queue = [(start, [start])]\n    visited = set()\n    visited.add(start)\n    # Perform breadth-first search\n    while queue:\n        current, path = queue.pop(0)\n        # Check if current is end\n        if current == end:\n            return path\n        # Check neighbors\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            neighbor = (current[0] + dx, current[1] + dy)\n            # Check if neighbor is valid and not visited\n            if 0 <= neighbor[0] < len(maze) and 0 <= neighbor[1] < len(maze[0]) and maze[neighbor[0]][neighbor[1]] == 1 and neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, path + [neighbor]))\n    # No path found\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    seed = seed % playlist_length\n    for i in range(playlist_length):\n        if \"Rock\" not in playlist[i]:\n            playlist[i], playlist[seed % playlist_length] = playlist[seed % playlist_length], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # create a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # there is 1 way to reach the 0th step (not stepping at all)\n    ways[0] = 1\n    # iterate over each step\n    for i in range(1, n + 1):\n        # iterate over each magic stone\n        for stone in magic_stones:\n            # if the stone's power is greater than the current step, skip it\n            if stone > i:\n                continue\n            # add the number of ways to reach the current step from the previous step\n            ways[i] += ways[i - stone]\n    # return the number of ways to reach the nth step\n    return ways[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email.count(\"@\") > 1:\r\n        return False\r\n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\",\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    return ['*'*(len(s)+2)] + ['*'+s[i]*n+'*' for i in range(len(s))] + ['*'*(len(s)+2)]\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions.sort()\n    target = int(target)\n    for i in range(len(potions)):\n        for j in range(i+1, len(potions)):\n            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) == target:\n                return [potions[i], potions[j]]\n            elif int(potions[i].split()[-1]) + int(potions[j].split()[-1]) < target:\n                for k in range(j+1, len(potions)):\n                    if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) == target:\n                        return [potions[i], potions[j], potions[k]]\n                    elif int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) < target:\n                        for l in range(k+1, len(potions)):\n                            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) + int(potions[l].split()[-1]) == target:\n                                return [potions[i], potions[j], potions[k], potions[l]]\n                            elif int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) + int(potions[l].split()[-1]) < target:\n                                for m in range(l+1, len(potions)):\n                                    if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) + int(potions[l].split()[-1]) + int(potions[m].split()[-1]) == target:\n                                        return [potions[i], potions[j], potions[k], potions[l], potions[m]]\n                                    elif int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split()[-1]) + int(potions[l].split()[-1]) + int(potions[m].split()[-1]) < target:\n                                        for n in range(m+1, len(potions)):\n                                            if int(potions[i].split()[-1]) + int(potions[j].split()[-1]) + int(potions[k].split"}
{"task_id": "EvoEval/41", "completion": "\n    m, n = len(arr), len(arr[0])\n    dp = [[float('inf')] * n for _ in range(m)]\n    dp[0][0] = arr[0][0]\n    for i in range(m):\n        for j in range(n):\n            if arr[i][j] == 0:\n                continue\n            if i > 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j] + arr[i][j])\n            if j > 0:\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + arr[i][j])\n    return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if len(player_input) == 0:\n                return True, -1\n            else:\n                return True, max(player_input)\n        else:\n            return False, None\n\n    print(find_legendary_item([1, 2, 3, 4, 5]))\n    print(find_legendary_item([5]))\n    print(find_legendary_item([1, 3, 4]))\n    print(find_legendary_item([]))\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if len(player_input) == 0:\n                return True, -1\n            else:\n                return True, max(player_input)\n        else:\n            return False, None\n\n    print(find_legendary_item([1, 2, 3, 4, 5]))\n    print(find_legendary_item([5]))\n    print(find_legendary_item([1, 3, 4]))\n    print(find_legendary_item([]))\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if len(player_input) == 0:\n                return True, -1\n            else:\n                return True, max(player_input)\n        else:\n            return False, None\n\n    print(find_legendary_item([1, 2, 3, 4, 5]))\n    print(find_legendary_item([5]))\n    print(find_legendary_item([1, 3, 4]))\n    print(find_legendary_item([]))\n    \"\"\"\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if len(player_input) == 0:\n                return True, -1\n            else:\n                return True,"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    duration_of_trip = distance / speed\n    if fuel >= duration_of_trip:\n        remaining_fuel = fuel - (fuel_consumption * duration_of_trip)\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total = 0\n        for i in q:\n            total += i\n        if total <= w + e + e:\n            return True\n        else:\n            return False\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        total"}
{"task_id": "EvoEval/45", "completion": "\n    if len(arr) == 0:\n        return 0\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        for k in range(i-1, -1, -1):\n            if arr[k] < arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view + 1\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        result = []\n        for test_case in test_cases:\n            secret_message = ''\n            for word in test_case:\n                if word[0].isalpha():\n                    secret_message += word[0].lower()\n            if secret_message in test_case:\n                result.append('Take the cannoli.')\n            else:\n                result.append(secret_message)\n        return result\n    return hidden_message\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        characters = word.split(' ')\n        decoded_characters = []\n        for character in characters:\n            if character in morse_code:\n                decoded_characters.append(morse_code[character])\n        decoded_words.append(''.join(decoded_characters))\n    return ' '.join(decoded_words)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse_text = ''\n    for char in text.upper():\n        morse_text += morse_code[char] + ' '\n    return morse_text.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        result += list_of_alphabets[(ord(char) - ord('a')) % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    total_orders = 0\n    for order in orders:\n        if order <= n:\n            total_orders += 1\n        else:\n            batches = order // n\n            if order % n != 0:\n                batches += 1\n            if batches <= m:\n                total_orders += 1\n    return total_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    # create empty string to store encrypted message\n    encrypted_message = ''\n    # create variable to store current shift\n    current_shift = shift\n    # loop through each character in message\n    for char in message:\n        # check if character is a letter\n        if char.isalpha():\n            # check if character is uppercase\n            if char.isupper():\n                # shift character by current shift\n                shifted_char = chr((ord(char) - 65 + current_shift) % 26 + 65)\n            # check if character is lowercase\n            elif char.islower():\n                # shift character by current shift\n                shifted_char = chr((ord(char) - 97 + current_shift) % 26 + 97)\n            # add shifted character to encrypted message\n            encrypted_message += shifted_char\n            # increase current shift by one\n            current_shift += 1\n        # check if character is not a letter\n        else:\n            # add character to encrypted message\n            encrypted_message += char\n    # return encrypted message\n    return encrypted_message\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += ' / '\n        elif char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for letter in dish:\n            new_name += magic_spell[(magic_spell.index(letter) + len(magic_spell)) % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_words = translated_phrase.split('@')\n    for i in range(len(translated_words)):\n        if translated_words[i][0] in vowels:\n            translated_words[i] += 'xy'\n        else:\n            translated_words[i] += 'yz'\n        translated_words[i] = translated_words[i].capitalize()\n    return '@'.join(translated_words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        return sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if char.isalpha():\n            if i % 2 == 0:\n                if char.lower() in vowels:\n                    result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                else:\n                    result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in range(start, end + 1) if x % divisor == 0 and is_prime(x)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    if ingredient not in ingredients:\n                        ingredients.append(ingredient)\n        final_order[food] = ingredients\n    return final_order\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr:\n        return True\n    for i in range(len(arr)):\n        rotated_arr = arr[i:] + arr[:i]\n        if rotated_arr == sorted_arr:\n            return True\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in planets:\n        if planet not in path:\n            return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time, in a kingdom far away, lived a magical creature name '{string}' known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n    # return the number of trips to collect all treasures\n   "}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return s\n    new_s = ''\n    for char in s:\n        if char in cipher:\n            new_s += cipher[char]\n        else:\n            new_s += char\n    return new_s\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            result.append(vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n        elif char.lower() in consonants:\n            result.append(consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        else:\n            result.append(char)\n    if i % 2 == 0:\n        result[i] = '!'\n    else:\n        result[i] = '?'\n    return ''.join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    lst.sort(reverse=True)\n    pyramid = []\n    level = 0\n    while lst:\n        level += 1\n        level_sum = sum(lst[:level])\n        level_str = '#' * level_sum\n        pyramid.append(level_str)\n        lst = lst[level:]\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    points = [0] * len(sequence)\n    for i, num in enumerate(sequence):\n        while num > 1:\n            points[i] += num // k\n            num //= k\n    return sorted(points, reverse=True)\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    if n % 2 == 0:\n        return []\n    mid = n // 2\n    pattern = []\n    for i in range(n):\n        for j in range(n):\n            if (i == 0 and j == 0) or (i == mid and j == mid) or (i == n - 1 and j == n - 1) or (i == 0 and j == n - 1) or (i == n - 1 and j == 0):\n                pattern.append(mat[i][j])\n    return pattern\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + days, len(prices)):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        # Initialize the starting position\n        row, col = 0, 0\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    row, col = i, j\n                    break\n            if map[row][col] == 'S':\n                break\n\n        # Initialize the path\n        path = [(row, col)]\n\n        # Process each instruction\n        for instruction in instructions:\n            if instruction == 'up':\n                if row > 0 and map[row-1][col] != 'X':\n                    row -= 1\n            elif instruction == 'down':\n                if row < len(map)-1 and map[row+1][col] != 'X':\n                    row += 1\n            elif instruction == 'left':\n                if col > 0 and map[row][col-1] != 'X':\n                    col -= 1\n            elif instruction == 'right':\n                if col < len(map[row])-1 and map[row][col+1] != 'X':\n                   "}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_order = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\"),\n        \"Taurus\": (\"April 20\", \"May 20\"),\n        \"Gemini\": (\"May 21\", \"June 20\"),\n        \"Cancer\": (\"June 21\", \"July 22\"),\n        \"Leo\": (\"July 23\", \"August 22\"),\n        \"Virgo\": (\"August 23\", \"September 22\"),\n        \"Libra\": (\"September 23\", \"October 22\"),\n        \"Scorpio\": (\"October 23\", \"November 21\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\"),\n        \"Capricorn\": (\"December 22\", \"January 19\"),\n        \"Aquarius\": (\"January 20\", \"February 18\"),\n        \"Pisces\": (\"February 19\", \"March 20\"),\n    }\n    zodiac_elements = {\n        \"Fire\": [\"Aries\", \"Leo\", \"Sagittarius\"],\n        \"Water\": [\"Cancer\", \"Scorpio\", \"Pisces\"],\n        \"Air\": [\"Gemini\", \"Libra\", \"Aquarius\"],\n        \"Earth\": [\"Taurus\", \"Virgo\", \"Capricorn\"],\n    }\n    result = {}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                for element, signs in zodiac_elements.items():\n                    if sign in signs:\n                        if element in result:\n                            result[element] += 1\n                        else:\n                            result[element] = 1\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree): ''' In land filled with magical trees spell cast shuffled tree trunks, branches leaves. task to create function takes binary tree as input returns list of possible paths from root to leaves. tree represented as nested dictionary. keys represent node values values represent left and right branches as sub-dictionaries. function should return possible paths in format list of lists. Each sublist represent path from root to leaf containing all node values path. Example: tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}} assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]] tree = {1: {2: {4: {7: {}}, 5: {8: {}}}, 3: {6: {}}}} assert tree_traversal(tree) == [[1, 2, 4, 7], [1, 2, 5, 8], [1, 3, 6]] Note: - binary tree always at least one node (the root). values of nodes are always single digit numbers. output paths sorted according to depth first search traversal.\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            else:\n                dfs(node.get('left'), path)\n                dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_traversal(tree): ''' In land filled with magical trees spell cast shuffled tree trunks, branches leaves. task to create function takes binary tree as input returns list of possible paths from root to leaves. tree represented as nested dictionary. keys represent node values values represent left and right branches as sub-dictionaries"}
{"task_id": "EvoEval/85", "completion": "\n    if grid[coord[0]][coord[1]] == 1:\n        return -1\n    else:\n        return len(grid) + len(grid[0]) - 2 - coord[0] - coord[1]\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n        new_dict = {}\n        for planet, data in dict_of_planets.items():\n            if data[0] and data[1]:\n                new_dict[planet] = round(data[0] / data[1], 2)\n        return new_dict\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}))\n    print(planet_population({}))\n    print(planet_population({\"Jupiter\": [None, 64000000]}))\n    print(planet_population({\"Venus\": [500000000, None]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Jupiter\": [None, 64000000], \"Venus\": [500000000, None]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Jupiter\": [None, 64000000], \"Venus\": [500000000, None], \"Mercury\": [0, 0]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Jupiter\": [None, 64000000], \"Venus\": [500000000, None], \"Mercury\": [0, 0], \"Saturn\": [None, None]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Jupiter\": [None, 64000000], \"Venus\": [500000000, None], \"Mercury\": [0, 0], \"Saturn\": [None, None], \"Uranus\": [0, 0], \"Neptune\": [0, 0]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Jupiter\": [None, 64000000], \"Venus\": [500000000, None], \"Mercury\": [0, 0], \"Saturn\": [None, None], \"Uranus\": [0,"}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    if ray in aliens:\n        aliens.remove(ray)\n    if ray - 1 in aliens:\n        aliens.remove(ray - 1)\n    if ray + 1 in aliens:\n        aliens.remove(ray + 1)\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s1, s2):\n        combinations = []\n        for i in range(len(s1)):\n            for j in range(len(s2)):\n                combinations.append(int(s1[i]) * int(s2[j]))\n        return combinations\n\n    def get_unique_combinations(combinations):\n        unique_combinations = []\n        for combination in combinations:\n            if combination not in unique_combinations:\n                unique_combinations.append(combination)\n        return unique_combinations\n\n    def get_sum_of_combinations(unique_combinations):\n        sum_of_combinations = 0\n        for combination in unique_combinations:\n            sum_of_combinations += combination\n        return sum_of_combinations\n\n    combinations = get_combinations(s1, s2)\n    unique_combinations = get_unique_combinations(combinations)\n    sum_of_combinations = get_sum_of_combinations(unique_combinations)\n    return sum_of_combinations\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * i + alphabet[i % 26] * (2 * i + 1) + ' ' * i\n        result.append(layer.center(2 * n - 1))\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value < 0:\n            value = -value\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        humans_list = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    humans_list.append(human)\n        return humans_list"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i\n        sequence.append(next_num)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    position = 0\n    for round in rounds:\n        position += round * music\n        position %= len(players)\n        players.pop(position)\n    return players\n\n"}
