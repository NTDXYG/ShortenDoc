{"task_id": "EvoEval/0", "completion": "\n    pass\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    local_shipping_cost_factor = 1.5\n    international_shipping_cost_factor = 2.5\n    additional_weight_shipping_cost = 10.0\n    total_shipping_cost = 0.0\n\n    for item in items:\n        if isinstance(item, str):\n            if item == 'Book':\n                total_shipping_cost += base_shipping_cost\n            else:\n                total_shipping_cost += float(item) * additional_weight_shipping_cost\n        else:\n            total_shipping_cost += item * base_shipping_cost\n\n    if location == 'Local':\n        total_shipping_cost *= local_shipping_cost_factor\n    elif location == 'National':\n        total_shipping_cost *= local_shipping_cost_factor\n    elif location == 'International':\n        total_shipping_cost *= international_shipping_cost_factor\n\n    return round(total_shipping_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(char: str) -> int:\n        return ord(char)\n\n    def int_to_char(num: int) -> str:\n        return chr(num)\n\n    def shift_char(char: str, key: int) -> str:\n        ascii_num = char_to_int(char)\n        new_ascii_num = (ascii_num - 97 + key) % 26 + 97\n        return int_to_char(new_ascii_num)\n\n    def shift_word(word: str, key: int) -> str:\n        return ''.join(shift_char(char, key) for char in word)\n\n    return [shift_word(word, char_to_int(key)) if key.isdigit() else shift_word(word, int(key)) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def combinations(input_string: str) -> List[str]:\n        if not input_string:\n            return ['']\n        if len(input_string) == 1:\n            return [char for char in 'abcdefghijklmnopqrstuvwxyz' if char[0] == input_string]\n        result = []\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char[0] == input_string[0]:\n                result.extend(combinations(input_string[1:])\n        return result\n\n    def combinations_with_numbers(input_string: str) -> List[str]:\n        if not input_string:\n            return ['']\n        if len(input_string) == 1:\n            return [char for char in 'abcdefghijklmnopqrstuvwxyz' if char[0] == input_string]\n        result = []\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char[0] == input_string[0]:\n                result.extend(combinations_with_numbers(input_string[1:])\n        return result\n\n    if not input_string:\n        return []\n    if len(input_string) == 1:\n        return [char for char in 'abcdefghijklmnopqrstuvwxyz' if char[0] == input_string]\n    result = []\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        if char[0] == input_string[0]:\n            result.extend(magical_alphabet(input_string[1:])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_candle = max(candles)\n    return sum(1 for c in candles if c == max_candle)\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows, cols = len(matrix), len(matrix[0])\n    going_down = False\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n        if going_down:\n            if row == 0 or col == cols - 1:\n                going_down = False\n                col += 1\n            else:\n                row += 1\n        else:\n            if row == rows - 1 or col == 0:\n                going_down = True\n                col -= 1\n            else:\n                row += 1\n\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        if x > 0:\n            grid[x-1][y] = 0\n        if x < len(grid)-1:\n            grid[x+1][y] = 0\n        if y > 0:\n            grid[x][y-1] = 0\n        if y < len(grid[0])-1:\n            grid[x][y+1] = 0\n    elif grid[x][y] == -1:\n        return grid\n    else:\n        grid[x][y] = 1\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define the coordinates of the starting point\n    x, y = 0, 0\n\n    # Define the directions\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Iterate over the sequence\n    for code in code_sequence:\n        # If the code is valid, update the coordinates\n        if code in directions:\n            x, y = x + directions[code][0], y + directions[code][1]\n        else:\n            return 'Shangri-La not found'\n\n    # If the coordinates are (0,0), return 'Shangri-La found'\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not canvas:\n        return 'Invalid canvas'\n\n    if 'P' not in canvas:\n        return canvas\n\n    rows = canvas.split()\n    for i, row in enumerate(rows):\n        if 'P' in row:\n            if '*' in row:\n                rows[i] = row.replace('*', ' ')\n            else:\n                return 'Invalid canvas'\n\n    return '#'.join(rows)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.lower()\n    for c in string:\n        if c in string.punctuation:\n            string = string.replace(c, \"\")\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_list = animal_string.split()\n    animal_count = {animal: 0 for animal in animal_dict.keys()}\n\n    for animal in animal_list:\n        if animal in animal_dict:\n            animal_count[animal] += 1\n\n    return list(animal_count.values())\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"{fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"{', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"{', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(list(count.values()))\n    sum_elements = sum(k * v for k, v in count.items())\n    return sum_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n\n    if len(rarest_elems) == 1:\n        return rarest_elems[0]\n    else:\n        return None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower())+1)%5]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower())+1)%21]\n        else:\n            new_name += char\n    return new_name\n"}
{"task_id": "EvoEval/15", "completion": "\n    def count_values(hand: list):\n        values = [card[0] for card in hand]\n        return sorted(set(values))\n\n    def count_pairs(hand: list):\n        pairs = [sum(values.count(value) for value in set(values)) for values in [list(values) for values in [list(value) for value in hand]]]\n        return sum(pairs)\n\n    def count_triples(hand: list):\n        triples = [sum(values.count(value) for value in set(values)) for values in [list(values) for values in [list(value) for value in hand]]]\n        return sum(triples)\n\n    def count_quadruples(hand: list):\n        quadruples = [sum(values.count(value) for value in set(values)) for values in [list(values) for values in [list(value) for value in hand]]]\n        return sum(quadruples)\n\n    def count_fives(hand: list):\n        fives = [sum(values.count(value) for value in set(values)) for values in [list(values) for values in [list(value) for value in hand]]]\n        return sum(fives)\n\n    values = count_values(hand)\n    pairs = count_pairs(hand)\n    triples = count_triples(hand)\n    quadruples = count_quadruples(hand)\n    fives = count_fives(hand)\n\n    score = (pairs * 10000) + (triples * 1000) + (quadruples * 100) + (fives * 100) + (values * 10) + (sum(values))\n\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard_name, wizard_magic_power, dragon_hp = wizard\n        dragon_hp -= wizard_magic_power\n        if dragon_hp <= 0:\n            return f'{wizard_name} defeated the dragon!'\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    else:\n        return 10 * (n - 1) + 7\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                vampires += 1\n            if j > 0 and m[i][j] == 1 and m[i][j-1] == 0:\n                vampires += 1\n            if i > 0 and m[i][j] == 1 and m[i-1][j] == 0:\n                vampires += 1\n    return vampires\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        return [','.join(str(i) for i in range(1, n+1))] + [','.join(str(i) for i in range(n-1, 0, -1)) for n in range(1, n+1)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_grid(word, grid, x, y, dx, dy):\n        n = len(word)\n        if len(grid) - x < n or len(grid[0]) - y < n:\n            return False\n        for i in range(n):\n            if grid[x + i * dx][y + i * dy] != word[i]:\n                return False\n        return True\n\n    def is_word_in_grid_horizontal(word, grid, x, y):\n        return is_word_in_grid(word, grid, x, y, 1, 0)\n\n    def is_word_in_grid_vertical(word, grid, x, y):\n        return is_word_in_grid(word, grid, x, y, 0, 1)\n\n    for word in words:\n        for direction in [is_word_in_grid_horizontal, is_word_in_grid_vertical]:\n            if not any(direction(word, g, x, y) for (x, row) in enumerate(grid) for (y, g) in enumerate(row) if g == word):\n                return False\n    return True\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_years_per_year = 9.461 * 10**12\n    distance = t * v * light_years_per_year\n    return distance\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            if char in primes:\n                result += str(primes.index(ord(char) - 96))\n            else:\n                result += char\n        else:\n            result += char\n\n    return result\n\n"}
{"task_id": "EvoEval/24", "completion": "\n\n    translation_table = str.maketrans(\"aeiouAEIOU\", \"1234567890\")\n    return english_word.translate(translation_table)\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    text = text.lower()\n    word = word.lower()\n    words = text.split('. ')\n    word_count = {}\n    for sentence in words:\n        words_in_sentence = sentence.split(' ')\n        for w in words_in_sentence:\n            if w == word:\n                if w in word_count:\n                    word_count[w] += 1\n                else:\n                    word_count[w] = 1\n    if word in word_count:\n        return (word_count[word], word)\n    else:\n        return (0, \"\")\n"}
{"task_id": "EvoEval/26", "completion": "\n    def pathfinder(maze, start, end):\n        if maze is None or start is None or end is None or start == end or maze[start[0]][start[1]] != 0:\n            return []\n        directions = []\n        stack = [(start, \"\")]\n        while stack:\n            (x, y), d = stack.pop()\n            if (x, y) == end:\n                return d.split()\n            maze[x][y] = 1\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0:\n                    stack.append(((nx, ny), d + ([\"up\" if dx == -1 else \"down\" if dx == 1 else \"left\" if dy == -1 else \"right\"])[0]))\n        return []\n\n    print(pathfinder([[0, 0, 0], [1, 1, 0]], (0, 0), (2, 2)))\n    print(pathfinder([[0, 1, 0]], (0, 0), (0, 2)))\n    print(pathfinder([[0, 0, 0]], (0, 0), (0, 0), [[0, 0, 0]], (0, 1)))\n    print(pathfinder([[0, 0, 0]], (0, 0), (2, 0)))\n\npathfinder()\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[:i] for i in range(n, len(s) + 1, n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25\n    elif income > 130000:\n        return (income - 45000) * 0.30\n    else:\n        return (income - 130000) * 0.35\n\n    if deductions > 1000:\n        deductions -= 1\n        return (income - deductions) * 0.01\n    elif deductions > 2000:\n        deductions -= 2\n        return (income - deductions) * 0.02\n    elif deductions > 3000:\n        deductions -= 3\n        return (income - deductions) * 0.03\n    else:\n        return (income - deductions)\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(palindromes)\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_point in [(start[0]+1, start[1]), (start[0], start[1]+1), (start[0]-1, start[1]), (start[0], start[1]-1)]:\n            if 0 <= next_point[0] < len(maze) and 0 <= next_point[1] < len(maze[0]) and maze[next_point[0]][next_point[1]] == 1 and next_point not in path:\n                newpath = dfs(maze, next_point, end, path)\n                if newpath: return newpath\n        return []\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    new_playlist = playlist.copy()\n    for i in range(len(playlist)):\n        if \"Rock\" in playlist[i]:\n            continue\n        j = random.randint(0, i)\n        new_playlist[i], new_playlist[j] = new_playlist[j], new_playlist[i]\n    return new_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize dp array\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    # Initialize magic stones set\n    magic_stones_set = set(magic_stones)\n    # Iterate over each step\n    for i in range(1, n + 1):\n        # Iterate over each magic stone\n        for stone in magic_stones:\n            # If stone power is less than or equal to current step\n            if stone <= i:\n                # Update dp[i] with dp[i - stone]\n                dp[i] += dp[i - stone]\n    return dp[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    def werewolf_transformation(n: int, m: int):\n        transformation_percentages = [0]*n\n        for i in range(n):\n            if i < m:\n                transformation_percentages[i] = 0\n            elif i == m:\n                transformation_percentages[i] = 10\n            else:\n                if transformation_percentages[i-1] < 50:\n                    transformation_percentages[i] = transformation_percentages[i-1] + 10\n                else:\n                    transformation_percentages[i] = transformation_percentages[i-1] - 10\n        return transformation_percentages\n\n    print(werewolf_transformation(5, 3))\n    print(werewolf_transformation(7, 4))\n    print(werewolf_transformation(10, 5))\n\nwerewolf_transformation(5, 3)\nwerewolf_transformation(7, 4)\nwerewolf_transformation(10, 5)\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupy"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\n        return False\n    local_part, domain = email.split(\"@\")\n    if \".\" not in domain:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    if n < 2:\n        return []\n    if n == 2:\n        return [xs[0], xs[1], 0]\n    if n == 3:\n        return [xs[0], xs[1], xs[2], 0]\n    a = [0] * (n - 1)\n    b = [0] * n\n    c = [0] * n\n    d = [0] * n\n    for i in range(n - 1):\n        a[i] = xs[i + 1]\n    for i in range(n):\n        b[i] = xs[i]\n    c[0] = a[0]\n    d[0] = b[0]\n    for i in range(1, n):\n        c[i] = a[i] + b[i - 1] * c[i - 1]\n        d[i] = b[i] + d[i - 1] * c[i - 1]\n    return c + d\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    punctuation = '.,?! '\n    trans = s.maketrans(vowels, 'eEiIoOuAaE' + vowels[0]*len(vowels))\n    s = s.translate(trans)\n    trans = s.maketrans(consonants, 'cCmMnNzZ' + consonants[0]*len(consonants))\n    s = s.translate(trans)\n    trans = s.maketrans(punctuation, 'bBcCmMnNzZ' + punctuation[0]*len(punctuation))\n    s = s.translate(trans)\n    return s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    for emoticon, unicode in emoticons.items():\n        sentence = sentence.replace(emoticon, unicode)\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1 or s is None:\n        return \"\"\n    result = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            result += \"*\" + s + \"*\\n\"\n        else:\n            result += \"*\" + s + \"*\\n\"\n    return result.rstrip()\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    pass\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/42", "completion": "\n"}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < distance / speed:\n        return 'Insufficient fuel'\n    else:\n        remaining_fuel = fuel - (spaceship_weight * planet_gravity * 0.1)\n        return round(remaining_fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q, w, e):\n        if sum(q) <= w and sum(e) <= e:\n            return True\n        else:\n            return False\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 10))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15], 15, 15))\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        castle_heights = []\n        for i in range(1, len(arr)-1):\n            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                castle_heights.append(arr[i])\n        return len(castle_heights)\n\n    print(find_castle([1,2,3,2,5,3,6,4,8,2,7])) # 10\n    print(find_castle([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 8\n    print(find_castle([5, 5, 5, 5])) # 4\n\nfind_castle()\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for case in test_cases:\n            words = [word[0] for word in case if word[0].isalpha()]\n            secret_message = ''.join(words)\n            result.append(secret_message.lower())\n        return result\n\n    print(hidden_message([['Hello, world!' 'okay?' ['Every' 'good' 'boy' 'does' 'fine']], ['apple''Banana' 'grape' 'kiwi' 'melon'], ['This' 'is' '?a' 'test' 'case??' ['hi']]]))\n    print(hidden_message([['apple', 'Banana', 'grape', 'kiwi', 'melon'], 'This', 'is', '?a', 'test', 'case??', ['hi']]))\n    print(hidden_message([['This' 'is' '?a' 'test' 'case??' ['hi']] -> ['tiatc', 'Take cannoli.']]))\n\n\n    # The function should return a list of secret messages. Each secret message is formed by taking the first letter of each word in the original string. The words are then joined together to form the secret message. The secret message is then converted to lowercase.\n\n    # The function is expected to handle multiple test cases. Each test case is a list of strings. The function should return a list of secret messages for each test case. If the secret message is found within the original strings, it should be ignored.\n\n    # The function is expected to return a list of secret messages in lowercase.\n\n    # The function is expected to handle multiple test cases. Each test case is a list of strings. The function should return a list of secret messages for each test case. If the secret message is found within the original strings, it should be ignored.\n\n    # The function is expected to return a list of secret messages in lowercase.\n\n    # The function is expected to handle multiple test cases. Each test case is a list of strings. The function should return a list of secret messages for each test case. If the secret message is found within the original strings, it should be ignored.\n\n    # The function is expected to return a list of secret messages in lower"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available:\n            return False\n        if available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item, quantity = log['item'], log['quantity']\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01',\n        'B': '1000',\n        'C': '1010',\n        'D': '100',\n        'E': '0',\n        'F': '0010',\n        'G': '110',\n        'H': '000',\n        'I': '00',\n        'J': '0111',\n        'K': '101',\n        'L': '0100',\n        'M': '11',\n        'N': '10',\n        'O': '111',\n        'P': '0110',\n        'Q': '1101',\n        'R': '010',\n        'S': '000',\n        'T': '1',\n        'U': '001',\n        'V': '0001',\n        'W': '011',\n        'X': '1001',\n        'Y': '1011',\n        'Z': '1100',\n        '0': '01111',\n        '1': '00111',\n        '2': '00011',\n        '3': '00001',\n        '4': '00000',\n        '5': '00000',\n        '6': '10000',\n        '7': '11000',\n        '8': '11100',\n        '9': '11110',\n        ' ': ' ',\n        '.': '01',\n        '/': '01111'\n    }\n\n    decoded_msg = ''\n    word = ''\n    for char in msg:\n        if char in morse_code_dict:\n            word += morse_code_dict[char] + ' '\n        else:\n            word += char\n\n    for char in word:\n        if char == ' ':\n            decoded_msg += ' '\n        else:\n            decoded_msg"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',\n        '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' ',\n    }\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += ' '\n    return morse_code\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    if not string:\n        return ''\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            list_of_alphabets = list_of_alphabets[1:] + [list_of_alphabets[0]]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    def bake_one_batch(n, m, orders):\n        if n < min(orders):\n            return 0\n        else:\n            return 1\n\n    def combine_orders(orders):\n        return sum(orders)\n\n    def split_orders(total_orders, m):\n        return [total_orders // m, total_orders % m]\n\n    total_orders = sum(orders)\n    batches = split_orders(total_orders, m)\n    max_orders = max(batches[0], batches[1])\n\n    return max_orders\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i] == 'a':\n                result += 'e'\n            elif s[i] == 'e':\n                result += 'i'\n            elif s[i] == 'i':\n                result += 'o'\n            elif s[i] == 'o':\n                result += 'u'\n            elif s[i] == 'u':\n                result += 'a'\n        elif s[i] in consonants:\n            if s[i] == 'b':\n                result += 'd'\n            elif s[i] == 'd':\n                result += 'f'\n            elif s[i] == 'f':\n                result += 'h'\n            elif s[i] == 'h':\n                result += 'j'\n            elif s[i] == 'j':\n                result += 'l'\n            elif s[i] == 'l':\n                result += 'n'\n            elif s[i] == 'n':\n                result += 'p'\n            elif s[i] == 'p':\n                result += 'r'\n            elif s[i] == 'r':\n                result += 't'\n            elif s[i] == 't':\n                result += 'v'\n            elif s[i] == 'v':\n                result += 'z'\n            elif s[i] == 'z':\n                result += 'b'\n        elif s[i] == ' ':\n            result += ' '\n        elif i % 2 == 0:\n            if s[i] == '?':\n                result += '!'\n        else:\n            result += s[i]\n    return result\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    def find_star(lst, star):\n        for i, row in enumerate(lst):\n            for j, val in enumerate(row):\n                if val == star:\n                    return (i, j)\n        return None\n\n    def find_star_map(lst, star):\n        result = []\n        for i, row in enumerate(lst):\n            for j, val in enumerate(row):\n                if val == star:\n                    result.append((i, j))\n        return result\n\n    return find_star_map(lst, star)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def caesar_cipher(text, shift):\n        result = \"\"\n        for char in text:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                ciphered_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                result += ciphered_char\n            else:\n                result += char\n        return result\n\n    def jumping_caesar_cipher(text, shift):\n        result = \"\"\n        for i in range(len(text)):\n            ascii_offset = ord('a') if text[i].islower() else ord('A')\n            ciphered_char = chr((ord(text[i]) - ascii_offset + shift) % 26 + ascii_offset)\n            result += ciphered_char\n            shift = (shift + 1) % 26\n        return result\n\n    encrypted_message = caesar_cipher(message, shift)\n    return jumping_caesar_cipher(encrypted_message, shift)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    return ' '.join(morse_code_dict[i] for i in s.lower())\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        return ''.join(chr(ord(c) + spell.index(dish[i])) for i in range(len(dish)))\n\n    def spell_to_int(spell):\n        return int(''.join(str(ord(c)) for c in spell))\n\n    def int_to_spell(n):\n        return ''.join(chr((n // (26 ** i)) % 26) for i in range(1, len(str(n)) + 1))\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_menu[transform_dish(dish, magic_spell)] = price\n\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            translated_phrase += '@'\n        elif char.isupper():\n            translated_phrase += char.lower()\n            translated_phrase += '@'\n        else:\n            translated_phrase += char\n\n    if translated_phrase[0] in vowels:\n        translated_phrase = '@' + translated_phrase\n    elif translated_phrase[0] in consonants:\n        translated_phrase = translated_phrase[0] + translated_phrase[1:]\n\n    return translated_phrase\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    result = []\n    for ingredient, number in sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0])):\n        result.append((ingredient, number))\n    return result\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    # Your code here\n\n    # Test cases\n    print(happy_ants(10, [2, 5, 7], [(1, \"right\"), (3, (6, \"left\"))]))  # 3\n    print(happy_ants(20, [2, 10, 14, 15], [(2, \"right\"), (8, (19, \"left\"), (15))]))  # 4\n    print(happy_ants(3, [2], [(0, \"right\"), (1, (2, \"left\"))]))  # 3\n    print(happy_ants(0, [], []))  # 0\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowels = vowels + vowels.upper()\n    consonants = consonants + consonants.upper()\n    transformed_s = ''\n    for i in range(len(s)):\n        c = s[i]\n        if i % 2 == 0:\n            c = c.swapcase()\n        if i % 2 == 1:\n            if c in vowels:\n                c = vowels[vowels.index(c) + 1]\n            elif c in consonants:\n                c = consonants[consonants.index(c) - 1]\n        transformed_s += c\n    return transformed_s\n\n"}
{"task_id": "EvoEval/62", "completion": "\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_next_layer(p, layer):\n        if layer == 0:\n            return []\n        if layer % 2 == 0:\n            return [p - 2] + create_next_layer(p - 2, layer - 1)\n        else:\n            return [p - 3] + create_next_layer(p - 3, layer - 1)\n\n    return create_next_layer(p, p)\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for i in range(start, end + 1):\n        if i % divisor == 0 and is_prime(i):\n            result.append(i)\n    return result\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    def add_ingredient(food, ingredient, order):\n        if food in order:\n            order[food].append(ingredient)\n        else:\n            order[food] = [ingredient]\n        return order\n\n    def remove_ingredient(food, ingredient, order):\n        if food in order and ingredient in order[food]:\n            order[food].remove(ingredient)\n        return order\n\n    def custom_order(custom_order, order):\n        for food, ingredients in custom_order.items():\n            if food in order:\n                for ingredient in ingredients:\n                    add_ingredient(food, ingredient, order)\n            else:\n                print(f\"{food} is not on the menu\")\n        return order\n\n    if order:\n        if 'add' in order:\n            for food, ingredients in order['add'].items():\n                for ingredient in ingredients:\n                    add_ingredient(food, ingredient, order)\n            del order['add']\n        if 'remove' in order:\n            for food, ingredients in order['remove'].items():\n                for ingredient in ingredients:\n                    remove_ingredient(food, ingredient, order)\n            del order['remove']\n        if 'custom' in order:\n            custom_order(order['custom'], order)\n            del order['custom']\n    return menu.update(order)\n\n\nmenu = {\"Burger\": [\"Bun\", \"Meat\", \"Cheese\", \"Pizza\"], \"Pizza\": [\"Dough\", \"Tomato Sauce\", \"Cheese\", \"Pepperoni\"]}\norder = {\"Burger\": {\"remove\": [\"Cheese\"]}, \"Pizza\": {\"add\": [\"Mushrooms\"]}}"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort(key=lambda x: (x[0], x[1]))\n\n    return anagram_pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    def meal_calculator(customers, meals):\n        total_calories = {}\n        for customer in customers:\n            total = 0\n            if customer in meals:\n                for meal in meals[customer]:\n                    if 'calories' in meals[customer][meal]:\n                        total += meals[customer][meal]['calories']\n            total_calories[customer] = total\n        return total_calories\n\n    print(meal_calculator(['Tom', 'Jerry'], {'Tom': {'dish': 'Pizza', 'calories': 300}, 'Burger': 500, 'Jerry': {'dish': 'Fries', 'calories': 200}}))\n\nmeal_calculator(['Tom', 'Jerry'], {'Tom': {'dish': 'Pizza', 'calories': 300}, 'Burger': 500, 'Jerry': {'dish': 'Fries', 'calories': 200}})\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    rotations = 0\n    swaps = 0\n\n    for i in range(len(arr)):\n        if i < len(arr) - 1 and arr[i] > arr[i + 1]:\n            rotations += 1\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n        elif i > 0 and arr[i] < arr[i - 1]:\n            swaps += 1\n            arr[i - 1], arr[i] = arr[i], arr[i - 1]\n\n    return rotations > 0 and swaps > 0\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiou\"\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted_char in vowels:\n                encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string, sum(1 for char in encrypted_string if char in vowels)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        name, number = string.split(' ')\n        name = name[0].upper() + name[1:].lower()\n        number = int(number)\n        result.append(f\"Once kingdom far away lived magical creature '{name}' known for telling {number} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        from collections import deque\n        m, n = len(grid), len(grid[0])\n        trips = 0\n        queue = deque()\n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    queue.append((i, j))\n                    grid[i][j] = 0\n                    while queue:\n                        x, y = queue.popleft()\n                        if x > 0 and grid[x-1][y] == 1:\n                            grid[x-1][y] = 0\n                            queue.append((x-1, y))\n                        if y > 0 and grid[x][y-1] == 1:\n                            grid[x][y-1] = 0\n                            queue.append((x, y-1))\n                        if x < m-1 and grid[x+1][y] == 1:\n                            grid[x+1][y] = 0\n                            queue.append((x+1, y))\n                        if y < n-1 and grid[x][y+1] == 1:\n                            grid[x][y+1] = 0\n                            queue.append((x, y+1))\n                    trips += 1\n        return trips\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    for key, value in cipher.items():\n        s = s.replace(key, value)\n    return s\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, c in enumerate(input_str):\n        if c in vowels:\n            result += vowels[(vowels.index(c)+1)%len(vowels)]\n        elif c in consonants:\n            result += consonants[(consonants.index(c)+1)%len(consonants)]\n        elif c.isdigit():\n            result += str((int(c)+1)%10) if c != '9' else '0'\n        elif c.isalpha():\n            result += c.swapcase()\n        else:\n            result += c\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(len(lst)):\n            pyramid.append('#' * i)\n        return pyramid\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(sequence):\n        points = 0\n        for num in sequence:\n            points += num / k\n        return points\n\n    sequence.sort(reverse=True)\n    for i in range(len(sequence)):\n        sequence[i] = calculate_points(sequence[:i+1])\n\n    return sequence\n"}
{"task_id": "EvoEval/78", "completion": "\n    def find_pattern(mat):\n        if isinstance(mat, list):\n            for i, v in enumerate(mat):\n                if isinstance(v, list):\n                    for j, w in enumerate(v):\n                        if w == 'X':\n                            return (i, j)\n                elif v == 'X':\n                    return (0, 0)\n        return None\n\n    print(find_pattern(mat))\n\n\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\nfind_pattern([[1, 2, 3],"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i, days):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit if max_profit > 0 else 0\n\n\nprices = [1, 5, 2, 8, 7, 3]\ndays = 5"}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map_instructions):\n        # Initialize variables\n        start_row, start_column = 0, 0\n        end_row, end_column = 0, 0\n        path = []\n        player_row, player_column = 0, 0\n        direction = None\n\n        # Parse map instructions\n        for i, row in enumerate(map_instructions):\n            for j, cell in enumerate(row):\n                if cell == 'S':\n                    start_row, start_column = i, j\n                elif cell == 'E':\n                    end_row, end_column = i, j\n                elif cell == 'X':\n                    pass\n                elif cell == 'right':\n                    direction = 'right'\n                elif cell == 'left':\n                    direction = 'left'\n                elif cell == 'up':\n                    direction = 'up'\n                elif cell == 'down':\n                    direction = 'down'\n\n        # Move player\n        if direction == 'right':\n            player_column += 1\n        elif direction == 'left':\n            player_column -= 1\n        elif direction == 'up':\n            player_row -= 1\n        elif direction == 'down':\n            player_row += 1\n\n        # Add player's position to path\n        path.append((player_row, player_column))\n\n        # Check for end or wall\n        if player_row == end_row and player_column == end_column:\n            return path\n        elif player_row < 0 or player_column < 0:\n            return path\n        elif map_instructions[player_row][player_column] == 'X':\n            return path\n\n        return adventure_game(map_instructions)\n\n    # Test the function\n    print(adventure_game(['S', '.', '.', 'X', 'E', 'right', 'right', 'up', 'left', 'left']))\n    print(adventure_game(['S', '.', '.', 'X', 'E', 'right', 'right', 'up', 'left', 'left']))\n    print(adventure_game(['S', 'X', 'E', 'right', 'right', 'up', 'left',"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    sorted_word_list = sorted(word_list)\n    for i in range(len(sorted_word_list) - 1):\n        if sorted_word_list[i] > sorted_word_list[i + 1]:\n            return \"INCORRECT\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    import datetime\n    from dateutil.relativedelta import relativedelta\n\n    zodiac_signs = {\n        \"Aries\": (datetime.date(1950, 3, 21) , datetime.date(1950, 4, 19)),\n        \"Taurus\": (datetime.date(1950, 4, 20) , datetime.date(1950, 5, 20)),\n        \"Gemini\": (datetime.date(1950, 6, 20) , datetime.date(1950, 7, 22)),\n        \"Cancer\": (datetime.date(1950, 7, 21) , datetime.date(1950, 8, 22)),\n        \"Leo\": (datetime.date(1950, 8, 22) , datetime.date(1950, 9, 22)),\n        \"Virgo\": (datetime.date(1950, 9, 22) , datetime.date(1950, 10, 22)),\n        \"Libra\": (datetime.date(1950, 10, 22) , datetime.date(1950, 11, 22)),\n        \"Scorpio\": (datetime.date(1950, 11, 22) , datetime.date(1950, 12, 21)),\n        \"Sagittarius\": (datetime.date(1950, 12, 21) , datetime.date(1950, 1, 19)),\n        \"Capricorn\": (datetime.date(1950, 1, 20) , datetime.date(1950, 2, 18)),\n        \"Aquarius\": (datetime.date(1950, 2, 19) , datetime.date(1950, 3, 20)),\n        \"Pisces\": (datetime.date(1950, 3, 20) , datetime.date(1"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n\n"}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree):\n        if not tree:\n            return []\n        if not tree.get('left') and not tree.get('right'):\n            return [tree['value']]\n        result = []\n        if tree.get('left'):\n            result += tree_traversal(tree.get('left'))\n        if tree.get('right'):\n            result += tree_traversal(tree.get('right'))\n        return result\n\n    def test_tree_traversal():\n        assert tree_traversal({1: {2: {4: {}}, 3: {6: {}, 7: {}}}}) == [1, 2, 4, 3, 6, 7]\n        assert tree_traversal({1: {2: {4: {5: {}}}, 3: {6: {}, 7: {}}}}) == [1, 2, 4, 5, 3, 6, 7]\n        assert tree_traversal({1: {2: {4: {}}, 3: {6: {}}}}) == [1, 2, 3, 6]\n        assert tree_traversal({1: {2: {4: {7: {}}}, 3: {6: {}}}}) == [1, 2, 4, 7, 3, 6]\n        assert tree_traversal({1: {2: {4: {5: {}}}, 3: {6: {}}}}) == [1, 2, 4, 5, 3, 6]\n\n    test_tree_traversal()\n\n\nThis code defines a function `tree_traversal` that takes a nested dictionary representing a binary tree and returns a list of lists, where each sublist contains the path from the root to a leaf in the tree.\n\nThe function uses recursion to traverse the tree, and for each node, it appends the node's value to the result list if the node is a leaf. If the node has left or right children, it recursively calls `tree_traversal` on these children.\n\nThe `test_tree_traversal` function is used to test the"}
{"task_id": "EvoEval/85", "completion": "\n    def find_princess(coord, grid):\n        moves = 0\n        while True:\n            moves += 1\n            for i in range(len(grid)):\n                for j in range(len(grid[i])):\n                    if grid[i][j] == 1:\n                        if abs(i - coord[0]) + abs(j - coord[1]) <= moves:\n                            return moves\n                        else:\n                            return -1\n    return find_princess(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral(arr):\n        if not arr:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    return spiral(arr)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n"}
{"task_id": "EvoEval/89", "completion": "\n    def destroy_aliens(aliens, aimed_at):\n        return [alien for alien in aliens if alien != aimed_at and (alien - aimed_at) % 2 != 0]\n\n    aliens = [alien for alien in aliens if alien != ray]\n    aliens = destroy_aliens(aliens, ray)\n    aliens = destroy_aliens(aliens, ray)\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def unique_combinations(s1, s2):\n        return [(int(i), int(j)) for i in s1 for j in s2]\n\n    def product(lst):\n        p = 1\n        for i in lst:\n            p *= i\n        return p\n\n    return product(unique_combinations(s1, s2))\n"}
{"task_id": "EvoEval/91", "completion": "\n    def validate_action(action):\n        if action not in ['Launch', 'Move', 'Land']:\n            return False\n        return True\n\n    def update_status(status, action, distance):\n        if status == 'On Ground':\n            if action == 'Launch':\n                return 'In Space'\n            elif action == 'Move':\n                return 'In Space'\n            elif action == 'Land':\n                return 'On Ground'\n        elif status == 'In Space':\n            if action == 'Launch':\n                return 'In Space'\n            elif action == 'Move':\n                if distance < 0:\n                    return 'In Space'\n                else:\n                    return 'On Ground'\n            elif action == 'Land':\n                return 'On Ground'\n        elif status == 'Off Ground':\n            if action == 'Launch':\n                return 'Off Ground'\n            elif action == 'Move':\n                return 'Off Ground'\n            elif action == 'Land':\n                return 'Off Ground'\n\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if not validate_action(action):\n            return 'Invalid Action Sequence'\n        status = update_status(status, action, distance)\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = alphabet[i] * (2 * n - 1)\n        result.append(layer.center(2 * n - 1, ' '))\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def encode(message, n_values):\n        result = \"\"\n        for i in range(len(message)):\n            if message[i] == \" \":\n                result += \" \"\n            else:\n                result += chr((ord(message[i]) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n        return result\n\n    def decode(encoded_message, n_values):\n        result = \"\"\n        for i in range(len(encoded_message)):\n            if encoded_message[i] == \" \":\n                result += \" \"\n            else:\n                result += chr((ord(encoded_message[i]) - 97 - n_values[i % len(n_values)]) % 26 + 97)\n        return result\n\n    encoded_message = encode(message, n_values)\n    decoded_message = decode(encoded_message, n_values)\n\n    return decoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(strings):\n        strings.sort(key=len)\n        return strings\n\n    return sort_words(strings)\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not isinstance(m, list) or not all(isinstance(i, list) for i in m):\n        return 'Invalid Matrix'\n    if not all(all(isinstance(j, int) for j in i) for i in m):\n        return 'Invalid Matrix'\n    if not all(len(i) == len(m) for i in m):\n        return 'Invalid Matrix'\n\n    main_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    anti_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(main_diagonal_sum - anti_diagonal_sum)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 == 0:\n            product_digits = 0\n            for digit in str(abs(lst[i])):\n                product_digits += int(digit)\n            if product_digits == i:\n                magic_indices.append(i)\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    def game_progress(players, rounds, music):\n        positions = list(range(1, len(players) + 1))\n        for r in rounds:\n            for i in range(r):\n                if positions:\n                    positions.pop(0)\n                    if positions:\n                        positions.pop(0)\n                    else:\n                        positions.pop(0)\n                music[0] -= 1\n                if music[0] == 0:\n                    music[0] = music[1]\n                    positions.append(positions.pop(0))\n        return positions\n\n    def players_left(players, positions):\n        return [p for p in players if p not in positions]\n\n    positions = game_progress(n, rounds, music)\n    return players_left(n, positions)\n\n"}
