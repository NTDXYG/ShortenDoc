{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            try:\n                weight = float(item)\n                if weight > 5:\n                    total_cost += 10.0\n                else:\n                    weight = weight\n            except ValueError:\n                weight = 1.0\n        else:\n            weight = item\n\n        if location == 'Local':\n            total_cost += weight\n        elif location == 'National':\n            total_cost += weight * 1.5\n        elif location == 'International':\n            total_cost += weight * 2.5\n\n    return \"{:.2f}\".format(round(total_cost, 2))\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 5.0\n    additional_weight_cost = 10.0\n    weight_factor = {\"Local\": 1.0, \"National\": 1.5, \"International\": 2.5}\n\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_cost += base_shipping_cost + (item - 1.0) * additional_weight_cost\n\n    total_cost *= weight_factor.get(location, 1.0)\n\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 148, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 32, in calculate_shipping_cost\n            item = float(item)\nValueError: could not convert string to float: 'Book'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    def char_to_int(char: str) -> int:\n        return ord(char)\n\n    def int_to_char(num: int) -> str:\n        return chr(num)\n\n    def shift_char(char: str, key: int) -> str:\n        ascii_num = char_to_int(char)\n        shifted_ascii_num = (ascii_num - 97 + key) % 26 + 97\n        return int_to_char(shifted_ascii_num)\n\n    encrypted_words = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                encrypted_word += shift_char(char, key)\n            else:\n                encrypted_word += char\n        encrypted_words.append(encrypted_word)\n    return encrypted_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 154, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in encrypt_message\n                encrypted_word += shift_char(char, key)\n  File \"<string>\", line 31, in shift_char\n        shifted_ascii_num = (ascii_num - 97 + key) % 26 + 97\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for i in range(1, len(input_string) + 1):\n        for subset in combinations(input_string, i):\n            word = ''.join(alphabet[int(i)] for i in subset)\n            result.append(word)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 135, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 20, in magical_alphabet\n        for subset in combinations(input_string, i):\nNameError: name 'combinations' is not defined\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    for _ in range(rows * cols):\n        result.append(matrix[row][col])\n\n        if (row + col) % 2 == 0:\n            if col == cols - 1:\n                row += 1\n            elif row == 0:\n                col += 1\n            else:\n                row += 1\n                col += 1\n        else:\n            if row == rows - 1:\n                col += 1\n            elif col == 0:\n                row += 1\n            else:\n                col += 1\n                row += 1\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 16, in zigzag_traversal\n        result.append(matrix[row][col])\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        grid[x][y] = 2\n        if x > 0:\n            grid[x-1][y] += 1\n        if x < len(grid)-1:\n            grid[x+1][y] += 1\n        if y > 0:\n            grid[x][y-1] += 1\n        if y < len(grid[0])-1:\n            grid[x][y+1] += 1\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    # Define the starting point\n    x, y = 0, 0\n\n    # Define the directions\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Iterate over the sequence\n    for direction in code_sequence:\n        # Update the position\n        x, y = x + directions[direction][0], y + directions[direction][1]\n\n    # Check if the position is (0,0)\n    if (x, y) == (0, 0):\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    new_canvas = list(canvas)\n    for i, c in enumerate(new_canvas):\n        if c == 'P':\n            if i > 0 and new_canvas[i-1] == '-' and i < len(new_canvas)-1 and new_canvas[i+1] == '-':\n                new_canvas[i] = '*'\n            elif i > 0 and new_canvas[i-1] == '-' and i < len(new_canvas)-1 and new_canvas[i+1] == 'P':\n                new_canvas[i] = '*'\n            elif i < len(new_canvas)-1 and new_canvas[i+1] == '-' and new_canvas[i-1] == 'P':\n                new_canvas[i] = '*'\n            else:\n                new_canvas[i] = '*'\n\n    return ''.join(new_canvas)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_list = []\n    animal_string_list = animal_string.split()\n\n    for animal in animal_string_list:\n        if animal[0] in animal_dict:\n            if animal_dict[animal[0]] < 2:\n                animal_dict[animal[0]] += 1\n                animal_list.append(animal_dict[animal[0]])\n\n    return animal_list\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh are {', '.join(fruits)} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count_dict = Counter(flux_values)\n    max_occurrence = max(count_dict.values())\n    sum_of_elements = sum(flux_values)\n    return sum_of_elements * max_occurrence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    counts = {}\n    for elem in elems:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    rarest_count = min(counts.values())\n    rarest_elems = [k for k, v in counts.items() if v == rarest_count]\n    return rarest_elems[0]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    def count_cards(hand: list):\n        counts = [0]*13\n        for card in hand:\n            value = int(card[0])\n            if value == 1:\n                counts[0] += 1\n            elif value == 11:\n                counts[1] += 1\n            elif value == 12:\n                counts[2] += 1\n            elif value == 13:\n                counts[3] += 1\n            else:\n                counts[value-1] += 1\n        return counts\n\n    counts = count_cards(hand)\n    counts.sort()\n    scores = [0]*6\n    for i in range(4, -1, -1):\n        if counts[i] >= 3:\n            scores[5] += 1\n            counts[i] -= 3\n        if counts[i] >= 1 and counts[i-1] >= 1:\n            scores[4] += 1\n            counts[i] -= 1\n            counts[i-1] -= 1\n        if counts[i] >= 1:\n            scores[3] += 1\n            counts[i] -= 1\n        if counts[i] >= 1 and counts[i-1] >= 1:\n            scores[2] += 1\n            counts[i] -= 1\n            counts[i-1] -= 1\n        if counts[i] >= 1:\n            scores[1] += 1\n            counts[i] -= 1\n        if counts[i] >= 1 and counts[i-1] >= 1:\n            scores[0] += 1\n            counts[i] -= 1\n            counts[i-1] -= 1\n        if counts[i] >= 1:\n            scores[0] += 1\n            counts[i] -= 1\n    return sum(scores)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 184, in <module>\n  File \"<string>\", line 182, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum += b\n        return sum\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        wizard[1] *= -1\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    while dragon_hp > 0:\n        dragon_hp -= wizards[0][1]\n        wizards = wizards[1:]\n        if not wizards:\n            return 'The dragon won!'\n        if dragon_hp <= 0:\n            return wizards[0][0]\n    return 'The dragon won!'\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 21, in wizard_battle\n        wizard[1] *= -1\nTypeError: 'tuple' object does not support item assignment\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    else:\n        return \"Invalid input\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    def count_vampires(row, col, matrix):\n        vampire_count = 0\n        for i in range(len(row)):\n            for j in range(len(col)):\n                if row[i] == 2 or col[j] == 2:\n                    vampire_count += 1\n        return vampire_count\n\n    vampire_count = 0\n    row_len = len(m[0])\n    col_len = len(m)\n\n    for i in range(col_len):\n        for j in range(row_len):\n            if m[i][j] == 2:\n                vampire_count += 1\n\n    for i in range(col_len):\n        if sum(m[i]) == 0:\n            vampire_count += count_vampires(m[i], [2]*row_len, m)\n\n    for j in range(row_len):\n        if sum(m[i][j] for i in range(col_len)) == 0:\n            vampire_count += count_vampires([2]*col_len, m[j], m)\n\n    return vampire_count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n < 1:\n        return []\n    result = []\n    for i in range(n, 0, -1):\n        result.append(','.join(str(j) for j in range(i, 0, -1)))\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in range(len(transposed)):\n            if word in ''.join(transposed[i]):\n                return True\n        return False\n\n    for word in words:\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n            return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 153, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in crossword_validator\n        if not (is_word_in_row(grid, word) or is_word_in_col(grid, word)):\n  File \"<string>\", line 33, in is_word_in_col\n        for i in range(len(transposed)):\nTypeError: object of type 'zip' has no len()\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9.461 * 10**12\n    distance = t * v\n    return distance / light_year\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 124, in <module>\n  File \"<string>\", line 122, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n\n    primes = [next_prime(i) for i in range(26)]\n    mapping = {chr(97 + i): chr(97 + primes[i]) for i in range(26)}\n\n    return ''.join(mapping.get(ch, ch) for ch in s)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/24", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 129, in <module>\n  File \"<string>\", line 127, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('.')\n    # Initialize word frequency and sentence with max frequency\n    max_frequency = 0\n    max_sentence = \"\"\n    # Initialize word frequency\n    word_frequency = 0\n    # Iterate over sentences\n    for sentence in sentences:\n        # Remove leading/trailing spaces and convert to lower case\n        sentence = sentence.strip().lower()\n        # Split the sentence into words\n        words = sentence.split()\n        # Count the frequency of the word\n        word_frequency += words.count(word)\n        # Check if the word frequency is greater than max_frequency\n        if word_frequency > max_frequency:\n            max_frequency = word_frequency\n            max_sentence = sentence\n        # Reset word frequency\n        word_frequency = 0\n    # Return the word frequency and sentence with max frequency\n    return (max_frequency, max_sentence)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n    directions = []\n    x1, y1 = start\n    x2, y2 = end\n    while x1 != x2 or y1 != y2:\n        if x1 < x2:\n            x1 += 1\n            directions.append('right')\n        elif x1 > x2:\n            x1 -= 1\n            directions.append('left')\n        if y1 < y2:\n            y1 += 1\n            directions.append('down')\n        elif y1 > y2:\n            y1 -= 1\n            directions.append('up')\n    return directions\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 70, in <module>\n  File \"<string>\", line 68, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 60, in _check_maze\n            assert maze[current_position[0]][current_position[1]] != 1\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25 + 750\n    else:\n        return (income - 45000) * 0.30 + 1750\n\n    if deductions > 0:\n        taxable_income = income - deductions\n        if taxable_income <= 1000:\n            return taxable_income * 0.01\n        elif taxable_income <= 2000:\n            return (taxable_income - 1000) * 0.02 + 100\n        elif taxable_income <= 3000:\n            return (taxable_income - 2000) * 0.03 + 300\n        else:\n            return (taxable_income - 3000) * 0.035 + 600\n\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(list(set(palindromes)))\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        unvisited = [(x, y) for x in range(len(maze)) for y in range(len(maze[0])) if maze[x][y] == 1]\n        next_coords = [(x, y) for x, y in unvisited if (x, y) not in path]\n        if not next_coords:\n            return None\n        for x, y in next_coords:\n            if dfs(maze, (x, y), end, path):\n                return dfs(maze, (x, y), end, path)\n        return None\n\n    return dfs(maze, start, end)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 66, in <module>\n  File \"<string>\", line 64, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 58, in _check_path\n            assert abs(curr_x - prev_x) + abs(curr_y - prev_y) == 1  # adjacent\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    import math\n    return math.factorial(m + n) / (math.factorial(m) * math.factorial(n))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    shuffled_playlist = []\n    for i in range(len(playlist)):\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[(seed * 16807) % len(playlist)])\n        else:\n            shuffled_playlist.append(playlist[i])\n        seed = (seed * 16807) % 2147483647\n    return shuffled_playlist\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # Initialize the number of ways to reach the first step to 1\n    ways[0] = 1\n    # Initialize a set to store the unique powers of magic stones\n    magic_stones_set = set(magic_stones)\n\n    # Iterate over each step\n    for i in range(1, n + 1):\n        # Initialize the number of ways to reach the current step to 0\n        ways[i] = 0\n        # Iterate over each magic stone\n        for stone in magic_stones:\n            # If the stone's power is less than or equal to the current step\n            if stone <= i:\n                # Add the number of ways to reach the current step from the previous step to the current step\n                ways[i] += ways[i - stone]\n        # If the number of ways to reach the current step is 0, it means there is no way to reach the current step\n        if ways[i] == 0:\n            return 0\n\n    # Return the number of ways to reach the top of the staircase\n    return ways[n]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 161, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    if n < 1 or m < 1 or m > n:\n        return \"Invalid input\"\n\n    transformation_percentages = []\n    for i in range(1, n + 1):\n        if i == m:\n            transformation_percentages.append(100)\n        else:\n            if i < m:\n                transformation_percentages.append(0)\n            else:\n                transformation_percentages.append(max(0, 100 - (i - m) * 10))\n\n    return transformation_percentages\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\n        return False\n    local_part, domain = email.split(\"@\")\n    if \".\" not in domain:\n        return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 134, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 19, in validate_email_structure\n    local_part, domain = email.split(\"@\")\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    if not xs:\n        return [0]\n    result = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        for j in range(i + 1, len(xs)):\n            result[i] += xs[j] / (j - i)\n        result[i + 1] += xs[i] / (i + 1)\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            transformed_s += char.lower().replace(char, vowels[(vowels.index(char.lower())+1)%5])\n        elif char.lower() in consonants:\n            transformed_s += char.lower().replace(char, consonants[(consonants.index(char.lower())+1)%21])\n        else:\n            transformed_s += char\n    return transformed_s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    def ascii_art(n, s):\n        return ('*' + '*'.join(s[i] for i in range(len(s))) + '*') * n\n\n    return ascii_art(n, s)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    # sort potions by power level in descending order\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n\n    # initialize result list\n    result = []\n\n    # iterate over each potion\n    for potion in potions:\n        # if potion's power level is less than or equal to target, add it to result and subtract its power level from target\n        if int(potion.split()[1]) <= target:\n            result.append(potion)\n            target -= int(potion.split()[1])\n\n    # sort result by number of potions, then alphabetically\n    result.sort(key=lambda x: (len(x.split()[0]), x.split()[0]))\n\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 149, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 22, in potion_mixing\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n  File \"<string>\", line 22, in <lambda>\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\nValueError: invalid literal for int() with base 10: 'Potion'\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input):\n        legendary_item = -1\n        if len(player_input) == 0:\n            return (False, legendary_item)\n        else:\n            rarity_list = sorted([i for i in set(player_input) if i == 5], reverse=True)\n            if len(rarity_list) > 0:\n                legendary_item = rarity_list[1]\n                return (True, legendary_item)\n            else:\n                return (False, legendary_item)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n    elif distance <= (speed * fuel_consumption):\n        return round(remaining_fuel, 2)\n    else:\n        return round(remaining_fuel - (distance - (speed * fuel_consumption)), 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q, w, e):\n        q.sort()\n        if sum(q) <= w:\n            return True\n        elif sum(q) <= e:\n            return False\n        else:\n            return False\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20))  # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10))  # False\n    print(fairy_tale_transport([1, 2, 3], 1, 5))  # True\n    print(fairy_tale_transport([5, 10, 15], 15, 15))  # True\n\nfairy_tale_transport()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33, in <module>\nfairy_tale_transport()\nTypeError: fairy_tale_transport() missing 3 required positional arguments: 'q', 'w', and 'e'\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(1, len(arr)-1):\n        left = arr[i-1] if i-1 >= 0 else 0\n        right = arr[i+1] if i+1 < len(arr) else 0\n        if arr[i] > max(left, right):\n            max_view += 1\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            secret_message = \"\"\n            for word in test_case:\n                if word[0].lower() in 'aeiou':\n                    secret_message += 'Take the cannoli.'\n                else:\n                    secret_message += word[0]\n            secret_messages.append(secret_message)\n        return secret_messages\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n\nhidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']])\nhidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']])\nhidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']])\n\nThe function 'hidden_message' takes a list of test cases. For each test case, it iterates over the words in the test case. If the first letter of a word is a vowel, it appends 'Take the cannoli.' to the secret message. Otherwise, it appends the first letter of the word. The secret message for each test case is then added to the 'secret_messages' list. Finally, the 'secret_messages' list is returned.\n\nThe function is tested with the provided test cases and the output is printed.\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 43\nThe function 'hidden_message' takes a list of test cases. For each test case, it iterates over the words in the test case. If the first letter of a word is a vowel, it appends 'Take the cannoli.' to the secret message. Otherwise, it appends the first letter of the word. The secret message for each test case is then added to the 'secret_messages' list. Finally, the 'secret_messages' list is returned.\n    The function 'hidden_message' takes a list of test cases. For each test case, it iterates over the words in the test case. If the first letter of a word is a vowel, it appends 'Take the cannoli.' to the secret message. Otherwise, it appends the first letter of the word. The secret message for each test case is then added to the 'secret_messages' list. Finally, the 'secret_messages' list is returned.\n        ^^^^^^^^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            if isinstance(log, dict):\n                item = log['item']\n                quantity = log['quantity']\n                if item in inventory:\n                    inventory[item] += quantity\n                else:\n                    inventory[item] = quantity\n        return {k: v for k, v in inventory.items() if v > 0}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101', 'R': '010', 'S': '000', 'T': '1', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '01111', '2': '00111', '3': '00011', '4': '00001', '5': '00000', '6': '10000', '7': '11000', '8': '11100', '9': '11110', '0': '11111'}\n    decoded_msg = ''\n    msg_list = msg.split(' ')\n    for symbol in msg_list:\n        for char in symbol:\n            if char == '0':\n                decoded_msg += ' '\n            elif char == '1':\n                decoded_msg += '/'\n            else:\n                decoded_msg += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(symbol)]\n        decoded_msg += ' '\n    return decoded_msg.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 155, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 42, in morse_decoder\n                decoded_msg += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(symbol)]\nValueError: '010101/01' is not in list\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', '@': '.--.-.', ' ': '/'}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += char + ' '\n    return morse_code.strip()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        if char in list_of_alphabets:\n            result += char\n        else:\n            result += list_of_alphabets[0]\n            list_of_alphabets = list_of_alphabets[1:]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_s = ''\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if s[i] == 'a':\n                trans_s += 'e'\n            elif s[i] == 'e':\n                trans_s += 'i'\n            elif s[i] == 'i':\n                trans_s += 'o'\n            elif s[i] == 'o':\n                trans_s += 'u'\n            elif s[i] == 'u':\n                trans_s += 'a'\n        elif s[i] in consonants:\n            if s[i] == 'z':\n                trans_s += 'b'\n            else:\n                trans_s += consonants[(consonants.index(s[i]) + 1) % len(consonants)]\n        elif s[i] == ' ':\n            trans_s += ' '\n        else:\n            if i % 2 == 0:\n                if s[i] == '?':\n                    trans_s += '!'\n                else:\n                    trans_s += s[i]\n            else:\n                if s[i] == '?':\n                    trans_s += '?'\n                else:\n                    trans_s += s[i]\n    return trans_s\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 166, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    star_coordinates = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == star:\n                star_coordinates.append((i, j))\n    return star_coordinates\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr((ord(c) - ascii_offset + shift) % 26 + ascii_offset)\n        return new_c\n\n    return ''.join(shift_char(c, shift) for c in message)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    return ' '.join(morse_code_dict[i.lower()] for i in s if i.lower() in morse_code_dict)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for char in spell:\n            if char in dish:\n                dish_name_chars = list(dish[dish.index(char):])\n                dish_name_chars.extend(list(dish[:dish.index(char)]))\n                transformed_dish += ''.join(dish_name_chars)\n            else:\n                transformed_dish += dish\n                break\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_menu[transform_dish(dish, magic_spell)] = price\n    return transformed_menu\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == 'z':\n                new_word += 'b'\n            elif char == ' ':\n                new_word += '@'\n        if word[0] in vowels:\n            new_word = new_word[0].upper() + new_word[1:] + 'xy'\n        else:\n            new_word = new_word[0].upper() + new_word[1:] + 'yz'\n        trans_phrase += new_word + ' '\n    return trans_phrase.rstrip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    result = []\n    for ingredient, count in sorted(ingredient_dict.items(), key=lambda item: (-item[1], item[0])):\n        result.append((ingredient, count))\n\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    if s[i].islower():\n                        result += chr(ord(s[i]) + 32)\n                    else:\n                        result += chr(ord(s[i]) + 32).upper()\n                else:\n                    if s[i].islower():\n                        result += chr((ord(s[i]) - ord('a') + 1) % 26 + ord('a'))\n                    else:\n                        result += chr((ord(s[i]) - ord('A') + 1) % 26 + ord('A')).upper()\n            else:\n                result += s[i]\n        else:\n            result += s[i]\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    def recipe_converter(recipe, conversion_factor):\n        return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid_recursive(p, layer=1, result=[]):\n        if p < 1:\n            return result\n        result.append(p)\n        if layer % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        return create_pyramid_recursive(p, layer + 1, result)\n\n    return create_pyramid_recursive(p)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def magical_sequence_helper(start, end, divisor, seq):\n        if start > end:\n            return seq\n        else:\n            if start % divisor == 0 and is_prime(start):\n                return magical_sequence_helper(start + 1, end, divisor, seq + [start])\n            else:\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n\n    return magical_sequence_helper(start, end, divisor, [])\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 140, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in magical_sequence\n    return magical_sequence_helper(start, end, divisor, [])\n  File \"<string>\", line 26, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n  File \"<string>\", line 26, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n  File \"<string>\", line 26, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n  [Previous line repeated 3 more times]\n  File \"<string>\", line 24, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq + [start])\n  File \"<string>\", line 26, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n  File \"<string>\", line 26, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n  File \"<string>\", line 26, in magical_sequence_helper\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n                return magical_sequence_helper(start + 1, end, divisor, seq)\n  [Previous line repeated 969 more times]\n  File \"<string>\", line 23, in magical_sequence_helper\n            if start % divisor == 0 and is_prime(start):\n  File \"<string>\", line 14, in is_prime\n        for i in range(2, int(n**0.5) + 1):\nRecursionError: maximum recursion depth exceeded while calling a Python object\n", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    new_menu = {}\n    for food, details in menu.items():\n        new_details = details.copy()\n        if food in order:\n            for action, ingredients in order[food].items():\n                if action == \"remove\":\n                    for ingredient in ingredients:\n                        if ingredient in new_details:\n                            new_details.remove(ingredient)\n                elif action == \"add\":\n                    new_details += ingredients\n        new_menu[food] = new_details\n    return new_menu\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def anagram_pairs(n):\n        primes = [i for i in range(2, n+1) if is_prime(i)]\n        pairs = []\n        for i in range(len(primes)):\n            for j in range(i+1, len(primes)):\n                if sorted(str(primes[i])) == sorted(str(primes[j])):\n                    pairs.append((primes[i], primes[j]))\n        return pairs\n\n    return anagram_pairs(n)\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    def calculate_calories(meal):\n        return sum(meal['calories'] for meal in meal)\n\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            total_calories = calculate_calories(meals[customer])\n        result[customer] = total_calories\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    rotations = 0\n    swaps = 0\n\n    for i in range(len(arr)):\n        if i + 1 < len(arr) and arr[i] > arr[i + 1]:\n            rotations += 1\n            if rotations > 1:\n                return False\n        elif i > 0 and arr[i] < arr[i - 1]:\n            swaps += 1\n            if swaps > 1:\n                return False\n\n    return rotations <= 1 and swaps <= 1\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for planet in path:\n        if planet not in planets:\n            return False\n    return True\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/71", "completion": "\n    vowels = \"aeiouAEIOU\"\n    encrypted_string = \"\"\n    vowel_count = 0\n\n    for char in s:\n        if char in vowels:\n            vowel_count += 1\n        if char.isalpha():\n            char_code = ord(char) + n\n            if char.isupper():\n                if char_code > ord('Z'):\n                    char_code -= 26\n            elif char.islower():\n                if char_code > ord('z'):\n                    char_code -= 26\n            encrypted_string += chr(char_code)\n        else:\n            encrypted_string += char\n\n    return (encrypted_string, vowel_count)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon time, in kingdom far away, lived magical creature name '{s}' known for telling {count} tales a day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[m][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 0:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1]\n                else:\n                    dp[i][j] = dp[i + 1][j] * dp[i][j + 1]\n        return dp[0][0]\n\n    return math.comb(sum(sum(row) for row in grid), bag_capacity) * count_trips(grid, bag_capacity)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    new_s = \"\"\n    for char in s:\n        if char in cipher:\n            new_s += cipher[char]\n        else:\n            new_s += char\n    return new_s\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    result = ''\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        else:\n            result += input_str[i]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        for i in range(max(lst)):\n            level = []\n            for num in lst:\n                if num - 1 > i:\n                    break\n                level.append('#' * (num - 1 + i - num + 1))\n            pyramid.append(' '.join(level))\n        return pyramid\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def magical_sequence_helper(sequence, k, memo):\n        if len(sequence) == 0:\n            return 0\n        if sequence[0] in memo:\n            return memo[sequence[0]]\n        else:\n            total = (sequence[0] // k) + magical_sequence_helper(sequence[1:], k, memo)\n            memo[sequence[0]] = total\n            return total\n\n    memo = {}\n    sequence.sort(reverse=True)\n    for i in range(len(sequence)):\n        sequence[i] = magical_sequence_helper(sequence[i:], k, memo)\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    mid = n // 2\n    res = []\n    for i in range(mid):\n        for j in range(mid):\n            res.append(mat[i][j])\n            res.append(mat[i][n-1-j])\n            res.append(mat[n-1-i][n-1-j])\n            res.append(mat[n-1-i][j])\n    if n % 2 != 0:\n        mid = mid + 1\n        for i in range(mid):\n            res.append(mat[i][mid])\n            res.append(mat[n-1-i][mid])\n    return res\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize profit as 0\n    profit = 0\n\n    # Iterate over the prices list\n    for i in range(days):\n        # If current price is less than next price, update profit\n        if prices[i] < prices[i+1]:\n            profit += prices[i+1] - prices[i]\n\n    return profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        start_row, start_col = 0, 0\n        moves = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n        path = [(start_row, start_col)]\n\n        for move in instructions:\n            if map[start_row + moves[move][0]][start_col + moves[move][1]] == 'X':\n                return path\n            else:\n                start_row += moves[move][0]\n                start_col += moves[move][1]\n                path.append((start_row, start_col))\n\n        if map[start_row][start_col] == 'E':\n            return path\n        else:\n            return [(start_row, start_col)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 162, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list)-1):\n        if sorted(word_list[i]) != sorted(alien_dictionary):\n            return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    zodiac_signs = {\n        \"Aquarius\": [\"01-02\", \"02-08\", \"03-01\", \"04-05\", \"05-06\", \"06-07\", \"07-08\", \"08-09\", \"09-10\", \"10-11\", \"11-12\", \"12-01\"],\n        \"Pisces\": [\"01-12\", \"12-01\", \"01-02\", \"02-03\", \"03-04\", \"04-05\", \"05-06\", \"06-07\", \"07-08\", \"08-09\", \"09-10\", \"10-11\"],\n        \"Aries\": [\"03-01\", \"04-02\", \"05-03\", \"06-04\", \"07-05\", \"08-06\", \"09-07\", \"10-08\", \"11-09\", \"12-10\", \"13-11\", \"12-01\"],\n        \"Taurus\": [\"04-02\", \"05-03\", \"06-04\", \"07-05\", \"08-06\", \"09-07\", \"10-08\", \"11-09\", \"12-10\", \"13-11\", \"14-12\", \"12-01\"],\n        \"Gemini\": [\"05-03\", \"06-04\", \"07-05\", \"08-06\", \"09-07\", \"10-08\", \"11-09\", \"12-10\", \"13-11\", \"14-12\", \"15-13\", \"12-01\"],\n        \"Cancer\": [\"06-04\", \"07-05\", \"08-06\", \"09-07\", \"10-08\", \"11-09\", \"1", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 39\n        \"Cancer\": [\"06-04\", \"07-05\", \"08-06\", \"09-07\", \"10-08\", \"11-09\", \"1\n    \"Cancer\": [\"06-04\", \"07-05\", \"08-06\", \"09-07\", \"10-08\", \"11-09\", \"1\n                                                                     ^\nSyntaxError: unterminated string literal (detected at line 39)\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n        else:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n    return ''.join(s_list)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal(tree))\n    \"\"\"\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal(tree))\n    \"\"\"\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal(tree))\n    \"\"\"\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal(tree))\n    \"\"\"\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal(tree))\n    \"\"\"\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal(tree))\n    \"\"\"\n    \"\"\"\n    tree = {1: {2: {4: {7: {}}}, 3: {5: {8: {}}}}}\n    print(tree_traversal", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 50\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 165)\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        start = (coord[0]*2, coord[1]*2)\n        end = (coord[0]*2+1, coord[1]*2+1)\n        queue = [(start, 0)]\n        visited = {start}\n        while queue:\n            current, step = queue.pop(0)\n            if current == end:\n                return step\n            for direction in [(0, 1), (1, 0)]:\n                next_point = (current[0]+direction[0], current[1]+direction[1])\n                if 0 <= next_point[0] < 2*coord[0]+1 and 0 <= next_point[1] < 2*coord[1]+1 and grid[next_point[0]//2][next_point[1]//2] == 0 and next_point not in visited:\n                    visited.add(next_point)\n                    queue.append((next_point, step+1))\n        return -1\n\n    return min_moves(coord, grid)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n\n    def sort_movies_by_ratings_and_release_date(movies_dict):\n        sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n\n    movies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999], \"Toy Story 3\": [8.3, 2010], \"Toy Story 4\": [7.8, 2019]}\n    print(sort_movies_by_ratings_and_release_date(movies_dict))\n\nmain()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 32, in <module>\nmain()\nNameError: name 'main' is not defined\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    def word_spiral(arr):\n        if not arr or not arr[0]:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    print(word_spiral([['h','i','!'],['b','y','e']]))\n    print(word_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']]))\n    print(word_spiral([]))\n\nword_spiral([])\nword_spiral([['h','i','!'],['b','y','e']])\nword_spiral([['l','o','v','e'],['i','s','i','n'],['t','h','e','a'],['i','r', '!','!!']])\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<j", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35\n<jupyter>\n    <jupyter>\n    ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n        if not dict_of_planets:\n            return {}\n\n        result = {}\n        for planet, data in dict_of_planets.items():\n            if not data or not data[0] or not data[1]:\n                continue\n            population, size = data\n            if size:\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_in_range(n, r):\n        return 1 <= n <= r\n\n    def is_valid(n, r, a):\n        return is_in_range(n, r) and (is_adjacent(n, r) or (is_adjacent(n, a) and is_odd(a)))\n\n    def remove_alien(r, a):\n        return [x for x in r if not is_valid(x, r, a)]\n\n    return [remove_alien(aliens, ray)[0] if aliens else []]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 151, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 39, in space_invaders\n    return [remove_alien(aliens, ray)[0] if aliens else []]\n  File \"<string>\", line 37, in remove_alien\n        return [x for x in r if not is_valid(x, r, a)]\n  File \"<string>\", line 37, in <listcomp>\n        return [x for x in r if not is_valid(x, r, a)]\n  File \"<string>\", line 34, in is_valid\n        return is_in_range(n, r) and (is_adjacent(n, r) or (is_adjacent(n, a) and is_odd(a)))\n  File \"<string>\", line 31, in is_in_range\n        return 1 <= n <= r\nTypeError: '<=' not supported between instances of 'int' and 'list'\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(c) for c in s]\n\n    def get_combinations(digits):\n        result = []\n        for i in range(len(digits)):\n            for j in range(i + 1, len(digits)):\n                result.append((digits[i], digits[j]))\n        return result\n\n    s1_digits = get_digits(s1)\n    s2_digits = get_digits(s2)\n\n    combinations = get_combinations(s1_digits + s2_digits)\n\n    product = 0\n    for combination in combinations:\n        product += sum(combination)\n\n    return product\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    def validate_sequence(sequence):\n        in_space = False\n        on_ground = False\n        for action, distance in sequence:\n            if action == 'Launch':\n                if on_ground:\n                    return 'Invalid Action Sequence'\n                on_ground = True\n            elif action == 'Move':\n                if not on_ground:\n                    return 'Invalid Action Sequence'\n                on_ground = False\n            elif action == 'Land':\n                if not on_ground:\n                    return 'Invalid Action Sequence'\n                on_ground = True\n            else:\n                return 'Invalid Action Sequence'\n            if on_ground:\n                in_space = True\n            else:\n                in_space = False\n        return 'On Ground' if in_space else 'Invalid Action Sequence'\n\n    return validate_sequence(spaceship_data)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = ''\n    for i in range(n):\n        layer = ''\n        for j in range(n - i - 1):\n            layer += ' '\n        for j in range(2 * i + 1):\n            layer += alphabet[25 - 2 * i]\n            if 2 * i + 1 + j < 2 * n - 1:\n                layer += alphabet[2 * i]\n        result += layer + '\\n'\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        new_c = chr(((ord(c) - ascii_offset + n) % 26) + ascii_offset)\n        return new_c\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n_values[i % len(n_values)]) for i, c in enumerate(message))\n\n    return shift_message(message, n_values)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(m):\n        return all(len(row) == len(m) for row in m)\n\n    if not is_square(m):\n        return 'Invalid Matrix'\n\n    primary_diagonal_sum = sum(m[i][i] for i in range(len(m)))\n    secondary_diagonal_sum = sum(m[i][len(m)-i-1] for i in range(len(m)))\n\n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        n = abs(n)\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and get_product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if lst[i] % i == 0 and get_product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not alien or not humans:\n            return []\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        alien_continent = {\"Asia\", \"Europe\", \"North America\", \"Africa\", \"South America\"}[min(5, max(0, [list(\"Asia\", \"Europe\", \"North America\", \"Africa\", \"South America\").index(i) for i in [alien]]))]\n        humans_encounter = sorted([name for name, continent in humans.items() if continent == alien_continent])\n        return humans_encounter\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 36, in nature_sequence_generator\n        next_num = sequence[i-1] + sequence[i-2]\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                eliminated = (j + i) % len(players)\n                players.pop(eliminated)\n    return players\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
