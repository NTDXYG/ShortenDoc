{"task_id": "valid/0", "completion": "\n    # Define a dictionary to map keywords to categories\n    categories = {\n        'sports': ['football', 'basketball', 'tennis'],\n        'politics': ['government', 'election', 'policy'],\n        'entertainment': ['movie', 'music', 'celebrity']\n    }\n\n    # Initialize the category with a default value\n    category = 'unknown'\n\n    # Iterate over the categories and their keywords\n    for cat, keywords in categories.items():\n        # Iterate over the keywords in the current category\n        for keyword in keywords:\n            # Check if the keyword is in the text\n            if keyword in text.lower():\n                # If the keyword is found, update the category\n                category = cat\n                break\n\n    # Return the classified category\n    return category\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 31, in check\n    assert candidate(\"I am interested in financial planning\",) == \"finance\"\nAssertionError\n", "passed": false}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n", "result": "passed", "passed": true}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n", "result": "passed", "passed": true}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n", "result": "passed", "passed": true}
{"task_id": "valid/4", "completion": "\n    try:\n        # Attempt to parse the JSON string\n        json_data = json.loads(json_string)\n        # Convert the JSON data to a list of dictionaries\n        list_data = [dict(item) for item in json_data]\n        return list_data\n    except json.JSONDecodeError:\n        # If the input string is not valid JSON, raise a ValueError\n        raise ValueError(\"Invalid JSON string\")\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 34, in <module>\n  File \"<string>\", line 32, in check\n    assert candidate('{\"name\": \"Alice\", \"age\": 25}') == [{'name': 'Alice', 'age': 25}]\n  File \"<string>\", line 23, in convert_json_to_list\n        list_data = [dict(item) for item in json_data]\n  File \"<string>\", line 23, in <listcomp>\n        list_data = [dict(item) for item in json_data]\nValueError: dictionary update sequence element #0 has length 1; 2 is required\n", "passed": false}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    return n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0\n", "result": "passed", "passed": true}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif n == base:\n        return 1\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n", "result": "passed", "passed": true}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n\n", "result": "passed", "passed": true}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n", "result": "passed", "passed": true}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n", "result": "passed", "passed": true}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n", "result": "passed", "passed": true}
{"task_id": "valid/12", "completion": "\n    return text.strip().replace(\"  \", \" \").replace(\"   \", \" \").replace(\"    \", \" \").replace(\"     \", \" \").replace(\"      \", \" \").replace(\"       \", \" \").replace(\"        \", \" \").replace(\"         \", \" \").replace(\"          \", \" \").replace(\"           \", \" \").replace(\"            \", \" \").replace(\"             \", \" \").replace(\"              \", \" \").replace(\"               \", \" \").replace(\"                \", \" \").replace(\"                 \", \" \").replace(\"                  \", \" \").replace(\"                   \", \" \").replace(\"                    \", \" \").replace(\"                     \", \" \").replace(\"                      \", \" \").replace(\"                       \", \" \").replace(\"                        \", \" \").replace(\"                         \", \" \").replace(\"                          \", \" \").replace(\"                           \", \" \").replace(\"                            \", \" \").replace(\"                             \", \" \").replace(\"                              \", \" \").replace(\"                               \", \" \").replace(\"                                \", \" \").replace(\"                                 \", \" \").replace(\"                                  \", \" \").replace(\"                                   \", \" \").replace(\"                                    \", \" \").replace(\"                                     \", \" \").replace(\"                                      \", \" \").replace(\"                                       \", \" \").replace(\"                                        \", \" \").replace(\"                                         \", \" \").replace(\"                                          \", \" \").replace(\"                                           \", \" \").replace(\"                                            \", \" \").replace(\"                                             \", \" \").replace(\"                                              \", \" \").replace(\"                                               \", \" \").replace(\"                                                \", \" \").replace(\"                                                 \", \" \").replace(\"                                                  \", \" \").replace(\"                                                   \", \" \").replace(\"                                                    \", \" \").replace(\"                                                     \", \" \").replace(\"                                                      \", \" \").replace(\"                                                       \", \" \").replace(\"                                                        \", \" \").replace(\"                                                         \", \" \").replace(\"269\", \" \").replace(\"268\", \" \").replace(\"267\", \" \").replace(\"266\", \" \").replace(\"265\", \" \").replace(\"264\", \" \").replace(\"263\", \" \").replace(\"262\", \" \").replace(\"261\", \" \").replace(\"260\", \" \").replace(\"259\", \" \").replace(\"258\", \" \").replace(\"257\", \" \").replace(\"256\", \" \").replace(\"255\", \" \").replace(\"254\", \" \").replace(\"253\", \" \").replace(\"252\", \" \").replace(\"251\", \" \").replace(\"250\", \" \").replace(\"249\", \" \").replace(\"248\", \" \").replace(\"247\", \" \").replace(\"246\", \" \").replace(\"245\", \" \").replace(\"244\", \" \").replace(\"243\", \" \").replace(\"242\", \" \").replace(\"241", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 8\n    return text.strip().replace(\"  \", \" \").replace(\"   \", \" \").replace(\"    \", \" \").replace(\"     \", \" \").replace(\"      \", \" \").replace(\"       \", \" \").replace(\"        \", \" \").replace(\"         \", \" \").replace(\"          \", \" \").replace(\"           \", \" \").replace(\"            \", \" \").replace(\"             \", \" \").replace(\"              \", \" \").replace(\"               \", \" \").replace(\"                \", \" \").replace(\"                 \", \" \").replace(\"                  \", \" \").replace(\"                   \", \" \").replace(\"                    \", \" \").replace(\"                     \", \" \").replace(\"                      \", \" \").replace(\"                       \", \" \").replace(\"                        \", \" \").replace(\"                         \", \" \").replace(\"                          \", \" \").replace(\"                           \", \" \").replace(\"                            \", \" \").replace(\"                             \", \" \").replace(\"                              \", \" \").replace(\"                               \", \" \").replace(\"                                \", \" \").replace(\"                                 \", \" \").replace(\"                                  \", \" \").replace(\"                                   \", \" \").replace(\"                                    \", \" \").replace(\"                                     \", \" \").replace(\"                                      \", \" \").replace(\"                                       \", \" \").replace(\"                                        \", \" \").replace(\"                                         \", \" \").replace(\"                                          \", \" \").replace(\"                                           \", \" \").replace(\"                                            \", \" \").replace(\"                                             \", \" \").replace(\"                                              \", \" \").replace(\"                                               \", \" \").replace(\"                                                \", \" \").replace(\"                                                 \", \" \").replace(\"                                                  \", \" \").replace(\"                                                   \", \" \").replace(\"                                                    \", \" \").replace(\"                                                     \", \" \").replace(\"                                                      \", \" \").replace(\"                                                       \", \" \").replace(\"                                                        \", \" \").replace(\"                                                         \", \" \").replace(\"269\", \" \").replace(\"268\", \" \").replace(\"267\", \" \").replace(\"266\", \" \").replace(\"265\", \" \").replace(\"264\", \" \").replace(\"263\", \" \").replace(\"262\", \" \").replace(\"261\", \" \").replace(\"260\", \" \").replace(\"259\", \" \").replace(\"258\", \" \").replace(\"257\", \" \").replace(\"256\", \" \").replace(\"255\", \" \").replace(\"254\", \" \").replace(\"253\", \" \").replace(\"252\", \" \").replace(\"251\", \" \").replace(\"250\", \" \").replace(\"249\", \" \").replace(\"248\", \" \").replace(\"247\", \" \").replace(\"246\", \" \").replace(\"245\", \" \").replace(\"244\", \" \").replace(\"243\", \" \").replace(\"242\", \" \").replace(\"241\n    return text.strip().replace(\"  \", \" \").replace(\"   \", \" \").replace(\"    \", \" \").replace(\"     \", \" \").replace(\"      \", \" \").replace(\"       \", \" \").replace(\"        \", \" \").replace(\"         \", \" \").replace(\"          \", \" \").replace(\"           \", \" \").replace(\"            \", \" \").replace(\"             \", \" \").replace(\"              \", \" \").replace(\"               \", \" \").replace(\"                \", \" \").replace(\"                 \", \" \").replace(\"                  \", \" \").replace(\"                   \", \" \").replace(\"                    \", \" \").replace(\"                     \", \" \").replace(\"                      \", \" \").replace(\"                       \", \" \").replace(\"                        \", \" \").replace(\"                         \", \" \").replace(\"                          \", \" \").replace(\"                           \", \" \").replace(\"                            \", \" \").replace(\"                             \", \" \").replace(\"                              \", \" \").replace(\"                               \", \" \").replace(\"                                \", \" \").replace(\"                                 \", \" \").replace(\"                                  \", \" \").replace(\"                                   \", \" \").replace(\"                                    \", \" \").replace(\"                                     \", \" \").replace(\"                                      \", \" \").replace(\"                                       \", \" \").replace(\"                                        \", \" \").replace(\"                                         \", \" \").replace(\"                                          \", \" \").replace(\"                                           \", \" \").replace(\"                                            \", \" \").replace(\"                                             \", \" \").replace(\"                                              \", \" \").replace(\"                                               \", \" \").replace(\"                                                \", \" \").replace(\"                                                 \", \" \").replace(\"                                                  \", \" \").replace(\"                                                   \", \" \").replace(\"                                                    \", \" \").replace(\"                                                     \", \" \").replace(\"                                                      \", \" \").replace(\"                                                       \", \" \").replace(\"                                                        \", \" \").replace(\"                                                         \", \" \").replace(\"269\", \" \").replace(\"268\", \" \").replace(\"267\", \" \").replace(\"266\", \" \").replace(\"265\", \" \").replace(\"264\", \" \").replace(\"263\", \" \").replace(\"262\", \" \").replace(\"261\", \" \").replace(\"260\", \" \").replace(\"259\", \" \").replace(\"258\", \" \").replace(\"257\", \" \").replace(\"256\", \" \").replace(\"255\", \" \").replace(\"254\", \" \").replace(\"253\", \" \").replace(\"252\", \" \").replace(\"251\", \" \").replace(\"250\", \" \").replace(\"249\", \" \").replace(\"248\", \" \").replace(\"247\", \" \").replace(\"246\", \" \").replace(\"245\", \" \").replace(\"244\", \" \").replace(\"243\", \" \").replace(\"242\", \" \").replace(\"241\nnSyntaxError: unterminated string literal (detected at line 8)\n", "passed": false}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove special characters\n    text = ''.join(e for e in text if e.isalnum() or e.isspace() or e in string.punctuation)\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 26, in check\n    assert candidate(\"1234abc5678\") == \"abc\"\nAssertionError\n", "passed": false}
{"task_id": "valid/14", "completion": "\n    pattern = re.compile(r'\\b' + re.escape(word1) + r'\\b.*\\b' + re.escape(word2) + r'\\b')\n    return bool(pattern.search(text))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 22, in check\n    assert candidate(\"I love pizza\", \"love\", \"hate\") == True\nAssertionError\n", "passed": false}
{"task_id": "valid/15", "completion": "\n    return [sum(row) for row in array]\n", "result": "passed", "passed": true}
{"task_id": "valid/16", "completion": "\n    # Split the comment into individual settings\n    settings = comment.split()\n\n    # Initialize an empty dictionary to store the settings\n    vim_settings = {}\n\n    # Iterate over the settings\n    for setting in settings:\n        # Check if the setting is a valid Vim setting\n        if setting.startswith('set'):\n            # Extract the setting name and value\n            setting_name = setting.split('=')[0].replace('set', '').strip()\n            setting_value = setting.split('=')[1].strip()\n\n            # Add the setting to the dictionary\n            vim_settings[setting_name] = setting_value\n\n    # Return the dictionary of Vim settings\n    return vim_settings\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 32, in <module>\n  File \"<string>\", line 29, in check\n    assert candidate(\"# Vim settings: tabstop=4 expandtab=true shiftwidth=4 softtabstop=4\") == {'tabstop': '4', 'expandtab': True, 'shiftwidth': '4', 'softtabstop': '4'}\n  File \"<string>\", line 19, in parse_vim_settings\n            setting_value = setting.split('=')[1].strip()\nIndexError: list index out of range\n", "passed": false}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = nltk.word_tokenize(sentence)\n    \n    # Tag the words with their part of speech\n    tagged_words = nltk.pos_tag(words)\n    \n    # Disassemble the sentence into a list of tuples containing the word and its part of speech\n    disassembled_sentence = [(word, tag) for word, tag in tagged_words]\n    \n    return disassembled_sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate(\"I love programming\") == [\"I\", \"love\", \"programming\"]\n  File \"<string>\", line 7, in disassemble_sentence\n    words = nltk.word_tokenize(sentence)\nNameError: name 'nltk' is not defined\n", "passed": false}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate(0) == 1\nAssertionError\n", "passed": false}
{"task_id": "valid/19", "completion": "\n    # Reverse elements in list1\n    reversed_list1 = list1[::-1]\n    # Reverse elements in list2\n    reversed_list2 = list2[::-1]\n    # Combine elements from both lists\n    combined_list = reversed_list1 + reversed_list2\n    # Sort elements in combined list in ascending order\n    sorted_list = sorted(combined_list)\n    return sorted_list\n", "result": "passed", "passed": true}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n", "result": "passed", "passed": true}
{"task_id": "valid/21", "completion": "\n    return z ** 2\n", "result": "passed", "passed": true}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\", None)\n", "result": "passed", "passed": true}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    else:\n        return struct\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate((1, 2, 3)) == [1, 2, 3]\nAssertionError\n", "passed": false}
{"task_id": "valid/24", "completion": "\n    num = str(num)\n    # Check if the number is already a palindrome\n    if num == num[::-1]:\n        return num\n    # If not, find the closest palindrome\n    else:\n        # Find the closest smaller palindrome\n        smaller = num\n        while True:\n            smaller = int(''.join(reversed(str(int(smaller) - 1))))\n            if str(smaller) == str(smaller)[::-1]:\n                break\n        # Find the closest larger palindrome\n        larger = num\n        while True:\n            larger = int(''.join(reversed(str(int(larger) + 1))))\n            if str(larger) == str(larger)[::-1]:\n                break\n        # Return the closest palindrome\n        if abs(int(num) - int(smaller)) < abs(int(num) - int(larger)):\n            return smaller\n        else:\n            return larger\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 34, in <module>\n  File \"<string>\", line 31, in check\n    assert candidate(123) == 121\nAssertionError\n", "passed": false}
{"task_id": "valid/25", "completion": "\n    try:\n        num = float(num)\n        if num < 0:\n            return \"Error: Square root of negative number is not a real number.\"\n        else:\n            return round(num ** 0.5, 2)\n    except ValueError:\n        return \"Error: Invalid input. Please enter a number.\"\n", "result": "passed", "passed": true}
{"task_id": "valid/26", "completion": "\n    # Check if input is a matrix\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise ValueError(\"Input is not a matrix\")\n\n    # Get number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Check if matrix is square\n    is_square = num_rows == num_cols\n\n    # Calculate sum of diagonal elements\n    sum_diagonal = sum(matrix[i][i] for i in range(num_rows))\n\n    return num_rows, num_cols, sum_diagonal, is_square\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 28, in check\n    assert candidate([[1, 2], [3, 4], [5, 6]]) == (3, 2, 5, False)\n  File \"<string>\", line 21, in matrix_properties\n    sum_diagonal = sum(matrix[i][i] for i in range(num_rows))\n  File \"<string>\", line 21, in <genexpr>\n    sum_diagonal = sum(matrix[i][i] for i in range(num_rows))\nIndexError: list index out of range\n", "passed": false}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n", "result": "passed", "passed": true}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n", "result": "passed", "passed": true}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n", "result": "passed", "passed": true}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data and json_data[key] == value:\n        return True\n    return False\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 26, in check\n    assert candidate('{\"name\": \"Alice\", \"age\": 30}', 'city', 'New York') == True\nAssertionError\n", "passed": false}
{"task_id": "valid/31", "completion": "\n    # Create an empty list to store the table buttons\n    table_buttons = []\n\n    # Calculate the number of rows needed\n    num_rows = -(-len(buttons) // num_columns)  # Ceiling division\n\n    # Iterate over the number of rows\n    for i in range(num_rows):\n        # Create a list to store the buttons for the current row\n        row_buttons = []\n\n        # Iterate over the number of columns\n        for j in range(num_columns):\n            # Calculate the index of the button in the list\n            index = i * num_columns + j\n\n            # If the index is within the bounds of the list, add the button to the row\n            if index < len(buttons):\n                # Create a button with the text of the button at the current index\n                button = {\n                    'text': buttons[index],\n                    'action': buttons[index]  # Assuming the action is the same as the button text\n                }\n\n                # Add the button to the row\n                row_buttons.append(button)\n\n        # Add the row of buttons to the table\n        table_buttons.append(row_buttons)\n\n    # Return the table of buttons\n    return table_buttons\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 46, in <module>\n  File \"<string>\", line 43, in check\n    assert candidate([\"A\", \"B\", \"C\", \"D\"], 2) == \"<table><tr><td><button onclick='buttonClicked(0)'>A</button></td><td><button onclick='buttonClicked(1)'>B</button></td></tr><tr><td><button onclick='buttonClicked(2)'>C</button></td><td><button onclick='buttonClicked(3)'>D</button></td></tr></table>\"\nAssertionError\n", "passed": false}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            continue\n        if s[i] not in alphabet or s[i + 1] not in alphabet:\n            return False\n        if alphabet.index(s[i]) > alphabet.index(s[i + 1]):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(\"abcde\") == False\nAssertionError\n", "passed": false}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n", "result": "passed", "passed": true}
{"task_id": "valid/34", "completion": "\n    total_sum = 0\n    current_num = ''\n    for char in ts:\n        if char.isdigit():\n            current_num += char\n        elif current_num:\n            total_sum += int(current_num)\n            current_num = ''\n    if current_num:\n        total_sum += int(current_num)\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n", "result": "passed", "passed": true}
{"task_id": "valid/36", "completion": "\n    # Validate array\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array must only contain numerical values.\")\n    \n    # Compute addition\n    result = sum(arr)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([1, 2, 'a', 3]) == \"Array contains non-numerical values.\"\n  File \"<string>\", line 11, in validate_and_add\n        raise ValueError(\"Array must only contain numerical values.\")\nValueError: Array must only contain numerical values.\n", "passed": false}
{"task_id": "valid/37", "completion": "\n    # Load JSON data into a Python list\n    neighborhoods = json.loads(json_data)\n\n    # Sort the list of neighborhoods based on their names\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x['name'])\n\n    # Extract the names of the neighborhoods and return them as a list\n    neighborhood_names = [neighborhood['name'] for neighborhood in sorted_neighborhoods]\n\n    return neighborhood_names\n\n", "result": "timed out", "passed": false}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        sum = abs(arr[i] + arr[i + 1])\n        if sum < min_sum:\n            min_sum = sum\n    return min_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 19, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([1, 3, -5, 7, 8, 20, -40, 6], 8) == (-5, 6)\nAssertionError\n", "passed": false}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Check if the total number of votes is at least 100\n    if len(votes) < 100:\n        raise ValueError(\"Total number of votes must be at least 100\")\n\n    # Iterate over each vote in the list\n    for vote in votes:\n        # Extract the candidate name and number of votes from the tuple\n        candidate, num_votes = vote\n\n        # Check if the number of votes is a positive integer not exceeding 1000\n        if not isinstance(num_votes, int) or num_votes <= 0 or num_votes > 1000:\n            raise ValueError(\"Number of votes must be a positive integer not exceeding 1000\")\n\n        # Convert the candidate name to uppercase letters and ensure it is not longer than 10 characters\n        candidate = candidate.upper()[:10]\n\n        # If the candidate is already in the results dictionary, add the current number of votes to their total\n        if candidate in results:\n            results[candidate] += num_votes\n        # Otherwise, add the candidate to the dictionary with their current number of votes\n        else:\n            results[candidate] = num_votes\n\n    # Calculate the total number of votes\n    total_votes = sum(results.values())\n\n    # Initialize an empty dictionary to store the percentage of votes for each candidate\n    percentages = {}\n\n    # Iterate over each candidate in the results dictionary\n    for candidate, num_votes in results.items():\n        # Calculate the percentage of votes for the candidate\n        percentage = (num_votes / total_votes) * 100\n\n        # Round the percentage to two decimal places\n        percentage = round(percentage, 2)\n\n        # Store the percentage in the percentages dictionary\n        percentages[candidate] = percentage\n\n    # Return the results and percentages dictionaries\n    return results, percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 62, in <module>\n  File \"<string>\", line 59, in check\n    assert candidate([(\"A\", 200), (\"B\", 300), (\"C\", 500)]) == {'A': {'votes': 200, 'percentage': 20.0}, 'B': {'votes': 300, 'percentage': 30.0}, 'C': {'votes': 500, 'percentage': 50.0}}\n  File \"<string>\", line 17, in calculate_election_results\n        raise ValueError(\"Total number of votes must be at least 100\")\nValueError: Total number of votes must be at least 100\n", "passed": false}
{"task_id": "valid/41", "completion": "\n    # Define the possible month abbreviations\n    month_abbreviations = {\n        'Jan': 'January', 'Feb': 'February', 'Mar': 'March', 'Apr': 'April',\n        'May': 'May', 'Jun': 'June', 'Jul': 'July', 'Aug': 'August',\n        'Sep': 'September', 'Oct': 'October', 'Nov': 'November', 'Dec': 'December'\n    }\n\n    # Check if the date string is in the DD-MM-YYYY format\n    if len(date_string) == 10 and date_string[2] == '-' and date_string[5] == '-':\n        # Split the date string into day, month, and year\n        day, month, year = date_string.split('-')\n        # Check if the day and month are valid\n        if 1 <= int(day) <= 31 and 1 <= int(month) <= 12:\n            # Check if the month is a written month\n            if month in month_abbreviations:\n                # Replace the written month with its full name\n                month = month_abbreviations[month]\n            # Try to parse the date\n            try:\n                date = datetime.strptime(date_string, '%d-%b-%Y')\n                # Return the date in the standardized format\n                return date.strftime('%B %d, %Y')\n            except ValueError:\n                # If the date is not valid, raise an error\n                raise ValueError('Invalid date')\n        else:\n            # If the day or month is not valid, raise an error\n            raise ValueError('Invalid date')\n    # If the date string is not in the DD-MM-YYYY format, raise an error\n    else:\n        raise ValueError('Invalid date format')\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 45, in check\n    assert candidate(\"01 Jan 2022\") == \"Saturday, January 01, 2022\"\n  File \"<string>\", line 41, in date_analyzer\n        raise ValueError('Invalid date format')\nValueError: Invalid date format\n", "passed": false}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'image': ['.jpg', '.png', '.gif', '.bmp'],\n        'video': ['.mp4', '.avi', '.mov', '.mkv'],\n        'document': ['.pdf', '.docx', '.txt', '.doc'],\n        'audio': ['.mp3', '.wav', '.ogg', '.flac'],\n        'spreadsheet': ['.xlsx', '.xls', '.csv'],\n        'presentation': ['.pptx', '.ppt', '.odp']\n    }\n    if allowed_type not in allowed_extensions:\n        return False\n    if not newname.endswith(allowed_extensions[allowed_type]):\n        return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 22, in check\n    assert candidate(\"oldfile.txt\", \"newfile.txt\", [\"txt\", \"pdf\", \"docx\"]) == True\n  File \"<string>\", line 15, in is_rename_allowed\n    if allowed_type not in allowed_extensions:\nTypeError: unhashable type: 'list'\n", "passed": false}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        return num % 2 == 0\n\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def remove_uneven(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                result.append(remove_uneven(item))\n            elif isinstance(item, (int, float)) and is_even(item):\n                result.append(item)\n            elif isinstance(item, str) and is_numeric(item):\n                result.append(item)\n        return tuple(result)\n\n    return remove_uneven(lst)\n", "result": "passed", "passed": true}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n", "result": "passed", "passed": true}
{"task_id": "valid/45", "completion": "\n    return sum(1 for char in string if char == specific_character)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate({}, 1, [0.8, 0.9]) == {1: [0.8, 0.9]}\nAssertionError\n", "passed": false}
{"task_id": "valid/47", "completion": "\n    pattern = re.compile(r'^[a-zA-Z0-9]{5}$')\n    return bool(pattern.match(string))\n\n", "result": "passed", "passed": true}
{"task_id": "valid/48", "completion": "\n    # Initialize an empty set to store unique languages\n    unique_languages = set()\n\n    # Iterate over each classifier in the list\n    for classifier in classifiers:\n        # Split the classifier string into parts\n        parts = classifier.split(\" :: \")\n\n        # Check if the classifier matches the expected format\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            # Extract the language and version\n            language = parts[1]\n\n            # Add the language to the set\n            unique_languages.add(language)\n\n    # Return the count of unique languages\n    return len(unique_languages)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/49", "completion": "\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1}\n  File \"<string>\", line 8, in arrayInstanceCount\n        if num in count:\nTypeError: unhashable type: 'list'\n", "passed": false}
{"task_id": "valid/50", "completion": "\n    # Define a dictionary to map URL patterns to view functions\n    url_patterns = {\n        r'^home/$': 'home_view',\n        r'^about/$': 'about_view',\n        # Add more URL patterns as needed\n    }\n\n    # Iterate over the URL patterns and check if the input URL matches any of them\n    for pattern, view in url_patterns.items():\n        if re.match(pattern, url):\n            # If a match is found, return the associated view function\n            return view\n\n    # If no match is found, return None\n    return None\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 29, in check\n    assert candidate(\"football/123\") == \"get_video_by_competition\"\nAssertionError\n", "passed": false}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n", "result": "passed", "passed": true}
{"task_id": "valid/52", "completion": "\n    sentence = \"Hello, how are you?\"\n    string = \"I am good, thank you.\"\n    return sentence + \" \" + string\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate() == \"Hello How are you today?\"\nAssertionError\n", "passed": false}
{"task_id": "valid/53", "completion": "\n    n = len(s)\n    substrings = set()\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substrings.add(s[i:j])\n    return substrings\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate(\"hello\") == ['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']\nAssertionError\n", "passed": false}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary.keys():\n            if key.startswith(\"price_\"):\n                price_sum += dictionary[key]\n    return price_sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate([{\"price\": 10}, {\"price_1\": 20}, {\"price_2\": 30}]) == 60\nAssertionError\n", "passed": false}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list1[:] = [value for value in list1 if value not in list2]\n    return intersection\n", "result": "passed", "passed": true}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request.method == request_method:\n                return func(request, *args, **kwargs)\n            else:\n                return HttpResponseNotAllowed(['GET', 'POST'])\n        return wrapper\n    return decorator\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 21, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate(\"GET\") == \"api_advisor_view\"\nAssertionError\n", "passed": false}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd_recursive(a - b, b)\n    return gcd_recursive(a, b - a)\n", "result": "passed", "passed": true}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        \n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        \n        # Extract the file extension from the file name\n        file_extension = os.path.splitext(file_name)[1]\n        \n        # Determine the category based on the directory path\n        if 'dev' in dir_path:\n            category = 'Development'\n        elif 'prod' in dir_path:\n            category = 'Production'\n        elif 'test' in dir_path:\n            category = 'Testing'\n        else:\n            category = 'Unknown'\n        \n        # Add the file to the corresponding category\n        if category not in categorized_files:\n            categorized_files[category] = []\n        categorized_files[category].append(file_path)\n    \n    return categorized_files\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 41, in <module>\n  File \"<string>\", line 37, in check\n    assert candidate([\"infra/config/outages/file1\", \"infra/config/generated/file2\", \"infra/config/other/file3\"]) == ({\"infra/config/outages/file1\"}, {\"infra/config/generated/file2\"}, {\"infra/config/other/file3\"})\n  File \"<string>\", line 11, in categorize_config_files\n        dir_path = os.path.dirname(file_path)\nNameError: name 'os' is not defined\n", "passed": false}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median\n", "result": "passed", "passed": true}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n", "result": "passed", "passed": true}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n", "result": "passed", "passed": true}
{"task_id": "valid/62", "completion": "\n    # Base case: If the start index is greater than the end index, the target is not in the array.\n    if start > end:\n        return False\n\n    # Calculate the middle index of the current search range.\n    mid = (start + end) // 2\n\n    # If the middle element is equal to the target, return True.\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half of the array.\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half of the array.\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 27, in check\n    assert candidate([1, 2, 3, 4, 5], 4, 0, 4) == 3\nAssertionError\n", "passed": false}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color == \"WHITE\":\n        return colors[1]\n    elif color == \"RED\":\n        return colors[2]\n    elif color == \"GREEN\":\n        return colors[3]\n    elif color == \"BLUE\":\n        return colors[0]\n    else:\n        return \"Invalid color\"\n", "result": "passed", "passed": true}
{"task_id": "valid/64", "completion": "\n    # Iterate over the list and increment each value by 1\n    for i in range(len(list)):\n        list[i] += 1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 14, in <module>\n  File \"<string>\", line 11, in check\n    assert candidate([1, 2, 3]) == [2, 3, 4]\nAssertionError\n", "passed": false}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        root = int(i ** 0.5)\n        if root * root == i:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "valid/66", "completion": "\n    # Convert the target string to lowercase\n    target = target.lower()\n    \n    # Iterate over each word in the list of words\n    for word in words:\n        # Convert the word to lowercase\n        word = word.lower()\n        \n        # Check if the word is equal to the target string\n        if word == target:\n            # If the word is equal to the target string, return the word\n            return word\n    \n    # If the target string is not found in the list of words, return None\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\n  File \"<string>\", line 23, in check\n    assert candidate([\"apple\", \"banana\", \"cherry\"], \"banana\") == 1\nAssertionError\n", "passed": false}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n", "result": "passed", "passed": true}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n", "result": "passed", "passed": true}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = f\"Hello, my name is {name} and I am {age} years old.\"\n    return phrase\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate() == \"Hello to the world\"\nAssertionError\n", "passed": false}
{"task_id": "valid/70", "completion": "\n    # Use list comprehension to create a new list with the capitalized version of each string\n    # Use regular expression to remove special characters\n    return [re.sub('[^A-Za-z0-9\\s]', '', s).strip().capitalize() for s in strings]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 18, in check\n    assert candidate([\"Hello\", \"World\"]) == [\"HELLO\", \"WORLD\"]\nAssertionError\n", "passed": false}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n", "result": "passed", "passed": true}
{"task_id": "valid/72", "completion": "\n    # Initialize an empty list to store bold text\n    bold_text = []\n    \n    # Initialize a flag to track if we are currently inside a bold tag\n    in_bold = False\n    \n    # Initialize an empty string to build the current bold text\n    current_bold = \"\"\n    \n    # Iterate over each character in the HTML code\n    for char in html_code:\n        # If we encounter a '<' and the next character is 'b' or 'B', we are entering a bold tag\n        if char == '<' and html_code[html_code.index(char) + 1] in ['b', 'B']:\n            in_bold = True\n        # If we encounter a '>' and we are currently inside a bold tag, we are exiting the bold tag\n        elif char == '>' and in_bold:\n            in_bold = False\n            # If we were building a bold text, add it to the list of bold texts\n            if current_bold:\n                bold_text.append(current_bold)\n                current_bold = \"\"\n        # If we are currently inside a bold tag, add the character to the current bold text\n        elif in_bold:\n            current_bold += char\n        # If we are not inside a bold tag, reset the current bold text\n        else:\n            current_bold = \"\"\n    \n    # Return the list of bold texts\n    return bold_text\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 44, in <module>\n  File \"<string>\", line 41, in check\n    assert candidate(\"<b>hello</b>\") == [\"hello\"]\nAssertionError\n", "passed": false}
{"task_id": "valid/73", "completion": "\n    # Define the list of items and their prices\n    items = {\n        \"1\": {\"name\": \"Soda\", \"price\": 1.00},\n        \"2\": {\"name\": \"Chips\", \"price\": 0.50},\n        \"3\": {\"name\": \"Candy\", \"price\": 0.25},\n    }\n\n    # Check if the item is in the list\n    if item in items:\n        # Calculate the change\n        change = money_inserted - items[item][\"price\"]\n        # Check if the user has enough money\n        if money_inserted >= items[item][\"price\"]:\n            # Update the stock\n            if items[item][\"name\"] in stock:\n                stock[items[item][\"name\"]] += 1\n            else:\n                stock[items[item][\"name\"]] = 1\n            # Return the change and the purchased item\n            return f\"Thank you for your purchase! Your change is ${change:.2f}. You purchased {items[item]['name']}.\"\n        else:\n            return \"Sorry, you don't have enough money to make this purchase.\"\n    else:\n        return \"Sorry, this item is not available in our vending machine.\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 39, in <module>\n  File \"<string>\", line 35, in check\n    assert candidate(\"cola\", 2.00) == \"Transaction successful. Change: 0.5\"\nAssertionError\n", "passed": false}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    merged_list = list(set(merged_list))\n    return merged_list\n", "result": "passed", "passed": true}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n", "result": "passed", "passed": true}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(\"Hello, World!\") == b'SGVsbG8sIFdvcmxkIQ=='\nAssertionError\n", "passed": false}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n", "result": "passed", "passed": true}
{"task_id": "valid/78", "completion": "\n    # Define a variable with a specific value\n    specific_value = 5\n\n    # Define a function that assigns the specific value to a variable\n    def assign_value(var):\n        var = specific_value\n        return var\n\n    # Define a function that validates the assigned value\n    def validate_value(var):\n        if var == specific_value:\n            return True\n        else:\n            return False\n\n    # Assign the specific value to a variable using the assign_value function\n    assigned_value = assign_value(0)\n\n    # Validate the assigned value using the validate_value function\n    is_valid = validate_value(assigned_value)\n\n    # Return the result of the validation\n    return is_valid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35, in <module>\n  File \"<string>\", line 31, in check\n    assert candidate() == '0000000000000101'\nAssertionError\n", "passed": false}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate(5) == \"integer\"\nAssertionError\n", "passed": false}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n    merged = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == merged[-1]:\n            merged[-1] = arr[i]\n        else:\n            merged.append(arr[i])\n    return merged\n", "result": "passed", "passed": true}
{"task_id": "valid/82", "completion": "\n    # Tokenize the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    return words\n\n", "result": "passed", "passed": true}
{"task_id": "valid/83", "completion": "\n    # Filter numbers divisible by 3 and 7\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    # Calculate average\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    \n    # Find maximum and minimum values\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    \n    # Display number of occurrences of each unique number divisible by 3 and 7\n    unique_divisible_numbers = set(divisible_numbers)\n    for num in unique_divisible_numbers:\n        count = divisible_numbers.count(num)\n        print(f\"Number {num} occurs {count} times.\")\n    \n    # Display results\n    print(f\"Average of numbers divisible by 3 and 7: {average}\")\n    print(f\"Maximum value: {max_value}\")\n    print(f\"Minimum value: {min_value}\")\n", "result": "passed", "passed": true}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        word = word.lower()\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    highest_frequency_words = [word for word, freq in frequency.items() if freq == max_frequency]\n    return highest_frequency_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(\"hello world hello\") == \"hello\"\nAssertionError\n", "passed": false}
{"task_id": "valid/85", "completion": "\n    return round(math.e, decimal_places)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_numbers = sum(numbers)\n    return average, sum_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)", "result": "passed", "passed": true}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for entry in encyclopedia:\n        related_articles_count[entry] = 0\n        for other_entry in encyclopedia:\n            if entry != other_entry:\n                related_articles_count[entry] += 1\n    return related_articles_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate(encyclopedia) == {\nAssertionError\n", "passed": false}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n", "result": "passed", "passed": true}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n", "result": "passed", "passed": true}
{"task_id": "valid/91", "completion": "\n    root = Element('root')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 34, in <module>\n  File \"<string>\", line 31, in check\n    assert candidate({'name': 'John', 'age': 30, 'city': 'New York'}) == '<data><name>John</name><age>30</age><city>New York</city></data>'\nAssertionError\n", "passed": false}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n", "result": "passed", "passed": true}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    return sum_odd / count_odd\n", "result": "passed", "passed": true}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n-1]\n", "result": "passed", "passed": true}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n", "result": "passed", "passed": true}
{"task_id": "valid/97", "completion": "\n    description = \"Discord bot for managing music in servers.\\n\"\n    description += \"Features:\\n\"\n    description += \"  - Play music in servers\\n\"\n    description += \"  - Manage personal playlists\\n\"\n    description += \"  - Server settings\\n\"\n    description += \"Commands:\\n\"\n    for command, info in mapping.items():\n        description += f\"  - {command}: {info['description']}\\n\"\n        if 'aliases' in info:\n            description += f\"    Aliases: {', '.join(info['aliases'])}\\n\"\n        if 'usage' in info:\n            description += f\"    Usage: {info['usage']}\\n\"\n        if 'help' in info:\n            description += f\"    Help: {info['help']}\\n\"\n        description += \"\\n\"\n    return description\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\n  File \"<string>\", line 26, in check\n    assert candidate({'Music': ['play', 'pause', 'skip']}) == \"chime is a versatile, yet intuitive music bot for discord. It aims to be as user-friendly as possible while still boasting many features. \\n\\n**More info and invite link [here](https://chime.realmayus.xyz)** \\n\\nChime has a **web app** where you can manage and set up personal playlists and manage settings of your servers! https://chime.realmayus.xyz \\n\\n**Use** `!help [command]` **for more info on a command.**\\n\\n**Music**\\n- play\\n- pause\\n- skip\\n\"\n  File \"<string>\", line 15, in create_discord_bot_description\n        description += f\"  - {command}: {info['description']}\\n\"\nTypeError: list indices must be integers or slices, not str\n", "passed": false}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n", "result": "timed out", "passed": false}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n", "result": "passed", "passed": true}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"minor\"\n    elif age < 65:\n        return \"adult\"\n    else:\n        return \"senior\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 20, in <module>\n  File \"<string>\", line 17, in check\n    assert candidate(5) == \"child\"\nAssertionError\n", "passed": false}
{"task_id": "valid/101", "completion": "\n    # Define the grade scale\n    grade_scale = {\n        90: \"A\",\n        80: \"B\",\n        70: \"C\",\n        60: \"D\",\n        0: \"F\"\n    }\n\n    # Determine the letter grade\n    letter_grade = grade_scale.get(numerical_grade, \"Invalid grade\")\n\n    # Calculate the GPA\n    gpa = (numerical_grade / 100) * 4.0\n\n    # Return the letter grade and GPA\n    return letter_grade, gpa\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 27, in check\n    assert candidate(95) == (\"A\", 4.0)\nAssertionError\n", "passed": false}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n", "result": "passed", "passed": true}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_vowels = {palindrome: sum(1 for char in palindrome.lower() if char in vowels) for palindrome, _ in palindrome_tuples}\n    return palindrome_vowels\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 16, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate((\"racecar\", \"level\", \"deed\")) == {\"racecar\": 3, \"level\": 2, \"deed\": 2}\n  File \"<string>\", line 9, in count_vowels_in_palindromes\n    palindrome_vowels = {palindrome: sum(1 for char in palindrome.lower() if char in vowels) for palindrome, _ in palindrome_tuples}\n  File \"<string>\", line 9, in <dictcomp>\n    palindrome_vowels = {palindrome: sum(1 for char in palindrome.lower() if char in vowels) for palindrome, _ in palindrome_tuples}\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "valid/104", "completion": "\n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Remove all non-alphanumeric characters\n    s = ''.join(e for e in s if e.isalnum())\n    \n    # Remove all duplicate characters\n    s = ''.join(dict.fromkeys(s))\n    \n    return s\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 19, in check\n    assert candidate(\"hello\") == \"HELLO\"\nAssertionError\n", "passed": false}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n", "result": "passed", "passed": true}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package, version = dependency\n        # Extract the version number from the string\n        version_number = version.split('_')[-1]\n        # Extract the date and time from the version number\n        date_time = version_number.split('H')[0]\n        # Convert the date and time to a datetime object\n        date_time = datetime.strptime(date_time, '%Y%m%d%H%M')\n        # If this is the first version of this package, or it's newer than the current latest version, update the latest version\n        if package not in latest_versions or date_time > latest_versions[package].date_time:\n            latest_versions[package] = {'version': version, 'date_time': date_time}\n    # Return a list of tuples containing the package name and the latest version\n    return [(package, version['version']) for package, version in latest_versions.items()]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 28, in <module>\n  File \"<string>\", line 24, in check\n    assert candidate([('package1', '0001_auto_20220101_1200'), ('package2', '0002_auto_20220102_1300'), ('package1', '0003_auto_20220103_1400')]) == {'package1': '0003_auto_20220103_1400', 'package2': '0002_auto_20220102_1300'}\n  File \"<string>\", line 16, in extract_latest_versions\n        date_time = datetime.strptime(date_time, '%Y%m%d%H%M')\nNameError: name 'datetime' is not defined\n", "passed": false}
{"task_id": "valid/107", "completion": "\n    # Define a dictionary to map actions to categories\n    action_categories = {\n        \"accidentally\": \"Accidental\",\n        \"intentionally\": \"Intentional\",\n        \"due to\": \"Medical\",\n        \"as a result of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"by\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from\": \"Medical\",\n        \"with\": \"Medical\",\n        \"in\": \"Medical\",\n        \"on\": \"Medical\",\n        \"of\": \"Medical\",\n        \"to\": \"Medical\",\n        \"during\": \"Medical\",\n        \"while\": \"Medical\",\n        \"because of\": \"Medical\",\n        \"from", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 79\n        \"from\n    \"from\n    ^\nSyntaxError: unterminated string literal (detected at line 79)\n", "passed": false}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n", "result": "passed", "passed": true}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate(\"Hello, World!\") == []\nAssertionError\n", "passed": false}
{"task_id": "valid/110", "completion": "\n    # Define punctuation marks\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    # Remove punctuation marks from string\n    no_punct = ''.join(char for char in string if char not in punctuations)\n    return no_punct\n", "result": "passed", "passed": true}
{"task_id": "valid/111", "completion": "\n    # Create a list to store the results\n    result = []\n    \n    # Iterate over each number in the input list\n    for num in num_list:\n        # Check if the number is a list\n        if isinstance(num, list):\n            # If the number is a list, recursively call the function on the list\n            result.append(raise_power(num, exp))\n        else:\n            # If the number is not a list, raise it to the power of the exponent\n            result.append(num ** exp)\n    \n    # Return the list of results\n    return result\n", "result": "passed", "passed": true}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for i, value in enumerate(min_values):\n        print(f\"Minimum value in row {i+1} is {value}\")\n", "result": "passed", "passed": true}
{"task_id": "valid/113", "completion": "\n    if n == 0:\n        return\n    if current_num % 2 == 0:\n        print(f\"Thank you for the {current_num}th even number!\")\n    else:\n        print(f\"Thank you for the {current_num}th odd number!\")\n    print_thank_you(n - 1, current_num + 1)\n", "result": "passed", "passed": true}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n        else:\n            break\n    return count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 23, in <module>\n  File \"<string>\", line 20, in check\n    assert candidate([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3) == 3\nAssertionError\n", "passed": false}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    return len(str(num)) == len(set(str(num))) and all(digit == '1' for digit in str(num))\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 33, in <module>\n  File \"<string>\", line 30, in check\n    assert candidate(1111) == True\nAssertionError\n", "passed": false}
{"task_id": "valid/116", "completion": "\n    # Base case: if the string is empty, return it as is\n    if not s:\n        return s\n\n    # If the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0] in 'aeiouAEIOU':\n        return remove_vowels_recursive(s[1:])\n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])  # <--- changed here\n", "result": "passed", "passed": true}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python application.py [options]\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}: {option[1]}\\n\"\n    return help_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 18, in <module>\n  File \"<string>\", line 15, in check\n    assert candidate([(\"h\", \"Display help message\"), (\"v\", \"Enable verbose mode\")]) == \"Usage: app_name [OPTIONS]\\n\\nOptions:\\n  h           Display help message\\n  v           Enable verbose mode\\n\" \nAssertionError\n", "passed": false}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n", "result": "passed", "passed": true}
{"task_id": "valid/119", "completion": "\n    return Val.count(1)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}\nAssertionError\n", "passed": false}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 13, in <module>\n  File \"<string>\", line 10, in check\n    assert candidate([0, 1, 1, 0]) == [1, 0, 0, 1]\n  File \"<string>\", line 6, in invert_bitset\n    return ~sample_bitset & 0xFFFFFFFF\nTypeError: bad operand type for unary ~: 'list'\n", "passed": false}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "valid/123", "completion": "\n    # Initialize quotient to 0\n    q = 0\n    # Initialize remainder to 0\n    r = 0\n    # Loop until remainder is less than divisor\n    while r < t:\n        # Add divisor to remainder\n        r += t\n        # Increment quotient\n        q += 1\n    # Subtract remainder from dividend\n    h -= r\n    # Decrement quotient\n    q -= 1\n    # While dividend is greater than or equal to divisor\n    while h >= t:\n        # Subtract divisor from dividend\n        h -= t\n        # Increment quotient\n        q += 1\n    # Return quotient\n    return q\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 32, in check\n    assert candidate(10, 2) == 5\nAssertionError\n", "passed": false}
{"task_id": "valid/124", "completion": "\n    return sum([i for i in input_list if i % 2 != 0])\n", "result": "passed", "passed": true}
{"task_id": "valid/125", "completion": "\n    # Convert string to lowercase\n    string = string.lower()\n    # Initialize count of consonants\n    count = 0\n    # Iterate over each character in the string\n    for char in string:\n        # Check if character is a letter\n        if char.isalpha():\n            # Check if character is a consonant\n            if char not in 'aeiou':\n                # Increment count of consonants\n                count += 1\n    # Return count of consonants\n    return count\n", "result": "passed", "passed": true}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on the energy values\n    num_electrons = []\n    for i in range(len(grid_energies)):\n        num_electrons.append(ados[i] * (1 + dope * (grid_energies[i] - dos_grid_size / 2) / dos_grid_size))\n\n    # Adjust the number of electrons based on doping levels\n    adjusted_num_electrons = []\n    for i in range(len(num_electrons)):\n        adjusted_num_electrons.append(num_electrons[i] * (1 + dope * (grid_energies[i] - dos_grid_size / 2) / dos_grid_size))\n\n    return adjusted_num_electrons\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 24, in <module>\n  File \"<string>\", line 21, in check\n    assert candidate([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 0, 5) == 0.0\nAssertionError\n", "passed": false}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n", "result": "passed", "passed": true}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    return [arr[-1]] + arr[:-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 14, in check\n    assert candidate([1, 2, 3, 4, 5]) == [5, 1, 4, 2, 3]\nAssertionError\n", "passed": false}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n", "result": "passed", "passed": true}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    seen = set()\n    for element in lst:\n        if element not in seen:\n            unique_elements.append(element)\n            seen.add(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n", "result": "passed", "passed": true}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 12, in <module>\n  File \"<string>\", line 9, in check\n    assert candidate([\"apple\", \"banana\", \"cherry\"]) == \"apple, banana, cherry\"\nAssertionError\n", "passed": false}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n", "result": "passed", "passed": true}
{"task_id": "valid/134", "completion": "\n    pattern = re.compile(r'^\\d+\\.\\d+$')\n    return bool(pattern.match(string))\n\n", "result": "passed", "passed": true}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations\n    from django.db.models.deletion import CASCADE\n\n    operations = [\n        migrations.AlterField(\n            model_name='{model_name}',\n            name='{field_name}',\n            field=models.ForeignKey(on_delete=CASCADE, to='history.{model_name}'),\n        ),\n    ]\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            ('history', '{app_name}_0001_initial'),\n        ]\n\n        operations = operations\n    \"\"\"\n    return migration_operation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 34)\n", "passed": false}
{"task_id": "valid/136", "completion": "\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find common elements between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the sum of common elements\n    common_elements_sum = sum(common_elements)\n    \n    return common_elements_sum\n", "result": "passed", "passed": true}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # Determine the forecast period by taking 1% of the dataset length and rounding to the nearest integer\n    forecast_period = math.ceil(dataset_length * 0.01)\n    \n    return forecast_period\n\n", "result": "passed", "passed": true}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n", "result": "passed", "passed": true}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n", "result": "passed", "passed": true}
{"task_id": "valid/140", "completion": "\n    n = [int(x) for x in n_str]\n    n = n[::-1]\n    carry = 0\n    for i in range(len(n)):\n        n[i] = n[i] * 2 + carry\n        carry = n[i] // 10\n        n[i] = n[i] % 10\n    if carry > 0:\n        n.append(carry)\n    n = n[::-1]\n    return ''.join(map(str, n))  # return string representation of the doubled number\n", "result": "passed", "passed": true}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"main\": (0.0, 0.0, 0.0),\n        \"home\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.0, 0.5),\n        \"down\": (0.0, 0.0, -0.5),\n        \"left\": (-0.5, 0.0, 0.0),\n        \"right\": (0.5, 0.0, 0.0),\n        \"forward\": (0.0, 0.5, 0.0),\n        \"backward\": (0.0, -0.5, 0.0),\n    }\n    return presets.get(preset_name, (0.0, 0.0, 0.0))  # return default value if preset not found\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 23, in check\n    assert candidate(\"c\") == (3.5, 3.5, 3.5)\nAssertionError\n", "passed": false}
{"task_id": "valid/142", "completion": "\n    # Convert lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find common elements between the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the product of the common elements\n    product = 1\n    for element in common_elements:\n        product *= element\n    \n    return product\n", "result": "passed", "passed": true}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        if zoom_level == 1:\n            return \"Quiz system allows multiple answers and zoom level is 1\"\n        elif zoom_level == 2:\n            return \"Quiz system allows multiple answers and zoom level is 2\"\n        else:\n            return \"Quiz system allows multiple answers but zoom level is not defined\"\n    else:\n        if zoom_level == 1:\n            return \"Quiz system does not allow multiple answers and zoom level is 1\"\n        elif zoom_level == 2:\n            return \"Quiz system does not allow multiple answers and zoom level is 2\"\n        else:\n            return \"Quiz system does not allow multiple answers but zoom level is not defined\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 27, in <module>\n  File \"<string>\", line 24, in check\n    assert candidate(True, 3) == \"If multiple answers are allowed and the maximum zoom level is 3, the quiz system behavior is: Players can provide multiple answers to the same question and the maximum zoom level allowed is 2.\"\nAssertionError\n", "passed": false}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n", "result": "passed", "passed": true}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in sorted(a.keys() & b.keys()):\n        if isinstance(a[key], dict) and isinstance(b[key], dict):\n            merged[key] = merge_objects(a[key], b[key])\n        else:\n            merged[key] = b[key]\n    for key in sorted(a.keys() - b.keys()):\n        merged[key] = a[key]\n    for key in sorted(b.keys() - a.keys()):\n        merged[key] = b[key]\n    return merged\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 35, in <module>\n  File \"<string>\", line 33, in check\n    assert candidate({'1': 1, '2': 2}, {'c': 3, 'd': 4}) == {'c': 3, 'd': 4}\nAssertionError\n", "passed": false}
{"task_id": "valid/147", "completion": "\n    try:\n        # Check if dictionary is empty\n        if not d:\n            return None\n\n        # Initialize max_value with first value from dictionary\n        max_value = list(d.values())[0]\n\n        # Iterate over dictionary values\n        for value in d.values():\n            # Check if value is a dictionary\n            if isinstance(value, dict):\n                # Recursively find max value in nested dictionary\n                max_value = max(max_value, find_max_in_dict(value))\n            else:\n                # Update max_value if current value is greater\n                max_value = max(max_value, value)\n\n        return max_value\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37, in <module>\n  File \"<string>\", line 34, in check\n    assert candidate({'a': {'x': 5, 'y': 8}, 'b': 2, 'c': 3}) == 8\nAssertionError\n", "passed": false}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n", "result": "passed", "passed": true}
{"task_id": "valid/149", "completion": "\n    if not string:\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*'\n", "result": "passed", "passed": true}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n", "result": "passed", "passed": true}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and x % 3 == 0 and x % 5 == 0 and x % 7 == 0\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 17, in <module>\n  File \"<string>\", line 13, in check\n    assert candidate(4) == True\nAssertionError\n", "passed": false}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n", "result": "passed", "passed": true}
