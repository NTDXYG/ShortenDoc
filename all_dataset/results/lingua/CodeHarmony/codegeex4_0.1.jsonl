{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        'politics': ['government', 'election', 'policy', 'legislative'],\n        'sports': ['football', 'basketball', 'tennis', 'golf'],\n        'entertainment': ['movie', 'music', 'celebrity', 'television'],\n        'technology': ['computer', 'software', 'hardware', 'internet'],\n        'business': ['finance', 'stock', 'market', 'economy'],\n        'health': ['medicine', 'healthcare', 'disease', 'wellness'],\n        'education': ['school', 'university', 'student', 'teacher'],\n        'travel': ['vacation', 'destination', 'tourism', 'transportation'],\n        'food': ['recipe', 'cuisine', 'restaurant', 'diet'],\n        'science': ['astronomy', 'biology', 'physics', 'chemistry'],\n        'religion': ['church', 'religion', 'faith', 'god'],\n        'lifestyle': ['fashion', 'beauty', 'fitness', 'hobby'],\n        'weather': ['climate', 'temperature', 'precipitation', 'wind'],\n        'crime': ['crime', 'police', 'criminal', 'law'],\n        'social': ['social', 'community', 'culture', 'society'],\n        'other': ['other', 'unknown', 'miscellaneous', 'general']\n    }\n\n    # Initialize category scores\n    category_scores = {category: 0 for category in categories}\n\n    # Tokenize text\n    tokens = text.split()\n\n    # Score each category based on the presence of keywords\n    for token in tokens:\n        for category, keywords in categories.items():\n            if token.lower() in keywords:\n                category_scores[category] += 1\n\n    # Find the category with the highest score\n    max_score = max(category_scores.values())\n    for category, score in category_scores.items():\n        if score == max_score:\n            return category\n\n    # If no category has a score, return 'other'\n    return 'other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments = ['piano', 'guitar', 'drums', 'bass', 'violin', 'flute', 'clarinet', 'saxophone', 'trumpet', 'tuba']\n    sorted_instruments = sorted(instruments, reverse=True)\n    return sorted_instruments\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    else:\n        return n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    # Initialize the result\n    result = 0\n\n    # Loop until the base is greater than the number\n    while base <= n:\n        # Multiply the base by 2\n        base *= 2\n        # Increment the result\n        result += 1\n\n    # Return the result\n    return result"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string provided.\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is already in the set, return False\n        if char in unique_chars:\n            return False\n        # Otherwise, add the character to the set\n        unique_chars.add(char)\n\n    # If we reach this point, all characters are unique\n    return True\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        return \"Error: Text too long\"\n    else:\n        return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove digits\n    text = text.translate(str.maketrans('', '', string.digits))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + word1 + r'|' + word2 + r')\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(x) for x in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        line = line.strip()\n        if line.startswith('tabstop'):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = line.split('=')[1] == 'true'\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)"}
{"task_id": "valid/19", "completion": "\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            return get_nested_dictionary_value(value)\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Find the closest palindrome smaller than the given number\n    smaller_palindrome = num - 1\n    while str(smaller_palindrome) != str(smaller_palindrome)[::-1]:\n        smaller_palindrome -= 1\n    \n    # Find the closest palindrome larger than the given number\n    larger_palindrome = num + 1\n    while str(larger_palindrome) != str(larger_palindrome)[::-1]:\n        larger_palindrome += 1\n    \n    # Return the closest palindrome\n    if abs(num - smaller_palindrome) <= abs(num - larger_palindrome):\n        return smaller_palindrome\n    else:\n        return larger_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict):\n        if key not in json_data or json_data[key] != value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i+num_columns]\n        table.append(row)\n    return table\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s or alphabet[i+1] not in s:\n            return False\n        if s.index(alphabet[i]) > s.index(alphabet[i+1]):\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if all elements in the array are numbers\n    if all(isinstance(x, (int, float)) for x in arr):\n        # Compute the sum of all elements in the array\n        return sum(arr)\n    else:\n        # Return an error message if the array contains non-numerical values\n        return \"Error: Array contains non-numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = [neighborhood['name'] for neighborhood in json_data]\n    neighborhoods.sort()\n    return neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Sort the array\n    arr.sort()\n\n    # Initialize result\n    res = float('inf')\n\n    # Initialize left and right\n    l = 0\n    r = n - 1\n\n    # While there are elements between l and r\n    while l < r:\n        # Calculate current sum\n        current_sum = arr[l] + arr[r]\n\n        # Update result if current sum is smaller than result\n        res = min(res, abs(current_sum))\n\n        # If current sum is 0, return 0\n        if current_sum == 0:\n            return 0\n\n        # If current sum is negative, increment l\n        if current_sum < 0:\n            l += 1\n\n        # If current sum is positive, decrement r\n        else:\n            r -= 1\n\n    # Return result\n    return res\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    results = {}\n    total_votes = 0\n\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        total_votes += number_of_votes\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n\n    for candidate_name, vote_count in results.items():\n        percentage = (vote_count / total_votes) * 100\n        print(f\"{candidate_name}: {vote_count} votes ({percentage:.2f}%)\")\n\ncalculate_election_results([(\"John\", 500), (\"Jane\", 300), (\"John\", 200)])"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Try to parse the date string using the given formats\n        date = datetime.strptime(date_string, \"%d-%m-%Y\")\n    except ValueError:\n        try:\n            # Try to parse the date string using the alternative format\n            date = datetime.strptime(date_string, \"%d-%b-%Y\")\n        except ValueError:\n            # If both formats fail, raise an error\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n    # Check if the date is valid\n    if date.year < 1000 or date.year > 9999:\n        raise ValueError(\"Year must be between 1000 and 9999.\")\n    if date.month < 1 or date.month > 12:\n        raise ValueError(\"Invalid month.\")\n    if date.day < 1 or date.day > 31:\n        raise ValueError(\"Invalid day.\")\n    if date.month in [4, 6, 9, 11] and date.day > 30:\n        raise ValueError(\"Invalid day for the given month.\")\n    if date.month == 2:\n        if date.day > 29:\n            raise ValueError(\"Invalid day for February.\")\n        if date.day == 29 and not (date.year % 4 == 0 and (date.year % 100 != 0 or date.year % 400 == 0)):\n            raise ValueError(\"Invalid day for February in a non-leap year.\")\n\n    # Return the date in the standardized format\n    return date.strftime(\"%B %d, %Y\")\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'image': ['.jpg', '.jpeg', '.png', '.gif'],\n        'document': ['.pdf', '.doc', '.docx', '.txt'],\n        'video': ['.mp4', '.avi', '.mov'],\n        'audio': ['.mp3', '.wav', '.flac']\n    }\n    if allowed_type not in allowed_extensions:\n        return False\n    new_extension = os.path.splitext(newname)[1]\n    return new_extension in allowed_extensions[allowed_type]\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(x):\n        if isinstance(x, int) or isinstance(x, float):\n            return x % 2 == 0\n        elif isinstance(x, str):\n            try:\n                return int(x) % 2 == 0\n            except ValueError:\n                return False\n        else:\n            return False\n\n    def remove_uneven_helper(lst):\n        if isinstance(lst, tuple):\n            return tuple(remove_uneven_helper(x) for x in lst if is_even(x))\n        else:\n            return lst\n\n    return remove_uneven_helper(lst)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to_histogram(histogram_data, generation, accs)\n    # histogram_data = add_accuracy_to"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language :: \"):\n            language = classifier.split(\" :: \")[2]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for row in arr:\n        for num in row:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create an empty list to store the counts\n    counts = []\n\n    # Iterate through the dictionary and add each count to the list\n    for num, count in count_dict.items():\n        counts.append(count)\n\n    # Return the list of counts\n    return counts\n"}
{"task_id": "valid/50", "completion": "\n    from django.urls import path\n    from . import views\n\n    urlpatterns = [\n        path('videos/', views.video_list, name='video_list'),\n        path('videos/<int:video_id>/', views.video_detail, name='video_detail'),\n    ]\n\n    # Your task is to write a function `match_url_to_view` that takes a URL as input and returns the corresponding view function name if it matches one of the URL patterns in the `urlpatterns` list. If the URL does not match any of the patterns, the function should return None.\n\n    # For example, if the input URL is '/videos/123/', the function should return 'video_detail'. If the input URL is '/videos/', the function should return 'video_list'. If the input URL does not match any of the patterns, the function should return None.\n\n    # You can use regular expressions to match the URL patterns. Here's an example of how you can use regular expressions to match a URL pattern:\n\n    # import re\n    # pattern = re.compile(r'^/videos/(?P<video_id>\\d+)/$')\n    # match = pattern.match('/videos/123/')\n    # if match:\n    #     video_id = match.group('video_id')\n    #     print(video_id)  # Output: 123\n\n    # You can use the `re.compile()` function to compile a regular expression pattern. The pattern should start with `^` to match the beginning of the string, followed by the URL pattern, and end with `$` to match the end of the string. You can use named groups to capture parts of the URL pattern that you want to extract.\n\n    # In the example above, the pattern `r'^/videos/(?P<video_id>\\d+)/$'` matches a URL that starts with '/videos/', followed by one or more digits (captured in the named group `video_id`), and ends with '/'. The `match()` function is used to match the pattern against the input URL. If a match is found, the `group()` method is used to extract the value of the named group `video_id`.\n\n    # You can use a similar approach to match the other URL patterns in the `urlpatterns` list. Here's an example of how you can match the '/videos/' URL pattern:\n\n    # pattern = re.compile(r'^/videos/$')\n    # match = pattern.match('/videos/')\n    # if match:\n    #     print('Matched')  # Output: Matched"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world!\"\n    return string + sentence\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.append(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for list_of_dict in list_of_dicts:\n        for dict in list_of_dict:\n            for key in dict.keys():\n                if key.startswith(\"price_\"):\n                    price_sum += dict[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = list(set(list1) & set(list2))\n    list2 = [i for i in list2 if i not in intersection]\n    return intersection, list2\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        func.route = request_method\n        return func\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'global': [],\n        'environment': [],\n        'service': [],\n        'application': []\n    }\n\n    for file_path in file_paths:\n        # Split the file path into parts\n        parts = file_path.split('/')\n\n        # Determine the category based on the directory structure\n        if 'global' in parts:\n            categorized_files['global'].append(file_path)\n        elif 'environment' in parts:\n            categorized_files['environment'].append(file_path)\n        elif 'service' in parts:\n            categorized_files['service'].append(file_path)\n        elif 'application' in parts:\n            categorized_files['application'].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = ['WHITE', 'RED', 'GREEN', 'BLUE']\n    current_index = colors.index(color)\n    next_index = (current_index + 1) % len(colors)\n    return colors[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    return [x + 1 for x in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char.isalpha() and char.lower() == target.lower():\n                return char\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys in given dictionary are:\")\n    for key in dict:\n        print(key)\n\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"Hello, world!\"\n    string = \"This is a string.\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n\n"}
{"task_id": "valid/70", "completion": "\n    def is_special_char(c):\n        return not (c.isalnum() or c.isspace())\n\n    def process_strings(strings):\n        result = []\n        for string in strings:\n            if all(not is_special_char(c) for c in string):\n                result.append(string.capitalize())\n        return result\n\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_text = html_code[start_index + len(start_tag):end_index]\n        bold_tags.append(bold_text)\n        start_index = end_index + len(end_tag)\n    return bold_tags"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n    \n    # Check if the item exists in the vending machine\n    if item not in items:\n        return \"Item not found in vending machine.\"\n    \n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds.\"\n    \n    # Calculate the change to return to the user\n    change = money_inserted - items[item]\n    \n    # Update the stock of the item purchased\n    items[item] -= 1\n    \n    return f\"Here is your {item}. Your change is ${change:.2f}.\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode())\n    return encoded_string.decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_variable = 10\n\n    # Validate the variable\n    if isinstance(my_variable, int):\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    # Convert the word to a list of characters\n    char_list = list(word)\n    # Shuffle the list of characters\n    random.shuffle(char_list)\n    # Join the shuffled characters back into a string\n    rearranged_word = ''.join(char_list)\n    return rearranged_word\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    elif isinstance(element, frozenset):\n        return \"Frozenset\"\n    elif isinstance(element, type(None)):\n        return \"None\"\n    else:\n        return \"Other\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return []\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    # Remove all non-word characters (everything except numbers and letters)\n    text = re.sub(r\"[^\\w\\s]\", '', text)\n\n    # Replace all runs of whitespace with a single space\n    text = re.sub(r\"\\s+\", ' ', text)\n\n    # Remove leading and trailing whitespace\n    text = text.strip()\n\n    # Convert all characters to lowercase\n    text = text.lower()\n\n    # Tokenize the text\n    tokens = text.split()\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        print(\"No numbers divisible by both 3 and 7 found.\")\n        return\n\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    print(f\"Average of numbers divisible by both 3 and 7: {average}\")\n\n    max_value = max(divisible_numbers)\n    print(f\"Maximum value: {max_value}\")\n\n    min_value = min(divisible_numbers)\n    print(f\"Minimum value: {min_value}\")\n\n    occurrences = {}\n    for num in divisible_numbers:\n        if num in occurrences:\n            occurrences[num] += 1\n        else:\n            occurrences[num] = 1\n\n    print(\"Occurrences of each unique number:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n"}
{"task_id": "valid/84", "completion": "\n    word_frequency = {}\n    for word in sentence.split():\n        if word in word_frequency:\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n\n    highest_frequency = max(word_frequency.values())\n    highest_frequency_words = [word for word, frequency in word_frequency.items() if frequency == highest_frequency]\n\n    return highest_frequency_words\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 2.0\n    for i in range(1, decimal_places + 1):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if not numbers:\n        return 0, 0\n    average = sum(numbers) / len(numbers)\n    return average, sum(numbers)\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    min_value = min(time_series)\n    max_value = max(time_series)\n    return min_value, max_value"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    return lst.index(max_value)\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='utf-8').decode('utf-8')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if (i & 1) == 1:\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a ^ set_b\n"}
{"task_id": "valid/97", "completion": "\n\n    **Features:**\n    - Play music in a server\n    - Manage and play personal playlists\n    - Manage server settings\n    - Provide information about bot features and web app\n    - Categorize commands and provide help information for each command\n\n    **Web App:**\n    - Manage personal playlists\n    - Manage server settings\n    - View bot statistics\n    - Access help information for each command\n\n    **Commands:**\n    - `{mapping['play']}`: Play a song in the current channel\n    - `{mapping['pause']}`: Pause the currently playing song\n    - `{mapping['resume']}`: Resume the currently paused song\n    - `{mapping['stop']}`: Stop the currently playing song\n    - `{mapping['skip']}`: Skip the currently playing song\n    - `{mapping['queue']}`: View the current song queue\n    - `{mapping['playlist']}`: Manage personal playlists\n    - `{mapping['settings']}`: Manage server settings\n    - `{mapping['help']}`: View help information for each command\n    - `{mapping['about']}`: View information about the bot and web app\n\n    **Categorization:**\n    - Music commands: `{mapping['play']}`, `{mapping['pause']}`, `{mapping['resume']}`, `{mapping['stop']}`, `{mapping['skip']}`, `{mapping['queue']}`\n    - Playlist commands: `{mapping['playlist']}`\n    - Settings commands: `{mapping['settings']}`\n    - Help commands: `{mapping['help']}`, `{mapping['about']}`\n\n    **Help Information:**\n    - `{mapping['help']}`: View help information for each command\n    - `{mapping['about']}`: View information about the bot and web app\n\n    **Web App Features:**\n    - Manage personal playlists: Create, edit, and delete playlists\n    - Manage server settings: Set server-specific settings\n    - View bot statistics: View statistics about the bot and its usage\n    - Access help information for each command: View help information for each command in the web app\n\n    **Web App URL:**\n    [Web App](https://webapp.com)\n\n    **Bot Commands:**\n    - `{mapping['play']}`: Play a song in the current channel\n    - `{mapping['pause']}`: Pause the currently playing song\n    - `{mapping['resume']}`: Resume the currently paused song"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(-n)\n    else:\n        return int_to_ternary(n)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1][1:] for file_name in file_names)"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\""}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    # Define the function\n    def total_price(listing):\n        # Initialize total price\n        total_price = 0\n        # Loop through each item in the listing\n        for item in listing:\n            # Add the price of the item to the total price\n            total_price += item['price']\n        # Return the total price\n        return total_price\n    return total_price\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome if char in vowels)\n        result[palindrome] = count\n    return result\n"}
{"task_id": "valid/104", "completion": "\n    # Check if the string is empty\n    if not s:\n        return s\n\n    # Initialize an empty string to store the modified version\n    modified_string = \"\"\n\n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char.lower() in \"aeiou\":\n            # Convert the vowel to uppercase\n            modified_string += char.upper()\n        else:\n            # Append the character as it is\n            modified_string += char\n\n    # Return the modified string\n    return modified_string\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negative of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        if package_name not in latest_versions:\n            latest_versions[package_name] = version_number\n        else:\n            current_version = latest_versions[package_name]\n            if compare_versions(version_number, current_version):\n                latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split(' ')\n        if action in categorized_causes:\n            categorized_causes[action].append(result)\n        else:\n            categorized_causes[action] = [result]\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Please enter a valid list of numbers and an exponent value.\")\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if n < 1 or not isinstance(n, int):\n        print(\"Please enter a positive integer.\")\n        return\n    if current_num > n:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank you\")\n    print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    return all(digit == num_str[0] for digit in num_str)\n\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    if s[0] in 'aeiouAEIOU':\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: application [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  -{option}, --{option}\\n    {description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subsequence_length = len(subsequence)\n    for i in range(len(sequence) - subsequence_length + 1):\n        if sequence[i:i+subsequence_length] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    if h == 0:\n        return 0\n    if h < 0:\n        h = -h\n        if t < 0:\n            t = -t\n        else:\n            return -dividir(h, t)\n    if t < 0:\n        t = -t\n        return -dividir(h, t)\n    return dividir_aux(h, t, 0)\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants"}
{"task_id": "valid/126", "completion": "\n    # Calculate number of electrons based on energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        num_electrons += ados[energy]\n\n    # Adjust number of electrons based on doping levels\n    num_electrons += dope * dos_grid_size\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left.reverse()\n    return left + right\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in range(min(3, len(lst))):\n        if lst[i] not in unique_elements:\n            unique_elements.append(lst[i])\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string with each fruit name separated by a comma and a space\n    output_string = ', '.join(sorted_fruit_list)\n\n    return output_string\n\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\nfrom django.db import migrations, models\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        digit = int(n_str[i])\n        temp = digit * 2 + carry\n        carry = temp // 10\n        result.append(str(temp % 10))\n    if carry > 0:\n        result.append(str(carry))\n    return ''.join(result[::-1])\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.1, 0.2, 0.3),\n        \"position2\": (0.4, 0.5, 0.6),\n        \"position3\": (0.7, 0.8, 0.9),\n    }\n\n    if preset_name in presets:\n        return presets[preset_name]\n    else:\n        return None\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Define the behavior of the quiz system based on the configurations\n    if allow_multiple_answer:\n        print(\"Multiple answers are allowed.\")\n    else:\n        print(\"Only one answer is allowed.\")\n    \n    if zoom_level == \"high\":\n        print(\"Zoom level is set to high.\")\n    elif zoom_level == \"medium\":\n        print(\"Zoom level is set to medium.\")\n    elif zoom_level == \"low\":\n        print(\"Zoom level is set to low.\")\n    else:\n        print(\"Invalid zoom level.\")\n    \n    # Additional behavior based on the configurations\n    if allow_multiple_answer and zoom_level == \"high\":\n        print(\"Enhanced user experience with multiple answers and high zoom level.\")\n    elif not allow_multiple_answer and zoom_level == \"low\":\n        print(\"Basic user experience with single answer and low zoom level.\")\n    else:\n        print(\"Standard user experience.\")\n    \n    # Return the behavior of the quiz system\n    return {\n        \"allow_multiple_answer\": allow_multiple_answer,\n        \"zoom_level\": zoom_level\n    }\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    def is_alphabetic(s):\n        return all(c.isalpha() for c in s)\n\n    def merge_dicts(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_dicts(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_dicts({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n            elif k not in merged:\n                merged[k] = v\n        return merged\n\n    def merge_objects(a, b):\n        merged = {}\n        for k, v in a.items():\n            if isinstance(v, dict):\n                merged[k] = merge_objects(v, b.get(k, {}))\n            else:\n                merged[k] = v\n        for k, v in b.items():\n            if k not in merged and isinstance(v, dict):\n                merged[k] = merge_objects({}, v)\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    # Check if n is greater than the length of the list\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n\n    # Use heapq.nsmallest to find N smallest items in the list\n    smallest_items = heapq.nsmallest(n, lst)\n\n    return smallest_items\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 0 or x == 1 or x == 4 or x == 9 or x == 16 or x == 25 or x == 36 or x == 49 or x == 64 or x == 81 or x == 100 or x == 121 or x == 144 or x == 169 or x == 196 or x == 225 or x == 256 or x == 289 or x == 324 or x == 361 or x == 400 or x == 441 or x == 484 or x == 529 or x == 576 or x == 625 or x == 676 or x == 729 or x == 784 or x == 841 or x == 900 or x == 961 or x == 1024 or x == 1089 or x == 1156 or x == 1225 or x == 1296 or x == 1369 or x == 1444 or x == 1521 or x == 1600 or x == 1681 or x == 1764 or x == 1849 or x == 1936 or x == 2025 or x == 2116 or x == 2209 or x == 2304 or x == 2401 or x == 2500 or x == 2601 or x == 2704 or x == 2809 or x == 2916 or x == 3025 or x == 3136 or x == 3249 or x == 3364 or x == 3481 or x == 3600 or x == 3721 or x == 3844 or x == 3969 or x == 4096 or x == 4225 or x == 4356 or x == 4489 or x == 4624 or x == 4761 or x == 4900 or x == 5041 or x == 5184 or x == 5329 or x == 5476 or x == 5625 or x == 5776 or x == 5929 or x == 6084 or x == 6241 or x == 6400 or x == 6561 or x == 6724 or x =="}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
