{"task_id": "valid/0", "completion": "\n    if \"python\" in text.lower():\n        return \"Python\"\n    elif \"java\" in text.lower():\n        return \"Java\"\n    elif \"javascript\" in text.lower():\n        return \"JavaScript\"\n    elif \"c++\" in text.lower():\n        return \"C++\"\n    else:\n        return \"Unknown\"\n\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Flute', 'Trumpet', 'Violin', 'Cello', 'Harp']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Input not valid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0:\n        sum_digits = sum(int(digit) for digit in str(n))\n        if sum_digits % 3 == 0:\n            return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(\"Invalid JSON string: {0}\".format(e))\n\n\njson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npretty_print_json(json_str)\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace('{{' + key + '}}', str(value))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date_object = date_object + timedelta(days=days)\n    return new_date_object.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Convert to lowercase\n    text = text.lower()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b' + word1 + r'\\b', text, re.IGNORECASE)) and bool(re.search(r'\\b' + word2 + r'\\b', text, re.IGNORECASE))\n\n"}
{"task_id": "valid/15", "completion": "\n    return sum(sum(i) for i in array)\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('tabstop='):\n            settings['tabstop'] = int(line.split('=')[1])\n        elif line.startswith('expandtab'):\n            settings['expandtab'] = True\n        elif line.startswith('shiftwidth'):\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif line.startswith('softtabstop'):\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for key in dictionary:\n        if isinstance(dictionary[key], dict):\n            value = get_nested_dictionary_value(dictionary[key])\n            if value is not None:\n                return value\n    return None\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    if num < 10:\n        return num - 1\n\n    str_num = str(num)\n    length = len(str_num)\n    half = length // 2\n\n    left = int(str_num[:half])\n    right = int(str_num[half:])\n\n    candidate_palindrome = [10**length + 1, 10**(length - 1) - 1]\n\n    for i in range(-1, 2):\n        prefix = str(left + i)\n        candidate_palindrome.append(int(prefix + prefix[::-1][:half]))\n        if length % 2:\n            candidate_palindrome.append(int(prefix + prefix[:half][::-1]))\n\n    candidate_palindrome.sort(key=lambda x: (abs(x - num), x))\n\n    return candidate_palindrome[0]\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    sum_diagonal = 0\n    is_square = rows == cols\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                sum_diagonal += matrix[i][j]\n\n    return rows, cols, sum_diagonal, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_string = base64_bytes.decode('ascii')\n    return base64_string\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    return key in json_data and json_data[key] == value\n\n"}
{"task_id": "valid/31", "completion": "\n    # Importing necessary modules\n    from tkinter import Button, Tk\n\n    # Creating main window\n    window = Tk()\n\n    # Creating a list to store buttons\n    button_list = []\n\n    # Looping through the buttons\n    for i in range(len(buttons)):\n        # Creating a button and adding it to the list\n        button_list.append(Button(window, text=buttons[i], command=lambda i=i: print(buttons[i])))\n\n        # Placing the button in the grid\n        button_list[i].grid(row=i//num_columns, column=i%num_columns)\n\n    # Starting the main loop\n    window.mainloop()\n"}
{"task_id": "valid/32", "completion": "\n    alphabet_order = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet_order) - 1):\n        if alphabet_order[i] in s:\n            if alphabet_order[i + 1] not in s[s.index(alphabet_order[i]) + 1:]:\n                return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n\n"}
{"task_id": "valid/36", "completion": "\n    try:\n        return sum(arr)\n    except TypeError:\n        return \"Array should only contain numerical values\"\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods.sort(key=lambda x: x['name'])\n    return [neighborhood['name'] for neighborhood in neighborhoods]\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize a dictionary to store the vote counts for each candidate\n    vote_counts = {}\n\n    # Iterate over the list of votes\n    for vote in votes:\n        # Extract the candidate name and the number of votes\n        candidate, num_votes = vote\n\n        # Convert the candidate name to uppercase\n        candidate = candidate.upper()\n\n        # If the candidate is not in the dictionary, add them with their vote count\n        if candidate not in vote_counts:\n            vote_counts[candidate] = num_votes\n        # If the candidate is already in the dictionary, add the new votes to their existing count\n        else:\n            vote_counts[candidate] += num_votes\n\n    # Calculate the total number of votes\n    total_votes = sum(vote_counts.values())\n\n    # Initialize a dictionary to store the percentage of votes for each candidate\n    vote_percentages = {}\n\n    # Iterate over the vote counts\n    for candidate, votes in vote_counts.items():\n        # Calculate the percentage of votes for the candidate\n        percentage = round((votes / total_votes) * 100, 2)\n\n        # Add the candidate and their percentage of votes to the dictionary\n        vote_percentages[candidate] = percentage\n\n    # Return the dictionary of vote percentages\n    return vote_percentages\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date = datetime.strptime(date_string, '%d-%b-%Y')\n    except ValueError:\n        try:\n            date = datetime.strptime(date_string, '%d-%m-%Y')\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY\")\n\n    return date.strftime('%B %d, %Y')\n"}
{"task_id": "valid/42", "completion": "\n    import os\n\n    # get the file extension of the new name\n    new_ext = os.path.splitext(newname)[1]\n\n    # check if the new file extension is in the allowed types\n    if new_ext in allowed_type:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        if isinstance(n, str):\n            try:\n                return int(n) % 2 == 0\n            except ValueError:\n                return False\n        elif isinstance(n, int) or isinstance(n, float):\n            return n % 2 == 0\n        else:\n            return False\n\n    def remove_uneven_from_list(lst):\n        return [remove_uneven_from_list(item) if isinstance(item, list) else item for item in lst if is_even(item)]\n\n    return remove_uneven_from_list(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data.append({\"generation\": generation, \"accuracy\": accs})\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'\\w{5}', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \" in classifier:\n            language = classifier.split(\" :: \")[1]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        (r'^videos/$', 'list_videos'),\n        (r'^videos/(?P<video_id>\\d+)/$', 'video_detail'),\n    ]\n\n    for pattern, view in urlpatterns:\n        if re.match(pattern, url):\n            return view\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string_sentence = \"Hello, \"\n    string_name = \"World\"\n    concatenated_string = string_sentence + string_name\n    return concatenated_string\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                sum_price += dict[key]\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list1 = [value for value in list1 if value not in intersection]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list1, list2\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view_get\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\n\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both numbers must be integers\")\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n\n    for file_path in file_paths:\n        dir_path, file_name = os.path.split(file_path)\n        if dir_path not in config_files:\n            config_files[dir_path] = []\n        config_files[dir_files].append(file_name)\n\n    return config_files\n\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [i + 1 for i in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    # Define the strings\n    string1 = \"Hello\"\n    string2 = \"World\"\n\n    # Concatenate the strings using f-string\n    result = f\"{string1} {string2}\"\n\n    return result\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'[^a-zA-Z0-9\\s]', '', string)\n        # Capitalize first letter\n        string = string[0].upper() + string[1:]\n        result.append(string)\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start_index = 0\n    end_index = 0\n    bold_text_list = []\n\n    while start_index < len(html_code):\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index + len(start_tag))\n        if end_index == -1:\n            break\n        bold_text_list.append(html_code[start_index + len(start_tag):end_index])\n        start_index = end_index + len(end_tag)\n\n    return bold_text_list\n\n\nhtml_code = \"<b>bold text 1</b> and <b>bold text 2</b> and <b>bold text 3</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        'cola': 1.0,\n        'chips': 0.5,\n        'candy': 0.65\n    }\n\n    # Check if the item is in the list\n    if item not in items:\n        return 'Item not available'\n\n    # Check if enough money was inserted\n    if money_inserted < items[item]:\n        return 'Not enough money'\n\n    # Calculate the change\n    change = money_inserted - items[item]\n\n    # Update the stock\n    items[item] -= 1\n\n    # Check if the item is out of stock\n    if items[item] <= 0:\n        return f'{item} is out of stock'\n\n    return f'Here is your {item}, and your change is ${change:.2f}'\n\n"}
{"task_id": "valid/74", "completion": "\n    return list(set(list1 + list2))\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning values\n    a = 10\n    b = 20\n    c = 30\n\n    # Validating\n    if a < b and b < c:\n        print(\"Both conditions are True\")\n    else:\n        print(\"Either of the conditions is False\")\n\n\nassign_and_validate()\n\n"}
{"task_id": "valid/79", "completion": "\n    word = list(word)\n    random.shuffle(word)\n    return \"\".join(word)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\b\\w[\\w\\']*\\b', text.lower())\n    return tokens\n\ntext = \"This is a sample text. It contains several words.\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    min_val = min(divisible_numbers)\n    max_val = max(divisible_numbers)\n    unique_numbers = list(set(divisible_numbers))\n    occurrences = [divisible_numbers.count(num) for num in unique_numbers]\n\n    print(f\"Numbers divisible by 3 and 7: {divisible_numbers}\")\n    print(f\"Average: {average}\")\n    print(f\"Minimum: {min_val}\")\n    print(f\"Maximum: {max_val}\")\n    for i in range(len(unique_numbers)):\n        print(f\"Number {unique_numbers[i]} occurs {occurrences[i]} times\")\n\n"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n    return None\n\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 0\n    for i in range(100):\n        euler_number += (1 / math.factorial(i))\n    euler_number = round(euler_number, decimal_places)\n    return euler_number\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_num = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(i, (int, float)) for i in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n\n    min_value = min(time_series)\n    max_value = max(time_series)\n\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = lst.index(max(lst))\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n\n    root = Element('root')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n\n\ndictionary = {'name': 'John', 'age': 30, 'city': 'New York'}\nxml_string = dict_to_xml(dictionary)"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n - 1]\n\n\nlst = [9, 4, 7, 2, 1, 5]"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n\n"}
{"task_id": "valid/97", "completion": "\n    description = \"Discord bot for managing music in servers. This bot provides the following features:\\n\\n\"\n\n    for command, info in mapping.items():\n        description += f\"**{command}** - {info['description']}\\n\"\n        description += f\"Usage: `{info['usage']}`\\n\\n\"\n\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    if n == 0:\n        return '0'\n    res = ''\n    while n:\n        n, remainder = divmod(n, 3)\n        res = str(remainder) + res\n    return res\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 59:\n        return \"Adult\"\n    elif age <= 120:\n        return \"Senior\"\n    else:\n        return \"Invalid age\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n\nnumerical_grade = int(input(\"Enter numerical grade: \"))\nletter_grade, gpa = calculate_grade_and_gpa(numerical_grade)"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(letter in vowels for letter in palindrome)\n        palindrome_dict[palindrome] = vowel_count\n\n    return palindrome_dict\n\n\npalindrome_tuples = ('racecar', 'deed', 'radar', 'level', 'rotator', 'python', 'madam')"}
{"task_id": "valid/104", "completion": "\n    # your code here\n    return s.replace(' ', '')\n\n"}
{"task_id": "valid/105", "completion": "\n    # create an empty set to store the sum of elements\n    sum_set = set()\n\n    # initialize the sum of elements\n    sum = 0\n\n    # traverse through the given array\n    for i in range(0, len(arr)):\n        # add the current element to sum\n        sum += arr[i]\n\n        # return True if the sum is 0 or if it is already present in the set\n        if sum == 0 or sum in sum_set:\n            return True\n\n        # insert sum so far into the set\n        sum_set.add(sum)\n\n    # return False if no pair is found with sum 0\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n\n    for dependency in dependencies:\n        package_name, version_number = dependency\n\n        # split version number into numerical identifier and datetime\n        version_number_split = version_number.split(\"_\")\n        numerical_identifier = int(version_number_split[0])\n        datetime_str = version_number_split[2]\n\n        # convert datetime string to datetime object\n        datetime_obj = datetime.strptime(datetime_str, \"%Y%m%d_%H%M\")\n\n        # if package name is not in latest_versions, add it with the current version\n        if package_name not in latest_versions:\n            latest_versions[package_name] = (numerical_identifier, datetime_obj, version_number)\n        else:\n            # if the current version is newer than the latest version, update latest_versions\n            latest_numerical_identifier, latest_datetime_obj, latest_version_number = latest_versions[package_name]\n            if numerical_identifier > latest_numerical_identifier or (numerical_identifier == latest_numerical_identifier and datetime_obj > latest_datetime_obj):\n                latest_versions[package_name] = (numerical_identifier, datetime_obj, version_number)\n\n    # return a list of tuples containing the package name and the latest version number\n    return [(package_name, version_number) for package_name, (numerical_identifier, datetime_obj, version_number) in latest_versions.items()]\n\n"}
{"task_id": "valid/107", "completion": "\naccident car crash\nillness flu\nnatural earthquake\nmalicious intent murder\nunknown plague\"\"\"\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''!\"#$%&'()*+, -./:;<=>?@[\\]^_`{|}~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: Both inputs must be lists of numbers.\")\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]"}
{"task_id": "valid/113", "completion": "\n    if n < 1:\n        return\n    if current_num == n:\n        print(f\"Thank you for the {current_num}th even number\")\n        return\n    else:\n        print(f\"Thank you for the {current_num}th even number\")\n        return print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    first_digit = num_str[0]\n    return all(digit == first_digit for digit in num_str)\n"}
{"task_id": "valid/116", "completion": "\n    vowels = 'aeiouAEIOU'\n    if s == '':\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\n\"\n    help_message += \"Options:\\n\"\n\n    for option in options:\n        help_message += f\"  --{option[0]}\\t{option[1]}\\n\"\n\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize count dictionary\n    count_dict = {}\n\n    # Iterate over Val\n    for v in Val:\n        # If v is in count_dict, increment by 1\n        if v in count_dict:\n            count_dict[v] += 1\n        # Else, add v to count_dict with count 1\n        else:\n            count_dict[v] = 1\n\n    # Return count_dict\n    return count_dict\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in s:\n        if letter not in vowels:\n            return False\n    return True\n\n"}
{"task_id": "valid/122", "completion": "\n    return sequence.count(subsequence)\n\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        return \"Error: Division by zero is not allowed\"\n    else:\n        quotient = 0\n        while h >= t:\n            h -= t\n            quotient += 1\n        return quotient\n\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for letter in string:\n        if letter.isalpha() and letter not in vowels:\n            consonants += 1\n    return consonants\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    energy_threshold = 0.5\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        if energy > energy_threshold:\n            num_electrons += 1\n\n    # Adjust number of electrons based on doping levels\n    num_electrons = num_electrons * (1 + ados)\n\n    # Simulate electron behavior\n    for i in range(dos_grid_size):\n        if i < num_electrons:\n            dope[i] = 1\n        else:\n            dope[i] = 0\n\n    return dope\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    n = len(arr)\n    temp = [0] * n\n    mid = n // 2\n    evenIndex = 0\n    oddIndex = 1\n    for i in range(n):\n        if evenIndex < mid:\n            temp[i] = arr[evenIndex]\n            evenIndex += 2\n        elif oddIndex < n:\n            temp[i] = arr[oddIndex]\n            oddIndex += 2\n    for i in range(n):\n        arr[i] = temp[i]\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {')': '(', ']': '[', '}': '{'}\n    for char in string:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or parentheses[char] != stack.pop():\n                return False\n    return not stack\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('{app_name}', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name='{model_name}',\n                name='{field_name}',\n                field=models.CharField(max_length=200),\n            ),\n        ]\n    \"\"\"\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    # calculate length of dataset\n    length_of_dataset = len(df)\n\n    # calculate forecast period\n    forecast_period = math.ceil(length_of_dataset * 0.01)\n\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = page_number * items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    # Initialize carry\n    carry = 0\n    # Initialize result\n    result = ''\n    # Iterate over the string in reverse order\n    for digit in n_str[::-1]:\n        # Convert digit to integer and double it\n        temp = int(digit) * 2 + carry\n        # If the result is greater than 9, set carry to 1 and append the remainder to the result\n        if temp > 9:\n            carry = 1\n            result += str(temp % 10)\n        # If the result is not greater than 9, set carry to 0 and append the result to the result\n        else:\n            carry = 0\n            result += str(temp)\n    # If there is a carry left, append it to the result\n    if carry:\n        result += str(carry)\n    # Return the result in reverse order\n    return result[::-1]\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'home': (0.0, 0.0, 0.0),\n        'preset1': (1.0, 1.0, 1.0),\n        'preset2': (2.0, 2.0, 2.0),\n        'preset3': (3.0, 3.0, 3.0),\n        'preset4': (4.0, 4.0, 4.0),\n        'preset5': (5.0, 5.0, 5.0),\n    }\n\n    return presets[preset_name]\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n\nThe function quiz_system_behavior takes two parameters: allow_multiple_answer and zoom_level. \nallow_multiple_answer is a boolean that determines whether the quiz system allows multiple answers. \nzoom_level is a string that determines the zoom level of the application. \n\nThe function prints out the behavior of the quiz system based on the given parameters.\n\"\"\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    merged = {**a, **b}\n    for key in a:\n        if isinstance(a[key], dict) and key in b and isinstance(b[key], dict):\n            merged[key] = merge_objects(a[key], b[key])\n    return dict(sorted(merged.items()))\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Error: Dictionary is empty\"\n    except TypeError:\n        return \"Error: Invalid input. Please provide a dictionary.\"\n    except Exception as e:\n        return f\"Error: {e}\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    a = [1]\n    b = [1]\n    c = [1]\n    while len(c) <= x:\n        a.append(a[-1] + 2 * b[-1] + 2 * c[-1])\n        b.append(a[-2] + 2 * b[-1] + 2 * c[-1])\n        c.append(a[-2] + 2 * b[-2] + 2 * c[-1])\n    return c[x]\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
