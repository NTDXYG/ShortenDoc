{"task_id": "valid/0", "completion": "\n    categories = {\n        'sports': ['football', 'basketball', 'tennis', 'soccer', 'baseball'],\n        'politics': ['election', 'government', 'policy', 'vote', 'senate'],\n        'technology': ['computer', 'software', 'hardware', 'AI', 'internet'],\n        'health': ['doctor', 'medicine', 'healthcare', 'disease', 'treatment'],\n        'entertainment': ['movie', 'music', 'celebrity', 'show', 'theater']\n    }\n\n    text = text.lower()\n    for category, keywords in categories.items():\n        if any(keyword in text for keyword in keywords):\n            return category\n    return 'unknown'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"JSON string does not represent a list.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string.\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, (int, float)) or n < 0:\n        return False\n    \n    if n % 5 != 0:\n        return False\n    \n    digit_sum = sum(int(digit) for digit in str(int(n)))\n    \n    return digit_sum % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if base <= 1 or n <= 0:\n        raise ValueError(\"Base must be greater than 1 and n must be positive.\")\n    \n    current = 1\n    for exponent in range(0, n):\n        if current == n:\n            return exponent\n        current = (current * base) % n\n    \n    return None  # If no discrete logarithm exists\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n    except json.JSONDecodeError:\n        raise ValueError(\"Provided string is not valid JSON.\")\n\n    pprint.pprint(json_data)\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{{ {key} }}}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10000:\n        raise ValueError(\"Text exceeds the maximum allowed length of 10,000 characters.\")\n    \n    # Strip whitespace from the start and end, and replace multiple spaces with a single space\n    return ' '.join(text.strip().split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + re.escape(word1) + r'|' + re.escape(word2) + r')\\b'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "valid/15", "completion": "\n    if not array or not array[0]:\n        return []\n\n    layers = []\n    n, m = len(array), len(array[0])\n    \n    for layer in range((min(n, m) + 1) // 2):\n        layer_sum = 0\n        \n        # Top row\n        for j in range(layer, m - layer):\n            layer_sum += array[layer][j]\n        \n        # Right column\n        for i in range(layer + 1, n - layer - 1):\n            layer_sum += array[i][m - layer - 1]\n        \n        # Bottom row\n        if n - layer - 1 > layer:  # Check if there's a bottom row\n            for j in range(m - layer - 1, layer - 1, -1):\n                layer_sum += array[n - layer - 1][j]\n        \n        # Left column\n        if layer < m - layer - 1:  # Check if there's a left column\n            for i in range(n - layer - 2, layer, -1):\n                layer_sum += array[i][layer]\n        \n        layers.append(layer_sum)\n    \n    return layers\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.splitlines()\n    \n    for line in lines:\n        line = line.strip()\n        if line.startswith(\"set\"):\n            parts = line.split()\n            for part in parts:\n                if '=' in part:\n                    key, value = part.split('=')\n                    key = key.replace('set', '').strip()\n                    settings[key] = int(value)\n    \n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Create a list to hold the lexical items\n    lexical_items = []\n    \n    # Iterate through each word in the sentence\n    for word in words:\n        # Remove punctuation and convert to lowercase\n        clean_word = ''.join(char for char in word if char.isalnum()).lower()\n        if clean_word:  # Ensure the word is not empty\n            lexical_items.append(clean_word)\n    \n    return lexical_items\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    elif num < 0:\n        num = -num  # Handle negative numbers\n    return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the lists\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    \n    # Combine the reversed lists\n    combined_list = reversed_list1 + reversed_list2\n    \n    # Sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\", None)\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    if num == \"1\":\n        return \"0\"\n    \n    candidates = set()\n    length = len(num)\n    prefix = int(num[:(length + 1) // 2])\n    \n    for i in range(-1, 2):\n        p = str(prefix + i)\n        candidates.add(int(p + p[-(length // 2)::-1]))\n        candidates.add(int(p + p[-(length // 2):][::-1]))\n    \n    candidates.add(10 ** length + 1)\n    candidates.add(10 ** (length - 1) - 1)\n    \n    candidates.discard(int(num))\n    \n    closest = None\n    min_diff = float('inf')\n    \n    for candidate in candidates:\n        diff = abs(candidate - int(num))\n        if diff < min_diff or (diff == min_diff and candidate < closest):\n            min_diff = diff\n            closest = candidate\n            \n    return str(closest)\n"}
{"task_id": "valid/25", "completion": "\n    if num < 0:\n        raise ValueError(\"Cannot calculate the square root of a negative number.\")\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    is_square = rows == cols\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols))) if is_square else 0\n    \n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    byte_string = string.encode('utf-8')\n    base64_bytes = base64.b64encode(byte_string)\n    return base64_bytes.decode('utf-8')\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(char.lower() for char in s if char.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    if not lst:\n        return None\n    minimum = lst[0]\n    for num in lst:\n        if num < minimum:\n            minimum = num\n    return minimum\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    \n    return json_data.get(key) == value\n"}
{"task_id": "valid/31", "completion": "\n    button_table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i + num_columns]\n        button_row = [f'<button onclick=\"{button[\"action\"]}\">{button[\"label\"]}</button>' for button in row]\n        button_table.append('<div class=\"button-row\">' + ''.join(button_row) + '</div>')\n    \n    return '<div class=\"button-table\">' + ''.join(button_table) + '</div>'\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    index = 0\n\n    for char in s:\n        if char in alphabet:\n            if char != alphabet[index]:\n                return False\n            index += 1\n            if index == len(alphabet):\n                break\n\n    return index == len(alphabet)\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    \n    # Find all numeric substrings using regular expression\n    numeric_substrings = re.findall(r'\\d+', ts)\n    \n    # Convert the numeric substrings to integers and sum them up\n    total_sum = sum(int(num) for num in numeric_substrings)\n    \n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list.\")\n    \n    for element in arr:\n        if not isinstance(element, (int, float)):\n            raise ValueError(\"All elements in the array must be numerical values.\")\n    \n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted(neighborhood['name'] for neighborhood in neighborhoods)\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize the minimum absolute sum to a large value\n    min_sum = float('inf')\n    pair = (0, 0)\n\n    # Iterate through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            current_sum = abs(arr[i] + arr[j])\n            # Update the minimum sum and pair if a new minimum is found\n            if current_sum < min_sum:\n                min_sum = current_sum\n                pair = (arr[i], arr[j])\n\n    return pair, min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    if not votes or len(votes) < 1:\n        return \"No votes provided.\"\n\n    total_votes = 0\n    results = {}\n\n    for candidate_name, number_of_votes in votes:\n        if not isinstance(candidate_name, str) or len(candidate_name) > 10 or not candidate_name.isupper():\n            return f\"Invalid candidate name: {candidate_name}\"\n        if not isinstance(number_of_votes, int) or number_of_votes < 1 or number_of_votes > 1000:\n            return f\"Invalid number of votes for {candidate_name}: {number_of_votes}\"\n\n        total_votes += number_of_votes\n        if candidate_name in results:\n            results[candidate_name] += number_of_votes\n        else:\n            results[candidate_name] = number_of_votes\n\n    if total_votes < 100:\n        return \"Total votes must be at least 100.\"\n\n    percentage_results = {candidate: round((votes / total_votes) * 100, 2) for candidate, votes in results.items()}\n\n    return {\n        \"results\": results,\n        \"total_votes\": total_votes,\n        \"percentage_results\": percentage_results\n    }\n"}
{"task_id": "valid/41", "completion": "\n    # Define month mapping for MMM format\n    month_mapping = {\n        'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4,\n        'May': 5, 'Jun': 6, 'Jul': 7, 'Aug': 8,\n        'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12\n    }\n\n    # Try to parse the date string\n    try:\n        if '-' in date_string and len(date_string.split('-')[1]) == 3:\n            # Handle DD-MMM-YYYY format\n            day, month_str, year = date_string.split('-')\n            month = month_mapping.get(month_str)\n            if month is None:\n                raise ValueError(\"Invalid month abbreviation.\")\n        else:\n            # Handle DD-MM-YYYY format\n            day, month, year = date_string.split('-')\n            month = int(month)\n\n        day = int(day)\n        year = int(year)\n\n        # Validate the date\n        date_obj = datetime(year, month, day)\n\n        # Return the standardized format\n        return date_obj.strftime(\"%B %d, %Y\")\n\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {date_string}. Error: {e}\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'text': ['.txt', '.md', '.csv'],\n        'image': ['.jpg', '.jpeg', '.png', '.gif'],\n        'video': ['.mp4', '.avi', '.mov'],\n        'audio': ['.mp3', '.wav', '.aac'],\n        'document': ['.pdf', '.doc', '.docx', '.ppt', '.pptx']\n    }\n\n    if allowed_type not in allowed_extensions:\n        raise ValueError(\"Invalid allowed type specified.\")\n\n    old_extension = oldname.split('.')[-1] if '.' in oldname else ''\n    new_extension = newname.split('.')[-1] if '.' in newname else ''\n\n    if old_extension == new_extension:\n        return True\n\n    return new_extension in allowed_extensions[allowed_type]\n"}
{"task_id": "valid/43", "completion": "\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def process_element(element):\n        if isinstance(element, (int, float)):\n            return element if is_even(int(element)) else None\n        elif isinstance(element, str):\n            if is_numeric(element):\n                return element if is_even(int(float(element))) else None\n            else:\n                return None\n        elif isinstance(element, tuple):\n            return remove_uneven(element)\n        return None\n\n    return tuple(filter(lambda x: x is not None, (process_element(el) for el in lst)))\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # Ensure the histogram_data has a key for the current generation\n    if generation not in histogram_data:\n        histogram_data[generation] = []\n\n    # Append the accuracy values to the corresponding generation\n    histogram_data[generation].extend(accs)\n\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'^[a-zA-Z0-9]{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    \n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 3:\n            language = parts[1].strip()\n            unique_languages.add(language)\n    \n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    \n    for sub_array in arr:\n        for num in sub_array:\n            if num in count_dict:\n                count_dict[num] += 1\n            else:\n                count_dict[num] = 1\n    \n    return [count_dict[num] for num in sorted(count_dict)]\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$'),  # Matches the URL for the video list view\n        re.compile(r'^videos/(?P<video_id>\\d+)/$')  # Matches the URL for a specific video detail view\n    ]\n\n    if re.match(urlpatterns[0], url):\n        return 'video_list_view'\n    elif re.match(urlpatterns[1], url):\n        return 'video_detail_view'\n    else:\n        return '404_not_found_view'\n"}
{"task_id": "valid/51", "completion": "\n    if position < 0 or position > len(list):\n        raise IndexError(\"Position out of bounds\")\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"This is a sample sentence.\"\n    additional_string = \" Here is some additional text.\"\n    concatenated_result = sentence + additional_string\n    return concatenated_result\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substrings.add(s[i:j])\n    \n    return list(substrings)\n"}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += dictionary[key]\n    return total_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = list(set(list1) & set(list2))\n    list2 = [item for item in list2 if item not in intersection]\n    return intersection, list2\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view()\n    elif request_method == 'POST':\n        return api_advisor_view_post()\n    else:\n        return \"Method Not Allowed\", 405\n"}
{"task_id": "valid/57", "completion": "\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both numbers must be positive integers.\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'system': [],\n        'application': [],\n        'network': [],\n        'database': [],\n        'other': []\n    }\n\n    for file_path in file_paths:\n        if 'system' in file_path:\n            categorized_files['system'].append(file_path)\n        elif 'app' in file_path or 'application' in file_path:\n            categorized_files['application'].append(file_path)\n        elif 'network' in file_path:\n            categorized_files['network'].append(file_path)\n        elif 'db' in file_path or 'database' in file_path:\n            categorized_files['database'].append(file_path)\n        else:\n            categorized_files['other'].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1  # Target not found\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid  # Target found\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)  # Search in the right half\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)  # Search in the left half\n"}
{"task_id": "valid/63", "completion": "\n    color_sequence = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color in color_sequence:\n        current_index = color_sequence.index(color)\n        next_index = (current_index + 1) % len(color_sequence)\n        return color_sequence[next_index]\n    else:\n        raise ValueError(\"Invalid color input\")\n"}
{"task_id": "valid/64", "completion": "\n    def increment_list_values(lst):\n    return [x + 1 for x in lst]\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if (i**0.5).is_integer():\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    keys = dict.keys()\n    print(\"keys given dictionary are\", ' '.join(keys))\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"world\"\n    concatenated_string = f\"Hello, {phrase}!\"\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for s in strings:\n        if re.match(r'^[\\w\\s]*$', s):  # Check if the string contains only alphanumeric characters and whitespace\n            result.append(s.capitalize())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    positions = [i for i, c in enumerate(string) if c == char]\n    return positions\n"}
{"task_id": "valid/72", "completion": "\n    bold_texts = []\n    in_bold = False\n    current_text = \"\"\n\n    for i in range(len(html_code)):\n        if html_code[i:i+3] == \"<b>\":\n            in_bold = True\n            i += 2  # Skip past the <b> tag\n        elif html_code[i:i+4] == \"</b>\":\n            in_bold = False\n            bold_texts.append(current_text)\n            current_text = \"\"\n            i += 3  # Skip past the </b> tag\n        elif in_bold:\n            current_text += html_code[i]\n\n    return bold_texts\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    inventory = {\n        'A1': {'name': 'Soda', 'price': 1.50, 'stock': 10},\n        'A2': {'name': 'Chips', 'price': 1.00, 'stock': 5},\n        'A3': {'name': 'Candy', 'price': 0.75, 'stock': 20},\n    }\n\n    # Check if the item exists in the inventory\n    if item not in inventory:\n        return \"Item not found.\"\n\n    selected_item = inventory[item]\n\n    # Check if the item is in stock\n    if selected_item['stock'] <= 0:\n        return \"Item out of stock.\"\n\n    # Check if enough money has been inserted\n    if money_inserted < selected_item['price']:\n        return \"Not enough money inserted.\"\n\n    # Calculate change\n    change = money_inserted - selected_item['price']\n\n    # Update stock\n    selected_item['stock'] -= 1\n\n    return f\"Purchased {selected_item['name']}. Change returned: ${change:.2f}.\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    byte_string = string.encode('utf-8')\n    base64_bytes = base64.b64encode(byte_string)\n    return base64_bytes.decode('utf-8')\n"}
{"task_id": "valid/77", "completion": "\n    return [index for index, value in enumerate(vector) if value != 0]\n"}
{"task_id": "valid/78", "completion": "\n    value = 10  # Assign a specific value\n    if isinstance(value, int) and value > 0:\n        return f\"Value {value} is valid.\"\n    else:\n        return \"Invalid value.\"\n"}
{"task_id": "valid/79", "completion": "\n    return ''.join(random.sample(word, len(word)))\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown type\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n\n    merged = [arr[0]]\n\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            merged.append(arr[i])\n\n    return merged\n"}
{"task_id": "valid/82", "completion": "\n    # Define a regular expression pattern for tokenization\n    pattern = r'\\w+|[^\\w\\s]'\n    \n    # Use re.findall to extract tokens based on the pattern\n    tokens = re.findall(pattern, text)\n    \n    return tokens\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    if divisible_numbers:\n        average = sum(divisible_numbers) / len(divisible_numbers)\n        print(f\"Average of numbers divisible by 3 and 7: {average}\")\n        print(f\"Maximum value: {max(numbers)}\")\n        print(f\"Minimum value: {min(numbers)}\")\n        \n        occurrences = {num: numbers.count(num) for num in set(divisible_numbers)}\n        print(\"Occurrences of each unique number divisible by 3 and 7:\", occurrences)\n    else:\n        print(\"No numbers divisible by both 3 and 7 found.\")\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n\n    for word in words:\n        word = word.lower()  # Normalize to lowercase\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n\n    highest_frequency_word = max(frequency, key=frequency.get)\n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = sum(1 / math.factorial(i) for i in range(decimal_places * 10))\n    return round(euler_number, decimal_places)\n"}
{"task_id": "valid/86", "completion": "\n    if not numbers:\n        return 0, 0\n    \n    total_sum = sum(numbers)\n    average = total_sum / len(numbers)\n    \n    return average, total_sum\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty.\")\n    \n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values.\")\n    \n    min_value = min(time_series)\n    max_value = max(time_series)\n    \n    return (min_value, max_value)\n"}
{"task_id": "valid/88", "completion": "\n    # Initialize a dictionary to hold the count of related articles for each entry\n    related_counts = {}\n\n    # Iterate through each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Count the number of related articles for the current entry\n        related_count = len(entry['related_articles'])\n        # Store the count in the dictionary\n        related_counts[entry['title']] = related_count\n\n    return related_counts\n"}
{"task_id": "valid/89", "completion": "\n    if not lst:\n        return None\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "valid/90", "completion": "\n    return any(elem in list2 for elem in list1)\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    \n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    \n    return tostring(root, encoding='unicode')\n"}
{"task_id": "valid/92", "completion": "\n    - Each row of the matrix is sorted in ascending order.\n    - The first integer of each row is greater than the last integer of the previous row.\n\n    Args:\n    matrix (List[List[int]]): The 2D matrix to search within.\n    target (int): The value to search for.\n\n    Returns:\n    bool: True if the target is found, False otherwise.\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    total_sum = 0\n    count = 0\n    \n    for number in lst:\n        if (number - 1) % 2 == 0:  # Check if the number is odd without using modulus operator\n            total_sum += number\n            count += 1\n            \n    if count == 0:\n        return 0, 0  # Avoid division by zero if there are no odd elements\n    \n    average = total_sum / count\n    return total_sum, average\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    unique_elements = list(set(lst))\n    unique_elements.sort(reverse=True)\n    return unique_elements[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = \"\"\"\n    This Discord bot is designed to enhance your server's music experience by allowing users to play music seamlessly. \n    Key features include:\n\n    1. **Music Playback**: Users can play, pause, skip, and stop music directly in voice channels.\n    2. **Playlist Management**: Create and manage personal playlists, allowing users to save their favorite tracks.\n    3. **Server Settings**: Admins can configure server-specific settings for music playback, such as volume control and allowed commands.\n    4. **Command Categorization**: Commands are organized into categories for easy access, including:\n        - **Music Commands**: Play, pause, skip, stop, and queue management.\n        - **Playlist Commands**: Create, delete, and view playlists.\n        - **Help Commands**: Get detailed information about each command and its usage.\n\n    Each command will have a help option that provides users with a description of its functionality and usage examples.\n    \"\"\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    \n    n = abs(n)\n    ternary = ''\n    \n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    \n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(name.split('.')[-1] for name in file_names if '.' in name)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 64:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    letter_grade = (\n        'A' if numerical_grade >= 90 else\n        'B' if numerical_grade >= 80 else\n        'C' if numerical_grade >= 70 else\n        'D' if numerical_grade >= 60 else\n        'F'\n    )\n\n    gpa = (\n        4.0 if numerical_grade >= 90 else\n        3.0 if numerical_grade >= 80 else\n        2.0 if numerical_grade >= 70 else\n        1.0 if numerical_grade >= 60 else\n        0.0\n    )\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price'] * item['quantity']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowel_count = {}\n    vowels = set('aeiou')\n\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome.lower() if char in vowels)\n        vowel_count[palindrome] = count\n\n    return vowel_count\n"}
{"task_id": "valid/104", "completion": "\n    # Rule 1: Convert the string to uppercase\n    s = s.upper()\n    \n    # Rule 2: Replace spaces with underscores\n    s = s.replace(\" \", \"_\")\n    \n    # Rule 3: Reverse the string\n    s = s[::-1]\n    \n    return s\n"}
{"task_id": "valid/105", "completion": "\n    seen = set()\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n\n    for package, version in dependencies:\n        if package not in latest_versions:\n            latest_versions[package] = version\n        else:\n            current_latest = latest_versions[package]\n            if version > current_latest:\n                latest_versions[package] = version\n\n    return [(package, latest_versions[package]) for package in latest_versions]\n"}
{"task_id": "valid/107", "completion": "\n    categories = {\n        \"accidents\": [],\n        \"natural\": [],\n        \"homicides\": [],\n        \"suicides\": [],\n        \"other\": []\n    }\n\n    for cause in causes:\n        action, result = cause.split(\" \", 1)\n        \n        if \"accident\" in action.lower():\n            categories[\"accidents\"].append(cause)\n        elif \"heart attack\" in result.lower() or \"stroke\" in result.lower():\n            categories[\"natural\"].append(cause)\n        elif \"murder\" in action.lower() or \"killed\" in action.lower():\n            categories[\"homicides\"].append(cause)\n        elif \"suicide\" in action.lower() or \"overdose\" in result.lower():\n            categories[\"suicides\"].append(cause)\n        else:\n            categories[\"other\"].append(cause)\n\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    import string as str_lib\n\n    return ''.join(char for char in string if char not in str_lib.punctuation)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"Error: {num} is not a number.\")\n            result.append(None)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        if row:  # Check if the row is not empty\n            print(min(row))\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    if current_num < n:\n        print(\"Thank you\")\n        print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n\n    for item in lst:\n        if item == element:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n\n    return max_count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    \n    digits = []\n    while num > 0:\n        digits.append(num % base)\n        num //= base\n    \n    return all(d == digits[0] for d in digits)\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return \"\"\n    first_char = s[0]\n    rest_of_string = remove_vowels_recursive(s[1:])\n    if first_char.lower() in 'aeiou':\n        return rest_of_string\n    else:\n        return first_char + rest_of_string\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: application [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  --{option}: {description}\\n\"\n    return help_message.strip()\n"}
{"task_id": "valid/118", "completion": "\n    if input_string:\n        return input_string[0]\n    return None\n"}
{"task_id": "valid/119", "completion": "\n    count_table = {}\n    for item in Val:\n        if item in count_table:\n            count_table[item] += 1\n        else:\n            count_table[item] = 1\n    return count_table\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set('aeiouAEIOU')\n    return all(char in vowels for char in s)\n"}
{"task_id": "valid/122", "completion": "\n    seq_len = len(sequence)\n    sub_len = len(subsequence)\n    \n    if sub_len == 0:\n        return 1  # An empty subsequence is a subsequence of any sequence\n    \n    if seq_len < sub_len:\n        return 0  # If the sequence is shorter than the subsequence, return 0\n    \n    # Create a 2D array to store the counts\n    dp = [[0] * (sub_len + 1) for _ in range(seq_len + 1)]\n    \n    # Initialize the first column\n    for i in range(seq_len + 1):\n        dp[i][0] = 1  # An empty subsequence can be formed in one way\n    \n    # Fill the dp array\n    for i in range(1, seq_len + 1):\n        for j in range(1, sub_len + 1):\n            if sequence[i - 1] == subsequence[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[seq_len][sub_len]\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    sign = -1 if (h < 0) ^ (t < 0) else 1\n    h, t = abs(h), abs(t)\n    quotient = 0\n\n    while h >= t:\n        h -= t\n        quotient += 1\n\n    return sign * quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonant_count = 0\n    \n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonant_count += 1\n            \n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    import numpy as np\n\n    # Calculate the number of electrons based on energy values\n    num_electrons = np.zeros(dos_grid_size)\n    for i in range(dos_grid_size):\n        if grid_energies[i] < 0:  # Assuming energies below 0 are filled states\n            num_electrons[i] = ados[i]  # Fill states with density of states\n\n    # Adjust number of electrons based on doping levels\n    num_electrons += dope\n\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(dict.fromkeys(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    if not arr:\n        return []\n\n    arr.sort()\n    result = []\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        if left == right:\n            result.append(arr[left])\n        else:\n            result.append(arr[right])\n            result.append(arr[left])\n        left += 1\n        right -= 1\n\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_name, color_value = color\n        color_dict[color_name] = color_value\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {')': '(', '}': '{', ']': '['}\n\n    for char in string:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or stack.pop() != parentheses[char]:\n                return False\n\n    return len(stack) == 0\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Remove duplicates by converting the list to a set, then back to a list\n    unique_fruits = list(set(fruit_list))\n    \n    # Sort the list in lexicographical order\n    unique_fruits.sort()\n    \n    # Join the sorted list into a single string with each fruit on a new line\n    sorted_fruits_string = \"\\n\".join(unique_fruits)\n    \n    return sorted_fruits_string\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    return bool(re.search(pattern, string))\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n        dependencies = [\n            (app_name, 'previous_migration_name'),  # Replace with the actual previous migration name\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=255),  # Adjust field type and parameters as needed\n            ),\n        ]\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    length = len(df)\n    forecast_period = math.ceil(length * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n\n    # Process the string from the last digit to the first\n    for digit in reversed(n_str):\n        # Convert character to integer\n        num = int(digit)\n        # Double the digit and add carry\n        doubled = num * 2 + carry\n        # Calculate new digit and carry\n        result.append(str(doubled % 10))  # Get the last digit\n        carry = doubled // 10  # Get the carry\n\n    # If there's any carry left, add it\n    if carry > 0:\n        result.append(str(carry))\n\n    # The result is currently reversed, so reverse it back\n    return ''.join(reversed(result))\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (1.0, 0.5, 0.3),\n        \"position2\": (0.5, 1.0, 0.2),\n        \"position3\": (0.0, 1.5, 0.5),\n    }\n    \n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product if common_elements else 0\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        behavior = \"Users can select multiple answers for each question.\"\n    else:\n        behavior = \"Users can select only one answer for each question.\"\n\n    if zoom_level == \"high\":\n        behavior += \" The quiz interface is zoomed in for better visibility.\"\n    elif zoom_level == \"medium\":\n        behavior += \" The quiz interface is at a standard zoom level.\"\n    else:\n        behavior += \" The quiz interface is zoomed out for a broader view.\"\n\n    return behavior\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in sentence if char not in vowels)\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n\n    def merge_recursive(obj_a, obj_b):\n        for key in obj_a:\n            if key.isalpha():\n                if key in merged:\n                    merged[key] = obj_a[key]\n                else:\n                    merged[key] = obj_a[key]\n        \n        for key in obj_b:\n            if key.isalpha():\n                merged[key] = obj_b[key]\n\n    merge_recursive(a, b)\n\n    if 'nested' in merged:\n        merged['nested'] = merge_recursive(a.get('nested', {}), b.get('nested', {}))\n    else:\n        merged['nested'] = merge_recursive(a.get('nested', {}), b.get('nested', {}))\n\n    sorted_merged = {}\n    for key in sorted(merged.keys()):\n        sorted_merged[key] = merged[key]\n\n    return sorted_merged\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                nested_max = find_max_in_dict(value)\n                if nested_max > max_value:\n                    max_value = nested_max\n            elif isinstance(value, (int, float)):\n                if value > max_value:\n                    max_value = value\n            else:\n                raise ValueError(f\"Invalid value type: {type(value)} for key: {key}\")\n        \n        if max_value == float('-inf'):\n            raise ValueError(\"No numeric values found in the dictionary.\")\n        \n        return max_value\n    \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    if key in dict:\n        grades = dict[key]\n        return sum(grades) / len(grades)\n    else:\n        return None\n\naverage = calculate_avg_from_dict(grades_dict, values_key)\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    if n <= 0:\n        return []\n    return sorted(heapq.nsmallest(n, lst))\n"}
{"task_id": "valid/151", "completion": "\n    return x > 0 and (sqrt(1 + 8 * x) - 1) % 2 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
