{"task_id": "valid/0", "completion": "\n    # Define the categories and their corresponding keywords\n    categories = {\n        'sports': ['football', 'basketball', 'soccer', 'tennis'],\n        'politics': ['government', 'election', 'policy', 'law'],\n        'entertainment': ['movie', 'music', 'celebrity', 'award']\n    }\n\n    # Initialize the category with the highest score\n    best_category = None\n    best_score = 0\n\n    # Tokenize the text into words\n    words = text.split()\n\n    # Iterate over each category\n    for category, keywords in categories.items():\n        # Initialize the score for the current category\n        score = 0\n\n        # Iterate over each keyword in the category\n        for keyword in keywords:\n            # Check if the keyword is in the text\n            if keyword in words:\n                # Increment the score if the keyword is found\n                score += 1\n\n        # Update the best category if the current category has a higher score\n        if score > best_score:\n            best_category = category\n            best_score = score\n\n    # Return the best category\n    return best_category\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError as e:\n        raise ValueError(f\"Invalid JSON string: {e}\") from e\n\n"}
{"task_id": "valid/5", "completion": "\n    # Check if input is a number and not negative\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    # Check if number is divisible by 5\n    if n % 5 != 0:\n        return False\n\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in str(n))\n\n    # Check if sum of digits is divisible by 3\n    if sum_of_digits % 3 != 0:\n        return False\n\n    # If all conditions are met, return True\n    return True\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    if n == base:\n        return 1\n    if n < 1 or base < 2:\n        raise ValueError(\"Invalid input\")\n    if n < base:\n        return discrete_logarithm(n, base - 1) + 1\n    else:\n        return discrete_logarithm(n // base, base) + 1\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespace\n    text = text.strip()\n    \n    # Replace multiple whitespace characters with a single space\n    text = ' '.join(text.split())\n    \n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n    \n    # Remove special characters and digits\n    text = ''.join(e for e in text if e.isalnum() or e.isspace())\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    # Use regular expression to find either of two words in the string\n    pattern = re.compile(r'\\b(' + re.escape(word1) + '|' + re.escape(word2) + r')\\b')\n    # Search for the pattern in the string\n    match = pattern.search(text)\n    # Return True if a match is found, False otherwise\n    return match is not None\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n"}
{"task_id": "valid/16", "completion": "\n    \n    # Initialize an empty dictionary to store the extracted settings\n    settings = {}\n    \n    # Split the comment into lines\n    lines = comment.split('\\n')\n    \n    # Iterate over each line\n    for line in lines:\n        # Remove leading and trailing whitespaces\n        line = line.strip()\n        \n        # Check if the line starts with 'set'\n        if line.startswith('set'):\n            # Split the line into parts\n            parts = line.split()\n            \n            # Check if the line contains 'tabstop'\n            if 'tabstop' in parts:\n                # Extract the value of 'tabstop'\n                settings['tabstop'] = int(parts[parts.index('tabstop') + 1])\n            \n            # Check if the line contains 'expandtab'\n            elif 'expandtab' in parts:\n                # Extract the value of 'expandtab'\n                settings['expandtab'] = True\n            \n            # Check if the line contains 'shiftwidth'\n            elif 'shiftwidth' in parts:\n                # Extract the value of 'shiftwidth'\n                settings['shiftwidth'] = int(parts[parts.index('shiftwidth') + 1])\n            \n            # Check if the line contains 'softtabstop'\n            elif 'softtabstop' in parts:\n                # Extract the value of 'softtabstop'\n                settings['softtabstop'] = int(parts[parts.index('softtabstop') + 1])\n    \n    # Return the extracted settings\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    \n    # Combine the elements of the two lists\n    combined_list = reversed_list1 + reversed_list2\n    \n    # Sort the elements in ascending order\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    elif isinstance(struct, set):\n        return set(struct_to_dict(item) for item in struct)\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    # Convert the number to string to easily reverse it\n    num_str = str(num)\n    \n    # Initialize the closest palindrome and its difference with the given number\n    closest_palindrome = num\n    min_diff = abs(num - closest_palindrome)\n    \n    # Iterate over all numbers from num-1 to num+1\n    for i in range(num-1, num+2):\n        # Convert the current number to string\n        current_str = str(i)\n        \n        # Check if the current number is a palindrome\n        if current_str == current_str[::-1]:\n            # If it is, calculate the difference with the given number\n            diff = abs(num - i)\n            \n            # If the difference is smaller than the current minimum difference, update the closest palindrome and the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n                closest_palindrome = i\n                \n    return closest_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Get the number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Check if matrix is square\n    is_square = num_rows == num_cols\n    \n    # Initialize sum of diagonal elements\n    diagonal_sum = 0\n    \n    # Calculate sum of diagonal elements\n    for i in range(min(num_rows, num_cols)):\n        diagonal_sum += matrix[i][i]\n    \n    # Return the required information\n    return num_rows, num_cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key not in json_data or json_data[key] != value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the table of buttons\n    button_table = []\n    \n    # Calculate the number of rows needed to display all buttons\n    num_rows = -(-len(buttons) // num_columns)  # Ceiling division\n    \n    # Iterate over the number of rows\n    for i in range(num_rows):\n        # Initialize an empty list to store the current row of buttons\n        row = []\n        \n        # Iterate over the number of columns\n        for j in range(num_columns):\n            # Calculate the index of the current button\n            index = i * num_columns + j\n            \n            # If the index is within the bounds of the list of buttons, add the button to the row\n            if index < len(buttons):\n                # Create a button with the text of the button and a lambda function that triggers the action when clicked\n                button = Button(text=buttons[index], command=lambda action=buttons[index]: action())\n                row.append(button)\n        \n        # Add the row of buttons to the table\n        button_table.append(row)\n    \n    # Return the table of buttons\n    return button_table\n"}
{"task_id": "valid/32", "completion": "\n    # Initialize a set of all alphabets\n    all_alphabets = set('abcdefghijklmnopqrstuvwxyz')\n    \n    # Initialize a set to store the alphabets found in the string\n    found_alphabets = set()\n    \n    # Initialize a flag to track if the alphabets are in order\n    in_order = True\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is an alphabet\n        if char.isalpha():\n            # Add the alphabet to the set of found alphabets\n            found_alphabets.add(char.lower())\n            \n            # Check if the found alphabets are in order\n            if found_alphabets != all_alphabets:\n                in_order = False\n                break\n    \n    # Return True if the alphabets are in order, False otherwise\n    return in_order\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Initialize current number to empty string\n    current_num = \"\"\n    \n    # Iterate over each character in the string\n    for char in ts:\n        # If the character is a digit, add it to the current number\n        if char.isdigit():\n            current_num += char\n        # If the character is not a digit and the current number is not empty\n        elif current_num != \"\":\n            # Add the current number to the total sum\n            total_sum += int(current_num)\n            # Reset the current number\n            current_num = \"\"\n    \n    # If the string ends with a number, add it to the total sum\n    if current_num != \"\":\n        total_sum += int(current_num)\n    \n    # Return the total sum\n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"Array must only contain numerical values\")\n    \n    # Compute the sum of all elements in the array\n    total = sum(arr)\n    \n    return total\n"}
{"task_id": "valid/37", "completion": "\n    # First, we load the JSON data into a Python dictionary\n    neighborhoods = json.loads(json_data)\n\n    # Then, we extract the names of the neighborhoods from the dictionary\n    neighborhood_names = [neighborhood['name'] for neighborhood in neighborhoods]\n\n    # Finally, we sort the list of neighborhood names in alphabetical order\n    sorted_neighborhoods = sorted(neighborhood_names)\n\n    # We return the sorted list of neighborhood names\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n - 1):\n        # Calculate the absolute difference of the current pair\n        diff = abs(arr[i] + arr[i + 1])\n        # Update the minimum sum if the current difference is smaller\n        min_sum = min(min_sum, diff)\n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the results\n    results = {}\n\n    # Iterate over each vote in the list of votes\n    for vote in votes:\n        # Extract the candidate name and number of votes from the vote tuple\n        candidate, num_votes = vote\n\n        # Check if the candidate is already in the results dictionary\n        if candidate in results:\n            # If the candidate is already in the dictionary, add the current number of votes to their total\n            results[candidate] += num_votes\n        else:\n            # If the candidate is not in the dictionary, add them with their current number of votes\n            results[candidate] = num_votes\n\n    # Calculate the total number of votes\n    total_votes = sum(results.values())\n\n    # Check if the total number of votes is at least 100\n    if total_votes < 100:\n        raise ValueError(\"Total number of votes must be at least 100\")\n\n    # Initialize an empty dictionary to store the percentage of votes for each candidate\n    percentages = {}\n\n    # Iterate over each candidate in the results dictionary\n    for candidate, num_votes in results.items():\n        # Calculate the percentage of votes for the candidate\n        percentage = (num_votes / total_votes) * 100\n\n        # Round the percentage to two decimal places\n        percentage = round(percentage, 2)\n\n        # Store the percentage in the percentages dictionary\n        percentages[candidate] = percentage\n\n    # Return the results and percentages dictionaries\n    return results, percentages\n"}
{"task_id": "valid/41", "completion": "\n    # Define a dictionary to map month abbreviations to their full names\n    month_map = {\n        'Jan': 'January', 'Feb': 'February', 'Mar': 'March', 'Apr': 'April',\n        'May': 'May', 'Jun': 'June', 'Jul': 'July', 'Aug': 'August',\n        'Sep': 'September', 'Oct': 'October', 'Nov': 'November', 'Dec': 'December'\n    }\n\n    # Attempt to parse the date string in the DD-MM-YYYY format\n    try:\n        date = datetime.strptime(date_string, '%d-%m-%Y')\n    except ValueError:\n        # If parsing fails, attempt to parse in the DD-MMM-YYYY format\n        try:\n            day, month, year = date_string.split('-')\n            month = month_map[month]\n            date = datetime.strptime(f'{day} {month} {year}', '%d %B %Y')\n        except (ValueError, KeyError):\n            # If parsing in both formats fails, raise a ValueError\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n    # Validate the date for feasibility\n    if date.year < 1 or date.month < 1 or date.day < 1:\n        raise ValueError(\"Invalid date. Date components must be positive integers.\")\n\n    # Validate the month\n    if date.month not in range(1, 13):\n        raise ValueError(\"Invalid month.\")\n\n    # Validate the day\n    if date.day not in range(1, 32):\n        raise ValueError(\"Invalid day.\")\n\n    # Validate the year\n    if date.year not in range(1, 10000):\n        raise ValueError(\"Invalid year.\")\n\n    # Return the date in the standardized format\n    return date.strftime('%B %d, %Y')\n\n"}
{"task_id": "valid/42", "completion": "\n    # Define a list of allowed file types\n    allowed_types = {\n        'txt': ['txt', 'text'],\n        'doc': ['doc', 'docx'],\n        'pdf': ['pdf'],\n        'jpg': ['jpg', 'jpeg'],\n        'png': ['png'],\n        'mp3': ['mp3'],\n        'mp4': ['mp4']\n    }\n\n    # Get the file extension from the old file name\n    old_extension = oldname.split('.')[-1]\n\n    # Get the file extension from the new file name\n    new_extension = newname.split('.')[-1]\n\n    # Check if the new file name has a valid file extension\n    if new_extension in allowed_types.get(allowed_type, []):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(num):\n        if isinstance(num, int) or isinstance(num, float):\n            return num % 2 == 0\n        elif isinstance(num, str):\n            try:\n                return float(num) % 2 == 0\n            except ValueError:\n                return False\n        else:\n            raise TypeError(\"Unsupported type\")\n\n    def remove_uneven_element(element):\n        if isinstance(element, tuple):\n            return tuple(remove_uneven_element(x) for x in element if is_even(x))\n        elif isinstance(element, list):\n            return [remove_uneven_element(x) for x in element if is_even(x)]\n        else:\n            return element\n\n    return [remove_uneven_element(x) for x in lst if is_even(x)]\n\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    return sum(1 for char in string if char == specific_character)\n\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data is a dictionary where keys are generation numbers and values are lists of accuracy values\n    # generation is the current generation number\n    # accs is a list of accuracy values for the current generation\n    # You need to add the accuracy values to the corresponding generation in the histogram data\n    histogram_data[generation] = accs  # This line is already implemented in the code\n    return histogram_data  # This line is already implemented in the code\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    # Initialize an empty set to store unique languages\n    unique_languages = set()\n\n    # Iterate over each classifier in the list\n    for classifier in classifiers:\n        # Split the classifier into parts using '::' as the separator\n        parts = classifier.split('::')\n\n        # Check if the classifier matches the expected format\n        if len(parts) == 3 and parts[0] == 'Programming Language':\n            # Extract the language from the classifier\n            language = parts[1]\n\n            # Add the language to the set of unique languages\n            unique_languages.add(language)\n\n    # Return the count of unique languages\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Initialize an empty dictionary to store the count of each number\n    count_dict = {}\n    \n    # Iterate over each row in the array\n    for row in arr:\n        # Iterate over each number in the row\n        for num in row:\n            # If the number is already in the dictionary, increment its count by 1\n            if num in count_dict:\n                count_dict[num] += 1\n            # If the number is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[num] = 1\n    \n    # Convert the dictionary into a list of tuples and return it\n    return list(count_dict.items())\n"}
{"task_id": "valid/50", "completion": "\n    # Define a regular expression pattern to match URLs\n    pattern = re.compile(r'^/video/(\\d+)/$')\n\n    # Check if the URL matches the pattern\n    match = pattern.match(url)\n\n    # If the URL matches, return the corresponding view function\n    if match:\n        # Extract the video ID from the URL\n        video_id = match.group(1)\n\n        # Return the view function for the video detail page\n        return 'video_detail'\n\n    # If the URL does not match, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    return list[:position] + [item] + list[position:]\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \" world\"\n    concatenated_string = string + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price_\"):\n                price_sum += dictionary[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2[:] = [value for value in list2 if value not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    def decorator(func):\n        def wrapper(request, *args, **kwargs):\n            if request_method == 'GET':\n                return func(request, *args, **kwargs)\n            elif request_method == 'POST':\n                return func(request, *args, **kwargs)\n            else:\n                return 'Invalid request method'\n        return wrapper\n    return decorator\n"}
{"task_id": "valid/57", "completion": "\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd_recursive(a - b, b)\n    return gcd_recursive(a, b - a)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n    for file_path in file_paths:\n        # Extract the directory path from the file path\n        dir_path = os.path.dirname(file_path)\n        \n        # Extract the file name from the file path\n        file_name = os.path.basename(file_path)\n        \n        # Extract the file extension from the file name\n        file_extension = os.path.splitext(file_name)[1]\n        \n        # Determine the category based on the directory path\n        if 'dev' in dir_path:\n            category = 'Development'\n        elif 'prod' in dir_path:\n            category = 'Production'\n        elif 'test' in dir_path:\n            category = 'Testing'\n        else:\n            category = 'Unknown'\n        \n        # Add the file to the corresponding category in the dictionary\n        if category not in categorized_files:\n            categorized_files[category] = []\n        categorized_files[category].append(file_path)\n    \n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n    return median\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Calculate the time difference by subtracting the start time from the end time\n    timeDifference = timeEnd - timeStart\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    # Base case: if the start index is greater than the end index, the target is not in the array\n    if start > end:\n        return False\n\n    # Calculate the middle index\n    mid = (start + end) // 2\n\n    # If the middle element is the target, return True\n    if array[mid] == target:\n        return True\n\n    # If the middle element is greater than the target, search the left half\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    # If the middle element is less than the target, search the right half\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    if color not in colors:\n        return \"Invalid color\"\n    index = colors.index(color)\n    next_index = (index + 1) % len(colors)\n    return colors[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        root = int(num ** 0.5)\n        if root * root == num:\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys in given dictionary are:\", \", \".join(dict.keys()))\n\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = \"Hello, my name is {} and I am {} years old.\"\n    concatenated_string = phrase.format(name, age)\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    def process_string(s):\n        # Use regular expression to find any non-alphanumeric or whitespace characters\n        if re.search(r'\\W', s):\n            return None\n        else:\n            return s.capitalize()\n\n    return [process_string(s) for s in strings]\n\n"}
{"task_id": "valid/71", "completion": "\n    try:\n        return string.index(char)\n    except ValueError:\n        return -1\n"}
{"task_id": "valid/72", "completion": "\n    # Initialize an empty list to store the bold text\n    bold_text = []\n    \n    # Initialize a flag to track if we are currently inside a bold tag\n    inside_bold = False\n    \n    # Initialize an empty string to build the current bold text\n    current_bold = \"\"\n    \n    # Iterate over each character in the HTML code\n    for char in html_code:\n        # If we encounter an opening bold tag, set the flag to True\n        if char == \"<\" and html_code[html_code.index(char)+1:html_code.index(char)+6] == \"b>\":\n            inside_bold = True\n        # If we encounter a closing bold tag, set the flag to False and add the current bold text to the list\n        elif char == \"<\" and html_code[html_code.index(char)+1:html_code.index(char)+6] == \"/b>\":\n            inside_bold = False\n            bold_text.append(current_bold)\n            current_bold = \"\"\n        # If we are inside a bold tag, add the character to the current bold text\n        elif inside_bold:\n            current_bold += char\n        # If we are not inside a bold tag, reset the current bold text\n        else:\n            current_bold = \"\"\n    \n    # Return the list of bold text\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"Soda\": 1.00,\n        \"Chips\": 0.50,\n        \"Candy\": 0.25,\n        \"Water\": 0.50\n    }\n\n    # Check if the item is in the stock\n    if item in items:\n        # Calculate the change\n        change = money_inserted - items[item]\n        # Check if the user has enough money\n        if change >= 0:\n            # Update the stock\n            if item in stock:\n                stock[item] += 1\n            else:\n                stock[item] = 1\n            # Return the change\n            return f\"Here is your {item}. Your change is ${change:.2f}.\"\n        else:\n            return \"You don't have enough money.\"\n    else:\n        return \"Item not found.\"\n"}
{"task_id": "valid/74", "completion": "\n    # Combine the two lists into one\n    merged_list = list1 + list2\n    \n    # Convert the list to a set to remove duplicates\n    merged_set = set(merged_list)\n    \n    # Convert the set back to a list and return it\n    return list(merged_set)\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    encoded_string = base64.b64encode(string.encode('utf-8'))\n    return encoded_string.decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]  # Return indices of non-zero entries in the vector\n"}
{"task_id": "valid/78", "completion": "\n    # Define a variable and assign a value to it\n    variable = 10\n\n    # Validate the variable\n    if variable == 10:\n        print(\"The variable is valid.\")\n    else:\n        print(\"The variable is not valid.\")\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) == 0:\n        return arr\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == merged_arr[-1]:\n            merged_arr[-1] = arr[i]\n        else:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text using regular expression\n    tokens = re.findall(r'\\w+|[^\\w\\s]', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    # Filter the list to get numbers divisible by both 3 and 7\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    # Calculate the average of these numbers\n    average = sum(divisible_numbers) / len(divisible_numbers) if divisible_numbers else 0\n    \n    # Find maximum and minimum values among these numbers\n    max_value = max(divisible_numbers) if divisible_numbers else 0\n    min_value = min(divisible_numbers) if divisible_numbers else 0\n    \n    # Display the results\n    print(f\"Average of numbers divisible by both 3 and 7: {average}\")\n    print(f\"Maximum value among numbers divisible by both 3 and 7: {max_value}\")\n    print(f\"Minimum value among numbers divisible by both 3 and 7: {min_value}\")\n    \n    # Display number of occurrences of each unique number divisible by both 3 and 7 in list\n    occurrences = {}\n    for num in numbers:\n        if num % 3 == 0 and num % 7 == 0:\n            occurrences[num] = occurrences.get(num, 0) + 1\n    for num, count in occurrences.items():\n        print(f\"Number {num} occurs {count} times in the list.\")\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        word = word.lower()\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n    return None\n"}
{"task_id": "valid/85", "completion": "\n    # Initialize the value of e to 0\n    e = 0.0\n    # Initialize the value of the factorial to 1\n    factorial = 1\n    # Initialize the value of the denominator to 1\n    denominator = 1\n    # Loop through the series until the desired number of decimal places is reached\n    while True:\n        # Calculate the next term in the series\n        term = 1 / (factorial * denominator)\n        # Add the term to the value of e\n        e += term\n        # Increment the denominator\n        denominator += 1\n        # Increment the factorial\n        factorial *= denominator\n        # Check if the desired number of decimal places has been reached\n        if denominator > 10 ** decimal_places:\n            break\n    # Return the calculated value of e\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    average = sum(numbers) / len(numbers)\n    sum_of_numbers = sum(numbers)\n    return average, sum_of_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_of_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles = {}\n    for article in encyclopedia:\n        related_articles[article] = 0\n        for other_article in encyclopedia:\n            if article != other_article:\n                if isRelated(article, other_article):\n                    related_articles[article] += 1\n    return related_articles\n"}
{"task_id": "valid/89", "completion": "\n    return lst.index(max(lst))\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    row, col = 0, n - 1\n\n    while row < m and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] > target:\n            col -= 1\n        else:\n            row += 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:  # Check if number is positive and not even\n            sum_odd += num\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n < 1 or n > len(lst):\n        return None\n    return sorted(lst, reverse=True)[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = \"Music Bot for Discord Servers\\n\"\n    description += \"Features:\\n\"\n    description += \"  - Play music in voice channels\\n\"\n    description += \"  - Manage personal playlists and server settings through web app\\n\"\n    description += \"  - Categorized commands for easy access to help information\\n\"\n    description += \"  - Help information for each command\\n\"\n    description += \"  - Web app for managing playlists and server settings\\n\"\n    description += \"  - Ability to categorize commands and provide help information for each command\\n\"\n    description += \"  - Ability to provide information about its features and web app\\n\"\n    description += \"  - Ability to manage and play music in a server\\n\"\n    description += \"  - Ability to provide help information for each command\\n\"\n    description += \"  - Ability to categorize commands and provide help information for each command\\n\"\n    description += \"  - Ability to provide information about its features and web app\\n\"\n    description += \"  - Ability to manage and play music in a server\\n\"\n    description += \"  - Ability to provide help information for each command\\n\"\n    description += \"  - Ability to categorize commands and provide help information for each command\\n\"\n    description += \"  - Ability to provide information about its features and web app\\n\"\n    description += \"  - Ability to manage and play music in a server\\n\"\n    description += \"  - Ability to provide help information for each command\\n\"\n    description += \"  - Ability to categorize commands and provide help information for each command\\n\"\n    description += \"  - Ability to provide information about its features and web app\\n\"\n    description += \"  - Ability to manage and play music in a server\\n\"\n    description += \"  - Ability to provide help information for each command\\n\"\n    description += \"  - Ability to categorize commands and provide help information for each command\\n\"\n    description += \"  - Ability to provide information about its features and web app\\n\"\n    description += \"  - Ability to manage and play music in a server\\n\"\n    description += \"  - Ability to provide help information for each command\\n\"\n    description += \"  - Ability to categorize commands and provide help information for each command\\n\"\n    description += \"  - Ability to provide information about its features and web app\\n\"\n    description += \"  - Ability to manage and play music in a server\\n\"\n    description += \"  - Ability"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 18:\n        return \"Minor\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    # Define a dictionary to map numerical grades to letter grades\n    grade_map = {\n        90: 'A',\n        80: 'B',\n        70: 'C',\n        60: 'D',\n        0: 'F'\n    }\n    \n    # Use ternary operator to determine letter grade based on numerical grade\n    letter_grade = 'A' if numerical_grade >= 90 else 'B' if numerical_grade >= 80 else 'C' if numerical_grade >= 70 else 'D' if numerical_grade >= 60 else 'F'\n    \n    # Calculate GPA by dividing numerical grade by 10\n    gpa = numerical_grade / 10\n    \n    # Return letter grade and GPA as a tuple\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    # Initialize an empty dictionary to store the count of vowels in each palindrome\n    vowel_count_dict = {}\n    \n    # Iterate over each palindrome in the input tuple\n    for palindrome in palindrome_tuples:\n        # Initialize a counter for vowels in the current palindrome\n        vowel_count = 0\n        \n        # Iterate over each character in the palindrome\n        for char in palindrome:\n            # Check if the character is a vowel\n            if char.lower() in 'aeiou':\n                # If it's a vowel, increment the counter\n                vowel_count += 1\n        \n        # Store the count of vowels in the dictionary\n        vowel_count_dict[palindrome] = vowel_count\n    \n    # Return the dictionary\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Remove all non-alphanumeric characters from the string\n    s = ''.join(e for e in s if e.isalnum() or e.isspace())\n    \n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Remove all duplicate characters from the string\n    s = ''.join(sorted(set(s), key=s.index))\n    \n    return s\n"}
{"task_id": "valid/105", "completion": "\n    num_set = set()\n    for num in arr:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version = dependency\n        # Extract the numerical identifier from the version number\n        version_number = int(''.join(filter(str.isdigit, version)))\n        # If the package is not in the dictionary or the current version is newer than the stored version, update the dictionary\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the categorized causes of death\n    categorized = {}\n    \n    # Loop through each cause of death in the list\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split(' ', 1)\n        \n        # If the action is not already in the dictionary, add it\n        if action not in categorized:\n            categorized[action] = []\n        \n        # Add the cause to the list of causes for the action\n        categorized[action].append(result)\n    \n    # Return the dictionary of categorized causes of death\n    return categorized\n"}
{"task_id": "valid/108", "completion": "\n    # Remove spaces from the input name\n    name_without_spaces = name.replace(\" \", \"\")\n    \n    # Convert the name to lowercase\n    lowercase_name = name_without_spaces.lower()\n    \n    # Replace spaces with hyphens\n    code_name = lowercase_name.replace(\" \", \"-\")\n    \n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    # Import string module to get all punctuation marks\n    import string\n    \n    # Use str.translate() to remove punctuation marks\n    # str.maketrans() is used to create a translation table\n    # string.punctuation contains all punctuation marks\n    translator = str.maketrans('', '', string.punctuation)\n    return string.translate(translator)\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        min_val = min(row)\n        print(min_val)\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n    elif current_num == n:\n        print(\"Thank you\")\n    else:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n        print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    digits = []\n    while num > 0:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    # Base case: if the string is empty, return it as is\n    if not s:\n        return s\n\n    # If the first character is a vowel, remove it and recurse on the rest of the string\n    if s[0].lower() in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n\n    # If the first character is not a vowel, keep it and recurse on the rest of the string\n    return s[0] + remove_vowels_recursive(s[1:])  # <--- changed here\n\n"}
{"task_id": "valid/117", "completion": "\n    # Initialize an empty string to store the help message\n    help_message = \"\"\n\n    # Iterate over each option in the list\n    for option in options:\n        # Extract option name and description from the tuple\n        option_name, option_description = option\n\n        # Append the option name and description to the help message\n        help_message += f\"  {option_name}: {option_description}\\n\"\n\n    # Return the generated help message\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    # Initialize a dictionary to store the count of each value\n    count_dict = {}\n    \n    # Iterate over the input array\n    for val in Val:\n        # If the value is already in the dictionary, increment its count\n        if val in count_dict:\n            count_dict[val] += 1\n        # If the value is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[val] = 1\n    \n    # Return the dictionary as a table\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFFFFFFFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    for char in s:\n        if char.lower() not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence)):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Initialize quotient to 0\n    q = 0\n    # Loop until t is greater than h\n    while t <= h:\n        # Subtract t from h\n        h -= t\n        # Increment quotient\n        q += 1\n    # Return quotient\n    return q\n"}
{"task_id": "valid/124", "completion": "\n    def sum_odd_func(input_list):\n        return sum(num for num in input_list if num % 2 != 0)\n    return sum_odd_func\n"}
{"task_id": "valid/125", "completion": "\n    # Convert the string to lowercase to handle case insensitivity\n    string = string.lower()\n    # Initialize a counter for consonants\n    consonant_count = 0\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is an alphabet\n        if char.isalpha():\n            # Check if the character is not a vowel\n            if char not in 'aeiou':\n                # Increment the consonant count\n                consonant_count += 1\n    # Return the count of consonants\n    return consonant_count\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize the number of electrons\n    num_electrons = 0\n    \n    # Iterate over the grid energies and ADOS values\n    for energy, ados in zip(grid_energies, ados):\n        # Calculate the number of electrons at the current energy\n        num_electrons_at_energy = ados * (1 + (energy - dope) / dos_grid_size)\n        \n        # Add the number of electrons at the current energy to the total number of electrons\n        num_electrons += num_electrons_at_energy\n    \n    # Return the total number of electrons\n    return num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two pointers, one at the start and one at the end of the array\n    left, right = 0, len(arr) - 1\n    \n    # Initialize the result array\n    result = [0] * len(arr)\n    \n    # Fill the result array with the largest and smallest numbers from the original array\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            result[i] = arr[left]\n            left += 1\n        else:\n            result[i] = arr[right]\n            right -= 1\n    \n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = [[]]\n    for elem in lst:\n        sublists += [sublist + [elem] for sublist in sublists]\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n    # First, we need to import the necessary modules\n    from django.db import migrations, models\n\n    # We define a class that inherits from `migrations.Migration`\n    class Migration(migrations.Migration):\n        # We specify the app and model that we're working with\n        app_label = 'history'\n        model_name = 'CommitteeMember'\n\n        # We define the operations that we want to perform in this migration\n        operations = [\n            # We use the `AlterField` operation to alter the field\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=255),\n            ),\n        ]\n\n    # We return the migration operation\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Calculate the sum of the common elements\n    common_elements_sum = sum(common_elements)\n    \n    return common_elements_sum\n"}
{"task_id": "valid/137", "completion": "\n    # Calculate the length of the dataset\n    dataset_length = len(df)\n    \n    # Calculate 1% of the dataset length\n    one_percent = dataset_length * 0.01\n    \n    # Round up to the nearest integer\n    forecast_period = math.ceil(one_percent)\n    \n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    # Calculate the start index of the page\n    start_index = (page_number - 1) * items_per_page\n    \n    # Calculate the end index of the page\n    end_index = start_index + items_per_page\n    \n    # Slice the list of items to get the items for the current page\n    paginated_items = items[start_index:end_index]\n    \n    return paginated_items\n\n"}
{"task_id": "valid/140", "completion": "\n    n = n_str\n    result = ''\n    carry = 0\n    for i in range(len(n) - 1, -1, -1):\n        digit = int(n[i])\n        double_digit = digit * 2 + carry\n        result = str(double_digit % 10) + result\n        carry = double_digit // 10\n    if carry:\n        result = str(carry) + result\n    return result\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.0, 0.5),\n        \"down\": (0.0, 0.0, -0.5),\n        \"left\": (-0.5, 0.0, 0.0),\n        \"right\": (0.5, 0.0, 0.0),\n        \"forward\": (0.0, 0.5, 0.0),\n        \"backward\": (0.0, -0.5, 0.0)\n    }\n\n    return presets.get(preset_name, None)\n"}
{"task_id": "valid/142", "completion": "\n    # Convert the lists to sets for efficient lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Find the intersection of the two sets (common elements)\n    common_elements = set1.intersection(set2)\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Iterate over the common elements and multiply them together\n    for element in common_elements:\n        product *= element\n    \n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Define the quiz system behavior based on the configurations\n    if allow_multiple_answer:\n        # If multiple answers are allowed, the quiz system will display all possible answers\n        if zoom_level == 1:\n            # If the zoom level is 1, the quiz system will display all possible answers in a list\n            return \"Display all possible answers in a list\"\n        elif zoom_level == 2:\n            # If the zoom level is 2, the quiz system will display all possible answers in a grid\n            return \"Display all possible answers in a grid\"\n        else:\n            # If the zoom level is neither 1 nor 2, the quiz system will display an error message\n            return \"Error: Invalid zoom level\"\n    else:\n        # If multiple answers are not allowed, the quiz system will display only one possible answer\n        if zoom_level == 1:\n            # If the zoom level is 1, the quiz system will display only one possible answer\n            return \"Display only one possible answer\"\n        elif zoom_level == 2:\n            # If the zoom level is 2, the quiz system will display only one possible answer in a grid\n            return \"Display only one possible answer in a grid\"\n        else:\n            # If the zoom level is neither 1 nor 2, the quiz system will display an error message\n            return \"Error: Invalid zoom level\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in sentence if char not in vowels])\n"}
{"task_id": "valid/146", "completion": "\n    merged = {}\n    for key in sorted(a.keys()):\n        if key.isalpha():\n            if isinstance(a[key], dict):\n                merged[key] = merge_objects(a[key], b.get(key, {}))\n            else:\n                merged[key] = a[key]\n    for key in sorted(b.keys()):\n        if key.isalpha():\n            if key not in merged:\n                if isinstance(b[key], dict):\n                    merged[key] = merge_objects({}, b[key])\n                else:\n                    merged[key] = b[key]\n            elif isinstance(b[key], dict):\n                merged[key] = merge_objects(merged[key], b[key])\n    return merged\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    max_val = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_val = max(max_val, find_max_in_dict(value))\n        else:\n            max_val = max(max_val, value)\n    return max_val\n"}
{"task_id": "valid/148", "completion": "\n    # Get the list of values for the given key\n    values = dict.get(key, [])\n\n    # Check if the list is not empty\n    if values:\n        # Calculate the average of the values\n        avg = sum(values) / len(values)\n        return avg\n    else:\n        return None\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    return string.replace('e', '*')  # replace 'e' with '*' in the string\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
