{"task_id": "valid/0", "completion": "\n    # Define rules for text classification\n    rules = {\n        'sports': ['football', 'basketball', 'cricket', 'tennis'],\n        'politics': ['election', 'president', 'parliament', 'government'],\n        'technology': ['programming', 'coding', 'algorithm', 'software'],\n        'entertainment': ['movie', 'music', 'tv', 'comedy']\n    }\n\n    # Classify text based on rules\n    for category, keywords in rules.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n\n    # If no category is matched, return 'other'\n    return 'other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON list\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    elif base < 2 or n < 2:\n        return \"Invalid input\"\n    else:\n        for i in range(1, n):\n            if (base ** i) % n == 1:\n                return i\n        return \"No discrete logarithm found\"\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n    except ValueError:\n        raise ValueError(\"json_str not valid JSON string\")\n    pprint.pprint(json_data)\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set from the string to remove duplicates\n    unique_chars = set(string)\n    \n    # Compare the length of the set with the length of the string\n    # If they are equal, all characters were unique\n    return len(unique_chars) == len(string)\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Convert to lowercase\n    text = text.lower()\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b' + re.escape(word1) + r'\\b.*\\b' + re.escape(word2) + r'\\b'\n    return bool(re.search(pattern, text, re.IGNORECASE))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.split('\\n'):\n        if line.startswith('#'):\n            line = line[1:].strip()\n            if 'tabstop' in line:\n                settings['tabstop'] = int(line.split('=')[1].strip())\n            elif 'expandtab' in line:\n                settings['expandtab'] = line.split('=')[1].strip() == 'true'\n            elif 'shiftwidth' in line:\n                settings['shiftwidth'] = int(line.split('=')[1].strip())\n            elif 'softtabstop' in line:\n                settings['softtabstop'] = int(line.split('=')[1].strip())\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse both lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine both lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    elif isinstance(struct, set):\n        return {struct_to_dict(item) for item in struct}\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"}
{"task_id": "valid/25", "completion": "\n    if num < 0:\n        return \"Invalid input, please enter a positive number.\"\n    else:\n        return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Check if matrix is square\n    is_square = len(matrix) == len(matrix[0])\n    \n    # Number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Sum of diagonal elements\n    sum_diag = sum(matrix[i][i] for i in range(num_rows))\n    \n    return num_rows, num_cols, sum_diag, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_element = lst[0]\n    for i in lst:\n        if i < min_element:\n            min_element = i\n    return min_element\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    from tkinter import Button, Tk, Frame\n\n    root = Tk()\n    frame = Frame(root)\n    frame.pack()\n\n    for i, button in enumerate(buttons):\n        row = i // num_columns\n        col = i % num_columns\n        Button(frame, text=button, command=lambda b=button: print(f\"Button '{b}' clicked\")).grid(row=row, column=col)\n\n    root.mainloop()\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(s)):\n        if s[i] != alphabet[i]:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [ts[i:j] for i in range(len(ts)) for j in range(i + 1, len(ts) + 1) if ts[i:j].isdigit()]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if array is empty\n    if not arr:\n        return 0\n    \n    # Check if array contains only numerical values\n    if not all(isinstance(i, (int, float)) for i in arr):\n        raise ValueError(\"Array must only contain numerical values\")\n    \n    # Compute and return the sum of all elements in the array\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    neighborhoods.sort(key=lambda x: x['name'])\n    return [neighborhood['name'] for neighborhood in neighborhoods]\n\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize result as maximum possible\n    min_sum = float('inf')\n\n    # Sort the array\n    arr.sort()\n\n    # Iterate through all array elements\n    for i in range(n):\n        # If the current element is greater than or equal to the sum of the last two elements\n        if (arr[i] >= arr[n - 1] + arr[n - 2]):\n            # The sum of the last two elements and the current element is the minimum sum\n            min_sum = min(min_sum, arr[i] + arr[n - 1] + arr[n - 2])\n            break\n\n        # If the current element is less than the sum of the last two elements\n        else:\n            # Iterate through the remaining elements\n            for j in range(n - 1, i, -1):\n                # If the sum of the current element and the last element is less than the minimum sum\n                if (arr[i] + arr[j] < min_sum):\n                    # Update the minimum sum\n                    min_sum = arr[i] + arr[j]\n\n    # Return the minimum sum\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if total number of votes is at least 100\n    if len(votes) < 100:\n        return \"Error: Total number of votes must be at least 100.\"\n\n    # Create a dictionary to store vote counts for each candidate\n    vote_counts = {}\n\n    # Iterate through the list of votes\n    for vote in votes:\n        # Check if the candidate name is not empty and is not more than 10 characters\n        if not vote[0] or len(vote[0]) > 10:\n            return \"Error: Candidate name must not be empty and must be at most 10 characters.\"\n\n        # Check if the number of votes is a positive integer not exceeding 1000\n        if not isinstance(vote[1], int) or vote[1] < 0 or vote[1] > 1000:\n            return \"Error: Number of votes must be a positive integer not exceeding 1000.\"\n\n        # Add the vote count to the dictionary\n        if vote[0] in vote_counts:\n            vote_counts[vote[0]] += vote[1]\n        else:\n            vote_counts[vote[0]] = vote[1]\n\n    # Calculate the percentage of votes each candidate received\n    total_votes = sum(vote_counts.values())\n    percentage_votes = {candidate: (vote_count / total_votes) * 100 for candidate, vote_count in vote_counts.items()}\n\n    # Round the percentage of votes to two decimal places\n    percentage_votes = {candidate: round(percentage, 2) for candidate, percentage in percentage_votes.items()}\n\n    return percentage_votes\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Convert the date string to a datetime object\n        date_obj = datetime.strptime(date_string, \"%d-%b-%Y\")\n        \n        # Format the date object to the desired output\n        formatted_date = date_obj.strftime(\"%B %d, %Y\")\n        \n        return formatted_date\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MMM-YYYY format.\")\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'pdf', 'jpg']\n    if allowed_type in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for item in lst:\n        if isinstance(item, tuple):\n            result.append(remove_uneven(item))\n        elif isinstance(item, str):\n            if item.isdigit() and int(item) % 2 == 0:\n                result.append(item)\n        elif isinstance(item, (int, float)) and item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = 2\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.add_scalar('Accuracy', accs, generation)\n    return histogram_data, accs\n"}
{"task_id": "valid/47", "completion": "\n    pattern = r'^[a-zA-Z0-9]{5}$'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            unique_languages.add(parts[1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over each sub-array in the input array\n    for sub_arr in arr:\n        # Iterate over each number in the sub-array\n        for num in sub_arr:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # Otherwise, add the number to the dictionary with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Create a new array to store the count of each number\n    count_arr = []\n\n    # Iterate over each number in the input array\n    for num in arr:\n        # Append the count of the number to the output array\n        count_arr.append(count_dict[num])\n\n    # Return the output array\n    return count_arr\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^$'),\n        re.compile(r'^(?P<id>\\d+)/$'),\n    ]\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            return match.group('id')\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"This is a sentence.\"\n    return sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dict_item in list_of_dicts:\n        for key, value in dict_item.items():\n            if key.startswith(\"price_\"):\n                total_price += value\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        list1.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view_view_get\n    elif request_method == 'POST':\n        return api_advisor_view_view_post\n    else:\n        return \"Invalid request method\"\n"}
{"task_id": "valid/57", "completion": "\n    if not all(isinstance(i, int) and i > 0 for i in [a, b]):\n        raise ValueError(\"Both numbers must be positive integers\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'database': [],\n        'network': [],\n        'system': [],\n        'other': []\n    }\n\n    for file_path in file_paths:\n        if 'database' in file_path:\n            categorized_files['database'].append(file_path)\n        elif 'network' in file_path:\n            categorized_files['network'].append(file_path)\n        elif 'system' in file_path:\n            categorized_files['system'].append(file_path)\n        else:\n            categorized_files['other'].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # calculate the difference in seconds\n    timeDifference = timeEnd - timeStart\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    return colors[(colors.index(color) + 1) % len(colors)]\n"}
{"task_id": "valid/64", "completion": "\n    # Create a new list to store the incremented values\n    incremented_list = []\n\n    # Iterate over each value in the input list\n    for value in list:\n        # Increment the value by 1\n        incremented_value = value + 1\n\n        # Append the incremented value to the new list\n        incremented_list.append(incremented_value)\n\n    # Return the new list with incremented values\n    return incremented_list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n    return None\n"}
{"task_id": "valid/69", "completion": "\n    string_1 = \"Hello\"\n    string_2 = \"World\"\n    phrase = f\"{string_1} {string_2}\"\n    return phrase\n\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # Remove special characters\n        string = re.sub(r'\\W+', '', string)\n        # Capitalize string\n        string = string.upper()\n        result.append(string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    start_tag = '<b'\n    end_tag = '</b>'\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_text.append(html_code[start_index + len(start_tag):end_index])\n        start_index = end_index + len(end_tag)\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # set list of items with corresponding prices\n    items = {\n        \"cola\": 1.5,\n        \"chips\": 0.75,\n        \"candy\": 1.0\n    }\n\n    # check if item is in stock\n    if item not in items:\n        return \"Item not available\"\n\n    # check if user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n\n    # calculate change\n    change = money_inserted - items[item]\n\n    # update stock\n    # for simplicity, we'll just print a message indicating the item has been purchased\n    print(f\"{item} purchased. Change returned: ${change:.2f}\")\n\n    return change\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to the variable\n    value = 10\n    \n    # Validate the value\n    if isinstance(value, int) and value > 0:\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is invalid.\")\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    merged_arr = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern\n    pattern = r'\\b\\w+\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    tokens = re.findall(pattern, text)\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_by_3_and_7 = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_by_3_and_7:\n        return \"No numbers divisible by 3 and 7 found.\"\n    \n    average = sum(divisible_by_3_and_7) / len(divisible_by_3_and_7)\n    max_value = max(divisible_by_3_and_7)\n    min_value = min(divisible_by_3_and_7)\n    \n    unique_numbers = set(divisible_by_3_and_7)\n    occurrences = {num: divisible_by_3_and_7.count(num) for num in unique_numbers}\n    \n    return average, max_value, min_value, occurrences\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    return [word for word, freq in frequency.items() if freq == max_frequency]\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for number in numbers:\n        sum += number\n    average = sum / len(numbers)\n    return average, sum\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    # Create a dictionary to store the count of related articles for each entry\n    related_articles_count = {}\n\n    # Iterate over each entry in the encyclopedia\n    for entry in encyclopedia:\n        # Get the related articles for the current entry\n        related_articles = entry['related_articles']\n\n        # Iterate over each related article and increment its count in the dictionary\n        for article in related_articles:\n            if article in related_articles_count:\n                related_articles_count[article] += 1\n            else:\n                related_articles_count[article] = 1\n\n    # Return the dictionary containing the count of related articles for each entry\n    return related_articles_count\n\n\nencyclopedia = [\n    {\n        'title': 'Python',\n        'related_articles': ['Java', 'C++', 'JavaScript']\n    },\n    {\n        'title': 'Java',\n        'related_articles': ['Python', 'C++', 'JavaScript']\n    },\n    {\n        'title': 'C++',\n        'related_articles': ['Python', 'Java', 'JavaScript']\n    },\n    {\n        'title': 'JavaScript',\n        'related_articles': ['Python', 'Java', 'C++']\n    }\n]\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "valid/90", "completion": "\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('root')\n    for key, value in dictionary.items():\n        child = Element(key)\n        if isinstance(value, dict):\n            child.extend(dict_to_xml(value).findall('*'))\n        else:\n            child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count += 1\n    average_odd = sum_odd / count\n    return sum_odd, average_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst):\n        return None\n    else:\n        lst.sort()\n        return lst[-n]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n"}
{"task_id": "valid/97", "completion": "\n    description = f\"Welcome to the Discord Music Bot! This bot allows you to play music in your server. Here are some of the features it provides:\\n\"\n    for key, value in mapping.items():\n        description += f\"- {key}: {value}\\n\"\n    description += \"\\nTo get started, use the `/help` command to see a list of all available commands and their descriptions.\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return \"-\" + dec_to_ternary(-n)\n    elif n == 0:\n        return \"0\"\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char in vowels:\n                count += 1\n        vowel_count_dict[palindrome] = count\n\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # convert string to list for manipulation\n    s = list(s)\n    # iterate over each character in the list\n    for i in range(len(s)):\n        # if character is a letter, swap its case\n        if s[i].isalpha():\n            s[i] = s[i].swapcase()\n        # if character is a digit, double its value\n        elif s[i].isdigit():\n            s[i] = str(int(s[i]) * 2)\n        # if character is a special character, replace it with its ASCII value\n        else:\n            s[i] = str(ord(s[i]))\n    # join the list back into a string and return\n    return ''.join(s)\n"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the numbers we've seen so far\n    seen_numbers = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number is in the set\n        if -num in seen_numbers:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen_numbers.add(num)\n\n    # If we get here, we haven't found any pairs that sum to 0\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # create empty lists for each category\n    killed_by_fire = []\n    killed_by_poison = []\n    killed_by_disease = []\n    killed_by_other = []\n\n    # loop through each cause of death\n    for cause in causes:\n        # split the cause into action and result\n        action, result = cause.split()\n\n        # categorize the cause based on the action\n        if action == \"burned\":\n            killed_by_fire.append(result)\n        elif action == \"poisoned\":\n            killed_by_poison.append(result)\n        elif action == \"suffered\":\n            killed_by_disease.append(result)\n        else:\n            killed_by_other.append(result)\n\n    # return the categorized causes of death\n    return killed_by_fire, killed_by_poison, killed_by_disease, killed_by_other\n"}
{"task_id": "valid/108", "completion": "\n    return name.lower().replace(\" \", \"-\")\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"Error: {num} is not a number.\")\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    return min_values\n"}
{"task_id": "valid/113", "completion": "\n    if current_num < n:\n        if current_num % 2 == 0:\n            print(f\"Thank you for the even number {current_num}\")\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if i < len(lst) - 1 and lst[i + 1] != element:\n                break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    digits = set(str(num))\n    return all(digit in str(base) for digit in digits)\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if not s:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python app.py [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]:<15}{option[1]}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val[0]:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & ((1 << len(bin(sample_bitset)[2:])) - 1)\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subseq_len = len(subsequence)\n    for i in range(len(sequence)):\n        if sequence[i:i+subseq_len] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    \n    if h == 0:\n        return 0\n    \n    if h < 0 and t < 0:\n        return dividir(-h, -t)\n    \n    if h < 0:\n        return -dividir(-h, t)\n    \n    if t < 0:\n        return -dividir(h, -t)\n    \n    if h < t:\n        return 0\n    \n    return 1 + dividir(h - t, t)\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n    return count\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate number of electrons based on energy values\n    total_electrons = 0\n    for energy, density in zip(grid_energies, ados):\n        total_electrons += density * dos_grid_size\n\n    # Adjust electrons based on doping levels\n    if dope > 0:\n        total_electrons += dope\n    elif dope < 0:\n        total_electrons -= abs(dope)\n\n    return total_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    result = []\n    while arr:\n        result.append(arr.pop(0))\n        if arr:\n            result.append(arr.pop())\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda k: k[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        doubled_digit = int(digit) * 2 + carry\n        result.append(doubled_digit % 10)\n        carry = doubled_digit // 10\n    if carry:\n        result.append(carry)\n    return ''.join(map(str, reversed(result)))\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"up\": (0.0, 0.0, 0.1),\n        \"down\": (0.0, 0.0, -0.1),\n        \"left\": (0.1, 0.0, 0.0),\n        \"right\": (-0.1, 0.0, 0.0),\n        \"forward\": (0.0, 0.1, 0.0),\n        \"backward\": (0.0, -0.1, 0.0),\n    }\n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n\n        If allow_multiple_answer is True, users can select multiple answers for each question.\n        \"\"\"\n        if zoom_level == 1:\n            \"\"\"\n            If zoom_level is 1, the quiz system will display questions in a linear order.\n            \"\"\"\n            return \"Linear order\"\n        elif zoom_level == 2:\n            \"\"\"\n            If zoom_level is 2, the quiz system will display questions in a random order.\n            \"\"\"\n            return \"Random order\"\n        else:\n            \"\"\"\n            If zoom_level is neither 1 nor 2, the quiz system will display questions in a linear order.\n            \"\"\"\n            return \"Linear order\"\n    else:\n        \"\"\"\n        If allow_multiple_answer is False, users can only select one answer for each question.\n        \"\"\"\n        if zoom_level == 1:\n            \"\"\"\n            If zoom_level is 1, the quiz system will display questions in a linear order.\n            \"\"\"\n            return \"Linear order\"\n        elif zoom_level == 2:\n            \"\"\"\n            If zoom_level is 2, the quiz system will display questions in a random order.\n            \"\"\"\n            return \"Random order\"\n        else:\n            \"\"\"\n            If zoom_level is neither 1 nor 2, the quiz system will display questions in a linear order.\n            \"\"\"\n            return \"Linear order\"\n    \"\"\"\n    If allow_multiple_answer is neither True nor False, the quiz system will display questions in a linear order.\n    \"\"\"\n    return \"Linear order\"\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    modified_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            modified_sentence += char\n    return modified_sentence\n"}
{"task_id": "valid/146", "completion": "\n    merged = a.copy()\n    for key, value in b.items():\n        if key in merged:\n            if isinstance(merged[key], dict) and isinstance(value, dict):\n                merged[key] = merge_objects(merged[key], value)\n            else:\n                merged[key] = value\n        else:\n            merged[key] = value\n    return dict(sorted(merged.items()))\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except ValueError:\n        return \"Error: Dictionary is empty or contains non-numeric values.\"\n    except TypeError:\n        return \"Error: Input is not a dictionary.\"\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 1 or x == 2 or x == 3 or x == 5 or x == 7 or x == 11 or x == 13 or x == 17 or x == 19 or x == 23 or x == 29 or x == 31 or x == 37 or x == 41 or x == 43 or x == 47 or x == 53 or x == 59 or x == 61 or x == 67 or x == 71 or x == 73 or x == 79 or x == 83 or x == 89 or x == 97 or x == 101 or x == 103 or x == 107 or x == 109 or x == 113 or x == 127 or x == 131 or x == 137 or x == 139 or x == 149 or x == 151 or x == 157 or x == 163 or x == 167 or x == 173 or x == 179 or x == 181 or x == 191 or x == 193 or x == 197 or x == 199 or x == 211 or x == 223 or x == 227 or x == 229 or x == 233 or x == 239 or x == 241 or x == 251 or x == 257 or x == 263 or x == 269 or x == 271 or x == 277 or x == 281 or x == 283 or x == 293 or x == 307 or x == 311 or x == 313 or x == 317 or x == 331 or x == 337 or x == 347 or x == 349 or x == 353 or x == 359 or x == 367 or x == 373 or x == 379 or x == 383 or x == 389 or x == 397 or x == 401 or x == 409 or x == 419 or x == 421 or x == 431 or x == 433 or x == 439 or x == 443 or x == 449 or x == 457 or x == 461 or x == 463 or x == 467 or x == 479 or x == 487 or x == 491 or x == 499 or x == 503 or x == 509 or x == 521 or x == 523 or x == 541 or x == 547 or"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
