{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = {\n        'politics': ['politics', 'government', 'election', 'policy', 'law', 'congress', 'president', 'senate', 'house', 'governor', 'campaign', 'vote', 'ballot', 'apportionment', 'legislature', 'lobbying', 'bipartisan', 'partisan', 'coalition', 'interest group', 'public policy', 'regulation', 'lobbyist', 'public servant', 'government official', 'government agency', 'public administration', 'public service', 'public sector', 'public interest', 'public good', 'public health', 'public safety', 'public education', 'public welfare', 'public service', 'public utility', 'public transportation', 'public works', 'public infrastructure', 'public utilities', 'public utilities commission', 'public utilities commission of california', 'public utilities commission of california (pucc)', 'public utilities commission of california (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc)', 'public utilities commission of california (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc) (pucc"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, key=lambda x: x.lower(), reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"Input is not a valid JSON string\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if n < 0:\n        return False\n    else:\n        return n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    return pow(base, n, 26)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n    pprint.pprint(json_data)\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{{{key}}}}}\", str(value))\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Check if the text length is within the limit\n    if len(text) > 10000:\n        return \"Text length exceeds the limit of 10,000 characters.\"\n\n    # Remove leading and trailing whitespace\n    text = text.strip()\n\n    # Split the text into words\n    words = text.split()\n\n    # Join the words back together with a single space\n    result = ' '.join(words)\n\n    return result\n"}
{"task_id": "valid/13", "completion": "\n    # Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers\n    text = ''.join(i for i in text if not i.isdigit())\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b{}\\b.*\\b{}\\b'.format(re.escape(word1), re.escape(word2))\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return np.sum(array, axis=1)\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    for line in comment.splitlines():\n        if line.startswith(\"tabstop\"):\n            settings[\"tabstop\"] = int(line.split(\"=\")[1])\n        elif line.startswith(\"expandtab\"):\n            settings[\"expandtab\"] = line.split(\"=\")[1].strip() == \"true\"\n        elif line.startswith(\"shiftwidth\"):\n            settings[\"shiftwidth\"] = int(line.split(\"=\")[1])\n        elif line.startswith(\"softtabstop\"):\n            settings[\"softtabstop\"] = int(line.split(\"=\")[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    # Tokenize the sentence into words\n    words = sentence.split()\n\n    # Return the list of words\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    list3 = list1 + list2\n    list3.sort()\n    return list3\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z**2\n"}
{"task_id": "valid/22", "completion": "\n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            result = get_nested_dictionary_value(value)\n            if result is not None:\n                return result\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    result = get_nested_dictionary_value(item)\n                    if result is not None:\n                        return result\n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = str(num)\n    if num == num[::-1]:\n        return int(num)\n    else:\n        left = int(num[:-1])\n        right = int(num[1:])\n        left_palindrome = str(left)[::-1]\n        right_palindrome = str(right)[::-1]\n        left_palindrome = int(left_palindrome) if left_palindrome.isdigit() else float('-inf')\n        right_palindrome = int(right_palindrome) if right_palindrome.isdigit() else float('inf')\n        if abs(int(num) - left_palindrome) <= abs(int(num) - right_palindrome):\n            return left_palindrome\n        else:\n            return right_palindrome\n"}
{"task_id": "valid/25", "completion": "\n    return f\"import math\\nprint(math.sqrt({num}))\"\n\n"}
{"task_id": "valid/26", "completion": "\n    if len(matrix) == 0:\n        return 0, 0, 0, False\n    if len(matrix) != len(matrix[0]):\n        return len(matrix), len(matrix[0]), 0, False\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = sum(matrix[i][i] for i in range(rows))\n    return rows, cols, diagonal_sum, True\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode('utf-8')).decode('utf-8')\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s.lower() if c.isalpha())\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        try:\n            json_data = json.loads(json_data)\n        except json.JSONDecodeError:\n            return False\n    if isinstance(json_data, dict):\n        if key in json_data and json_data[key] == value:\n            return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i+num_columns]\n        table.append(row)\n    return table\n\n"}
{"task_id": "valid/32", "completion": "\n    if not s:\n        return True\n    prev_char = s[0]\n    for char in s[1:]:\n        if char < prev_char:\n            return False\n        prev_char = char\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(num) for num in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return \"Array is empty\"\n\n    # Check if all elements in the array are numerical\n    if not all(isinstance(x, (int, float)) for x in arr):\n        return \"Array contains non-numerical values\"\n\n    # Compute the sum of all elements in the array\n    total = sum(arr)\n\n    return total\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json_data[\"neighborhoods\"]\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x[\"name\"])\n    return [neighborhood[\"name\"] for neighborhood in sorted_neighborhoods]\n\n"}
{"task_id": "valid/38", "completion": "\n    arr.sort()\n    min_sum = float('inf')\n    for i in range(n-1):\n        sum = abs(arr[i] + arr[i+1])\n        min_sum = min(min_sum, sum)\n    return min_sum"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "valid/40", "completion": "\n    # Create a dictionary to store the vote counts for each candidate\n    vote_counts = {}\n\n    # Count the votes for each candidate\n    for vote in votes:\n        candidate_name, number_of_votes = vote\n        if candidate_name in vote_counts:\n            vote_counts[candidate_name] += number_of_votes\n        else:\n            vote_counts[candidate_name] = number_of_votes\n\n    # Calculate the total number of votes\n    total_votes = sum(vote_counts.values())\n\n    # Calculate the percentage of votes for each candidate\n    percentages = {}\n    for candidate_name, vote_count in vote_counts.items():\n        percentage = (vote_count / total_votes) * 100\n        percentages[candidate_name] = round(percentage, 2)\n\n    # Create the output dictionary\n    output = {}\n    for candidate_name, percentage in percentages.items():\n        output[candidate_name] = percentage\n\n    return output\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, \"%d-%m-%Y\")\n        return date_object.strftime(\"%B %d, %Y\")\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use DD-MM-YYYY format.\")\n\n"}
{"task_id": "valid/42", "completion": "\n    # check if new name has valid file extension\n    if not newname.endswith(allowed_type):\n        return False\n    # check if new name is not the same as old name\n    if oldname == newname:\n        return False\n    # check if new name is not already in use\n    if newname in os.listdir():\n        return False\n    # if all checks pass, return True\n    return True\n"}
{"task_id": "valid/43", "completion": "\n    if isinstance(lst, tuple):\n        return tuple(remove_uneven(x) for x in lst if remove_uneven(x))\n    elif isinstance(lst, list):\n        return [remove_uneven(x) for x in lst if remove_uneven(x)]\n    elif isinstance(lst, int) or isinstance(lst, float):\n        return lst if lst % 2 == 0 else None\n    elif isinstance(lst, str):\n        try:\n            return int(lst) if int(lst) % 2 == 0 else None\n        except ValueError:\n            return None\n    else:\n        return None\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data[generation] = accs\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    if re.match(r'^[a-zA-Z0-9]{5}$', string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if classifier.startswith(\"Programming Language :: \"):\n            language = classifier.split(\" :: \")[2]\n            unique_languages.add(language)\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create empty dictionary to store count instances each number\n    count_dict = {}\n\n    # Iterate through each element in the array\n    for element in arr:\n        # If the element is not in the dictionary, add it with a count of 1\n        if element not in count_dict:\n            count_dict[element] = 1\n        # If the element is already in the dictionary, increment its count by 1\n        else:\n            count_dict[element] += 1\n\n    # Create an empty list to store the count instances\n    count_list = []\n\n    # Iterate through each key-value pair in the dictionary\n    for key, value in count_dict.items():\n        # Append the count instances to the list\n        count_list.append(value)\n\n    # Return the list of count instances\n    return count_list\n\n"}
{"task_id": "valid/50", "completion": "\n    # define URL patterns\n    urlpatterns = [\n        re.compile(r'^$'),  # home page\n        re.compile(r'^competitions/$'),  # list of competitions\n        re.compile(r'^competitions/(?P<competition_id>\\d+)/$'),  # competition details\n        re.compile(r'^competitions/(?P<competition_id>\\d+)/entries/$'),  # list of entries for a competition\n        re.compile(r'^competitions/(?P<competition_id>\\d+)/entries/(?P<entry_id>\\d+)/$'),  # entry details\n    ]\n\n    # iterate over URL patterns\n    for pattern in urlpatterns:\n        # check if URL matches pattern\n        if pattern.match(url):\n            # return view function associated with pattern\n            if pattern == re.compile(r'^$'):\n                return 'home'\n            elif pattern == re.compile(r'^competitions/$'):\n                return 'competitions_list'\n            elif pattern == re.compile(r'^competitions/(?P<competition_id>\\d+)/$'):\n                return 'competition_details'\n            elif pattern == re.compile(r'^competitions/(?P<competition_id>\\d+)/entries/$'):\n                return 'entries_list'\n            elif pattern == re.compile(r'^competitions/(?P<competition_id>\\d+)/entries/(?P<entry_id>\\d+)/$'):\n                return 'entry_details'\n\n    # if no pattern matches URL, return None\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    sentence = \"I love to code\"\n    string = \"Python is awesome\"\n    return sentence + \" \" + string\n\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for dict_ in list_of_dicts:\n        for key in dict_.keys():\n            if key.startswith(\"price_\"):\n                price_sum += dict_[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view_view_get\n    elif request_method == \"POST\":\n        return api_advisor_view_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"a and b must be positive integers\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {\n        'dev': [],\n        'prod': [],\n        'staging': [],\n        'other': []\n    }\n\n    for file_path in file_paths:\n        if 'dev' in file_path:\n            categorized_files['dev'].append(file_path)\n        elif 'prod' in file_path:\n            categorized_files['prod'].append(file_path)\n        elif 'staging' in file_path:\n            categorized_files['staging'].append(file_path)\n        else:\n            categorized_files['other'].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    return sorted([a, b, c, d, e])[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"GREEN\"\n    elif color == \"GREEN\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if is_perfect_square(i):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for symbol in word:\n            if symbol.isalpha():\n                if symbol.lower() == target.lower():\n                    return symbol\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict:\n        print(key)"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    phrase = f\"My name is {name} and I am {age} years old.\"\n    return phrase\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        capitalized_string = string.capitalize()\n        cleaned_string = re.sub(r'\\W+', '', capitalized_string)\n        result.append(cleaned_string)\n    return result\n\n"}
{"task_id": "valid/71", "completion": "\n    for i in range(len(string)):\n        if string[i] == char:\n            return i\n    return -1\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = '<b>'\n    end_tag = '</b>'\n    start_index = 0\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_tags.append((start_index, end_index + len(end_tag)))\n        start_index = end_index + len(end_tag)\n    return bold_tags\n"}
{"task_id": "valid/73", "completion": "\n    # Define the list of items and their prices\n    items = {\n        \"Coke\": 1.00,\n        \"Pepsi\": 1.50,\n        \"Sprite\": 1.25,\n        \"Water\": 0.75\n    }\n\n    # Check if the item is in the list of items\n    if item not in items:\n        return \"Invalid item\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient money\"\n\n    # Calculate the change\n    change = money_inserted - items[item]\n\n    # Update the stock of the item\n    items[item] -= 1\n\n    # Return the change and the item purchased\n    return f\"Here is your {item}. Your change is ${change:.2f}\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for element in list:\n        if element == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode('utf-8'))\n\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assigning value to variable\n    value = 10\n\n    # Validating value\n    if value == 10:\n        print(\"Value is valid\")\n    else:\n        print(\"Value is not valid\")\n\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, str):\n        return 'string'\n    elif isinstance(element, int):\n        return 'integer'\n    elif isinstance(element, float):\n        return 'float'\n    elif isinstance(element, bool):\n        return 'boolean'\n    elif isinstance(element, list):\n        return 'list'\n    elif isinstance(element, dict):\n        return 'dictionary'\n    elif isinstance(element, tuple):\n        return 'tuple'\n    elif isinstance(element, set):\n        return 'set'\n    elif isinstance(element, frozenset):\n        return 'frozenset'\n    elif isinstance(element, type(None)):\n        return 'NoneType'\n    else:\n        return 'unknown'\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n    merged = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            merged.append(arr[i])\n    return merged\n"}
{"task_id": "valid/82", "completion": "\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n    text = re.sub(r'\\s+', ' ', text)\n    text = text.lower()\n    return text.split()\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_by_3_and_7 = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_by_3_and_7) / len(divisible_by_3_and_7)\n    max_value = max(divisible_by_3_and_7)\n    min_value = min(divisible_by_3_and_7)\n    occurrences = {num: divisible_by_3_and_7.count(num) for num in set(divisible_by_3_and_7)}\n    return average, max_value, min_value, occurrences\n\nnumbers = [21, 42, 63, 84, 105, 126, 147, 168, 189, 210]\naverage, max_value, min_value, occurrences = find_divisible_numbers(numbers)"}
{"task_id": "valid/84", "completion": "\n    # Split sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq = 0\n    highest_freq_word = \"\"\n    for word, freq in word_freq.items():\n        if freq > highest_freq:\n            highest_freq = freq\n            highest_freq_word = word\n\n    return highest_freq_word\n\n"}
{"task_id": "valid/85", "completion": "\n    e = 1\n    factorial = 1\n    for i in range(1, decimal_places + 1):\n        factorial *= i\n        e += 1 / factorial\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum = 0\n    for number in numbers:\n        sum += number\n    average = sum / len(numbers)\n    return average, sum\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"Time series contains non-numerical values\")\n    return min(time_series), max(time_series)\n"}
{"task_id": "valid/88", "completion": "\n    relatedArticles = {}\n    for entry in encyclopedia:\n        relatedArticles[entry] = len(encyclopedia[entry]['related_articles'])\n    return relatedArticles\n"}
{"task_id": "valid/89", "completion": "\n    max_value = max(lst)\n    max_index = lst.index(max_value)\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    for element in list1:\n        if element in list2:\n            return True\n    return False"}
{"task_id": "valid/91", "completion": "\n    root = Element(dictionary.keys()[0])\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            child = Element(key)\n            root.append(child)\n            dict_to_xml(value, child)\n        else:\n            child = Element(key)\n            child.text = str(value)\n            root.append(child)\n    return tostring(root)\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_odd += num\n            count_odd += 1\n    average_odd = sum_odd / count_odd\n    return sum_odd, average_odd\nlst = [i for i in range(1000)]"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a - set_b\n\n"}
{"task_id": "valid/97", "completion": "\n\n    {mapping['bot_name']} is a Discord bot designed to manage music in your server. It provides a web app for managing personal playlists, server settings, and bot information. The bot categorizes commands and provides help information for each command.\n\n    Features:\n    - Play music from YouTube, Spotify, SoundCloud, and other platforms.\n    - Manage personal playlists and share them with friends.\n    - Control the volume, pause, resume, and stop music playback.\n    - Set the bot as the default music player for your server.\n    - Categorize commands and provide help information for each command.\n\n    To get started, use the following commands:\n    - `{mapping['bot_prefix']}help` - Get help information for all commands.\n    - `{mapping['bot_prefix']}play <song>` - Play a song from YouTube, Spotify, SoundCloud, or other platforms.\n    - `{mapping['bot_prefix']}playlist` - Manage your personal playlists.\n    - `{mapping['bot_prefix']}settings` - Set server settings for the bot.\n\n    For more information, visit the {mapping['web_app_name']} website at {mapping['web_app_url']}.\n    \"\"\"\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        ternary = ''\n        while n > 0:\n            ternary = str(n % 3) + ternary\n            n = n // 3\n        return ternary"}
{"task_id": "valid/99", "completion": "\n    return tuple(os.path.splitext(file_name)[1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 20:\n        return \"Teenager\"\n    elif age < 40:\n        return \"Young Adult\"\n    elif age < 65:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = \"A\"\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = \"B\"\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = \"C\"\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = \"D\"\n        gpa = 1.0\n    else:\n        letter_grade = \"F\"\n        gpa = 0.0\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {palindrome: sum(1 for char in palindrome if char in vowels) for palindrome in palindrome_tuples}\n    return palindrome_dict\n"}
{"task_id": "valid/104", "completion": "\n    # check if string is empty\n    if not s:\n        return s\n\n    # check if string contains only one character\n    if len(s) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if string contains only one type of character\n    if len(set(s)) == 1:\n        return s\n\n    # check if"}
{"task_id": "valid/105", "completion": "\n    # Create a set to store the elements we've seen so far\n    seen = set()\n\n    # Iterate through the array\n    for num in arr:\n        # Check if the negation of the current number is in the set\n        if -num in seen:\n            # If it is, we've found a pair that sums to 0\n            return True\n        # Add the current number to the set\n        seen.add(num)\n\n    # If we've gone through the entire array without finding a pair that sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number = version_number.split('_')[1]  # Extract the date-time part of the version number\n        if package_name not in latest_versions or version_number > latest_versions[package_name]:\n            latest_versions[package_name] = version_number\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    # Create a dictionary to store the causes of death\n    causes_of_death = {}\n\n    # Iterate over the causes\n    for cause in causes:\n        # Split the cause into action and result\n        action, result = cause.split()\n\n        # Check if the action is already in the dictionary\n        if action in causes_of_death:\n            # If it is, append the result to the list of results for that action\n            causes_of_death[action].append(result)\n        else:\n            # If it is not, create a new list with the result\n            causes_of_death[action] = [result]\n\n    # Print the causes of death\n    for action, results in causes_of_death.items():\n        print(f\"{action}: {', '.join(results)}\")\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuation_marks = string.punctuation\n    for mark in punctuation_marks:\n        string = string.replace(mark, \"\")\n    return string\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"Error: {num} is not a number\")\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = []\n    for row in grid:\n        min_values.append(min(row))\n    print(min_values)\n"}
{"task_id": "valid/113", "completion": "\n    if n < 0:\n        print(\"Please enter a positive integer\")\n        return\n    if n == 0:\n        return\n    if current_num % 2 == 0:\n        print(f\"Thank you for the even number {current_num}\")\n        print_thank_you(n - 1, current_num + 1)\n    else:\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n    digit = num % base\n    num //= base\n    while num > 0:\n        if num % base != digit:\n            return False\n        num //= base\n    return True\n\n"}
{"task_id": "valid/116", "completion": "\n    if len(s) == 0:\n        return s\n    else:\n        if s[0] in 'aeiouAEIOU':\n            return remove_vowels_recursive(s[1:])\n        else:\n            return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python3 main.py [options]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  -{option[0]} {option[1]}\\n\"\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = 'aeiou'\n    return all(char in vowels for char in s.lower())\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subsequence_length = len(subsequence)\n    for i in range(len(sequence) - subsequence_length + 1):\n        if sequence[i:i+subsequence_length] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    if h < 0:\n        h = -h\n        t = -t\n    q = 0\n    while h >= t:\n        h -= t\n        q += 1\n    return q\n\n"}
{"task_id": "valid/124", "completion": "\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for c in string if c in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on energy values\n    num_electrons = 0\n    for i in range(dos_grid_size):\n        for j in range(dos_grid_size):\n            energy = grid_energies[i][j]\n            if energy < 0:\n                num_electrons += 1\n\n    # adjust electrons based on doping levels\n    num_electrons *= (1 + dope)\n\n    # calculate ados based on number of electrons\n    ados = num_electrons / (dos_grid_size ** 2)\n\n    return ados, num_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    return arr[::-1]\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\ncolor_list = [(\"red\", \"#FF0000\"), (\"green\", \"#00FF00\"), (\"blue\", \"#0000FF\")]\ncolor_dict = create_color_dictionary(color_list)"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\nlst = [1, 2, 2, 3, 4, 4, 5]"}
{"task_id": "valid/132", "completion": "\n    # Sort the fruit list in lexicographical order\n    sorted_fruit_list = sorted(fruit_list)\n\n    # Join the sorted list into a single string\n    result = ', '.join(sorted_fruit_list)\n\n    return result\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "valid/135", "completion": "\n\nfrom django.db import migrations, models\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = round(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    n = list(n_str)\n    carry = 0\n    for i in range(len(n) - 1, -1, -1):\n        temp = int(n[i]) * 2 + carry\n        n[i] = str(temp % 10)\n        carry = temp // 10\n    if carry > 0:\n        n.insert(0, str(carry))\n    return ''.join(n)\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'main': (0.0, 0.0, 0.0),\n        'home': (0.0, 0.0, 0.0),\n        'pick': (0.0, 0.0, 0.0),\n        'place': (0.0, 0.0, 0.0),\n        'reset': (0.0, 0.0, 0.0),\n    }\n    return presets[preset_name]\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    if common_elements:\n        return reduce(lambda x, y: x * y, common_elements)\n    else:\n        return 0\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Multiple answers are allowed.\")\n    else:\n        print(\"Only one answer is allowed.\")\n    if zoom_level == \"high\":\n        print(\"Zoom level is high.\")\n    elif zoom_level == \"medium\":\n        print(\"Zoom level is medium.\")\n    elif zoom_level == \"low\":\n        print(\"Zoom level is low.\")\n    else:\n        print(\"Invalid zoom level.\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    sentence = sentence.replace(' ', '')\n    sentence = sentence.replace(',', '')\n    sentence = sentence.replace('.', '')\n    sentence = sentence.replace('!', '')\n    sentence = sentence.replace('?', '')\n    sentence = sentence.replace(';', '')\n    sentence = sentence.replace(':', '')\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    sentence = sentence.replace('[', '')\n    sentence = sentence.replace(']', '')\n    sentence = sentence.replace('{', '')\n    sentence = sentence.replace('}', '')\n    sentence = sentence.replace('<', '')\n    sentence = sentence.replace('>', '')\n    sentence = sentence.replace('/', '')\n    sentence = sentence.replace('\\\\', '')\n    sentence = sentence.replace('|', '')\n    sentence = sentence.replace('-', '')\n    sentence = sentence.replace('_', '')\n    sentence = sentence.replace('+', '')\n    sentence = sentence.replace('=', '')\n    sentence = sentence.replace('*', '')\n    sentence = sentence.replace('&', '')\n    sentence = sentence.replace('^', '')\n    sentence = sentence.replace('%', '')\n    sentence = sentence.replace('$', '')\n    sentence = sentence.replace('#', '')\n    sentence = sentence.replace('@', '')\n    sentence = sentence.replace('!', '')\n    sentence = sentence.replace('~', '')\n    sentence = sentence.replace('`', '')\n    sentence = sentence.replace('\"', '')\n    sentence = sentence.replace(\"'\", '')\n    sentence = sentence.replace('\\'', '')\n    sentence = sentence.replace(' ', '')\n    sentence = sentence.replace(',', '')\n    sentence = sentence.replace('.', '')\n    sentence = sentence.replace('!', '')\n    sentence = sentence.replace('?', '')\n    sentence = sentence.replace(';', '')\n    sentence = sentence.replace(':', '')\n    sentence = sentence.replace('(', '')\n    sentence = sentence.replace(')', '')\n    sentence = sentence.replace('[', '')\n    sentence = sentence.replace(']', '')\n    sentence = sentence.replace('{', '')\n    sentence = sentence.replace('}', '')\n    sentence = sentence.replace('<', '')\n    sentence = sentence.replace('>', '')\n    sentence = sentence.replace('/', '')\n    sentence = sentence.replace('\\\\', '')\n    sentence = sentence.replace('|', '')\n    sentence = sentence.replace('-', '')\n    sentence = sentence.replace('_', '')\n    sentence = sentence.replace('+', '')\n    sentence = sentence.replace('=', '')\n    sentence = sentence.replace('*', '')\n    sentence = sentence.replace('&', '')\n    sentence = sentence.replace('^', '')\n    sentence = sentence.replace('%', '')\n    sentence = sentence.replace('$', '')\n    sentence = sentence.replace('#', '')\n    sentence = sentence.replace('@', '')\n    sentence ="}
{"task_id": "valid/146", "completion": "\n    def merge(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge(a[key], b[key])\n                else:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    def sort_dict(d):\n        return {k: d[k] for k in sorted(d)}\n\n    def is_alphabetic_keys(d):\n        return all(k.isalpha() for k in d)\n\n    merged = merge(a, b)\n    if is_alphabetic_keys(merged):\n        return sort_dict(merged)\n    else:\n        raise ValueError(\"Keys must be alphabetic characters (A-Z)\")\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == '':\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x == 0 or x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x == 81 or x == 82 or x == 83 or x == 84 or x == 85 or x == 86 or x == 87 or x == 88 or x == 89 or x == 90 or x == 91 or x == 92 or x == 93 or x == 94 or x == 95 or x == 96 or x == 97 or x == 98 or x == 99 or x == 100 or x == 101 or"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
