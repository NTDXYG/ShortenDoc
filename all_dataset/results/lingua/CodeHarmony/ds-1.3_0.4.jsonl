{"task_id": "valid/0", "completion": "\n    if text.isupper():\n        return 'UPPERCASE'\n    elif text.islower():\n        return 'LOWERCASE'\n    elif text.istitle():\n        return 'TITLECASE'\n    elif text.isdigit():\n        return 'DIGIT'\n    elif text.isalpha():\n        return 'ALPHA'\n    elif text.isspace():\n        return 'SPACE'\n    else:\n        return 'SPECIAL'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        print(\"Invalid JSON string\")\n        return None\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n\n    sum_digits = sum(int(digit) for digit in str(n))\n    return n % 5 == 0 and sum_digits % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if n == 1:\n        return 0\n    else:\n        return 1 + discrete_logarithm(n // base, base)\n\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Invalid JSON string: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    return len(string) == len(set(string))\n\n"}
{"task_id": "valid/11", "completion": "\n    date_format = \"%Y-%m-%d\"\n    date_obj = datetime.strptime(date_string, date_format)\n    result_date = date_obj + timedelta(days=days)\n    return result_date.strftime(date_format)\n"}
{"task_id": "valid/12", "completion": "\n    return text.strip()\n"}
{"task_id": "valid/13", "completion": "\n    # Lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove extra spaces\n    text = ' '.join(text.split())\n\n    return text\n"}
{"task_id": "valid/14", "completion": "\n    return word1 in text and word2 in text\n"}
{"task_id": "valid/15", "completion": "\n    return sum(array, [])\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if 'tabstop' in line:\n            settings['tabstop'] = int(line.split('=')[1])\n        elif 'expandtab' in line:\n            settings['expandtab'] = line.split('=')[1].lower() == 'true'\n        elif 'shiftwidth' in line:\n            settings['shiftwidth'] = int(line.split('=')[1])\n        elif 'softtabstop' in line:\n            settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse each list\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get('name', None)\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(i) for i in struct]\n    elif isinstance(struct, tuple):\n        return [struct_to_dict(i) for i in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def next_palindrome(n):\n        n += 1\n        while not is_palindrome(n):\n            n += 1\n        return n\n\n    def prev_palindrome(n):\n        n -= 1\n        while not is_palindrome(n):\n            n -= 1\n        return n\n\n    if is_palindrome(num):\n        return num\n    else:\n        return next_palindrome(num) if num % 10 != 9 else prev_palindrome(num)\n"}
{"task_id": "valid/25", "completion": "\n    import math\n    return math.sqrt(num)\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    sum_of_diagonal_elements = sum(matrix[i][i] for i in range(min(rows, cols)))\n\n    is_square = rows == cols\n\n    return rows, cols, sum_of_diagonal_elements, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n"}
{"task_id": "valid/30", "completion": "\n    try:\n        if isinstance(json_data, str):\n            json_data = json.loads(json_data)\n        return key in json_data and json_data[key] == value\n    except (TypeError, KeyError):\n        return False\n"}
{"task_id": "valid/31", "completion": "\n    import tkinter as tk\n\n    root = tk.Tk()\n\n    table = tk.Frame(root)\n\n    num_rows = len(buttons)\n    num_pages = num_rows // num_columns\n\n    for i in range(num_rows):\n        row = []\n        for j in range(num_columns):\n            button = tk.Button(table, text=buttons[i])\n            button.grid(row=i, column=j, padx=5, pady=5)\n            row.append(button)\n\n        tk.Grid.rowconfigure(table, i, weight=1)\n        tk.Grid.columnconfigure(table, j, weight=1)\n\n    root.mainloop()\n\n\n_make_button_table(['Button 1', 'Button 2', 'Button 3', 'Button 4', 'Button 5', 'Button 6', 'Button 7', 'Button 8', 'Button 9', 'Button 10'], 3)\n"}
{"task_id": "valid/32", "completion": "\n    alphabet_order = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(s) - 1):\n        if s[i] != alphabet_order[i]:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [s for s in re.findall(r'\\d+', ts) if s]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    return [word.upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not isinstance(arr, list):\n        return \"Error: Input is not a list\"\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            return \"Error: List contains non-numerical value\"\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    # load the json data\n    data = json.loads(json_data)\n\n    # create a list to hold the neighborhood names\n    neighborhoods = []\n\n    # iterate over the data\n    for item in data:\n        # add the neighborhood name to the list\n        neighborhoods.append(item['name'])\n\n    # sort the list alphabetically\n    neighborhoods.sort()\n\n    return neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    min_sum = float('inf')\n    min_pair = (0, 0)\n    arr.sort()\n    l = 0\n    r = n - 1\n    while l < r:\n        sum_ = arr[l] + arr[r]\n        if abs(sum_) < abs(min_sum):\n            min_sum = sum_\n            min_pair = (l, r)\n        if sum_ < 0:\n            l += 1\n        else:\n            r -= 1\n    return min_pair\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if votes are valid\n    if not all(isinstance(vote, tuple) and len(vote) == 2 and isinstance(vote[0], str) and isinstance(vote[1], int) and vote[1] >= 0 and vote[1] <= 1000 for vote in votes):\n        raise ValueError(\"Invalid vote format. Each vote should be a tuple of two elements: a string (candidate name) and a positive integer (number of votes).\")\n\n    # Calculate total votes\n    total_votes = sum(vote[1] for vote in votes)\n\n    # Calculate results\n    results = {}\n    for vote in votes:\n        name, votes_count = vote\n        percentage = round(votes_count / total_votes * 100, 2)\n        results[name.upper()] = percentage\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        date_object = datetime.strptime(date_string, '%d-%m-%Y')\n        return date_object.strftime('%B %d, %Y')\n    except ValueError:\n        return \"Invalid date format. Please use DD-MM-YYYY\"\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['txt', 'docx', 'pdf', 'xlsx', 'png', 'jpg', 'jpeg', 'gif', 'mp3', 'mp4', 'avi', 'mov', 'zip', 'rar']\n\n    if newname[-4:] in allowed_extensions:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def is_string_numeric(n):\n        return isinstance(n, str) and n.isdigit()\n\n    def remove_uneven(nested_lst):\n        new_lst = []\n        for i in nested_lst:\n            if isinstance(i, tuple):\n                new_lst.append(remove_uneven(i))\n            else:\n                if is_numeric(i) and is_even(i):\n                    new_lst.append(i)\n                elif is_string_numeric(i):\n                    if int(i) % 2 == 0:\n                        new_lst.append(i)\n        return tuple(new_lst)\n\n    return remove_uneven(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data = histogram_data + [(generation, accs)]\n    # return histogram_data\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n\n    for classifier in classifiers:\n        try:\n            language, version = classifier.split(\" :: \")\n            unique_languages.add(language)\n        except ValueError:\n            continue\n\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    result = {}\n    for sub_arr in arr:\n        for num in sub_arr:\n            if num in result:\n                result[num] += 1\n            else:\n                result[num] = 1\n    return result\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^$'),\n        re.compile(r'^home/$'),\n    ]\n\n    for pattern in urlpatterns:\n        if pattern.match(url):\n            return pattern.name\n\n    return 'not found'\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string1 = \"Hello\"\n    string2 = \" World\"\n    sentence = string1 + string2\n    return sentence\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n\ns = \"abcabc\""}
{"task_id": "valid/54", "completion": "\n    total_sum = 0\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            if key.startswith(\"price\"):\n                total_sum += dictionary[key]\n    return total_sum\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in list2:\n        if value in list1:\n            list1.remove(value)\n    return intersection\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]"}
{"task_id": "valid/56", "completion": "\n    def decorator_function(view_function):\n        def wrapper_function(request):\n            if request_method == 'GET':\n                return view_function(request)\n            else:\n                return HttpResponseBadRequest()\n        return wrapper_function\n    return decorator_function\n"}
{"task_id": "valid/57", "completion": "\n    if a < 1 or b < 1:\n        raise ValueError(\"Both numbers must be positive integers\")\n\n    if a == b:\n        return a\n    elif a > b:\n        return gcd_recursive(a-b, b)\n    else:\n        return gcd_recursive(a, b-a)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {}\n    for file_path in file_paths:\n        directory = file_path.split('/')[0]\n        if directory in config_files:\n            config_files[directory].append(file_path)\n        else:\n            config_files[directory] = [file_path]\n    return config_files\n\n\nfile_paths = ['/home/user/config1.txt', '/home/user/config2.txt', '/home/user/config3.txt', '/home/user/config4.txt', '/home/user/config5.txt', '/home/user/config6.txt']"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    if len(my_list) == len(set(my_list)):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/61", "completion": "\n    # calculate time difference\n    timeDifference = timeEnd - timeStart\n\n    return timeDifference\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n    mid = (start + end) // 2\n    if array[mid] == target:\n        return True\n    elif array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n    else:\n        return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\"]\n    current_index = colors.index(color)\n    if current_index == 3:\n        return colors[0]\n    else:\n        return colors[current_index + 1]\n\n"}
{"task_id": "valid/64", "completion": "\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i < 0:\n            continue\n        root = i ** 0.5\n        if int(root + 0.5) ** 2 == i:\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        for char in word:\n            if char == target:\n                return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string1 = \"Hello\"\n    string2 = \"World\"\n    phrase = f\"{string1} {string2}\"\n    return phrase\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for string in strings:\n        # remove special characters\n        string = re.sub(r'[^A-Za-z0-9\\s]', '', string)\n        # capitalize first letter\n        string = string.title()\n        result.append(string)\n    return result\n\nstrings = [\"hello, world\", \"python@123\", \"java$%^&\", \"python_for_everyone\"]"}
{"task_id": "valid/71", "completion": "\n    if char in string:\n        return [i for i, letter in enumerate(string) if letter == char]\n    else:\n        return \"Character not found in the string\"\n"}
{"task_id": "valid/72", "completion": "\n    import re\n\n    # Regular expression to match bold text\n    pattern = r'<b>(.*?)</b>'\n\n    # Find all matches\n    matches = re.findall(pattern, html_code)\n\n    return matches\n"}
{"task_id": "valid/73", "completion": "\n\n        function to select item and calculate change\n        \"\"\"\n        if item in vending_machine_items:\n            if vending_machine_items[item] <= money_inserted:\n                change = money_inserted - vending_machine_items[item]\n                return change\n            else:\n                return \"Insufficient money\"\n        else:\n            return \"Item not available\"\n\n    def update_stock(item, quantity):\n        \"\"\"\n        function to update stock\n        \"\"\"\n        if item in vending_machine_items:\n            vending_machine_items[item] = quantity\n        else:\n            print(\"Item not available\")\n\n    return select_item, update_stock\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode())\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n"}
{"task_id": "valid/78", "completion": "\n    # Assign value to variable\n    variable = \"Hello, World!\"\n\n    # Validate the value\n    if variable == \"Hello, World!\":\n        print(\"The value is valid.\")\n    else:\n        print(\"The value is not valid.\")\n\nassign_and_validate()\n"}
{"task_id": "valid/79", "completion": "\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, bool):\n        return \"Boolean\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    result = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            result.append(arr[i])\n    return result\n"}
{"task_id": "valid/82", "completion": "\n    # \u5b9a\u4e49\u4e00\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u6a21\u5f0f\n    pattern = r'\\b\\w+\\b'\n\n    # \u4f7f\u7528re.findall()\u51fd\u6570\u5728\u6587\u672c\u4e2d\u67e5\u627e\u6240\u6709\u5339\u914d\u9879\n    return re.findall(pattern, text)\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [n for n in numbers if n % 3 == 0 and n % 7 == 0]\n    max_val = max(divisible_numbers)\n    min_val = min(divisible_numbers)\n    avg_val = sum(divisible_numbers) / len(divisible_numbers)\n    count_dict = {str(n): divisible_numbers.count(n) for n in divisible_numbers}\n    return max_val, min_val, avg_val, count_dict\n\n\nnumbers = [10, 21, 35, 70, 88, 140, 180, 210, 270, 300, 350, 400, 450, 500]\nmax_val, min_val, avg_val, count_dict = find_divisible_numbers(numbers)\n"}
{"task_id": "valid/84", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Create a dictionary to store word frequencies\n    word_freq = {}\n\n    # Count the frequency of each word\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n\n    # Find the word with the highest frequency\n    highest_freq_word = max(word_freq, key=word_freq.get)\n\n    return highest_freq_word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = 2.0\n    for i in range(1, 10000):\n        euler_number += 1.0 / math.factorial(i)\n    return round(euler_number, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average = sum_numbers / len(numbers)\n    return average, sum_numbers\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series cannot be empty\")\n\n    try:\n        min_value = min(time_series)\n        max_value = max(time_series)\n    except TypeError:\n        raise ValueError(\"Time series should only contain numerical values\")\n\n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    count = 0\n    for article in encyclopedia:\n        count += 1\n    return count\n\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return len(set(list1) & set(list2)) > 0\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(t, d):\n        for k, v in d.items():\n            e = Element(k)\n            e.text = str(v)\n            t.append(e)\n            if isinstance(v, dict):\n                _dict_to_xml(e, v)\n        return t\n\n    root = Element('root')\n    _dict_to_xml(root, dictionary)\n    return tostring(root, encoding='utf-8', method='xml')\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    rows, cols = len(matrix), len(matrix[0])\n    low, high = 0, rows * cols\n\n    while low < high:\n        mid = (low + high) // 2\n        num = matrix[mid // cols][mid % cols]\n\n        if num == target:\n            return True\n        elif num < target:\n            low = mid + 1\n        else:\n            high = mid\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    if count_odd == 0:\n        return \"List does not contain any odd numbers\"\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[n - 1]\n\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = f\"A Discord bot that manages play music in a server. It provides information features web app for managing personal playlists, server settings, and categorizes commands. The bot provides help information for each command.\"\n    return description\n\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return dec_to_ternary(abs(n)) + '-'\n    if n == 0:\n        return '0'\n    ternary = ''\n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    return ternary\n\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file_name in file_names:\n        name, extension = os.path.splitext(file_name)\n        extensions.append(extension[1:])\n    return tuple(extensions)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age < 18:\n        return \"Minor\"\n    elif 18 <= age < 30:\n        return \"Young Adult\"\n    elif 30 <= age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        return \"A\", 4.0\n    elif numerical_grade >= 80:\n        return \"B\", 3.0\n    elif numerical_grade >= 70:\n        return \"C\", 2.0\n    elif numerical_grade >= 60:\n        return \"D\", 1.0\n    else:\n        return \"F\", 0.0\n\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    palindrome_dict = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char.lower() in vowels:\n                count += 1\n        palindrome_dict[palindrome] = count\n    return palindrome_dict\n\n"}
{"task_id": "valid/104", "completion": "\n    if s.isalpha():\n        return s.lower()\n    elif s.isdigit():\n        return str(int(s) + 1)\n    elif s.islower():\n        return s.upper()\n    elif s.isupper():\n        return s.lower()\n    else:\n        return \"Invalid string\"\n\n"}
{"task_id": "valid/105", "completion": "\n    if len(arr) <= 1:\n        return False\n\n    seen = set()\n\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package_name, version_number = dependency\n        version_number_parts = version_number.split('_')\n        version_number_parts.pop(0)\n        version_number_parts.pop(0)\n        version_number_parts.append(version_number.split('_')[1])\n        latest_versions[package_name] = '_'.join(version_number_parts)\n    return latest_versions\n\n\ndependencies = [('package1', '0001_auto_20220101_0000'),\n                ('package2', '0002_auto_20220102_0000'),\n                ('package1', '0003_auto_20220103_0000')]\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {\n        \"murder\": [\"murder\", \"murderous death\"],\n        \"suicide\": [\"suicide\", \"suicidal ideation\"],\n        \"drowning\": [\"drowning\", \"drowning on the ground\"],\n        \"accident\": [\"accident\", \"accidentally killed\"],\n        \"firearm\": [\"firearm\", \"firearm use\"],\n        \"car-crash\": [\"car-crash\", \"car crash\"],\n        \"earthquake\": [\"earthquake\", \"earthquake\"],\n        \"traffic-accident\": [\"traffic-accident\", \"traffic accident\"],\n        \"burning\": [\"burning\", \"burning\"],\n        \"disease\": [\"disease\", \"disease\"],\n        \"injury\": [\"injury\", \"injury\"],\n        \"disaster\": [\"disaster\", \"disaster\"],\n        \"natural-disaster\": [\"natural-disaster\", \"natural disaster\"],\n        \"other\": [\"other\", \"other\"]\n    }\n\n    result_dict = {}\n\n    for cause in causes:\n        cause_lower = cause.lower()\n        for key, value in causes_dict.items():\n            if cause_lower in value:\n                if key in result_dict:\n                    result_dict[key].append(cause)\n                else:\n                    result_dict[key] = [cause]\n\n    return result_dict\n\n\ncauses = [\"suicide\", \"drowning\", \"car-crash\", \"disease\", \"injury\", \"disaster\", \"other\"]"}
{"task_id": "valid/108", "completion": "\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    import string\n    string = string.replace(string.punctuation, \"\")\n    return string\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        try:\n            result.append(num ** exp)\n        except TypeError:\n            print(f\"TypeError: {num} is not a number\")\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n    return result\n\n\nnum_list = [2, 3, 4, 5, 'a', 6]\nexp = 3"}
{"task_id": "valid/112", "completion": "\n    for i in range(len(grid)):\n        print(min(grid[i]))\n\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n < 0:\n        print(\"Please provide a positive integer value.\")\n        return\n\n    if current_num > n:\n        return\n\n    if current_num % 2 == 0:\n        print(\"Thank you for your kind words.\")\n\n    print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in lst:\n        if i == element:\n            count += 1\n        else:\n            if count > 0:\n                yield count\n            count = 0\n    if count > 0:\n        yield count\n\n"}
{"task_id": "valid/115", "completion": "\n    num_str = str(num)\n    if len(set(num_str)) == 1:\n        return True\n    return False\n\ncheck_repdigit = partial(check_repdigit, base=10)\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return s\n    else:\n        first_char = s[0]\n        if first_char.lower() in 'aeiou':\n            return remove_vowels_recursive(s[1:])\n        else:\n            return first_char + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: python {0} [options]\\n\\nOptions:\\n\".format(options[0])\n    for option in options[1:]:\n        help_message += \"  {0}\\t{1}\\n\".format(option[0], option[1])\n    return help_message\n\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count_dict = {}\n    for i in Val:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set(\"aeiou\")\n    return set(s.lower()) >= vowels\n\n"}
{"task_id": "valid/122", "completion": "\n    count = sequence.count(subsequence)\n    return count\n\nsequence_characters = \"Please find number occurrences string\"\nspecific_subsequence = \"string\"\n"}
{"task_id": "valid/123", "completion": "\n    # your code here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(i for i in input_list if i % 2 != 0)\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in string if char in consonants)\n\n"}
{"task_id": "valid/126", "completion": "\n    # calculate number of electrons based on energy values\n    num_electrons = calculate_number_of_electrons(grid_energies, ados, dope, dos_grid_size)\n\n    # adjust electrons based on doping levels\n    adjusted_electrons = adjust_electrons_based_on_doping(num_electrons, ados, dope)\n\n    return adjusted_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in string:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    return sorted(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r\"\\d+\\.\\d+\"\n    if re.search(pattern, string):\n        return True\n    return False\n"}
{"task_id": "valid/135", "completion": "\n\n    from django.db import migrations, models\n\n    def forward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.add_to_class('{field_name}', models.CharField(max_length=255, blank=True, null=True))\n\n    def backward(apps, schema_editor):\n        CommitteeMember = apps.get_model('{app_name}', '{model_name}')\n        CommitteeMember.remove_field('{field_name}')\n\n    migrations.Operation(forward, backward)\n    \"\"\"\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    return sum(common_elements)\n\n"}
{"task_id": "valid/137", "completion": "\n    length = len(df)\n    forecast_period = math.ceil(length / 100)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    n = int(n_str)\n    return str(n * 2)\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"preset1\": (1.0, 2.0, 3.0),\n        \"preset2\": (4.0, 5.0, 6.0),\n        \"preset3\": (7.0, 8.0, 9.0)\n    }\n\n    # Initialize ROS node\n    rospy.init_node('reflex_control')\n\n    # Create a publisher\n    pub = rospy.Publisher('/reflex_arm/command', String, queue_size=10)\n\n    # Loop at 10Hz\n    rate = rospy.Rate(10)\n\n    while not rospy.is_shutdown():\n        if preset_name in presets:\n            # Publish the preset position\n            pub.publish(str(presets[preset_name]))\n        rate.sleep()\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = [value for value in list1 if value in list2]\n    product = 1\n    for value in common_elements:\n        product *= value\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    def quiz_system_behavior(allow_multiple_answer, zoom_level):\n        if allow_multiple_answer == True:\n            print(\"Allow multiple answer\")\n        else:\n            print(\"Disallow multiple answer\")\n\n        if zoom_level == \"high\":\n            print(\"Zoom level is high\")\n        elif zoom_level == \"medium\":\n            print(\"Zoom level is medium\")\n        else:\n            print(\"Zoom level is low\")\n\n    quiz_system_behavior(True, \"high\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    for vowel in vowels:\n        sentence = sentence.replace(vowel, '')\n    return sentence\n"}
{"task_id": "valid/146", "completion": "\n    def merge_nested(a, b):\n        for key in b:\n            if key in a:\n                if isinstance(a[key], dict) and isinstance(b[key], dict):\n                    merge_nested(a[key], b[key])\n                elif a[key] > b[key]:\n                    a[key] = b[key]\n            else:\n                a[key] = b[key]\n        return a\n\n    merged = merge_nested(a, b)\n    sorted_merged = {k: merged[k] for k in sorted(merged)}\n    return sorted_merged\n\n\na = {'a': 1, 'b': 2, 'nested': {'x': 5, 'y': 6}}\nb = {'c': 3, 'd': 4, 'nested': {'y': 7, 'z': 8}}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d, key=lambda k: d[k])\n    except ValueError:\n        print(\"The dictionary is empty.\")\n    except TypeError:\n        print(\"The input is not a dictionary.\")\n"}
{"task_id": "valid/148", "completion": "\n    # Your code here\n    pass\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None:\n        return None\n    elif len(string) == 0:\n        return \"\"\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n"}
{"task_id": "valid/151", "completion": "\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    if x % 2 == 0:\n        return False\n\n    sqrt_x = int(sqrt(x))\n    for i in range(3, sqrt_x + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
