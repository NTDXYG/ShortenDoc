{"task_id": "valid/0", "completion": "\n    # Define categories\n    categories = ['Sports', 'Politics', 'Technology', 'Entertainment', 'Health']\n    \n    # Define rules for each category\n    rules = {\n        'Sports': ['football', 'basketball', 'cricket', 'tennis', 'soccer'],\n        'Politics': ['election', 'president', 'parliament', 'government', 'democracy'],\n        'Technology': ['computer', 'mobile', 'internet', 'software', 'hardware'],\n        'Entertainment': ['movie', 'music', 'tv', 'game', 'comedy'],\n        'Health': ['disease', 'medicine', 'vaccine', 'hospital', 'pharmacy']\n    }\n    \n    # Classify text\n    for category, keywords in rules.items():\n        for keyword in keywords:\n            if keyword in text.lower():\n                return category\n    \n    # If no category is matched, return 'Other'\n    return 'Other'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(digit) for digit in str(n)) % 3 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/6", "completion": "\n    if base == 1:\n        return 0\n    if n == 1:\n        return 1\n    if n < base:\n        return -1\n    \n    log_val = 1\n    while n > 1:\n        n /= base\n        log_val += 1\n    return log_val\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_obj = json.loads(json_str)\n        pprint.pprint(json_obj)\n    except ValueError as e:\n        print(f\"Invalid JSON string: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set to store unique characters\n    unique_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, it's not unique\n        if char in unique_chars:\n            return False\n        # Add the character to the set\n        unique_chars.add(char)\n\n    # If we reach here, all characters were unique\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y-%m-%d')\n    result_date = date_object + timedelta(days=days)\n    return result_date.strftime('%Y-%m-%d')\n\n"}
{"task_id": "valid/12", "completion": "\n    return ' '.join(text.split())\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Remove numbers\n    text = ''.join(e for e in text if not e.isdigit())\n\n    # Remove whitespace\n    text = text.strip()\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b' + re.escape(word1) + r'\\b|\\b' + re.escape(word2) + r'\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('#'):\n            parts = line.split(':')\n            if len(parts) == 2:\n                key = parts[0].strip('#').strip()\n                value = parts[1].strip()\n                if key in ['tabstop', 'expandtab', 'shiftwidth', 'softtabstop']:\n                    settings[key] = value\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse both lists\n    list1.reverse()\n    list2.reverse()\n\n    # Combine the lists\n    combined_list = list1 + list2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    elif isinstance(struct, tuple):\n        return tuple(struct_to_dict(item) for item in struct)\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    # Check if matrix is square\n    is_square = len(matrix) == len(matrix[0])\n    \n    # Calculate number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Calculate sum of diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(min(num_rows, num_cols)))\n    \n    return num_rows, num_cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key not in json_data or json_data[key] != value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet)):\n        if alphabet[i] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n"}
{"task_id": "valid/34", "completion": "\n    sum_of_nums = 0\n    current_num = \"\"\n    for char in ts:\n        if char.isdigit():\n            current_num += char\n        else:\n            if current_num:\n                sum_of_nums += int(current_num)\n                current_num = \"\"\n    if current_num:\n        sum_of_nums += int(current_num)\n    return sum_of_nums\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Validate array to ensure it only contains numerical values\n    for i in arr:\n        if not isinstance(i, (int, float)):\n            return \"Error: Array contains non-numerical values.\"\n    \n    # Compute the addition of all elements within the array\n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted([neighborhood[\"name\"] for neighborhood in neighborhoods])\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize result as maximum possible\n    min_sum = float('inf')\n    \n    # Sort the array\n    arr.sort()\n    \n    # Iterate through the array\n    for i in range(n - 1):\n        # Find the pair with minimum absolute sum\n        if abs(arr[i] + arr[i + 1]) < min_sum:\n            min_sum = abs(arr[i] + arr[i + 1])\n            \n    return min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if total number of votes is at least 100\n    if sum(votes) < 100:\n        return \"Total number of votes must be at least 100.\"\n\n    # Create a dictionary to store vote counts for each candidate\n    vote_counts = {}\n    for vote in votes:\n        # Check if candidate name is a string consisting of only uppercase letters with maximum length of 10 characters\n        if not isinstance(vote[0], str) or not vote[0].isupper() or len(vote[0]) > 10:\n            return \"Candidate name must be a string consisting of only uppercase letters with maximum length of 10 characters.\"\n        # Check if number of votes is a positive integer not exceeding 1000\n        if not isinstance(vote[1], int) or vote[1] < 1 or vote[1] > 1000:\n            return \"Number of votes must be a positive integer not exceeding 1000.\"\n        # Update vote counts for each candidate\n        if vote[0] in vote_counts:\n            vote_counts[vote[0]] += vote[1]\n        else:\n            vote_counts[vote[0]] = vote[1]\n\n    # Calculate percentage of votes each candidate received, rounded to two decimal places\n    total_votes = sum(vote_counts.values())\n    results = {}\n    for candidate, votes in vote_counts.items():\n        percentage = round((votes / total_votes) * 100, 2)\n        results[candidate] = percentage\n\n    return results\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Check if the date string matches the DD-MM-YYYY format\n        date_obj = datetime.strptime(date_string, \"%d-%m-%Y\")\n    except ValueError:\n        try:\n            # Check if the date string matches the DD-MMM-YYYY format\n            date_obj = datetime.strptime(date_string, \"%d-%b-%Y\")\n        except ValueError:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n    # Convert the date object to a standardized format\n    formatted_date = date_obj.strftime(\"%B %d, %Y\")\n\n    return formatted_date\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = {\n        'image': ['jpg', 'png', 'gif'],\n        'document': ['txt', 'doc', 'pdf'],\n        'video': ['mp4', 'avi', 'mkv']\n    }\n    \n    # Check if the new file name has a valid extension\n    if '.' in newname:\n        file_extension = newname.split('.')[-1]\n        if file_extension in allowed_extensions.get(allowed_type, []):\n            return True\n    return False\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, tuple):\n            result.append(remove_uneven(i))\n        elif isinstance(i, int) or isinstance(i, float):\n            if i % 2 == 0:\n                result.append(i)\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                result.append(i)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # histogram_data.add_scalar('Accuracy', accs, generation)\n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 3 and parts[0] == \"Programming Language\":\n            unique_languages.add(parts[1])\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over each sub-array in the input array\n    for sub_arr in arr:\n        # Iterate over each number in the sub-array\n        for num in sub_arr:\n            # If the number is already in the dictionary, increment its count\n            if num in count_dict:\n                count_dict[num] += 1\n            # Otherwise, add the number to the dictionary with a count of 1\n            else:\n                count_dict[num] = 1\n\n    # Return the dictionary containing the count of each number\n    return count_dict\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re_path(r'^videos/$', views.VideoListView.as_view(), name='video_list'),\n        re_path(r'^videos/(?P<pk>\\d+)/$', views.VideoDetailView.as_view(), name='video_detail'),\n    ]\n\n    # Your task is to implement a function `match_url_to_view(url)` that takes a URL as input and returns the name of the view function associated with that URL. If the URL does not match any of the patterns, the function should return \"Not Found\".\n\n    # Example:\n    # match_url_to_view('videos/') should return 'video_list'\n    # match_url_to_view('videos/123/') should return 'video_detail'\n    # match_url_to_view('about/') should return 'Not Found'\n\n    # Note: The URL patterns are defined using regular expressions, where `r'^videos/$'` matches the URL '/videos/' and `r'^videos/(?P<pk>\\d+)/$'` matches URLs like '/videos/123/' where '123' is a positive integer.\n\n    # Write the `match_url_to_view(url)` function to solve this problem."}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    concatenated_string = string + \" \" + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dict_list in list_of_dicts:\n        for dict_item in dict_list:\n            for key in dict_item:\n                if key.startswith(\"price_\"):\n                    total_price += dict_item[key]\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        list2.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view_post\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if not (isinstance(a, int) and isinstance(b, int)):\n        raise ValueError(\"Both inputs must be integers.\")\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both inputs must be positive integers.\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {\n        'system': [],\n        'network': [],\n        'database': [],\n        'other': []\n    }\n\n    for file_path in file_paths:\n        if 'system' in file_path:\n            config_files['system'].append(file_path)\n        elif 'network' in file_path:\n            config_files['network'].append(file_path)\n        elif 'database' in file_path:\n            config_files['database'].append(file_path)\n        else:\n            config_files['other'].append(file_path)\n\n    return config_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n"}
{"task_id": "valid/63", "completion": "\n    colors = [\"WHITE\", \"RED\", \"GREEN\", \"BLUE\", \"WHITE\"]\n    return colors[(colors.index(color) + 1) % len(colors)]\n"}
{"task_id": "valid/64", "completion": "\n    # Increment each value in the list by 1\n    for i in range(len(list)):\n        list[i] += 1\n    return list\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end + 1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"keys in given dictionary are: \")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    string = \"Hello\"\n    phrase = \"World\"\n    concatenated_string = f\"{string} {phrase}\"\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    def process_strings(strings):\n        result = []\n        for string in strings:\n            if re.match(\"^[a-zA-Z0-9 ]+$\", string):\n                result.append(string.capitalize())\n        return result\n    return process_strings\n\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+4] == '<b>':\n            start = i\n            i += 4\n            while i < len(html_code) and html_code[i:i+5] != '</b>':\n                i += 1\n            if i < len(html_code):\n                bold_text.append(html_code[start+4:i])\n                i += 5\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"coke\": 1.5,\n        \"chips\": 1.0,\n        \"candy\": 0.75\n    }\n\n    # Check if the item is available\n    if item not in items:\n        return \"Item not available\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n\n    # Calculate the change to return\n    change = money_inserted - items[item]\n\n    # Update the stock of the item\n    # For simplicity, we'll just print a message indicating the purchase\n    print(f\"Purchased {item} for ${items[item]}. Change returned: ${change}\")\n\n    return \"Purchase successful\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = list(set(merged_list))\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a value to a variable\n    my_var = 10\n    \n    # Validate the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n        \n    # Return the variable\n    return my_var\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    merged_arr = []\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            merged_arr.append(arr[i])\n    return merged_arr\n"}
{"task_id": "valid/82", "completion": "\n    # Define the regular expression pattern\n    pattern = r'\\b\\w+\\b'\n\n    # Use the re.findall() function to find all matches of the pattern in the text\n    tokens = re.findall(pattern, text)\n\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7 found.\"\n    \n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    \n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n    \n    return f\"Average: {average}\\nMax: {max_value}\\nMin: {min_value}\\nOccurrences: {occurrences}\"\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    if len(numbers) == 0:\n        return 0, 0\n    else:\n        return sum(numbers) / len(numbers), sum(numbers)\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    \n    min_value = max_value = time_series[0]\n    \n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains non-numerical values\")\n        \n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n    \n    return (min_value, max_value)\n"}
{"task_id": "valid/88", "completion": "\n    encyclopedia = {\n        \"Python\": [\"Introduction to Python\", \"Advanced Python Techniques\", \"Python Libraries\"],\n        \"JavaScript\": [\"Introduction to JavaScript\", \"DOM Manipulation\", \"Asynchronous JavaScript\"],\n        \"Java\": [\"Introduction to Java\", \"Object-Oriented Programming\", \"Java Collections\"]\n    }\n    related_articles_count = {}\n    for entry in encyclopedia:\n        related_articles_count[entry] = len(encyclopedia[entry])\n    return related_articles_count\n\nencyclopedia = {\n    \"Python\": [\"Introduction to Python\", \"Advanced Python Techniques\", \"Python Libraries\"],\n    \"JavaScript\": [\"Introduction to JavaScript\", \"DOM Manipulation\", \"Asynchronous JavaScript\"],\n    \"Java\": [\"Introduction to Java\", \"Object-Oriented Programming\", \"Java Collections\"]\n}\n"}
{"task_id": "valid/89", "completion": "\n    max_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[max_index]:\n            max_index = i\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            sub_root = Element(key)\n            root.append(sub_root)\n            sub_root.extend(dict_to_xml(value).split('\\n'))\n        else:\n            element = Element(key)\n            element.text = str(value)\n            root.append(element)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    # Initialize pointers for the top-right corner of the matrix\n    row, col = 0, len(matrix[0]) - 1\n\n    # Traverse the matrix from top-right corner to bottom-left corner\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] == target:\n            return True  # Target found\n        elif matrix[row][col] > target:\n            col -= 1  # Move left\n        else:\n            row += 1  # Move down\n\n    return False  # Target not found\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 != 0:\n            sum_odd += lst[i]\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    else:\n        return sum_odd / count_odd\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n"}
{"task_id": "valid/97", "completion": "\n    description = f\"Discord bot for managing and playing music in a server. Features include:\\n\"\n    for feature, description in mapping.items():\n        description += f\"- {feature}: {description}\\n\"\n    description += f\"\\nWeb app for managing personal playlists and server settings is available at {mapping['web_app_url']}.\"\n    description += f\"\\nCommands are categorized and help information is provided for each command.\"\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return \"-\" + dec_to_ternary(-n)\n    elif n == 0:\n        return \"0\"\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        vowel_count = sum(1 for char in palindrome if char in vowels)\n        vowel_count_dict[palindrome] = vowel_count\n\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in unique_elements:\n            # If it does, return True\n            return True\n        # Add the current number to the set\n        unique_elements.add(num)\n\n    # If no pair of numbers sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for package, version in dependencies:\n        if package not in latest_versions or version > latest_versions[package]:\n            latest_versions[package] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categorized_causes = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in categorized_causes:\n            categorized_causes[action] = []\n        categorized_causes[action].append(result)\n    return categorized_causes\n"}
{"task_id": "valid/108", "completion": "\n    # Your implementation here\n    return name.replace(\" \", \"-\").lower()\n"}
{"task_id": "valid/109", "completion": "\n    non_ascii_chars = [char for char in text if ord(char) > 127]\n    return non_ascii_chars\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if current_num == 0:\n        if not isinstance(n, int) or n <= 0:\n            raise ValueError(\"Input must be a positive integer\")\n        return print_thank_you(n, current_num + 1)\n    elif current_num <= n:\n        if current_num % 2 == 0:\n            print(\"Thank you\")\n        return print_thank_you(n, current_num + 1)\n    else:\n        return\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        else:\n            break\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    digit = num % base\n    while num:\n        if num % base != digit:\n            return False\n        num //= base\n    return True\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: app_name [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option:<15}{description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in range(len(Val)):\n        if Val[i] == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    inverted_bitset = 0\n    bit_position = 0\n    while sample_bitset > 0:\n        # Get the last bit of the sample_bitset\n        last_bit = sample_bitset & 1\n        # Invert the last bit\n        inverted_last_bit = 1 - last_bit\n        # Add the inverted bit to the inverted_bitset\n        inverted_bitset |= inverted_last_bit << bit_position\n        # Shift the sample_bitset to the right by 1\n        sample_bitset >>= 1\n        # Increment the bit_position\n        bit_position += 1\n    return inverted_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    for i in range(len(sequence) - len(subsequence) + 1):\n        if sequence[i:i+len(subsequence)] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Divisor cannot be zero\")\n    \n    # Initialize the quotient\n    quotient = 0\n    \n    # Use a while loop to divide h by t\n    while h >= t:\n        h -= t\n        quotient += 1\n    \n    return quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            count += 1\n    return count\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate number of electrons based on energy values\n    electron_count = 0\n    for energy, ado in zip(grid_energies, ados):\n        if energy < 0:\n            electron_count += ado\n\n    # Adjust the number of electrons based on doping levels\n    if dope > 0:\n        electron_count += dope\n    elif dope < 0:\n        electron_count -= abs(dope)\n\n    # Adjust the number of electrons based on the DOS grid size\n    electron_count = electron_count / dos_grid_size\n\n    return electron_count\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    return [arr[i] for i in range(len(arr)) if i % 2 == 0] + [arr[i] for i in range(len(arr) - 1, -1, -1) if i % 2 != 0]\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n            if len(unique_elements) == 3:\n                break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.search(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, 'previous_migration_number'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    carry = 0\n    result = []\n    for digit in reversed(n_str):\n        doubled_digit = int(digit) * 2 + carry\n        result.append(str(doubled_digit % 10))\n        carry = doubled_digit // 10\n    if carry:\n        result.append(str(carry))\n    return ''.join(reversed(result))\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.5, 0.5, 0.5),\n        \"position2\": (-0.5, -0.5, -0.5)\n    }\n\n    def get_preset_coordinates(preset_name):\n        return presets.get(preset_name, None)\n\n    return get_preset_coordinates(preset_name)\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n\n        If allow_multiple_answer is True, it means users can select multiple answers for a question.\n        \"\"\"\n        if zoom_level == 1:\n            \"\"\"\n            If zoom_level is 1, it means the quiz is at a basic level.\n            \"\"\"\n            # Behavior for basic quiz with multiple answers\n            pass\n        elif zoom_level == 2:\n            \"\"\"\n            If zoom_level is 2, it means the quiz is at a moderate level.\n            \"\"\"\n            # Behavior for moderate quiz with multiple answers\n            pass\n        elif zoom_level == 3:\n            \"\"\"\n            If zoom_level is 3, it means the quiz is at a high level.\n            \"\"\"\n            # Behavior for high quiz with multiple answers\n            pass\n    else:\n        \"\"\"\n        If allow_multiple_answer is False, it means users can only select one answer for a question.\n        \"\"\"\n        if zoom_level == 1:\n            \"\"\"\n            If zoom_level is 1, it means the quiz is at a basic level.\n            \"\"\"\n            # Behavior for basic quiz with single answer\n            pass\n        elif zoom_level == 2:\n            \"\"\"\n            If zoom_level is 2, it means the quiz is at a moderate level.\n            \"\"\"\n            # Behavior for moderate quiz with single answer\n            pass\n        elif zoom_level == 3:\n            \"\"\"\n            If zoom_level is 3, it means the quiz is at a high level.\n            \"\"\"\n            # Behavior for high quiz with single answer\n            pass\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = 'aeiouAEIOU'\n    modified_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            modified_sentence += char\n    return modified_sentence\n"}
{"task_id": "valid/146", "completion": "\n    # Your code here\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = max(d.values())\n        return max_value\n    except ValueError:\n        return \"The dictionary is empty or contains non-numeric values.\"\n    except TypeError:\n        return \"The input is not a dictionary.\"\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 4 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
