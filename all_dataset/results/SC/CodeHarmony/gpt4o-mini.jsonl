{"task_id": "valid/0", "completion": "\n    # Example rules for classification\n    if \"urgent\" in text.lower():\n        return \"urgent\"\n    elif \"important\" in text.lower():\n        return \"important\"\n    elif \"info\" in text.lower() or \"information\" in text.lower():\n        return \"informational\"\n    else:\n        return \"general\"\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    return sorted(instruments, reverse=True)\n"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if isinstance(data, list):\n            return data\n        else:\n            raise ValueError(\"JSON string does not represent a list.\")\n    except json.JSONDecodeError:\n        raise ValueError(\"Invalid JSON string.\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, (int, float)) or n < 0:\n        return False\n    \n    n_str = str(int(n))\n    digit_sum = sum(int(digit) for digit in n_str)\n    \n    return n % 5 == 0 and digit_sum % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if base <= 1 or n <= 0:\n        raise ValueError(\"Base must be greater than 1 and n must be positive.\")\n    \n    current = 1\n    for exponent in range(0, n):\n        if current == n:\n            return exponent\n        current = (current * base) % n\n    \n    return None  # If no discrete logarithm exists\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data, indent=4)\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n"}
{"task_id": "valid/8", "completion": "\n    if len(s) < 2:\n        return False\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(f\"{{{{ {key} }}}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n"}
{"task_id": "valid/11", "completion": "\n    date = datetime.strptime(date_string, '%Y-%m-%d')\n    new_date = date + timedelta(days=days)\n    return new_date.strftime('%Y-%m-%d')\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10:\n        raise ValueError(\"Text length should not exceed 10 characters.\")\n    \n    # Strip leading and trailing whitespace\n    stripped_text = text.strip()\n    \n    # Replace multiple spaces between words with a single space\n    cleaned_text = ' '.join(stripped_text.split())\n    \n    return cleaned_text\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n    \n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Remove extra whitespace\n    text = ' '.join(text.split())\n    \n    return text\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b(' + re.escape(word1) + r'|' + re.escape(word2) + r')\\b'\n    return bool(re.search(pattern, text))\n"}
{"task_id": "valid/15", "completion": "\n    if not array or not array[0]:\n        return []\n\n    layers_sums = []\n    n = len(array)\n    m = len(array[0])\n\n    for layer in range((min(n, m) + 1) // 2):\n        layer_sum = 0\n\n        # Top row\n        for j in range(layer, m - layer):\n            layer_sum += array[layer][j]\n\n        # Right column\n        for i in range(layer + 1, n - layer - 1):\n            layer_sum += array[i][m - layer - 1]\n\n        # Bottom row\n        if n - layer - 1 > layer:  # Check if there's a bottom row\n            for j in range(m - layer - 1, layer - 1, -1):\n                layer_sum += array[n - layer - 1][j]\n\n        # Left column\n        if layer < m - layer - 1:  # Check if there's a left column\n            for i in range(n - layer - 2, layer, -1):\n                layer_sum += array[i][layer]\n\n        layers_sums.append(layer_sum)\n\n    return layers_sums\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.splitlines()\n    \n    for line in lines:\n        line = line.strip()\n        if line.startswith(\"set\"):\n            parts = line.split()\n            for part in parts:\n                if \"tabstop\" in part:\n                    settings['tabstop'] = int(part.split('=')[1])\n                elif \"expandtab\" in part:\n                    settings['expandtab'] = True\n                elif \"shiftwidth\" in part:\n                    settings['shiftwidth'] = int(part.split('=')[1])\n                elif \"softtabstop\" in part:\n                    settings['softtabstop'] = int(part.split('=')[1])\n    \n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Create a list to hold the lex items\n    lex_items = []\n    \n    # Iterate through each word in the sentence\n    for word in words:\n        # Create a dictionary to hold the properties of each word\n        lex_item = {\n            'word': word,\n            'length': len(word),\n            'is_alpha': word.isalpha(),\n            'is_numeric': word.isnumeric(),\n            'is_alphanumeric': word.isalnum(),\n            'lowercase': word.lower(),\n            'uppercase': word.upper(),\n            'titlecase': word.title()\n        }\n        # Append the lex item to the list\n        lex_items.append(lex_item)\n    \n    return lex_items\n"}
{"task_id": "valid/18", "completion": "\n    if num < 10 and num > -10:\n        return 1\n    else:\n        return 1 + find_digits_count(abs(num) // 10)\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    reversed_list1 = list1[::-1]\n    reversed_list2 = list2[::-1]\n    \n    # Combine the reversed lists\n    combined_list = reversed_list1 + reversed_list2\n    \n    # Sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n    \n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    if not isinstance(dictionary, dict):\n        return None\n    \n    if \"name\" in dictionary:\n        return dictionary[\"name\"]\n    \n    for key, value in dictionary.items():\n        if isinstance(value, dict):\n            result = get_nested_dictionary_value(value)\n            if result is not None:\n                return result\n    \n    return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    n = int(num)\n    candidates = set()\n\n    # Edge cases\n    candidates.add(str(10 ** (len(num)) + 1))  # 100...001\n    candidates.add(str(10 ** (len(num) - 1) - 1))  # 999...999\n\n    # Generate palindromes around the given number\n    prefix = int(num[:(len(num) + 1) // 2])\n    for i in range(-1, 2):\n        candidate = str(prefix + i)\n        if len(num) % 2 == 0:\n            candidates.add(candidate + candidate[::-1])\n        else:\n            candidates.add(candidate + candidate[-2::-1])\n\n    # Remove the original number if it's a palindrome\n    candidates.discard(num)\n\n    # Find the closest palindrome\n    closest = None\n    min_diff = float('inf')\n    for candidate in candidates:\n        diff = abs(int(candidate) - n)\n        if diff < min_diff or (diff == min_diff and int(candidate) < closest):\n            closest = int(candidate)\n            min_diff = diff\n\n    return str(closest)\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0]) if rows > 0 else 0\n    diagonal_sum = sum(matrix[i][i] for i in range(min(rows, cols)))\n    is_square = rows == cols\n    \n    return rows, cols, diagonal_sum, is_square\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n"}
{"task_id": "valid/28", "completion": "\n    # Remove non-alphabetic characters and convert to lowercase\n    cleaned_string = ''.join(char.lower() for char in s if char.isalpha())\n    return cleaned_string\n"}
{"task_id": "valid/29", "completion": "\n    if not lst:\n        return None\n    minimum = lst[0]\n    for num in lst:\n        if num < minimum:\n            minimum = num\n    return minimum\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    \n    if key in json_data:\n        return json_data[key] == value\n    return False\n"}
{"task_id": "valid/31", "completion": "\n    button_table = []\n    for i in range(0, len(buttons), num_columns):\n        row = buttons[i:i + num_columns]\n        button_table.append(row)\n    \n    return button_table\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    index = 0\n\n    for char in s:\n        if char in alphabet:\n            if char == alphabet[index]:\n                index += 1\n            if index == len(alphabet):\n                return True\n\n    return False\n"}
{"task_id": "valid/33", "completion": "\n    return max(a, b)\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    \n    # Find all numeric substrings using regular expression\n    numeric_substrings = re.findall(r'\\d+', ts)\n    \n    # Convert the numeric substrings to integers and sum them\n    total_sum = sum(int(num) for num in numeric_substrings)\n    \n    return total_sum\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    if not all(isinstance(x, (int, float)) for x in arr):\n        raise ValueError(\"All elements in the array must be numerical values.\")\n    \n    return sum(arr)\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted(neighborhood['name'] for neighborhood in neighborhoods)\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize the minimum absolute sum to a large value\n    min_sum = float('inf')\n    pair = (0, 0)\n\n    # Iterate through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i + 1, n):\n            current_sum = abs(arr[i] + arr[j])\n            # Update the minimum sum and pair if a new minimum is found\n            if current_sum < min_sum:\n                min_sum = current_sum\n                pair = (arr[i], arr[j])\n\n    return pair, min_sum\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "valid/40", "completion": "\n    if not isinstance(votes, list):\n        raise ValueError(\"Votes must be a list of tuples.\")\n    \n    total_votes = 0\n    results = {}\n\n    for vote in votes:\n        if not isinstance(vote, tuple) or len(vote) != 2:\n            raise ValueError(\"Each vote must be a tuple of (candidate_name, number_of_votes).\")\n        \n        cand_name, number_of_votes = vote\n        \n        if not isinstance(cand_name, str) or len(cand_name) > 10:\n            raise ValueError(\"Candidate name must be a string of maximum length 10.\")\n        \n        if not isinstance(number_of_votes, int) or number_of_votes <= 0 or number_of_votes > 1000:\n            raise ValueError(\"Number of votes must be a positive integer not exceeding 1000.\")\n        \n        total_votes += number_of_votes\n        \n        if cand_name in results:\n            results[cand_name] += number_of_votes\n        else:\n            results[cand_name] = number_of_votes\n\n    if total_votes != 100:\n        raise ValueError(\"The total number of votes must be exactly 100.\")\n\n    percentages = {cand: round((count / total_votes) * 100, 2) for cand, count in results.items()}\n    \n    return results, percentages\n"}
{"task_id": "valid/41", "completion": "\n    # Define month mapping\n    month_mapping = {\n        'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n        'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12\n    }\n\n    # Try to parse the date\n    try:\n        if len(date_string) == 8:  # DDMYY format\n            day = int(date_string[:2])\n            month = int(date_string[2:4])\n            year = int(date_string[4:]) + 2000  # Assuming 2000s for simplicity\n        elif len(date_string) == 7:  # DD-MMMYY format\n            day = int(date_string[:2])\n            month_str = date_string[2:5]\n            month = month_mapping[month_str]\n            year = int(date_string[5:]) + 2000  # Assuming 2000s for simplicity\n        else:\n            raise ValueError(\"Invalid date format\")\n\n        # Validate the date\n        datetime(year, month, day)\n\n        # Return the standardized date format\n        return datetime(year, month, day).strftime(\"%B %d %Y\")\n\n    except ValueError as e:\n        raise ValueError(f\"Invalid date: {date_string}. Error: {e}\")\n"}
{"task_id": "valid/42", "completion": "\n    # Extract the file extension from the old and new names\n    old_extension = oldname.split('.')[-1] if '.' in oldname else ''\n    new_extension = newname.split('.')[-1] if '.' in newname else ''\n\n    # Check if the new extension is in the allowed types\n    if new_extension in allowed_type:\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return isinstance(n, (int, float)) and n % 2 == 0\n\n    def process_element(element):\n        if isinstance(element, tuple):\n            return remove_uneven(list(element))\n        elif isinstance(element, str):\n            return element if element.isnumeric() and is_even(int(element)) else None\n        else:\n            return element if is_even(element) else None\n\n    return [process_element(el) for el in lst if process_element(el) is not None]\n"}
{"task_id": "valid/44", "completion": "\n    return hours * 60\n"}
{"task_id": "valid/45", "completion": "\n    return string.count(specific_character)\n"}
{"task_id": "valid/46", "completion": "\n    # Ensure the histogram_data has a key for the current generation\n    if generation not in histogram_data:\n        histogram_data[generation] = []\n    \n    # Add the accuracy values to the histogram for the current generation\n    histogram_data[generation].extend(accs)\n    \n    return histogram_data\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.fullmatch(r'^[a-zA-Z0-9]{5}$', string))\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n\n    for classifier in classifiers:\n        parts = classifier.split(\" :: \")\n        if len(parts) == 2 and parts[0] == \"Programming Language\":\n            unique_languages.add(parts[1])\n\n    return len(unique_languages)\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    \n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n            \n    return [count_dict[num] for num in arr]\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$'),  # Matches the URL for the video list view\n        re.compile(r'^videos/(?P<video_id>\\d+)/$')  # Matches the URL for a specific video detail view\n    ]\n\n    views = {\n        'videos/': video_list_view,\n        'videos/<video_id>/': video_detail_view\n    }\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            view_name = pattern.pattern.split('/')[1]  # Extract the view name from the pattern\n            return views.get(view_name, None)\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    if position < 0 or position > len(list):\n        raise IndexError(\"Position out of bounds\")\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    input_string = input(\"Enter a string: \")\n    sentence = \"This is a sample sentence.\"\n    concatenated_string = input_string + \" \" + sentence\n    return concatenated_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substrings.add(s[i:j])\n    \n    return list(substrings)\n"}
{"task_id": "valid/54", "completion": "\n    price_sum = 0\n    for d in list_of_dicts:\n        for key in d:\n            if key.startswith('price'):\n                price_sum += d[key]\n    return price_sum\n"}
{"task_id": "valid/55", "completion": "\n    intersection = list(set(list1) & set(list2))\n    list2 = [item for item in list2 if item not in intersection]\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_view_post\n    else:\n        raise ValueError(\"Unsupported request method\")\n"}
{"task_id": "valid/57", "completion": "\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both numbers must be positive integers.\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n"}
{"task_id": "valid/58", "completion": "\n    categorized_files = {}\n\n    for file_path in file_paths:\n        # Split the file path into components\n        components = file_path.split('/')\n        \n        # Use the first two components as the category\n        category = '/'.join(components[:2])\n        \n        # Add the file to the appropriate category\n        if category not in categorized_files:\n            categorized_files[category] = []\n        categorized_files[category].append(file_path)\n\n    return categorized_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    return timeEnd - timeStart\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1  # Target not found\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid  # Target found\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)  # Search in the right half\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)  # Search in the left half\n"}
{"task_id": "valid/63", "completion": "\n    color_sequence = [\"WHITE\", \"RED\", \"BLUE\"]\n    if color in color_sequence:\n        current_index = color_sequence.index(color)\n        next_index = (current_index + 1) % len(color_sequence)\n        return color_sequence[next_index]\n    else:\n        raise ValueError(\"Invalid color input. Please use 'WHITE', 'RED', or 'BLUE'.\")\n"}
{"task_id": "valid/64", "completion": "\n    def increment_list_values(lst):\n    return [x + 1 for x in lst]\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        if (num**0.5).is_integer():\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return word\n    return None\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    phrase = \"world\"\n    base_string = \"Hello\"\n    concatenated_string = f\"{base_string}, {phrase}!\"\n    return concatenated_string\n"}
{"task_id": "valid/70", "completion": "\n    result = []\n    for s in strings:\n        if re.match(r'^[\\w\\s]*$', s):  # Check if the string contains only alphanumeric characters and spaces\n            result.append(s.capitalize())\n    return result\n"}
{"task_id": "valid/71", "completion": "\n    positions = [i for i, c in enumerate(string) if c == char]\n    return positions\n"}
{"task_id": "valid/72", "completion": "\n    bold_tags = []\n    start_tag = '<b>'\n    end_tag = '</b>'\n    start_index = 0\n\n    while True:\n        start_index = html_code.find(start_tag, start_index)\n        if start_index == -1:\n            break\n        end_index = html_code.find(end_tag, start_index)\n        if end_index == -1:\n            break\n        bold_text = html_code[start_index + len(start_tag):end_index]\n        bold_tags.append(bold_text)\n        start_index = end_index + len(end_tag)\n\n    return bold_tags\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    stock = {\n        'A1': {'name': 'Chips', 'price': 1.50, 'quantity': 10},\n        'A2': {'name': 'Soda', 'price': 1.00, 'quantity': 10},\n        'A3': {'name': 'Candy', 'price': 0.75, 'quantity': 10},\n    }\n\n    # Check if the item exists in the stock\n    if item not in stock:\n        return \"Item not found.\"\n\n    # Get the item details\n    item_details = stock[item]\n\n    # Check if there is enough stock\n    if item_details['quantity'] <= 0:\n        return \"Item out of stock.\"\n\n    # Check if enough money is inserted\n    if money_inserted < item_details['price']:\n        return \"Not enough money inserted.\"\n\n    # Calculate change\n    change = money_inserted - item_details['price']\n\n    # Update stock\n    item_details['quantity'] -= 1\n\n    return f\"Purchased {item_details['name']}. Change returned: ${change:.2f}. Remaining stock: {item_details['quantity']}.\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    return list(set(merged_list))\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    byte_string = string.encode('utf-8')\n    base64_bytes = base64.b64encode(byte_string)\n    return base64_bytes.decode('utf-8')\n"}
{"task_id": "valid/77", "completion": "\n    return [index for index, value in enumerate(vector) if value != 0]\n"}
{"task_id": "valid/78", "completion": "\n    variable = \"Assigned Value\"\n    \n    if isinstance(variable, str) and variable:\n        return f\"Variable assigned successfully: {variable}\"\n    else:\n        return \"Variable assignment failed: Invalid value\"\n"}
{"task_id": "valid/79", "completion": "\n    if not word:\n        return word\n    word_list = list(word)\n    random.shuffle(word_list)\n    return ''.join(word_list)\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"Integer\"\n    elif isinstance(element, float):\n        return \"Float\"\n    elif isinstance(element, str):\n        return \"String\"\n    elif isinstance(element, list):\n        return \"List\"\n    elif isinstance(element, dict):\n        return \"Dictionary\"\n    elif isinstance(element, tuple):\n        return \"Tuple\"\n    elif isinstance(element, set):\n        return \"Set\"\n    else:\n        return \"Unknown type\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n\n    merged = [arr[0]]\n    \n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            merged.append(arr[i])\n    \n    return merged\n"}
{"task_id": "valid/82", "completion": "\n    # Define a regular expression pattern for tokenization\n    pattern = r'\\w+|\\S'\n    \n    # Use re.findall to extract tokens based on the pattern\n    tokens = re.findall(pattern, text)\n    \n    return tokens\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    \n    if not divisible_numbers:\n        return \"No numbers found that are divisible by both 3 and 7.\"\n    \n    average = sum(divisible_numbers) / len(divisible_numbers)\n    maximum = max(divisible_numbers)\n    minimum = min(divisible_numbers)\n    \n    occurrences = {num: divisible_numbers.count(num) for num in set(divisible_numbers)}\n    \n    return {\n        \"average\": average,\n        \"maximum\": maximum,\n        \"minimum\": minimum,\n        \"occurrences\": occurrences\n    }\n"}
{"task_id": "valid/84", "completion": "\n    from collections import Counter\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Find the word with the highest frequency\n    highest_frequency_word = max(word_counts, key=word_counts.get)\n\n    return highest_frequency_word\n"}
{"task_id": "valid/85", "completion": "\n    euler_number = sum(1 / math.factorial(i) for i in range(decimal_places * 10))\n    return round(euler_number, decimal_places)\n"}
{"task_id": "valid/86", "completion": "\n    if not numbers:\n        return 0, 0\n    \n    total_sum = sum(numbers)\n    average = total_sum / len(numbers)\n    \n    return average, total_sum\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty.\")\n    \n    if not all(isinstance(x, (int, float)) for x in time_series):\n        raise ValueError(\"The time series contains non-numerical values.\")\n    \n    min_value = min(time_series)\n    max_value = max(time_series)\n    \n    return (min_value, max_value)\n"}
{"task_id": "valid/88", "completion": "\n    # Initialize a dictionary to hold the count of related articles for each entry\n    related_counts = {}\n\n    # Iterate through each entry in the encyclopedia\n    for entry, related in encyclopedia.items():\n        # Count the number of related articles\n        related_counts[entry] = len(related)\n\n    return related_counts\n"}
{"task_id": "valid/89", "completion": "\n    if not lst:\n        return None\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n"}
{"task_id": "valid/90", "completion": "\n    return any(elem in list1 for elem in list2)\n"}
{"task_id": "valid/91", "completion": "\n    data = Element('data')\n    \n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        data.append(child)\n    \n    return tostring(data, encoding='unicode')\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n\n    m, n = len(matrix), len(matrix[0])\n    left, right = 0, m * n - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        mid_value = matrix[mid // n][mid % n]\n\n        if mid_value == target:\n            return True\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n"}
{"task_id": "valid/93", "completion": "\n    total_sum = 0\n    count = 0\n    \n    for num in lst:\n        if num % 2 != 0:  # Check if the number is odd\n            total_sum += num  # Add to the sum\n            count += 1  # Increment the count of odd numbers\n    \n    if count == 0:\n        return 0, 0  # Avoid division by zero if there are no odd elements\n    \n    average = total_sum / count  # Calculate the average\n    return total_sum, average\n"}
{"task_id": "valid/94", "completion": "\n    if n <= 0 or n > len(lst):\n        return None\n    unique_elements = list(set(lst))\n    unique_elements.sort(reverse=True)\n    return unique_elements[n - 1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n"}
{"task_id": "valid/96", "completion": "\n    return set_a.symmetric_difference(set_b)\n"}
{"task_id": "valid/97", "completion": "\n    description = {\n        \"name\": \"MusicBot\",\n        \"features\": [\n            \"Play music from various sources (YouTube, Spotify, etc.)\",\n            \"Manage personal playlists\",\n            \"Control playback (play, pause, skip, stop)\",\n            \"Volume control\",\n            \"Queue management\",\n            \"Web app for managing personal and server settings\",\n            \"Categorized commands with help information\"\n        ],\n        \"commands\": {\n            \"play\": {\n                \"description\": \"Play a song from a given URL or search term.\",\n                \"usage\": \"!play <url or search term>\"\n            },\n            \"pause\": {\n                \"description\": \"Pause the currently playing music.\",\n                \"usage\": \"!pause\"\n            },\n            \"resume\": {\n                \"description\": \"Resume the paused music.\",\n                \"usage\": \"!resume\"\n            },\n            \"skip\": {\n                \"description\": \"Skip the currently playing song.\",\n                \"usage\": \"!skip\"\n            },\n            \"stop\": {\n                \"description\": \"Stop the music and clear the queue.\",\n                \"usage\": \"!stop\"\n            },\n            \"queue\": {\n                \"description\": \"Show the current music queue.\",\n                \"usage\": \"!queue\"\n            },\n            \"volume\": {\n                \"description\": \"Set the volume level (0-100).\",\n                \"usage\": \"!volume <level>\"\n            },\n            \"help\": {\n                \"description\": \"Show help information for commands.\",\n                \"usage\": \"!help [command]\"\n            }\n        }\n    }\n    return description\n"}
{"task_id": "valid/98", "completion": "\n    if n == 0:\n        return '0'\n    \n    negative = n < 0\n    n = abs(n)\n    ternary = ''\n    \n    while n > 0:\n        ternary = str(n % 3) + ternary\n        n //= 3\n    \n    return '-' + ternary if negative else ternary\n"}
{"task_id": "valid/99", "completion": "\n    extensions = []\n    for file in file_names:\n        if '.' in file:\n            extension = file.split('.')[-1]\n            extensions.append(extension)\n    return tuple(extensions)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age <= 12:\n        return \"Child\"\n    elif age <= 19:\n        return \"Teenager\"\n    elif age <= 64:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    letter_grade = (\n        \"A\" if numerical_grade >= 90 else\n        \"B\" if numerical_grade >= 80 else\n        \"C\" if numerical_grade >= 70 else\n        \"D\" if numerical_grade >= 60 else\n        \"F\"\n    )\n\n    gpa = (\n        4.0 if numerical_grade >= 90 else\n        3.0 if numerical_grade >= 80 else\n        2.0 if numerical_grade >= 70 else\n        1.0 if numerical_grade >= 60 else\n        0.0\n    )\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price'] * item['quantity']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowel_count = {}\n    vowels = set('aeiou')\n\n    for palindrome in palindrome_tuples:\n        count = sum(1 for char in palindrome if char in vowels)\n        vowel_count[palindrome] = count\n\n    return vowel_count\n"}
{"task_id": "valid/104", "completion": "\n    # Remove leading and trailing whitespace\n    s = s.strip()\n    \n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Replace spaces with underscores\n    s = s.replace(\" \", \"_\")\n    \n    # Return the modified string\n    return s\n"}
{"task_id": "valid/105", "completion": "\n    seen = set()\n    for num in arr:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n\n    for package, version in dependencies:\n        if package not in latest_versions:\n            latest_versions[package] = version\n        else:\n            current_version = latest_versions[package]\n            if is_newer_version(version, current_version):\n                latest_versions[package] = version\n\n    return list(latest_versions.items())\n"}
{"task_id": "valid/107", "completion": "\n    categories = {}\n\n    for cause in causes:\n        action, result = cause.split(\" \", 1)\n        if action not in categories:\n            categories[action] = []\n        categories[action].append(result)\n\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"_\").lower()\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(char) > 127 for char in text)\n"}
{"task_id": "valid/110", "completion": "\n    import string as str_lib\n\n    return ''.join(char for char in string if char not in str_lib.punctuation)\n"}
{"task_id": "valid/111", "completion": "\n    def raise_power(num_list, exp):\n    \"\"\"\n    This function takes a list of numbers and an exponent value,\n    and returns a new list with each element raised to the given exponent.\n    \"\"\"\n    try:\n        return [num ** exp for num in num_list]\n    except TypeError:\n        print(\"Error: Please ensure that all elements in the list are numbers and the exponent is an integer.\")\n        return []\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        if row:  # Check if the row is not empty\n            min_value = min(row)\n            print(min_value)\n"}
{"task_id": "valid/113", "completion": "\n    if not isinstance(n, int) or n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n\n    if current_num < n:\n        print(\"Thank\")\n        print_thank_you(n, current_num + 1)\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n\n    for item in lst:\n        if item == element:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n\n    return max_count\n"}
{"task_id": "valid/115", "completion": "\n    if num < 0:\n        return False\n    \n    digits = []\n    while num > 0:\n        digits.append(num % base)\n        num //= base\n    \n    return all(d == digits[0] for d in digits)\n"}
{"task_id": "valid/116", "completion": "\n    if not s:\n        return \"\"\n    first_char = s[0]\n    if first_char.lower() in 'aeiou':\n        return remove_vowels_recursive(s[1:])\n    else:\n        return first_char + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: application [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  --{option}: {description}\\n\"\n    return help_message.strip()\n"}
{"task_id": "valid/118", "completion": "\n    if input_string:\n        return input_string[0]\n    return None\n"}
{"task_id": "valid/119", "completion": "\n    counts = {}\n    for item in Val:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n"}
{"task_id": "valid/121", "completion": "\n    vowels = set('aeiouAEIOU')\n    return all(char in vowels for char in s) and len(s) > 0\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    seq_len = len(sequence)\n    sub_len = len(subsequence)\n\n    for i in range(seq_len - sub_len + 1):\n        if sequence[i:i + sub_len] == subsequence:\n            count += 1\n\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    if t == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    \n    sign = -1 if (h < 0) ^ (t < 0) else 1\n    h, t = abs(h), abs(t)\n    quotient = 0\n    \n    while h >= t:\n        h -= t\n        quotient += 1\n    \n    return sign * quotient\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants_count = 0\n    \n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants_count += 1\n            \n    return consonants_count\n"}
{"task_id": "valid/126", "completion": "\n    import numpy as np\n\n    # Calculate the number of electrons based on the density of states (DOS) and energy levels\n    def calculate_number_of_electrons(grid_energies, ados, fermi_level):\n        number_of_electrons = 0\n        for energy, density in zip(grid_energies, ados):\n            if energy < fermi_level:\n                number_of_electrons += density * (fermi_level - energy)\n        return number_of_electrons\n\n    # Adjust the number of electrons based on doping levels\n    def adjust_for_doping(number_of_electrons, dope):\n        return number_of_electrons + dope\n\n    # Main simulation logic\n    fermi_level = np.mean(grid_energies)  # Example: using the mean energy as the Fermi level\n    number_of_electrons = calculate_number_of_electrons(grid_energies, ados, fermi_level)\n    adjusted_electrons = adjust_for_doping(number_of_electrons, dope)\n\n    return adjusted_electrons\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    if not arr:\n        return []\n\n    arr.sort()\n    result = []\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        if left == right:\n            result.append(arr[left])\n        else:\n            result.append(arr[right])\n            result.append(arr[left])\n        left += 1\n        right -= 1\n\n    return result\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        name, value = color\n        color_dict[name] = value\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {')': '(', '}': '{', ']': '['}\n\n    for char in string:\n        if char in parentheses.values():\n            stack.append(char)\n        elif char in parentheses.keys():\n            if not stack or stack.pop() != parentheses[char]:\n                return False\n\n    return len(stack) == 0\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n"}
{"task_id": "valid/132", "completion": "\n    # Remove duplicates and sort the list\n    unique_fruits = sorted(set(fruit_list))\n    \n    # Join the sorted list into a single string\n    return ', '.join(unique_fruits)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i):\n            sublists.append(lst[j:i])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d\\.\\d'\n    return bool(re.search(pattern, string))\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, 'previous_migration_name'),  # Replace with the actual previous migration name\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=255),  # Adjust field type and parameters as needed\n            ),\n        ]\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    dataset_length = len(df)\n    forecast_period = math.ceil(dataset_length * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n"}
{"task_id": "valid/139", "completion": "\n    if items_per_page <= 0 or page_number <= 0:\n        return []\n\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n\n    return items[start_index:end_index]\n"}
{"task_id": "valid/140", "completion": "\n    result = []\n    carry = 0\n\n    # Iterate over the string representation of the number from the last digit to the first\n    for digit in reversed(n_str):\n        # Convert the character to an integer\n        num = int(digit)\n        # Double the digit and add the carry\n        doubled = num * 2 + carry\n        # Calculate the new digit and the new carry\n        result_digit = doubled % 10\n        carry = doubled // 10\n        # Append the result digit to the result list\n        result.append(str(result_digit))\n\n    # If there's a carry left after the last digit, add it\n    if carry > 0:\n        result.append(str(carry))\n\n    # Reverse the result to get the correct order and join to form the final string\n    return ''.join(reversed(result))\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        'home': (0.0, 0.0, 0.0),\n        'position1': (1.0, 0.5, 0.2),\n        'position2': (0.5, 1.0, 0.3),\n        'position3': (0.0, 1.5, 0.5),\n    }\n    \n    return presets.get(preset_name, (0.0, 0.0, 0.0))\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1) & set(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n    # Configuration for allowing multiple answers\n    if allow_multiple_answer:\n        answer_type = \"multiple\"\n    else:\n        answer_type = \"single\"\n\n    # Configuration for zoom level\n    if zoom_level < 1:\n        zoom_level = 1\n    elif zoom_level > 5:\n        zoom_level = 5\n\n    return {\n        \"answer_type\": answer_type,\n        \"zoom_level\": zoom_level\n    }\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n"}
{"task_id": "valid/145", "completion": "\n    vowels = \"aeiouAEIOU\"\n    modified_sentence = ''.join(char for char in sentence if char not in vowels)\n    return modified_sentence\n"}
{"task_id": "valid/146", "completion": "\n    def is_alpha(key):\n        return all(c.isalpha() for c in key)\n\n    def merge_dicts(dict1, dict2):\n        merged = {}\n        for key in dict1:\n            if is_alpha(key):\n                merged[key] = dict1[key]\n        for key in dict2:\n            if is_alpha(key):\n                merged[key] = dict2[key]\n        return merged\n\n    def merge_nested(dict1, dict2):\n        merged = merge_dicts(dict1, dict2)\n        for key in merged:\n            if isinstance(merged[key], dict):\n                merged[key] = merge_nested(dict1.get(key, {}), dict2.get(key, {}))\n        return merged\n\n    merged_object = merge_nested(a, b)\n    sorted_keys = sorted(merged_object.keys())\n    return {key: merged_object[key] for key in sorted_keys}\n"}
{"task_id": "valid/147", "completion": "\n    try:\n        max_value = float('-inf')\n        for key, value in d.items():\n            if isinstance(value, dict):\n                nested_max = find_max_in_dict(value)\n                if nested_max > max_value:\n                    max_value = nested_max\n            elif isinstance(value, (int, float)):\n                if value > max_value:\n                    max_value = value\n        return max_value if max_value != float('-inf') else None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n"}
{"task_id": "valid/148", "completion": "\n    if key in dict:\n        values = dict[key]\n        return sum(values) / len(values)\n    else:\n        return None\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    if n <= 0:\n        return []\n    \n    return sorted(heapq.nsmallest(n, lst))\n"}
{"task_id": "valid/151", "completion": "\n    return x > 0 and (sqrt(1 + 8 * x) - 1) % 2 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
