{"task_id": "valid/0", "completion": "\n    # Import necessary libraries\n    import pandas as pd\n    from sklearn.feature_extraction.text import TfidfVectorizer\n    from sklearn.naive_bayes import MultinomialNB\n    from sklearn.pipeline import make_pipeline\n\n    # Load the data\n    data = pd.read_csv('data.csv')\n\n    # Split the data into training and testing sets\n    from sklearn.model_selection import train_test_split\n    X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)\n\n    # Create a pipeline that transforms the text data into TF-IDF vectors and then applies the Naive Bayes classifier\n    model = make_pipeline(TfidfVectorizer(), MultinomialNB())\n\n    # Train the model with the training data\n    model.fit(X_train, y_train)\n\n    # Predict the labels of the test data\n    labels = model.predict(X_test)\n\n    # Return the predicted labels\n    return labels\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\n\ninstruments = ['Guitar', 'Piano', 'Drums', 'Trumpet', 'Flute', 'Violin', 'Saxophone', 'Cello']"}
{"task_id": "valid/4", "completion": "\n    try:\n        return json.loads(json_string)\n    except ValueError:\n        raise ValueError(\"Invalid JSON string\")\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    if n % 5 == 0 and sum(int(i) for i in str(n)) % 3 == 0:\n        return True\n    return False\n\n"}
{"task_id": "valid/6", "completion": "\n    return log(n, base)\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        parsed = json.loads(json_str)\n        pprint.pprint(parsed)\n    except ValueError as e:\n        print(e)\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n\n"}
{"task_id": "valid/9", "completion": "\n    for key in values:\n        template = template.replace('{{' + key + '}}', str(values[key]))\n    return template\n\n"}
{"task_id": "valid/10", "completion": "\n    return len(set(string)) == len(string)\n\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%y')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%y')\n"}
{"task_id": "valid/12", "completion": "\n    if len(text) > 10:\n        return \"Text is too long\"\n    else:\n        return \" \".join(text.split())\n\n"}
{"task_id": "valid/13", "completion": "\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    translator = str.maketrans('', '', string.punctuation)\n    text = text.translate(translator)\n\n    # Remove digits\n    translator = str.maketrans('', '', string.digits)\n    text = text.translate(translator)\n\n    # Remove extra spaces\n    while '  ' in text:\n        text = text.replace('  ', ' ')\n\n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    return bool(re.search(r'\\b(' + word1 + r'|' + word2 + r')\\b', text))\n"}
{"task_id": "valid/15", "completion": "\n    layer_sums = [sum(sum(layer) for layer in array)]\n    return layer_sums\n\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('--'):\n            line = line.strip('--').strip()\n            if 'tabstop' in line:\n                settings['tabstop'] = int(line.split('=')[1])\n            elif 'expandtab' in line:\n                settings['expandtab'] = line.split('=')[1] == 'true'\n            elif 'shiftwidth' in line:\n                settings['shiftwidth'] = int(line.split('=')[1])\n            elif 'softtabstop' in line:\n                settings['softtabstop'] = int(line.split('=')[1])\n    return settings\n\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 0\n    else:\n        return 1 + find_digits_count(num // 10)\n\n"}
{"task_id": "valid/19", "completion": "\n    list1.reverse()\n    list2.reverse()\n    combined_list = list1 + list2\n    combined_list.sort()\n    return combined_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n\n"}
{"task_id": "valid/22", "completion": "\n    return dictionary.get(\"name\")\n\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {k: struct_to_dict(v) for k, v in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(v) for v in struct]\n    else:\n        return struct\n\n"}
{"task_id": "valid/24", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    if is_palindrome(num):\n        return num\n\n    lower = num - 1\n    while not is_palindrome(lower):\n        lower -= 1\n\n    upper = num + 1\n    while not is_palindrome(upper):\n        upper += 1\n\n    if abs(num - lower) <= abs(num - upper):\n        return lower\n    else:\n        return upper\n\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n\n"}
{"task_id": "valid/26", "completion": "\n    rows = len(matrix)\n    cols = len(matrix[0])\n    diagonal_sum = 0\n    is_square = rows == cols\n\n    for i in range(min(rows, cols)):\n        diagonal_sum += matrix[i][i]\n\n    return rows, cols, diagonal_sum, is_square\n\n"}
{"task_id": "valid/27", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c for c in s if c.isalpha()).lower()\n\n"}
{"task_id": "valid/29", "completion": "\n    return min(lst)\n\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data:\n        return json_data[key] == value\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Initialize an empty list to store the HTML code\n    html_code = []\n\n    # Calculate the number of rows\n    num_rows = len(buttons) // num_columns\n    if len(buttons) % num_columns != 0:\n        num_rows += 1\n\n    # Generate the HTML code\n    html_code.append('<table>')\n    for i in range(num_rows):\n        html_code.append('<tr>')\n        for j in range(num_columns):\n            index = i * num_columns + j\n            if index < len(buttons):\n                button_name, button_action = buttons[index]\n                html_code.append(f'<td><button onclick=\"{button_action}\">{button_name}</button></td>')\n        html_code.append('</tr>')\n    html_code.append('</table>')\n\n    # Return the HTML code as a string\n    return '\\n'.join(html_code)\n\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet) - 1):\n        if alphabet[i] not in s:\n            return False\n    return True\n\n"}
{"task_id": "valid/33", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n\n"}
{"task_id": "valid/34", "completion": "\n    import re\n    return sum(int(i) for i in re.findall(r'\\d+', ts))\n\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    sum = 0\n    for i in arr:\n        if isinstance(i, (int, float)):\n            sum += i\n        else:\n            raise ValueError(\"Array should only contain numerical values\")\n    return sum\n\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted([neighborhood['name'] for neighborhood in neighborhoods])\n    return sorted_neighborhoods\n"}
{"task_id": "valid/38", "completion": "\n    arr = sorted(arr)\n    l = 0\n    r = n - 1\n    min_sum = 99999999999\n    min_l = l\n    min_r = r\n    while l < r:\n        sum = arr[l] + arr[r]\n        if abs(sum) < abs(min_sum):\n            min_sum = sum\n            min_l = l\n            min_r = r\n        if sum < 0:\n            l += 1\n        else:\n            r -= 1\n    return (arr[min_l], arr[min_r])\n\n\narr = [1, 60, -10, 70, -80, 85]\nn = len(arr)"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for parenthese in p:\n        if parenthese == '(':\n            stack.append(parenthese)\n        elif parenthese == ')':\n            if not stack or stack[-1] != '(':\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "valid/40", "completion": "\n    # Initialize an empty dictionary to store the vote counts\n    vote_counts = {}\n\n    # Loop through the list of votes\n    for vote in votes:\n        # Extract the candidate name and the number of votes\n        cand_name, num_votes = vote\n\n        # If the candidate is not in the dictionary, add them with their vote count\n        if cand_name not in vote_counts:\n            vote_counts[cand_name] = num_votes\n        # If the candidate is already in the dictionary, add the new vote count to their existing count\n        else:\n            vote_counts[cand_name] += num_votes\n\n    # Calculate the total number of votes\n    total_votes = sum(vote_counts.values())\n\n    # Initialize an empty dictionary to store the percentage of votes for each candidate\n    vote_percentages = {}\n\n    # Loop through the vote counts dictionary\n    for cand_name, num_votes in vote_counts.items():\n        # Calculate the percentage of votes for the candidate and round to two decimal places\n        vote_percentage = round(num_votes / total_votes * 100, 2)\n\n        # Add the candidate and their percentage of votes to the vote percentages dictionary\n        vote_percentages[cand_name] = vote_percentage\n\n    # Return the vote counts and percentages\n    return vote_counts, vote_percentages\n\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        if len(date_string) == 7:\n            day = int(date_string[:2])\n            month = int(date_string[2:4])\n            year = int(date_string[4:])\n            date_object = datetime(year, month, day)\n        elif len(date_string) == 8:\n            day = int(date_string[:1])\n            month = int(date_string[1:3])\n            year = int(date_string[3:])\n            date_object = datetime(year, month, day)\n        else:\n            raise ValueError\n\n        return date_object.strftime('%B %d %Y')\n\n    except ValueError:\n        return \"Invalid date\"\n\n"}
{"task_id": "valid/42", "completion": "\n    allowed_extensions = ['.txt', '.doc', '.docx', '.pdf', '.jpg', '.png', '.gif', '.bmp', '.jpeg']\n    if oldname.split('.')[-1] in allowed_extensions:\n        if newname.split('.')[-1] in allowed_extensions:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n"}
{"task_id": "valid/43", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_numeric(n):\n        return isinstance(n, (int, float))\n\n    def process(item):\n        if isinstance(item, tuple):\n            return tuple(filter(process, item))\n        elif is_numeric(item) and is_even(item):\n            return item\n        elif isinstance(item, str) and item.isdigit() and is_even(int(item)):\n            return item\n\n    return process(lst)\n\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\n"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for character in string:\n        if character == specific_character:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/46", "completion": "\n    histogram_data['accuracy'].append(accs)\n    histogram_data['generation'].append(generation)\n    return histogram_data\n\n"}
{"task_id": "valid/47", "completion": "\n    return re.fullmatch(r'\\w{5}', string) is not None\n\n"}
{"task_id": "valid/48", "completion": "\n    unique_languages = set()\n    for classifier in classifiers:\n        if \" :: \".join(classifier.split(\" :: \")[2:]) not in unique_languages:\n            unique_languages.add(\" :: \".join(classifier.split(\" :: \")[2:]))\n    return len(unique_languages)\n\n"}
{"task_id": "valid/49", "completion": "\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    return count_dict\n\n"}
{"task_id": "valid/50", "completion": "\n    url_to_view = {\n        r'^$': 'home',\n        r'^videos/$': 'videos',\n    }\n\n    for pattern, view in url_to_view.items():\n        if re.match(pattern, url):\n            return view\n\n    return None\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello, \"\n    sentence = \"world!\"\n    conc = string + sentence\n    return conc\n"}
{"task_id": "valid/53", "completion": "\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.append(s[i:j])\n    return substrings\n\n"}
{"task_id": "valid/54", "completion": "\n    sum_price = 0\n    for dict in list_of_dicts:\n        for key in dict:\n            if key.startswith(\"price\"):\n                sum_price += float(dict[key])\n    return sum_price\n\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    list2 = [value for value in list2 if value not in intersection]\n    return intersection, list2\n\n\nlist1 = [1, 2, 3]\nlist2 = [2, 3, 4, 5]"}
{"task_id": "valid/56", "completion": "\n    if request_method == \"GET\":\n        return api_advisor_view\n    elif request_method == \"POST\":\n        return api_advisor_post\n    else:\n        return \"Invalid request method\"\n\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    import os\n    config_files = {}\n    for file_path in file_paths:\n        dir_name = os.path.dirname(file_path)\n        if dir_name not in config_files:\n            config_files[dir_name] = [file_path]\n        else:\n            config_files[dir_name].append(file_path)\n    return config_files\n\n\nfile_paths = [\"/etc/nginx/nginx.conf\", \"/etc/nginx/sites-available/example.com\", \"/etc/apache2/apache2.conf\", \"/etc/apache2/sites-available/example.com\"]"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n\n"}
{"task_id": "valid/61", "completion": "\n    timeDifference = timeEnd - timeStart\n    return timeDifference\n\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return False\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n\n    if array[mid] > target:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n    return binary_search_recursive(array, target, mid + 1, end)\n\n"}
{"task_id": "valid/63", "completion": "\n    if color == \"WHITE\":\n        return \"RED\"\n    elif color == \"RED\":\n        return \"BLUE\"\n    elif color == \"BLUE\":\n        return \"WHITE\"\n    else:\n        return \"Invalid color\"\n\n"}
{"task_id": "valid/64", "completion": "\n    return [x + 1 for x in list]\n\n"}
{"task_id": "valid/65", "completion": "\n    for i in range(start, end+1):\n        if i**0.5 == int(i**0.5):\n            return True\n    return False\n\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if word == target:\n            return True\n    return False\n\n"}
{"task_id": "valid/67", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/68", "completion": "\n    for key in dict.keys():\n        print(key)\n\n\nfruits = {'apple': 5, 'banana': 3, 'orange': 2}"}
{"task_id": "valid/69", "completion": "\n    string_to_concat = \"Hello\"\n    phrase = \"World\"\n    conc_string = f\"{string_to_concat} {phrase}\"\n    return conc_string\n\n"}
{"task_id": "valid/70", "completion": "\n    special_characters = re.compile('[^A-Za-z0-9 ]')\n    result = []\n    for string in strings:\n        string = special_characters.sub('', string)\n        string = string.capitalize()\n        result.append(string)\n    return result\n\nstrings = ['hello', 'world', '@test', '$string', 'another_string']"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n\n"}
{"task_id": "valid/72", "completion": "\n    start_tag = \"<b>\"\n    end_tag = \"</b>\"\n    start = 0\n    end = 0\n    bold_texts = []\n\n    while start != -1 and end != -1:\n        start = html_code.find(start_tag, end)\n        if start != -1:\n            end = html_code.find(end_tag, start + len(start_tag))\n            if end != -1:\n                bold_texts.append(html_code[start + len(start_tag):end])\n                end += len(end_tag)\n\n    return bold_texts\n\n\nhtml_code = \"<b>Hello</b> <b>World</b>\""}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"cola\": 1.0,\n        \"chips\": 0.5,\n        \"candy\": 0.65\n    }\n\n    # Define the initial stock of each item\n    stock = {\n        \"cola\": 10,\n        \"chips\": 10,\n        \"candy\": 10\n    }\n\n    # Check if the item is in the list\n    if item not in items:\n        return \"Item not available\"\n\n    # Check if the money inserted is enough\n    if money_inserted < items[item]:\n        return \"Insufficient money\"\n\n    # Check if the item is in stock\n    if stock[item] <= 0:\n        return \"Item out of stock\"\n\n    # Calculate the change\n    change = money_inserted - items[item]\n\n    # Update the stock\n    stock[item] -= 1\n\n    return f\"Enjoy your {item}!\\nYour change is ${change:.2f}\"\n\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n"}
{"task_id": "valid/75", "completion": "\n    return list.count(target)\n"}
{"task_id": "valid/76", "completion": "\n    message_bytes = string.encode('ascii')\n    base64_bytes = base64.b64encode(message_bytes)\n    base64_message = base64_bytes.decode('ascii')\n\n    return base64_message\n"}
{"task_id": "valid/77", "completion": "\n    return [i for i, x in enumerate(vector) if x != 0]\n\n"}
{"task_id": "valid/78", "completion": "\n\n    Design a function assigns a specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = 10\n\n    # Validate the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function assigns a specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = [1, 2, 3, 4, 5]\n\n    # Validate the variable\n    if isinstance(my_var, list):\n        print(\"The variable is a list.\")\n    else:\n        print(\"The variable is not a list.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function assigns a specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n    # Validate the variable\n    if isinstance(my_var, dict):\n        print(\"The variable is a dictionary.\")\n    else:\n        print(\"The variable is not a dictionary.\")\n\nassign_and_validate()def assign_and_validate():\n    \"\"\"\n    Design a function assigns a specific a variable and valid it.\n    \"\"\"\n    # Assign a variable\n    my_var = (1, 2, 3, 4, 5)\n\n    # Validate the variable\n    if isinstance(my_var, tuple):\n        print(\"The variable is a tuple.\")\n    else:\n        print(\"The variable is not a tuple.\")\n\nassign_and_validate()def assign_and"}
{"task_id": "valid/79", "completion": "\n    return ''.join(random.sample(word, len(word)))\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, bool):\n        return \"boolean\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, tuple):\n        return \"tuple\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    elif isinstance(element, set):\n        return \"set\"\n    else:\n        return \"unknown\"\n\n"}
{"task_id": "valid/81", "completion": "\n    if len(arr) < 2:\n        return arr\n\n    merged = [arr[0]]\n\n    for i in range(1, len(arr)):\n        if arr[i] != merged[-1]:\n            merged.append(arr[i])\n\n    return merged\n\n"}
{"task_id": "valid/82", "completion": "\n    tokens = re.findall(r'\\w+', text.lower())\n    return tokens\n\ntext = \"This is a sample text for tokenization\""}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    average = sum(divisible_numbers) / len(divisible_numbers)\n    minimum = min(divisible_numbers)\n    maximum = max(divisible_numbers)\n    unique_numbers = set(divisible_numbers)\n    occurrences = {num: divisible_numbers.count(num) for num in unique_numbers}\n\n    print(f\"Average: {average}\")\n    print(f\"Minimum: {minimum}\")\n    print(f\"Maximum: {maximum}\")\n    print(\"Occurrences:\")\n    for num, count in occurrences.items():\n        print(f\"{num}: {count}\")\n\n\nnumbers = [3, 7, 10, 21, 28, 35, 70, 140]\nfind_divisible_numbers(numbers)\n<jupyter_output>\nAverage: 105.0\nMinimum: 21\nMaximum: 140\nOccurrences:\n21: 1\n35: 1\n70: 1\n140: 1\n<jupyter_text>\nThe function find_divisible_numbers takes a list of integers as input. It first creates a list of numbers that are divisible by both 3 and 7 using a list comprehension. It then calculates the average of these numbers, finds the minimum and maximum values, and creates a set of unique numbers. It then creates a dictionary where the keys are the unique numbers and the values are the number of occurrences of each number in the list. Finally, it prints the average, minimum, maximum, and the occurrences of each unique number.\n<jupyter_code>\nnumbers = [3, 7, 10, 21, 28, 35, 70, 140]\nfind_divisible_numbers(numbers)\n<jupyter_output>\nAverage: 105.0\nMinimum:"}
{"task_id": "valid/84", "completion": "\n    sentence = sentence.lower()\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    highest_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == highest_frequency:\n            return word\n\n"}
{"task_id": "valid/85", "completion": "\n    euler = 0\n    for i in range(100):\n        euler += 1 / math.factorial(i)\n    return round(euler, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n\n\nnumbers = [1, 2, 3, 4, 5]\naverage, sum_numbers = getAverageAndSum(numbers)"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"Time series is empty\")\n    min_value = float('inf')\n    max_value = float('-inf')\n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"Time series contains nonnumeric values\")\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return min_value, max_value\n\n"}
{"task_id": "valid/88", "completion": "\n    related_articles_count = {}\n    for article in encyclopedia:\n        related_articles_count[article] = len(encyclopedia[article])\n    return related_articles_count\n\n"}
{"task_id": "valid/89", "completion": "\n    largest_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] > lst[largest_index]:\n            largest_index = i\n    return largest_index\n\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n\n"}
{"task_id": "valid/91", "completion": "\n    def _dict_to_xml(dictionary, root):\n        for key, value in dictionary.items():\n            if isinstance(value, dict):\n                child = Element(key)\n                root.append(child)\n                _dict_to_xml(value, child)\n            else:\n                child = Element(key)\n                child.text = str(value)\n                root.append(child)\n        return root\n\n    root = Element('data')\n    _dict_to_xml(dictionary, root)\n    return tostring(root)\n"}
{"task_id": "valid/92", "completion": "\n    row = 0\n    col = len(matrix[0]) - 1\n\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > target:\n            col -= 1\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            return [row, col]\n\n    return [-1, -1]\n\n"}
{"task_id": "valid/93", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    average_odd = sum_odd / count_odd if count_odd != 0 else 0\n    return sum_odd, average_odd\n\n"}
{"task_id": "valid/94", "completion": "\n    lst.sort(reverse=True)\n    if n <= len(lst):\n        return lst[n-1]\n    else:\n        return None\n\n\nlst = [9, 4, 7, 2, 1, 5]\nn = 3"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a ^ set_b\n    return exclusive_elements\n\n\nset_a = {1, 2, 3, 4, 5}\nset_b = {4, 5, 6, 7, 8}"}
{"task_id": "valid/97", "completion": "\n    description = \"**Discord Music Bot**\\n\\n\"\n    description += \"This bot is designed to manage and play music in a Discord server. It provides a web app for managing personal play and server settings. The bot also provides commands and provides help information for each command.\\n\\n\"\n    description += \"**Commands:**\\n\"\n    for command, info in mapping.items():\n        description += f\"**{command}** - {info['description']}\\n\"\n    return description\n\n\nmapping = {\n    \"play\": {\n        \"description\": \"Plays a song from a given URL or search term.\",\n    },\n    \"pause\": {\n        \"description\": \"Pauses the current song.\",\n    },\n    \"resume\": {\n        \"description\": \"Resumes the current song.\",\n    },\n    \"stop\": {\n        \"description\": \"Stops the current song and clears the queue.\",\n    },\n    \"skip\": {\n        \"description\": \"Skips the current song.\",\n    },\n    \"queue\": {\n        \"description\": \"Shows the current queue of songs.\",\n    },\n    \"settings\": {\n        \"description\": \"Manages personal play and server settings.\",\n    },\n}\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return '-' + dec_to_ternary(-n)\n    elif n == 0:\n        return '0'\n    else:\n        res = ''\n        while n > 0:\n            res = str(n % 3) + res\n            n //= 3\n        return res\n\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n\n"}
{"task_id": "valid/100", "completion": "\n    if age <= 12:\n        return \"Child\"\n    elif 13 <= age <= 19:\n        return \"Teen\"\n    elif 20 <= age <= 59:\n        return \"Adult\"\n    else:\n        return \"Senior Citizen\"\n\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n\n\nnumerical_grade = int(input(\"Enter numerical grade: \"))\nletter_grade, gpa = calculate_grade_and_gpa(numerical_grade)"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item.price * item.quantity\n    return total\n\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for palindrome in palindrome_tuples:\n        count = 0\n        for letter in palindrome:\n            if letter in vowels:\n                count += 1\n        result[palindrome] = count\n    return result\n\n"}
{"task_id": "valid/104", "completion": "\n    # Your code here\n    return s.replace(' ', '')\n\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty hash set\n    s = set()\n\n    # Traverse through the given array\n    for i in range(0, len(arr)):\n        if arr[i] in s:\n            return True\n        s.add(arr[i])\n\n    return False\n\n"}
{"task_id": "valid/106", "completion": "\n    from operator import itemgetter\n\n    def extract_version_number(version):\n        return int(version.split('_')[0])\n\n    def extract_package_name(dependency):\n        return dependency[0]\n\n    def extract_version_date(version):\n        return version.split('_')[1]\n\n    def extract_version_time(version):\n        return version.split('_')[2]\n\n    def compare_versions(version1, version2):\n        if extract_version_number(version1) > extract_version_number(version2):\n            return 1\n        elif extract_version_number(version1) < extract_version_number(version2):\n            return -1\n        else:\n            if extract_version_date(version1) > extract_version_date(version2):\n                return 1\n            elif extract_version_date(version1) < extract_version_date(version2):\n                return -1\n            else:\n                if extract_version_time(version1) > extract_version_time(version2):\n                    return 1\n                elif extract_version_time(version1) < extract_version_time(version2):\n                    return -1\n                else:\n                    return 0\n\n    result = {}\n    for dependency in dependencies:\n        package_name = extract_package_name(dependency)\n        if package_name in result:\n            if compare_versions(dependency[1], result[package_name][1]) > 0:\n                result[package_name] = dependency\n        else:\n            result[package_name] = dependency\n\n    return list(result.values())\n\n"}
{"task_id": "valid/107", "completion": "\n    causes_dict = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in causes_dict:\n            causes_dict[action] = []\n        causes_dict[action].append(result)\n    return causes_dict\n\n\ncauses = [\"kill zombie\", \"shoot gun\", \"drive car\", \"build dom\", \"burn fire\", \"drive car\", \"kill zombie\", \"build dom\", \"shoot gun\"]"}
{"task_id": "valid/108", "completion": "\n    code_name = name.replace(\" \", \"-\").lower()\n    return code_name\n\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = ''''''\n    for char in string:\n        if char not in punctuations:\n            punctuations = punctuations + char\n    return punctuations\n"}
{"task_id": "valid/111", "completion": "\n    try:\n        return [i ** exp for i in num_list]\n    except TypeError:\n        print(\"Error: Both inputs should be of type list and integer respectively\")\n\n"}
{"task_id": "valid/112", "completion": "\n    for row in grid:\n        print(min(row))\n\n"}
{"task_id": "valid/113", "completion": "\n    if n <= 0:\n        return\n    if current_num % 2 == 0:\n        print(\"Thank\")\n    print_thank_you(n-1, current_num+1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    max_count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n\n"}
{"task_id": "valid/115", "completion": "\n    digits = []\n    while num:\n        digits.append(num % base)\n        num //= base\n    return len(set(digits)) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    if len(s) == 0:\n        return s\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: my_app [OPTIONS]\\n\\nOptions:\\n\"\n    for option in options:\n        help_message += f\"  {option[0]}\\t{option[1]}\\n\"\n    return help_message\n\n\noptions = [(\"-v\", \"Verbose mode\"), (\"-o FILE\", \"Output to FILE\"), (\"-d\", \"Run in debug mode\")]"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in Val:\n        if i == Val:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    return all(c in vowels for c in s)\n\n"}
{"task_id": "valid/122", "completion": "\n    count = start = 0\n    while True:\n        start = sequence.find(subsequence, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n\nsequence = \"Please find number occurrences this string\"\nsubsequence = \"string\""}
{"task_id": "valid/123", "completion": "\n    return h // t\n\n"}
{"task_id": "valid/124", "completion": "\n    sum_odd_numbers = 0\n    for i in input_list:\n        if i % 2 != 0:\n            sum_odd_numbers += i\n    return sum_odd_numbers\n\n"}
{"task_id": "valid/125", "completion": "\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    count = 0\n    for char in string:\n        if char in consonants:\n            count += 1\n    return count\n\n"}
{"task_id": "valid/126", "completion": "\n    # Initialize variables\n    num_electrons = 0\n    num_doping_levels = 0\n\n    # Calculate number of electrons based on energy values\n    for energy in grid_energies:\n        num_electrons += energy / 1000\n\n    # Adjust number of doping levels\n    for ado in ados:\n        num_doping_levels += ado * 1000\n\n    # Calculate density of states (DOS)\n    dos_grid = [0] * dos_grid_size\n    for i in range(int(num_electrons)):\n        dos_grid[i % dos_grid_size] += 1\n\n    # Return the DOS grid\n    return dos_grid\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    i = 1\n    while i < len(arr):\n        if i + 1 < len(arr):\n            arr[i + 1], arr[i] = arr[i], arr[i + 1]\n        i += 2\n    return arr\n\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    parentheses = {'(': ')', '{': '}', '[': ']'}\n\n    for char in string:\n        if char in parentheses:\n            stack.append(char)\n        elif len(stack) == 0 or parentheses[stack.pop()] != char:\n            return False\n    return len(stack) == 0\n\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for i in lst:\n        if i not in unique_elements:\n            unique_elements.append(i)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements\n\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst) + 1):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.fullmatch(pattern, string))\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            (app_name, '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=200),\n            ),\n        ]\n\n    return Migration\n\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1).intersection(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = items_per_page * (page_number - 1)\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n\nitems = [\"item1\", \"item2\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nitems_per_page = 3\npage_number = 2\n"}
{"task_id": "valid/140", "completion": "\n    res = []\n    carry = 0\n    for i in range(len(n_str) - 1, -1, -1):\n        temp = carry\n        temp += 2 if i < len(n_str) else 0\n        temp += int(n_str[i]) if i < len(n_str) else 0\n        res.append(str(temp % 10))\n        carry = temp // 10\n    if carry != 0:\n        res.append(str(carry))\n    return ''.join(res[::-1])\n\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"preset1\": (1.0, 1.0, 1.0),\n        \"preset2\": (-1.0, -1.0, -1.0),\n        \"preset3\": (2.0, 2.0, 2.0),\n        \"preset4\": (-2.0, -2.0, -2.0),\n    }\n\n    return presets.get(preset_name, None)\n\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(list2)\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n\n"}
{"task_id": "valid/143", "completion": "\n    if allow_multiple_answer:\n        print(\"Allow multiple answers\")\n    else:\n        print(\"Disallow multiple answers\")\n\n    if zoom_level > 0:\n        print(f\"Zoom level is set to {zoom_level}\")\n    else:\n        print(\"Zoom level is not set\")\n"}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    new_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            new_sentence += char\n    return new_sentence\n\n"}
{"task_id": "valid/146", "completion": "\n    def is_alph(s):\n        return all(c.isalpha() for c in s)\n\n    def merge(a, b, path=None):\n        if path is None:\n            path = []\n        for k, v in b.items():\n            if k not in a:\n                a[k] = v\n            elif isinstance(v, dict):\n                if not isinstance(a[k], dict):\n                    a[k] = {}\n                merge(a[k], v, path + [k])\n            elif isinstance(a[k], dict):\n                a[k] = {}\n                merge(a[k], v, path + [k])\n            else:\n                a[k] = v\n        return a\n\n    merged = merge({}, a)\n    merge(merged, b)\n\n    return {k: v for k, v in sorted(merged.items()) if is_alph(k)}\n\n\na = {'a 1': 1, 'b 2': 2, 'nested': {'x 5': 5, 'x 6': 6}}\nb = {'bc': 3, 'dny': 7}"}
{"task_id": "valid/147", "completion": "\n    try:\n        return max(d.values())\n    except ValueError:\n        return \"Empty dictionary\"\n    except TypeError:\n        return \"Input is not a dictionary\"\n\n"}
{"task_id": "valid/148", "completion": "\n    grades = dict[key]\n    avg = sum(grades) / len(grades)\n    return avg\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 2 == 0 and gcd(x, 10) == 1 and sqrt(x) % 1 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n"}
