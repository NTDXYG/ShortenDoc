{"task_id": "valid/0", "completion": "\n    # Define rules for classification\n    rules = {\n        'positive': ['great', 'amazing', 'excellent', 'fantastic', 'wonderful'],\n        'negative': ['terrible', 'awful', 'poor', 'horrible', 'bad']\n    }\n\n    # Initialize sentiment score\n    sentiment_score = 0\n\n    # Check each word in the text\n    for word in text.split():\n        # Increase score for positive words\n        if word.lower() in rules['positive']:\n            sentiment_score += 1\n        # Decrease score for negative words\n        elif word.lower() in rules['negative']:\n            sentiment_score -= 1\n\n    # Determine sentiment based on score\n    if sentiment_score > 0:\n        return 'positive'\n    elif sentiment_score < 0:\n        return 'negative'\n    else:\n        return 'neutral'\n"}
{"task_id": "valid/1", "completion": "\n    return frozenset(s)\n"}
{"task_id": "valid/2", "completion": "\n    return num1 ^ num2\n"}
{"task_id": "valid/3", "completion": "\n    instruments.sort(reverse=True)\n    return instruments\n\ninstruments = [\"Violin\", \"Guitar\", \"Piano\", \"Flute\", \"Drums\"]"}
{"task_id": "valid/4", "completion": "\n    try:\n        data = json.loads(json_string)\n        if not isinstance(data, list):\n            raise ValueError(\"Input is not a valid JSON list\")\n        return data\n    except json.JSONDecodeError:\n        raise ValueError(\"Input is not a valid JSON string\")\n\n"}
{"task_id": "valid/5", "completion": "\n    if not isinstance(n, int) or n < 0:\n        return False\n    sum_digits = sum(int(digit) for digit in str(n))\n    return n % 5 == 0 and sum_digits % 3 == 0\n"}
{"task_id": "valid/6", "completion": "\n    if base == 1:\n        return n if n == 1 else None\n    if base <= 0 or n <= 0:\n        return None\n    log_val = 1\n    while log_val < n:\n        log_val *= base\n    return log_val // base if log_val == n else None\n"}
{"task_id": "valid/7", "completion": "\n    try:\n        json_data = json.loads(json_str)\n        pprint.pprint(json_data)\n    except ValueError as e:\n        print(f\"Invalid JSON: {e}\")\n\n"}
{"task_id": "valid/8", "completion": "\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            return True\n    return False\n"}
{"task_id": "valid/9", "completion": "\n    for key, value in values.items():\n        template = template.replace(\"{{\" + key + \"}}\", value)\n    return template\n"}
{"task_id": "valid/10", "completion": "\n    # Create a set from the string to remove duplicates\n    unique_chars = set(string)\n    \n    # Compare the length of the set with the length of the string\n    if len(unique_chars) == len(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/11", "completion": "\n    date_object = datetime.strptime(date_string, '%Y')\n    new_date = date_object + timedelta(days=days)\n    return new_date.strftime('%Y')\n\n"}
{"task_id": "valid/12", "completion": "\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    \n    # Replace multiple spaces between words with a single space\n    text = ' '.join(text.split())\n    \n    return text\n"}
{"task_id": "valid/13", "completion": "\n    # Remove punctuation\n    text = text.translate(str.maketrans('', '', string.punctuation))\n    \n    # Convert to lowercase\n    text = text.lower()\n    \n    # Remove extra spaces\n    text = ' '.join(text.split())\n    \n    return text\n\n"}
{"task_id": "valid/14", "completion": "\n    pattern = r'\\b' + re.escape(word1) + r'\\b|\\b' + re.escape(word2) + r'\\b'\n    return bool(re.search(pattern, text))\n\n"}
{"task_id": "valid/15", "completion": "\n    return [sum(layer) for layer in array]\n"}
{"task_id": "valid/16", "completion": "\n    settings = {}\n    lines = comment.split('\\n')\n    for line in lines:\n        if line.startswith('#'):\n            line = line[1:].strip()\n            if 'tabstop' in line:\n                settings['tabstop'] = int(line.split('=')[1].strip())\n            elif 'expandtab' in line:\n                settings['expandtab'] = line.split('=')[1].strip() == 'true'\n            elif 'shiftwidth' in line:\n                settings['shiftwidth'] = int(line.split('=')[1].strip())\n            elif 'softtabstop' in line:\n                settings['softtabstop'] = int(line.split('=')[1].strip())\n    return settings\n"}
{"task_id": "valid/17", "completion": "\n    return sentence.split()\n"}
{"task_id": "valid/18", "completion": "\n    if num == 0:\n        return 1\n    count = 0\n    while num != 0:\n        num //= 10\n        count += 1\n    return count\n"}
{"task_id": "valid/19", "completion": "\n    # Reverse the elements of each list\n    list1 = list1[::-1]\n    list2 = list2[::-1]\n\n    # Combine the elements of the two lists\n    combined_list = list1 + list2\n\n    # Sort the combined list in ascending order\n    sorted_list = sorted(combined_list)\n\n    return sorted_list\n"}
{"task_id": "valid/20", "completion": "\n    return input_string.replace(old_word, new_word)\n"}
{"task_id": "valid/21", "completion": "\n    return z * z\n"}
{"task_id": "valid/22", "completion": "\n    try:\n        return dictionary[\"name\"]\n    except KeyError:\n        return None\n"}
{"task_id": "valid/23", "completion": "\n    if isinstance(struct, dict):\n        return {key: struct_to_dict(value) for key, value in struct.items()}\n    elif isinstance(struct, list):\n        return [struct_to_dict(item) for item in struct]\n    else:\n        return struct\n"}
{"task_id": "valid/24", "completion": "\n    num = int(num)\n    for i in range(num, num+2):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"}
{"task_id": "valid/25", "completion": "\n    return num ** 0.5\n"}
{"task_id": "valid/26", "completion": "\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in matrix):\n        return \"Input is not a valid matrix\"\n    \n    # Check if the matrix is square\n    rows = len(matrix)\n    cols = len(matrix[0])\n    if rows != cols:\n        return \"Matrix is not square\"\n    \n    # Calculate the number of rows and columns\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(matrix[i][i] for i in range(num_rows))\n    \n    # Return the properties of the matrix\n    return num_rows, num_cols, diagonal_sum, True\n"}
{"task_id": "valid/27", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/28", "completion": "\n    return ''.join(c.lower() for c in s if c.isalpha())\n"}
{"task_id": "valid/29", "completion": "\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n    return min_num\n"}
{"task_id": "valid/30", "completion": "\n    if isinstance(json_data, str):\n        json_data = json.loads(json_data)\n    if key in json_data and json_data[key] == value:\n        return True\n    return False\n\n"}
{"task_id": "valid/31", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/32", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(alphabet)):\n        if alphabet[i] not in s:\n            return False\n    return True\n"}
{"task_id": "valid/33", "completion": "\n    return a if a > b else b\n\n"}
{"task_id": "valid/34", "completion": "\n    numeric_substrings = [ts[i:j] for i in range(len(ts)) for j in range(i + 1, len(ts) + 1) if ts[i:j].isdigit()]\n    return sum(map(int, numeric_substrings))\n"}
{"task_id": "valid/35", "completion": "\n    return [word[:-1] + word[-1].upper() for word in words]\n"}
{"task_id": "valid/36", "completion": "\n    # Check if the array is empty\n    if not arr:\n        return \"The array is empty\"\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over the array\n    for num in arr:\n        # Check if the element is a number\n        if isinstance(num, (int, float)):\n            total_sum += num\n        else:\n            return \"The array contains non-numerical values\"\n    \n    return total_sum\n"}
{"task_id": "valid/37", "completion": "\n    neighborhoods = json.loads(json_data)\n    sorted_neighborhoods = sorted(neighborhoods, key=lambda x: x['name'])\n    return sorted_neighborhoods\n\n"}
{"task_id": "valid/38", "completion": "\n    # Initialize result as maximum possible\n    min_sum = float('inf')\n\n    # Fix the first element and find the minimum\n    # sum combination with the remaining elements\n    for i in range(n - 1):\n        curr_sum = arr[i]\n        min_idx = i + 1\n\n        # Compute the sum of the remaining elements\n        for j in range(i + 1, n):\n            curr_sum += arr[j]\n\n            # Update the result if the current sum is\n            # smaller\n            if min_sum > curr_sum:\n                min_sum = curr_sum\n                min_idx = j + 1\n\n    # Print the pair with minimum sum\n    print(\"The pair with the minimum absolute sum is\",\n          arr[min_idx - 1], \"and\", arr[min_idx])\n\n    return min_sum\n\n"}
{"task_id": "valid/39", "completion": "\n    stack = []\n    for char in p:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/40", "completion": "\n    # Check if the total number of votes is at least 100\n    if sum(votes) < 100:\n        return \"Error: Total number of votes must be at least 100\"\n    \n    # Create a dictionary to store the vote counts for each candidate\n    vote_counts = {}\n    \n    # Iterate through the votes and update the vote counts\n    for vote in votes:\n        cand_name = vote[0]\n        num_votes = vote[1]\n        \n        # Check if the candidate name is valid\n        if not isinstance(cand_name, str) or len(cand_name) > 10:\n            return \"Error: Invalid candidate name\"\n        \n        # Check if the number of votes is a positive integer not exceeding 1000\n        if not isinstance(num_votes, int) or num_votes < 1 or num_votes > 1000:\n            return \"Error: Invalid number of votes\"\n        \n        # Update the vote counts for the candidate\n        if cand_name in vote_counts:\n            vote_counts[cand_name] += num_votes\n        else:\n            vote_counts[cand_name] = num_votes\n    \n    # Calculate the percentage of votes each candidate received\n    total_votes = sum(vote_counts.values())\n    percentage_votes = {cand_name: (count / total_votes) * 100 for cand_name, count in vote_counts.items()}\n    \n    # Return the results\n    return percentage_votes\n"}
{"task_id": "valid/41", "completion": "\n    try:\n        # Check if the date string is in the correct format\n        if len(date_string) == 8 and date_string[2] == '-' and date_string[5] == '-':\n            day, month, year = date_string.split('-')\n        elif len(date_string) == 9 and date_string[2] == '-' and date_string[6] == '-':\n            day, month, year = date_string.split('-')\n        else:\n            raise ValueError(\"Invalid date format. Please use DD-MM-YYYY or DD-MMM-YYYY.\")\n\n        # Convert month from written to numeric\n        month_names = {\n            'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',\n            'May': '05', 'Jun': '06', 'Jul': '07', 'Aug': '08',\n            'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'\n        }\n        if month in month_names:\n            month = month_names[month]\n        else:\n            raise ValueError(\"Invalid month. Please use three-letter abbreviation.\")\n\n        # Validate the date\n        datetime(int(year), int(month), int(day))\n\n        # Format the date\n        formatted_date = datetime.strptime(date_string, '%d-%m-%Y').strftime('%B %d, %Y')\n        return formatted_date\n\n    except ValueError as e:\n        return str(e)\n\n"}
{"task_id": "valid/42", "completion": "\n    # Check if the new file name has a valid extension\n    if newname.endswith(allowed_type):\n        return True\n    else:\n        return False\n"}
{"task_id": "valid/43", "completion": "\n    result = []\n    for i in lst:\n        if isinstance(i, tuple):\n            result.append(remove_uneven(i))\n        elif isinstance(i, int) or isinstance(i, float):\n            if i % 2 == 0:\n                result.append(i)\n        elif isinstance(i, str):\n            if i.isdigit() and int(i) % 2 == 0:\n                result.append(i)\n    return tuple(result)\n"}
{"task_id": "valid/44", "completion": "\n    minutes = hours * 60\n    return minutes\n\nhours = 2\nminutes = hours_to_minutes(hours)"}
{"task_id": "valid/45", "completion": "\n    count = 0\n    for char in string:\n        if char == specific_character:\n            count += 1\n    return count\n"}
{"task_id": "valid/46", "completion": "\n    # hist = histogram_data.copy()\n    # hist['accuracy'].append((generation, accs))\n    # return hist\n\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/47", "completion": "\n    return bool(re.match(r'^[a-zA-Z0-9]{5}$', string))\n\n"}
{"task_id": "valid/48", "completion": "\n    pass\n\n"}
{"task_id": "valid/49", "completion": "\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n\n    # Iterate over the first array and count the instances of each number\n    for num in arr[0]:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create an empty list to store the count instances of each number in the second array\n    count_instances = []\n\n    # Iterate over the second array and append the count instances of each number to the list\n    for num in arr[1]:\n        if num in count_dict:\n            count_instances.append(count_dict[num])\n        else:\n            count_instances.append(0)\n\n    return count_instances\n"}
{"task_id": "valid/50", "completion": "\n    urlpatterns = [\n        re.compile(r'^videos/$', views.video_list),\n        re.compile(r'^videos/(?P<video_id>\\d+)/$', views.video_detail),\n    ]\n\n    for pattern in urlpatterns:\n        match = pattern.match(url)\n        if match:\n            return match.groupdict()\n\n    return None\n\n"}
{"task_id": "valid/51", "completion": "\n    list.insert(position, item)\n    return list\n"}
{"task_id": "valid/52", "completion": "\n    string = \"Hello\"\n    sentence = \"World\"\n    conc_string = string + \" \" + sentence\n    return conc_string\n"}
{"task_id": "valid/53", "completion": "\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n    return substrings\n"}
{"task_id": "valid/54", "completion": "\n    total_price = 0\n    for dict_list in list_of_dicts:\n        for dict_item in dict_list:\n            for key, value in dict_item.items():\n                if key.startswith(\"price\"):\n                    try:\n                        total_price += float(value)\n                    except ValueError:\n                        pass\n    return total_price\n"}
{"task_id": "valid/55", "completion": "\n    intersection = [value for value in list1 if value in list2]\n    for value in intersection:\n        list2.remove(value)\n    return intersection\n"}
{"task_id": "valid/56", "completion": "\n    if request_method == 'GET':\n        return api_advisor_view\n    elif request_method == 'POST':\n        return api_advisor_view\n    else:\n        return None\n"}
{"task_id": "valid/57", "completion": "\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be positive\")\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n"}
{"task_id": "valid/58", "completion": "\n    config_files = {\n        'database': [],\n        'network': [],\n        'system': [],\n        'other': []\n    }\n\n    for file_path in file_paths:\n        if 'database' in file_path:\n            config_files['database'].append(file_path)\n        elif 'network' in file_path:\n            config_files['network'].append(file_path)\n        elif 'system' in file_path:\n            config_files['system'].append(file_path)\n        else:\n            config_files['other'].append(file_path)\n\n    return config_files\n"}
{"task_id": "valid/59", "completion": "\n    numbers = [a, b, c, d, e]\n    numbers.sort()\n    return numbers[2]\n"}
{"task_id": "valid/60", "completion": "\n    return len(my_list) == len(set(my_list))\n"}
{"task_id": "valid/61", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/62", "completion": "\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search_recursive(array, target, mid + 1, end)\n    else:\n        return binary_search_recursive(array, target, start, mid - 1)\n\n"}
{"task_id": "valid/63", "completion": "\n    color_sequence = ['WHITE', 'RED', 'BLACK', 'WHITE']\n    current_index = color_sequence.index(color)\n    next_index = (current_index + 1) % len(color_sequence)\n    return color_sequence[next_index]\n"}
{"task_id": "valid/64", "completion": "\n    # Create a new list with incremented values\n    new_list = [i + 1 for i in list]\n    return new_list\n"}
{"task_id": "valid/65", "completion": "\n    for num in range(start, end + 1):\n        if num ** 0.5 == int(num ** 0.5):\n            return True\n    return False\n"}
{"task_id": "valid/66", "completion": "\n    for word in words:\n        if target in word:\n            return True\n    return False\n"}
{"task_id": "valid/67", "completion": "\n    words = sentence.split()\n    return words\n"}
{"task_id": "valid/68", "completion": "\n    print(\"The keys in the given dictionary:\")\n    for key in dict.keys():\n        print(key)\n"}
{"task_id": "valid/69", "completion": "\n    name = \"John\"\n    age = 30\n    conc_string = f\"My name is {name} and I am {age} years old.\"\n    return conc_string\n\n"}
{"task_id": "valid/70", "completion": "\n    def process_strings(strings):\n        result = []\n        for string in strings:\n            # Capitalize the string\n            capitalized_string = string.capitalize()\n            # Remove special characters\n            cleaned_string = re.sub(r'[^a-zA-Z0-9\\s]', '', capitalized_string)\n            result.append(cleaned_string)\n        return result\n    return process_strings\n"}
{"task_id": "valid/71", "completion": "\n    return string.index(char)\n"}
{"task_id": "valid/72", "completion": "\n    bold_text = []\n    i = 0\n    while i < len(html_code):\n        if html_code[i:i+6] == '<bold>':\n            start = i\n            i += 6\n            while i < len(html_code) and html_code[i:i+7] != '</bold>':\n                i += 1\n            if i < len(html_code):\n                bold_text.append(html_code[start:i+7])\n                i += 7\n        else:\n            i += 1\n    return bold_text\n"}
{"task_id": "valid/73", "completion": "\n    # Define the items and their prices\n    items = {\n        \"coke\": 1.50,\n        \"chips\": 1.00,\n        \"candy\": 0.75\n    }\n\n    # Check if the item is available\n    if item not in items:\n        return \"Item not available\"\n\n    # Check if the user has inserted enough money\n    if money_inserted < items[item]:\n        return \"Insufficient funds\"\n\n    # Calculate the change to return\n    change = money_inserted - items[item]\n\n    # Update the stock of the item\n    # For simplicity, we'll just print a message indicating the purchase\n    print(f\"Purchased {item} for ${items[item]}. Change returned: ${change}\")\n\n    return \"Purchase successful\"\n"}
{"task_id": "valid/74", "completion": "\n    merged_list = list1 + list2\n    unique_list = []\n    for item in merged_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n"}
{"task_id": "valid/75", "completion": "\n    count = 0\n    for i in list:\n        if i == target:\n            count += 1\n    return count\n"}
{"task_id": "valid/76", "completion": "\n    return base64.b64encode(string.encode()).decode()\n\n"}
{"task_id": "valid/77", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/78", "completion": "\n    # Assign a variable\n    my_var = 10\n\n    # Validate the variable\n    if isinstance(my_var, int):\n        print(\"The variable is an integer.\")\n    else:\n        print(\"The variable is not an integer.\")\n\n    # Return the variable\n    return my_var\n"}
{"task_id": "valid/79", "completion": "\n    letters = list(word)\n    random.shuffle(letters)\n    return ''.join(letters)\n\n"}
{"task_id": "valid/80", "completion": "\n    if isinstance(element, int):\n        return \"integer\"\n    elif isinstance(element, float):\n        return \"float\"\n    elif isinstance(element, str):\n        return \"string\"\n    elif isinstance(element, list):\n        return \"list\"\n    elif isinstance(element, dict):\n        return \"dictionary\"\n    else:\n        return \"unknown\"\n"}
{"task_id": "valid/81", "completion": "\n    if not arr:\n        return []\n\n    merged_arr = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] != merged_arr[-1]:\n            merged_arr.append(arr[i])\n    return merged_arr\n\n"}
{"task_id": "valid/82", "completion": "\n    # Tokenize text using regular expression\n    tokens = re.findall(r'\\b\\w+\\b', text)\n    return tokens\n\n"}
{"task_id": "valid/83", "completion": "\n    divisible_numbers = [num for num in numbers if num % 3 == 0 and num % 7 == 0]\n    if not divisible_numbers:\n        return \"No numbers divisible by both 3 and 7 found.\"\n    \n    average = sum(divisible_numbers) / len(divisible_numbers)\n    max_value = max(divisible_numbers)\n    min_value = min(divisible_numbers)\n    \n    number_counts = {}\n    for num in divisible_numbers:\n        if num in number_counts:\n            number_counts[num] += 1\n        else:\n            number_counts[num] = 1\n    \n    return f\"Average: {average}, Max: {max_value}, Min: {min_value}, Number Counts: {number_counts}\"\n"}
{"task_id": "valid/84", "completion": "\n    words = sentence.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    max_frequency = max(frequency.values())\n    for word, freq in frequency.items():\n        if freq == max_frequency:\n            return word\n"}
{"task_id": "valid/85", "completion": "\n    e = 0\n    for i in range(decimal_places):\n        e += 1 / math.factorial(i)\n    return round(e, decimal_places)\n\n"}
{"task_id": "valid/86", "completion": "\n    sum_numbers = sum(numbers)\n    average_numbers = sum_numbers / len(numbers)\n    return average_numbers, sum_numbers\n\n"}
{"task_id": "valid/87", "completion": "\n    if not time_series:\n        raise ValueError(\"The time series is empty.\")\n    \n    min_value = max_value = time_series[0]\n    \n    for value in time_series:\n        if not isinstance(value, (int, float)):\n            raise ValueError(\"The time series contains nonnumeric values.\")\n        if value < min_value:\n            min_value = value\n        elif value > max_value:\n            max_value = value\n    \n    return min_value, max_value\n"}
{"task_id": "valid/88", "completion": "\n    encyclopedia = {\n        \"Python\": [\"Introduction to Python\", \"Advanced Python\", \"Python Libraries\"],\n        \"JavaScript\": [\"Introduction to JavaScript\", \"Advanced JavaScript\", \"JavaScript Frameworks\"],\n        \"Java\": [\"Introduction to Java\", \"Advanced Java\", \"Java Collections\"]\n    }\n    related_articles_count = {}\n    for entry in encyclopedia:\n        related_articles_count[entry] = len(encyclopedia[entry])\n    return related_articles_count\n\nencyclopedia = {\n    \"Python\": [\"Introduction to Python\", \"Advanced Python\", \"Python Libraries\"],\n    \"JavaScript\": [\"Introduction to JavaScript\", \"Advanced JavaScript\", \"JavaScript Frameworks\"],\n    \"Java\": [\"Introduction to Java\", \"Advanced Java\", \"Java Collections\"]\n}\n"}
{"task_id": "valid/89", "completion": "\n    max_index = lst.index(max(lst))\n    return max_index\n"}
{"task_id": "valid/90", "completion": "\n    return bool(set(list1) & set(list2))\n"}
{"task_id": "valid/91", "completion": "\n    root = Element('data')\n    for key, value in dictionary.items():\n        child = Element(key)\n        child.text = str(value)\n        root.append(child)\n    return tostring(root, encoding='unicode')\n\n"}
{"task_id": "valid/92", "completion": "\n    if not matrix or not matrix[0]:\n        return False\n    \n    rows, cols = len(matrix), len(matrix[0])\n    row, col = 0, cols - 1\n    \n    while row < rows and col >= 0:\n        if matrix[row][col] == target:\n            return True\n        elif matrix[row][col] < target:\n            row += 1\n        else:\n            col -= 1\n    \n    return False\n"}
{"task_id": "valid/93", "completion": "\n    odd_sum = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 != 0:\n            odd_sum += num\n            odd_count += 1\n    if odd_count == 0:\n        return 0\n    else:\n        return odd_sum / odd_count\n"}
{"task_id": "valid/94", "completion": "\n    if n > len(lst) or n < 1:\n        return None\n    lst.sort(reverse=True)\n    return lst[n-1]\n"}
{"task_id": "valid/95", "completion": "\n    return sum(lst)\n\n"}
{"task_id": "valid/96", "completion": "\n    exclusive_elements = set_a.symmetric_difference(set_b)\n    return exclusive_elements\n"}
{"task_id": "valid/97", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/98", "completion": "\n    if n < 0:\n        return \"-\" + dec_to_ternary(-n)\n    elif n == 0:\n        return \"0\"\n    else:\n        return dec_to_ternary(n // 3) + str(n % 3)\n"}
{"task_id": "valid/99", "completion": "\n    return tuple(file_name.split('.')[-1] for file_name in file_names)\n"}
{"task_id": "valid/100", "completion": "\n    if age < 0:\n        return \"Invalid age\"\n    elif age < 13:\n        return \"Child\"\n    elif age < 18:\n        return \"Teenager\"\n    elif age < 60:\n        return \"Adult\"\n    else:\n        return \"Senior\"\n"}
{"task_id": "valid/101", "completion": "\n    if numerical_grade >= 90:\n        letter_grade = 'A'\n        gpa = 4.0\n    elif numerical_grade >= 80:\n        letter_grade = 'B'\n        gpa = 3.0\n    elif numerical_grade >= 70:\n        letter_grade = 'C'\n        gpa = 2.0\n    elif numerical_grade >= 60:\n        letter_grade = 'D'\n        gpa = 1.0\n    else:\n        letter_grade = 'F'\n        gpa = 0.0\n\n    return letter_grade, gpa\n"}
{"task_id": "valid/102", "completion": "\n    total = 0\n    for item in listing:\n        total += item['price'] * item['quantity']\n    return total\n"}
{"task_id": "valid/103", "completion": "\n    vowels = 'aeiou'\n    vowel_count_dict = {}\n\n    for palindrome in palindrome_tuples:\n        count = 0\n        for char in palindrome:\n            if char in vowels:\n                count += 1\n        vowel_count_dict[palindrome] = count\n\n    return vowel_count_dict\n"}
{"task_id": "valid/104", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/105", "completion": "\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the array\n    for num in arr:\n        # Check if the negation of the current number exists in the set\n        if -num in unique_elements:\n            # If it does, return True\n            return True\n        # Add the current number to the set\n        unique_elements.add(num)\n\n    # If no pair sums to 0, return False\n    return False\n"}
{"task_id": "valid/106", "completion": "\n    latest_versions = {}\n    for dependency in dependencies:\n        package, version = dependency\n        if package in latest_versions:\n            current_version = latest_versions[package]\n            if version > current_version:\n                latest_versions[package] = version\n        else:\n            latest_versions[package] = version\n    return latest_versions\n"}
{"task_id": "valid/107", "completion": "\n    categories = {}\n    for cause in causes:\n        action, result = cause.split()\n        if action not in categories:\n            categories[action] = []\n        categories[action].append(result)\n    return categories\n"}
{"task_id": "valid/108", "completion": "\n    # Your implementation here\n    return code_name\n"}
{"task_id": "valid/109", "completion": "\n    return any(ord(c) > 127 for c in text)\n"}
{"task_id": "valid/110", "completion": "\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    no_punct = \"\"\n    for char in string:\n        if char not in punctuations:\n            no_punct = no_punct + char\n    return no_punct\n"}
{"task_id": "valid/111", "completion": "\n    result = []\n    for num in num_list:\n        result.append(num ** exp)\n    return result\n\n\nnum_list = [1, 2, 3, 4, 5]\nexp = 2"}
{"task_id": "valid/112", "completion": "\n    min_values = [min(row) for row in grid]\n    for value in min_values:\n        print(value)\n"}
{"task_id": "valid/113", "completion": "\n    if current_num > n:\n        return\n    elif current_num % 2 == 0:\n        print(\"Thank\")\n        print_thank_you(n, current_num + 1)\n    else:\n        print_thank_you(n, current_num + 1)\n\n"}
{"task_id": "valid/114", "completion": "\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == element and lst[i + 1] == element:\n            count += 1\n    return count\n"}
{"task_id": "valid/115", "completion": "\n    digits = set(str(num, base))\n    return len(digits) == 1\n\n"}
{"task_id": "valid/116", "completion": "\n    vowels = \"aeiouAEIOU\"\n    if not s:\n        return \"\"\n    elif s[0] in vowels:\n        return remove_vowels_recursive(s[1:])\n    else:\n        return s[0] + remove_vowels_recursive(s[1:])\n"}
{"task_id": "valid/117", "completion": "\n    help_message = \"Usage: app_name [options]\\n\\nOptions:\\n\"\n    for option, description in options:\n        help_message += f\"  {option:<15}{description}\\n\"\n    return help_message\n"}
{"task_id": "valid/118", "completion": "\n    return input_string[0]\n"}
{"task_id": "valid/119", "completion": "\n    count = 0\n    for i in range(len(Val)):\n        if Val[i] == 1:\n            count += 1\n    return count\n"}
{"task_id": "valid/120", "completion": "\n    return ~sample_bitset & 0xFF\n\n"}
{"task_id": "valid/121", "completion": "\n    vowels = \"aeiou\"\n    for char in s:\n        if char not in vowels:\n            return False\n    return True\n"}
{"task_id": "valid/122", "completion": "\n    count = 0\n    subseq_len = len(subsequence)\n    for i in range(len(sequence)):\n        if sequence[i:i+subseq_len] == subsequence:\n            count += 1\n    return count\n"}
{"task_id": "valid/123", "completion": "\n    # Your implementation here\n    pass\n"}
{"task_id": "valid/124", "completion": "\n    return sum(x for x in input_list if x % 2 != 0)\n"}
{"task_id": "valid/125", "completion": "\n    vowels = \"aeiouAEIOU\"\n    consonants = 0\n    for char in string:\n        if char.isalpha() and char not in vowels:\n            consonants += 1\n    return consonants\n"}
{"task_id": "valid/126", "completion": "\n    # Calculate the number of electrons based on the energy values\n    num_electrons = 0\n    for energy in grid_energies:\n        if energy < 0:\n            num_electrons += ados[int(energy / dos_grid_size)]\n        else:\n            num_electrons -= ados[int(energy / dos_grid_size)]\n\n    # Adjust the number of doping levels\n    num_doping = num_electrons + dope\n\n    return num_electrons, num_doping\n"}
{"task_id": "valid/127", "completion": "\n    return tuple(set(tuple_to_process))\n"}
{"task_id": "valid/128", "completion": "\n    arr.sort()\n    return [arr[i] for i in range(len(arr)) if i % 2 == 0] + [arr[i] for i in range(len(arr)) if i % 2 != 0]\n"}
{"task_id": "valid/129", "completion": "\n    color_dict = {}\n    for color in color_list:\n        color_dict[color[0]] = color[1]\n    return color_dict\n"}
{"task_id": "valid/130", "completion": "\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "valid/131", "completion": "\n    unique_elements = []\n    for element in lst:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        if len(unique_elements) == 3:\n            break\n    return unique_elements[:3]\n"}
{"task_id": "valid/132", "completion": "\n    fruit_list.sort()\n    return ', '.join(fruit_list)\n"}
{"task_id": "valid/133", "completion": "\n    sublists = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n"}
{"task_id": "valid/134", "completion": "\n    pattern = r'\\d+\\.\\d+'\n    return bool(re.match(pattern, string))\n\n"}
{"task_id": "valid/135", "completion": "\n    from django.db import migrations, models\n\n    class Migration(migrations.Migration):\n\n        dependencies = [\n            ('history', '0001_initial'),\n        ]\n\n        operations = [\n            migrations.AlterField(\n                model_name=model_name,\n                name=field_name,\n                field=models.CharField(max_length=100),\n            ),\n        ]\n\n    return Migration\n"}
{"task_id": "valid/136", "completion": "\n    common_elements = set(list1) & set(list2)\n    return sum(common_elements)\n"}
{"task_id": "valid/137", "completion": "\n    forecast_period = math.ceil(len(df) * 0.01)\n    return forecast_period\n"}
{"task_id": "valid/138", "completion": "\n    return sorted(array, key=lambda x: x[attr])\n\n"}
{"task_id": "valid/139", "completion": "\n    start_index = (page_number - 1) * items_per_page\n    end_index = start_index + items_per_page\n    return items[start_index:end_index]\n\n"}
{"task_id": "valid/140", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/141", "completion": "\n    presets = {\n        \"home\": (0.0, 0.0, 0.0),\n        \"position1\": (0.5, 0.0, 0.0),\n        \"position2\": (0.0, 0.5, 0.0),\n        \"position3\": (0.0, 0.0, 0.5)\n    }\n    return presets.get(preset_name, None)\n"}
{"task_id": "valid/142", "completion": "\n    common_elements = set(list1).intersection(set(list2))\n    product = 1\n    for element in common_elements:\n        product *= element\n    return product\n"}
{"task_id": "valid/143", "completion": "\n\n        If allow_multiple_answer is True, users can select multiple answers for a question.\n        \"\"\"\n    else:\n        \"\"\"\n        If allow_multiple_answer is False, users can only select one answer for a question.\n        \"\"\"\n    if zoom_level == 1:\n        \"\"\"\n        If zoom_level is 1, the quiz system will be in a basic mode.\n        \"\"\"\n    elif zoom_level == 2:\n        \"\"\"\n        If zoom_level is 2, the quiz system will be in an intermediate mode.\n        \"\"\"\n    else:\n        \"\"\"\n        If zoom_level is not 1 or 2, the quiz system will be in an advanced mode.\n        \"\"\"\n    \"\"\"\n    The function quiz_system_behavior takes two parameters: allow_multiple_answer (a boolean indicating whether users can select multiple answers for a question) and zoom_level (an integer indicating the level of zoom for the quiz system). The function then uses these parameters to determine the behavior of the quiz system based on the provided configurations.\n    \"\"\"\n    pass  # Placeholder for the actual implementation of the quiz system behavior based on the provided configurations."}
{"task_id": "valid/144", "completion": "\n    return math.floor(num)\n\n"}
{"task_id": "valid/145", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    modified_sentence = ''\n    for char in sentence:\n        if char not in vowels:\n            modified_sentence += char\n    return modified_sentence\n"}
{"task_id": "valid/146", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "valid/147", "completion": "\n    max_value = float('-inf')\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_value = max(max_value, find_max_in_dict(value))\n        else:\n            max_value = max(max_value, value)\n    return max_value\n"}
{"task_id": "valid/148", "completion": "\n    return sum(dict[key]) / len(dict[key])\n\n"}
{"task_id": "valid/149", "completion": "\n    if string is None or string == \"\":\n        return None\n    else:\n        return string.replace('e', '*')\n"}
{"task_id": "valid/150", "completion": "\n    return heapq.nsmallest(n, lst)\n\n"}
{"task_id": "valid/151", "completion": "\n    return x % 4 == 0\n\n"}
{"task_id": "valid/152", "completion": "\n    return date + datetime.timedelta(days=10)\n\n"}
