{"task_id": "MBPP/11", "completion": "\n    return s.replace(ch, '', 1)\n"}
{"task_id": "MBPP/12", "completion": "\n    return sorted(M, key=sum)\n"}
{"task_id": "MBPP/13", "completion": "\n    word_count = Counter(words)\n    return dict(word_count.most_common())\n"}
{"task_id": "MBPP/14", "completion": "\n    return (1/2) * l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.findall(r'[A-Z][a-z]*|[a-z]+', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    return re.findall(r'[a-z]+(?:_[a-z]+)*', text)\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n"}
{"task_id": "MBPP/18", "completion": "\n    char_list = list(string)\n    return char_list\n\n"}
{"task_id": "MBPP/19", "completion": "\n    return len(arraynums) != len(set(arraynums))\n"}
{"task_id": "MBPP/20", "completion": "\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(1, m + 1) if i % n == 0]\n"}
{"task_id": "MBPP/22", "completion": "\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    if not list1:\n        return 0\n    \n    max_sum = float('-inf')\n    \n    for sublist in list1:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    decimal = 0\n    binary_str = str(binary)[::-1]  # Reverse the string for easier calculation\n    for index, digit in enumerate(binary_str):\n        decimal += int(digit) * (2 ** index)\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    product = 1\n    seen = set()\n    \n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            product *= num\n            \n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(tup) == K for tup in test_list)\n"}
{"task_id": "MBPP/27", "completion": "\n    return [re.sub(r'\\d+', '', item) for item in list]\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n"}
{"task_id": "MBPP/29", "completion": "\n    result = 0\n    for i in range(arr_size):\n        result ^= arr[i]\n    return result\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    if k <= 0 or not nums:\n        return []\n\n    # Create a frequency dictionary\n    frequency = collections.Counter(nums)\n\n    # Use a heap to get the top k elements\n    return heapq.nlargest(k, frequency.keys(), key=frequency.get)\n"}
{"task_id": "MBPP/32", "completion": "\n    if n <= 1:\n        return None\n\n    # Initialize the largest prime factor\n    largest_prime = None\n\n    # Check for number of 2s that divide n\n    while n % 2 == 0:\n        largest_prime = 2\n        n //= 2\n\n    # n must be odd at this point, so we can skip even numbers\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n\n    return largest_prime\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return \"0\"\n    \n    binary = \"\"\n    while N > 0:\n        binary = str(N % 2) + binary\n        N //= 2\n    \n    return binary\n"}
{"task_id": "MBPP/34", "completion": "\n    # Calculate the expected sum of the first N natural numbers\n    expected_sum = N * (N + 1) // 2\n    \n    # Calculate the actual sum of the elements in the array\n    actual_sum = sum(ar)\n    \n    # The missing number is the difference between the expected sum and the actual sum\n    missing_number = expected_sum - actual_sum\n    \n    return missing_number\n"}
{"task_id": "MBPP/35", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "MBPP/36", "completion": "\n    # Calculate the decimal representation of the fraction p/q\n    decimal_representation = str(p / q).split('.')\n    \n    # Check if there is a decimal part\n    if len(decimal_representation) < 2:\n        return -1  # No decimal part\n    \n    decimal_part = decimal_representation[1]\n    \n    # Check if N is within the bounds of the decimal part\n    if N <= len(decimal_part):\n        return int(decimal_part[N - 1])  # N is 1-based index\n    else:\n        return -1  # N is out of bounds\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate integers and strings\n    integers = [item for item in mixed_list if isinstance(item, int)]\n    strings = [item for item in mixed_list if isinstance(item, str)]\n    \n    # Sort both lists\n    integers.sort()\n    strings.sort()\n    \n    # Combine the sorted lists\n    return integers + strings\n"}
{"task_id": "MBPP/38", "completion": "\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n    \n    if even_numbers and odd_numbers:\n        return even_numbers[0] / odd_numbers[0]\n    else:\n        return None\n"}
{"task_id": "MBPP/39", "completion": "\n    if not S:\n        return \"\"\n\n    # Count the frequency of each character\n    char_count = Counter(S)\n    max_heap = [(-count, char) for char, count in char_count.items()]\n    heapq.heapify(max_heap)\n\n    result = []\n    prev_char = None\n    prev_count = 0\n\n    while max_heap:\n        count, char = heapq.heappop(max_heap)\n        result.append(char)\n\n        # If there was a previous character, push it back to the heap\n        if prev_count < 0:\n            heapq.heappush(max_heap, (prev_count, prev_char))\n\n        # Update the previous character and its count\n        prev_char = char\n        prev_count = count + 1  # Decrease the count\n\n    rearranged_string = ''.join(result)\n\n    # Check if the rearranged string is valid\n    if len(rearranged_string) != len(S):\n        return \"\"\n\n    return rearranged_string\n"}
{"task_id": "MBPP/40", "completion": "\n    return dict(Counter(chain.from_iterable(nums)))\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n"}
{"task_id": "MBPP/42", "completion": "\n    repeated_sum = 0\n    seen = set()\n    repeated = set()\n\n    for num in arr:\n        if num in seen:\n            repeated.add(num)\n        else:\n            seen.add(num)\n\n    for num in repeated:\n        repeated_sum += num\n\n    return repeated_sum\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = r'(?<!\\w)([a-z]+)(?:\\s+an\\s+)([a-z]+)(?!\\w)'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r'\\b\\w+\\b'  # Matches any word\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/45", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    return len(data) == len(set(data))\n"}
{"task_id": "MBPP/47", "completion": "\n    if B == 0:\n        return 1  # 0! is 1, and any number divided by 1 has the last digit of that number\n\n    last_digit = 1\n    for i in range(1, A + 1):\n        last_digit = (last_digit * i) % 10\n\n    factorial_B = 1\n    for j in range(1, B + 1):\n        factorial_B *= j\n\n    if factorial_B == 0:\n        return 0  # If B is 0, factorial is 1, and we return the last digit of A!\n\n    return last_digit % factorial_B\n"}
{"task_id": "MBPP/48", "completion": "\n    # Create a mask with all odd bits set\n    mask = 0xAAAAAAAA  # This is the hexadecimal representation for 10101010... in binary\n\n    # Use bitwise OR to set all odd bits of n\n    result = n | mask\n\n    return result\n"}
{"task_id": "MBPP/49", "completion": "\n    if not nums or N <= 0:\n        return []\n\n    return [nums[i] for i in range(len(nums)) if (i + 1) % N == 0]\n"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/51", "completion": "\n    return x == y == z\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) < 2:\n        return False\n    return str[0] == str[-1]\n"}
{"task_id": "MBPP/54", "completion": "\n    if not my_list:\n        return my_list\n\n    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_elements = max_val - min_val + 1\n\n    # Initialize count array\n    count = [0] * range_of_elements\n    output = [0] * len(my_list)\n\n    # Store the count of each number\n    for number in my_list:\n        count[number - min_val] += 1\n\n    # Change count[i] so that it contains the actual position of this number in output[]\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n    # Build the output array\n    for number in reversed(my_list):\n        output[count[number - min_val] - 1] = number\n        count[number - min_val] -= 1\n\n    return output\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (r ** (n - 1))\n"}
{"task_id": "MBPP/56", "completion": "\n    return rev_num\n"}
{"task_id": "MBPP/57", "completion": "\n    # Convert the array of digits to strings and sort them in reverse order\n    arr = sorted(map(str, arr), reverse=True)\n    \n    # Join the sorted strings to form the largest number\n    largest_num = ''.join(arr)\n    \n    return int(largest_num)\n"}
{"task_id": "MBPP/58", "completion": "\n    return (x < 0 < y) or (y < 0 < x)\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (3 * n - 2)\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 0:\n        return 0\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(1, n):\n        if abs(arr[i] - arr[i - 1]) == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    max_length = max(max_length, current_length)\n    return max_length\n"}
{"task_id": "MBPP/61", "completion": "\n    count = 0\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            if current_sum == (j - i + 1):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    if not xs:\n        return None\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"}
{"task_id": "MBPP/63", "completion": "\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"}
{"task_id": "MBPP/66", "completion": "\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        # Explicitly put the first value of the current row\n        bell[i][0] = bell[i - 1][i - 1]\n\n        # Fill the rest of the entries in the current row\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n"}
{"task_id": "MBPP/68", "completion": "\n    if not A:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n"}
{"task_id": "MBPP/69", "completion": "\n    return any(s == l[i:i + len(s)] for i in range(len(l) - len(s) + 1))\n"}
{"task_id": "MBPP/70", "completion": "\n    if not Input:\n        return True\n    \n    length = len(Input[0])\n    for item in Input:\n        if len(item) != length:\n            return False\n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = max(1, int(gap / shrink))\n        sorted = True\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    return n % 4 == 0 or n % 4 == 1\n"}
{"task_id": "MBPP/73", "completion": "\n    # Define the regex pattern for multiple delimiters\n    pattern = r'[;,\\s]+'  # This will split on semicolons, commas, or whitespace\n\n    # Use re.split to split the text based on the pattern\n    return re.split(pattern, text)\n"}
{"task_id": "MBPP/74", "completion": "\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n"}
{"task_id": "MBPP/75", "completion": "\n    return [t for t in test_list if all(x % K == 0 for x in t)]\n"}
{"task_id": "MBPP/76", "completion": "\n    count = 0\n    for size in range(1, min(m, n) + 1):\n        count += (m - size + 1) * (n - size + 1)\n    return count\n"}
{"task_id": "MBPP/77", "completion": "\n    even_sum = 0\n    odd_sum = 0\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    \n    return even_sum - odd_sum\n"}
{"task_id": "MBPP/78", "completion": "\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n\n    odd_count = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) % 2 != 0:\n            odd_count += 1\n\n    return odd_count\n"}
{"task_id": "MBPP/79", "completion": "\n    return len(s) % 2 != 0\n"}
{"task_id": "MBPP/80", "completion": "\n    return n * (n + 1) * (n + 2) // 6\n"}
{"task_id": "MBPP/81", "completion": "\n    return list(zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/82", "completion": "\n    return (4/3) * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    return chr(sum(ord(char) for char in strr) % 256)\n"}
{"task_id": "MBPP/84", "completion": "\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\n    return seq[1:]\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    if n < 1:\n        return 0\n    return 3 * n * (n - 1) + 1\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.defaultdict(int)\n\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            merged_dict[key] += value\n\n    return dict(merged_dict)\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n"}
{"task_id": "MBPP/89", "completion": "\n    closest = None\n    for i in range(N - 1, -1, -1):\n        if i < N:\n            closest = i\n            break\n    return closest\n"}
{"task_id": "MBPP/90", "completion": "\n    if not list1:\n        return 0\n    return max(len(word) for word in list1)\n"}
{"task_id": "MBPP/91", "completion": "\n    return sub_str in str1\n"}
{"task_id": "MBPP/92", "completion": "\n    str_n = str(n)\n    if len(str_n) < 2:\n        return True  # A single digit is considered undulating\n\n    for i in range(1, len(str_n) - 1):\n        if (str_n[i] == str_n[i - 1]) or (str_n[i] == str_n[i + 1]):\n            return False\n        if (str_n[i] > str_n[i - 1] and str_n[i] > str_n[i + 1]) or (str_n[i] < str_n[i - 1] and str_n[i] < str_n[i + 1]):\n            continue\n        else:\n            return False\n\n    return True\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n"}
{"task_id": "MBPP/94", "completion": "\n    if not test_list:\n        return None\n    return min(range(len(test_list)), key=itemgetter(test_list))\n"}
{"task_id": "MBPP/95", "completion": "\n    if not lst:\n        return []\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for start in range(len(lst)):\n        for end in range(start + 1, len(lst) + 1):\n            sublist = lst[start:end]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist\n"}
{"task_id": "MBPP/96", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/97", "completion": "\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return list(frequency.items())\n"}
{"task_id": "MBPP/98", "completion": "\n    if not numbers:\n        return 0\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)\n"}
{"task_id": "MBPP/99", "completion": "\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"}
{"task_id": "MBPP/100", "completion": "\n    num = str(num)\n    length = len(num)\n\n    if num == '9' * length:\n        return str(int(num) + 2)\n\n    half_length = (length + 1) // 2\n    left_half = num[:half_length]\n    if length % 2 == 0:\n        palindrome = left_half + left_half[::-1]\n    else:\n        palindrome = left_half + left_half[-2::-1]\n\n    if palindrome > num:\n        return palindrome\n\n    left_half = str(int(left_half) + 1)\n    if length % 2 == 0:\n        return left_half + left_half[::-1]\n    else:\n        return left_half + left_half[-2::-1]\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k < 1 or k > n:\n        return None  # k is out of bounds\n\n    # Sort the array\n    arr.sort()\n\n    # Return the k-1 indexed element\n    return arr[k - 1]\n"}
{"task_id": "MBPP/102", "completion": "\n    components = word.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n"}
{"task_id": "MBPP/103", "completion": "\n    if m == 0 or m == n:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n"}
{"task_id": "MBPP/104", "completion": "\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in input_list]\n"}
{"task_id": "MBPP/105", "completion": "\n    return lst.count(True)\n"}
{"task_id": "MBPP/106", "completion": "\n    return [x + y for x, y in zip(test_list, test_tup)]\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for num in range(L, R + 1):\n        if all(c in '0123456789abcdefABCDEF' for c in hex(num)[2:]):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/108", "completion": "\n    min_heap = []\n    for num in num1:\n        heapq.heappush(min_heap, num)\n    for num in num2:\n        heapq.heappush(min_heap, num)\n    for num in num3:\n        heapq.heappush(min_heap, num)\n\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n\n    return merged_list\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        # Rotate the string\n        rotated = s[i:] + s[:i]\n        # Convert to integer and check if odd\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    return [x for x in range(strt_val, stop_val + 1) if x not in test_list]\n"}
{"task_id": "MBPP/111", "completion": "\n    if not nestedlist:\n        return []\n\n    common_elements = set(nestedlist[0])\n\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n\n    return list(common_elements)\n"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    return 2 * 3.14159 * radius + 2 * height\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"}
{"task_id": "MBPP/114", "completion": "\n    freq = Counter(test_list)\n    return [(item, freq[item]) for item in test_list]\n"}
{"task_id": "MBPP/115", "completion": "\n    return all(isinstance(d, dict) and not d for d in list1)\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n"}
{"task_id": "MBPP/117", "completion": "\n    return [float(i) for i in test_list if isinstance(i, (int, float, str)) and str(i).replace('.', '', 1).isdigit()]\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    if not arr:\n        return None\n\n    for i in range(n):\n        if (i == 0 or arr[i] != arr[i - 1]) and (i == n - 1 or arr[i] != arr[i + 1]):\n            return arr[i]\n    \n    return None\n"}
{"task_id": "MBPP/120", "completion": "\n    if len(list1) < 2:\n        return None\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i], list1[j])\n\n    return max_pair\n"}
{"task_id": "MBPP/121", "completion": "\n    A.sort()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count.append((A[i], A[left], A[right]))\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n"}
{"task_id": "MBPP/122", "completion": "\n    if n < 1:\n        return None\n\n    smart_numbers = []\n    num = 1\n\n    while len(smart_numbers) < n:\n        if is_smart(num):\n            smart_numbers.append(num)\n        num += 1\n\n    return smart_numbers[-1]\n\n"}
{"task_id": "MBPP/123", "completion": "\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    amicable_numbers = set()\n    \n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner != num and sum_of_divisors(partner) == num:\n            amicable_numbers.add(num)\n            amicable_numbers.add(partner)\n\n    return sum(amicable_numbers)\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(b) - cmath.phase(a)\n"}
{"task_id": "MBPP/125", "completion": "\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        \n        # Calculate the current difference\n        current_diff = count_1 - count_0\n        max_diff = max(max_diff, current_diff)\n\n    return max_diff\n"}
{"task_id": "MBPP/126", "completion": "\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    common_divisors = [i for i in range(1, gcd(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for _ in range(abs(y)):\n        result += x\n    return result if y >= 0 else -result\n"}
{"task_id": "MBPP/128", "completion": "\n    words = str.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n"}
{"task_id": "MBPP/129", "completion": "\n    n = len(my_matrix)\n    magic_sum = n * (n**2 + 1) // 2\n\n    # Check rows and columns\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum(my_matrix[j][i] for j in range(n)) != magic_sum:\n            return False\n\n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum or sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n"}
{"task_id": "MBPP/130", "completion": "\n    frequency = defaultdict(int)\n    \n    for num in nums:\n        frequency[num] += 1\n    \n    max_freq = max(frequency.values())\n    max_items = [num for num, freq in frequency.items() if freq == max_freq]\n    \n    return max_items\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    left, right = 0, len(str_list) - 1\n\n    while left < right:\n        if str_list[left] not in vowels:\n            left += 1\n        elif str_list[right] not in vowels:\n            right -= 1\n        else:\n            str_list[left], str_list[right] = str_list[right], str_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str_list)\n"}
{"task_id": "MBPP/132", "completion": "\n    return ''.join(tup1)\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n"}
{"task_id": "MBPP/134", "completion": "\n    if n <= 0 or p < 0:\n        return None\n\n    for _ in range(p):\n        arr.append(arr[-1] * 2)\n\n    return arr[-1] % 2 == 0\n"}
{"task_id": "MBPP/135", "completion": "\n    return n * (2 * n - 1)\n"}
{"task_id": "MBPP/136", "completion": "\n    if units < 0:\n        return \"Invalid input\"\n\n    if units <= 100:\n        bill = units * 1.5\n    elif units <= 300:\n        bill = (100 * 1.5) + (units - 100) * 2.5\n    elif units <= 500:\n        bill = (100 * 1.5) + (200 * 2.5) + (units - 300) * 3.5\n    else:\n        bill = (100 * 1.5) + (200 * 2.5) + (200 * 3.5) + (units - 500) * 4.5\n\n    return bill\n"}
{"task_id": "MBPP/137", "completion": "\n    return nums.count(0)\n"}
{"task_id": "MBPP/138", "completion": "\n    if n < 0:\n        return False\n    return (n & (n - 1)) == 0\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n"}
{"task_id": "MBPP/140", "completion": "\n    return [item for item in test_list if test_list.count(item) == 1]\n"}
{"task_id": "MBPP/141", "completion": "\n    def flip(sublist, k):\n        \"\"\"Helper function to reverse the order of the first k elements in sublist.\"\"\"\n        return sublist[:k][::-1] + sublist[k:]\n\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in nums[0:i]\n        max_index = nums.index(max(nums[:i]))\n        \n        # If the max element is not already in the correct position\n        if max_index != i - 1:\n            # If the max element is not at the beginning, flip it to the front\n            if max_index != 0:\n                nums = flip(nums, max_index + 1)\n            # Now flip it to its correct position\n            nums = flip(nums, i)\n    \n    return nums\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for item1 in list1:\n        for item2 in list2:\n            for item3 in list3:\n                if item1 == item2 == item3:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    return [item for item in Input if isinstance(item, list)]\n"}
{"task_id": "MBPP/144", "completion": "\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += abs(arr[i] - arr[j])\n    return total_sum\n"}
{"task_id": "MBPP/145", "completion": "\n    if n == 0:\n        return 0\n    \n    max_element = max(arr)\n    min_element = min(arr)\n    \n    return max_element - min_element\n"}
{"task_id": "MBPP/146", "completion": "\n    total_ascii_value = sum(ord(char) for char in str1)\n    return total_ascii_value\n"}
{"task_id": "MBPP/147", "completion": "\n    # Create a copy of the triangle to store the maximum path sums\n    dp = [row[:] for row in tri]\n\n    # Start from the second to last row and move upwards\n    for i in range(m - 2, -1, -1):\n        for j in range(i + 1):\n            # Update the current cell with the maximum path sum\n            dp[i][j] += max(dp[i + 1][j], dp[i + 1][j + 1])\n\n    # The top element now contains the maximum path sum\n    return dp[0][0]\n"}
{"task_id": "MBPP/148", "completion": "\n    str_x = str(x)\n    n = len(str_x)\n    max_sum = 0\n\n    for i in range(1, n):\n        part1 = int(str_x[:i])\n        part2 = int(str_x[i:])\n        current_sum = sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2))\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n"}
{"task_id": "MBPP/149", "completion": "\n    if n == 0:\n        return 0\n\n    # Create a list to store the length of the longest subsequence ending at each index\n    dp = [1] * n\n\n    # Fill the dp array\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # The length of the longest subsequence will be the maximum value in dp\n    return max(dp)\n"}
{"task_id": "MBPP/150", "completion": "\n    # Generate the infinite sequence based on the parameters a, b, and c\n    current = a\n    while current <= c:\n        if current == c:\n            return True\n        current += b\n    return False\n"}
{"task_id": "MBPP/151", "completion": "\n    while q != 0:\n        p, q = q, p % q\n    return p == 1\n"}
{"task_id": "MBPP/152", "completion": "\n    \"\"\"Function to perform merge sort on the given array.\"\"\"\n    if len(x) <= 1:\n        return x\n    mid = len(x) // 2\n    left = merge_sort(x[:mid])\n    right = merge_sort(x[mid:])\n    return merge(left, right)\n"}
{"task_id": "MBPP/153", "completion": "\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (x_vertex, y_vertex)\n"}
{"task_id": "MBPP/154", "completion": "\n    return [row[N] for row in nums if len(row) > N]\n"}
{"task_id": "MBPP/155", "completion": "\n    # Create a mask with all even bits set to 1\n    mask = 0xAAAAAAAA  # This is the binary representation: 10101010...\n\n    # Toggle the even bits of the number using XOR\n    result = n ^ mask\n\n    return result\n"}
{"task_id": "MBPP/156", "completion": "\n    return tuple(int(i) for i in tuple_str)\n"}
{"task_id": "MBPP/157", "completion": "\n    if not list1:\n        return []\n\n    encoded = []\n    for key, group in groupby(list1):\n        count = len(list(group))\n        encoded.append((key, count))\n    \n    return encoded\n"}
{"task_id": "MBPP/158", "completion": "\n    # Count the number of operations needed\n    operations = 0\n    \n    for i in range(n):\n        if arr[i] < k:\n            operations += (k - arr[i])\n    \n    return operations\n"}
{"task_id": "MBPP/159", "completion": "\n    if month in [12, 1, 2]:\n        season = \"Winter\"\n    elif month in [3, 4, 5]:\n        season = \"Spring\"\n    elif month in [6, 7, 8]:\n        season = \"Summer\"\n    elif month in [9, 10, 11]:\n        season = \"Fall\"\n    else:\n        return \"Invalid month\"\n\n    if (month == 3 and days < 20) or (month == 6 and days >= 21):\n        season = \"Winter\" if month == 3 else \"Spring\"\n    elif (month == 6 and days < 21) or (month == 9 and days >= 22):\n        season = \"Spring\" if month == 6 else \"Summer\"\n    elif (month == 9 and days < 22) or (month == 12 and days >= 21):\n        season = \"Summer\" if month == 9 else \"Fall\"\n    elif (month == 12 and days < 21) or (month == 3 and days >= 20):\n        season = \"Fall\" if month == 12 else \"Winter\"\n\n    return season\n"}
{"task_id": "MBPP/160", "completion": "\n    from sympy import symbols, Eq, solve\n\n    x, y = symbols('x y')\n    equation = Eq(a*x + b*y, n)\n    solution = solve(equation, x)\n\n    return solution[0] if solution else None\n"}
{"task_id": "MBPP/161", "completion": "\n    return [item for item in list1 if item not in list2]\n"}
{"task_id": "MBPP/162", "completion": "\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            total += i\n    return total\n"}
{"task_id": "MBPP/163", "completion": "\n    if s < 3:\n        return 0  # Not a polygon\n    return (s * l**2) / (4 * tan(pi / s))\n"}
{"task_id": "MBPP/164", "completion": "\n    def sum_of_divisors(num):\n        total = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                total += i\n                if i != num // i:\n                    total += num // i\n        return total\n\n    return sum_of_divisors(n) == n\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].lower() == str1[i]:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/167", "completion": "\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, 2 * b + a\n        return b\n"}
{"task_id": "MBPP/170", "completion": "\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid indices\")\n    \n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    from collections import Counter\n\n    # Remove spaces and convert to lowercase for uniformity\n    s = s.replace(\" \", \"\").lower()\n    \n    # Count occurrences of each character\n    char_count = Counter(s)\n    \n    return char_count\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub(r'[^a-zA-Z]', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    grouped = {}\n    for key, value in l:\n        if key not in grouped:\n            grouped[key] = []\n        grouped[key].append(value)\n    return grouped\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    parentheses_map = {')': '(', '}': '{', ']': '['}\n\n    for char in str1:\n        if char in parentheses_map.values():\n            stack.append(char)\n        elif char in parentheses_map.keys():\n            if not stack or stack.pop() != parentheses_map[char]:\n                return False\n\n    return not stack\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            if lcm(i, j) >= L and lcm(i, j) <= R:\n                return (i, j)\n    \n    return None\n"}
{"task_id": "MBPP/178", "completion": "\n    matches = []\n    for pattern in patterns:\n        found = re.findall(pattern, text)\n        matches.extend(found)\n    return matches\n"}
{"task_id": "MBPP/179", "completion": "\n    if x < 1:\n        return False\n\n    digits = list(map(int, str(x)))\n    n = len(digits)\n    sequence = digits.copy()\n\n    while True:\n        next_num = sum(sequence[-n:])\n        if next_num == x:\n            return True\n        elif next_num > x:\n            return False\n        sequence.append(next_num)\n"}
{"task_id": "MBPP/180", "completion": "\n    # Convert latitude and longitude from degrees to radians\n    slat_rad = radians(slat)\n    slon_rad = radians(slon)\n    elat_rad = radians(elat)\n    elon_rad = radians(elon)\n\n    # Haversine formula\n    dlon = elon_rad - slon_rad\n    dlat = elat_rad - slat_rad\n\n    a = sin(dlat / 2)**2 + cos(slat_rad) * cos(elat_rad) * sin(dlon / 2)**2\n    c = 2 * acos(min(1, max(-1, a**0.5)))\n\n    # Radius of the Earth in kilometers\n    radius_earth = 6371.0\n    distance = radius_earth * c\n\n    return distance\n"}
{"task_id": "MBPP/181", "completion": "\n    min_length = min(len(str1), len(str2))\n    common_prefix = []\n    \n    for i in range(min_length):\n        if str1[i] == str2[i]:\n            common_prefix.append(str1[i])\n        else:\n            break\n            \n    return ''.join(common_prefix)\n"}
{"task_id": "MBPP/182", "completion": "\n    pattern = r'[u\\W0-9]'\n    matches = re.findall(pattern, string)\n    return matches\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    seen = set()\n    pairs = set()\n\n    for number in arr:\n        if (number - k) in seen:\n            pairs.add((number - k, number))\n        if (number + k) in seen:\n            pairs.add((number, number + k))\n        seen.add(number)\n\n    return len(pairs)\n"}
{"task_id": "MBPP/184", "completion": "\n    return [x for x in list if x > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # The focus of a parabola given by the equation y = ax^2 + bx + c can be found using the formula:\n    # Focus = (h, k + (1/(4a))) where h = -b/(2a) and k = f(h)\n    \n    h = -b / (2 * a)\n    k = a * h**2 + b * h + c\n    focus = (h, k + (1 / (4 * a)))\n    \n    return focus\n"}
{"task_id": "MBPP/186", "completion": "\n    matches = {}\n    for pattern in patterns:\n        matches[pattern] = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/187", "completion": "\n    # Create a 2D array to store lengths of longest common subsequence\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build the L array in bottom-up fashion\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Length of the longest common subsequence\n    return L[m][n]\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    \n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return True\n    return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # Step 1: Replace non-positive numbers and numbers greater than n with n+1\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = n + 1\n\n    # Step 2: Use the index as a hash to mark the presence of numbers\n    for i in range(n):\n        num = abs(arr[i])\n        if 1 <= num <= n:\n            arr[num - 1] = -abs(arr[num - 1])\n\n    # Step 3: Find the first missing positive\n    for i in range(n):\n        if arr[i] > 0:\n            return i + 1\n\n    return n + 1\n"}
{"task_id": "MBPP/190", "completion": "\n    # Calculate the number of integral points inside the square defined by (x1, y1) and (x2, y2)\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if y1 > y2:\n        y1, y2 = y2, y1\n\n    # The number of integral points inside the square is given by the area of the square\n    # which is (width - 1) * (height - 1)\n    width = x2 - x1\n    height = y2 - y1\n\n    # Return the count of integral points\n    return (width - 1) * (height - 1) if width > 1 and height > 1 else 0\n"}
{"task_id": "MBPP/191", "completion": "\n    monthname3 = monthname3.lower()\n    months_with_30_days = ['april', 'june', 'september', 'november']\n    return monthname3 in months_with_30_days\n"}
{"task_id": "MBPP/192", "completion": "\n    has_letter = any(char.isalpha() for char in str)\n    has_digit = any(char.isdigit() for char in str)\n    return has_letter and has_digit\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(dict.fromkeys(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    decimal = 0\n    power = 0\n    while n > 0:\n        digit = n % 10\n        decimal += digit * (8 ** power)\n        n //= 10\n        power += 1\n    return decimal\n"}
{"task_id": "MBPP/195", "completion": "\n    low, high = 0, n - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1  # continue to search in the left half\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n"}
{"task_id": "MBPP/196", "completion": "\n    return [t for t in test_list if len(t) != K]\n"}
{"task_id": "MBPP/197", "completion": "\n    return tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major and semi-minor axes\n    semi_major = max(a, b)\n    semi_minor = min(a, b)\n\n    # The area of the largest inscribed triangle in an ellipse is given by the formula:\n    # Area = (3/2) * semi_major * semi_minor\n    area = (3 / 2) * semi_major * semi_minor\n\n    return area\n"}
{"task_id": "MBPP/199", "completion": "\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n"}
{"task_id": "MBPP/200", "completion": "\n    if not list1:\n        return []\n\n    max_value = max(list1)\n    return [index for index, value in enumerate(list1) if value == max_value]\n"}
{"task_id": "MBPP/201", "completion": "\n    return all(x == lst[0] for x in lst)\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join([char for index, char in enumerate(str1) if index % 2 != 0])\n"}
{"task_id": "MBPP/203", "completion": "\n    # Calculate the Hamming distance by counting the number of differing bits\n    return bin(n1 ^ n2).count('1')\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversion_count = 0\n    n = len(test_tup)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if test_tup[i] > test_tup[j]:\n                inversion_count += 1\n                \n    return inversion_count\n"}
{"task_id": "MBPP/206", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    # Create a 2D array to store lengths of longest repeating subsequence\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill the dp array\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^\\d+(\\.\\d{1,2})?$'\n    return bool(re.match(pattern, num))\n"}
{"task_id": "MBPP/209", "completion": "\n    if not heap:\n        raise ValueError(\"Heap is empty\")\n    \n    # Remove the smallest element\n    hq.heappop(heap)\n    \n    # Insert the new element\n    hq.heappush(heap, a)\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = r'^[aA0-9]*$'\n    return bool(re.match(pattern, string))\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(1, n + 1):\n        if bin(i).count('1') == 2:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n + 1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return tuple(str(a) + str(b) for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded = []\n    for i in range(0, len(alist), 2):\n        count = alist[i]\n        value = alist[i + 1]\n        decoded.extend([value] * count)\n    return decoded\n"}
{"task_id": "MBPP/216", "completion": "\n    for sublist in list1:\n        if not any(set(sublist).issubset(set(other)) for other in list2):\n            return False\n    return True\n"}
{"task_id": "MBPP/217", "completion": "\n    char_set = set()\n    for char in str:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Calculate the absolute difference between A and B\n    diff = abs(A - B)\n    \n    # If the numbers are already equal, no operations are needed\n    if diff == 0:\n        return 0\n    \n    # Count the number of operations needed to make A and B equal\n    operations = 0\n    \n    # While the difference is not zero, we can perform operations\n    while diff > 0:\n        # If the difference is even, we can halve it\n        if diff % 2 == 0:\n            diff //= 2\n        else:\n            # If the difference is odd, we can subtract 1\n            diff -= 1\n        \n        operations += 1\n    \n    return operations\n"}
{"task_id": "MBPP/219", "completion": "\n    if not test_tup or K <= 0:\n        return None, None\n\n    max_elem = max(test_tup)\n    sorted_tup = sorted(test_tup, reverse=True)\n    k_elements = sorted_tup[:K]\n\n    return max_elem, k_elements\n"}
{"task_id": "MBPP/220", "completion": "\n    # Define the pattern to match spaces, commas, dots, and colons\n    pattern = r'[ ,.:]'\n    \n    # Use re.sub with a custom replacement function to limit occurrences\n    def replacement(match):\n        nonlocal count\n        if count < n:\n            count += 1\n            return match.group(0)  # Return the matched character\n        else:\n            return ''  # Replace with nothing after n occurrences\n\n    count = 0\n    result = re.sub(pattern, replacement, text)\n    return result\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n"}
{"task_id": "MBPP/222", "completion": "\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    # Count occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Check if count is greater than n/2\n    return count > n // 2\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"}
{"task_id": "MBPP/225", "completion": "\n    if low == high:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    # Check if mid is the minimum\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n\n    # Check if mid-1 is the minimum\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    # Decide whether to go to the left half or the right half\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    else:\n        return find_Min(arr, mid + 1, high)\n"}
{"task_id": "MBPP/226", "completion": "\n    return str[::2]\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            return False\n    return True\n"}
{"task_id": "MBPP/229", "completion": "\n    negative = [x for x in arr if x < 0]\n    positive = [x for x in arr if x >= 0]\n    return negative + positive\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(' ', char)\n"}
{"task_id": "MBPP/231", "completion": "\n    # Start from the second last row and move upwards\n    for row in range(n - 2, -1, -1):\n        for col in range(row + 1):\n            # Update the current cell with the maximum sum of the two possible paths below it\n            tri[row][col] += max(tri[row + 1][col], tri[row + 1][col + 1])\n    \n    # The top element now contains the maximum sum\n    return tri[0][0]\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    return 2 * 3.14159 * r * h\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n"}
{"task_id": "MBPP/235", "completion": "\n    mask = 0xAAAAAAAA  # Binary: 10101010...\n    return n | mask\n"}
{"task_id": "MBPP/236", "completion": "\n    if N < 1 or K < 1:\n        return 0\n\n    # The maximum number of equilateral triangles that can be formed\n    # is determined by the number of complete layers of triangles\n    # that can fit within the given height N and base K.\n    \n    max_triangles = 0\n    height = 0\n\n    while height * (height + 1) // 2 <= N and height <= K:\n        max_triangles += height\n        height += 1\n\n    return max_triangles\n"}
{"task_id": "MBPP/237", "completion": "\n    count = Counter(test_list)\n    occurrences = Counter(count.values())\n    return any(value > 1 for value in occurrences.values())\n"}
{"task_id": "MBPP/238", "completion": "\n    n = len(str)\n    return n * (n + 1) // 2\n"}
{"task_id": "MBPP/239", "completion": "\n    if n == 0:\n        return 1\n    if m <= 0:\n        return 0\n\n    count = 0\n    for i in range(1, m):\n        if i < m:\n            count += get_total_number_of_sequences(m, n - 1)\n            count += get_total_number_of_sequences(m, n - 1) if i * 2 < m else 0\n\n    return count\n"}
{"task_id": "MBPP/240", "completion": "\n    if not list1 or not list2:\n        return list1\n    \n    list1[-1] = list2[-1]\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [[[ '*' for _ in range(o)] for _ in range(n)] for _ in range(m)]\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n"}
{"task_id": "MBPP/243", "completion": "\n    from collections import Counter\n\n    # Count the occurrences of each element in the list\n    count = Counter(lst)\n\n    # Sort the list based on the occurrence count and then by the element itself\n    sorted_lst = sorted(lst, key=lambda x: (count[x], x))\n\n    return sorted_lst\n"}
{"task_id": "MBPP/244", "completion": "\n    if N < 0:\n        return 0  # The next perfect square after a negative number is 0\n    root = math.isqrt(N)  # Get the integer square root of N\n    next_square = (root + 1) ** 2  # Calculate the next perfect square\n    return next_square\n"}
{"task_id": "MBPP/245", "completion": "\n    # Create an array to store the maximum sum ending at each index\n    max_sum_inc = [0] * n\n    max_sum_dec = [0] * n\n\n    # Initialize the maximum sum for increasing subsequence\n    for i in range(n):\n        max_sum_inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_sum_inc[i] = max(max_sum_inc[i], max_sum_inc[j] + arr[i])\n\n    # Initialize the maximum sum for decreasing subsequence\n    for i in range(n-1, -1, -1):\n        max_sum_dec[i] = arr[i]\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                max_sum_dec[i] = max(max_sum_dec[i], max_sum_dec[j] + arr[i])\n\n    # Calculate the maximum sum bitonic subsequence\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, max_sum_inc[i] + max_sum_dec[i] - arr[i])\n\n    return max_bitonic_sum\n"}
{"task_id": "MBPP/246", "completion": "\n    if number < 0:\n        raise ValueError(\"Cannot compute square root of a negative number.\")\n    \n    guess = number / 2.0\n    tolerance = 1e-10\n    \n    while True:\n        next_guess = (guess + number / guess) / 2.0\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequence\n    L = [[0] * n for _ in range(n)]\n\n    # Strings of length 1 are palindromic of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table\n    for cl in range(2, n + 1):  # cl is the length of the substring\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    return L[0][n - 1]\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        return 0\n    return 1/n + harmonic_sum(n-1)\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums2, set(array_nums1)))\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    return [element] + [item for sublist in list for item in (element, sublist)]\n"}
{"task_id": "MBPP/252", "completion": "\n    return [(abs(num), cmath.phase(num)) for num in numbers]\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/254", "completion": "\n    return re.findall(r'\\ba\\w*', text, re.IGNORECASE)\n"}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n"}
{"task_id": "MBPP/256", "completion": "\n    if n < 2:\n        return 0\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for number in range(2, n):\n        if is_prime(number):\n            count += 1\n\n    return count\n"}
{"task_id": "MBPP/257", "completion": "\n    a, b = b, a\n    return a, b\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        return None\n    if n == 1:\n        return 2\n    \n    primes = [2]\n    candidate = 3\n    \n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if p * p > candidate:\n                break\n            if candidate % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(candidate)\n        candidate += 2\n    \n    return primes[-1]\n"}
{"task_id": "MBPP/261", "completion": "\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2) if b != 0)\n"}
{"task_id": "MBPP/262", "completion": "\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be between 0 and the length of the list.\")\n    \n    return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    merged = d1.copy()  # Start with the first dictionary\n    for key, value in d2.items():  # Iterate through the second dictionary\n        if key in merged:\n            # If the key exists, combine the values (assuming they are lists)\n            if isinstance(merged[key], list):\n                merged[key].append(value)\n            else:\n                merged[key] = [merged[key], value]\n        else:\n            merged[key] = value  # Add the new key-value pair\n    return merged\n"}
{"task_id": "MBPP/264", "completion": "\n    return h_age * 7\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 4 * (l ** 2)\n"}
{"task_id": "MBPP/267", "completion": "\n    return sum(i**2 for i in range(1, 2*n, 2))\n"}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n"}
{"task_id": "MBPP/270", "completion": "\n    total_sum = 0\n    for i in range(0, n, 2):  # Iterate over even indices\n        if arr[i] % 2 == 0:   # Check if the element is even\n            total_sum += arr[i]\n    return total_sum\n"}
{"task_id": "MBPP/271", "completion": "\n    return sum(i**5 for i in range(2, 2*n + 1, 2))\n"}
{"task_id": "MBPP/272", "completion": "\n    if not test_list:\n        return []\n    return [test_list.pop() for _ in range(len(test_list))]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    return sum(math.comb(n, k) for k in range(0, n + 1, 2))\n"}
{"task_id": "MBPP/275", "completion": "\n    if n == 0:\n        return -1  # No elements in the array\n\n    last_removed_index = 0\n    for i in range(n):\n        if a[i] == m:\n            last_removed_index = i\n\n    return last_removed_index if last_removed_index < n else -1\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * (r ** 2) * h\n"}
{"task_id": "MBPP/277", "completion": "\n    return {key: value for key, value in dict.items() if value > n}\n"}
{"task_id": "MBPP/278", "completion": "\n    return {x: test_tup[:i].count(x) for i, x in enumerate(test_tup)}\n"}
{"task_id": "MBPP/279", "completion": "\n    if n < 1:\n        return None\n    return n * (4 * n - 2)\n"}
{"task_id": "MBPP/280", "completion": "\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return index\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n"}
{"task_id": "MBPP/283", "completion": "\n    digit_count = [0] * 10\n    \n    # Count the frequency of each digit in the number\n    for digit in str(n):\n        digit_count[int(digit)] += 1\n    \n    # Check if the frequency of each digit is less than the digit itself\n    for i in range(10):\n        if digit_count[i] >= i:\n            return False\n            \n    return True\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(isinstance(item, str) for item in list) and all(item == element for item in list)\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r'a(b{2,3})'\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/286", "completion": "\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    # Calculate the sum of the original array\n    total_sum = sum(a)\n    \n    # Calculate the maximum subarray sum for the original array\n    max_kadane = kadane(a)\n    \n    if k == 1:\n        return max_kadane\n    \n    # Calculate the maximum subarray sum for the array repeated twice\n    max_wrap = total_sum + kadane(a * 2)\n    \n    return max(max_kadane, max_wrap)\n"}
{"task_id": "MBPP/287", "completion": "\n    return sum(i**2 for i in range(2, 2*n + 1, 2))\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for num in arr:\n        if pow(num, P-2, P) == num:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/289", "completion": "\n    return N % 7\n"}
{"task_id": "MBPP/290", "completion": "\n    if not list1:\n        return []\n\n    max_len = max(len(lst) for lst in list1)\n    return [lst for lst in list1 if len(lst) == max_len]\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    # For n > 2\n    same = k  # Ways to paint the last post the same color as the second last\n    diff = k * (k - 1)  # Ways to paint the last post a different color than the second last\n    total = same + diff\n\n    for i in range(3, n + 1):\n        new_same = diff  # Last post same as the previous one\n        new_diff = total * (k - 1)  # Last post different from the previous one\n        total = new_same + new_diff\n        same = new_same\n        diff = new_diff\n\n    return total\n"}
{"task_id": "MBPP/292", "completion": "\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return n / m\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    if not listval:\n        return None\n    \n    max_value = listval[0]\n    \n    for value in listval:\n        if value > max_value:\n            max_value = value\n            \n    return max_value\n"}
{"task_id": "MBPP/295", "completion": "\n    return sum(i for i in range(1, number) if number % i == 0)\n"}
{"task_id": "MBPP/296", "completion": "\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left    # Starting index for left subarray\n        j = mid + 1 # Starting index for right subarray\n        k = left    # Starting index to be sorted\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid - i + 1)\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)\n"}
{"task_id": "MBPP/297", "completion": "\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n"}
{"task_id": "MBPP/298", "completion": "\n    return [item for sublist in l1 for item in sublist if item in l2]\n"}
{"task_id": "MBPP/299", "completion": "\n    aggregate = defaultdict(int)\n    \n    for entry in stdata:\n        key = entry[0]  # Assuming the first element is the key\n        value = entry[1]  # Assuming the second element is the value\n        aggregate[key] += value\n    \n    max_key = max(aggregate, key=aggregate.get)\n    return max_key, aggregate[max_key]\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    \n    # The number of valid sequences is given by the nth Catalan number\n    # C(n) = (2n)! / ((n + 1)! * n!)\n    from math import factorial\n    \n    def catalan_number(n):\n        return factorial(2 * n) // (factorial(n + 1) * factorial(n))\n    \n    return catalan_number(n)\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict) and d:\n        return 1 + max(dict_depth(v) for v in d.values())\n    return 0\n"}
{"task_id": "MBPP/302", "completion": "\n    if n == 0:\n        return 0\n    \n    msb = 0\n    while n > 0:\n        n >>= 1\n        msb += 1\n    \n    return msb\n"}
{"task_id": "MBPP/303", "completion": "\n    def count_inversions(arr):\n        if len(arr) < 2:\n            return arr, 0\n        mid = len(arr) // 2\n        left, left_inv = count_inversions(arr[:mid])\n        right, right_inv = count_inversions(arr[mid:])\n        merged, split_inv = merge_and_count(left, right)\n        return merged, left_inv + right_inv + split_inv\n\n    def merge_and_count(left, right):\n        i = j = inv_count = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, total_inversions = count_inversions(a)\n    return total_inversions == n\n\n"}
{"task_id": "MBPP/304", "completion": "\n    n = len(arr)\n    # Normalize the number of rotations\n    rotations = rotations % n\n    \n    # Calculate the effective index after rotations\n    effective_index = (index - rotations + n) % n\n    \n    return arr[effective_index]\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p') or word.startswith('P')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if index == n:\n        return 0\n\n    # Include the current element if it's greater than k\n    include = 0\n    if a[index] > k:\n        include = a[index] + max_sum_increasing_subseq(a, n, index + 1, a[index])\n\n    # Exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Return the maximum of including or excluding the current element\n    return max(include, exclude)\n"}
{"task_id": "MBPP/307", "completion": "\n    if not (0 <= m < len(tuplex)) or not (0 <= n < len(tuplex[m])):\n        raise IndexError(\"Index out of range\")\n    \n    return tuple(row[n] for row in tuplex)\n"}
{"task_id": "MBPP/308", "completion": "\n    if len(nums1) == 0 or len(nums2) == 0 or N <= 0:\n        return []\n\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n\n    products.sort(reverse=True)\n    return products[:N]\n"}
{"task_id": "MBPP/309", "completion": "\n    return a if a > b else b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(map(str.strip, str1.strip(\"()\").split(\",\")))\n"}
{"task_id": "MBPP/311", "completion": "\n    # Find the leftmost unset bit\n    leftmost_unset_bit = 0\n    while (1 << leftmost_unset_bit) <= n:\n        leftmost_unset_bit += 1\n\n    # Set the leftmost unset bit\n    result = n | (1 << (leftmost_unset_bit - 1))\n    return result\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n"}
{"task_id": "MBPP/313", "completion": "\n    positive_numbers = [num for num in list1 if num > 0]\n    return positive_numbers\n"}
{"task_id": "MBPP/314", "completion": "\n    def max_sum_no_adjacent(arr):\n        incl = 0\n        excl = 0\n        \n        for value in arr:\n            new_excl = max(incl, excl)\n            incl = excl + value\n            excl = new_excl\n            \n        return max(incl, excl)\n\n    max_sum = 0\n    for row in grid:\n        max_sum += max_sum_no_adjacent(row)\n\n    return max_sum\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    max_len = 0\n    max_word = \"\"\n\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n\n    return max_word\n"}
{"task_id": "MBPP/316", "completion": "\n    left, right = 0, len(A) - 1\n    last_index = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            last_index = mid\n            left = mid + 1  # Continue searching in the right half\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_index\n"}
{"task_id": "MBPP/317", "completion": "\n    if not alist:\n        return []\n\n    encoded = []\n    for key, group in groupby(alist):\n        count = len(list(group))\n        encoded.append((key, count))\n    \n    return encoded\n"}
{"task_id": "MBPP/318", "completion": "\n    n = len(s)\n    max_vol = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                volume = s[i] * s[j] * s[k]\n                if volume > max_vol:\n                    max_vol = volume\n    return max_vol\n"}
{"task_id": "MBPP/319", "completion": "\n    pattern = r'\\b\\w{5}\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/320", "completion": "\n    sum_n = sum(range(1, n + 1))\n    sum_n_squared = sum_n ** 2\n    squared_sum = sum(i ** 2 for i in range(1, n + 1))\n    return sum_n_squared - squared_sum\n"}
{"task_id": "MBPP/321", "completion": "\n    def is_demlo(num):\n        str_num = str(num)\n        length = len(str_num)\n        digit_sum = sum(int(digit) for digit in str_num)\n        return digit_sum % length == 0\n\n    demlo_numbers = []\n    for i in range(1, s + 1):\n        if is_demlo(i):\n            demlo_numbers.append(i)\n\n    return demlo_numbers\n"}
{"task_id": "MBPP/322", "completion": "\n    if not list1:\n        return []\n\n    min_value = min(list1)\n    return [index for index, value in enumerate(list1) if value == min_value]\n"}
{"task_id": "MBPP/323", "completion": "\n    if cur >= n:\n        return\n\n    if out_of_place >= 0:\n        if (arr[cur] >= 0 and arr[out_of_place] >= 0) or (arr[cur] < 0 and arr[out_of_place] < 0):\n            return right_rotate(arr, n, out_of_place, cur + 1)\n\n        # Rotate the elements\n        arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n\n        # Update the out_of_place index\n        if out_of_place + 1 < n and arr[out_of_place + 1] < 0:\n            out_of_place += 1\n        else:\n            out_of_place = -1\n\n    if out_of_place == -1:\n        if arr[cur] >= 0:\n            out_of_place = cur\n\n    right_rotate(arr, n, out_of_place, cur + 1)\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 == 0), sum(test_tuple[i] for i in range(len(test_tuple)) if i % 2 != 0)\n"}
{"task_id": "MBPP/325", "completion": "\n    # Create a list to store the minimum squares for each number up to n\n    min_squares = [float('inf')] * (n + 1)\n    min_squares[0] = 0  # Base case: 0 can be represented by 0 squares\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:  # Check all squares less than or equal to i\n            min_squares[i] = min(min_squares[i], min_squares[i - j * j] + 1)\n            j += 1\n\n    return min_squares[n]\n"}
{"task_id": "MBPP/326", "completion": "\n    word_count = defaultdict(int)\n    \n    for word in test_list:\n        word_count[word] += 1\n    \n    most_common_word = max(word_count, key=word_count.get)\n    return most_common_word, word_count[most_common_word]\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or x == z:\n        return True\n    return False\n"}
{"task_id": "MBPP/328", "completion": "\n    if not list1 or m <= 0 or n <= 0:\n        return list1\n\n    m = m % len(list1)  # Normalize m\n    n = n % len(list1)  # Normalize n\n\n    # Rotate left by m\n    list1 = list1[m:] + list1[:m]\n\n    # Rotate left by n\n    list1 = list1[n:] + list1[:n]\n\n    return list1\n"}
{"task_id": "MBPP/329", "completion": "\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = r'\\b\\w{3,4}\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/331", "completion": "\n    # Count the total number of bits in the binary representation of n\n    total_bits = n.bit_length()\n    \n    # Count the number of set bits in n\n    set_bits = bin(n).count('1')\n    \n    # The number of unset bits is the total bits minus the set bits\n    unset_bits = total_bits - set_bits\n    \n    return unset_bits\n"}
{"task_id": "MBPP/332", "completion": "\n    frequency = {}\n    for char in str1:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency\n"}
{"task_id": "MBPP/333", "completion": "\n    return sorted(sub_li, key=lambda x: x[1])\n"}
{"task_id": "MBPP/334", "completion": "\n    return a + b > c and a + c > b and b + c > a\n"}
{"task_id": "MBPP/335", "completion": "\n    return (n / 2) * (2 * a + (n - 1) * d)\n"}
{"task_id": "MBPP/336", "completion": "\n    monthname1 = monthname1.lower()\n    if monthname1 == \"february\":\n        return True\n    return False\n"}
{"task_id": "MBPP/337", "completion": "\n    pattern = r'\\b\\w+\\W*$'\n    match = re.search(pattern, text)\n    return match.group(0) if match else None\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n                \n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    divisor_count = {}\n    \n    for i in range(x, y + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                if j in divisor_count:\n                    divisor_count[j] += 1\n                else:\n                    divisor_count[j] = 1\n\n    max_divisor = max(divisor_count, key=divisor_count.get)\n    return max_divisor\n"}
{"task_id": "MBPP/340", "completion": "\n    if len(lst) < 3:\n        return 0\n    \n    # Filter out non-positive numbers and sort the list\n    positive_nums = sorted(num for num in lst if num > 0)\n    \n    # Return the sum of the three smallest positive numbers\n    return sum(positive_nums[:3]) if len(positive_nums) >= 3 else 0\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n"}
{"task_id": "MBPP/342", "completion": "\n    if not list or not all(list):\n        return []\n\n    min_heap = []\n    current_max = float('-inf')\n\n    # Initialize the heap and find the initial maximum\n    for i in range(len(list)):\n        heappush(min_heap, Node(list[i][0], i, 0))\n        current_max = max(current_max, list[i][0])\n\n    min_range = float('inf')\n    range_start, range_end = -1, -1\n\n    while len(min_heap) == len(list):\n        current_min_node = heappop(min_heap)\n        current_min = current_min_node.value\n\n        # Update the range if the current range is smaller\n        if current_max - current_min < min_range:\n            min_range = current_max - current_min\n            range_start, range_end = current_min, current_max\n\n        # If there are more elements in the current list, add the next element to the heap\n        if current_min_node.index + 1 < len(list[current_min_node.list_num]):\n            next_value = list[current_min_node.list_num][current_min_node.index + 1]\n            heappush(min_heap, Node(next_value, current_min_node.list_num, current_min_node.index + 1))\n            current_max = max(current_max, next_value)\n        else:\n            break\n\n    return [range_start, range_end]\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m + 1):\n        if i % 2 != 0:  # Check if the number is odd\n            count += 1\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    if len(nums) < 2:\n        return []\n\n    differences = []\n    for i in range(len(nums) - 1):\n        differences.append(nums[i + 1] - nums[i])\n    \n    return differences\n"}
{"task_id": "MBPP/346", "completion": "\n    if n <= 0 or k <= 0:\n        return []\n\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            result.append(i * k)\n        else:\n            result.append((i + 1) * k - 1)\n\n    return result\n"}
{"task_id": "MBPP/347", "completion": "\n    count = 0\n    for size in range(1, min(m, n) + 1):\n        count += (m - size + 1) * (n - size + 1)\n    return count\n"}
{"task_id": "MBPP/348", "completion": "\n    if r < 0 or r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return bin_coff(n - 1, r - 1) + bin_coff(n - 1, r)\n"}
{"task_id": "MBPP/349", "completion": "\n    return all(char in '01' for char in string)\n"}
{"task_id": "MBPP/350", "completion": "\n    if not s:\n        return 0\n    \n    char_count = {}\n    \n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_occurrences = max(char_count.values())\n    \n    return len(s) - max_occurrences\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    \n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n        \n        if count[arr[i]] == k:\n            return arr[i]\n    \n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(set(str)) == len(str)\n"}
{"task_id": "MBPP/353", "completion": "\n    return [row[:n] + row[n+1:] for row in list1]\n"}
{"task_id": "MBPP/354", "completion": "\n    return a + (n - 1) * d\n"}
{"task_id": "MBPP/355", "completion": "\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 <= radius**2:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/356", "completion": "\n    return 180 - (a + b)\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(max(t) for t in test_list)\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: x % y if y != 0 else None, nums1, nums2))\n"}
{"task_id": "MBPP/359", "completion": "\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is non-negative\n    if discriminant < 0:\n        return False  # No real roots\n    \n    # Calculate the roots\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    \n    # Check if one root is twice the other\n    return root1 == 2 * root2 or root2 == 2 * root1\n"}
{"task_id": "MBPP/360", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n - 1) + get_carol(n - 2) + 1\n"}
{"task_id": "MBPP/361", "completion": "\n    return [lst for lst in list1 if lst]\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n\n    if not nums:\n        return None\n\n    count = Counter(nums)\n    max_item = max(count, key=count.get)\n    return max_item\n"}
{"task_id": "MBPP/363", "completion": "\n    return [(x[0] + K, x[1] + K) for x in test_list]\n"}
{"task_id": "MBPP/364", "completion": "\n    n = len(ch)\n    count1 = 0  # Count flips for pattern starting with '0'\n    count2 = 0  # Count flips for pattern starting with '1'\n\n    for i in range(n):\n        expected_char1 = '0' if i % 2 == 0 else '1'\n        expected_char2 = '1' if i % 2 == 0 else '0'\n        \n        if ch[i] != expected_char1:\n            count1 += 1\n        if ch[i] != expected_char2:\n            count2 += 1\n\n    return min(count1, count2)\n"}
{"task_id": "MBPP/365", "completion": "\n    if n < 0:\n        n = -n  # Make n positive if it's negative\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count if count > 0 else 1  # Return 1 for the case of 0\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n\n    max_product = float('-inf')\n    \n    for i in range(len(list_nums) - 1):\n        product = list_nums[i] * list_nums[i + 1]\n        if product > max_product:\n            max_product = product\n            \n    return max_product\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n"}
{"task_id": "MBPP/368", "completion": "\n    return test_tup * N\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * h * (l + w)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: x[1])\n"}
{"task_id": "MBPP/371", "completion": "\n    if left_element > right_element:\n        return left_element\n\n    mid = (left_element + right_element) // 2\n\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    sorted_nums = []\n    while nums:\n        sorted_nums.append(hq.heappop(nums))\n    return sorted_nums\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n"}
{"task_id": "MBPP/374", "completion": "\n    from itertools import permutations\n\n    # Generate all permutations of the string\n    perm = set(permutations(str))\n\n    # Print each permutation\n    for p in perm:\n        print(''.join(p))\n"}
{"task_id": "MBPP/375", "completion": "\n    if m == 0:\n        return n\n    return round(n / m) * m\n"}
{"task_id": "MBPP/376", "completion": "\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n        else:\n            result.append('custom_value')  # Replace duplicates with 'custom_value'\n    return tuple(result)\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, \"\")\n"}
{"task_id": "MBPP/378", "completion": "\n    if not test_list:\n        return test_list\n    return [test_list[-1]] + test_list[:-1]\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l * w + w * h + h * l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0 for _ in range(colnum)] for _ in range(rownum)], [[0 for _ in range(colnum)] for _ in range(rownum)]\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n    if not A:\n        return 0\n\n    left, right = 0, len(A) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        # Check if mid is greater than the next element\n        if mid < right and A[mid] > A[mid + 1]:\n            return mid + 1\n        # Check if mid is less than the previous element\n        if mid > left and A[mid] < A[mid - 1]:\n            return mid\n\n        # Decide which half to continue searching\n        if A[mid] >= A[left]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return 0\n"}
{"task_id": "MBPP/383", "completion": "\n    # Create a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # This is the binary representation: 10101010...\n\n    # Toggle the odd bits using XOR\n    result = n ^ mask\n\n    return result\n"}
{"task_id": "MBPP/384", "completion": "\n    if not arr:\n        return 0\n    \n    smallest = min(arr)\n    return arr.count(smallest)\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 2) + get_perrin(n - 1)\n"}
{"task_id": "MBPP/386", "completion": "\n    open_count = 0\n    close_count = 0\n\n    for char in s:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            if open_count > 0:\n                open_count -= 1\n            else:\n                close_count += 1\n\n    # Each unmatched open bracket needs a close bracket and vice versa\n    return (open_count + close_count) // 2\n"}
{"task_id": "MBPP/387", "completion": "\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n"}
{"task_id": "MBPP/391", "completion": "\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        raise ValueError(\"All lists must have the same length\")\n\n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]: {l2[i]: l3[i]}})\n    \n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize an array to store the maximum sums\n    max_sum = [0] * (n + 1)\n    max_sum[1] = 1\n    max_sum[2] = 2\n\n    for i in range(3, n + 1):\n        max_sum[i] = max(max_sum[i - 1] + i, max_sum[i - 2] + i)\n\n    return max_sum[n]\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n"}
{"task_id": "MBPP/395", "completion": "\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None\n"}
{"task_id": "MBPP/396", "completion": "\n    return bool(re.match(regex, string))\n"}
{"task_id": "MBPP/397", "completion": "\n    return sorted([a, b, c])[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    return tuple(tuple(a + b for a, b in zip(inner1, inner2)) for inner1, inner2 in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n\n    # Precompute factorials and their modular inverses\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = (fact[i - 1] * i) % p\n\n    def mod_inverse(a, p):\n        return pow(a, p - 2, p)\n\n    inv_fact_r = mod_inverse(fact[r], p)\n    inv_fact_n_r = mod_inverse(fact[n - r], p)\n\n    return (fact[n] * inv_fact_r % p) * inv_fact_n_r % p\n"}
{"task_id": "MBPP/403", "completion": "\n    pattern = re.compile(\n        r'^(https?://)?(www\\.)?([a-zA-Z0-9-]+\\.[a-zA-Z]{2,})(/[^\\s]*)?$'\n    )\n    return bool(pattern.match(str))\n"}
{"task_id": "MBPP/404", "completion": "\n    return a if a < b else b\n"}
{"task_id": "MBPP/405", "completion": "\n    return tuple1 in tuplex\n"}
{"task_id": "MBPP/406", "completion": "\n    return \"Even\" if x % 2 == 0 else \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    digits = list(str(n))\n    length = len(digits)\n\n    # Step 1: Find the pivot\n    pivot = -1\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            pivot = i\n            break\n\n    if pivot == -1:\n        return -1  # No bigger number can be formed\n\n    # Step 2: Find the rightmost successor to the pivot\n    for i in range(length - 1, pivot, -1):\n        if digits[i] > digits[pivot]:\n            # Step 3: Swap the pivot with the successor\n            digits[pivot], digits[i] = digits[i], digits[pivot]\n            break\n\n    # Step 4: Reverse the digits after the pivot\n    digits = digits[:pivot + 1] + digits[pivot + 1:][::-1]\n\n    return int(''.join(digits))\n"}
{"task_id": "MBPP/408", "completion": "\n    one element from the second array such that their sum is the smallest.\n\n    :param nums1: List[int] - first list of integers\n    :param nums2: List[int] - second list of integers\n    :param k: int - number of smallest pairs to return\n    :return: List[List[int]] - list of k smallest pairs\n    \"\"\"\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n\n    result = []\n    while k > 0 and min_heap:\n        sum_val, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[i] + nums2[j + 1], i, j + 1))\n        k -= 1\n\n    return result\n"}
{"task_id": "MBPP/409", "completion": "\n    if len(list1) < 2:\n        return None  # Not enough elements to form a pair\n\n    min_product = float('inf')\n    min_pair = (None, None)\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n\n    return min_pair\n"}
{"task_id": "MBPP/410", "completion": "\n    if not listval:\n        return None  # Return None if the list is empty\n\n    min_value = listval[0]  # Initialize min_value with the first element\n\n    for value in listval:\n        if value < min_value:\n            min_value = value  # Update min_value if a smaller value is found\n\n    return min_value\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word).capitalize()\n"}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n < 0 or n >= len(list1):\n        return None\n    return list1[n]\n"}
{"task_id": "MBPP/414", "completion": "\n    return any(item in list1 for item in list2)\n"}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return None\n\n    max1 = max(arr[0], arr[1])\n    max2 = min(arr[0], arr[1])\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2\n"}
{"task_id": "MBPP/416", "completion": "\n    if n < 2:\n        return n\n    \n    max_sum = n  # Initialize max_sum with the value of n\n    \n    for i in range(1, n // 2 + 1):\n        # Divide n into three parts: i, j, and k\n        j = n - i\n        for k in range(1, j // 2 + 1):\n            # Calculate the sum of the three parts\n            current_sum = breakSum(i) + breakSum(j - k) + breakSum(k)\n            max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n"}
{"task_id": "MBPP/417", "completion": "\n    from collections import defaultdict\n\n    grouped = defaultdict(list)\n    \n    for item in Input:\n        if item:  # Check if the tuple is not empty\n            grouped[item[0]].append(item)\n    \n    return dict(grouped)\n"}
{"task_id": "MBPP/418", "completion": "\n    max_sum = float('-inf')\n    max_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            current_sublist = lst[i:j+1]\n            current_sum = sum(current_sublist)\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sublist = current_sublist\n                \n    return max_sublist\n"}
{"task_id": "MBPP/419", "completion": "\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result\n"}
{"task_id": "MBPP/420", "completion": "\n    return sum(i**3 for i in range(2, 2*n + 1, 2))\n"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    total = sum(i**3 for i in range(1, n + 1))\n    average = total / n\n    return average\n"}
{"task_id": "MBPP/423", "completion": "\n    # Create a 2D array to store the maximum gold that can be collected\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    # Initialize the first column of dp with the gold values of the first column of the mine\n    for i in range(m):\n        dp[i][0] = gold[i][0]\n\n    # Fill the dp array\n    for j in range(1, n):\n        for i in range(m):\n            # Gold collected from the left, left-up diagonal, and left-down diagonal\n            left = dp[i][j - 1]\n            left_up = dp[i - 1][j - 1] if i > 0 else 0\n            left_down = dp[i + 1][j - 1] if i < m - 1 else 0\n\n            # Maximum gold collected at (i, j)\n            dp[i][j] = gold[i][j] + max(left, left_up, left_down)\n\n    # Find the maximum gold that can be collected from the last column\n    max_gold = 0\n    for i in range(m):\n        max_gold = max(max_gold, dp[i][n - 1])\n\n    return max_gold\n"}
{"task_id": "MBPP/424", "completion": "\n    return tuple(s[-1] for s in test_tuple)\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n"}
{"task_id": "MBPP/427", "completion": "\n    pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2  # Start with a big gap, then reduce the gap\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Shift earlier gap-sorted elements up until the correct location for my_list[i] is found\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2  # Reduce the gap for the next element\n\n    return my_list\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/430", "completion": "\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' cannot be zero for a parabola.\")\n    \n    directrix = (4 * a * c - b**2) / (4 * a)\n    return directrix\n"}
{"task_id": "MBPP/431", "completion": "\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2\n"}
{"task_id": "MBPP/433", "completion": "\n    return all(x < number for x in arr)\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    return match is not None\n"}
{"task_id": "MBPP/435", "completion": "\n    return abs(n) % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    negative_numbers = [num for num in list1 if num < 0]\n    return negative_numbers\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == (test_list[j][1], test_list[j][0]):\n                count += 1\n    return count\n"}
{"task_id": "MBPP/439", "completion": "\n    return list(set([item for sublist in L for item in sublist]))\n"}
{"task_id": "MBPP/440", "completion": "\n    adverb_pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(adverb_pattern, text)\n\n    adverbs_with_positions = {}\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs_with_positions[adverb] = position\n\n    return adverbs_with_positions\n"}
{"task_id": "MBPP/441", "completion": "\n    return 6 * (l ** 2)\n"}
{"task_id": "MBPP/442", "completion": "\n    if not nums:\n        return 0\n    \n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n            \n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest\n"}
{"task_id": "MBPP/444", "completion": "\n    return [(x[:K] if len(x) > K else x) for x in test_list]\n"}
{"task_id": "MBPP/445", "completion": "\n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/446", "completion": "\n    count = Counter(lst)\n    return {item: count[item] for item in tup}\n"}
{"task_id": "MBPP/447", "completion": "\n    return list(map(lambda x: x ** 3, nums))\n"}
{"task_id": "MBPP/448", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    \n    perrin = [0, 1, 2]\n    for i in range(3, n):\n        perrin.append(perrin[i-2] + perrin[i-3])\n    \n    return sum(perrin[:n])\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the lengths of the sides of the triangle\n    a = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    b = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n    c = ((x1 - x3) ** 2 + (y1 - y3) ** 2) ** 0.5\n\n    # Check if the triangle inequality holds\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/450", "completion": "\n    return [s for s in str if len(s) == l]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s+', '', text1)\n"}
{"task_id": "MBPP/452", "completion": "\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n"}
{"task_id": "MBPP/454", "completion": "\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return False  # February typically has 28 or 29 days\n    else:\n        raise ValueError(\"Invalid month number. Please enter a number between 1 and 12.\")\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    if not lst:\n        return []\n\n    min_sum = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            current_sum = sum(sublist)\n            if current_sum < min_sum:\n                min_sum = current_sum\n                min_sublist = sublist\n\n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub(r'[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [sublist[0] for sublist in lst if sublist]\n"}
{"task_id": "MBPP/461", "completion": "\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"}
{"task_id": "MBPP/462", "completion": "\n    from itertools import combinations\n\n    result = []\n    for r in range(len(list1) + 1):\n        result.extend(combinations(list1, r))\n    \n    return [list(combo) for combo in result]\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n"}
{"task_id": "MBPP/464", "completion": "\n    return all(value == list(dict.values())[0] for value in dict.values())\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v not in [None, '', [], {}]}\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = low + (high - low) // 2\n\n    # Check if mid is a peak element\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid]):\n        return mid\n\n    # If the left neighbor is greater, then the peak lies on the left side\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n\n    # If the right neighbor is greater, then the peak lies on the right side\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum < 0:\n        return \"Invalid input: Negative numbers cannot be converted to octal.\"\n    \n    if deciNum == 0:\n        return \"0\"\n    \n    octalNum = \"\"\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octalNum = str(remainder) + octalNum\n        deciNum //= 8\n    \n    return octalNum\n"}
{"task_id": "MBPP/468", "completion": "\n    if n < 2:\n        return 0\n\n    # Initialize the maximum product\n    max_product = 1\n    current_product = 1\n\n    # Sort the array to find increasing subsequences\n    arr.sort()\n\n    # Iterate through the sorted array\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i - 1]:  # Check for increasing subsequence\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = arr[i]\n\n    # Final check for the last subsequence\n    max_product = max(max_product, current_product)\n\n    return max_product\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0 or k == 0:\n        return 0\n\n    # If k is greater than n/2, then we can make as many transactions as we want\n    if k >= n // 2:\n        profit = 0\n        for i in range(1, n):\n            if price[i] > price[i - 1]:\n                profit += price[i] - price[i - 1]\n        return profit\n\n    # Create a table to store results of subproblems\n    dp = [[0] * n for _ in range(k + 1)]\n\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, dp[i - 1][j] - price[j])\n\n    return dp[k][n - 1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return [sum(pair) for pair in zip(test_tup, test_tup[1:])]\n"}
{"task_id": "MBPP/471", "completion": "\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n  # Keep the product within bounds of n to prevent overflow\n    return product\n"}
{"task_id": "MBPP/472", "completion": "\n    if not l:\n        return False\n    return sorted(l) == list(range(min(l), max(l) + 1))\n"}
{"task_id": "MBPP/473", "completion": "\n    return list(set(test_list1) & set(test_list2))\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(Counter(dict1).most_common())\n"}
{"task_id": "MBPP/476", "completion": "\n    if not nums:\n        return 0\n    \n    largest_value = max(nums)\n    total_sum = sum(nums)\n    \n    return total_sum, largest_value\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n //= 10\n    return n\n"}
{"task_id": "MBPP/480", "completion": "\n    char_count = {}\n    max_char = ''\n    max_count = 0\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n\n    return max_char\n"}
{"task_id": "MBPP/481", "completion": "\n    # Base Cases\n    if sum == 0:\n        return True\n    if n == 0:\n        return False\n\n    # If the last element is greater than the sum, ignore it\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    # Check if sum can be obtained by any of the following:\n    # (1) including the last element\n    # (2) excluding the last element\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum - set[n-1])\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r'[A-Z][a-z]+'\n    return re.findall(pattern, text)\n"}
{"task_id": "MBPP/483", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    n = 1\n    while True:\n        if factorial(n) % x == 0:\n            return n\n        n += 1\n"}
{"task_id": "MBPP/484", "completion": "\n    return [t for t in test_list1 if t not in test_list2]\n"}
{"task_id": "MBPP/485", "completion": "\n    str_n = str(n)\n    return str_n == str_n[::-1]\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    r = min(r, n - r)  # Take advantage of symmetry\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator *= (n - i)\n        denominator *= (i + 1)\n    return numerator // denominator\n"}
{"task_id": "MBPP/487", "completion": "\n    return tuple(sorted(tup, key=lambda x: x[-1]))\n"}
{"task_id": "MBPP/488", "completion": "\n    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a**2\n"}
{"task_id": "MBPP/489", "completion": "\n    if not arr:\n        return 0\n    \n    largest = max(arr)\n    return arr.count(largest)\n"}
{"task_id": "MBPP/490", "completion": "\n    return [pair for pair in test_list if pair[0] == pair[1][::-1]]\n"}
{"task_id": "MBPP/491", "completion": "\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    left, right = 0, len(item_list) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if item_list[mid] == item:\n            return mid  # Item found, return its index\n        elif item_list[mid] < item:\n            left = mid + 1  # Search in the right half\n        else:\n            right = mid - 1  # Search in the left half\n            \n    return -1  # Item not found\n"}
{"task_id": "MBPP/493", "completion": "\n    hexagons = []\n    dx = radius * 3/2\n    dy = math.sqrt(3) * radius\n\n    for x in range(startx, endx, int(dx)):\n        for y in range(starty, endy, int(dy)):\n            hexagon = [\n                (x, y),\n                (x + radius, y + radius * math.sqrt(3) / 2),\n                (x + radius, y - radius * math.sqrt(3) / 2),\n                (x, y - radius * math.sqrt(3)),\n                (x - radius, y - radius * math.sqrt(3) / 2),\n                (x - radius, y + radius * math.sqrt(3) / 2)\n            ]\n            hexagons.append(hexagon)\n\n    return hexagons\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(''.join(map(str, test_tup)), 2)\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    if n <= 0 or n > len(nums):\n        return []\n\n    # Create a max heap with the first n elements (invert values for max heap)\n    max_heap = [-num for num in nums[:n]]\n    hq.heapify(max_heap)\n\n    # Process the remaining elements\n    for num in nums[n:]:\n        if -max_heap[0] > num:  # Compare with the largest in the max heap\n            hq.heappop(max_heap)  # Remove the largest\n            hq.heappush(max_heap, -num)  # Add the new number\n\n    # Return the smallest n elements (invert back to original values)\n    return sorted([-h for h in max_heap])\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\n"}
{"task_id": "MBPP/498", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(map(str, list))\n"}
{"task_id": "MBPP/501", "completion": "\n    while y:\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n"}
{"task_id": "MBPP/503", "completion": "\n    if not nums:\n        return []\n\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    \n    return result\n"}
{"task_id": "MBPP/504", "completion": "\n    return sum(i**3 for i in range(1, n + 1))\n"}
{"task_id": "MBPP/505", "completion": "\n    non_zero = [x for x in A if x != 0]\n    zero_count = A.count(0)\n    return non_zero + [0] * zero_count\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        return 0\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    common_elements = [elem for elem in l1 if elem in l2]\n    return common_elements == [elem for elem in l2 if elem in l1]\n"}
{"task_id": "MBPP/509", "completion": "\n    if n < 1 or n % 2 == 0:\n        return \"Input must be a positive odd integer.\"\n    \n    total = 0\n    count = 0\n    \n    for i in range(1, n + 1, 2):\n        total += i\n        count += 1\n    \n    return total / count\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    count = 0\n\n    # Iterate through all possible subsequences\n    for i in range(1 << n):  # 2^n possible subsequences\n        product = 1\n        for j in range(n):\n            if i & (1 << j):  # Check if jth element is included\n                product *= arr[j]\n                if product >= k:  # If product exceeds k, break early\n                    break\n        if product < k:\n            count += 1\n\n    return count\n"}
