{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    groups = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n        \n        # When balance is zero, we have a complete group\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n\n    return groups\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return (integer_part, decimal_part)\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not numbers:\n        return float('nan')\n\n    # Calculate the median\n    sorted_numbers = sorted(numbers)\n    n = len(sorted_numbers)\n    mid = n // 2\n\n    if n % 2 == 0:\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        median = sorted_numbers[mid]\n\n    # Calculate the absolute deviations from the median\n    absolute_deviations = [abs(x - median) for x in numbers]\n\n    # Calculate the median of the absolute deviations\n    sorted_deviations = sorted(absolute_deviations)\n    m = len(sorted_deviations)\n    mid_dev = m // 2\n\n    if m % 2 == 0:\n        mad = (sorted_deviations[mid_dev - 1] + sorted_deviations[mid_dev]) / 2\n    else:\n        mad = sorted_deviations[mid_dev]\n\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in s:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    depths = [get_depth(group) for group in groups]\n    return sorted(depths, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    if not numbers:\n        return (0, 1)\n\n    total_sum = 0\n    total_product = 1\n    has_nonnegative = False\n\n    for number in numbers:\n        if number >= 0:\n            total_sum += number\n            total_product *= number\n            has_nonnegative = True\n\n    if not has_nonnegative:\n        total_product = 1\n\n    return (total_sum, total_product)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n\n    rolling_mins = []\n    current_min = float('inf')\n\n    for number in numbers:\n        current_min = min(current_min, number)\n        rolling_mins.append(current_min)\n\n    return rolling_mins\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return \"\"\n    \n    # Find the longest palindromic prefix\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            # Append the reverse of the suffix to the front\n            return string[i:][::-1] + string\n    \n    return string  # Fallback, should not reach here\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(a) != len(b):\n        raise ValueError(\"Strings must be of the same length\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('1' if char_a != char_b else '0')\n    \n    return ''.join(result)[::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    return min(strings, key=len)\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    return abs(a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[:i] for i in range(len(string), 0, -1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    note_durations = {\n        'o': 4,\n        '|': 2,\n        '.': 1\n    }\n    \n    notes = music_string.split()\n    durations = [note_durations[note] for note in notes if note in note_durations]\n    \n    return sorted(set(durations), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += len(substring)  # Move past the last found substring\n    \n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of words\n    words = numbers.split()\n\n    # Convert words to their corresponding numeric values\n    numeric_values = [num_dict[word] for word in words]\n\n    # Sort the numeric values in descending order\n    sorted_values = sorted(numeric_values, reverse=True)\n\n    # Convert sorted numeric values back to words\n    sorted_words = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in sorted_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/20", "completion": "\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        difference = abs(numbers[i + 1] - numbers[i])\n        if difference < min_difference:\n            min_difference = difference\n            closest_pair = (numbers[i + 1], numbers[i])\n\n    return (max(closest_pair), min(closest_pair))\n"}
{"task_id": "EvoEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    rescaled = [(num - min_val) / (max_val - min_val) for num in numbers]\n    return sorted(rescaled, reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n <= 1:\n        return None  # No divisors for numbers less than or equal to 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors[::-1]\n"}
{"task_id": "EvoEval/26", "completion": "\n    unique_numbers = list(set(numbers))\n    return unique_numbers[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    result = []\n    for char in string:\n        if exclusive_case == 'lower' and char.islower():\n            result.append(char)\n        elif exclusive_case == 'upper' and char.isupper():\n            result.append(char)\n        else:\n            if char.islower():\n                result.append(char.upper())\n            elif char.isupper():\n                result.append(char.lower())\n            else:\n                result.append(char)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted(num for num in l if num > 0)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"The list must contain at least two coefficients.\")\n    \n    # Using the bisection method to find a root\n    a, b = -1000, 1000  # Initial interval for the root\n    fa, fb = poly(xs, a), poly(xs, b)\n\n    if fa * fb > 0:\n        raise ValueError(\"The function must have different signs at the endpoints a and b.\")\n\n    while (b - a) / 2 > 1e-7:  # Precision threshold\n        midpoint = (a + b) / 2\n        fmid = poly(xs, midpoint)\n\n        if fmid == 0:\n            return midpoint  # Found exact root\n        elif fa * fmid < 0:\n            b = midpoint\n            fb = fmid\n        else:\n            a = midpoint\n            fa = fmid\n\n    return (a + b) / 2  # Return the midpoint as the root\n"}
{"task_id": "EvoEval/33", "completion": "\n    sorted_third = sorted((l[i] for i in range(len(l)) if i % 3 == 0), reverse=True)\n    result = l[:]\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third[j]\n            j += 1\n    return result\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not l:\n        return None\n    min_val = l[0]\n    for num in l:\n        if num < min_val:\n            min_val = num\n    return min_val\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '8' in str(i):\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort(reverse=True)\n    \n    result = l[:]\n    for i, val in enumerate(even_indices):\n        result[i * 2] = val\n    \n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # cycle elements back in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    count = 0\n    for fib in fibonacci():\n        if fib > 1 and is_prime(fib):\n            count += 1\n            if count == n:\n                return fib if fib % 2 != 0 else None\n"}
{"task_id": "EvoEval/40", "completion": "\n    seen = set()\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            required = 10 - (l[i] + l[j])\n            if required in seen:\n                return True\n        seen.add(l[i])\n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    left_cars = n\n    right_cars = n\n    collisions = min(left_cars, right_cars)\n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if 1 - number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if x == 0:\n        return 0\n    \n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return int(result)\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '1'\n    \n    a, b, c = 0, 0, 1\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    \n    return str(c)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    \n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char in vowels)\n"}
{"task_id": "EvoEval/52", "completion": "\n    return all(x <= t for x in l)\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1) and len(s0) == len(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n <= 1:\n        raise ValueError(\"Input must be greater than 1\")\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n  # n is prime\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    return sum(range(m, n + 1))\n"}
{"task_id": "EvoEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '[':\n            balance += 1\n        elif char == ']':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [coeff * power for power, coeff in enumerate(xs[::-1])][1:][::-1]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return -1\n    elif n == 4:\n        return 0\n    else:\n        fibfib_sequence = [0, 0, 1, -1, 0]\n        for i in range(5, n + 1):\n            next_value = fibfib_sequence[i - 3] + fibfib_sequence[i - 2] - 1\n            fibfib_sequence.append(next_value)\n        return fibfib_sequence[n]\n"}
{"task_id": "EvoEval/64", "completion": "\n    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    return str(count)\n"}
{"task_id": "EvoEval/65", "completion": "\n    # Convert the integer to a string to manipulate its digits\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    # Normalize the shift value\n    shift = shift % num_digits\n    \n    # Perform the circular shift\n    if shift > 0:\n        shifted_str = x_str[shift:] + x_str[:shift]\n    else:\n        shifted_str = x_str\n    \n    return shifted_str\n"}
{"task_id": "EvoEval/66", "completion": "\n    return sum(ord(char) for char in s if char.islower())\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Extract the number of apples and oranges from the string\n    parts = s.split(',')\n    apples = int(parts[0].split()[0])\n    oranges = int(parts[1].split()[0])\n    \n    # Calculate the number of mangoes\n    total_fruits = n + 1\n    mangoes = total_fruits - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd_value = float('inf')\n    index_of_smallest = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 1 and value < smallest_odd_value:\n            smallest_odd_value = value\n            index_of_smallest = index\n\n    if index_of_smallest == -1:\n        return []\n    \n    return [index_of_smallest, smallest_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n    from collections import Counter\n    \n    frequency = Counter(lst)\n    result = -1\n    \n    for num in frequency:\n        if num > 0 and frequency[num] >= num:\n            if result == -1 or num < result:\n                result = num\n                \n    return result\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        if not lst:\n            return []\n        \n        sorted_lst = []\n        lst.sort()\n        \n        while lst:\n            sorted_lst.append(lst.pop())  # Append the maximum\n            if lst:\n                sorted_lst.append(lst.pop(0))  # Append the minimum\n        \n        return sorted_lst\n"}
{"task_id": "EvoEval/71", "completion": "\n    def triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q, w):\n    # Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of elements is even\n    if sum(q) % 2 != 0:\n        return False\n    \n    # Check if the sum of elements is less than the maximum possible weight\n    if sum(q) >= w:\n        return False\n    \n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    \n    if total1 > total2:\n        return lst1\n    else:\n        return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    if a >= 100:\n        return False\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_factors = []\n    for i in range(2, a + 1):\n        while a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n            a //= i\n\n    return len(prime_factors) == 4\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n <= 1:\n        return (x == 1, 0 if x == 1 else None)\n\n    power = 0\n    while True:\n        result = n ** power\n        if result == x:\n            return (True, power)\n        elif result > x:\n            return (False, None)\n        power += 1\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n    return round(a ** (1/3)) ** 3 == a and a > 0\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_primes = {'0', '4', '6', '8', '9', 'A', 'C', 'E'}\n    count = 0\n    \n    for char in num:\n        if char in hex_primes:\n            count += 1\n            \n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) != 4:\n        return False\n    return len(set(s)) == 4\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.0:\n            letter_grades.append('B+')\n        elif gpa >= 2.7:\n            letter_grades.append('B')\n        elif gpa >= 2.0:\n            letter_grades.append('C+')\n        elif gpa >= 1.7:\n            letter_grades.append('C')\n        elif gpa >= 1.0:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    cleaned_string = ''.join(string.split())\n    length = len(cleaned_string)\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n < 1:\n        return 0\n\n    # Count numbers that start with 1\n    start_with_1 = 10**(n - 1)\n\n    # Count numbers that end with 2\n    end_with_2 = 10**(n - 1)\n\n    # Count numbers that start with 1 and end with 2\n    start_with_1_end_with_2 = 10**(n - 2) if n > 1 else 0\n\n    # Total count\n    total_count = start_with_1 + end_with_2 - start_with_1_end_with_2\n\n    return total_count\n"}
{"task_id": "EvoEval/84", "completion": "\n    digit_sum = sum(int(digit) for digit in str(N))\n    return hex(digit_sum)[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_word(word):\n        return ''.join(sorted(word, reverse=True))\n\n    words = s.split(' ')\n    sorted_words = [sort_word(word) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    \n    # Sort by row in descending order, and by column in ascending order\n    coordinates.sort(key=lambda coord: (-coord[0], coord[1]))\n    \n    return coordinates\n"}
{"task_id": "EvoEval/88", "completion": "\n    # Remove duplicates\n    unique_array = list(set(array))\n    \n    # Check if the sum of the first and last index is odd\n    if len(unique_array) == 0:\n        return unique_array\n    \n    first_last_sum = unique_array[0] + unique_array[-1]\n    \n    if first_last_sum % 2 == 1:\n        # Sort in ascending order\n        return sorted(unique_array)\n    else:\n        # Sort in descending order\n        return sorted(unique_array, reverse=True)\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = []\n    for char in s:\n        if char.isalpha():\n            # Shift character by 8 positions (2 * 4)\n            shift = 8\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encrypted.append(new_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    largest = None\n    second_largest = None\n    \n    for num in lst:\n        if largest is None or num > largest:\n            second_largest = largest\n            largest = num\n        elif num != largest and (second_largest is None or num > second_largest):\n            second_largest = num\n    \n    return second_largest\n"}
{"task_id": "EvoEval/91", "completion": "\n    sentences = re.split(r'[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I bom\"):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one number is equal to the sum of the absolute values of the other two\n        return x == abs(y) + abs(z) or y == abs(x) + abs(z) or z == abs(x) + abs(y)\n    return False\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char.islower():\n                swapped_char = char.upper()\n            else:\n                swapped_char = char.lower()\n\n            # Replace vowel if it's a vowel\n            if swapped_char in vowels:\n                # Find the new character 3 places ahead in the alphabet\n                new_char = chr((ord(swapped_char) - ord('A') + 3) % 26 + ord('A')) if swapped_char.isupper() else chr((ord(swapped_char) - ord('a') + 3) % 26 + ord('a'))\n                encoded_message.append(new_char)\n            else:\n                encoded_message.append(swapped_char)\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    smallest_prime = float('inf')\n    \n    for number in lst:\n        if is_prime(number) and number < smallest_prime:\n            smallest_prime = number\n\n    if smallest_prime == float('inf'):\n        return 0  # or some indication that no prime was found\n\n    return sum(int(digit) for digit in str(smallest_prime))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    \n    keys = list(dict.keys())\n    \n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n    \n    return all_lower or all_upper\n"}
{"task_id": "EvoEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n, 1, -1):\n        if is_prime(i):\n            primes.append(i)\n\n    return primes\n"}
{"task_id": "EvoEval/97", "completion": "\n    return (abs(a) % 10) + (abs(b) % 10)\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    for i in range(1, len(s), 2):  # Start from index 1 and step by 2 to get odd indices\n        if s[i].isupper():  # Check if the character at the odd index is uppercase\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n    # Convert the string to a float\n    num = float(value)\n    \n    # Check if the number is positive or negative\n    if num > 0:\n        return int(num + 0.5)  # Round up for positive numbers\n    else:\n        return int(num - 0.5)  # Round down for negative numbers\n"}
