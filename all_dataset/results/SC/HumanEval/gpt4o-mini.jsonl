{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    groups = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == '(':\n            if balance == 0 and current_group:\n                groups.append(''.join(current_group).strip())\n                current_group = []\n            current_group.append(char)\n            balance += 1\n        elif char == ')':\n            current_group.append(char)\n            balance -= 1\n            if balance == 0:\n                groups.append(''.join(current_group).strip())\n                current_group = []\n        else:\n            if current_group:\n                current_group.append(char)\n\n    if current_group:\n        groups.append(''.join(current_group).strip())\n\n    return [group for group in groups if group]\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    if not numbers:\n        return 0.0\n\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean_value) for x in numbers) / len(numbers)\n    \n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    levels = []\n    current_level = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_level += 1\n        elif char == ')':\n            current_level -= 1\n        elif char == ' ':\n            continue  # Ignore spaces between groups\n        else:\n            continue  # Ignore any other characters\n\n        if current_level < 0:\n            raise ValueError(\"Unmatched parentheses detected.\")\n\n        # Record the maximum level for the current group\n        if char == '(' and current_level > len(levels):\n            levels.append(current_level)\n\n    if current_level != 0:\n        raise ValueError(\"Unmatched parentheses detected.\")\n\n    return levels\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    \n    return (total_sum, total_product)\n"}
{"task_id": "HumanEval/9", "completion": "\n    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if not string:\n        return \"\"\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    \n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    if len(a) != len(b):\n        raise ValueError(\"Strings must be of the same length\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('1' if char_a != char_b else '0')\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    return max(strings, key=len)\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.': 1\n    }\n    \n    notes = music_string.split()\n    durations = []\n\n    for note in notes:\n        if note in note_duration:\n            durations.append(note_duration[note])\n        else:\n            durations.append(0)  # In case of an unrecognized note\n\n    return durations\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move one character forward to allow overlapping\n    \n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into words\n    words = numbers.split()\n\n    # Convert words to their corresponding numeric values\n    numeric_values = [num_dict[word] for word in words]\n\n    # Sort the numeric values\n    sorted_values = sorted(numeric_values)\n\n    # Convert sorted numeric values back to words\n    sorted_words = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in sorted_values]\n\n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n\n    # Sort the numbers to find the closest pair\n    sorted_numbers = sorted(numbers)\n    \n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    min_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n\n    for i in range(1, len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        return [0.0] * len(numbers)  # All values are the same, return a list of zeros.\n    \n    return [(num - min_val) / (max_val - min_val) for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return None\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    unique_numbers = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            unique_numbers.append(number)\n    return unique_numbers\n"}
{"task_id": "HumanEval/27", "completion": "\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # Using the bisection method to find a root\n    lower_bound = -1000\n    upper_bound = 1000\n    tolerance = 1e-7\n\n    while upper_bound - lower_bound > tolerance:\n        midpoint = (lower_bound + upper_bound) / 2\n        if poly(xs, midpoint) * poly(xs, lower_bound) < 0:\n            upper_bound = midpoint\n        else:\n            lower_bound = midpoint\n\n    return (lower_bound + upper_bound) / 2\n"}
{"task_id": "HumanEval/33", "completion": "\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    third_values = sorted(l[i] for i in third_indices)\n    \n    result = l[:]\n    for index, value in zip(third_indices, third_values):\n        result[index] = value\n    \n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_indices.sort()\n    \n    result = l[:]\n    even_index = 0\n    \n    for i in range(len(result)):\n        if i % 2 == 0:\n            result[i] = even_indices[even_index]\n            even_index += 1\n            \n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            a, b = b, a + b\n            yield a\n\n    count = 0\n    for fib in fibonacci():\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    n = len(l)\n    \n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    # Initialize the number of collisions\n    collisions = 0\n    \n    # Each car moving left will collide with each car moving right\n    # Since there are n cars moving left and n cars moving right,\n    # the total number of collisions will be n * n\n    collisions = n * n\n    \n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9.\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n\n    a, b, c, d = 0, 0, 1, 2\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    if not l:\n        return True\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    for i in range(2, n + 1):\n        while n % i == 0:\n            if is_prime(i):\n                largest_factor = i\n            n //= i\n    return largest_factor\n"}
{"task_id": "HumanEval/60", "completion": "\n    if n < 1:\n        return 0\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * coeff for i, coeff in enumerate(xs)][1:]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n\n    fibfib_sequence = [0, 0, 1, 2, 4]\n    \n    for i in range(5, n + 1):\n        next_value = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\n        fibfib_sequence.append(next_value)\n\n    return fibfib_sequence[n]\n"}
{"task_id": "HumanEval/64", "completion": "\n    s = s.lower()\n    vowels = 'aeiouy'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    str_x = str(x)\n    num_digits = len(str_x)\n    shift = shift % num_digits  # Normalize shift to the number of digits\n    if shift == 0:\n        return str_x\n    else:\n        return str_x[-shift:] + str_x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(char) for char in s if char.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Extract the number of apples and oranges from the string\n    parts = s.split()\n    apples = int(parts[0])  # First part is the number of apples\n    oranges = int(parts[2])  # Third part is the number of oranges\n\n    # Calculate the number of mangoes\n    total_fruits = n\n    mangoes = total_fruits - apples - oranges\n\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n\n    if smallest_index == -1:\n        return []\n    \n    return [smallest_even, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequency = {}\n    for num in lst:\n        if num > 0:\n            frequency[num] = frequency.get(num, 0) + 1\n\n    result = -1\n    for num, freq in frequency.items():\n        if freq >= num and num > result:\n            result = num\n\n    return result\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_lst = []\n    lst.sort()\n    \n    while lst:\n        sorted_lst.append(lst.pop(0))  # Append the minimum\n        if lst:\n            sorted_lst.append(lst.pop(-1))  # Append the maximum\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    if not isinstance(q, list) or len(q) == 0:\n        return False\n\n    total_weight = sum(q)\n    max_weight = max(q)\n\n    # Check if the list is balanced (palindrome)\n    is_balanced = q == q[::-1]\n\n    return is_balanced and total_weight <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    if not lst1 and not lst2:\n        return []\n    \n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2 if total_chars_lst2 < total_chars_lst1 else lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    if a >= 100:\n        return False\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n <= 1:\n        return x == 1\n    \n    power = 1\n    while power < x:\n        power *= n\n    \n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    \n    for char in num:\n        if char in prime_hex_digits:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) != 3:\n        return False\n    return len(set(s)) == 3\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa >= 3.7:\n            letter_grades.append('A')\n        elif gpa >= 3.0:\n            letter_grades.append('A-')\n        elif gpa >= 2.7:\n            letter_grades.append('B+')\n        elif gpa >= 2.0:\n            letter_grades.append('B')\n        elif gpa >= 1.7:\n            letter_grades.append('B-')\n        elif gpa >= 1.3:\n            letter_grades.append('C+')\n        elif gpa >= 1.0:\n            letter_grades.append('C')\n        elif gpa >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n < 1:\n        return 0\n    \n    # The first digit must be 1, and there are 10 options (0-9) for each of the remaining (n-1) digits\n    count = 10 ** (n - 1)\n    \n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    \n    # Sort by row (ascending) and then by column (descending)\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    if (array[0] + array[-1]) % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 4  # Shift by 2 multiplied by 2\n            if char.islower():\n                encrypted += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                encrypted += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"The\"):\n            boredom_count += 1\n\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    if all(isinstance(i, int) for i in (x, y, z)):\n        return x == y + z or y == x + z or z == x + y\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case_and_replace_vowels(char):\n        if char.isalpha():\n            # Swap case\n            swapped = char.swapcase()\n            # Replace vowels\n            if swapped.lower() in 'aeiou':\n                # Find the position in the alphabet and replace\n                new_char = chr(((ord(swapped.lower()) - ord('a') + 2) % 26) + ord('a'))\n                return new_char.upper() if swapped.isupper() else new_char\n            return swapped\n        return char\n\n    encoded_message = ''.join(swap_case_and_replace_vowels(char) for char in message)\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = None\n\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n\n    if largest_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not isinstance(dict, dict):\n        return False\n\n    keys = dict.keys()\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n\n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (abs(a) % 10) * (abs(b) % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):  # Iterate over even indices\n        if s[i].isupper():  # Check if the character is uppercase\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    if not isinstance(value, str):\n        raise ValueError(\"Input must be a string representing a number.\")\n    \n    try:\n        number = float(value)\n    except ValueError:\n        raise ValueError(\"Input string must be convertible to a float.\")\n    \n    if number > 0:\n        return int(number + 0.5)  # Round up for positive numbers\n    else:\n        return int(number - 0.5)  # Round down for negative numbers\n"}
{"task_id": "HumanEval/100", "completion": "\n    if n <= 0:\n        return []\n\n    stones = []\n    current_stones = n\n\n    for i in range(n):\n        stones.append(current_stones)\n        if current_stones % 2 == 0:\n            current_stones += 2  # next even\n        else:\n            current_stones += 2  # next odd\n\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "\n    import re\n    return re.findall(r'\\S+', s)\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    \n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n            \n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    total = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total / count\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    \n    # Filter and sort the array\n    filtered_arr = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Mapping of digits to their names\n    digit_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Create the result list\n    result = []\n    current_str = \"\"\n    \n    for num in filtered_arr:\n        if num in digit_to_name:\n            current_str += digit_to_name[num]\n        if len(current_str) > 0 and (num == 1 or num == 9 or num == 8 or num == 7 or num == 6 or num == 5 or num == 4 or num == 3 or num == 2):\n            result.append(current_str)\n            current_str = \"\"\n    \n    if current_str:\n        result.append(current_str)\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        result = 1\n        for j in range(2, i + 1):\n            result *= j\n        return result\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    \n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n\n    n = len(arr)\n    # Create a sorted version of the array\n    sorted_arr = sorted(arr)\n\n    # Check for each possible right shift\n    for shift in range(n):\n        # Create the shifted array\n        shifted_arr = arr[-shift:] + arr[:-shift]\n        if shifted_arr == sorted_arr:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    even_count_lst1 = sum(1 for x in lst1 if x % 2 == 0)\n    odd_count_lst1 = len(lst1) - even_count_lst1\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    \n    from collections import Counter\n    \n    # Split the string into letters\n    letters = test.split()\n    \n    # Count the occurrences of each letter\n    count = Counter(letters)\n    \n    # Find the maximum occurrence\n    max_count = max(count.values())\n    \n    # Create a dictionary for letters with the maximum occurrence\n    result = {letter: max_count for letter, cnt in count.items() if cnt == max_count}\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Remove characters from s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count} in the string {string} of the input.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    if not s:\n        return []\n\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        return sum(1 for char in word if char in consonants)\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    \n    # Iterate through the word in reverse\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check for consonants before the vowel\n            for j in range(i - 1, 0, -1):\n                if word[j] not in vowels:\n                    closest_vowel = word[i]\n                    return closest_vowel\n                if word[j] in vowels:\n                    break\n    \n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    open_count = lst[0].count('(') + lst[1].count('(')\n    close_count = lst[0].count(')') + lst[1].count(')')\n\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    if k == 0:\n        return []\n    \n    # Sort the array in descending order and take the first k elements\n    max_k_elements = sorted(arr, reverse=True)[:k]\n    \n    # Return the sorted list of the maximum k numbers\n    return sorted(max_k_elements)\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(x for x in arr[:k] if 10 <= x < 100)\n"}
{"task_id": "HumanEval/123", "completion": "\n    if n < 1:\n        return []\n\n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)  # Include the final 1 in the sequence\n\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date or len(date) != 5 or date[2] != '-':\n        return False\n\n    month = int(date[:2])\n    day = int(date[3:])\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29  # Leap year check can be added if needed\n\n    return False\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    \n    seen = set()\n    for i in range(len(lst)):\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i])\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Find the intersection\n    start_intersection = max(start1, start2)\n    end_intersection = min(end1, end2)\n\n    # Check if there is an intersection\n    if start_intersection > end_intersection:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = end_intersection - start_intersection\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if the length of the intersection is prime\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    total_sum = 0\n    for num in arr:\n        if num > 0:\n            total_sum += num\n        elif num < 0:\n            total_sum -= abs(num)\n    \n    return total_sum\n"}
{"task_id": "HumanEval/129", "completion": "\n    from collections import deque\n\n    def bfs(start_x, start_y):\n        queue = deque([(start_x, start_y, [grid[start_x][start_y]])])\n        visited = set((start_x, start_y))\n        min_path = None\n\n        while queue:\n            x, y, path = queue.popleft()\n\n            if len(path) == k:\n                if min_path is None or path < min_path:\n                    min_path = path\n                continue\n\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    new_path = path + [grid[nx][ny]]\n                    queue.append((nx, ny, new_path))\n\n        return min_path\n\n    result = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = bfs(i, j)\n            if result is None or (path is not None and path < result):\n                result = path\n\n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    \n    tribonacci = [1, 3, 2]\n    for i in range(3, n + 1):\n        next_value = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n        tribonacci.append(next_value)\n    \n    return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        d = int(digit)\n        if d % 2 != 0:  # Check if the digit is odd\n            product *= d\n            has_odd = True\n            \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    nested_found = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            if len(stack) > 1:\n                nested_found = True\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n\n    return nested_found and not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(x)**2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt or txt[-1] == ' ':\n        return False\n    last_char = txt.strip()[-1]\n    return last_char.isalpha() and (len(txt.strip().split()) == 1 or txt.strip()[-2] == ' ')\n"}
{"task_id": "HumanEval/135", "completion": "\n    if not arr:\n        return -1\n    \n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] > arr[i - 1]:\n            return i\n    \n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    return max(a, b)\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8:\n        return False\n    return n % 2 == 0\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 0:\n        return None\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    def file_name_check(file_name):\n        # Check for valid characters and structure\n        if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$', file_name):\n            return 'No'\n        \n        # Split the file name into name and extension\n        name, extension = file_name.rsplit('.', 1)\n        \n        # Check for the number of digits\n        digit_count = sum(c.isdigit() for c in name)\n        if digit_count > 3:\n            return 'No'\n        \n        # Check if the extension is valid\n        valid_extensions = ['txt', 'exe', 'dll']\n        if extension not in valid_extensions:\n            return 'No'\n        \n        return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    # Calculate the product of the fractions\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    # Check if the product is a whole number\n    return product_denominator == 0 or product_numerator % product_denominator == 0\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_first_digits_odd(num):\n        str_num = str(abs(num))  # Convert to string and handle negative numbers\n        return int(str_num[0]) % 2 == 1 and int(str_num[1]) % 2 == 1 if len(str_num) > 1 else int(str_num[0]) % 2 == 1\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_first_digits_odd(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % 3 == 0:\n                count += 1\n                \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_index = planets.index(planet1)\n    end_index = planets.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(planets[start_index + 1:end_index])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(g - s) for s, g in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = \"\"\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    # Check if the length of b is greater than a\n    if len(b) > len(a):\n        return False\n    \n    # Create a new string that is the concatenation of b with itself\n    b_rotated = b + b\n    \n    # Check if a contains any substring of b_rotated that is of length equal to b\n    return any(b_rotated[i:i+len(b)] in a for i in range(len(b)))\n"}
{"task_id": "HumanEval/155", "completion": "\n    num = abs(num)  # Consider absolute value for counting digits\n    even_count = 0\n    odd_count = 0\n    \n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n\n    roman_numeral = \"\"\n    for i in range(len(val)):\n        while number >= val[i]:\n            roman_numeral += syms[i]\n            number -= val[i]\n    \n    return roman_numeral\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_unique_word):\n            max_unique_count = unique_count\n            max_unique_word = word\n\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = number\n    if remaining > 0:\n        total_eaten += min(need, remaining)\n        remaining -= min(need, remaining)\n    else:\n        total_eaten += 0  # No remaining carrots to eat\n\n    return [total_eaten, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"The length of operator list must be one less than the length of operand list.\")\n    \n    expression = str(operand[0])\n    \n    for i in range(len(operator)):\n        expression += f\" {operator[i]} {operand[i + 1]}\"\n    \n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
