{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    factor = 1\n    has_string = False\n    for item in items:\n        if isinstance(item, str):\n            if not has_string:\n                factor *= 15\n                has_string = True\n        else:\n            total_cost += 50 * item\n            if item > 5:\n                total_cost += 10\n    if location == 'Local':\n        pass\n    elif location == 'National':\n        factor *= 1.5\n    elif location == 'International':\n        factor *= 25\n    total_cost *= factor\n    return f\"{total_cost:.2f}\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n        else:\n            weight = item\n        if weight > 5:\n            total_cost += 10\n        total_cost += 50\n    if location == 'Local':\n        total_cost *= 1\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 25\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, shift: int) -> str:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                shift_amount = shift % 26\n                if char.islower():\n                    encrypted_word += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n                else:\n                    encrypted_word += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    if isinstance(key, str):\n        shift = sum(ord(char) for char in key)\n    else:\n        shift = key\n\n    return [caesar_cipher(word.lower(), shift) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def helper(s: str) -> List[str]:\n        if not s:\n            return ['']\n        if s[0] == '0':\n            return []\n        if len(s) == 1:\n            return [chr(int(s) + ord('a') - 1)]\n        res = helper(s[1:])\n        if int(s[:2]) <= 26:\n            res += helper(s[2:])\n        return [s[0] + r for r in res]\n    \n    return helper(input_string)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = max(candles)\n    lit_candles = 0\n    for candle in candles:\n        if candle == max_height:\n            lit_candles += 1\n    return lit_candles\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while row < len(matrix) and col < len(matrix[0]):\n        result.append(matrix[row][col])\n        if col == 0:\n            while row < len(matrix) - 1 and col < len(matrix[0]):\n                row += 1\n                result.append(matrix[row][col])\n        else:\n            while row < len(matrix) and col > 0:\n                col -= 1\n                result.append(matrix[row][col])\n        row += 1\n        col += 1\n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\r\n        if direction == 0:\r\n            y += 1\r\n        elif direction == 1:\r\n            x += 1\r\n        elif direction == 2:\r\n            y -= 1\r\n        elif direction == 3:\r\n            x -= 1\r\n        if x == 0 and y == 0:\r\n            return 'Shang found'\r\n    return 'Shangri not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n    painter_index = canvas.index('P')\n    empty_spaces = canvas.count('-')\n    painted_spaces = canvas.count('*')\n    if painted_spaces % empty_spaces == 0:\n        return 'Invalid canvas'\n    if painted_spaces + empty_spaces % 2 == 0:\n        return 'Invalid canvas'\n    new_canvas = canvas[:painter_index] + '*' * empty_spaces + canvas[painter_index + empty_spaces:]\n    return new_canvas\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\r\n    sounds = []\r\n    animal_count = {}\r\n    \r\n    for animal in animal_string.split():\r\n        if animal in animals:\r\n            sound = animals[animal]\r\n            sounds.append(sound)\r\n            \r\n            if animal in animal_count:\r\n                animal_count[animal] += 1\r\n            else:\r\n                animal_count[animal] = 1\r\n                \r\n            if animal_count[animal] > 2:\r\n                sounds.pop()\r\n                animal_count[animal] -= 1\r\n                \r\n            if len(animal_count) > 5:\r\n                sounds.pop()\r\n                animal_count[animal] -= 1\r\n                \r\n    return sounds.count('meow'), sounds.count('woof'), sounds.count('chirp')\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and from {location}Marvelous!\"\n    else:\n        return f\"Oh, are those {fruits[0]}, {fruits[1]} and from {location}Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_occurrence = max(count.values())\n    min_element = min([element for element, occurrence in count.items() if occurrence == max_occurrence])\n    return sum(flux_values) * min_element\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    elem_count = {}\n    for elem in elems:\n        if elem in elem_count:\n            elem_count[elem] += 1\n        else:\n            elem_count[elem] = 1\n    \n    rarest_elem = min(elem_count, key=elem_count.get)\n    return rarest_elem\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                alias += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias.capitalize()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        sum = 1\n        for i in range(3, n + 1):\n            a, b = b, a + b\n            sum += b\n        return sum\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/17", "completion": "\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if sum(int(digit) for digit in str(num)) == 7 and num % 7 == 0:\n            count += 1\n            if count == n:\n                return num\n        num += 1\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    vampires = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 2:\n                for k in range(len(m[i])):\n                    if m[i][k] == 1 and k != j:\n                        vampires += 1\n                for k in range(len(m)):\n                    if m[k][j] == 1 and k != i:\n                        vampires += 1\n    return vampires\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    ascending = ','.join(str(i) for i in range(1, n + 1))\n    descending = ','.join(str(i) for i in range(n - 1, 0, -1))\n    return [ascending + ',' + descending]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 131, in <module>\n  File \"<string>\", line 129, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_valid(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid)):\n                if grid[i][j] == word[0]:\n                    for k in range(len(word)):\n                        if i + k < len(grid) and grid[i + k][j] == word[k]:\n                            if k == len(word) - 1:\n                                return True\n                        elif j + k < len(grid) and grid[i][j + k] == word[k]:\n                            if k == len(word) - 1:\n                                return True\n                        else:\n                            break\n        return False\n\n    for word in words:\n        if not is_valid(word, grid):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    # Conversion factor from km to light years\n    km_to_ly = 9.461e-12\n    \n    # Calculate distance traveled\n    distance = t * v * km_to_ly\n    \n    return distance\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 128, in <module>\n  File \"<string>\", line 126, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_num(n):\n        count = 0\n        num = 2\n        while True:\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            prime_num_val = prime_num(ord(char) - ord('a') + 1)\n            result += str(prime_num_val)\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for letter in english_word:\n        alien_word += alien_dict[letter]\n    return alien_word\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        words = sentence.split()\n        frequency = words.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence if max_frequency > 0 else (0, \"\")\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = [(start, [])]\n    visited = set()\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        if current in visited:\n            continue\n        visited.add(current)\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < len(maze) and 0 <= ny < len(maze[0]) and maze[nx][ny] == 0:\n                queue.append(((nx, ny), path + [get_direction(dx, dy)]))\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 65, in <module>\n  File \"<string>\", line 63, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 34, in pathfinder\n                queue.append(((nx, ny), path + [get_direction(dx, dy)]))\nNameError: name 'get_direction' is not defined\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    tax = 0\n    if taxable_income > 13000:\n        tax += (13000 - 10000) * 0.15\n        taxable_income -= 13000\n    if taxable_income > 4500:\n        tax += (4500 - 2500) * 0.25\n        taxable_income -= 4500\n    if taxable_income > 10000:\n        tax += (10000 - 0) * 0.15\n        taxable_income -= 10000\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(substring: str) -> bool:\n        return substring == substring[::-1]\n\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if is_palindrome(s[i:j]):\n                palindromes.add(s[i:j])\n\n    return sorted(list(palindromes))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    queue = [(start, [start])]\n    visited = set([start])\n\n    while queue:\n        current, path = queue.pop(0)\n        if current == end:\n            return path\n        for dx, dy in directions:\n            nx, ny = current[0] + dx, current[1] + dy\n            if 0 <= nx < rows and 0 <= ny < cols and maze[nx][ny] == 1 and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Your code here\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    count = 0\n    for stone in magic_stones:\n        count += magical_staircase(n - stone, magic_stones)\n    return count\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = []\n    for day in range(n):\n        if day < m - 1:\n            transformation_percentages.append(day * 10)\n        elif day == m - 1:\n            transformation_percentages.append(day * 20)\n        else:\n            transformation_percentages.append(day * 10 - (day - m) * 10)\n    return transformation_percentages\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email.startswith(\"@\") or email.endswith(\"@\"):\r\n        return False\r\n    username, domain = email.split(\"@\")\r\n    if \".\" not in domain or domain.startswith(\".\") or domain.endswith(\".\"):\r\n        return False\r\n    return True\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 133, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 19, in validate_email_structure\n    username, domain = email.split(\"@\")\r\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 132, in <module>\n  File \"<string>\", line 130, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\"\n    }\n    for emot, unicode_em in emoticons.items():\n        sentence = sentence.replace(emot, unicode_em)\n    return sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    from collections import defaultdict\n    import heapq\n    \n    # Create a dictionary to store the power level of each potion\n    potion_dict = defaultdict(int)\n    for potion in potions:\n        name, power = potion.split()\n        potion_dict[name] = int(power)\n    \n    # Create a min heap to store the potential potions\n    heap = []\n    for potion in potion_dict:\n        heapq.heappush(heap, (potion_dict[potion], potion))\n    \n    # Start mixing potions\n    result = []\n    while heap and target > 0:\n        power, potion = heapq.heappop(heap)\n        if target >= power:\n            result.append(potion)\n            target -= power\n        else:\n            break\n    \n    # Return the result\n    return sorted(result) if target == 0 else []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 157, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 27, in potion_mixing\n        name, power = potion.split()\nValueError: too many values to unpack (expected 2)\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\n        if 5 in player_input:\n            player_input.remove(5)\n            if player_input:\n                return True, max(player_input)\n            else:\n                return True, -1\n        else:\n            return False, None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 1\n    duration_trip = distance / speed\n    remaining_fuel = fuel - fuel_consumption * duration_trip\n    if remaining_fuel >= 0:\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q, w, e):\n        total_weight = sum(q)\n        return total_weight <= w + e\n    \n    # Test cases\n    assert fairy_tale_transport([5, 10, 15], 5, 20) == False\n    assert fairy_tale_transport([10, 20, 30], 5, 10) == False\n    assert fairy_tale_transport([1, 5, 2, 3], 1, 5) == True\n    assert fairy_tale_transport([5, 10, 15, 15], 1, 5) == True\n    \n    print(\"All test cases passed.\")\n    \nfairy_tale_transport()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 30, in <module>\nfairy_tale_transport()\nTypeError: fairy_tale_transport() missing 3 required positional arguments: 'q', 'w', and 'e'\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i-1, -1, -1):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test[0]:\n                if word[0].isalpha():\n                    secret += word[0].lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test[0]:\n                if word[0].isalpha():\n                    secret += word[0].lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test[0]:\n                if word[0].isalpha():\n                    secret += word[0].lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test[0]:\n                if word[0].isalpha():\n                    secret += word[0].lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test[0]:\n                if word[0].isalpha():\n                    secret += word[0].lower()\n            result.append(secret)\n        return result\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            secret = ''\n            for word in test[0]:\n                if word[0].isalpha():\n                    secret += word[", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 73\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 193)\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quant = log[\"quant\"]\n            if item in inventory:\n                inventory[item] += quant\n            else:\n                inventory[item] = quant\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quant = log[\"quant\"]\n            if item in inventory:\n                inventory[item] += quant\n            else:\n                inventory[item] = quant\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quant = log[\"quant\"]\n            if item in inventory:\n                inventory[item] += quant\n            else:\n                inventory[item] = quant\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n    \"\"\"\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log[\"item\"]\n            quant = log[\"quant\"]\n            if item in inventory:\n                inventory[item] += quant\n            else:\n                inventory[item] = quant\n            if inventory[item] <= 0:\n                del inventory[item]\n        return inventory\n    \"\"\"\n    def wizard_inventory(", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 80\n    def wizard_inventory(\n    def wizard_inventory(\n                        ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', 'I00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', 'N10': 'N', '111': 'O', '0110': 'P', '1101010': 'Q', '000': 'R', '1': 'S', 'U001': 'T', 'V0001': 'U', '011': 'V', 'X1001': 'W', '1011': 'X', '1100': 'Y', '1111': 'Z', '01111': '1', '200111000110000100000': '2', '10000': '3', '1100011100': '4', '11110': '5', '011111': '6', '00011': '7', '00001': '8', '10000': '9'}\n    decoded_message = ''\n    current_code = ''\n    for char in msg:\n        if char == ' ':\n            if current_code:\n                decoded_message += morse_code_dict[current_code]\n                current_code = ''\n        elif char == '/':\n            if current_code:\n                decoded_message += morse_code_dict[current_code]\n                current_code = ''\n            decoded_message += ' '\n        else:\n            current_code += char\n    if current_code:\n        decoded_message += morse_code_dict[current_code]\n    return decoded_message.upper()", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 159, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 42, in morse_decoder\n                decoded_message += morse_code_dict[current_code]\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ' ': ' '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return string\n    \n    result = ''\n    for i in range(len(string)):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    \n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort()\n    total_orders = sum(orders)\n    max_orders = 0\n    for i in range(1, total_orders + 1):\n        if total_orders % i == 0:\n            batch_size = total_orders // i\n            if batch_size <= n and i <= m:\n                max_orders = max(max_orders, i)\n    return max_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        char = message[i]\n        if char.isalpha():\n            shift_amount = (i % shift) + 1\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            new_char = chr((ord(char) - base + shift_amount) % 26 + base)\n            result += new_char\n        else:\n            result += char\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    result = \"\"\n    for char in s:\n        if char != \" \":\n            result += morse_code_dict[char] + \" \"\n        else:\n            result += \"/ \"\n    return result.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            if letter.isalpha():\n                transformed_dish += magic_spell[i % len(magic_spell)]\n            else:\n                transformed_dish += letter\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for word in earth_phrase.split():\n        new_word = ''\n        for letter in word:\n            if letter in vowels:\n                new_word += vowels[(vowels.index(letter) + 1) % len(vowels)]\n            elif letter in consonants:\n                new_word += consonants[(consonants.index(letter) + 1) % len(consonants)]\n                if letter == 'z':\n                    new_word = 'b' + new_word\n            else:\n                new_word += letter\n        if new_word[0] in vowels:\n            new_word = 'xy' + new_word\n        else:\n            new_word = 'yz ' + new_word\n        translated_phrase += new_word.capitalize() + ' '\n    return translated_phrase.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    sugar_count = 0\n    happy_ants = 0\n    for ant in ant_positions:\n        ant_position, ant_direction = ant\n        if ant_direction == \"right\":\n            for i in range(ant_position, path_length):\n                if i in sugar_locations:\n                    sugar_count += 1\n                    break\n        else:\n            for i in range(ant_position, -1, -1):\n                if i in sugar_locations:\n                    sugar_count += 1\n                    break\n        if sugar_count > 0:\n            happy_ants += 1\n    return happy_ants\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char.isalpha():\n                if char.lower() in vowels:\n                    result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                else:\n                    result += consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n            else:\n                result += char\n        else:\n            result += char.swapcase()\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in reci.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 133, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 20, in recipe_converter\n    for ingredient, quantity in reci.items():\nNameError: name 'reci' is not defined\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while pyramid[-1] > 0:\n        if pyramid[-1] % 2 == 0:\n            pyramid.append(pyramid[-1] - 2)\n        else:\n            pyramid.append(pyramid[-1] - 3)\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if is_prime(num) and num % divisor == 0:\n            result.append(num)\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            for action, ingredient in order[food].items():\n                if action == \"remove\":\n                    if ingredient in new_ingredients:\n                        new_ingredients.remove(ingredient)\n                elif action == \"add\":\n                    new_ingredients.append(ingredient)\n            final_order[food] = new_ingredients\n        else:\n            final_order[food] = ingredients\n    return final_order\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    prime_numbers = [i for i in range(2, n+1) if is_prime(i)]\n    result = []\n\n    for i in range(len(prime_numbers)):\n        for j in range(i+1, len(prime_numbers)):\n            if is_anagram(prime_numbers[i], prime_numbers[j]):\n                result.append((prime_numbers[i], prime_numbers[j]))\n\n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    for customer in customers:\n        total_calories[customer] = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories[customer] += meal['calories']\n    return total_calories\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    encrypted_string = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char.lower()) - ord('a') + n) % 26) + ord('a'))\n            encrypted_string += shifted_char\n            if shifted_char.lower() in vowels:\n                vowel_count += 1\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        digit_count = sum(c.isdigit() for c in string)\n        result.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {digit_count} tales a day\")\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 133, in <module>\n  File \"<string>\", line 131, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the number of chambers in the pyramid\n    num_chambers = len(grid)\n    \n    # Calculate the number of treasures in each chamber\n    num_treasures = [sum(row) for row in grid]\n    \n    # Calculate the total number of treasures\n    total_treasures = sum(num_treasures)\n    \n    # Calculate the number of trips needed to collect all treasures\n    num_trips = math.ceil(total_treasures / bag_capacity)\n    \n    return num_trips\r\n\r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    return ''.join(cipher.get(c, c) for c in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def createpyramid(lst):\n        if not lst:\n            return []\n        max_len = len(str(max(lst)))\n        pyramid = []\n        for i in range(len(lst)):\n            level = '#' * lst[i]\n            pyramid.append(level.center(max_len * (i + 1)))\n        return pyramid[::-1]\n\n    # Test cases\n    print(createpyramid([3, 2, 1]))  # Output: ['#', '###', '#####']\n    print(createpyramid([4, 2, 3]))  # Output: ['###', '#####', '#######']\n    print(createpyramid([1, 2, 3, 4]))  # Output: ['#', '###', '#####', '#######']\n    print(createpyramid([]))  # Output: []\n    print(createpyramid([5]))  # Output: ['#####']\n    print(createpyramid([2, 4, 6, 8, 10]))  # Output: ['#######', '#########', '###########', '#############', '###############']\n    print(createpyramid([1, 3, 5, 7, 9, 11]))  # Output: ['#', '###', '#####', '#######', '#########', '###########']\n    print(createpyramid([2, 4, 6, 8, 10, 12, 14]))  # Output: ['#######', '#########', '###########', '#############', '###############', '###############', '###############']\n    print(createpyramid([1, 3, 5, 7, 9, 11, 13, 15, 17]))  # Output: ['#', '###', '#####', '#######', '#########', '###########', '#############', '###############', '###############']\n    print(createpyramid([2, ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 39\n    print(createpyramid([2, \n    print(createpyramid([2, \n                        ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(n, k):\n        points = 0\n        while n > 1:\n            if n % k == 0:\n                points += n // k\n                n //= k\n            else:\n                break\n        return points\n\n    sequence_points = [(num, count_points(num, k)) for num in sequence]\n    return sorted(sequence_points, key=lambda x: x[1], reverse=True)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    x_pattern = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                x_pattern.append(mat[i][j])\n    return x_pattern\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(days):\n        for j in range(i+1, days+1):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 29, in find_fruitful_days\n            profit = prices[j] - prices[i]\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n        start_row, start_col = next((i, j) for i, row in enumerate(map) for j, cell in enumerate(row) if cell == 'S')\n        path = [(start_row, start_col)]\n        \n        for instruction in instructions:\n            if instruction == 'up':\n                new_row = max(0, path[-1][0] - 1)\n            elif instruction == 'down':\n                new_row = min(len(map) - 1, path[-1][0] + 1)\n            elif instruction == 'left':\n                new_col = max(0, path[-1][1] - 1)\n            elif instruction == 'right':\n                new_col = min(len(map[0]) - 1, path[-1][1] + 1)\n            \n            if map[new_row][new_col] != 'X':\n                path.append((new_row, new_col))\n                if map[new_row][new_col] == 'E':\n                    break\n        \n        return path\n    \n    # Test cases\n    print(adventure_game([['S', '.', '.'], ['XX', '.'], 'XE']], ['right', 'right', 'down', 'down', 'right']))  # [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\n    print(adventure_game([['.', '.', 'S'], ['X', 'X'], 'XE']], ['left', 'up']))  # [(2, 2), (2, 1), (1, 1)]\n    print(adventure_game([['S', '.', '.'], ['XX', '.'], 'XE']], ['right', 'right', 'down', 'down', 'left']))  # [(0, 0), (0, 1), (1, 1), (2, 1), (2, 0)]\n    print(adventure_game([['.', '.', 'S'], ['X', 'X'], 'XE']", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 54\n    print(adventure_game([['S', '.', '.'], ['XX', '.'], 'XE']], ['right', 'right', 'down', 'down', 'right']))  # [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\n    print(adventure_game([['S', '.', '.'], ['XX', '.'], 'XE']], ['right', 'right', 'down', 'down', 'right']))  # [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\n                                                             ^\nSyntaxError: closing parenthesis ']' does not match opening parenthesis '('\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        word1 = word_list[i]\n        word2 = word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_dictionary.index(word1[j]) > alien_dictionary.index(word2[j]):\n                    return \"INCOR\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCOR\"\n    return \"CORRECT\"\n    \n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements_count = {\"Fire\": 0, \"Earth\": 0, \"Air\": 0, \"Water\": 0}\n    for birthday in birthdays:\n        month = int(birthday[4:6])\n        day = int(birthday[6:])\n        zodiac_sign = next((sign for sign, date in zodiac_signs.items() if (month == 3 and day >= 21 and day <= 19) or (month == 4 and day >= 20 and day <= 20) or (month == 5 and day >= 21 and day <= 20) or (month == 6 and day >= 20 and day <= 22) or (month == 7 and day >= 23 and day <= 22) or (month == 8 and day >= 23 and day <= 22) or (month == 9 and day >= 22 and day <= 22) or (month == 10 and day >= 23 and day <= 22) or (month == 11 and day >= 21 and day <= 21) or (month == 12 and day >= 21 and day <= 20)), None)\n        if zodiac_sign:\n            elements_count[zodiac_signs[zodiac_sign]] += 1\n    return {element: count for element, count in elements_count.items() if count > 0}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 170, in <module>\n  File \"<string>\", line 167, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 52, in zodiac_element\n        day = int(birthday[6:])\nValueError: invalid literal for int() with base 10: '3-21'\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        if not node['left'] and not node['right']:\n            paths.append(path + [node['value']])\n        dfs(node['left'], path + [node['value']])\n        dfs(node['right'], path + [node['value']])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 34, in tree_traversal\n    dfs(tree, [])\n  File \"<string>\", line 28, in dfs\n        if not node['left'] and not node['right']:\nKeyError: 'left'\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    # Your code here\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie for movie, _ in sorted_movies]\n\n    # Test cases\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight Rises\": [84, 2012]}\n    assert sort_movies_by_ratings_andrelease_date(movies_dict) == [\"The Dark\", \"Interstellar\", \"The Dark Knight Rises\", \"Inception\"]\n\n    movies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999], \"Toy Story 3\": [8.3, 2010], \"Toy Story 4\": [7.8, 2019]}\n    assert sort_movies_by_ratings_andrelease_date(movies_dict) == [\"Toy Story 4\", \"Toy Story 3\", \"Toy Story 2\", \"Toy Story\"]\n\n    print(\"All test cases passed.\")\n\nsort_movies_by_ratings_andrelease_date()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37, in <module>\nsort_movies_by_ratings_andrelease_date()\nNameError: name 'sort_movies_by_ratings_andrelease_date' is not defined\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    while arr:\n        result += ''.join(arr.pop(0))\n        if arr and arr[0]:\n            for row in arr:\n                result += row.pop()\n        if arr:\n            result += ''.join(arr.pop()[::-1])\n        if arr and arr[0]:\n            for row in arr[::-1]:\n                result += row.pop(0)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_of_plan):\n    new_dict = {}\n    for planet, features in dict_of_plan.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n            population = features[0]\n            size = features[1]\n            density = round(population / size, 2)\n            new_dict[planet] = f\"{density}, {size}\"\n    return new_dict\n    \"\"\"\n    def planet_population(dict_of_plan):\n    new_dict = {}\n    for planet, features in dict_of_plan.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n            population = features[0]\n            size = features[1]\n            density = round(population / size, 2)\n            new_dict[planet] = f\"{density}, {size}\"\n    return new_dict\n    \"\"\"\n    def planet_population(dict_of_plan):\n    new_dict = {}\n    for planet, features in dict_of_plan.items():\n        if len(features) == 2 and features[0] is not None and features[1] is not None:\n            population = features[0]\n            size = features[1]\n            density = round(population / size, 2)\n            new_dict[planet] = f\"{density}, {size}\"\n    return new_dict\n    \"\"\"\n    def planet_population(dict_of_plan):\n    new_dict = {}\n    for planet, features in dict_of_plan.items():\n        if len(features)", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 53\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 170)\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    aliens.sort()\n    for i in range(len(aliens)):\n        if aliens[i] == ray:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray - 1:\n            aliens.pop(i)\n            break\n    for i in range(len(aliens)):\n        if aliens[i] == ray + 1:\n            aliens.pop(i)\n            break\n    return aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    # Convert the strings to lists of digits\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n    \n    # Generate all unique combinations of digits from both strings\n    combinations = []\n    for d1 in digits1:\n        for d2 in digits2:\n            combinations.append(d1 + d2)\n    \n    # Sum all the combinations\n    result = sum(combinations)\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                if distance > 0:\n                    status = 'In Space'\n                elif distance < 0:\n                    status = 'On Ground'\n                else:\n                    return 'Invalid Action Sequence'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = ''\n    for i in range(n):\n        fountain += ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (n - i - 1) + '\\n'\n    return fountain.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            new_position = (alphabet.index(message[i].lower()) + n_values[i % len(n_values)]) % 26\n            encoded_message += alphabet[new_position]\n        else:\n            encoded_message += message[i]\n    return encoded_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/94", "completion": "\n    result = []\n    for spell in strings:\n        words = spell.split()\n        words.sort(key=len)\n        result.append(words)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    first_diagonal = sum(m[i][i] for i in range(len(m)))\n    second_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n    \n    return abs(first_diagonal - second_diagonal)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and lst[i] == product_of_digits(i):\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if lst[i] % i == 0 and lst[i] == product_of_digits(i):\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        \n        continents = [\"Asia\", \"Africa North\", \"Africa South\", \"Europe North\", \"Europe South\"]\n        encountered = []\n        \n        for continent in continents:\n            for human, home in humans.items():\n                if home == continent:\n                    encountered.append(human)\n        \n        return encountered\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[-1] + sequence[-2] + i + 1\n        sequence.append(next_num)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n    for round_duration in rounds:\n        current_position = (current_position + round_duration * music) % n\n        players.pop(current_position)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 143, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in musical_chairs\n        players.pop(current_position)\nIndexError: pop index out of range\n", "passed": false}
