{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n            total_cost += item * 15\n        else:\n            total_cost += item\n        if item > 5:\n            total_cost += 10\n    if location == 'Local':\n        total_cost *= 1\n    elif location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 25\n    else:\n        total_cost *= 1\n    return \"{:.2f}\".format(round(total_cost, 2))\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_shipping_cost = 50\n    local_factor = 1\n    national_factor = 1.5\n    international_factor = 25\n    additional_weight_cost = 10\n\n    total_cost = base_shipping_cost\n    for item in items:\n        if type(item) == str:\n            item = float(item)\n        total_cost += item * local_factor\n        if item > 5:\n            total_cost += additional_weight_cost\n        if location == 'Local':\n            total_cost *= local_factor\n        elif location == 'National':\n            total_cost *= national_factor\n        elif location == 'International':\n            total_cost *= international_factor\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    pass\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str) -> List[str]:\n        if not input_string:\n            return ['']\n        if len(input_string) == 1:\n            return [chr(ord('a') + int(input_string) - 1)]\n        result = []\n        for c in get_combinations(input_string[1:]):\n            if input_string[0] == '1':\n                for i in range(1, 27):\n                    result.append(chr(ord('a') + i - 1) + c)\n            else:\n                result.append(input_string[0] + c)\n        return result\n\n    return get_combinations(input_string)\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_height = candles[0]\n    count = 1\n\n    for i in range(1, len(candles)):\n        if candles[i] > max_height:\n            max_height = candles[i]\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while len(result) < len(matrix) * len(matrix[0]):\n        # move right\n        while row < len(matrix) and matrix[row][col] is not None:\n            result.append(matrix[row][col])\n            matrix[row][col] = None\n            col += 1\n        # move down\n        row -= 1\n        col -= 1\n        if row < len(matrix):\n            row += 1\n        # move left\n        while col >= 0 and matrix[row][col] is not None:\n            result.append(matrix[row][col])\n            matrix[row][col] = None\n            col -= 1\n        # move up\n        row -= 1\n        col += 1\n        if col < len(matrix[0]):\n            col += 1\n        # move right\n        while col < len(matrix[0]) and matrix[row][col] is not None:\n            result.append(matrix[row][col])\n            matrix[row][col] = None\n            col += 1\n        # move down\n        row += 1\n        col -= 1\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        grid[x][y] = 0\n        if x > 0:\n            grid[x-1][y] = 0\n        if x < len(grid)-1:\n            grid[x+1][y] = 0\n        if y > 0:\n            grid[x][y-1] = 0\n        if y < len(grid[0])-1:\n            grid[x][y+1] = 0\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    def find_shangri_la(code_sequence: list[int]) -> str:\n        x, y = 0, 0\n        for i in code_sequence:\n            if i == 0:\n                y += 1\n            elif i == 1:\n                x += 1\n            elif i == 2:\n                y -= 1\n            elif i == 3:\n                x -= 1\n            if x == 0 and y == 0:\n                return 'Shang found'\n        return 'Shangri not found'\n\n    print(find_shangri_la([0, 1, 0]))\n    print(find_shangri_la([0, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 0]))\n    print(find_shangri_la([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 0]))\n   "}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    canvas_list = list(canvas)\n    for i, char in enumerate(canvas_list):\n        if char == 'P':\n            if i > 0 and canvas_list[i-1] == ' ' and canvas_list[i+1] == ' ':\n                canvas_list[i] = '*'\n            elif i > 0 and canvas_list[i-1] == '-' and canvas_list[i+1] == '-':\n                canvas_list[i] = '*'\n            elif i < len(canvas) - 1 and canvas_list[i+1] == ' ' and canvas_list[i-1] == ' ':\n                canvas_list[i] = '*'\n            else:\n                return 'Invalid canvas'\n\n    return ''.join(canvas_list)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation + ' '\n    words = string.split(string)\n    word_freq = {}\n    for word in words:\n        word = word.lower()\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = animal_string.split()\n    count_dict = {}\n    for animal in animals:\n        if animal[0] in count_dict:\n            count_dict[animal[0]] += 1\n        else:\n            count_dict[animal[0]] = 1\n    return [count_dict[i] for i in 'CDBAC']\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh are those {fruits[0]} and from {location}Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh are those {', '.join(fruits)} and from {location}Marvelous!\"\n    else:\n        return f\"Oh are those {', '.join(fruits[:-1])} and from {location}Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count_dict = Counter(flux_values)\n    max_occurrence = max(count_dict.values())\n    sum_all_elements = sum(count_dict.keys()) * max_occurrence\n    return sum_all_elements\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n    count_map = Counter(elems)\n    rarest_element = min(count_map, key=count_map.get)\n\n    return rarest_element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_to_consonant = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'u', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'U'}\n    consonant_to_vowel = {'c': 'a', 'g': 'e', 'k': 'i', 'q': 'o', 'u': 'u', 'C': 'A', 'G': 'E', 'K': 'I', 'Q': 'O', 'U': 'U'}\n    name = name.strip()\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char in vowels:\n                alias += vowel_to_consonant.get(char, char)\n            elif char in consonants:\n                alias += consonant_to_vowel.get(char, char)\n        else:\n            alias += char\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    def get_value(card: str):\n        return int(card[0]) if card[0].isdigit() else 10\n\n    def get_type(cards: list):\n        values = [get_value(card) for card in cards]\n        sorted_values = sorted(values, reverse=True)\n        if len(set(sorted_values)) == 1:\n            return sorted_values[0]\n        elif len(set(sorted_values)) == 2 and sorted_values[0] == sorted_values[1]:\n            return sorted_values[0] * 2\n        elif len(set(sorted_values)) == 3:\n            return sorted_values[0] * 3\n        elif len(set(sorted_values)) == 4:\n            return sorted_values[0] * 4\n        elif len(set(sorted_values)) == 5:\n            return sorted_values[0] * 5\n        else:\n            return 0\n\n    def get_score(hand: list):\n        types = [get_type(hand[i:i+5]) for i in range(len(hand)-4)]\n        return sum(types)\n\n    return get_score(sorted(hand, key=lambda card: (int(card[0]), card[1])))\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    wizards.sort(key=lambda x: x[1], reverse=True)\n    dragon_hp -= sum([wizard[1] for wizard in wizards])\n    while dragon_hp > 0:\n        for wizard in wizards:\n            dragon_hp -= wizard[1]\n            if dragon_hp <= 0:\n                return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    i = 0\n    while True:\n        i += 1\n        if i % 7 == 0 and sum(int(digit) for digit in str(i)) == 7:\n            if i % n == 0:\n                return i\n"}
{"task_id": "EvoEval/19", "completion": "\n    def vampires_in_row_or_column(matrix, row, col):\n        vampire_count = 0\n        for i in range(len(matrix)):\n            if matrix[row][i] == 2:\n                vampire_count += 1\n            if matrix[i][col] == 2:\n                vampire_count += 1\n        return vampire_count\n\n    vampire_count = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                vampire_count += vampires_in_row_or_column(m, i, j)\n    return vampire_count\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    else:\n        pattern = []\n        for i in range(1, n + 1):\n            pattern.append(','.join(str(j) for j in list(range(i, 0, -1)) + list(range(2, i + 1))))\n        return pattern\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = zip(*grid)\n        for i in transposed:\n            if word in ''.join(i):\n                return True\n        return False\n\n    def is_word_in_diagonal(grid, word):\n        N = len(grid)\n        for i in range(N):\n            for j in range(N):\n                if i + len(word) <= N and j + len(word) <= N:\n                    if word in grid[i][j] + grid[i + 1][j + 1] + grid[i + 1][j] + grid[i][j + 1]:\n                        return True\n        return False\n\n    def is_word_in_anti_diagonal(grid, word):\n        N = len(grid)\n        for i in range(N):\n            for j in range(N):\n                if i + len(word) <= N and j - len(word) >= 0:\n                    if word in grid[i][j] + grid[i + 1][j - 1] + grid[i + 1][j] + grid[i][j - 1]:\n                        return True\n        return False\n\n    for word in words:\n        if not is_word_in_row(grid, word) and not is_word_in_col(grid, word) and not is_word_in_diagonal(grid, word) and not is_word_in_anti_diagonal(grid, word):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    G = 6.67430e-11  # gravitational constant\n    M = 5.972e24  # mass of the sun in kg\n    c = 299792458  # speed of light in km/s\n\n    # calculate distance in km\n    distance = (G * M * t**2) / c**2\n\n    # convert to light years\n    distance_ly = distance / 9.461e17\n\n    return distance_ly\n\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime_index(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            result += str(get_prime_index(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    pass\n"}
{"task_id": "EvoEval/25", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_count = words.count(word)\n    if word_count == 0:\n        return (0, \"\")\n    else:\n        sentences = re.split(r'[.?!]', text)\n        max_sentence = max(sentences, key=lambda s: s.count(word))\n        return (word_count, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(pos):\n        x, y = pos\n        if x < 0 or y < 0 or x >= len(maze) or y >= len(maze[0]):\n            return False\n        if maze[x][y] == 1:\n            return False\n        return True\n\n    def get_neighbors(pos):\n        x, y = pos\n        return [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n\n    def a_star(start, end, maze):\n        open_list = [start]\n        closed_list = []\n        directions = []\n        while open_list:\n            current_node = open_list[0]\n            current_index = 0\n            for index, item in enumerate(open_list):\n                if item[0] < current_node[0]:\n                    current_node = item\n                    current_index = index\n\n            open_list.pop(current_index)\n            closed_list.append(current_node)\n\n            if current_node == end:\n                while current_node != start:\n                    for pos, neighbor in enumerate(closed_list):\n                        if current_node == neighbor:\n                            directions.append(directions[pos-1])\n                            current_node = closed_list[pos-1]\n                directions.reverse()\n                return directions\n\n            neighbors = get_neighbors(current_node)\n            for neighbor in neighbors:\n                if is_valid(neighbor):\n                    new_path = [current_node] + directions\n                    open_list.append(neighbor)\n\n        return []\n\n    return a_star(start, end, maze)\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return 2500 + (income - 25000) * 0.2\n    else:\n        return 13000 + (income - 45000) * 0.3\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = [s[i: j] for i in range(len(s)) for j in range(i + 1, len(s) + 1)]\n    palindromes = [s for s in substrings if is_palindrome(s)]\n    return sorted(list(set(palindromes)))\n"}
{"task_id": "EvoEval/30", "completion": "\n    def dfs(maze, start, end, path=[]):\n        path = path + [start]\n        if start == end:\n            return path\n        for next_point in next_moves(maze, start):\n            if next_point not in path:\n                newpath = dfs(maze, next_point, end, path)\n                if newpath: return newpath\n        return []\n\n    def next_moves(maze, start):\n        i, j = start\n        moves = [(i+1,j), (i-1,j), (i,j+1), (i,j-1)]\n        return [(x,y) for x,y in moves if 0<=x<len(maze) and 0<=y<len(maze[0]) and maze[x][y]==1]\n\n    return dfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 and n == 1:\n        return 1\n    else:\n        return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Create a dictionary to store the index of the song titles\n    song_dict = {title: index for index, title in enumerate(playlist)}\n\n    # Initialize the seed\n    seed = 7\n\n    # Create a new list to store the shuffled playlist\n    shuffled_playlist = []\n\n    # Loop through the playlist\n    for i in range(len(playlist)):\n        # If the song title does not contain the word \"Rock\", add it to the shuffled playlist\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[i])\n\n    # Initialize the new seed\n    new_seed = 7\n\n    # Loop through the shuffled playlist\n    for i in range(len(shuffled_playlist)):\n        # Get the index of the song title\n        index = song_dict[shuffled_playlist[i]]\n\n        # Swap the song title with the song title at the new index\n        shuffled_playlist[i], shuffled_playlist[index] = shuffled_playlist[index], shuffled_playlist[i]\n\n        # Update the new seed\n        new_seed = (new_seed * 16807) % 2147\n\n        # Update the song dictionary with the new index\n        song_dict[shuffled_playlist[i]] = index\n\n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for stone in magic_stones:\n        for i in range(stone, n + 1):\n            dp[i] += dp[i - stone]\n    return dp[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    def werewolf_transformation(n: int, m: int):\n        result = [0]*n\n        for i in range(1, n):\n            if i == m:\n                result[i] = result[i-1] + 10\n            else:\n                result[i] = result[i-1] + 10 if result[i-1] < 100 else result[i-1] - 10\n        return result\n\n    print(werewolf_transformation(5, 3))\n    print(werewolf_transformation(7, 4))\n    print(werewolf_transformation(10, 3))\n    print(werewolf_transformation(15, 7))\n\nwerewolf_transformation(5, 3)\nwerewolf_transformation(7, 4)\nwerewolf_transformation(10, 3)\nwerewolf_transformation(15, 7)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email:\n        return False\n    local_part, domain = email.split(\"@\")\n    if local_part[0] == local_part[-1] or local_part[0] == \".\" or local_part[-1] == \".\":\n        return False\n    if \".\" not in domain:\n        return False\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    result = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        for j in range(i - 1, -1, -1):\n            result[j] += xs[i] * result[i]\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed_s += 'E'\n            else:\n                transformed_s += 'e'\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed_s += 'C'\n            else:\n                transformed_s += 'c'\n        else:\n            transformed_s += char\n    return transformed_s\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\" : \"\ufffd\ufffd\",\n    }\n\n    for emoticon, unicode_em in emoticons.items():\n        sentence = sentence.replace(emoticon, unicode_em)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n <= 0 or not isinstance(n, int):\n        return \"Invalid input\"\n    if not isinstance(s, str) or s == \"\":\n        return \"Invalid input\"\n    if not s.isalpha():\n        return \"Invalid input\"\n\n    result = \"\"\n    for i in range(n):\n        for j in range(n):\n            result += \"*\" + s + \"*\" + \" \"\n        result += \"\\n\"\n    return result\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    def potion_mixing(potions, target):\n        potions.sort(key=lambda x: (int(x.split()[2]), x))\n        result = []\n        current_power = 0\n        for potion in potions:\n            name, power = potion.split()[0], int(potion.split()[2])\n            if current_power + power > target:\n                break\n            result.append(name)\n            current_power += power\n        return result\n\n    print(potion_mixing([\"Healing Potion 10\", \"Strength 5\", \"Invis 7\"], 15))\n    print(potion_mixing([\"Fire Resistance 12\", \"W potion\", \"Po Potion 2\", \"Water Breat 6\", \"Night 5\"], 20))\n    print(potion_mixing([\"Potion of Swift 3\", \"P Leaping 2\", \"P Harming 10\"], 1))\n    print(potion_mixing([\"Fire 12\", \"W potion\", \"Po Potion 2\", \"Water Breat 6\", \"Night 5\"], 10))\n    print(potion_mixing([\"He Potion 10\", \"Strength 5\", \"Invis 7\"], 15))\n    print(potion_mixing([\"Luck 3\", \"W potion\", \"Fire Resistance 12\"], 20))\n    print(potion_mixing([\"Potion of Swift 3\", \"P Leaping 2\", \"P Harming 10\"], 1))\n    print(potion_mixing([\"Fire 12\", \"W potion\", \"Po Potion 2\", \"Water Breat 6\", \"Night 5\"], 10))\n\n    # Output:\n    # ['He']\n    # ['Fire 12', 'W potion', 'Po Potion 2', 'Water Breat 6', 'Night 5']\n    # ['P Leaping 2']\n    # ['Fire 12', 'W potion', 'Po Potion 2', 'Water Breat 6',"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\n        legendary_item_found = False\n        legendary_item_rarity = -1\n        if len(player_input) > 0:\n            rarity_count = {}\n            for item in player_input:\n                if item == 5:\n                    legendary_item_found = True\n                    legendary_item_rarity = item\n                if item in rarity_count:\n                    rarity_count[item] += 1\n                else:\n                    rarity_count[item] = 1\n            if legendary_item_found:\n                sorted_rarities = sorted(rarity_count.items(), key=lambda x: x[1], reverse=True)\n                if len(sorted_rarities) > 1:\n                    legendary_item_rarity = sorted_rarities[1][0]\n        return legendary_item_found, legendary_item_rarity\n\n    print(find_legendary_item([1, 2]))\n    print(find_legendary_item([1, 2, 5]))\n    print(find_legendary_item([5]))\n    print(find_legendary_item([]))\n\nfind_legendary_item([1, 2, 5])\n"}
{"task_id": "EvoEval/43", "completion": "\n    if fuel < (spaceship_weight * planet_gravity * distance) / speed:\n        return 'Insufficient fuel'\n    else:\n        fuel = (spaceship_weight * planet_gravity * distance) / speed\n        return round(fuel, 2)\n\n"}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q,w,e):\n        total_weight = sum(q)\n        if total_weight <= w:\n            return True\n        else:\n            return False\n\n    print(fairy_tale_transport([5, 10, 15], 5, 20)) # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10)) # False\n    print(fairy_tale_transport([1, 5, 15, 15], 1, 5, 15)) # True\n    print(fairy_tale_transport([5, 10, 15], 5, 20)) # False\n    print(fairy_tale_transport([10, 20, 30], 5, 10)) # False\n    print(fairy_tale_transport([1, 5, 15, 15], 1, 5, 15)) # True\n    \"\"\"\n    def fairy_tale_transport(q"}
{"task_id": "EvoEval/45", "completion": "\n    def find_castle(arr):\n        max_hills = 0\n        for i in range(1, len(arr)-1):\n            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                max_hills += 1\n        return max_hills\n\n    print(find_castle([12,25364827])) # 10\n    print(find_castle([2, 8, 9])) # 2\n    print(find_castle([9, 8, 7, 3])) # 3\n    print(find_castle([5, 5, 5, 5])) # 4\n\nfind_castle()\n"}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            words = test[1]\n            secret_message = 'Take the cannoli.'\n            for word in words:\n                if word in secret_message:\n                    secret_message = secret_message.replace(word, '')\n            result.append(secret_message)\n        return result\n\n    print(hidden_message([['Hello, world!okay?', ['Every', 'good', 'boy', 'does', 'fine']], ['Hiddenapple', ['Ban', 'grape', 'kiwimelon']]], 'Take the cannoli.', 'bgkm', 'This', 'is?a', 'test', 'case??', 'hi']))\n\n\n    \"\"\"\n    def hidden_message(test_cases):\n        result = []\n        for test in test_cases:\n            words = test[1]\n            secret_message = 'Take the cannoli.'\n            for word in words:\n                if word in secret_message:\n                    secret_message = secret_message.replace(word, '')\n            result.append(secret_message)\n        return result\n\n    print(hidden_message([['Hello, world!okay?', ['Every', 'good', 'boy', 'does', 'fine']], ['Hiddenapple', ['Ban', 'grape', 'kiwimelon']]"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n        inventory = {}\n        for log in inventory_logs:\n            item = log['item']\n            quantity = log['quant']\n            if item in inventory:\n                inventory[item] += quantity\n            else:\n                inventory[item] = quantity\n        return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n    print(wizard_inventory([{\"item\": \"Dragon Scale\", \"quant\": 2}, {\"item\": \"Phoenix Feather\", \"quant\": 1}, {\"item\": \"Dragon Scale\", \"quant\": -1}]))\n    print(wizard_inventory([{\"item\": \"Merm Hair\", \"quant\": 5}, {\"item\": \"Merm Hair\", \"quant\": -5}]))\n    print(wizard_inventory([{}]))\n\nwizard_inventory()\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        'A': '01',\n        'B': '1000',\n        'C': '1010',\n        'D': '100',\n        'E': '0',\n        'F': '0010',\n        'G': '000',\n        'H': '0011',\n        'I': '0110',\n        'J': '0100',\n        'K': '11',\n        'L': '1011',\n        'M': '1001',\n        'N': '1000',\n        'O': '0111',\n        'P': '1100',\n        'Q': '1110',\n        'R': '1101',\n        'S': '0110',\n        'T': '0101',\n        'U': '000',\n        'V': '0011',\n        'W': '0100',\n        'X': '1001',\n        'Y': '1011',\n        'Z': '1000',\n        '0': '01111',\n        '1': '00110',\n        '2': '00011',\n        '3': '00001',\n        '4': '00000',\n        '5': '00001',\n        '6': '00010',\n        '7': '00100',\n        '8': '01000',\n        '9': '01100',\n        '/': ' ',\n    }\n\n    def decode_morse(msg):\n        decoded_msg = ''\n        word = ''\n        for char in msg:\n            if char != ' ':\n                word += char\n            else:\n                decoded_msg += morse_code_dict[word]\n                word = ''\n        decoded_msg += morse_code_dict[word]\n        return decoded_msg\n\n    return dec"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' ', '?': '..--..', '/': '-.-.-', '(': '-.--.', ')': '-.--.-', '&': '.-...', ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.', '$': '...-..-', '@': '.--.-.', ' ': ' ', '': ' '}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += ' '\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i in range(len(string)):\n        if string[i] in list_of_alphabets:\n            result += list_of_alphabets[i % len(list_of_alphabets)]\n        else:\n            result += string[i]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # sort the orders in descending order\n    orders.sort(reverse=True)\n\n    # initialize the number of batches and the number of orders\n    num_batches = 0\n    num_orders = 0\n\n    # iterate over the sorted orders\n    for order in orders:\n        # if the order is less than or equal to the remaining cookies, bake it\n        if order <= n:\n            num_orders += order\n            n -= order\n        # if the order is more than the remaining cookies, bake as many as possible and add to the number of batches\n        else:\n            num_batches += order // n\n            num_orders += n\n            n = 0\n\n    # return the number of batches\n    return num_batches\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for i, c in enumerate(s):\n        if c in vowels:\n            result += chr((ord(c) - ord('a') + 1) % 26 + ord('a'))\n        elif c in consonants:\n            result += chr((ord(c) - ord('b') + 1) % 26 + ord('b'))\n        elif i % 2 == 0 and c == '?':\n            result += '!'\n        elif i % 2 == 1 and c == '?':\n            result += '!'\n        else:\n            result += c\n    return result\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    def caesar_shift(char, shift):\n        if not char.isalpha():\n            return char\n        ascii_offset = ord('a') if char.islower() else ord('A')\n        new_char_code = ((ord(char) - ascii_offset + shift) % 26) + ascii_offset\n        return chr(new_char_code)\n\n    return ''.join(caesar_shift(char, shift) for char in message)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    return '/ '.join(morse_code_dict[i] if i in morse_code_dict else '' for i in s)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for char in dish:\n            if char.isalpha():\n                transformed_dish += spell[spell.index(char)]\n            else:\n                transformed_dish += char\n        return transformed_dish\n\n    transformed_menu = []\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu.append((transformed_dish, price))\n\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation_table = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:])\n    translated_phrase = earth_phrase.translate(translation_table)\n    words = translated_phrase.split()\n    translated_phrase = ' '.join(word.capitalize() if i == 0 else word for i, word in enumerate(words))\n    translated_phrase = translated_phrase.replace(' ', '@')\n    if translated_phrase[0] in vowels:\n        translated_phrase = translated_phrase.replace('@', 'xy@')\n    else:\n        translated_phrase = translated_phrase.replace('@', 'yz@')\n    return translated_phrase\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    result = []\n    for ingredient, recipes in ingredient_dict.items():\n        result.append((ingredient, recipes))\n    result.sort(key=lambda x: (-x[1], x[0]))\n    return result\n"}
{"task_id": "EvoEval/60", "completion": "\n    ants = len(ant_positions)\n    sugar_locations = set(sugar_locations)\n    ants_moved = []\n    for ant in ant_positions:\n        position, direction = ant\n        if direction == \"right\" and position + path_length not in sugar_locations:\n            position += path_length\n        elif direction == \"left\" and position - path_length not in sugar_locations:\n            position -= path_length\n        ants_moved.append(position)\n    return ants_moved.count(1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    vowel_next = 'bcdfghjklmnpqrstvwxyz'\n    vowel_prev = 'aeiou'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] in vowels:\n                result += vowel_next[vowels.index(s[i])-1]\n            elif s[i] in consonants:\n                result += vowel_prev[consonants.index(s[i])-1]\n            else:\n                result += s[i]\n        else:\n            if s[i] in vowels:\n                result += vowels[vowels.index(s[i])-1]\n            elif s[i] in consonants:\n                result += consonants[consonants.index(s[i])-1]\n            else:\n                result += s[i]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\n        if p == 0:\n            return []\n        else:\n            if p % 2 == 0:\n                return [p] + create_pyramid(p - 2)\n            else:\n                return [p] + create_pyramid(p - 3)\n\n    return create_pyramid(p)\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, div):\n        return n % div == 0\n\n    result = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            result.append(i)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    def process_order(order_dict, menu):\n        for food, details in order_dict.items():\n            if food in menu:\n                for action, ingredient in details:\n                    if action == \"remove\":\n                        if ingredient in menu[food]:\n                            menu[food].remove(ingredient)\n                    elif action == \"add\":\n                        menu[food].append(ingredient)\n        return menu\n\n    return process_order(order, menu)\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n\n    pairs.sort(key=lambda x: (x[0], x[1]))\n\n    return pairs\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    def meal_calculator(customers, meals):\n        result = {}\n        for customer in customers:\n            if customer in meals:\n                total_calories = sum([meal['calories'] for meal in meals[customer]])\n                result[customer] = total_calories\n            else:\n                result[customer] = 0\n        return result\n\n    print(meal_calculator(['Alice', 'Bob', 'Charlie'], {'Alice': [{'dish':'Pizza', 'calories': 300}, {'dish':'Burger', 'calories': 500}], 'Bob': [{'dish':'Salad', 'calories': 100}], 'Charlie': [{'dish':'Fries', 'calories': 200}, {'dish':'Bur', 'calories': 500}], 'Ice Cream': [{'dish':'Cup', 'calories': 250}]})\n\n    print(meal_calculator(['Tom', 'Jerry'], {'Tom': [{'dish':'Pizza', 'calories': 300}, {'dish':'Bur', 'calories': 500}], 'Jerry': [{'dish':'Fries', 'calories': 200}]})\n\nmeal_calculator()\n"}
{"task_id": "EvoEval/68", "completion": "\n    def magical_sorting(arr):\n        if not arr:\n            return True\n        rot_count = 0\n        swap_count = 0\n        for i in range(len(arr)):\n            if i < len(arr) - 1 and arr[i] > arr[i + 1]:\n                rot_count += 1\n            if i > 0 and arr[i] < arr[i - 1]:\n                swap_count += 1\n        if rot_count > 1 or swap_count > 1:\n            return False\n        else:\n            return True\n\n    print(magical_sorting([3, 4, 1]))  # True\n    print(magical_sorting([5, 4, 1]))  # False\n    print(magical_sorting([2, 3, 4, 1]))  # True\n    print(magical_sorting([1]))  # True\n    print(magical_sorting([]))  # True\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encrypted_string = \"\"\n    vow_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if char in vowels:\n                vow_count += 1\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return (encrypted_string, vow_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i, s in enumerate(lst, 1):\n        j = sum(c.isdigit() for c in s)\n        result.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{s}' who was known for telling {j} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        # calculate the total number of treasures\n        total_treasures = sum(sum(row) for row in grid)\n        # calculate the number of trips needed\n        trips = math.ceil(total_treasures / bag_capacity)\n        return trips\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = ''\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    digits = \"0123456789\"\n    result = \"\"\n    for i in range(len(input_str)):\n        if i % 2 == 0:\n            if input_str[i] in vowels:\n                result += vowels[(vowels.index(input_str[i]) + 1) % len(vowels)]\n            elif input_str[i] in consonants:\n                result += consonants[(consonants.index(input_str[i]) + 1) % len(consonants)]\n            elif input_str[i] in digits:\n                result += str((int(input_str[i]) + 1) % 10)\n            else:\n                result += input_str[i]\n        else:\n            if input_str[i] == \"?\":\n                result += \"!\"\n            else:\n                result += input_str[i]\n    return result\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n        if not lst:\n            return []\n        pyramid = []\n        max_len = len(str(max(lst)))\n        for num in lst:\n            pyramid.append('#' * (max_len - len(str(num)) + 1) + str(num) + '#' * (max_len - len(str(num)) + 1))\n        return pyramid\n\n    print(create_pyramid([3, 2, 1]))\n    print(create_pyramid([5, 4, 2]))\n    print(create_pyramid([]))\n\ncreate_pyramid()\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(n):\n        points = 0\n        while n != 1:\n            n = n // k\n            points += n\n        return points\n\n    sequence.sort(reverse=True)\n    result = []\n    for num in sequence:\n        result.append(calculate_points(num))\n    return result\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    mid = n // 2\n    res = []\n    for i in range(mid):\n        for j in range(mid):\n            res.extend([mat[i][j], mat[i][n-1-j], mat[n-1-i][j], mat[n-1-i][n-1-j]])\n    if n % 2 != 0:\n        res.extend([mat[mid][mid]])\n    return res\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n        start_row, start_column = 0, 0\n        moves = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n        path = [(start_row, start_column)]\n\n        for instruction in instructions:\n            direction, steps = instruction[0], int(instruction[1:])\n            dx, dy = moves[direction]\n            for _ in range(steps):\n                start_row += dx\n                start_column += dy\n                if map[start_row][start_column] == 'X':\n                    break\n                else:\n                    path.append((start_row, start_column))\n\n        return path\n\n    print(adventure_game([['S', 'X', '.'], ['X', '.', 'X'], ['X', 'X', 'E']], ['right', 'right', 'down', 'down', 'right']))\n    print(adventure_game([['X', 'X', 'S'], ['X', '.', 'X'], ['X', 'X', 'E']], ['left', 'up', 'right', 'right']))\n    print(adventure_game([['S', 'X', 'E'], ['X', '.', 'X'], ['X', 'X', 'X']], ['right', 'right', 'down', 'down', 'right']))\n\nThis code defines a function `adventure_game` that takes a 2D list `map` and a list of instructions as input. The function first initializes the start position (0, 0) and the path as a list of tuples. Then, for each instruction in the list, it moves the player in the corresponding direction by the number of steps specified, and if the player encounters a wall ('X'), it breaks the loop and continues with the remaining instructions. The player's position is then added to the path. If the player reaches the end ('E'), the function returns the path. If the player never reaches the end, the function returns the path up to the point where the player reached the end.\n"}
{"task_id": "EvoEval/81", "completion": "\n    if len(word_list) == 0:\n        return \"CORRECT\"\n    alien_dict_set = set(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        if word_list[i] in alien_dict_set and word_list[i + 1] not in alien_dict_set:\n            return \"INCOR\"\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    def zodiac_element(birthdays):\n        if not birthdays:\n            return None\n        zodiac_signs = {\n            \"Aquarius\": [\"2000-0321\", \"2001052120020823\", \"20030219\"],\n            \"Pisces\": [\"2000-0521\", \"2001072320020823\", \"20030219\"],\n            \"Aries\": [\"2000-0421\", \"2001062120020823\", \"20030219\"],\n            \"Taurus\": [\"2000-0521\", \"2001062120020823\", \"20030219\"],\n            \"Gemini\": [\"2000-0621\", \"2001072320020823\", \"20030219\"],\n            \"Cancer\": [\"2000-0721\", \"2001082320020823\", \"20030219\"],\n            \"Leo\": [\"2000-0821\", \"2001092320020823\", \"20030219\"],\n            \"Virgo\": [\"2000-0921\", \"2001102320020823\", \"20030219\"],\n            \"Libra\": [\"2000-1021\", \"2001112320020823\", \"20030219\"],\n            \"Scorpio\": [\"2000-1121\", \"2001122320020823\", \"20030219\"],\n            \"Sagittarius\": [\"2000-1221\", \"200"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_travers(tree):\n        if not tree:\n            return []\n        if not tree.get('branches'):\n            return [list(tree.keys())]\n        paths = []\n        for branch in tree.get('branches'):\n            paths += tree_travers(branch)\n        return paths\n\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    print(tree_travers(tree))\n\n    tree = {147: {}, 5: {8: {}}}\n    print(tree_travers(tree))\n\n    tree = {7: {2: {8: {}}}}\n    print(tree_travers(tree))\n\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    print(tree_travers(tree))\n\n    tree = {147: {}, 5: {8: {}}}\n    print(tree_travers(tree))\n\n    tree = {7: {2: {8: {}}}}\n    print(tree_travers(tree))\n\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    print(tree_travers(tree))\n\n    tree = {147: {}, 5: {8: {}}}\n    print(tree_travers(tree))\n\n    tree = {7: {2: {8: {}}}}\n    print(tree_travers(tree))\n\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    print(tree_travers(tree))\n\n    tree = {147: {}, 5: {8: {}}}\n    print(tree_travers(tree))\n\n    tree = {7: {2: {8: {}}}}\n    print(tree_travers(tree))\n\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {},"}
{"task_id": "EvoEval/85", "completion": "\n    def num_moves(coord, grid):\n        start_pos = (coord[0]*2+1, coord[1]*2+1)\n        end_pos = (grid.index(0), grid[0].index(1))\n        return min(start_pos, end_pos)\n\n    return num_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n    def sort_movies_by_ratings_and_release_date(m_dict):\n        # Sort the dictionary by ratings and then by release date\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], x[1][1]))\n        # Extract the movie names\n        movie_names = [movie[0] for movie in sorted_movies]\n        return movie_names\n\n    movies_dict = {\"Inception\": [8.8, 2010], \"The Dark\": [9, 2008], \"Interstellar\": [8.6, 2014], \"The Dark Knight\": [9, 2008]}\n    print(sort_movies_by_ratings_and_release_date(movies_dict))\n\n    movies_dict = {\"Toy\": [83, 1995], \"Toy\": [8.9, 1999], \"Toy\": [83, 2010], \"Toy\": [88, 2019]}\n    print(sort_movies_by_ratings_and_release_date(movies_dict))\n\n    movies_dict = {\"Movie1\": [8.1, 2001], \"Movie2\": [7.8, 2012], \"Movie3\": [8.6, 2014], \"Movie4\": [8.3, 2019]}\n    print(sort_movies_by_ratings_and_release_date(movies_dict))\n\n    movies_dict = {\"Movie5\": [8.5, 2005], \"Movie6\": [8.7, 2011], \"Movie7\": [8.4, 2018], \"Movie8\": [8.6, 2013]}\n    print(sort_movies_by_ratings_and_release_date(movies_dict))\n\n    movies_dict = {\"Movie9\": [8.9, 2009], \"Movie10\": [8.1, 2010"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral_coords(matrix):\n        if not matrix:\n            return []\n        rows, cols = len(matrix), len(matrix[0])\n        res = []\n        dx, dy = [0, 1, 0, -1], [1, 0, -1, 0]\n        x, y, c = 0, -1, 0\n        for _ in range(rows * cols):\n            for i in range(4):\n                nx, ny = x + dx[i], y + dy[i]\n                if 0 <= nx < rows and 0 <= ny < cols and matrix[nx][ny] != ' ':\n                    res.append(matrix[nx][ny])\n                    matrix[nx][ny] = ' '\n                    x, y = nx, ny\n                    c += 1\n                    break\n                dx[i], dy[i] = -dy[i], dx[i]\n        return ''.join(res)\n\n    return spiral_coords(arr)\n\n"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_of_plan):\n        new_dict = {}\n        for planet, data in dict_of_plan.items():\n            if data:\n                population, size = data\n                if size:\n                    density = round(population / size, 2)\n                    new_dict[f'{planet} {density}'] = density\n        return new_dict\n\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [2500000000, 0]}))\n    print(planet_population({}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [2500000000, None]}))\n\nThe function `planet_population` takes a dictionary as an argument. It then iterates over the dictionary, ignoring any entries where the size is `None`. For each valid entry, it calculates the population density and adds it to a new dictionary. The new dictionary is then returned.\n\nThe function is tested with the provided examples. The output of the function matches the expected results.\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_alive(n):\n        return n != 0\n\n    def destroy(aliens, pos):\n        aliens[aliens.index(pos)] = 0\n\n    aliens = [i for i in aliens if is_alive(i)]\n    positions = [i for i in aliens if is_odd(i) if is_adjacent(i, pos) or i == pos]\n    for p in positions:\n        destroy(aliens, p)\n    return aliens\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_digits(s):\n        return [int(c) for c in s]\n\n    def get_combinations(lst):\n        if len(lst) == 1:\n            return lst\n        else:\n            result = []\n            for i in range(len(lst)):\n                for c in get_combinations(lst[:i] + lst[i + 1:]):\n                    result.append([lst[i]] + c)\n            return result\n\n    s1_digits = get_digits(s1)\n    s2_digits = get_digits(s2)\n\n    all_combinations = get_combinations(s1_digits + s2_digits)\n\n    return sum(sum(c) for c in all_combinations)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def spaceship_trajectory(spaceship_data):\n        status = \"On Ground\"\n        for action in spaceship_data:\n            if action[0] == \"Launch\" and status == \"On Ground\":\n                status = \"In Space\"\n            elif action[0] == \"Move\" and status == \"In Space\":\n                if action[1] < 0:\n                    return \"Invalid Action Sequence\"\n                else:\n                    status = \"In Space\"\n            elif action[0] == \"Land\" and status == \"In Space\":\n                status = \"On Ground\"\n            else:\n                return \"Invalid Action Sequence\"\n        return status\n\n    print(spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', -1)]))\n    print(spaceship_trajectory([('Launch', 1), ('Move', 2), ('Land', 1)]))\n\nspaceship_trajectory(spaceship_data)\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'A'\n    result = ''\n    for i in range(n):\n        layer = ''\n        for j in range(n):\n            if i == 0 or i == n-1:\n                layer += alphabet[j % 26]\n            else:\n                layer += alphabet[(j+1) % 26]\n        result += layer.center(2*n-1) + '\\n'\n        alphabet = chr(ord(alphabet[0])+1)\n    return result.rstrip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    def get_char_position(char):\n        return ord(char.lower()) - ord('a') + 1\n\n    def get_char(position, is_upper):\n        if is_upper:\n            return chr(position + ord('A'))\n        else:\n            return chr(position + ord('a'))\n\n    def encode_decode(message, n_values):\n        result = []\n        for i in range(len(message)):\n            char = message[i]\n            if char.isalpha():\n                n = n_values[i % len(n_values)]\n                if char.isupper():\n                    result.append(get_char((get_char_position(char) + n) % 26, True))\n                else:\n                    result.append(get_char((get_char_position(char) + n) % 26, False))\n            else:\n                result.append(char)\n        return ''.join(result)\n\n    return encode_decode(message, n_values)\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    def diagonalDifference(m):\n        primary_diagonal = sum(m[i][i] for i in range(len(m)))\n        secondary_diagonal = sum(m[i][len(m)-i-1] for i in range(len(m)))\n        return abs(primary_diagonal - secondary_diagonal)\n\n    if not all(len(row) == len(m) for row in m):\n        return 'Invalid Matrix'\n    else:\n        return diagonalDifference(m)\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    def is_magic_index(index, value):\n        product_digits = get_product_digits(value)\n        return index * product_digits == value\n\n    magic_indices = []\n    for index, value in enumerate(lst):\n        if is_magic_index(index, value):\n            magic_indices.append(index)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def alien_invasion(alien, humans):\n        if not alien or not isinstance(alien, str) or not humans or not isinstance(humans, dict):\n            return []\n\n        continents = {\n            \"Asia\": \"Aliens\",\n            \"Africa\": \"Aliens\",\n            \"North\": \"Aliens\",\n            \"South\": \"Aliens\",\n            \"Europe\": \"Aliens\",\n        }\n\n        aliens_encounter = []\n\n        for human, continent in humans.items():\n            if continent == continents[alien]:\n                aliens_encounter.append(human)\n\n        aliens_encounter.sort(key=aliens_encounter.index)\n\n        return aliens_encounter\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    def musical_chairs(n, rounds, music):\n        players = list(range(1, n + 1))\n        for round in rounds:\n            for i in range(round):\n                if i % music == 0:\n                    players.pop(i % len(players))\n        return players\n\n    print(musical_chairs(5, [2, 1], 1))\n    print(musical_chairs(10, [2, 3], 1))\n    print(musical_chairs(10, [2, 3, 7, 8, 10], 3))\n\n"}
