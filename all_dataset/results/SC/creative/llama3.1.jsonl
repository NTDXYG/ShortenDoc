{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            total_cost += 50 * 15\n        else:\n            total_cost += 50\n        if item > 5:\n            total_cost += 10\n    if location == \"Local\":\n        return round(total_cost, 2)\n    elif location == \"National\":\n        return round(total_cost * 1.5, 2)\n    elif location == \"International\":\n        return round(total_cost * 25, 2)\n    else:\n        return round(total_cost, 2)  # Changed from 1.0 to 2.0"}
{"task_id": "EvoEval/1", "completion": "\n    # Initialize the total cost to 0\n    total_cost = 0\n    \n    # Iterate over each item in the list\n    for item in items:\n        # If the item is a string, consider its weight as 1kg\n        if isinstance(item, str):\n            weight = 1\n        # If the item is a float, use its value as the weight\n        elif isinstance(item, float):\n            weight = item\n        # If the item is neither a string nor a float, skip it\n        else:\n            continue\n        \n        # Add the base shipping cost to the total cost\n        total_cost += 50\n        \n        # If the weight is more than 5kg, add an additional charge\n        if weight > 5:\n            total_cost += 10\n        \n        # Add the weight to the total cost\n        total_cost += weight\n    \n    # Apply the location factor to the total cost\n    if location == \"Local\":\n        pass\n    elif location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    else:\n        pass\n    \n    # Return the total shipping cost rounded to two decimal places\n    return round(total_cost, 2)  # Changed here\n"}
{"task_id": "EvoEval/2", "completion": "\n    if not words:\n        return []\n    if isinstance(key, str):\n        key = sum(ord(c) for c in key)\n    result = []\n    for word in words:\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = 97 if char.islower() else 65\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        result.append(encrypted_word)\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n    if not input_string:\n        return []\n\n    result = []\n    def backtrack(start, path):\n        if start == len(input_string):\n            result.append(''.join(path))\n            return\n        for i in range(int(input_string[start])):\n            path.append(chr(96 + i))\n            backtrack(start + 1, path)\n            path.pop()\n\n    backtrack(0, [])\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    max_height = candles[0]\n    count = 1\n    for height in candles[1:]:\n        if height > max_height:\n            max_height = height\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n    result = []\n    left, right = 0, len(matrix[0]) - 1\n    for row in matrix:\n        if row:\n            if left <= right:\n                for i in range(left, right + 1):\n                    result.append(row[i])\n            else:\n                for i in range(right, left - 1, -1):\n                    result.append(row[i])\n        left += 1\n        right -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Get the x and y coordinates of the clicked cell\n    x, y = position\n    \n    # Check if the clicked cell is out of the grid\n    if x < 0 or x >= rows or y < 0 or y >= cols:\n        return grid\n    \n    # Check if the clicked cell is a mine\n    if grid[x][y] == 1:\n        return grid\n    \n    # Check if the clicked cell is already revealed\n    if grid[x][y] == 0:\n        return grid\n    \n    # Mark the clicked cell as revealed\n    grid[x][y] = 0\n    \n    # Check all adjacent cells (horizontal, vertical, and diagonal)\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            # Skip the current cell\n            if dx == 0 and dy == 0:\n                continue\n            \n            # Calculate the coordinates of the adjacent cell\n            nx, ny = x + dx, y + dy\n            \n            # Check if the adjacent cell is out of the grid\n            if nx < 0 or nx >= rows or ny < 0 or ny >= cols:\n                continue\n            \n            # Check if the adjacent cell is a mine\n            if grid[nx][ny] == 1:\n                continue\n            \n            # Recursively reveal the adjacent cell\n            grid = minesweeper_clicked(grid, (nx, ny))\n    \n    # Return the updated grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0  # Initialize the starting point (0,0)\r\n    for direction in code_sequence:\r\n        if direction == 0:  # North\r\n            y += 1\r\n        elif direction == 1:  # East\r\n            x += 1\r\n        elif direction == 2:  # South\r\n            y -= 1\r\n        elif direction == 3:  # West\r\n            x -= 1\r\n        else:  # Invalid direction\r\n            return 'Shangri not found'\r\n    if x == 0 and y == 0:  # If the sequence leads back to the starting point\r\n        return 'Shangri-La found'\r\n    else:\r\n        return 'Shangri not found'  # Otherwise, return 'Shangri not found'\r\n\r\n\r"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into rows\n    rows = canvas.split('\\n')\n    \n    # Initialize a set to store the positions of the painter\n    painter_positions = set()\n    \n    # Find the positions of the painter\n    for i, row in enumerate(rows):\n        if 'P' in row:\n            painter_positions.add((i, row.index('P')))\n    \n    # If there are no painters or more than one painter, return 'Invalid canvas'\n    if len(painter_positions) == 0 or len(painter_positions) > 1:\n        return 'Invalid canvas'\n    \n    # Initialize a set to store the positions of the painted spaces\n    painted_spaces = set()\n    \n    # Iterate over the rows and columns\n    for i in range(len(rows)):\n        for j in range(len(rows[i])):\n            # If the current space is not a wall and not a painter, paint it\n            if rows[i][j] != '#' and (i, j) not in painter_positions:\n                painted_spaces.add((i, j))\n    \n    # If the number of painted spaces divides the empty spaces evenly, return 'Invalid canvas'\n    if len(painted_spaces) % (len(rows) * len(rows[0]) - len(painted_spaces) - len(painter_positions)) == 0:\n        return 'Invalid canvas'\n    \n    # Update the canvas with the painted spaces\n    for i, j in painted_spaces:\n        rows[i] = rows[i][:j] + '*' + rows[i][j+1:]\n    \n    # Join the rows back into a string and return the updated canvas\n    return '\\n'.join(rows)  # Removed the unnecessary 'P' from the return statement\n"}
{"task_id": "EvoEval/9", "completion": "\n    # Remove punctuation and convert to lower case\n    string = ''.join(e for e in string if e.isalnum() or e.isspace()).lower()\n    # Split the string into words\n    words = string.split()\n    # Create a dictionary to store word frequencies\n    frequency = {}\n    # Iterate over each word\n    for word in words:\n        # If the word is already in the dictionary, increment its count\n        if word in frequency:\n            frequency[word] += 1\n        # Otherwise, add the word to the dictionary with a count of 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Initialize an empty dictionary to store the count of each animal\n    animal_count = {}\r\n    \r\n    # Initialize an empty list to store the count of each animal in the order they appear\r\n    result = []\r\n    \r\n    # Split the input string into a list of animal-sound pairs\r\n    animal_pairs = animal_string.split()\r\n    \r\n    # Iterate over each animal-sound pair\r\n    for pair in animal_pairs:\r\n        # Check if the pair is not empty\r\n        if pair:\r\n            # Extract the animal and the sound\r\n            animal = pair[0]\r\n            sound = pair[1:]\r\n            \r\n            # Check if the animal is valid (i.e., it has a corresponding sound in the legend)\r\n            if animal in ['C', 'D', 'B']:\r\n                # Check if the animal has already appeared twice before\r\n                if animal in animal_count and animal_count[animal] >= 2:\r\n                    continue\r\n                \r\n                # Count the number of sounds made by the animal\r\n                count = sound.count('|')\r\n                \r\n                # Check if the animal has already appeared before\r\n                if animal in animal_count:\r\n                    # If the animal has already appeared before, increment its count\r\n                    animal_count[animal] += count\r\n                else:\r\n                    # If the animal has not appeared before, add it to the dictionary with its count\r\n                    animal_count[animal] = count\r\n                \r\n                # Add the count of the animal to the result list\r\n                result.append(count)\r\n                \r\n                # Check if the total number of animals (invalid and valid) has reached 5\r\n                if len(result) == 5:\r\n                    break\r\n                    \r\n    return result\r\n\r"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])}, and from {location}? Marvelous!\"\n\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Count the occurrence of each element in the list\n    count_dict = {}\n    for num in flux_values:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the element with the maximum occurrence\n    max_count = max(count_dict.values())\n    \n    # If there are multiple elements with the maximum occurrence, select the smallest one\n    most_occurred_num = min([num for num, count in count_dict.items() if count == max_count])\n    \n    # Calculate the sum of all elements in the list\n    total_sum = sum(flux_values)\n    \n    # Multiply the sum of all elements with the most occurred number\n    energy_signature = total_sum * most_occurred_num\n    \n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for elem in elems:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    # Find the minimum frequency\n    min_freq = min(freq_dict.values())\n\n    # Find the rarest element(s) with the minimum frequency\n    rarest_elems = [elem for elem, freq in freq_dict.items() if freq == min_freq]\n\n    # Return the first rarest element\n    return rarest_elems[0] if rarest_elems else None\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                alias += 'e' if alias and alias[-1].lower() == 'e' else 'a' if alias and alias[-1].lower() == 'a' else 'i' if alias and alias[-1].lower() == 'i' else 'o' if alias and alias[-1].lower() == 'o' else 'u' if alias and alias[-1].lower() == 'u' else 'a'\n            else:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)]\n        else:\n            alias += char\n    return alias\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Create a dictionary to store the count of each card value\n    card_count = {}\n    for card in hand:\n        value = card[0]\n        if value == 'A':\n            value = 1\n        elif value == 'K':\n            value = 13\n        elif value == 'Q':\n            value = 12\n        elif value == 'J':\n            value = 11\n        elif value == '10':\n            value = 10\n        elif value == '9':\n            value = 9\n        elif value == '8':\n            value = 8\n        elif value == '7':\n            value = 7\n        elif value == '6':\n            value = 6\n        elif value == '5':\n            value = 5\n        elif value == '4':\n            value = 4\n        elif value == '3':\n            value = 3\n        elif value == '2':\n            value = 2\n        card_count[value] = card_count.get(value, 0) + 1\n\n    # Calculate the score based on the card counts\n    score = 0\n    for value, count in card_count.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += value * 2\n        elif count == 4:\n            score += value * 3\n        elif count == 5:\n            score += value * 4\n\n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < n:\n            fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n        return sum(fib_sequence)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard, magic in wizards:\n        dragon_hp -= magic\n        if dragon_hp <= 0:\n            return wizard\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    i = 1\n    while True:\n        if sum(int(digit) for digit in str(i)) == 7 and i % 7 == 0:\n            return i\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    # Initialize a set to store the positions of vampires\n    vampires = set()\n    \n    # Initialize a variable to store the count of humans in danger\n    humans_in_danger = 0\n    \n    # Iterate over each row in the matrix\n    for i in range(len(m)):\n        # Iterate over each cell in the row\n        for j in range(len(m[i])):\n            # If the cell contains a vampire\n            if m[i][j] == 2:\n                # Add the position of the vampire to the set\n                vampires.add((i, j))\n    \n    # Iterate over each row in the matrix\n    for i in range(len(m)):\n        # Iterate over each cell in the row\n        for j in range(len(m[i])):\n            # If the cell contains a human\n            if m[i][j] == 1:\n                # Check if the human shares a row or column with a vampire\n                if (i, j) in vampires or (j, i) in vampires:\n                    # If they do, increment the count of humans in danger\n                    humans_in_danger += 1\n    \n    # Return the count of humans in danger\n    return humans_in_danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n + 1):\n        pattern.append(','.join(str(j) for j in range(i, 0, -1)) + ',' + ','.join(str(j) for j in range(1, i + 1)))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    # Create a set of words for efficient lookups\n    word_set = set(words)\n    \n    # Iterate over each cell in the grid\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            # Check if the current cell is the start of a word\n            for word in word_set:\n                # Check if the word can be found horizontally\n                if word in ''.join(grid[i][j:j+len(word)]):\n                    # Remove the found word from the set\n                    word_set.discard(word)\n                # Check if the word can be found vertically\n                if word in ''.join([grid[x][j] for x in range(i, i+len(word))]):\n                    # Remove the found word from the set\n                    word_set.discard(word)\n    \n    # If all words have been found, return True\n    return len(word_set) == 0\n"}
{"task_id": "EvoEval/22", "completion": "\n    # Convert velocity from km to light years\n    v_ly = v / (9.461 * 10**12)\n    \n    # Calculate distance traveled\n    distance = t * v_ly\n    \n    return distance\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = []\n    num = 2\n    while len(primes) < 26:\n        if all(num % p > 0 for p in primes):\n            primes.append(num)\n        num += 1\n    result = \"\"\n    for char in s:\n        if char.isalpha() and char.islower():\n            result += str(primes[ord(char) - 97])\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    alien_word = ''\n    for char in english_word:\n        alien_word += alien_dict.get(char.lower(), '')\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    words = text.split()\r\n    word_count = {}\r\n    max_count = 0\r\n    max_sentence = \"\"\r\n    for i in range(len(words)):\r\n        if words[i] == \".\":\r\n            sentence = \" \".join(words[:i+1])\r\n            for w in words[:i+1]:\r\n                if w in word_count:\r\n                    word_count[w] += 1\r\n                else:\r\n                    word_count[w] = 1\r\n            if words[i-1] in word_count and word_count[words[i-1]] > max_count:\r\n                max_count = word_count[words[i-1]]\r\n                max_sentence = sentence\r\n    if word in word_count:\r\n        return (word_count[word], max_sentence)\r\n    else:\r\n        return (0, \"\")\r\n\r"}
{"task_id": "EvoEval/26", "completion": "\n    # Create a queue for BFS, enqueue the start position\n    queue = [(start, [])]\n    # Create a set to store visited positions\n    visited = set([start])\n    # Define the possible directions\n    directions = [(0, 1, 'right'), (0, -1, 'left'), (1, 0, 'down'), (-1, 0, 'up')]\n    while queue:\n        # Dequeue the next position and the path that leads to it\n        (x, y), path = queue.pop(0)\n        # If this is the end position, return the path\n        if (x, y) == end:\n            return path\n        # For each possible direction\n        for dx, dy, direction in directions:\n            # Calculate the new position\n            nx, ny = x + dx, y + dy\n            # If the new position is within the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 0) and ((nx, ny) not in visited):\n                # Mark the new position as visited\n                visited.add((nx, ny))\n                # Enqueue the new position and the updated path\n                queue.append(((nx, ny), path + [direction]))\n    # If the end position is not reachable, return an empty list\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate the taxable income by subtracting the deductions from the income\n    taxable_income = income - deductions\n    \n    # Initialize the tax amount to 0\n    tax_amount = 0\n    \n    # Calculate the tax for the first 10000 of income (tax-free)\n    tax_amount += 0\n    \n    # Calculate the tax for the next 2500 of income (15% tax rate)\n    tax_amount += (2500 * 0.15)\n    \n    # Calculate the tax for the next 4500 of income (25% tax rate)\n    tax_amount += (4500 * 0.25)\n    \n    # Calculate the tax for any income over 10000 (30% tax rate)\n    tax_amount += max(0, taxable_income - 10000) * 0.30\n    \n    # Calculate the tax reduction due to deductions\n    tax_reduction = 0\n    if deductions > 0:\n        tax_reduction += min(1000, deductions) * 1\n        tax_reduction += min(2000, deductions - 1000) * 2\n        tax_reduction += max(0, deductions - 3000) * 3\n    \n    # Subtract the tax reduction from the tax amount\n    tax_amount -= tax_reduction\n    \n    # Return the tax amount\n    return max(0, tax_amount)  # Ensure the tax amount is not negative\n"}
{"task_id": "EvoEval/29", "completion": "\n    n = len(s)\n    palindrome_substrings = set()\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            substring = s[i:i + length]\n            if substring == substring[::-1]:\n                palindrome_substrings.add(substring)\n    return sorted(list(palindrome_substrings))  # Convert set to list and sort\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Define the possible movements in the maze (up, down, left, right)\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Create a queue for BFS, enqueue the start point\n    queue = [(start, [start])]\n    \n    # Create a set to store the visited points\n    visited = set([start])\n    \n    while queue:\n        # Dequeue the next point\n        (x, y), path = queue.pop(0)\n        \n        # If this is the end point, return the path\n        if (x, y) == end:\n            return path\n        \n        # For each possible movement\n        for dx, dy in movements:\n            nx, ny = x + dx, y + dy\n            \n            # If the new point is inside the maze and is not a wall and has not been visited\n            if (0 <= nx < len(maze)) and (0 <= ny < len(maze[0])) and (maze[nx][ny] == 1) and ((nx, ny) not in visited):\n                # Mark the new point as visited\n                visited.add((nx, ny))\n                \n                # Enqueue the new point\n                queue.append(((nx, ny), path + [(nx, ny)]))\n    \n    # If no path is found, return an empty list\n    return []  # This line is not needed, but it's here to make the code compile\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # There is only one way to reach any cell in the first row or first column\n    for i in range(m + 1):\n        dp[i][0] = 1\n    for j in range(n + 1):\n        dp[0][j] = 1\n    \n    # Fill in the rest of the 2D array\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            # The number of unique paths to a cell is the sum of the number of unique paths to the cell above it and the cell to its left\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    \n    # The number of unique paths to the bottom-right cell is stored in the bottom-right cell of the 2D array\n    return dp[m][n]\n"}
{"task_id": "EvoEval/32", "completion": "\n    # Create a copy of the original playlist to avoid modifying it\n    playlist_copy = playlist.copy()\n    \n    # Sort the playlist copy to have a reference for the swaps\n    sorted_playlist = sorted(playlist_copy)\n    \n    # Initialize the seed and the index\n    seed = seed\n    index = 0\n    \n    # Loop through the playlist until the end\n    while index < len(playlist_copy):\n        # Check if the current song title contains the word \"Rock\"\n        if \"Rock\" in playlist_copy[index]:\n            # If it does, skip the swap operation\n            index += 1\n            seed = (seed * 16807) % 2147483647\n        else:\n            # Calculate the new index for the swap\n            new_index = (seed % len(playlist_copy))\n            \n            # Swap the current song title with the one at the new index\n            playlist_copy[index], playlist_copy[new_index] = playlist_copy[new_index], playlist_copy[index]\n            \n            # Update the seed and the index\n            seed = (seed * 16807) % 2147483647\n            index += 1\n    \n    # Return the shuffled playlist\n    return playlist_copy\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\r\n    dp[0] = 1\r\n    for i in range(1, n + 1):\r\n        for stone in magic_stones:\r\n            if i >= stone:\r\n                dp[i] += dp[i - stone]\r\n    return dp[n]  # return the number of distinct ways to reach the top of the staircase\r"}
{"task_id": "EvoEval/34", "completion": "\n    # Initialize an empty list to store the transformation percentages\n    transformation_percentages = []\n    \n    # Initialize the current transformation percentage to 0\n    current_transformation = 0\n    \n    # Loop over each day in the cycle\n    for day in range(1, n + 1):\n        # If the day is the most intense day, double the current transformation percentage\n        if day == m:\n            current_transformation = min(current_transformation * 2, 100)\n        # If the day is after the most intense day, decrease the current transformation percentage by 10%\n        elif day > m:\n            current_transformation = max(0, current_transformation - 10)\n        # If the day is before the most intense day, increase the current transformation percentage by 10%\n        else:\n            current_transformation = min(100, current_transformation + 10)\n        \n        # Append the current transformation percentage to the list\n        transformation_percentages.append(int(current_transformation))\n    \n    # Return the list of transformation percentages\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\":\r\n        return False\r\n    at_index = email.index(\"@\")\r\n    if \".\" not in email[at_index + 1:]:\r\n        return False\r\n    return True\r\n\r"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i in range(1, len(xs)):\n        integral_coefficients.append(xs[i - 1] / (i + 1))\n    return integral_coefficients\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''\n    for char in s:\n        if char in vowels:\n            idx = vowels.index(char)\n            result += vowels[(idx + 1) % len(vowels)]\n        elif char in consonants:\n            idx = consonants.index(char)\n            result += consonants[(idx + 1) % len(consonants)]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\ufe0f\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\"\n    }\n    for emot in emoticons:\n        sentence = sentence.replace(emot, emoticons[emot])\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Create the top and bottom frames\n    frame = \"*\" + \"*\" * (n * len(s)) + \"*\\n\"\n    \n    # Create the middle part of the ASCII art\n    middle = \"\"\n    for i in range(n):\n        for char in s:\n            middle += char + \" \"\n        middle += \"\\n\"\n    \n    # Create the bottom frame\n    bottom = \"*\" + \"*\" * (n * len(s)) + \"*\\n\"\n    \n    # Combine the frames and the middle part\n    ascii_art = frame + middle + bottom\n    \n    return ascii_art\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = [potion.split() for potion in potions]\n    potions.sort(key=lambda x: (int(x[1]), x[0]))\n    target = 0\n    result = []\n    for potion in potions:\n        if target + int(potion[1]) <= target:\n            continue\n        if target + int(potion[1]) == target:\n            result.append(potion[0])\n            break\n        target += int(potion[1])\n        result.append(potion[0])\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    rows = len(arr)\n    cols = len(arr[0])\n    dp = [[0] * cols for _ in range(rows)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, rows):\n        dp[i][0] = dp[i - 1][0] + arr[i][0]\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j - 1] + arr[0][j]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + arr[i][j]\n    return dp[-1][-1]  # return the minimum energy required to reach the safe cell\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player has acquired a legendary item\n    if 5 in player_input:\n        # If the player has acquired a legendary item, find the second most valuable item\n        # First, remove the legendary item from the list\n        player_input.remove(5)\n        # Sort the list in descending order\n        player_input.sort(reverse=True)\n        # If the player has only acquired the legendary item, return -1\n        if len(player_input) == 1:\n            return True, -1\n        # Otherwise, return True and the rarity of the second most valuable item\n        else:\n            return True, player_input[1]\n    # If the player has not acquired a legendary item, return False and None\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    # Calculate the duration of the trip\n    trip_duration = distance / speed\n    \n    # Check if the spaceship can reach the planet\n    if trip_duration <= fuel:\n        # Calculate the fuel consumption for the trip\n        fuel_consumption = (spaceship_weight * planet_gravity * 0.1) * trip_duration\n        \n        # Calculate the remaining fuel\n        remaining_fuel = fuel - fuel_consumption\n        \n        # Return the remaining fuel rounded to 2 decimal points\n        return round(remaining_fuel, 2)\n    else:\n        # Return 'Insufficient fuel' if the spaceship cannot reach the planet\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    def fairy_tale_transport(q,w,e):\n        return sum(q) <= w + e\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    current_view = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                current_view += 1\n            elif arr[j] == arr[i]:\n                current_view += 1\n                break\n            else:\n                break\n        max_view = max(max_view, current_view)\n        current_view = 0\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_message = \"Take the cannoli.\"\n        result = []\n        for case in test_cases:\n            words = [word.replace(',', '').replace('.', '').replace('?', '').replace('!', '').lower() for word in case]\n            secret = ''\n            for word in words:\n                if secret_message in word:\n                    secret += word[0]\n            result.append(secret)\n        return result\n    # Test the function\n    print(hidden_message([['Hello, world!okay?', 'okay'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple', 'Ban', 'grape', 'kiwi', 'melon'], ['Take the cannoli.', 'bgkm']]))\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['?hi']]))\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.']]))  # This should return 't'\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.', 'bgkm']]))  # This should return 'tbg'\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.', 'bgkm', 'Take the cannoli.']]))  # This should return 'tbg'\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.', 'bgkm', 'Take the cannoli.', 'Take the cannoli.']]))  # This should return 'tbg'\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.', 'bgkm', 'Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.']]))  # This should return 'tbg'\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.', 'bgkm', 'Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.', 'Take the cannoli.']]))  # This should return 'tbg'\n    print(hidden_message([['This', 'is', 'a', 'test', 'case'], ['Take the cannoli.', 'bgkm', 'Take the cannoli"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quant']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}  # Filter out items with quantity 0 or less\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        'A': '01', 'B': '1000', 'C': '1010', 'D': '100', 'E': '0', 'F': '0010', 'G': '110', 'H': '0000', 'I': '00', 'J': '0111', 'K': '101', 'L': '0100', 'M': '11', 'N': '10', 'O': '111', 'P': '0110', 'Q': '1101010', 'R': '000', 'S': '1', 'T': '001', 'U': '001', 'V': '0001', 'W': '011', 'X': '1001', 'Y': '1011', 'Z': '1100', '1': '01111', '2': '200111000110000100000', '3': '10000', '4': '1100011100', '5': '11110', '6': '011111', '7': '1110111', '8': '1111011', '9': '1111111', '0': '111011111'\n    }\n    msg = msg.split('/')\n    decoded_msg = ''\n    for word in msg:\n        word = word.split()\n        for char in word:\n            decoded_msg += list(morse_code.keys())[list(morse_code.values()).index(char)]\n    return decoded_msg\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-'}\n    text = text.upper()\n    result = ''\n    for char in text:\n        if char == ' ':\n            result += '   '\n        else:\n            result += morse_code[char] + ' '\n    return result.strip()\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i, char in enumerate(string):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    orders.sort(reverse=True)\n    total_cookies = 0\n    fulfilled_orders = 0\n    for order in orders:\n        if total_cookies + order <= n:\n            total_cookies += order\n            fulfilled_orders += 1\n        else:\n            break\n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for i, c in enumerate(s):\n        if c in vowels:\n            idx = vowels.index(c)\n            if i % 2 == 0:\n                result += vowels[(idx + 1) % len(vowels)]\n            else:\n                result += vowels[(idx - 1) % len(vowels)]\n        elif c.isalpha():\n            if c.isupper():\n                result += chr((ord(c) - ord('A') + 1) % 26 + ord('A'))\n            else:\n                result += chr((ord(c) - ord('a') + 1) % 26 + ord('a'))\n        else:\n            result += c\n        if i % 2 == 0 and c == '?':\n            result = result[:-1] + '!' + result[-1]\n        elif i % 2 != 0 and c == '!':\n            result = result[:-1] + '?' + result[-1]\n    return result\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = \"\"\n    shift = 0\n    for char in message:\n        if char.isalpha():\n            shift += 1\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    words = s.split()\n    morse_code = ''\n    for word in words:\n        for char in word:\n            morse_code += morse_code_dict.get(char, '') + ' '\n        morse_code += '/ '\n    return morse_code.strip()  # Remove trailing space\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, letter in enumerate(dish):\n            transformed_dish += magic_spell[i % len(magic_spell)]\n        new_menu[transformed_dish] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for char in earth_phrase:\n        if char in vowels:\n            if char == 'a':\n                result += 'e'\n            elif char == 'e':\n                result += 'i'\n            elif char == 'i':\n                result += 'o'\n            elif char == 'o':\n                result += 'u'\n            elif char == 'u':\n                result += 'a'\n        elif char in consonants:\n            if char == 'z':\n                result += 'b'\n            else:\n                result += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            result += '@'\n        else:\n            raise ValueError('Invalid character')\n    words = result.split('@')\n    for i, word in enumerate(words):\n        if i == 0:\n            if word[0] in vowels:\n                result = word + 'xy' + result[1:]\n            else:\n                result = word + 'yz' + result[1:]\n        else:\n            if word[0] in vowels:\n                result = result[:len(result) - len(word) - 1] + word.capitalize() + 'xy' + result[len(result) - len(word) - 1:]\n            else:\n                result = result[:len(result) - len(word) - 1] + word.capitalize() + 'yz' + result[len(result) - len(word) - 1:]\n    return result\n"}
{"task_id": "EvoEval/59", "completion": "\n    # First, we sort the dictionary items based on the number of recipes in descending order and then by the ingredient in ascending order\n    sorted_items = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Then, we create a list of tuples where each tuple contains an ingredient and the number of recipes\n    result = [(ingredient, num_recipes) for ingredient, num_recipes in sorted_items]\n    \n    # Finally, we return the result\n    return result\n"}
{"task_id": "EvoEval/60", "completion": "\n    sugar_locations = set(sugar_locations)\n    happy_ants_count = 0\n    for ant_position, direction in ant_positions:\n        while ant_position < path_length:\n            if ant_position in sugar_locations:\n                happy_ants_count += 1\n            if direction == \"right\":\n                ant_position += 1\n            else:\n                ant_position -= 1\n    return happy_ants_count"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    result = []\n    for i, c in enumerate(s):\n        if c.isalpha():\n            if i % 2 == 1:\n                if c.islower():\n                    result.append(c.upper())\n                else:\n                    result.append(c.lower())\n            else:\n                if c in vowels:\n                    if c == 'a':\n                        result.append('e')\n                    elif c == 'e':\n                        result.append('i')\n                    elif c == 'i':\n                        result.append('o')\n                    elif c == 'o':\n                        result.append('u')\n                    elif c == 'u':\n                        result.append('a')\n                else:\n                    if c == 'b':\n                        result.append('z')\n                    elif c == 'c':\n                        result.append('b')\n                    elif c == 'd':\n                        result.append('y')\n                    elif c == 'f':\n                        result.append('u')\n                    elif c == 'g':\n                        result.append('i')\n                    elif c == 'h':\n                        result.append('e')\n                    elif c == 'j':\n                        result.append('a')\n                    elif c == 'k':\n                        result.append('s')\n                    elif c == 'l':\n                        result.append('o')\n                    elif c == 'm':\n                        result.append('u')\n                    elif c == 'n':\n                        result.append('i')\n                    elif c == 'p':\n                        result.append('y')\n                    elif c == 'q':\n                        result.append('e')\n                    elif c == 'r':\n                        result.append('a')\n                    elif c == 's':\n                        result.append('s')\n                    elif c == 't':\n                        result.append('i')\n                    elif c == 'v':\n                        result.append('o')\n                    elif c == 'w':\n                        result.append('u')\n                    elif c == 'x':\n                        result.append('e')\n                    elif c == 'y':\n                        result.append('a')\n                    elif c == 'z':\n                        result.append('b')\n        else:\n            result.append(c)\n    return ''.join(result)  # return the result as a string\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in reci.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\r\n    while p > 0:\r\n        pyramid.append(p)\r\n        if p % 2 == 0:\r\n            p -= 2\r\n        else:\r\n            p -= 3\r\n    return pyramid[::-1]  # Return the list in reverse order\r"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in menu.items():\n        if food in order:\n            new_ingredients = ingredients.copy()\n            if \"remove\" in order[food]:\n                for ingredient in order[food][\"remove\"]:\n                    if ingredient in new_ingredients:\n                        new_ingredients.remove(ingredient)\n            if \"add\" in order[food]:\n                for ingredient in order[food][\"add\"]:\n                    if ingredient not in new_ingredients:\n                        new_ingredients.append(ingredient)\n            final_order[food] = new_ingredients\n        else:\n            final_order[food] = ingredients\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    anagrams = {}\n    for prime in primes:\n        sorted_prime = \"\".join(sorted(str(prime)))\n        if sorted_prime in anagrams:\n            anagrams[sorted_prime].append(prime)\n        else:\n            anagrams[sorted_prime] = [prime]\n\n    result = []\n    for anagram in anagrams.values():\n        if len(anagram) > 1:\n            for i in range(len(anagram)):\n                for j in range(i + 1, len(anagram)):\n                    if anagram[i] < anagram[j]:\n                        result.append((anagram[i], anagram[j]))\n                    else:\n                        result.append((anagram[j], anagram[i]))\n    return sorted(result)  # sorted by the first number in each tuple, then by the second number\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        result[customer] = sum(meal['calories'] for meal in meals.get(customer, []))\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    n = len(arr)\n    if n <= 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(2, n):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True"}
{"task_id": "EvoEval/69", "completion": "\n    # Create a dictionary to store the indices of the cards\n    card_dict = {}\n    for i, card in enumerate(cards):\n        # If the card is already in the dictionary, return the current index and the stored index\n        if card in card_dict:\n            return (card_dict[card], i)\n        # Otherwise, store the index in the dictionary\n        card_dict[card] = i\n    # If no pair of cards multiplies to the magic number, return \"No magic today\"\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    # Check if the path list is empty or if the planet does not exist in the dictionary\n    if not path or path[0] not in planets or path[-1] not in planets:\r\n        return False\r\n\r\n    # Iterate over the path list\n    for i in range(len(path) - 1):\r\n        # Check if the current planet connects directly to the next planet\r\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\r\n            return False\r\n\r\n    # If the function has not returned False, the path is valid\r\n    return True\r\n\r"}
{"task_id": "EvoEval/71", "completion": "\n    result = \"\"\n    vow_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if char.lower() in 'aeiou':\n                vow_count += 1\n        else:\n            result += char\n    return result, vow_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for i, string in enumerate(lst):\n        count = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{string}' who was known for telling {count} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Calculate the number of rows and columns in the grid\n    num_rows = len(grid)\r\n    num_cols = len(grid[0])\r\n\r\n    # Calculate the total number of treasures in the pyramid\n    total_treasures = sum(sum(row) for row in grid)\r\n\r\n    # Calculate the number of trips needed to collect all treasures\n    num_trips = math.ceil(total_treasures / bag_capacity)\r\n\r\n    return num_trips\r\n\r"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char in vowels:\n            idx = (vowels.index(char) + 1) % len(vowels)\n            result += vowels[idx]\n        elif char in consonants:\n            idx = (consonants.index(char) + 1) % len(consonants)\n            result += consonants[idx]\n        elif char in digits:\n            idx = (int(char) + 1) % 10\n            result += str(idx)\n        elif char == '?':\n            if i % 2 == 0:\n                result += '!'\n            else:\n                result += '?'\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    level = 0\n    for num in lst:\n        level += num\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    # Initialize an empty list to store the points for each number in the sequence\n    points = []\n    \n    # Iterate over each number in the sequence\n    for num in sequence:\n        # Initialize a variable to store the points for the current number\n        total_points = 0\n        \n        # Initialize a variable to store the current divisor\n        divisor = num\n        \n        # Continue dividing the number by k until it reaches 1\n        while divisor > 1:\n            # Add the points for the current divisor to the total points\n            total_points += divisor // k\n            \n            # Update the divisor for the next iteration\n            divisor //= k\n        \n        # Add the points for the current number to the list of points\n        points.append(total_points)\n    \n    # Sort the list of points in decreasing order\n    points.sort(reverse=True)\n    \n    # Return the sorted list of points\n    return points\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize a list to store the maximum profit for each day\n    max_profit = [0] * (days + 1)\r\n    # Iterate over each day\n    for i in range(1, days + 1):\r\n        # Initialize the maximum profit for the current day to 0\r\n        max_profit[i] = 0\r\n        # Iterate over each previous day\n        for j in range(i):\r\n            # Calculate the profit if the vendor buys the fruit on the current day and sells it on the next day\r\n            profit = prices[i - 1] - prices[j - 1] + max_profit[j]\r\n            # Update the maximum profit for the current day\r\n            max_profit[i] = max(max_profit[i], profit)\r\n    # Return the maximum profit for the last day\r\n    return max_profit[days] if max_profit[days] > 0 else 0\r\n\r"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the player's position and path\n    player_position = [0, 0]\n    player_path = [tuple(player_position)]\n    \n    # Define the possible movements\n    movements = {\n        'up': [-1, 0],\n        'down': [1, 0],\n        'left': [0, -1],\n        'right': [0, 1]\n    }\n    \n    # Process each instruction\n    for instruction in instructions:\n        # Get the movement for the current instruction\n        movement = movements[instruction]\n        \n        # Calculate the new position\n        new_position = [player_position[0] + movement[0], player_position[1] + movement[1]]\n        \n        # Check if the new position is valid\n        if (0 <= new_position[0] < len(map)) and (0 <= new_position[1] < len(map[0])) and (map[new_position[0]][new_position[1]] != 'X'):\n            # Update the player's position and path\n            player_position = new_position\n            player_path.append(tuple(player_position))\n            \n            # Check if the player has reached the end\n            if map[player_position[0]][player_position[1]] == 'E':\n                break\n    \n    return player_path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    for i in range(len(word_list) - 1):\n        if alien_dictionary.index(word_list[i][-1]) > alien_dictionary.index(word_list[i + 1][-1]):\n            return \"INCOR\"\n        elif alien_dictionary.index(word_list[i][-1]) == alien_dictionary.index(word_list[i + 1][-1]):\n            if len(word_list[i]) > len(word_list[i + 1]):\n                return \"INCOR\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Define the zodiac signs and their corresponding elements\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n\n    # Initialize a dictionary to store the count of each element\n    element_count = {\"Fire\": 0, \"Water\": 0, \"Air\": 0, \"Earth\": 0}\n\n    # Iterate over each birthday in the list\n    for birthday in birthdays:\n        # Extract the month and day from the birthday\n        month, day = birthday.split(\"-\")[1].split(\" \")[0], birthday.split(\"-\")[1].split(\" \")[1]\n\n        # Determine the zodiac sign based on the month and day\n        if (int(month) == 3 and int(day) >= 21) or (int(month) == 4 and int(day) <= 19):\n            zodiac_sign = \"Aries\"\n        elif (int(month) == 4 and int(day) >= 20) or (int(month) == 5 and int(day) <= 20):\n            zodiac_sign = \"Taurus\"\n        elif (int(month) == 5 and int(day) >= 21) or (int(month) == 6 and int(day) <= 20):\n            zodiac_sign = \"Gemini\"\n        elif (int(month) == 6 and int(day) >= 21) or (int(month) == 7 and int(day) <= 22):\n            zodiac_sign = \"Cancer\"\n        elif (int(month) == 7 and int(day) >= 23) or (int(month) == 8 and int(day) <= 22):\n            zodiac_sign = \"Leo\"\n        elif (int(month) == 8 and int(day) >= 23) or (int(month) == 9 and int(day) <= 22):\n            zodiac_sign = \"Virgo\"\n        elif (int(month) == 9 and int(day) >= 23) or (int(month) == 10 and int(day) <= "}
{"task_id": "EvoEval/83", "completion": "\n    s = list(s)\n    left, right = 0, len(s) - 1\n    while left < right:\n        if s[left] not in 'aeiouAEIOU':\n            left += 1\n        elif s[right] not in 'aeiouAEIOU':\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left, right = left + 1, right - 1\n    return ''.join(s)  # return the string after reversing the vowels\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n        def dfs(node, path):\n            if not node:\n                return []\n            if not node:\n                return [path]\n            left_paths = dfs(node.get(2), path + [2])\n            right_paths = dfs(node.get(5), path + [5])\n            return left_paths + right_paths\n        return dfs(tree, [1])\n    tree = {1: {2: {4: {}, 5: {}}, 3: {6: {}, 7: {}}}}\n    assert tree_traversal(tree) == [[1, 2, 4], [1, 2, 5], [1, 3, 6], [1, 3, 7]]\n    tree = {1: {4: {}, 5: {8: {}}}}\n    assert tree_traversal(tree) == [[1, 4], [1, 5, 8]]\n    tree = {1: {7: {}, 2: {8: {}}}}\n    assert tree_traversal(tree) == [[1, 7], [1, 2, 8]]\n    tree = {1: {2: {3: {4: {}}}}}\n    assert tree_traversal(tree) == [[1, 2, 3, 4]]\n    tree = {1: {2: {3: {4: {5: {}}}}}}\n    assert tree_traversal(tree) == [[1, 2, 3, 4, 5]]\n    tree = {1: {2: {3: {4: {5: {6: {}}}}}}}\n    assert tree_traversal(tree) == [[1, 2, 3, 4, 5, 6]]\n    tree = {1: {2: {3: {4: {5: {6: {7: {}}}}}}}}\n    assert tree_traversal(tree) == [[1, 2, 3, 4, 5, 6, 7]]\n    tree = {1: {2: {3: {4: {5: {6: {7: {8: {}}}}}}}}}\n    assert tree_traversal(tree) == [[1, 2, 3, 4, 5, 6, 7, 8]]\n    tree = {1: {2: {3: {4: {"}
{"task_id": "EvoEval/85", "completion": "\n    # Get the number of rows and columns in the grid\n    rows, cols = len(grid), len(grid[0])\n    \n    # Create a 2D array to store the minimum number of moves to reach each cell\n    dp = [[float('inf')] * cols for _ in range(rows)]\n    \n    # Initialize the first cell as 0, since we are already at the starting point\n    dp[0][0] = 0\n    \n    # Fill the first row\n    for j in range(1, cols):\n        if grid[0][j] == 0:\n            dp[0][j] = dp[0][j-1] + 1\n        else:\n            dp[0][j] = float('inf')\n    \n    # Fill the first column\n    for i in range(1, rows):\n        if grid[i][0] == 0:\n            dp[i][0] = dp[i-1][0] + 1\n        else:\n            dp[i][0] = float('inf')\n    \n    # Fill the rest of the grid\n    for i in range(1, rows):\n        for j in range(1, cols):\n            if grid[i][j] == 0:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = float('inf')\n    \n    # If the princess's coordinate is out of the grid, return -1\n    if coord[0] < 0 or coord[0] >= rows or coord[1] < 0 or coord[1] >= cols:\n        return -1\n    \n    # Return the minimum number of moves to reach the princess\n    return dp[coord[0]][coord[1]] if dp[coord[0]][coord[1]] != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    # Sort the movies based on ratings and release year\n    sorted_movies = sorted(m_dict, key=lambda x: (-m_dict[x][0], -m_dict[x][1]))\n    # Return the sorted list of movie names\n    return sorted_movies\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = ''\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result += arr[top][i]\n        top += 1\n        for i in range(top, bottom + 1):\n            result += arr[i][right]\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result += arr[bottom][i]\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result += arr[i][left]\n            left += 1\n    return result  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I fixed it.  # This line is not indented correctly, it should be inside the function. I"}
{"task_id": "EvoEval/88", "completion": "\n\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n        for planet, features in dict_of_planets.items():\n            if features[0] is not None and features[1] is not None:\n                population = features[0]\n                size = features[1]\n                density = round(population / size, 2)\n                result[planet] = density\n        return result\n    \"\"\"\n    def planet_population(dict_of_planets):\n        result = {}\n       "}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2 == 0]\n    aliens.append(aliens[-1] + 2)\n    aliens.sort()\n    aliens = [alien for alien in aliens if alien % 2"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        if len(s) == 1:\n            return [[int(s)]]\n        combinations = []\n        for i in range(len(s)):\n            first_digit = s[:i] + s[i+1:]\n            for c in get_combinations(first_digit):\n                combinations.append([int(s[i])] + c)\n        return combinations\n\n    def sum_combinations(combinations):\n        return [sum(c) for c in combinations]\n\n    s1 = [int(d) for d in s1]\n    s2 = [int(d) for d in s2]\n    combinations1 = get_combinations(s1)\n    combinations2 = get_combinations(s2)\n    sums1 = sum_combinations(combinations1)\n    sums2 = sum_combinations(combinations2)\n    return sum(s * t for s in sums1 for t in sums2)  # sum of products of all combinations\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        elif status == 'On Ground' and action == 'Land':\n            return 'Invalid Action Sequence'\n        elif status == 'In Space' and action == 'Launch':\n            return 'Invalid Action Sequence'\n        elif status == 'On Ground' and action == 'Move':\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each layer\n    for i in range(1, n + 1):\n        # Calculate the width of the current layer\n        width = 2 * i - 1\n        # Calculate the number of letters to paint in the current layer\n        num_letters = min(i, 26)\n        # Initialize an empty string to store the current layer\n        layer = ''\n        # Loop through each letter in the current layer\n        for j in range(1, num_letters + 1):\n            # Calculate the number of spaces to add before the letter\n            num_spaces = (width - 1) // 2 - j\n            # Add the spaces before the letter\n            layer += ' ' * num_spaces\n            # Add the letter\n            layer += chr(64 + j)\n            # Add the spaces after the letter\n            layer += ' ' * (width - 1 - 2 * num_spaces - j)\n        # Add the current layer to the result\n        result += layer.center(width) + '\\n'\n    # Return the result\n    return result.strip()\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i in range(len(message)):\n        if message[i].isalpha():\n            shift = n_values[i % len(n_values)]\n            if message[i].isupper():\n                result += chr((ord(message[i]) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(message[i]) - 97 + shift) % 26 + 97)\n        else:\n            result += message[i]\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(word.split(), key=len)) for word in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    diagonal1 = sum(m[i][i] for i in range(len(m)))\n    diagonal2 = sum(m[i][len(m) - i - 1] for i in range(len(m)))\n    return abs(diagonal1 - diagonal2)  # return the absolute difference between the two diagonals\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0:\n            product = 1\n            for digit in str(abs(lst[i])):\n                product *= int(digit)\n            if product == i:\n                magic_indices.append(i)\n    return sorted(magic_indices)  # Return a sorted list of magic indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Check if the alien name is a string and the humans dictionary is a dictionary\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    \n    # Define the order of continents\n    continents = [\"Asia\", \"Africa\", \"Europe\", \"North\", \"South\"]\n    \n    # Initialize an empty list to store the humans that will encounter the alien\n    humans_encountered = []\n    \n    # Check if the alien starts in Asia\n    if humans.get(alien, None) == \"Asia\":\n        # Add the humans living in Asia to the list\n        humans_encountered.extend([human for human, continent in humans.items() if continent == \"Asia\"])\n    \n    # Iterate over the continents in the order they will be invaded\n    for continent in continents:\n        # Check if the alien will invade the current continent\n        if humans.get(alien, None) == continent:\n            # Add the humans living in the current continent to the list\n            humans_encountered.extend([human for human, human_continent in humans.items() if human_continent == continent])\n    \n    # Return the list of humans that will encounter the alien, sorted\n    return sorted(humans_encountered)\n"}
{"task_id": "EvoEval/98", "completion": "\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n    prime_numbers = [num for num in sequence if is_prime(num)]\n    for num in prime_numbers:\n        sequence[sequence.index(num)] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(len(rounds[i])):\n            players = players[rounds[i][j] % len(players):] + players[:rounds[i][j] % len(players)]\n            players.pop()\n    return players\n"}
