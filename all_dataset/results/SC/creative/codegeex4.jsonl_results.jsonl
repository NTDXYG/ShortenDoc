{"task_id": "EvoEval/0", "completion": "\n    base_cost = 50\n    location_factors = {\n        \"Local\": 1,\n        \"National\": 1.5,\n        \"International\": 2.5,\n        \"other\": 1\n    }\n    weight_factor = 1\n    total_cost = 0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1\n            weight_factor *= 15\n        else:\n            weight = item\n        if weight > 5:\n            total_cost += 10\n        total_cost += base_cost * weight_factor\n    total_cost *= location_factors.get(location, 1)\n    return f\"{total_cost:.2f}\"", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 157, in <module>\n  File \"<string>\", line 155, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0\n    for item in items:\n        weight = float(item) if isinstance(item, str) else item\n        base_cost = 50\n        if weight > 5:\n            base_cost += 10\n        total_cost += base_cost\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 147, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 27, in calculate_shipping_cost\n        weight = float(item) if isinstance(item, str) else item\nValueError: could not convert string to float: 'Book'\n", "passed": false}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(c) for c in key)\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    result = []\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            if int(input_string[i:j]) <= 26:\n                result.append(chr(ord('a') + int(input_string[i:j]) - 1))\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = max(candles)\n    count = 0\n    for candle in candles:\n        if candle == tallest:\n            count += 1\n    return count\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    \n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    direction = 1  # 1 for right, -1 for left\n    \n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n            if (i + j) % 2 == 0:\n                if j == cols - 1:\n                    direction = -1\n                    i += 1\n                elif i == 0:\n                    direction = 1\n                    j += 1\n            else:\n                if i == rows - 1:\n                    direction = 1\n                    j += 1\n                elif j == 0:\n                    direction = -1\n                    i += 1\n    \n    return result\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 150, in <module>\n  File \"<string>\", line 148, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/6", "completion": "\n    if position[0] < 0 or position[0] >= len(grid) or position[1] < 0 or position[1] >= len(grid[0]):\n        return grid\n    if grid[position[0]][position[1]] == 1:\n        return grid\n    if grid[position[0]][position[1]] == 0:\n        return grid\n    if grid[position[0]][position[1]] == -1:\n        grid[position[0]][position[1]] = 0\n        for i in range(max(0, position[0] - 1), min(len(grid), position[0] + 2)):\n            for j in range(max(0, position[1] - 1), min(len(grid[0]), position[1] + 2)):\n                if grid[i][j] == 1:\n                    grid[i][j] = 0\n                else:\n                    grid[i][j] = -1\n        return grid\n    return grid\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 161, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\r\n    for code in code_sequence:\r\n        if code == 0:\r\n            y += 1\r\n        elif code == 1:\r\n            x += 1\r\n        elif code == 2:\r\n            y -= 1\r\n        elif code == 3:\r\n            x -= 1\r\n    if x == 0 and y == 0:\r\n        return 'Shangri found'\r\n    else:\r\n        return 'Shangri not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 146, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    if canvas.count('P') != 1 or canvas.count('-') % canvas.count(' ') == 0:\n        return 'Invalid canvas'\n    for i in range(painter, len(canvas)):\n        if canvas[i] == '#':\n            break\n        if canvas[i] == '-':\n            canvas[i] = '*'\n    for i in range(painter, -1, -1):\n        if canvas[i] == '#':\n            break\n        if canvas[i] == '-':\n            canvas[i] = '*'\n    return ''.join(canvas)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 151, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 28, in transform_canvas\n    if canvas.count('P') != 1 or canvas.count('-') % canvas.count(' ') == 0:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {}\n    animal_order = []\n    sounds = animal_string.split()\n    for sound in sounds:\n        if len(sound) % 2 == 0:\n            animal = sound[0]\n            count = len(sound) // 2\n            if animal not in animal_counts:\n                animal_counts[animal] = count\n                animal_order.append(animal)\n            elif animal_counts[animal] < 2:\n                animal_counts[animal] += count\n            if len(animal_counts) == 5:\n                break\n    return [animal_counts[animal] for animal in animal_order if animal in animal_counts]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, are those {fruits[0]} from {location} Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location} Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location} Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    # Find the element with maximum occurrence\n    max_occurrence = max(flux_values, key=flux_values.count)\n    \n    # Find the sum of all elements in the array\n    sum_elements = sum(flux_values)\n    \n    # Multiply the sum of all elements with the most occurred number\n    result = sum_elements * max_occurrence\n    \n    return result\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    min_count = min(count.values())\n    rarest_elems = [elem for elem, cnt in count.items() if cnt == min_count]\n    return rarest_elems[0]", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                alias += vowels[(index + 1) % len(vowels)].upper() if char.isupper() else vowels[(index + 1) % len(vowels)]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                alias += consonants[(index + 1) % len(consonants)].upper() if char.isupper() else consonants[(index + 1) % len(consonants)]\n    return alias\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/15", "completion": "\n    hand = [int(card[:-1]) for card in hand]\n    hand.sort()\n    if hand.count(hand[0]) == 5:\n        return hand[0] * 4\n    elif hand.count(hand[0]) == 4:\n        return hand[0] * 3\n    elif hand.count(hand[0]) == 3 and hand.count(hand[3]) == 2:\n        return hand[0] * 2 + hand[3]\n    elif hand.count(hand[0]) == 3 and hand.count(hand[2]) == 2:\n        return hand[0] * 2 + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 3:\n        return hand[2] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 3:\n        return hand[3] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 3:\n        return hand[4] * 2 + hand[0]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[2]) == 2:\n        return hand[0] * 2 + hand[2]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[3]) == 2:\n        return hand[0] * 2 + hand[3]\n    elif hand.count(hand[0]) == 2 and hand.count(hand[4]) == 2:\n        return hand[0] * 2 + hand[4]\n    else:\n        return 0\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 160, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 26, in evaluate_poker_hand\n    hand = [int(card[:-1]) for card in hand]\n  File \"<string>\", line 26, in <listcomp>\n    hand = [int(card[:-1]) for card in hand]\nValueError: invalid literal for int() with base 10: 'A'\n", "passed": false}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0, 1]\n        for i in range(2, n):\n            fib.append(fib[i-1] + fib[i-2])\n        return sum(fib)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        if wizard[1] >= dragon_hp:\n            return wizard[0]\n        dragon_hp -= wizard[1]\n    return 'The dragon won!'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    def is_magical(n):\n        return sum(int(digit) for digit in str(n)) == 7 and n % 7 == 0\n    count = 0\n    for i in range(1, 10000):\n        if is_magical(i):\n            count += 1\n            if count == n:\n                return i\n    return None\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 142, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in vampires_in_matrix\n                if i > 0 and m[i-1][j] == 2:\nIndexError: list index out of range\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return [','.join(pattern)]\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_grid(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if is_word_in_row(word, grid, i, j) or is_word_in_column(word, grid, i, j):\n                        return True\n        return False\n\n    def is_word_in_row(word, grid, row, col):\n        if col + len(word) > len(grid[row]):\n            return False\n        for i in range(len(word)):\n            if grid[row][col + i] != word[i]:\n                return False\n        return True\n\n    def is_word_in_column(word, grid, row, col):\n        if row + len(word) > len(grid):\n            return False\n        for i in range(len(word)):\n            if grid[row + i][col] != word[i]:\n                return False\n        return True\n\n    for word in words:\n        if not is_word_in_grid(word, grid):\n            return False\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 166, in <module>\n  File \"<string>\", line 164, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    distance = t * v\n    light_years = distance / 9.461e12\n    return light_years\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 124, in <module>\n  File \"<string>\", line 122, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '`', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    word_count = 0\n    max_sentence = \"\"\n    max_count = 0\n    for sentence in sentences:\n        count = sentence.lower().split().count(word.lower())\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence\n        word_count += count\n    return word_count, max_sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end are out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end are walls\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue and visited set\n    queue = [(start, [])]\n    visited = set()\n    # Loop until the queue is empty\n    while queue:\n        # Get the current position and path\n        current, path = queue.pop(0)\n        # Check if the current position is the end\n        if current == end:\n            return path\n        # Add the current position to the visited set\n        visited.add(current)\n        # Get the neighbors of the current position\n        neighbors = get_neighbors(maze, current)\n        # Loop through the neighbors\n        for neighbor in neighbors:\n            # Check if the neighbor has not been visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue with the updated path\n                queue.append((neighbor, path + [get_direction(current, neighbor)]))\n    # If the queue is empty, there is no path\n    return []", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 80, in <module>\n  File \"<string>\", line 78, in check\n        _check_maze(*inp, candidate(*inp), exp)\n  File \"<string>\", line 43, in pathfinder\n        neighbors = get_neighbors(maze, current)\nNameError: name 'get_neighbors' is not defined\n", "passed": false}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 12500:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 17000:\n        return 1500 + (taxable_income - 12500) * 0.25\n    else:\n        return 3750 + (taxable_income - 17000) * 0.30\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if substring == substring[::-1]:\n                palindromes.add(substring)\n    return sorted(list(palindromes))\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    # Initialize the queue with the start point\n    queue = [start]\n    # Initialize the visited set with the start point\n    visited = set([start])\n    # Initialize the parent dictionary with the start point\n    parent = {start: None}\n    # Initialize the distance dictionary with the start point\n    distance = {start: 0}\n    # Initialize the current point\n    current = start\n    # Initialize the shortest path\n    shortest_path = []\n    # Loop until the queue is empty or the end point is reached\n    while queue and current != end:\n        # Pop the current point from the queue\n        current = queue.pop(0)\n        # Get the neighbors of the current point\n        neighbors = get_neighbors(maze, current)\n        # Loop through the neighbors\n        for neighbor in neighbors:\n            # Check if the neighbor is not a wall and not visited\n            if maze[neighbor[0]][neighbor[1]] == 1 and neighbor not in visited:\n                # Add the neighbor to the queue\n                queue.append(neighbor)\n                # Add the neighbor to the visited set\n                visited.add(neighbor)\n                # Add the neighbor to the parent dictionary\n                parent[neighbor] = current\n                # Add the neighbor to the distance dictionary\n                distance[neighbor] = distance[current] + 1\n    # Check if the end point is reached\n    if current == end:\n        # Get the shortest path\n        shortest_path = get_shortest_path(parent, end)\n        # Reverse the shortest path\n        shortest_path.reverse()\n    # Return the shortest path\n    return shortest_path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 90, in <module>\n  File \"<string>\", line 88, in check\n        _check_path(*inp, candidate(*inp), exp)\n  File \"<string>\", line 39, in find_path\n        neighbors = get_neighbors(maze, current)\nNameError: name 'get_neighbors' is not defined\n", "passed": false}
{"task_id": "EvoEval/31", "completion": "\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[-1][-1]", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    # Create a copy of the playlist to avoid modifying the original list\n    shuffled_playlist = playlist.copy()\n    \n    # Initialize the seed\n    seed = seed\n    \n    # Get the length of the playlist\n    playlist_length = len(shuffled_playlist)\n    \n    # Iterate over the playlist\n    for i in range(playlist_length):\n        # Skip the swap if the song title contains \"Rock\"\n        if \"Rock\" in shuffled_playlist[i]:\n            continue\n        \n        # Calculate the index to swap with\n        swap_index = seed % playlist_length\n        \n        # Swap the songs\n        shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        \n        # Update the seed\n        seed = (seed * 16807) % 2147\n    \n    return shuffled_playlist\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n    # There is 1 way to reach the 0th step (starting point)\n    ways[0] = 1\n    # Iterate through each step\n    for i in range(1, n + 1):\n        # Iterate through each magic stone\n        for stone in magic_stones:\n            # If the stone's power is less than or equal to the current step\n            if stone <= i:\n                # Add the number of ways to reach the previous step to the current step\n                ways[i] += ways[i - stone]\n    # Return the number of ways to reach the nth step\n    return ways[n]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):] or email[email.index(\"@\"):] == \".\" or email[email.index(\"@\"):] == \"..\":\r\n        return False\r\n    else:\r\n        return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/36", "completion": "\n    return [0] + [x / (i + 1) for i, x in enumerate(xs)]\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n    return transformed\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ufffd\ufffd\",\n        \":(\": \"\ufffd\ufffd\",\n        \":D\": \"\ufffd\ufffd\",\n        \";)\": \"\ufffd\ufffd\"\n    }\n    for emoticon, unicode_em in emoticons.items():\n        sentence = sentence.replace(emoticon, unicode_em)\n    return sentence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/39", "completion": "\n    # Create a 2D list to store the ASCII art\n    ascii_art = []\n    \n    # Create the top border of the \"U\" shape\n    top_border = \"*\" * (len(s) + 2)\n    ascii_art.append(top_border)\n    \n    # Create the middle part of the \"U\" shape\n    for i in range(n):\n        row = \"*\"\n        for char in s:\n            row += char * n\n        row += \"*\"\n        ascii_art.append(row)\n    \n    # Create the bottom border of the \"U\" shape\n    bottom_border = \"*\" * (len(s) + 2)\n    ascii_art.append(bottom_border)\n    \n    # Return the ASCII art as a string\n    return \"\\n\".join(ascii_art)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 160, in <module>\n  File \"<string>\", line 158, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions, key=lambda x: (int(x.split()[2]), x))\n    for i in range(len(potions)):\n        for j in range(i + 1, len(potions)):\n            if int(potions[i].split()[2]) + int(potions[j].split()[2]) == target:\n                return [potions[i], potions[j]]\n    return []\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to 0\n    min_energy = 0\n    \n    # Get the dimensions of the array\n    rows = len(arr)\n    cols = len(arr[0])\n    \n    # Create a 2D array to store the minimum energy required to reach each cell\n    min_energy_arr = [[0] * cols for _ in range(rows)]\n    \n    # Initialize the first cell with the energy required to jump to it\n    min_energy_arr[0][0] = arr[0][0]\n    \n    # Iterate through the array to calculate the minimum energy required to reach each cell\n    for i in range(rows):\n        for j in range(cols):\n            # If the cell is not the first cell\n            if i != 0 or j != 0:\n                # Get the minimum energy required to reach the current cell from the adjacent cells\n                if i > 0:\n                    min_energy_arr[i][j] = min(min_energy_arr[i][j], min_energy_arr[i-1][j] + arr[i][j])\n                if j > 0:\n                    min_energy_arr[i][j] = min(min_energy_arr[i][j], min_energy_arr[i][j-1] + arr[i][j])\n    \n    # Return the minimum energy required to reach the safe cell\n    return min_energy_arr[rows-1][cols-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 173, in <module>\n  File \"<string>\", line 171, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_rarities = set(player_input)\n        if 5 in unique_rarities:\n            return True, max(unique_rarities - {5})\n        return False, None\n    \"\"\"\n    def find_legendary_item(player_input):\n        unique_r", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 76\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 191)\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    duration = distance / speed\n    fuel_consumption = spaceship_weight * planet_gravity * 0.01\n    if duration > fuel:\n        return 'Insufficient fuel'\n    else:\n        remaining_fuel = fuel - (duration * fuel_consumption)\n        return round(remaining_fuel, 2)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 135, in <module>\n  File \"<string>\", line 133, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 20))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15, 15], 5, 20))\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 20))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15, 15], 5, 20))\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <= w + e:\n            return True\n        else:\n            return False\n    print(fairy_tale_transport([5, 10, 15], 5, 20))\n    print(fairy_tale_transport([10, 20, 30], 5, 20))\n    print(fairy_tale_transport([1, 2, 3], 1, 5))\n    print(fairy_tale_transport([5, 10, 15, 15], 5, 20))\n    \"\"\"\n    def fairy_tale_transport(q,w,e):\n        if sum(q) <=", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 48\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 163)\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    for i in range(len(arr)):\n        view = 0\n        for j in range(i, -1, -1):\n            if arr[j] <= arr[i]:\n                view += 1\n            else:\n                break\n        for j in range(i+1, len(arr)):\n            if arr[j] <= arr[i]:\n                view += 1\n            else:\n                break\n        max_view = max(max_view, view)\n    return max_view\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/46", "completion": "\n\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for i in range(len(word)):\n                    if word[i].isalpha():\n                        secret.append(word[i].lower())\n        return secret\n    \"\"\"\n    def hidden_message(test_cases):\n        secret = []\n        for test in test_cases:\n            for word in test:\n                for", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 100\n                for\n    for\n       ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quant = log['quant']\n        if item in inventory:\n            inventory[item] += quant\n        else:\n            inventory[item] = quant\n    return {item: quant for item, quant in inventory.items() if quant > 0}\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 146, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 30, in wizard_inventory\n        quant = log['quant']\nKeyError: 'quant'\n", "passed": false}
{"task_id": "EvoEval/49", "completion": "\n    morse_code = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '000': 'R', '1': 'S', '001': 'T', '0101': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '10000': '5', '11000': '6', '11100': '7', '11110': '8', '11111': '9', '011111': '0'\n    }\n    words = msg.split('/')\n    decoded_words = []\n    for word in words:\n        characters = word.split(' ')\n        decoded_characters = []\n        for character in characters:\n            if character in morse_code:\n                decoded_characters.append(morse_code[character])\n        decoded_words.append(''.join(decoded_characters))\n    return ' '.join(decoded_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' '}\n    morse = ''\n    for char in text.upper():\n        morse += morse_code[char] + ' '\n    return morse.strip()\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for char in string:\n        index = ord(char) - ord('a')\n        result += list_of_alphabets[index % len(list_of_alphabets)]\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/52", "completion": "\n    # Sort the orders in descending order\n    orders.sort(reverse=True)\n    \n    # Initialize the total number of orders fulfilled\n    total_orders = 0\n    \n    # Iterate through each batch\n    for i in range(m):\n        # Initialize the number of cookies baked in the current batch\n        cookies_baked = 0\n        \n        # Iterate through each order in the current batch\n        for j in range(n):\n            # If there are no more orders, break out of the loop\n            if not orders:\n                break\n            \n            # If the current order can be fulfilled in the current batch, add it to the total\n            if cookies_baked + orders[0] <= n:\n                cookies_baked += orders.pop(0)\n                total_orders += 1\n            else:\n                break\n    \n    return total_orders\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 167, in <module>\n  File \"<string>\", line 165, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels)).upper()\n            else:\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants)).upper()\n            else:\n                transformed += chr(ord('b') + (consonants.index(char.lower()) + 1) % len(consonants))\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == star:\n                result.append((i, j))\n    return result\n\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    encrypted_message = ''\n    for i, char in enumerate(message):\n        if char in alphabet:\n            shift_amount = (i + shift) % len(alphabet)\n            encrypted_message += alphabet[(alphabet.index(char) + shift_amount) % len(alphabet)]\n        else:\n            encrypted_message += char\n    return encrypted_message\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = ''\n    for char in s:\n        if char == ' ':\n            morse_code += '/'\n        else:\n            morse_code += morse_code_dict[char] + ' '\n    return morse_code.strip()\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, letter in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translated_phrase = ''\n    for char in earth_phrase:\n        if char in vowels:\n            translated_phrase += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translated_phrase += consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == 'z':\n            translated_phrase += 'b'\n        elif char == ' ':\n            translated_phrase += '@'\n    translated_phrase = translated_phrase[0].upper() + translated_phrase[1:]\n    words = translated_phrase.split('@')\n    translated_phrase = ''\n    for word in words:\n        if word[0] in vowels:\n            translated_phrase += word + 'xy@'\n        else:\n            translated_phrase += word + 'yz@'\n    return translated_phrase[:-1]", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredient_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_ingredient_dict\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    pass\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 137, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, char in enumerate(s):\n        if char == ' ':\n            result.append(' ')\n        elif i % 2 == 0:\n            result.append(char.swapcase())\n        else:\n            if char.lower() in vowels:\n                next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n                result.append(next_vowel.swapcase())\n            elif char.lower() in consonants:\n                prev_consonant = consonants[(consonants.index(char.lower()) - 1) % len(consonants)]\n                result.append(prev_consonant.swapcase())\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in reci.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\nrecipe = {\"flour\": 500, \"sugar\": 200, \"eggs\": 3}\nconversion_factor = 2\nnew_recipe = recipe_conver(recipe, conversion_factor)", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 26, in <module>\nnew_recipe = recipe_conver(recipe, conversion_factor)\nNameError: name 'recipe_conver' is not defined\n", "passed": false}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    for food, ingredients in order.items():\n        if food in menu:\n            final_order[food] = menu[food].copy()\n            if \"remove\" in ingredients:\n                for ingredient in ingredients[\"remove\"]:\n                    if ingredient in final_order[food]:\n                        final_order[food].remove(ingredient)\n            if \"add\" in ingredients:\n                for ingredient in ingredients[\"add\"]:\n                    final_order[food].append(ingredient)\n    return final_order\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs, key=lambda x: (x[0], x[1]))\n\n", "result": "timed out", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    rotated_arr = arr[1:] + arr[:1]\n    if rotated_arr == sorted_arr:\n        return True\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            swapped_arr = arr[:]\n            swapped_arr[i], swapped_arr[j] = swapped_arr[j], swapped_arr[i]\n            if swapped_arr == sorted_arr:\n                return True\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not path or not planets:\n        return False\n    for i in range(len(path)-1):\n        if path[i] not in planets or path[i+1] not in planets[path[i]]:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            base = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - base + n) % 26 + base)\n        else:\n            return c\n\n    shifted_s = ''.join(shift_char(c, n) for c in s)\n    vowels = 'aeiouAEIOU'\n    vowel_count = sum(1 for c in shifted_s if c in vowels)\n    return shifted_s, vowel_count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        name = string\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {tales} tales a day\")\n    return fairy_tales\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 132, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/73", "completion": "\n    # Write your code here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_chests = len(grid[0])\n    total_chests = 0\n    trips = 0\n\n    # Calculate total number of chests\n    for i in range(num_chambers):\n        for j in range(num_chests):\n            if grid[i][j] == 1:\n                total_chests += 1\n\n    # Calculate number of trips\n    trips = math.ceil(total_chests / bag_capacity) * 2\n\n    return trips\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    special_chars = '!@#$%^&*()_+-=[]{}|;:,.<>?'\n    digits = '0123456789'\n    output_str = ''\n    for char in input_str:\n        if char.lower() in vowels:\n            if char.islower():\n                output_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            else:\n                output_str += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n        elif char.lower() in consonants:\n            if char.islower():\n                output_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            else:\n                output_str += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n        elif char in digits:\n            output_str += str((int(char) + 1) % 10)\n        elif char in special_chars:\n            if char == '?':\n                if input_str.index(char) % 2 == 0:\n                    output_str += '!'\n                else:\n                    output_str += '?'\n            else:\n                output_str += char\n    return output_str\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    def createpyramid(lst): ''' You are given a list positive integers.Your task is to create pyramid out the numbers, where every level of the is represented a string of equal length.The number characters in a string equals sum the positive integers in corresponding level of pyramidThe pyramid should be built from the bottom, i the first element of list should form bottom level ofReturn the pyramid as a list strings.If the list of integers is empty return an empty list.Note Use the character '# to represent the numbers.Examples: create_pyramid([3, 2 1]) == ['#',#####'] createpy5 4 2########### create]) [] '''\n    def createpyramid(lst): ''' You are given a list positive integers.Your task is to create pyramid out the numbers, where every level of the is represented a string of equal length.The number characters in a string equals sum the positive integers in corresponding level of pyramidThe pyramid should be built from the bottom, i the first element of list should form bottom level ofReturn the pyramid as a list strings.If the list of integers is empty return an empty list.Note Use the character '# to represent the numbers.Examples: create_pyramid([3, 2 1]) == ['#',#####'] createpy5 4 2########### create]) [] '''\n    def createpyramid(lst): ''' You are given a list positive integers.Your task is to create pyramid out the numbers, where every level of the is represented a string of equal length.The number characters in a string equals sum the positive integers in corresponding level of pyramidThe pyramid should be built from the bottom, i the first element of list should form bottom level ofReturn the pyramid as a list strings.If the list of integers is empty return an empty list.Note Use the character '# to represent the numbers.Examples: create_pyramid([3, 2 1]) == ['#',#####'] createpy5 4 2########### create]) [] '''\n    def createpyramid(lst): ''' You are given a list positive integers.Your task is to create pyramid out the numbers, where every level of the is represented a string of equal length.The number characters in a string equals sum the positive integers in corresponding level of pyramidThe pyramid should be built from the bottom, i the first element of list should form bottom level ofReturn the pyramid as a list strings.If the list of integers is empty return an empty list.Note Use the character '# to represent the numbers.Examples: create_pyramid([3, 2 ", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 22\n    def createpyramid(lst): ''' You are given a list positive integers.Your task is to create pyramid out the numbers, where every level of the is represented a string of equal length.The number characters in a string equals sum the positive integers in corresponding level of pyramidThe pyramid should be built from the bottom, i the first element of list should form bottom level ofReturn the pyramid as a list strings.If the list of integers is empty return an empty list.Note Use the character '# to represent the numbers.Examples: create_pyramid([3, 2 \n    def createpyramid(lst): ''' You are given a list positive integers.Your task is to create pyramid out the numbers, where every level of the is represented a string of equal length.The number characters in a string equals sum the positive integers in corresponding level of pyramidThe pyramid should be built from the bottom, i the first element of list should form bottom level ofReturn the pyramid as a list strings.If the list of integers is empty return an empty list.Note Use the character '# to represent the numbers.Examples: create_pyramid([3, 2 \n                            ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 135)\n", "passed": false}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(n, k):\n        points = 0\n        while n % k == 0:\n            points += n // k\n            n //= k\n        return points\n\n    points = [calculate_points(n, k) for n in sequence]\n    sorted_sequence = [x for _, x in sorted(zip(points, sequence), reverse=True)]\n    return sorted_sequence\n\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        for j in range(n):\n            if i == j or i + j == n - 1:\n                result.append(mat[i][j])\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 134, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices) - days):\n        for j in range(i + days, len(prices)):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/80", "completion": "\n\n    def adventure_game(map, instructions):\n        start_row = 0\n        start_column = 0\n        for i in range(len(map)):\n            for j in range(len(map[i])):\n                if map[i][j] == 'S':\n                    start_row = i\n                    start_column = j\n        path = [(start_row, start_column)]\n        for instruction in instructions:\n            if instruction == 'right':\n                if start_column + 1 < len(map[start_row]) and map[start_row][start_column + 1] != 'X':\n                    start_column += 1\n            elif instruction == 'left':\n                if start_column - 1 >= 0 and map[start_row][start_column - 1] != 'X':\n                    start_column -= 1\n            elif instruction == 'up':\n                if start_row - 1 >= 0 and map[start_row - 1][start_column] != 'X':\n                    start_row -= 1\n            elif instruction == 'down':\n                if start_row + 1 < len(map) and map[start_row + 1][start_column] != 'X':\n                    start_row += 1\n            if map[start", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 55\n            if map[start\n    if map[start\n          ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_order = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        for j in range(min(len(word1), len(word2))):\n            if word1[j] != word2[j]:\n                if alien_order[word1[j]] > alien_order[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": \"Fire\",\n        \"Taurus\": \"Earth\",\n        \"Gemini\": \"Air\",\n        \"Cancer\": \"Water\",\n        \"Leo\": \"Fire\",\n        \"Virgo\": \"Earth\",\n        \"Libra\": \"Air\",\n        \"Scorpio\": \"Water\",\n        \"Sagittarius\": \"Fire\",\n        \"Capricorn\": \"Earth\",\n        \"Aquarius\": \"Air\",\n        \"Pisces\": \"Water\"\n    }\n    elements = {\n        \"Fire\": 0,\n        \"Water\": 0,\n        \"Air\": 0,\n        \"Earth\": 0\n    }\n    for birthday in birthdays:\n        month = int(birthday[4:6])\n        day = int(birthday[6:8])\n        if (month == 3 and day >= 21) or (month == 4 and day <= 19):\n            elements[zodiac_signs[\"Aries\"]] += 1\n        elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n            elements[zodiac_signs[\"Taurus\"]] += 1\n        elif (month == 5 and day >= 21) or (month == 6 and day <= 20):\n            elements[zodiac_signs[\"Gemini\"]] += 1\n        elif (month == 6 and day >= 21) or (month == 7 and day <= 22):\n            elements[zodiac_signs[\"Cancer\"]] += 1\n        elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n            elements[zodiac_signs[\"Leo\"]] += 1\n        elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n            elements[zodiac_signs[\"Virgo\"]] += 1\n        elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n            elements[zodiac_signs[\"Libra\"]] += 1\n        elif (month == 10 and day >= 23) or (month == 11 and day <= 21):\n            elements[zodiac_signs[\"Scorpio\"]] += 1\n        elif (month == 11 and day >= 22) or (month == 12 and", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 74\n        elif (month == 11 and day >= 22) or (month == 12 and\n    elif (month == 11 and day >= 22) or (month == 12 and\n                                        ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def tree_traversal(tree):\n        paths = []\n        def dfs(node, path):\n            if not node:\n                return\n            path.append(node)\n            if not node.get('left') and not node.get('right'):\n                paths.append(path.copy())\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n            path.pop()\n        dfs(tree, [])\n        return paths\n    \"\"\"\n    def", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 95\n    \"\"\"\n    \"\"\"\n    ^\nSyntaxError: unterminated triple-quoted string literal (detected at line 209)\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    def dfs(x, y):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 1:\n            return float('inf')\n        if (x, y) == coord:\n            return 0\n        grid[x][y] = 1\n        return 1 + min(dfs(x + 1, y), dfs(x, y + 1))\n    result = dfs(0, 0)\n    return result if result != float('inf') else -1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n        return [movie[0] for movie in sorted_movies]\n    \"\"\"\n    def sort_movies_by_ratings_andrelease_date(m_dict):\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 58\n        sorted_movies = sorted(m_dict.items(), key=lambda x: (-\n    sorted_movies = sorted(m_dict.items(), key=lambda x: (-\n                                                         ^\nSyntaxError: '(' was never closed\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr or not arr[0]:\n        return ''\n    rows, cols = len(arr), len(arr[0])\n    result = []\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up\n    x, y, dir_idx = 0, 0, 0\n    for _ in range(rows * cols):\n        result.append(arr[x][y])\n        arr[x][y] = None  # Mark as visited\n        next_x, next_y = x + directions[dir_idx][0], y + directions[dir_idx][1]\n        if 0 <= next_x < rows and 0 <= next_y < cols and arr[next_x][next_y] is not None:\n            x, y = next_x, next_y\n        else:\n            dir_idx = (dir_idx + 1) % 4\n            x, y = x + directions[dir_idx][0], y + directions[dir_idx][1]\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 141, in <module>\n  File \"<string>\", line 139, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_plan):\n        new_dict = {}\n        for planet, data in dict_of_plan.items():\n            if data[0] is not None and data[1] is not None:\n                new_dict[planet] = round(data[0] / data[1], 2)\n        return new_dict\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000]}))\n    print(planet_population({}))\n    print(planet_population({\"Earth\": [7000000000, None], \"Mars\": [0, 64000000]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, None]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000], \"Mercury\": [0, 0]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000], \"Mercury\": [0, 0], \"Jupiter\": [0, None]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000], \"Mercury\": [0, 0], \"Jupiter\": [0, None], \"Saturn\": [0, 64000000]}))\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000], \"Mercury\": [0, 0], \"Jupiter\": [0, None], \"Saturn\": [0, 64000000], \"Uranus\": [", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 37\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000], \"Mercury\": [0, 0], \"Jupiter\": [0, None], \"Saturn\": [0, 64000000], \"Uranus\": [\n    print(planet_population({\"Earth\": [7000000000, 15000000], \"Mars\": [0, 25000000], \"Venus\": [500000000, 64000000], \"Mercury\": [0, 0], \"Jupiter\": [0, None], \"Saturn\": [0, 64000000], \"Uranus\": [\n                                                                                                                                                                                                 ^\nSyntaxError: '[' was never closed\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    # Create a copy of the aliens list\n    remaining_aliens = aliens.copy()\n    \n    # Find the index of the alien at the aimed position\n    aimed_index = remaining_aliens.index(ray)\n    \n    # Destroy the alien at the aimed position\n    remaining_aliens.pop(aimed_index)\n    \n    # Destroy any adjacent aliens\n    if aimed_index > 0:\n        remaining_aliens.pop(aimed_index - 1)\n    if aimed_index < len(remaining_aliens) - 1:\n        remaining_aliens.pop(aimed_index + 1)\n    \n    return remaining_aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = []\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.append(int(s[i]) * int(s[j]))\n        return combinations\n\n    combinations1 = get_combinations(s1)\n    combinations2 = get_combinations(s2)\n\n    result = 0\n    for c1 in combinations1:\n        for c2 in combinations2:\n            result += c1 * c2\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    \n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground':\n            if action == 'Launch':\n                status = 'In Space'\n            elif action == 'Move':\n                status = 'In Space'\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        elif status == 'In Space':\n            if action == 'Move':\n                status = 'In Space'\n            elif action == 'Land':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 151, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    fountain = []\n    for i in range(n):\n        layer = ' ' * (n - i - 1) + alphabet[i % 26] + ' ' * (2 * i) + alphabet[i % 26] + ' ' * (n - i - 1)\n        fountain.append(layer)\n    return '\\n'.join(fountain)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 145, in <module>\n  File \"<string>\", line 143, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            if char.isupper():\n                encoded_char = chr((ord(char.lower()) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n                encoded_message += encoded_char.upper()\n            else:\n                encoded_char = chr((ord(char) - 97 + n_values[i % len(n_values)]) % 26 + 97)\n                encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    result = []\n    for spell in strings:\n        words = spell.split()\n        words.sort(key=len)\n        result.append(words)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    sum1 = 0\n    sum2 = 0\n    for i in range(len(m)):\n        sum1 += m[i][i]\n        sum2 += m[i][len(m)-i-1]\n    return abs(sum1 - sum2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\n            magic_indices.append(i)\n    return magic_indices\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 23, in get_magic_indices\n        if lst[i] % i == 0 and product_of_digits(lst[i]) == i:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        continents = [\"Asia\", \"Africa North\", \"Europe\", \"Africa South\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        continents = [\"Asia\", \"Africa North\", \"Europe\", \"Africa South\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        continents = [\"Asia\", \"Africa North\", \"Europe\", \"Africa South\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        continents = [\"Asia\", \"Africa North\", \"Europe\", \"Africa South\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location == continent:\n                    encounter_order.append(human)\n        return encounter_order\n    \"\"\"\n    def alien_invasion(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return []\n        continents = [\"Asia\", \"Africa North\", \"Europe\", \"Africa South\"]\n        encounter_order = []\n        for continent in continents:\n            for human, location in humans.items():\n                if location ==", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 74\n                if location ==\n    if location ==\n                  ^\nSyntaxError: invalid syntax\n", "passed": false}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        if is_prime(next_num):\n            sequence.append('prime')\n        else:\n            sequence.append(next_num)\n    return sequence\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 152, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 36, in nature_sequence_generator\n        next_num = sequence[i-1] + sequence[i-2] + i\nTypeError: can only concatenate str (not \"int\") to str\n", "passed": false}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        for _ in range(round):\n            players.pop(0)\n            players.append(players.pop(0))\n        players.pop(0)\n    return players\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 144, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in musical_chairs\n            players.append(players.pop(0))\nIndexError: pop from empty list\n", "passed": false}
