{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == ' ':\n            continue\n        current_group += char\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n\n    result.sort()\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    # Calculate the median of the input list\n    median_value = median(numbers)\n    \n    # Calculate the absolute differences from the median\n    absolute_differences = [abs(x - median_value) for x in numbers]\n    \n    # Calculate the median of the absolute differences\n    mad = median(absolute_differences)\n    \n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    if result:\n        result.pop()  # Remove the last delimeter added\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        depths.append(max_depth)\n    return sorted(depths, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n"}
{"task_id": "EvoEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n    \n    for num in numbers:\n        if num >= 0:\n            total_sum += num\n            total_product *= num\n    \n    return total_sum, total_product\n"}
{"task_id": "EvoEval/9", "completion": "\n    result = []\n    current_min = float('inf')\n    \n    for num in numbers:\n        if num < current_min:\n            current_min = num\n        result.append(current_min)\n    \n    return result\n"}
{"task_id": "EvoEval/10", "completion": "\n    if not string:\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[:i+1]):\n            palindrome_prefix = string[:i+1]\n            non_palindrome_suffix = string[i+1:]\n    \n    return string + non_palindrome_suffix[::-1]\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('0' if char_a == char_b else '1')\n    return ''.join(result[::-1])\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    \n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    \n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    return abs(a * b) // gcd(a, b)\n"}
{"task_id": "EvoEval/14", "completion": "\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:len(string) - i])\n    return prefixes\n"}
{"task_id": "EvoEval/15", "completion": "\n    result = ' '.join(str(i) for i in range(1, n + 1))\n    return result\n"}
{"task_id": "EvoEval/16", "completion": "\n    distinct_characters = set(string)\n    return len(distinct_characters)\n"}
{"task_id": "EvoEval/17", "completion": "\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the input string by spaces to get individual notes\n    notes = music_string.split()\n    \n    # Create a set to store unique beat values\n    unique_beats = set()\n    \n    # Iterate through each note and add its beat value to the set\n    for note in notes:\n        if note in beats:\n            unique_beats.add(beats[note])\n    \n    # Convert the set to a list and sort it in descending order\n    unique_beats_list = list(unique_beats)\n    unique_beats_list.sort(reverse=True)\n    \n    return unique_beats_list\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    step = len(substring)\n    for i in range(len(string)):\n        if string[i:i+step] == substring:\n            count += 1\n            break\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x], reverse=True)\n    \n    return ' '.join(sorted_words)\n"}
{"task_id": "EvoEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i + 1], numbers[i])\n    \n    return closest_pair\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return sorted(rescaled, reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    length = 0\n    for _ in string:\n        length += 1\n    return length + 1\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        raise ValueError(\"n must be greater than 1\")\n    \n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    \n    return n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors[::-1]\n"}
{"task_id": "EvoEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in reversed(numbers):\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return ''.join(char.lower() if char.isupper() else char for char in string)\n    elif exclusive_case == 'upper':\n        return ''.join(char.upper() if char.islower() else char for char in string)\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n"}
{"task_id": "EvoEval/28", "completion": "\n    result = \"\"\n    for i, s in enumerate(strings):\n        if i > 0:\n            result += \",\"\n        result += s\n    return result\n"}
{"task_id": "EvoEval/29", "completion": "\n    filtered_strings = [s for s in strings if s.endswith(suffix)]\n    return filtered_strings\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([x for x in l if x > 0])\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    def find_zero(xs: list):\n        \"\"\"\n        xs coefficients of a polynomial xs[0] + xs[1] * x^1 + xs[2] * x^3 +.... xs[n] * x^(2*n-1) find_zero find x such that poly(x) = 0. find_zero returns only zero point, even if are many. Moreover, find_zero only takes xs having at least two coefficients and largest non zero coefficient as guarantees a solution. >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x -0.5 >>> round(find_zero([-2, -3, 1]), 2) # (x + 1) (x + 1) (x - 2) = -2 - 3x + x^3 -1.0\n        \"\"\"\n        if len(xs) < 2:\n            raise ValueError(\"The polynomial must have at least two coefficients.\")\n        \n        # Find the largest non-zero coefficient\n        max_coeff = max(xs, key=abs)\n        \n        # Normalize the polynomial coefficients\n        normalized_xs = [coeff / max_coeff for coeff in xs]\n        \n        # Use the bisection method to find a root\n        def f(x):\n            return poly(normalized_xs, x)\n        \n        a, b = -1, 1\n        while f(a) * f(b) > 0:\n            a *= 2\n            b *= 2\n        \n        tolerance = 1e-10\n        while abs(b - a) > tolerance:\n            midpoint = (a + b) / 2\n            if f(midpoint) == 0:\n                return midpoint\n            elif f(a) * f(midpoint) < 0:\n                b = midpoint\n            else:\n                a = midpoint\n        \n        return (a + b) / 2\n"}
{"task_id": "EvoEval/33", "completion": "\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = [l[i] for i in indices]\n    sorted_values = sorted(values, reverse=True)\n    \n    l_prime = l[:]\n    for idx, value in zip(indices, sorted_values):\n        l_prime[idx] = value\n    \n    return l_prime\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n"}
{"task_id": "EvoEval/35", "completion": "\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    min_val = l[0]\n    for element in l:\n        if element < min_val:\n            min_val = element\n    \n    return min_val\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('8')\n    return count\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort(reverse=True)\n    \n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(l[i])\n    \n    return result\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # reverse the cycling in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    i = 1\n    while count < n:\n        fib_num = fibonacci(i)\n        if is_prime(fib_num) and fib_num % 2 != 0:\n            count += 1\n        if count == n:\n            return fib_num\n        i += 1\n    return None\n"}
{"task_id": "EvoEval/40", "completion": "\n    n = len(l)\n    if n < 3:\n        return False\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if l[i] + l[j] + l[k] == 10:\n                    return True\n    \n    return False\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Since the cars are infinitely far apart initially, we can assume that the cars moving left to right\n    # will start at positions 1, 2, ..., n, and the cars moving right to left will start at positions 1, 2, ..., 2*n.\n    # The cars moving left to right will collide with the cars moving right to left at positions 1, 2, ..., n.\n    \n    # Each car moving left to right will collide with exactly one car moving right to left.\n    # Therefore, the total number of collisions is equal to the number of cars moving left to right, which is n.\n    \n    collisions = n\n    \n    return collisions\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [x + 2 for x in l]\n"}
{"task_id": "EvoEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if 1 - num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 inclusive.\")\n    \n    if x == 0:\n        return 0\n    \n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    \n    return int(result)\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '0'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '0'\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return str(d)\n"}
{"task_id": "EvoEval/47", "completion": "\n    if not l:\n        return 0\n    \n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    \n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    \n    return text == text[::-1]\n"}
{"task_id": "EvoEval/49", "completion": "\n    result = pow(2, n + q, p)\n    return result\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char in vowels])\n"}
{"task_id": "EvoEval/52", "completion": "\n    for num in l:\n        if num > t:\n            return False\n    return True\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    \n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if not l:\n        return False\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "EvoEval/58", "completion": "\n    set1 = set(l1)\n    set2 = set(l2)\n    common_elements = set1.intersection(set2)\n    return sorted(common_elements, reverse=True)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n"}
{"task_id": "EvoEval/60", "completion": "\n    total = 0\n    for i in range(m, n + 1):\n        total += i\n    return total\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    n = len(xs)\n    if n == 0:\n        return []\n    derivative_coeffs = [i * xs[i] for i in range(1, n)]\n    return derivative_coeffs[::-1]\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b - c\n    \n    return c\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = \"aeiou\"\n    count = 0\n    if s[-1] == 'y':\n        count += 1\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x_str = str(x)\n    length = len(x_str)\n    shift = shift % length\n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str\n"}
{"task_id": "EvoEval/66", "completion": "\n    total_sum = 0\n    for char in s:\n        if char.islower():\n            total_sum += ord(char)\n    return total_sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    # Split the string to extract the number of apples and oranges\n    parts = s.split(\", \")\n    apples = int(parts[0].split()[0])\n    oranges = int(parts[1].split()[0])\n    \n    # Calculate the number of mangoes\n    mangoes = n + 1 - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return []\n    \n    min_odd_value = float('inf')\n    min_odd_index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 != 0 and value < min_odd_value:\n            min_odd_value = value\n            min_odd_index = i\n    \n    if min_odd_index == -1:\n        return []\n    \n    return [min_odd_index, min_odd_value]\n"}
{"task_id": "EvoEval/69", "completion": "\n    def search(lst):\n        from collections import Counter\n        freq = Counter(lst)\n        \n        for num in sorted(freq.keys()):\n            if freq[num] >= num:\n                return num\n        \n        return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    def strange_sort_list(lst):\n        if not lst:\n            return []\n        \n        sorted_lst = sorted(lst)\n        result = []\n        left, right = 0, len(sorted_lst) - 1\n        \n        while left <= right:\n            if left <= right:\n                result.append(sorted_lst[right])\n                right -= 1\n            if left <= right:\n                result.append(sorted_lst[left])\n                left += 1\n        \n        return result\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n"}
{"task_id": "EvoEval/72", "completion": "\n    def will_it_fly(q, w):\n        # Check if the list is palindromic\n        if q != q[::-1]:\n            return False\n        \n        # Calculate the sum of the elements\n        total_weight = sum(q)\n        \n        # Check if the sum is even and less than or equal to the maximum possible weight\n        if total_weight % 2 == 0 and total_weight <= w:\n            return True\n        \n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    def total_match(lst1, lst2):\n        def total_chars(lst):\n            return sum(len(s) for s in lst)\n        \n        total_chars_lst1 = total_chars(lst1)\n        total_chars_lst2 = total_chars(lst2)\n        \n        if total_chars_lst1 > total_chars_lst2:\n            return lst1\n        else:\n            return lst2\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def find_prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            if is_prime(i) and n % i == 0:\n                factors.append(i)\n        return factors\n\n    def multiply_prime_factors(factors):\n        product = 1\n        for factor in factors:\n            product *= factor\n        return product\n\n    if a >= 100:\n        return False\n\n    prime_factors = find_prime_factors(a)\n    if len(prime_factors) != 4:\n        return False\n\n    return multiply_prime_factors(prime_factors) == a\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n <= 1:\n        return (False, None)\n    \n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return (True, power)\n        power += 1\n    \n    return (False, None)\n"}
{"task_id": "EvoEval/77", "completion": "\n    def iscube(a):\n        if a < 0:\n            return False\n        if a == 0:\n            return True\n        cube_root = round(a ** (1/3))\n        return cube_root ** 3 == a\n"}
{"task_id": "EvoEval/78", "completion": "\n    non_prime_digits = {'0', '1', '4', '6', '8', '9', 'A', 'C', 'E'}\n    count = 0\n    for char in num:\n        if char in non_prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    \n    for i in range(len(s) - 3):\n        if len(set(s[i:i+4])) < 4:\n            return False\n    \n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    # Remove all white spaces from the string\n    cleaned_string = string.replace(\" \", \"\")\n    \n    # Get the length of the cleaned string\n    length = len(cleaned_string)\n    \n    # Check if the length is a prime number\n    return is_prime(length)\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2  # The numbers are 1 and 2\n    \n    # For n-digit numbers, the first digit can be 1 and the last digit can be 2\n    # The middle digits can be any digit from 0 to 9\n    middle_digits_count = 10 ** (n - 2)\n    \n    # Count of numbers starting with 1 and ending with any digit\n    starts_with_one = middle_digits_count\n    \n    # Count of numbers starting with any digit and ending with 2\n    ends_with_two = middle_digits_count\n    \n    # Count of numbers starting with 1 and ending with 2\n    starts_one_ends_two = middle_digits_count\n    \n    # Total count is the sum of the above three counts\n    return starts_with_one + ends_with_two - starts_one_ends_two\n"}
{"task_id": "EvoEval/84", "completion": "\n    hex_str = hex(N)[2:]  # Convert N to hexadecimal and remove the '0x' prefix\n    digit_sum = sum(int(char, 16) for char in hex_str)  # Sum the digits in hexadecimal\n    return hex(digit_sum)[2:]  # Convert the sum back to hexadecimal and remove the '0x' prefix\n"}
{"task_id": "EvoEval/85", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split()\n    ordered_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    \n    # Sort by rows in descending order, and by columns in ascending order within each row\n    result.sort(key=lambda coord: (-coord[0], coord[1]))\n    \n    return result\n"}
{"task_id": "EvoEval/88", "completion": "\n    unique_array = list(set(array))\n    if len(unique_array) <= 1:\n        return unique_array\n    \n    first_last_sum = unique_array[0] + unique_array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(unique_array, reverse=True)\n    else:\n        return sorted(unique_array)\n"}
{"task_id": "EvoEval/89", "completion": "\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char.lower()) - ord('a') + 2 * 2) % 26\n            encrypted += chr(ord('a') + shift)\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    largest = second_largest = float('-inf')\n    \n    for num in lst:\n        if num > largest:\n            second_largest = largest\n            largest = num\n        elif num > second_largest and num != largest:\n            second_largest = num\n    \n    return second_largest if second_largest != float('-inf') else None\n"}
{"task_id": "EvoEval/91", "completion": "\n    count = 0\n    sentences = re.split(r'[.!?]', S)\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0].lower() == \"i\" and words[-1].lower() == \"boredom\":\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def any_int(x, y, z):\n    if not all(isinstance(num, int) for num in (x, y, z)):\n        return False\n    return (abs(x) == abs(y) + abs(z)) or (abs(y) == abs(x) + abs(z)) or (abs(z) == abs(x) + abs(y))\n"}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                new_char = chr((ord(char.lower()) - ord('a') + 3) % 26 + ord('a'))\n                if char.isupper():\n                    new_char = new_char.upper()\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        encoded_message += new_char\n    return encoded_message\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return None\n\n    smallest_prime = min(primes)\n    sum_of_digits = sum(int(digit) for digit in str(smallest_prime))\n    return sum_of_digits\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n    \n    keys = list(dict.keys())\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return all_lower or all_upper\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n"}
{"task_id": "EvoEval/97", "completion": "\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a + unit_b\n"}
{"task_id": "EvoEval/98", "completion": "\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return int(num) if num > 0 else int(num - 1)\n    else:\n        return round(num)\n"}
