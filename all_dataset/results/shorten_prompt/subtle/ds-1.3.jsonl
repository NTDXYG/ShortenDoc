{"task_id": "EvoEval/0", "completion": "\n    if len(numbers) < 2:\n        return False\n\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n\n    return False\n"}
{"task_id": "EvoEval/1", "completion": "\n    def is_balanced(s: str) -> bool:\n        stack = []\n        for ch in s:\n            if ch == '(':\n                stack.append(ch)\n            elif ch == ')':\n                if not stack or stack.pop() != '(':\n                    return False\n        return not stack\n\n    groups = []\n    start = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            if not is_balanced(paren_string[start:i+1]):\n                return []\n            start = i + 1\n        elif ch == ')':\n            if is_balanced(paren_string[start:i]):\n                groups.append(paren_string[start:i])\n                start = i + 1\n    if start < len(paren_string):\n        return []\n    return sorted(groups)\n"}
{"task_id": "EvoEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return integer_part, decimal_part\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 1:\n            return True\n    return False\n"}
{"task_id": "EvoEval/4", "completion": "\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median1 = numbers[length // 2]\n        median2 = numbers[length // 2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = numbers[length // 2]\n    mad = sum(abs(x - median) for x in numbers) / length\n    return mad\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not numbers:\n        return [delimeter]\n    return numbers[:-1] + [delimeter] + intersperse(numbers[-1:], delimeter)\n"}
{"task_id": "EvoEval/6", "completion": "\n    def get_max_depth(paren_string: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for char in paren_string:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n\n    paren_strings = paren_string.split()\n    depths = [get_max_depth(paren_string) for paren_string in paren_strings]\n    return sorted(depths, reverse=True)\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        if num >= 0:\n            sum_num += num\n            product_num *= num\n    return (sum_num, product_num)\n"}
{"task_id": "EvoEval/9", "completion": "\n    min_list = []\n    min_val = float('inf')\n    for num in numbers:\n        min_val = min(min_val, num)\n        min_list.append(min_val)\n    return min_list\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    xor_result = ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n    # Reverse the result\n    xor_result = xor_result[::-1]\n\n    return xor_result\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        b, a = a, b\n    m = a\n    while m % b != 0:\n        m += a\n    return m\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n + 1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n"}
{"task_id": "EvoEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return sorted(list(set(beats)), reverse=True)\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: num_dict[num])[::-1])\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i-1])\n    return tuple(sorted(result, reverse=True))\n"}
{"task_id": "EvoEval/21", "completion": "\n    max_val = max(numbers)\n    min_val = min(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in sorted(numbers, reverse=True)]\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result[::-1]\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.upper()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        return string\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"xs must have at least two coefficients\")\n    max_coeff = max(abs(coeff) for coeff in xs)\n    if max_coeff == 0:\n        raise ValueError(\"xs must have at least one non-zero coefficient\")\n    return poly(xs, 0) / max_coeff\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    divisible_by_three = [i for i in l if i % 3 == 0]\n    not_divisible_by_three = [i for i in l if i % 3 != 0]\n\n    divisible_by_three.sort(reverse=True)\n\n    result = []\n    j = 0\n    for i in range(len(l)):\n        if l[i] % 3 == 0:\n            result.append(divisible_by_three[j])\n            j += 1\n        else:\n            result.append(not_divisible_by_three[j])\n            j += 1\n\n    return result\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(list(set(l)), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    def count_digit(n: int, digit: int) -> int:\n        return str(n).count(str(digit))\n\n    return sum(count_digit(i, 8) for i in range(1, n) if i % 11 == 0 or i % 13 == 0)\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort(reverse=True)\n    l_prime = l.copy()\n    for i, val in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = val\n    return l_prime\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # uncycle elements in each group.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n < 2:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i, count, fib_n = 0, 0, 0\n    while count < n:\n        fib_n = fib(i)\n        if fib_n % 2 == 0:\n            return None\n        if is_prime(fib_n):\n            count += 1\n        i += 1\n    return fib_n\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * (n - 1)\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i + 2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    l.sort()\n    i = 0\n    j = len(l) - 1\n    while i < j:\n        if l[i] + l[j] == 0:\n            return True\n        elif l[i] + l[j] < 0:\n            i += 1\n        else:\n            j -= 1\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"0\"\n\n    fib_sequence = [0, 0, 2, 0]\n\n    for i in range(4, n + 1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])\n\n    return str(fib_sequence[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "EvoEval/48", "completion": "\n    if case_sensitive:\n        return text == text[::-1]\n    else:\n        return text.lower() == text[::-1].lower()\n"}
{"task_id": "EvoEval/49", "completion": "\n    if n == 0:\n        return 2 % p\n    else:\n        return (2 ** (n + q)) % p\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    if len(s0) != len(s1):\n        return False\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n <= 1:\n        return n\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    else:\n        return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))[::-1]\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def is_prime(n: int):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return i\n"}
{"task_id": "EvoEval/60", "completion": "\n    if m > n:\n        return 0\n    else:\n        return m + sum_to_n(n, m + 1)\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\" :\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "EvoEval/62", "completion": "\n    if len(xs) == 0:\n        return []\n    if len(xs) == 1:\n        return [0]\n    if len(xs) == 2:\n        return [xs[1], 2 * xs[0]]\n    return [(i + 1) * xs[i] for i in range(len(xs) - 1)] + [xs[-1] * len(xs) - 2 * sum(xs[:-1])]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-3] + fibfib_list[-2] - fibfib_list[-1])\n        return fibfib_list[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y' or s[-1] == 'Y':\n        count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n"}
{"task_id": "EvoEval/67", "completion": "\n    fruits = s.split(\", \")\n    apples = int(fruits[0].split(\" \")[0])\n    oranges = int(fruits[1].split(\" \")[0])\n    total_fruits = apples + oranges\n    mango_fruits = total_fruits - n\n    return mango_fruits\n"}
{"task_id": "EvoEval/68", "completion": "\n    odd_values = [(i, val) for i, val in enumerate(arr) if val % 2 != 0]\n    if not odd_values:\n        return []\n    smallest_odd_value = min(odd_values, key=lambda x: (x[1], x[0]))\n    return [smallest_odd_value[0], smallest_odd_value[1]]\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(1, max(lst)+1):\n        if lst.count(i) >= i:\n            return i\n    return -1\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop())\n        if lst:\n            result.append(lst.pop(0))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 3 decimal points\n    return round(area, 3)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_list(lst):\n        return sum(lst)\n\n    def is_even(n):\n        return n % 2 == 0\n\n    def is_within_weight_limit(lst, w):\n        total = sum_list(lst)\n        return total <= w and is_palindrome(lst) and is_even(total)\n\n    return is_within_weight_limit(q, w)\n"}
{"task_id": "EvoEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "EvoEval/74", "completion": "\n    def count_chars(lst):\n        return [sum(1 for c in s if c.isalpha()) for s in lst]\n\n    lst1_chars = count_chars(lst1)\n    lst2_chars = count_chars(lst2)\n\n    if sum(lst1_chars) > sum(lst2_chars):\n        return lst1\n    elif sum(lst1_chars) < sum(lst2_chars):\n        return lst2\n    else:\n        return lst2 if sum(lst2_chars) > sum(lst1_chars) else lst1\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            if count > 4:\n                return False\n    return count == 4\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if x == 1:\n        return True, 0\n    if n == 1:\n        return False, None\n    i = 0\n    while x % n == 0:\n        x /= n\n        i += 1\n    if x == 1:\n        return True, i\n    else:\n        return False, None\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    return a > 0 and round(a ** (1. / 3)) ** 3 == a\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_digits = {'0', '1', '4', '6', '8', '9', 'A', 'C', 'E'}\n    count = 0\n    for digit in num:\n        if digit in hex_digits:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"bd\"\n"}
{"task_id": "EvoEval/80", "completion": "\n    for i in range(0, len(s), 4):\n        if len(set(s[i:i+4])) != 4:\n            return False\n    return True\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_scale = {4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 2.3: 'B-', 2.0: 'B', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.0: 'D'}\n    return [grade_scale[g] for g in sorted(grades, reverse=True)]\n"}
{"task_id": "EvoEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string.replace(\" \", \"\")))\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))\n\n"}
{"task_id": "EvoEval/84", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return hex(sum_of_digits(N))[2:]\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0)\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    new_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(new_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, elem in enumerate(row):\n            if elem == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n\n    return ''.join(map(shift_char, s))\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) == 0:\n        return max_val\n    else:\n        return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    S = S.split('.')\n    count = 0\n    for sentence in S:\n        sentence = sentence.strip()\n        if sentence.startswith('I') and sentence.endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    def is_integer(n):\n        return n.is_integer()\n\n    return is_integer(x) and is_integer(y) and is_integer(z) and (abs(x - y) == z or abs(x - z) == y or abs(y - z) == x)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_vowel(vowel):\n        alphabet = 'abcdefghijklmnopqrstuvwxyz'\n        return alphabet[(alphabet.index(vowel.lower()) + 3) % 26]\n\n    return ''.join(shift_vowel(ch) if ch.lower() in 'aeiou' else ch for ch in message)\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "EvoEval/95", "completion": "\n    if not dict or len(dict) < 3:\n        return False\n\n    keys = dict.keys()\n    all_lower = all(k.islower() for k in keys)\n    all_upper = all(k.isupper() for k in keys)\n\n    return all_lower or all_upper\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, 0, -1) if is_prime(i)]\n    return primes\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Convert the numbers to string to easily access the individual digits\n    a_str = str(a)\n    b_str = str(b)\n\n    # Initialize the result\n    result = 0\n\n    # Iterate over each digit in the first number\n    for i in range(len(a_str)):\n        # Initialize the digit in the result\n        digit_result = 0\n\n        # Iterate over each digit in the second number\n        for j in range(len(b_str)):\n            # Multiply the current digit in the first number with the current digit in the second number\n            digit_result += int(a_str[i]) * int(b_str[j]) * (10 ** (len(b_str) - 1 - j))\n\n        # Add the result of the current digit to the result\n        result += digit_result * (10 ** i)\n\n    # Return the result\n    return result\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/99", "completion": "\n    def closest_integer(value):\n        return round(int(value))\n\n    return closest_integer\n"}
