{"task_id": "EvoEval/0", "completion": "\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        else:\n            stack.pop()\n            temp += char\n            if not stack:\n                result.append(temp)\n                temp = \"\"\n    result.sort()\n    return result\n"}
{"task_id": "EvoEval/2", "completion": "\n    int_part = int(number)\n    dec_part = number - int_part\n    return (int_part, dec_part)\n\n"}
{"task_id": "EvoEval/3", "completion": "\n    balance = 1\n    for operation in operations:\n        balance += operation\n        if balance < 1:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/4", "completion": "\n    median = sorted(numbers)[len(numbers) // 2]\n    return sum(abs(x - median) for x in numbers) / len(numbers)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    if numbers:\n        result.append(delimeter)\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        count = 0\n        max_count = 0\n        for char in group:\n            if char == '(':\n                count += 1\n                if count > max_count:\n                    max_count = count\n            elif char == ')':\n                count -= 1\n        results.append(max_count)\n    return results\n"}
{"task_id": "EvoEval/7", "completion": "\n    return [s for s in strings if substring not in s]\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    sum_numbers = 0\n    product_numbers = 1\n    for num in numbers:\n        if num >= 0:\n            sum_numbers += num\n            product_numbers *= num\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "EvoEval/9", "completion": "\n    if not numbers:\n        return []\n    min_num = numbers[0]\n    result = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        result.append(min_num)\n    return result\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n\n"}
{"task_id": "EvoEval/11", "completion": "\n    result = int(a, 2) ^ int(b, 2)\n    return bin(result)[2:][::-1]\n"}
{"task_id": "EvoEval/12", "completion": "\n    if not strings:\n        return None\n    shortest_string = strings[0]\n    for string in strings:\n        if len(string) < len(shortest_string):\n            shortest_string = string\n    return shortest_string\n"}
{"task_id": "EvoEval/13", "completion": "\n    if a > b:\n        greater = a\n    else:\n        greater = b\n\n    while True:\n        if greater % a == 0 and greater % b == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    return [string[i:] for i in range(len(string))]\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    return ' '.join(str(i) for i in range(1, n+1))\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    return len(set(string))\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n    result = []\n    for note in music_list:\n        if note in music_dict:\n            result.append(music_dict[note])\n    return sorted(list(set(result)), reverse=True)\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x], reverse=True)\n\n    return ' '.join(num_list)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = ()\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i - 1])\n    return result[::-1]\n"}
{"task_id": "EvoEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return sorted([(max_num - num) / range_num for num in numbers], reverse=True)\n"}
{"task_id": "EvoEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value % 2 == 0]\n"}
{"task_id": "EvoEval/23", "completion": "\n    return len(string) + 1\n\n"}
{"task_id": "EvoEval/24", "completion": "\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n"}
{"task_id": "EvoEval/26", "completion": "\n    numbers = list(set(numbers))\n    numbers.sort(reverse=True)\n    return numbers\n"}
{"task_id": "EvoEval/27", "completion": "\n    if exclusive_case == 'lower':\n        return string.swapcase()\n    elif exclusive_case == 'upper':\n        return string.lower()\n    else:\n        raise ValueError(\"exclusive_case must be either 'lower' or 'upper'\")\n\n"}
{"task_id": "EvoEval/28", "completion": "\n    return ','.join(strings)\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    return [s for s in strings if s.endswith(suffix)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    return sorted([i for i in l if i > 0])\n\n"}
{"task_id": "EvoEval/31", "completion": "\n    if n < 2:\n        return 'Invalid Input'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    if len(xs) < 2:\n        raise ValueError(\"Polynomial must have at least two coefficients\")\n\n    # The Newton-Raphson method\n    x = 0.0\n    while abs(poly(xs, x)) > 1e-6:\n        x = x - poly(xs, x) / poly([coeff * i for i, coeff in enumerate(xs)], x)\n\n    return x\n\n"}
{"task_id": "EvoEval/33", "completion": "\n    divisible_by_three = [(i, v) for i, v in enumerate(l) if i % 3 == 0]\n    divisible_by_three.sort(key=lambda x: x[1], reverse=True)\n    for i, v in divisible_by_three:\n        l[i] = v\n    return l\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    return sorted(set(l), reverse=True)\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    return min(l)\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    even_index_values = [l[i] for i in range(0, len(l), 2)]\n    even_index_values.sort(reverse=True)\n    result = [even_index_values.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    n = 4\n    # split string to groups. Each of length 4.\n    groups = [s[(n * i):min((n * i + n), len(s))] for i in range((len(s) + n - 1) // n)]\n    # un-cycle elements in each group. Unless group has fewer elements than 4.\n    groups = [(group[-1] + group[:-1]) if len(group) == n else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    if n < 1:\n        return None\n\n    fib_numbers = [0, 1]\n    prime_numbers = [2]\n\n    while len(fib_numbers) < n + 2:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n\n        if fib_numbers[-1] % 2 == 0:\n            fib_numbers[-1] = None\n        else:\n            if len(fib_numbers) > 2:\n                if all(fib_numbers[-1] % num != 0 for num in prime_numbers):\n                    prime_numbers.append(fib_numbers[-1])\n\n    return fib_numbers[n]\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 10:\n                return True\n            elif current_sum < 10:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    return n * n\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    return [i+2 for i in l]\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 1:\n                return True\n    return False\n"}
{"task_id": "EvoEval/44", "completion": "\n    if x < base:\n        return x\n    else:\n        return change_base(x // base, base) * 10 + x % base\n\n"}
{"task_id": "EvoEval/45", "completion": "\n    return a + b + c\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '0'\n\n    fib = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4])\n\n    return str(fib[n])\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    if len(l) == 0:\n        return 0\n    else:\n        l.sort()\n        if len(l) % 2 == 0:\n            return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n        else:\n            return l[len(l) // 2]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    if not case_sensitive:\n        text = text.lower()\n    return text == text[::-1]\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    return pow(2, n + q, p)\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - shift - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char in vowels])\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    for i in l:\n        if i > t:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    return x + y + 1\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        return True\n    else:\n        return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    return sorted(set(l1) & set(l2), reverse=True)\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    if n < 2:\n        return None\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    return sum(range(m, n + 1))\n\n"}
{"task_id": "EvoEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"[\":\n            stack.append(bracket)\n        elif bracket == \"]\":\n            if not stack or stack.pop() != \"[\":\n                return False\n    return not stack\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    return [i * xs[i] for i in range(1, len(xs))]\n\n"}
{"task_id": "EvoEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_seq = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_seq.append(fibfib_seq[i-3] + fibfib_seq[i-2] - fibfib_seq[i-1])\n        return fibfib_seq[-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/65", "completion": "\n    x = str(x)\n    if shift > len(x):\n        return\n    return x[shift:] + x[:shift]\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    sum = 0\n    for char in s:\n        if char.islower():\n            sum += ord(char)\n    return sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    apples = int(s.split()[0])\n    oranges = int(s.split()[2])\n    total_fruits = int(s.split()[4])\n    mangoes = total_fruits - apples - oranges - 1\n    return mangoes\n"}
{"task_id": "EvoEval/68", "completion": "\n    smallest_odd = [float('inf'), float('inf')]\n    for i, n in enumerate(arr):\n        if n % 2 == 1 and n < smallest_odd[1]:\n            smallest_odd = [i, n]\n    return smallest_odd if smallest_odd[1] != float('inf') else []\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(c.keys())+2):\n        if i not in c or c[i] < i:\n            return i if i > 0 else -1\n    return -1\n\n"}
{"task_id": "EvoEval/70", "completion": "\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop(-1))\n    return result\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 3)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    if q == q[::-1] and sum(q) <= w and sum(q) % 2 == 0:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes\n"}
{"task_id": "EvoEval/74", "completion": "\n    sum1 = sum(len(i) for i in lst1)\n    sum2 = sum(len(i) for i in lst2)\n    if sum1 > sum2:\n        return lst1\n    else:\n        return lst2\n\n"}
{"task_id": "EvoEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    count = 0\n    for i in primes:\n        if a % i == 0:\n            a //= i\n            count += 1\n            if a % i != 0:\n                count += 1\n            if count > 4:\n                return False\n    return count == 4\n\n"}
{"task_id": "EvoEval/76", "completion": "\n    if n == 1:\n        return (x == 1, 0)\n    elif n == 0:\n        return (x == 0, 0)\n    elif x == 0:\n        return (True, 0)\n    else:\n        i = 0\n        while n ** i < x:\n            i += 1\n        return (n ** i == x, i if n ** i == x else None)\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    x = 0\n    while x**3 < abs(a):\n        x += 1\n    return x**3 == abs(a)\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    hex_nums = \"014689ABCDEF\"\n    count = 0\n    for digit in num:\n        if digit not in hex_nums:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/79", "completion": "\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'bd'\n"}
{"task_id": "EvoEval/80", "completion": "\n    if len(s) < 4:\n        return False\n    for i in range(len(s) - 3):\n        if len(set(s[i:i + 4])) != 4:\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/81", "completion": "\n    grade_dict = {4.0: 'A+', 3.7: 'A+', 3.3: 'A', 3.0: 'A-', 2.7: 'B+', 2.3: 'B', 2.0: 'B-', 1.7: 'C+', 1.3: 'C', 1.0: 'C-', 0.7: 'D+', 0.0: 'D', -0.3: 'D-', -0.6: 'E'}\n    grades.sort(reverse=True)\n    return [grade_dict.get(grade) for grade in grades]\n"}
{"task_id": "EvoEval/82", "completion": "\n    # Remove white spaces from the string\n    string = string.replace(\" \", \"\")\n\n    # Calculate the length of the string\n    length = len(string)\n\n    # Check if the length is 0 or 1\n    if length in [0, 1]:\n        return True\n\n    # Check if the length is 2\n    if length == 2:\n        return True\n\n    # Check if the length is divisible by any number up to the square root of the length\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n\n    # If none of the above conditions are met, the length is a prime number\n    return True\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    # Initialize the count of numbers\n    count = 0\n\n    # Loop through all n-digit numbers\n    for i in range(10**(n-1), 10**n):\n        # Check if the number starts with 1 or ends with 2\n        if str(i)[0] == '1' or str(i)[-1] == '2':\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/84", "completion": "\n    # convert the number to hexadecimal\n    hex_num = hex(N)[2:]\n    # calculate the sum of the digits\n    sum_hex = sum(int(digit, 16) for digit in hex_num)\n    # convert the sum to hexadecimal\n    result = hex(sum_hex)[2:]\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n\n"}
{"task_id": "EvoEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = [''.join(sorted(word, reverse=True)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "EvoEval/87", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (-x[0], x[1]))\n    return result\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    array = list(set(array))\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    # your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            encrypted += alphabet[(alphabet.index(char) + 2) % 26]\n        else:\n            encrypted += char\n    return encrypted\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    max_val = max(lst)\n    lst.remove(max_val)\n    if len(lst) < 1:\n        return None\n    return max(lst)\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    boredoms = S.split('.')\n    count = 0\n    for sentence in boredoms:\n        if sentence.strip().startswith('I') and sentence.strip().endswith('boredom'):\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return abs(x) + abs(y) == abs(z) or abs(x) + abs(z) == abs(y) or abs(y) + abs(z) == abs(x)\n    return False\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiou'\n    upper_vowels = vowels.upper()\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                if char in upper_vowels:\n                    encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n                else:\n                    encoded_message += chr((ord(char) - 65 + 3) % 26 + 65)\n            else:\n                if char in vowels:\n                    encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n                else:\n                    encoded_message += chr((ord(char) - 97 + 3) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message\n\n"}
{"task_id": "EvoEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    return sum_of_digits(min(primes)) if primes else 0\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(dict) < 3:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    return sorted(primes, reverse=True)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    # Your code here\n    a_unit_digit = abs(a) % 10\n    b_unit_digit = abs(b) % 10\n    return a_unit_digit * b_unit_digit\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    return round(float(value))\n"}
