{"task_id": "MBPP/11", "completion": "\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if first_occurrence < last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n    else:\n        return s[:last_occurrence] + s[last_occurrence + 1:]\n\n"}
{"task_id": "MBPP/12", "completion": "\n    return sorted(M, key=sum)\n\n"}
{"task_id": "MBPP/13", "completion": "\n    word_counts = Counter(words)\n    return word_counts.most_common(1)\n"}
{"task_id": "MBPP/14", "completion": "\n    if l <= 0 or b <= 0 or h <= 0:\n        return \"Invalid input. Length, breadth and height should be positive.\"\n    else:\n        return l * b * h\n"}
{"task_id": "MBPP/15", "completion": "\n    return re.split('(?=[a-z])', text)\n"}
{"task_id": "MBPP/16", "completion": "\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.findall(text)\n"}
{"task_id": "MBPP/17", "completion": "\n    return 4 * a\n\n"}
{"task_id": "MBPP/18", "completion": "\n    return [char for char in string if char not in string]\n"}
{"task_id": "MBPP/19", "completion": "\n    # Convert the list to a set to remove duplicates\n    setnums = set(arraynums)\n\n    # If the length of the set is not equal to the length of the list,\n    # then there is a duplicate in the list\n    if len(setnums) != len(arraynums):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/20", "completion": "\n    if x < 0:\n        return False\n    elif x == 0:\n        return False\n    elif x == 1:\n        return False\n    elif x == 2:\n        return False\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    elif x == 6:\n        return False\n    elif x == 7:\n        return False\n    elif x == 8:\n        return False\n    elif x == 9:\n        return False\n    elif x == 10:\n        return False\n    elif x == 11:\n        return False\n    elif x == 12:\n        return False\n    elif x == 13:\n        return False\n    elif x == 14:\n        return False\n    elif x == 15:\n        return False\n    elif x == 16:\n        return False\n    elif x == 17:\n        return False\n    elif x == 18:\n        return False\n    elif x == 19:\n        return False\n    elif x == 20:\n        return False\n    elif x == 21:\n        return False\n    elif x == 22:\n        return False\n    elif x == 23:\n        return False\n    elif x == 24:\n        return False\n    elif x == 25:\n        return False\n    elif x == 26:\n        return False\n    elif x == 27:\n        return False\n    elif x == 28:\n        return False\n    elif x == 29:\n        return False\n    elif x == 30:\n        return False\n    elif x == 31:\n        return False\n    elif x == 32:\n        return False\n    elif x == 33:\n        return False\n    elif x == 34:\n        return False\n    elif x == 35:\n        return False\n    elif x == 36:\n        return False\n    elif x == 37:\n        return False\n    elif x == 38:\n        return False\n    elif x == 39:\n        return False\n    elif x == 40:\n        return False\n    elif x == 41:\n        return False\n    elif x == 42:"}
{"task_id": "MBPP/21", "completion": "\n    return [i for i in range(n, m*n, n)]\n"}
{"task_id": "MBPP/22", "completion": "\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num\n        num_set.add(num)\n    return None\n"}
{"task_id": "MBPP/23", "completion": "\n    max_sum = 0\n    for sublist in list1:\n        max_sum += max(sublist)\n    return max_sum\n"}
{"task_id": "MBPP/24", "completion": "\n    binary = str(binary)\n    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n"}
{"task_id": "MBPP/25", "completion": "\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the product of non-repeated elements\n    product = 1\n    for key, value in freq.items():\n        if value == 1:\n            product *= key\n\n    return product\n"}
{"task_id": "MBPP/26", "completion": "\n    return all(len(i) == K for i in test_list)\n"}
{"task_id": "MBPP/27", "completion": "\n    return []\n"}
{"task_id": "MBPP/28", "completion": "\n    if k > n or k < 0:\n        return 0\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result = result * (n - i)\n        result = result // (i + 1)\n    return result\n\n"}
{"task_id": "MBPP/29", "completion": "\n    res = 0\n    for i in range(0, arr_size):\n        res = res ^ arr[i]\n    return res\n"}
{"task_id": "MBPP/30", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/31", "completion": "\n    # Create a dictionary to store the count of each number\n    count_dict = collections.Counter(nums)\n\n    # Create a heap using the dictionary's items\n    heap = [(-count, num) for num, count in count_dict.items()]\n\n    # Convert the list to a heap\n    heapq.heapify(heap)\n\n    # Pop the top k elements from the heap\n    top_k = [heapq.heappop(heap)[1] for _ in range(k)]\n\n    return top_k\n\n"}
{"task_id": "MBPP/32", "completion": "\n    max_prime = -1\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1\n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)\n\n"}
{"task_id": "MBPP/33", "completion": "\n    if N == 0:\n        return '0'\n    binary = ''\n    while N != 0:\n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary\n"}
{"task_id": "MBPP/34", "completion": "\n    total_sum = sum(ar)\n    sum_of_numbers = sum(range(1, N+1))\n    return sum_of_numbers - total_sum\n"}
{"task_id": "MBPP/35", "completion": "\n    i = 1\n    while True:\n        rect_num = i * (i + 1) // 2\n        if rect_num >= n:\n            return rect_num\n        i += 1\n\n"}
{"task_id": "MBPP/36", "completion": "\n    if N == 1:\n        return p\n    elif N == 2:\n        return q\n    else:\n        return find_Nth_Digit(q, p + q, N - 2)\n\n"}
{"task_id": "MBPP/37", "completion": "\n    # Separate integers and strings\n    ints = [i for i in mixed_list if isinstance(i, int)]\n    strs = [s for s in mixed_list if isinstance(s, str)]\n\n    # Sort integers\n    ints.sort()\n\n    # Combine sorted integers and strings\n    sorted_list = ints + strs\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/38", "completion": "\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n\n    if len(even_numbers) > len(odd_numbers):\n        return even_numbers\n    else:\n        return odd_numbers\n\n"}
{"task_id": "MBPP/39", "completion": "\n    # Count the frequency of each character\n    count = Counter(S)\n\n    # Get the characters that appear more than once\n    more_than_once = [k for k, v in count.items() if v > 1]\n\n    # If there are more than one characters that appear more than once,\n    # we can't rearrange the string to satisfy the condition.\n    if len(more_than_once) > 1:\n        return False\n\n    # If there is only one character that appears more than once,\n    # we can rearrange the string to satisfy the condition.\n    if len(more_than_once) == 1:\n        return True\n\n"}
{"task_id": "MBPP/40", "completion": "\n    flat_list = list(chain(*nums))\n    return Counter(flat_list)\n\n"}
{"task_id": "MBPP/41", "completion": "\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n"}
{"task_id": "MBPP/42", "completion": "\n    # Create an empty hash map\n    hash_map = {}\n\n    # Traverse the given array\n    for i in range(0, n):\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n        else:\n            hash_map[arr[i]] = 1\n\n    # Traverse the hash map\n    for key, value in hash_map.items():\n        if value > 1:\n            print(\"Element\", key, \"repeated\", value, \"times\")\n"}
{"task_id": "MBPP/43", "completion": "\n    pattern = re.compile(r'[a-z]+')\n    matches = pattern.findall(text)\n    return matches\n"}
{"task_id": "MBPP/44", "completion": "\n    pattern = r\"^[a-zA-Z]+\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/45", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/46", "completion": "\n    return all(data[i] != data[j] for i in range(len(data)) for j in range(i + 1, len(data)))\n\n"}
{"task_id": "MBPP/47", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    last_digit_A = A % 10\n    last_digit_B = B % 10\n\n    return factorial(last_digit_B) % 10\n"}
{"task_id": "MBPP/48", "completion": "\n    return n ^ 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/49", "completion": "\n    result = []\n    for i in range(N):\n        result.append(nums[i][0])\n    return result\n"}
{"task_id": "MBPP/50", "completion": "\n    return min(input_list, key=lambda x: len(x))\n\n"}
{"task_id": "MBPP/51", "completion": "\n    if x == y and y == z:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n"}
{"task_id": "MBPP/52", "completion": "\n    return b * h\n\n"}
{"task_id": "MBPP/53", "completion": "\n    if len(str) < 2:\n        return False\n    return str[-1] == str[-2]\n"}
{"task_id": "MBPP/54", "completion": "\n    if len(my_list) == 0:\n        return my_list\n\n    max_val = max(my_list)\n    count = [0] * (max_val + 1)\n\n    for num in my_list:\n        count[num] += 1\n\n    sorted_list = []\n    for i, frequency in enumerate(count):\n        sorted_list.extend([i] * frequency)\n\n    return sorted_list\n\n"}
{"task_id": "MBPP/55", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/56", "completion": "\n\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        return rev(n) == n - 2\n\n"}
{"task_id": "MBPP/57", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize result\n    res = ''\n\n    # Traverse the array\n    for i in range(n):\n        # Append the current digit to result\n        res += arr[i]\n\n    # Return the result\n    return res\n"}
{"task_id": "MBPP/58", "completion": "\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/59", "completion": "\n    return n * (7 * n - 5) / 2\n\n"}
{"task_id": "MBPP/60", "completion": "\n    if n == 1:\n        return 1\n\n    max_len = 1\n    curr_len = 1\n\n    for i in range(1, n):\n        if arr[i] == arr[i-1] + 1:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 1\n\n    return max_len\n\n"}
{"task_id": "MBPP/61", "completion": "\n    # Create a dictionary to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate over the string\n    for i in range(n):\n        # Initialize the sum of digits\n        sum_digits = 0\n\n        # Iterate over the substring\n        for j in range(i, n):\n            # Add the digit to the sum\n            sum_digits += int(s[j])\n\n            # If the sum of digits is less than or equal to j-i+1,\n            # then increment the count of the substring\n            if sum_digits <= j-i+1:\n                count[j-i+1] += 1\n\n    # Return the count of substrings\n    return count\n"}
{"task_id": "MBPP/62", "completion": "\n    return min(xs)\n"}
{"task_id": "MBPP/63", "completion": "\n    if len(test_list) < 2:\n        return \"List should have at least two elements\"\n\n    min_element = test_list[0]\n    max_difference = test_list[1] - test_list[0]\n\n    for i in range(1, len(test_list)):\n        if test_list[i] - min_element > max_difference:\n            max_difference = test_list[i] - min_element\n\n        if test_list[i] < min_element:\n            min_element = test_list[i]\n\n    return max_difference\n"}
{"task_id": "MBPP/64", "completion": "\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/65", "completion": "\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n"}
{"task_id": "MBPP/66", "completion": "\n    return len([i for i in list if i > 0])\n\n"}
{"task_id": "MBPP/67", "completion": "\n    bell = [0 for _ in range(n+1)]\n    bell[0] = 1\n\n    for i in range(1, n+1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j]\n\n    return bell[n]\n\n"}
{"task_id": "MBPP/68", "completion": "\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"}
{"task_id": "MBPP/69", "completion": "\n    return s in l\n"}
{"task_id": "MBPP/70", "completion": "\n    for i in range(len(Input)):\n        if len(Input[i]) != k:\n            return False\n    return True\n"}
{"task_id": "MBPP/71", "completion": "\n    gap = len(nums)\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(gap // 2, 1)\n        swapped = False\n\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\n"}
{"task_id": "MBPP/72", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if n % 8 == 1 or n % 8 == -1:\n        return True\n    return False\n"}
{"task_id": "MBPP/73", "completion": "\n    return re.split(r'([,;:\\s])', text)\n"}
{"task_id": "MBPP/74", "completion": "\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/75", "completion": "\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if all(test_list[i][k] % test_list[j][k] == 0 for k in range(len(test_list[i]))) and all(test_list[j][k] % test_list[i][k] == 0 for k in range(len(test_list[j]))):\n                result.append((test_list[i], test_list[j]))\n    return result\n\n"}
{"task_id": "MBPP/76", "completion": "\n    return m * n\n\n"}
{"task_id": "MBPP/77", "completion": "\n    sum_even = 0\n    sum_odd = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return sum_even - sum_odd\n\n"}
{"task_id": "MBPP/78", "completion": "\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/79", "completion": "\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"}
{"task_id": "MBPP/80", "completion": "\n    if n < 0:\n        return \"Input should be a non-negative integer.\"\n    elif n == 0:\n        return 0\n    else:\n        return n*(n-3)//2\n"}
{"task_id": "MBPP/81", "completion": "\n    return zip(test_tup1, test_tup2)\n"}
{"task_id": "MBPP/82", "completion": "\n    return 4/3 * math.pi * r**3\n"}
{"task_id": "MBPP/83", "completion": "\n    return sum(ord(c) for c in strr)\n\n"}
{"task_id": "MBPP/84", "completion": "\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        sequence = [2, 1]\n        for i in range(2, n):\n            sequence.append(sequence[i-1] + sequence[i-2])\n        return sequence[-1]\n\n"}
{"task_id": "MBPP/85", "completion": "\n    return 4 * math.pi * r**2\n"}
{"task_id": "MBPP/86", "completion": "\n    return n * (9 * n - 7) // 2\n\n"}
{"task_id": "MBPP/87", "completion": "\n    merged_dict = ct.deepcopy(dict1)\n    merged_dict.update(ct.deepcopy(dict2))\n    merged_dict.update(ct.deepcopy(dict3))\n    return merged_dict\n"}
{"task_id": "MBPP/88", "completion": "\n    return collections.Counter(list1)\n\nlist1 = [1, 2, 3, 2, 1, 3, 2, 1, 1, 2, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "MBPP/89", "completion": "\n    return N - (N % 10)\n\n"}
{"task_id": "MBPP/90", "completion": "\n    return max(len(word) for word in list1)\n\n"}
{"task_id": "MBPP/91", "completion": "\n    if str1.find(sub_str) != -1:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/92", "completion": "\n    if n < 1:\n        return False\n    n_str = str(n)\n    for i in range(len(n_str) - 1):\n        if n_str[i] > n_str[i + 1]:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/93", "completion": "\n    return a ** b\n\n"}
{"task_id": "MBPP/94", "completion": "\n    return [(i, v) for i, v in enumerate(test_list) if v == min(test_list)]\n\n"}
{"task_id": "MBPP/95", "completion": "\n    if not lst:\n        return 0\n    min_length = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                min_length = min(min_length, len(lst[i]) - len(lst[j]))\n            else:\n                min_length = min(min_length, len(lst[j]) - len(lst[i]))\n    return min_length\n"}
{"task_id": "MBPP/96", "completion": "\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\n"}
{"task_id": "MBPP/97", "completion": "\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/98", "completion": "\n    return numbers[0] * len(numbers)\n\n\nnumbers = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/99", "completion": "\n    return bin(n).replace(\"0b\", \"\")\n\n"}
{"task_id": "MBPP/100", "completion": "\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return int(num_str + num_str[::-1])\n    else:\n        return int(num_str + str(int(num_str) + 1))\n\n"}
{"task_id": "MBPP/101", "completion": "\n    if k > n:\n        return \"Invalid k\"\n    else:\n        return arr[k-1]\n"}
{"task_id": "MBPP/102", "completion": "\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"}
{"task_id": "MBPP/103", "completion": "\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return eulerian_num(m, n-m)\n\n"}
{"task_id": "MBPP/104", "completion": "\n    return sorted(input_list, key=lambda x: x[0])\n\n"}
{"task_id": "MBPP/105", "completion": "\n    return sum(1 for i in lst if i == True)\n"}
{"task_id": "MBPP/106", "completion": "\n    return test_list + list(test_tup)\n"}
{"task_id": "MBPP/107", "completion": "\n    count = 0\n    for i in range(L, R + 1):\n        if 'x' in str(i):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/108", "completion": "\n    heap = []\n    for num in [num1, num2, num3]:\n        for n in num:\n            heapq.heappush(heap, n)\n\n    while heap:\n        yield heapq.heappop(heap)\n\n"}
{"task_id": "MBPP/109", "completion": "\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/110", "completion": "\n    missing_ranges = []\n    for i in range(len(test_list)):\n        if i == 0:\n            if test_list[i] < strt_val:\n                missing_ranges.append((strt_val, test_list[i]-1))\n        elif i == len(test_list)-1:\n            if test_list[i] > stop_val:\n                missing_ranges.append((test_list[i-1]+1, stop_val))\n        else:\n            if test_list[i] < test_list[i-1] or test_list[i] > test_list[i+1]:\n                missing_ranges.append((test_list[i-1]+1, test_list[i]-1))\n    return missing_ranges\n"}
{"task_id": "MBPP/111", "completion": "\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    return list(set(flat_list))\n"}
{"task_id": "MBPP/112", "completion": "\n    radius = diameter / 2\n    return 2 * (22/7) * radius * (radius + height)\n"}
{"task_id": "MBPP/113", "completion": "\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"}
{"task_id": "MBPP/114", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        for item in tup:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/115", "completion": "\n    for i in list1:\n        if i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/116", "completion": "\n    return int(''.join(map(str, nums)))\n\n"}
{"task_id": "MBPP/117", "completion": "\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            print(f\"Cannot convert {test_list[i]} to float. Skipping...\")\n    return test_list\n"}
{"task_id": "MBPP/118", "completion": "\n    return string.split()\n"}
{"task_id": "MBPP/119", "completion": "\n    res = []\n    for i in range(n):\n        if arr[i] not in arr[i+1:]:\n            res.append(arr[i])\n    return res\n"}
{"task_id": "MBPP/120", "completion": "\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n"}
{"task_id": "MBPP/121", "completion": "\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    count += 1\n                    print(\"Triplet is\", A[i], \", \", A[j], \", \", A[k], \"and sum is \", sum)\n    if count == 0:\n        print(\"No such triplet found\")\n"}
{"task_id": "MBPP/122", "completion": "\n    if n > MAX:\n        return \"Out of range\"\n    else:\n        return n * 2\n"}
{"task_id": "MBPP/123", "completion": "\n    def d(n):\n        return sum(divisors(n))\n\n    def divisors(n):\n        result = set()\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                result.add(i)\n                result.add(n // i)\n        return result\n\n    amicable_numbers = set()\n    for i in range(1, limit):\n        a = d(i)\n        b = d(a)\n        if a < limit and a != i and b < limit and b != i and a == b:\n            amicable_numbers.add(i)\n            amicable_numbers.add(a)\n    return sum(amicable_numbers)\n\n"}
{"task_id": "MBPP/124", "completion": "\n    return cmath.phase(a)\n"}
{"task_id": "MBPP/125", "completion": "\n    # Initialize maximum difference\n    max_diff = 0\n\n    # Initialize count of 1s\n    count_ones = 0\n\n    # Initialize count of 0s\n    count_zeros = 0\n\n    # Initialize starting point of sub-string\n    start = 0\n\n    # Traverse through the string\n    for i in range(len(string)):\n\n        # If current character is 1\n        if string[i] == '1':\n\n            # Increment count of 1s\n            count_ones += 1\n\n            # Update max_diff if this is the first 1\n            if count_ones == 1:\n                max_diff = i - start + 1\n\n        else:\n\n            # Else if current character is 0\n            count_zeros += 1\n\n            # If this is the first 0, update start\n            if count_zeros == 1:\n                start = i\n\n            # Update max_diff if this is the second 0\n            if count_ones > 0 and count_zeros > 0 and i - start + 1 > max_diff:\n                max_diff = i - start + 1\n\n    return max_diff\n\n"}
{"task_id": "MBPP/126", "completion": "\n\n        Find common divisors of two numbers.\n        \"\"\"\n        return [i for i in range(1, n1 + 1) if n1 % i == 0 and n2 % i == 0]\n\n    return sum(common_divisors(a, b))\n\n"}
{"task_id": "MBPP/127", "completion": "\n    result = 0\n    for i in range(y):\n        result += x\n    return result\n"}
{"task_id": "MBPP/128", "completion": "\n    return [word for word in str if len(word) > n]\n"}
{"task_id": "MBPP/129", "completion": "\n    # Check if the matrix is a square matrix\n    if not is_square(my_matrix):\n        return False\n\n    # Check if the matrix is a 3x3 matrix\n    if len(my_matrix) != 3 or len(my_matrix[0]) != 3:\n        return False\n\n    # Check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # Check if the sum of each row, column, and diagonal is the same\n    sum_row = sum(my_matrix[0])\n    sum_col = sum(my_matrix[1])\n    sum_diag = my_matrix[0][0] + my_matrix[1][1]\n\n    for i in range(2, len(my_matrix)):\n        if sum_row != sum(my_matrix[i]) or sum_col != sum(my_matrix[j][i] for j in range(len(my_matrix))) or sum_diag != my_matrix[0][0] + my_matrix[i][i]:\n            return False\n\n    return True\n\n"}
{"task_id": "MBPP/130", "completion": "\n    num_freq = defaultdict(int)\n    for num in nums:\n        num_freq[num] += 1\n\n    max_freq_num = max(num_freq, key=num_freq.get)\n    return max_freq_num\n"}
{"task_id": "MBPP/131", "completion": "\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n\n"}
{"task_id": "MBPP/132", "completion": "\n    return str(tup1)\n\n"}
{"task_id": "MBPP/133", "completion": "\n    return sum(filter(lambda x: x < 0, nums))\n\n"}
{"task_id": "MBPP/134", "completion": "\n    for _ in range(p):\n        if arr[-1] % 2 == 0:\n            arr.append(arr[-1] + 1)\n        else:\n            arr.append(arr[-1] - 1)\n    return arr[-1] % 2 == 0\n\n"}
{"task_id": "MBPP/135", "completion": "\n    return n*(2*10**(n-1) + 1)\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/136", "completion": "\n    if units <= 50:\n        bill = units * 0.50\n    elif units <= 100:\n        bill = 25 + (units - 50) * 0.75\n    else:\n        bill = 100 * 0.75 + (units - 100) * 1.20\n    return bill\n"}
{"task_id": "MBPP/137", "completion": "\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/138", "completion": "\n    if n == 0:\n        return False\n\n    while n % 2 == 0:\n        n = n // 2\n\n    return n == 1\n\n"}
{"task_id": "MBPP/139", "completion": "\n    return 2 * 3.14159 * r\n\n"}
{"task_id": "MBPP/140", "completion": "\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            if sublist.count(item) == 1:\n                result.append(item)\n    return result\n"}
{"task_id": "MBPP/141", "completion": "\n    for i in range(len(nums), 0, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            if max_index != 0:\n                nums = flip(nums, 0, max_index)\n            nums = flip(nums, 0, i - 1)\n    return nums\n\n"}
{"task_id": "MBPP/142", "completion": "\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n"}
{"task_id": "MBPP/143", "completion": "\n    number_lists = []\n    for i in Input:\n        if isinstance(i, list):\n            number_lists.append(i)\n    return number_lists\n"}
{"task_id": "MBPP/144", "completion": "\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"}
{"task_id": "MBPP/145", "completion": "\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element\n"}
{"task_id": "MBPP/146", "completion": "\n    return ''.join(str(ord(c)) for c in str1)\n\n"}
{"task_id": "MBPP/147", "completion": "\n    if m == 0:\n        return tri[0][0]\n\n    for i in range(m - 1, -1, -1):\n        for j in range(0, i + 1):\n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n\n    return tri[0][0]\n\n"}
{"task_id": "MBPP/148", "completion": "\n    return sum(int(digit) for digit in str(x))\n\n"}
{"task_id": "MBPP/149", "completion": "\n    if n == 0:\n        return 0\n\n    dp = [1] * n\n    max_length = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] - arr[j] == i - j:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_length = max(max_length, dp[i])\n\n    return max_length\n\n"}
{"task_id": "MBPP/150", "completion": "\n    if b in a:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/151", "completion": "\n    if q == 0:\n        return p\n    else:\n        return gcd(q, p % q)\n\n"}
{"task_id": "MBPP/152", "completion": "\n\n    if len(x) <= 1:\n        return x\n    else:\n        mid = len(x) // 2\n        left_half = merge_sort(x[:mid])\n        right_half = merge_sort(x[mid:])\n        return merge(left_half, right_half)\n\n"}
{"task_id": "MBPP/153", "completion": "\n    x1 = (-b + sqrt(b**2 - 4*a*c)) / (2*a)\n    x2 = (-b - sqrt(b**2 - 4*a*c)) / (2*a)\n    return x1, x2\n\n"}
{"task_id": "MBPP/154", "completion": "\n    result = []\n    for i in range(N):\n        for j in range(N):\n            result.append(nums[i][j])\n    return result\n"}
{"task_id": "MBPP/155", "completion": "\n    return n ^ 0xAAAAAAAA\n\n"}
{"task_id": "MBPP/156", "completion": "\n    tuple_int = []\n    for i in tuple_str:\n        tuple_int.append(int(i))\n    return tuple(tuple_int)\n"}
{"task_id": "MBPP/157", "completion": "\n    return [(k, len(list(g)) if k is not None else None) for k, g in groupby(list1)]\n"}
{"task_id": "MBPP/158", "completion": "\n    # Calculate the sum of all elements\n    total_sum = sum(arr)\n\n    # If total sum is less than k, return -1\n    if total_sum < k:\n        return -1\n\n    # Calculate the target sum\n    target_sum = total_sum - k\n\n    # Initialize the count of operations\n    count = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # If the current element is less than target_sum, add it to the count\n        if arr[i] < target_sum:\n            count += target_sum - arr[i]\n\n    # Return the count of operations\n    return count\n"}
{"task_id": "MBPP/159", "completion": "\n    if (month == 1 or month == 2 or month == 12) and days > 31:\n        print(\"Invalid month and/or day\")\n    elif (month == 3 or month == 4 or month == 5) and days > 30:\n        print(\"Invalid month and/or day\")\n    elif month == 2 and days > 28:\n        print(\"Invalid month and/or day\")\n    elif month == 6 and days > 30:\n        print(\"Invalid month and/or day\")\n    elif month == 9 and days > 30:\n        print(\"Invalid month and/or day\")\n    elif month == 11 and days > 30:\n        print(\"Invalid month and/or day\")\n    else:\n        if month == 1:\n            print(\"Winter\")\n        elif month == 2:\n            print(\"Winter\")\n        elif month == 3:\n            print(\"Spring\")\n        elif month == 4:\n            print(\"Spring\")\n        elif month == 5:\n            print(\"Spring\")\n        elif month == 6:\n            print(\"Summer\")\n        elif month == 7:\n            print(\"Summer\")\n        elif month == 8:\n            print(\"Summer\")\n        elif month == 9:\n            print(\"Autumn\")\n        elif month == 10:\n            print(\"Autumn\")\n        elif month == 11:\n            print(\"Autumn\")\n        elif month == 12:\n            print(\"Winter\")\n"}
{"task_id": "MBPP/160", "completion": "\n    for x in range(1, n+1):\n        if (a*x) % b == n:\n            return x, (n - (a*x)) // b\n    return -1, -1\n"}
{"task_id": "MBPP/161", "completion": "\n    return [i for i in list1 if i not in list2]\n"}
{"task_id": "MBPP/162", "completion": "\n    sum = 0\n    for x in range(n, 0, -2):\n        sum += x\n    return sum\n\n"}
{"task_id": "MBPP/163", "completion": "\n    if not isinstance(s, (int, float)) or not isinstance(l, (int, float)):\n        raise TypeError(\"Both sides and length must be numbers.\")\n    if s <= 0 or l <= 0:\n        raise ValueError(\"Both sides and length must be greater than zero.\")\n    return (s * l) / (4 * tan(pi / s))\n"}
{"task_id": "MBPP/164", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n // i)\n    return sum\n"}
{"task_id": "MBPP/165", "completion": "\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].islower():\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/166", "completion": "\n    count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if (A[i] ^ A[j]) & 1 == 0:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/167", "completion": "\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"}
{"task_id": "MBPP/168", "completion": "\n    return a.count(x)\n\n"}
{"task_id": "MBPP/169", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        pell_numbers = [0, 1]\n        for i in range(2, n + 1):\n            pell_numbers.append(2 * pell_numbers[i - 1] + pell_numbers[i - 2])\n        return pell_numbers[n]\n\n"}
{"task_id": "MBPP/170", "completion": "\n    return sum(list1[m:n+1])\n"}
{"task_id": "MBPP/171", "completion": "\n    return 5 * a\n"}
{"task_id": "MBPP/172", "completion": "\n    count = 0\n    for i in s:\n        if i == 's':\n            count += 1\n    return count\n"}
{"task_id": "MBPP/173", "completion": "\n    return re.sub('[^A-Za-z0-9]+', '', text)\n"}
{"task_id": "MBPP/174", "completion": "\n    d = {}\n    for k, v in l:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n"}
{"task_id": "MBPP/175", "completion": "\n    stack = []\n    mapping = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for char in str1:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if stack == [] or mapping[char] != stack.pop():\n                return False\n    return stack == []\n\n"}
{"task_id": "MBPP/176", "completion": "\n    return a + b + c\n"}
{"task_id": "MBPP/177", "completion": "\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    lcm_min = L[0]\n    lcm_max = R[0]\n\n    for i in range(1, len(L)):\n        lcm_min = lcm(lcm_min, L[i])\n        lcm_max = lcm(lcm_max, L[i])\n\n    for i in range(1, len(R)):\n        lcm_min = lcm(lcm_min, R[i])\n        lcm_max = lcm(lcm_max, R[i])\n\n    for i in range(lcm_min, lcm_max + 1):\n        if i % 2 == 0:\n            return [i, i + 1]\n\n    return [-1, -1]\n\n"}
{"task_id": "MBPP/178", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n"}
{"task_id": "MBPP/179", "completion": "\n    if x.isdigit():\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/180", "completion": "\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n\n    dlat = elat - slat\n    dlon = elon - slon\n\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * acos(a)\n    miles =  3959 * c\n\n    return miles\n"}
{"task_id": "MBPP/181", "completion": "\n    if not str1 or not str2:\n        return \"\"\n\n    min_len = min(len(str1), len(str2))\n\n    for i in range(min_len):\n        if str1[i] != str2[i]:\n            return str1[:i]\n\n    return str1[:min_len]\n\n"}
{"task_id": "MBPP/182", "completion": "\n    uppercase_letters = re.findall(r'[A-Z]', string)\n    lowercase_letters = re.findall(r'[a-z]', string)\n    characters = re.findall(r'[^A-Za-z0-9]', string)\n    values = re.findall(r'\\d', string)\n\n    return uppercase_letters, lowercase_letters, characters, values\n\n"}
{"task_id": "MBPP/183", "completion": "\n    count = 0\n    arr.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/184", "completion": "\n    return [i for i in list if i > num]\n"}
{"task_id": "MBPP/185", "completion": "\n    # calculate the discriminant\n    D = (b**2) - (4*a*c)\n\n    # check if the discriminant is positive\n    if D >= 0:\n        # calculate the roots\n        root1 = (-b - (D**0.5)) / (2*a)\n        root2 = (-b + (D**0.5)) / (2*a)\n        return root1, root2\n    else:\n        return \"The parabola has no real roots.\"\n"}
{"task_id": "MBPP/186", "completion": "\n    for pattern in patterns:\n        if re.search(pattern, text):\n            print(f\"Found: {pattern}\")\n        else:\n            print(f\"Not found: {pattern}\")\n\n"}
{"task_id": "MBPP/187", "completion": "\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n"}
{"task_id": "MBPP/188", "completion": "\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    i = 1\n    while i*i <= n:\n        j = int(n**0.5)\n        if i*i == n:\n            return True\n        i += 1\n    return False\n"}
{"task_id": "MBPP/189", "completion": "\n    # Create a boolean array to mark numbers as present\n    # Initially, all numbers are not present\n    present = [False] * (n + 1)\n\n    # Mark present numbers as True\n    for i in range(len(arr)):\n        if arr[i] >= 1 and arr[i] <= n:\n            present[arr[i]] = True\n\n    # Find the first number which is not present\n    for i in range(1, n + 1):\n        if not present[i]:\n            return i\n\n    return n + 1\n\n"}
{"task_id": "MBPP/190", "completion": "\n    # Check if the points are integral\n    if x1.is_integer() and y1.is_integer() and x2.is_integer() and y2.is_integer():\n        return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/191", "completion": "\n    if monthname3 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/192", "completion": "\n    if any(char.isdigit() for char in str) and any(char.isalpha() for char in str):\n        return True\n    return False\n"}
{"task_id": "MBPP/193", "completion": "\n    return tuple(set(test_tup))\n"}
{"task_id": "MBPP/194", "completion": "\n    return int(str(n), 8)\n\n"}
{"task_id": "MBPP/195", "completion": "\n    l = 0\n    r = n - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n\n"}
{"task_id": "MBPP/196", "completion": "\n    return [i for i in test_list if len(i) != K]\n\n"}
{"task_id": "MBPP/197", "completion": "\n    result = []\n    for tup in [test_tup1, test_tup2]:\n        for num in tup:\n            if isinstance(num, tuple):\n                result.append(exponentiation(*num))\n            else:\n                result.append(num**2)\n    return result\n\n"}
{"task_id": "MBPP/198", "completion": "\n    # Calculate the semi-major axis of the ellipse\n    semi_major_axis = math.sqrt(a**2 / math.pi)\n\n    # Calculate the semi-minor axis of the ellipse\n    semi_minor_axis = math.sqrt(b**2 / math.pi)\n\n    # Calculate the area of the triangle\n    area = 0.5 * a * b\n\n    # Calculate the perimeter of the triangle\n    perimeter = math.sqrt((semi_major_axis + semi_minor_axis)**2 - (area / a)**2)\n\n    # Calculate the length of the hypotenuse of the triangle\n    hypotenuse = math.sqrt(area / a)\n\n    # Calculate the length of the other side of the triangle\n    other_side = hypotenuse * 2\n\n    # Calculate the length of the base of the triangle\n    base = math.sqrt(area / b)\n\n    # Calculate the length of the height of the triangle\n    height = math.sqrt(area / a)\n\n    # Calculate the area of the triangle\n    triangle_area = (base * height) / 2\n\n    # Calculate the perimeter of the triangle\n    triangle_perimeter = base + height + other_side\n\n    # Calculate the length of the hypotenuse of the triangle\n    triangle_hypotenuse = math.sqrt(triangle_area / a)\n\n    # Calculate the length of the other side of the triangle\n    triangle_other_side = triangle_hypotenuse * 2\n\n    # Calculate the length of the base of the triangle\n    triangle_base = math.sqrt(triangle_area / b)\n\n    # Calculate the length of the height of the triangle\n    triangle_height = math.sqrt(triangle_area / a)\n\n    # Calculate the area of the triangle\n    triangle_area = (triangle_base * triangle_height) / 2\n\n    # Calculate the perimeter of the triangle\n    triangle_perimeter = triangle_base + triangle_height + triangle_other_side\n\n    # Calculate the length of the hypotenuse of the triangle\n    triangle"}
{"task_id": "MBPP/199", "completion": "\n    return n & (~n + 1)\n\n"}
{"task_id": "MBPP/200", "completion": "\n    max_value = max(list1)\n    return [i for i, x in enumerate(list1) if x == max_value]\n\n"}
{"task_id": "MBPP/201", "completion": "\n    if len(lst) == 0:\n        return True\n    else:\n        return all(lst[0] == i for i in lst)\n"}
{"task_id": "MBPP/202", "completion": "\n    return ''.join(ch for ch in str1 if not (ch % 2 == 0))\n\n"}
{"task_id": "MBPP/203", "completion": "\n    x = n1 ^ n2\n    distance = 0\n    while x:\n        distance += x & 1\n        x >>= 1\n    return distance\n"}
{"task_id": "MBPP/204", "completion": "\n    return s.count(c)\n"}
{"task_id": "MBPP/205", "completion": "\n    inversions = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversions.append((test_tup[i], test_tup[j]))\n    return inversions\n"}
{"task_id": "MBPP/206", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/207", "completion": "\n    n = len(str)\n    longest_repeating_subseq = [0]*n\n    longest_repeating_subseq[0] = 1\n    max_length = 1\n    for i in range(1, n):\n        longest_repeating_subseq[i] = 2\n        for j in range(i):\n            if str[i] == str[j] and longest_repeating_subseq[i-1] < longest_repeating_subseq[j] + 1:\n                longest_repeating_subseq[i] = longest_repeating_subseq[j] + 1\n            elif str[i] == str[j]:\n                longest_repeating_subseq[i] = max(longest_repeating_subseq[i], longest_repeating_subseq[j])\n        max_length = max(max_length, longest_repeating_subseq[i])\n    return max_length\n\n"}
{"task_id": "MBPP/208", "completion": "\n    pattern = r'^-?\\d+\\.\\d{1,2}$'\n    if re.match(pattern, num):\n        return True\n    return False\n"}
{"task_id": "MBPP/209", "completion": "\n    hq.heapreplace(heap, a)\n    return heap\n"}
{"task_id": "MBPP/210", "completion": "\n    pattern = re.compile('^[a-z0-9]*$')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/211", "completion": "\n    count = 0\n    for i in range(n):\n        if n & (1 << i):\n            count += 1\n    return count\n"}
{"task_id": "MBPP/212", "completion": "\n    return sum(i**4 for i in range(1, n+1))\n"}
{"task_id": "MBPP/213", "completion": "\n    return (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\n"}
{"task_id": "MBPP/214", "completion": "\n    return radian * (180 / math.pi)\n\n"}
{"task_id": "MBPP/215", "completion": "\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        decoded_list.extend([alist[i+1]] * alist[i])\n    return decoded_list\n"}
{"task_id": "MBPP/216", "completion": "\n    return set(list1).issubset(set(list2))\n\n"}
{"task_id": "MBPP/217", "completion": "\n    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"}
{"task_id": "MBPP/218", "completion": "\n    # Convert the numbers to binary\n    A_bin = bin(A)[2:]\n    B_bin = bin(B)[2:]\n\n    # Calculate the length of the binary representation\n    len_A = len(A_bin)\n    len_B = len(B_bin)\n\n    # If the lengths are not equal, pad the shorter one with zeros\n    if len_A < len_B:\n        A_bin = A_bin.zfill(len_B)\n    elif len_B < len_A:\n        B_bin = B_bin.zfill(len_A)\n\n    # Calculate the difference in the binary representation\n    diff = [int(a != b) for a, b in zip(A_bin, B_bin)]\n\n    # Count the number of operations needed to make the numbers equal\n    return sum(diff)\n"}
{"task_id": "MBPP/219", "completion": "\n    if K > len(test_tup):\n        return \"K is greater than the length of the tuple\"\n\n    sorted_tup = sorted(test_tup)\n    return sorted_tup[0:K], sorted_tup[-K:]\n"}
{"task_id": "MBPP/220", "completion": "\n    # Replace spaces, commas or with colon.\n    text = re.sub(r'[ ,:]', ':', text)\n\n    # Split the text into words.\n    words = text.split()\n\n    # Sort the words by their length.\n    words.sort(key=len)\n\n    # Replace the nth longest word with a special character.\n    if n < len(words):\n        words[n] = '@'\n\n    # Join the words back into a string.\n    text = ' '.join(words)\n\n    return text\n"}
{"task_id": "MBPP/221", "completion": "\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n"}
{"task_id": "MBPP/222", "completion": "\n    first_element_type = type(test_tuple[0])\n    return all(isinstance(x, first_element_type) for x in test_tuple)\n"}
{"task_id": "MBPP/223", "completion": "\n    count = 0\n    for i in range(0, n):\n        if (arr[i] == x):\n            count += 1\n    if (count > n / 2):\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/224", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/225", "completion": "\n    if high < low:\n        return -1\n    if high == low:\n        return arr[low]\n\n    mid = (low + high) // 2\n\n    if mid < high and arr[mid + 1] < arr[mid]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n\n    if arr[high] > arr[mid]:\n        return find_Min(arr, low, mid - 1)\n    return find_Min(arr, mid + 1, high)\n\n"}
{"task_id": "MBPP/226", "completion": "\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n"}
{"task_id": "MBPP/227", "completion": "\n    return min(a, b, c)\n"}
{"task_id": "MBPP/228", "completion": "\n    for i in range(l, r+1):\n        if (n & i) == 0:\n            return False\n    return True\n"}
{"task_id": "MBPP/229", "completion": "\n    neg = []\n    pos = []\n    for i in arr:\n        if i < 0:\n            neg.append(i)\n        else:\n            pos.append(i)\n    return neg + pos\n"}
{"task_id": "MBPP/230", "completion": "\n    return str1.replace(\" \", char)\n"}
{"task_id": "MBPP/231", "completion": "\n    if n == 1:\n        return tri[0]\n\n    dp = [0]*n\n    dp[0] = tri[0]\n    dp[1] = dp[0] + tri[1]\n\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2]) + tri[i]\n\n    return dp[-1]\n\n"}
{"task_id": "MBPP/232", "completion": "\n    return heapq.nlargest(n, list1)\n"}
{"task_id": "MBPP/233", "completion": "\n    import math\n    pi = math.pi\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n"}
{"task_id": "MBPP/234", "completion": "\n    return l ** 3\n\n"}
{"task_id": "MBPP/235", "completion": "\n    return n | (n + 1)\n\n"}
{"task_id": "MBPP/236", "completion": "\n    if N < K:\n        return 0\n    else:\n        return N // K\n\n"}
{"task_id": "MBPP/237", "completion": "\n    # Count the occurrences of each tuple\n    count_dict = Counter(test_list)\n\n    # Check if any tuple occurs more than once\n    for key, value in count_dict.items():\n        if value > 1:\n            return True\n\n    return False\n"}
{"task_id": "MBPP/238", "completion": "\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/239", "completion": "\n    if n == 1:\n        return m\n    else:\n        return m * (m - 1) * (m - 2) // 6\n\n"}
{"task_id": "MBPP/240", "completion": "\n    list1[-1] = list2\n    return list1\n"}
{"task_id": "MBPP/241", "completion": "\n    return [['*' for _ in range(n)] for _ in range(m)]\n\n"}
{"task_id": "MBPP/242", "completion": "\n    return len(str1)\n\n"}
{"task_id": "MBPP/243", "completion": "\n    return sorted(lst, key=lambda x: (lst.count(x[0]), x))\n\n"}
{"task_id": "MBPP/244", "completion": "\n    root = math.sqrt(N)\n    if root.is_integer():\n        return int(root + 1) ** 2\n    else:\n        return int(root) ** 2\n"}
{"task_id": "MBPP/245", "completion": "\n    if n == 1:\n        return arr[0]\n\n    # Initialize maximum sum\n    max_sum = arr[0]\n\n    # Initialize current sum\n    curr_sum = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n"}
{"task_id": "MBPP/246", "completion": "\n    guess = number / 2.0\n    while abs(guess * guess - number) > 0.000001:\n        guess = (guess + number / guess) / 2.0\n    return guess\n\n"}
{"task_id": "MBPP/247", "completion": "\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)]for y in range(n)]\n\n    # Strings of length 1 are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Build the table in bottom-up manner\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if str[i] == str[j] and cl == 2:\n                L[i][j] = 2\n            elif str[i] == str[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    return L[0][n-1]\n\n"}
{"task_id": "MBPP/248", "completion": "\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n / sum(1 / i for i in range(1, n + 1))\n\n"}
{"task_id": "MBPP/249", "completion": "\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n"}
{"task_id": "MBPP/250", "completion": "\n    return tup.count(x)\n"}
{"task_id": "MBPP/251", "completion": "\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list\n"}
{"task_id": "MBPP/252", "completion": "\n    return [cmath.rect(x, y) for x, y in numbers]\n\n"}
{"task_id": "MBPP/253", "completion": "\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/254", "completion": "\n    words = re.findall(r'\\b[ae]\\w*\\b', text, re.I)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog\""}
{"task_id": "MBPP/255", "completion": "\n    return list(combinations_with_replacement(l, n))\n\n"}
{"task_id": "MBPP/256", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(n):\n        if is_prime(i):\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/257", "completion": "\n    return b, a\n\n"}
{"task_id": "MBPP/258", "completion": "\n    return len(list(filter(lambda x: x % 2 != 0, array_nums)))\n"}
{"task_id": "MBPP/259", "completion": "\n    return (max(test_tup1), max(test_tup2))\n"}
{"task_id": "MBPP/260", "completion": "\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        primes = [2, 3]\n        for i in range(4, n + 1):\n            if all(i % p != 0 for p in primes):\n                primes.append(i)\n        return primes[n - 1]\n\n"}
{"task_id": "MBPP/261", "completion": "\n    try:\n        return tuple(el1 / el2 for el1, el2 in zip(test_tup1, test_tup2))\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n"}
{"task_id": "MBPP/262", "completion": "\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]\n"}
{"task_id": "MBPP/263", "completion": "\n    return {**d1, **d2}\n\n"}
{"task_id": "MBPP/264", "completion": "\n    if h_age <= 0:\n        return \"Age must be greater than 0\"\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 24\n    else:\n        return 24 + (h_age - 2) * 4\n"}
{"task_id": "MBPP/265", "completion": "\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"}
{"task_id": "MBPP/266", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/267", "completion": "\n    return n * (n + 1) * (2 * n + 1) // 6\n\n"}
{"task_id": "MBPP/268", "completion": "\n    if n < 1:\n        return None\n    i = 1\n    while True:\n        if i % 5 == 0:\n            n -= 1\n        if n == 0:\n            return i\n        i += 1\n\n"}
{"task_id": "MBPP/269", "completion": "\n    return ord(k)\n\n"}
{"task_id": "MBPP/270", "completion": "\n    sum_even = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n\n"}
{"task_id": "MBPP/271", "completion": "\n    sum_of_powers = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers\n"}
{"task_id": "MBPP/272", "completion": "\n    if not test_list:\n        return None\n    return test_list[-1]\n"}
{"task_id": "MBPP/273", "completion": "\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"}
{"task_id": "MBPP/274", "completion": "\n    sum_even_coeff = 0\n    for i in range(0, n+1, 2):\n        sum_even_coeff += math.comb(n, i)\n    return sum_even_coeff\n"}
{"task_id": "MBPP/275", "completion": "\n    return (a[n % m] if m > 0 else 0)\n"}
{"task_id": "MBPP/276", "completion": "\n    import math\n    return math.pi * r**2 * h\n"}
{"task_id": "MBPP/277", "completion": "\n    return {k: v for k, v in dict.items() if v >= n}\n\n"}
{"task_id": "MBPP/278", "completion": "\n    count = 0\n    for i in test_tup:\n        if isinstance(i, tuple):\n            count += i[0]\n        else:\n            count += i\n    return count\n"}
{"task_id": "MBPP/279", "completion": "\n    return n + (n-1) + (n-2) + ... + 3 + 2 + 1\n"}
{"task_id": "MBPP/280", "completion": "\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n"}
{"task_id": "MBPP/281", "completion": "\n    return len(test_list) == len(set(test_list))\n\n"}
{"task_id": "MBPP/282", "completion": "\n    return list(map(lambda x, y: x - y, nums1, nums2))\n\n"}
{"task_id": "MBPP/283", "completion": "\n    str_n = str(n)\n    for i in range(10):\n        if str_n.count(str(i)) > i:\n            return False\n    return True\n\n"}
{"task_id": "MBPP/284", "completion": "\n    return all(item == element for item in list)\n\n"}
{"task_id": "MBPP/285", "completion": "\n    pattern = r\"a.*b[b]{2,3}\"\n    if re.search(pattern, text):\n        return True\n    return False\n"}
{"task_id": "MBPP/286", "completion": "\n    # Create a hash map to store the frequency of each element\n    freq = {}\n    for i in range(n):\n        if a[i] in freq:\n            freq[a[i]] += 1\n        else:\n            freq[a[i]] = 1\n\n    # If the frequency of any element is less than k, return -1\n    for key in freq:\n        if freq[key] < k:\n            return -1\n\n    # Create a hash map to store the frequency of each subarray\n    sub_freq = {}\n    for i in range(n):\n        sub_arr = []\n        for j in range(i, n, k):\n            for l in range(j, j + k):\n                sub_arr.append(a[l])\n            sub_str = tuple(sorted(sub_arr))\n            if sub_str in sub_freq:\n                sub_freq[sub_str] += 1\n            else:\n                sub_freq[sub_str] = 1\n\n    # Return the maximum frequency of any subarray\n    return max(sub_freq.values())\n\n"}
{"task_id": "MBPP/287", "completion": "\n    sum_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_squares += i**2\n    return sum_squares\n"}
{"task_id": "MBPP/288", "completion": "\n    count = 0\n    for i in range(N):\n        if (arr[i] * arr[i]) % P == 1:\n            count += 1\n    return count\n\n"}
{"task_id": "MBPP/289", "completion": "\n    if N % 4 == 0:\n        if N % 100 == 0:\n            if N % 400 == 0:\n                return 1\n            else:\n                return 0\n        else:\n            return 1\n    else:\n        return 0\n"}
{"task_id": "MBPP/290", "completion": "\n    max_length_list = max(list1, key=len)\n    return max_length_list\n\n"}
{"task_id": "MBPP/291", "completion": "\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = k\n    dp[1] = k * k\n\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n\n    return dp[n]\n\n"}
{"task_id": "MBPP/292", "completion": "\n    try:\n        return n / m\n    except ZeroDivisionError:\n        return \"Error: Division by zero is not allowed.\"\n"}
{"task_id": "MBPP/293", "completion": "\n    return math.sqrt(w**2 + h**2)\n"}
{"task_id": "MBPP/294", "completion": "\n    return max(listval)\n"}
{"task_id": "MBPP/295", "completion": "\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n\n"}
{"task_id": "MBPP/296", "completion": "\n    inv_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"}
{"task_id": "MBPP/297", "completion": "\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/298", "completion": "\n    result = []\n    for i in l1:\n        if i in l2:\n            result.append(i)\n    return result\n"}
{"task_id": "MBPP/299", "completion": "\n    # Create a defaultdict to store the aggregate for each student\n    student_aggregates = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for student, marks in stdata:\n        # Calculate the aggregate\n        aggregate = sum(marks) / len(marks)\n        # Store the aggregate\n        student_aggregates[student] = aggregate\n\n    # Find the student with the maximum aggregate\n    max_aggregate_student = max(student_aggregates, key=student_aggregates.get)\n\n    return max_aggregate_student\n"}
{"task_id": "MBPP/300", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return 2 * count_binary_seq(n - 1)\n\n"}
{"task_id": "MBPP/301", "completion": "\n    if isinstance(d, dict):\n        return 1 + (max(d.values(), key=dict_depth) if d else 0)\n    return 0\n\n"}
{"task_id": "MBPP/302", "completion": "\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return set_Bit_Number(n & (n - 1))\n\n"}
{"task_id": "MBPP/303", "completion": "\n    # count the number of inversions\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    # if count of inversions is even, return True, else return False\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/304", "completion": "\n    n = len(arr)\n    rotations %= n\n    index += rotations\n    index %= n\n    return arr[index]\n\n"}
{"task_id": "MBPP/305", "completion": "\n    return [word for word in words if word.startswith('p')]\n"}
{"task_id": "MBPP/306", "completion": "\n    if n == 0 or k == 0:\n        return 0\n\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i]:\n                dp[i] = dp[j] + a[i]\n\n    max_sum = -1\n    for i in range(n):\n        if dp[i] >= a[i] and (i == n - 1 or dp[i + 1] < a[i]):\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n"}
{"task_id": "MBPP/307", "completion": "\n    return tuplex[:m] + tuplex[m:n] + tuplex[n:]\n"}
{"task_id": "MBPP/308", "completion": "\n    if not nums1 or not nums2:\n        return None\n\n    nums1.sort()\n    nums2.sort()\n\n    if len(nums1) > N or len(nums2) > N:\n        return None\n\n    product1 = nums1[0] * nums1[1] * nums1[2] if len(nums1) > 3 else nums1[0] * nums1[1]\n    product2 = nums2[0] * nums2[1] * nums2[2] if len(nums2) > 3 else nums2[0] * nums2[1]\n\n    return max(product1, product2)\n\n"}
{"task_id": "MBPP/309", "completion": "\n    if a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/310", "completion": "\n    return tuple(str1)\n\n"}
{"task_id": "MBPP/311", "completion": "\n    if n & (n + 1) == 0:\n        return n + 1\n    else:\n        return n\n\n"}
{"task_id": "MBPP/312", "completion": "\n    return (1/3) * math.pi * r**2 * h\n"}
{"task_id": "MBPP/313", "completion": "\n    for i in list1:\n        if i > 0:\n            print(i)\n"}
{"task_id": "MBPP/314", "completion": "\n    if not grid or not grid[0]:\n        return 0\n\n    m, n = len(grid), len(grid[0])\n    prefix_sum = [[0] * (n + 1) for _ in range(m + 1)]\n    max_sum = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            prefix_sum[i + 1][j + 1] = prefix_sum[i + 1][j] + prefix_sum[i][j + 1] - prefix_sum[i][j] + grid[i][j]\n\n    for l in range(1, n + 1):\n        for i in range(l, n + 1):\n            j = i - l + 1\n            max_sum[i - 1][j - 1] = max(max_sum[i - 1][j - 2] if j > 1 else 0, max_sum[i - 2][j - 1]) + prefix_sum[i][j]\n\n    return max_sum[-1][-1]\n\n"}
{"task_id": "MBPP/315", "completion": "\n    words = str.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len) if even_words else None\n\n"}
{"task_id": "MBPP/316", "completion": "\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] == x:\n            return i\n    return -1\n"}
{"task_id": "MBPP/317", "completion": "\n    return [(k, len(list(v))) for k, v in groupby(alist)]\n"}
{"task_id": "MBPP/318", "completion": "\n    s.sort()\n    return max(s[0]*s[1]*s[2], s[0]*s[1]*s[3], s[0]*s[2]*s[3], s[1]*s[2]*s[3])\n"}
{"task_id": "MBPP/319", "completion": "\n    return re.findall(r'\\b\\w{5}\\b', text)\n\n\ntext = \"Hello, this is a test. Testing, testing123, and testing12345.\""}
{"task_id": "MBPP/320", "completion": "\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    sum_of_numbers = n * (n + 1) // 2\n    return sum_of_squares - sum_of_numbers**2\n\n"}
{"task_id": "MBPP/321", "completion": "\n    if s < 0:\n        return None\n    demlo_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 1"}
{"task_id": "MBPP/322", "completion": "\n    min_val = min(list1)\n    return [i for i, x in enumerate(list1) if x == min_val]\n\n"}
{"task_id": "MBPP/323", "completion": "\n    temp = arr[out_of_place]\n    while cur != out_of_place:\n        arr[cur] = arr[out_of_place]\n        arr[out_of_place] = temp\n        cur = out_of_place\n        out_of_place = cur + n\n        if out_of_place >= len(arr):\n            out_of_place = out_of_place - len(arr)\n        temp = arr[out_of_place]\n    return arr\n\n"}
{"task_id": "MBPP/324", "completion": "\n    return sum(test_tuple[i] for i in range(0, len(test_tuple), 2))\n\n"}
{"task_id": "MBPP/325", "completion": "\n    dp = [0] + [float('inf')] * n\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1] + 1)\n        for j in range(i - 1, -1, -1):\n            dp[i] = min(dp[i], dp[i - j] * (j + 1))\n    return dp[n]\n\n"}
{"task_id": "MBPP/326", "completion": "\n    word_counts = defaultdict(int)\n    for word in test_list:\n        word_counts[word] += 1\n\n    return max(word_counts, key=word_counts.get)\n"}
{"task_id": "MBPP/327", "completion": "\n    if x == y or y == z or z == x:\n        return \"The triangle is isosceles.\"\n    else:\n        return \"The triangle is not isosceles.\"\n"}
{"task_id": "MBPP/328", "completion": "\n    m = m % len(list1)\n    return list1[m:] + list1[:m]\n\n"}
{"task_id": "MBPP/329", "completion": "\n    return list.count(-1)\n"}
{"task_id": "MBPP/330", "completion": "\n    pattern = re.compile(r'\\b\\w{3,5}\\b')\n    return pattern.findall(text)\n\ntext = \"Hello, my name is John Doe and I live in New York.\""}
{"task_id": "MBPP/331", "completion": "\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n"}
{"task_id": "MBPP/332", "completion": "\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n"}
{"task_id": "MBPP/333", "completion": "\n    for i in range(len(sub_li)):\n        for j in range(i + 1, len(sub_li)):\n            if sub_li[i] > sub_li[j]:\n                sub_li[i], sub_li[j] = sub_li[j], sub_li[i]\n    return sub_li\n\n"}
{"task_id": "MBPP/334", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/335", "completion": "\n    return n/2 * (2*a + (n-1)*d)\n"}
{"task_id": "MBPP/336", "completion": "\n    if monthname1 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return 31\n    elif monthname1 in ['April', 'June', 'September', 'November']:\n        return 30\n    elif monthname1 == 'February':\n        return 28\n    else:\n        return \"Invalid month name\"\n"}
{"task_id": "MBPP/337", "completion": "\n    return re.compile(r'(\\b\\w+\\b)$')\n"}
{"task_id": "MBPP/338", "completion": "\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j-1]:\n                count += 1\n    return count\n"}
{"task_id": "MBPP/339", "completion": "\n    for i in range(x, 0, -1):\n        if x % i == 0 and y % i == 0:\n            return i\n\n"}
{"task_id": "MBPP/340", "completion": "\n    # Filter out non-positive numbers\n    lst = [n for n in lst if n > 0]\n\n    # Sort the list in ascending order\n    lst.sort()\n\n    # Return the sum of the first three numbers\n    return sum(lst[:3])\n\n"}
{"task_id": "MBPP/341", "completion": "\n    return tuple(sorted(s))\n\n"}
{"task_id": "MBPP/342", "completion": "\n    min_heap = []\n    for i, nums in enumerate(list):\n        min_heap.append(Node(nums[0], i, 0))\n        heapq.heapify(min_heap)\n\n    min_range = float('inf')\n    max_val = float('-inf')\n\n    while min_heap:\n        node = heapq.heappop(min_heap)\n        max_val = max(max_val, node.value)\n        min_range = min(min_range, max_val - node.value)\n\n        if node.index + 1 < len(list[node.list_num]):\n            next_node = Node(list[node.list_num][node.index + 1], node.list_num, node.index + 1)\n            heapq.heappush(min_heap, next_node)\n\n    return min_range\n\n"}
{"task_id": "MBPP/343", "completion": "\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters\n\n"}
{"task_id": "MBPP/344", "completion": "\n    count = 0\n    for i in range(n, m + 1):\n        if i % 2 != 0:\n            count += bin(i).count('1')\n    return count\n"}
{"task_id": "MBPP/345", "completion": "\n    return [nums[i+1]-nums[i] for i in range(len(nums)-1)]\n"}
{"task_id": "MBPP/346", "completion": "\n    if n == 1:\n        return 0\n    else:\n        return (k - 1) * 2\n\n"}
{"task_id": "MBPP/347", "completion": "\n    return m * n\n\n"}
{"task_id": "MBPP/348", "completion": "\n    if r == 0:\n        return 1\n    if n == 0:\n        return 0\n    if dp[n][r] != -1:\n        return dp[n][r]\n    dp[n][r] = bin_coff(n-1, r) + bin_coff(n-1, r-1)\n    return dp[n][r]\n\n"}
{"task_id": "MBPP/349", "completion": "\n    if isinstance(string, str):\n        return True\n    return False\n\n"}
{"task_id": "MBPP/350", "completion": "\n    stack = []\n    for c in s:\n        if stack and stack[-1] == c:\n            stack.pop()\n        else:\n            stack.append(c)\n    return ''.join(stack)\n\n"}
{"task_id": "MBPP/351", "completion": "\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    for i in range(n):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return -1\n"}
{"task_id": "MBPP/352", "completion": "\n    return len(str) == len(set(str))\n"}
{"task_id": "MBPP/353", "completion": "\n    if n < 0 or n >= len(list1):\n        raise IndexError(\"Index out of range\")\n\n    list1[n] = []\n    return list1\n\n"}
{"task_id": "MBPP/354", "completion": "\n    if n == 1:\n        return a\n    else:\n        return a + (n - 1) * d\n"}
{"task_id": "MBPP/355", "completion": "\n    import math\n    # The formula for the area of a circle is \u03c0r^2\n    # So, the number of rectangles is 2*\u03c0*r\n    return 2 * math.pi * radius\n"}
{"task_id": "MBPP/356", "completion": "\n    c = 180 - (a + b)\n    return c\n"}
{"task_id": "MBPP/357", "completion": "\n    return max(test_list)\n"}
{"task_id": "MBPP/358", "completion": "\n    return list(map(lambda x, y: [x[i] % y[i] for i in range(len(x))], nums1, nums2))\n\n"}
{"task_id": "MBPP/359", "completion": "\n    if a == 0:\n        return \"a cannot be zero\"\n    else:\n        d = b**2 - 4*a*c\n        if d < 0:\n            return \"No real roots\"\n        elif d == 0:\n            return \"One real root: \" + str(-b / (2 * a))\n        else:\n            return \"Two real roots: \" + str((-b - d**0.5) / (2 * a)) + \" and \" + str((-b + d**0.5) / (2 * a))\n"}
{"task_id": "MBPP/360", "completion": "\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n    if n == 6:\n        return 32\n    if n == 7:\n        return 64\n    if n == 8:\n        return 128\n    if n == 9:\n        return 256\n    if n == 10:\n        return 512\n    if n == 11:\n        return 1024\n    if n == 12:\n        return 2048\n    if n == 13:\n        return 4096\n    if n == 14:\n        return 8192\n    if n == 15:\n        return 16384\n    if n == 16:\n        return 32768\n    if n == 17:\n        return 65536\n    if n == 18:\n        return 131072\n    if n == 19:\n        return 262144\n    if n == 20:\n        return 524288\n    if n == 21:\n        return 1048576\n    if n == 22:\n        return 2097152\n    if n == 23:\n        return 4194304\n    if n == 24:\n        return 8388608\n    if n == 25:\n        return 16777216\n    if n == 26:\n        return 33554432\n    if n == 27:\n        return 67108864\n    if n == 28:\n        return 134217728\n    if n == 29:\n        return 268435456\n    if n == 30:\n        return 536870912\n    if n"}
{"task_id": "MBPP/361", "completion": "\n    return [i for i in list1 if i]\n\n"}
{"task_id": "MBPP/362", "completion": "\n    from collections import Counter\n    count = Counter(nums)\n    return max(count.values())\n"}
{"task_id": "MBPP/363", "completion": "\n    return [tuple(i + K for i in test_list[i]) for i in range(len(test_list))]\n\n\ntest_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nK = 1"}
{"task_id": "MBPP/364", "completion": "\n    flips = 0\n    for i in range(len(ch) - 1):\n        if ch[i] == ch[i + 1]:\n            flips += 1\n    return flips\n\n"}
{"task_id": "MBPP/365", "completion": "\n    return len(str(n))\n"}
{"task_id": "MBPP/366", "completion": "\n    if len(list_nums) < 2:\n        return None\n\n    max_product = list_nums[0] * list_nums[1]\n    for i in range(1, len(list_nums) - 1):\n        current_product = list_nums[i] * list_nums[i + 1]\n        max_product = max(max_product, current_product)\n\n    return max_product\n\n"}
{"task_id": "MBPP/367", "completion": "\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)\n\n"}
{"task_id": "MBPP/368", "completion": "\n    return [test_tup] * N\n\n"}
{"task_id": "MBPP/369", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/370", "completion": "\n    return sorted(price, key=lambda x: x[1])\n\n"}
{"task_id": "MBPP/371", "completion": "\n    if A[0] != left_element:\n        return left_element\n    elif A[-1] != right_element:\n        return right_element\n\n    for i in range(len(A) - 1):\n        if A[i+1] - A[i] > 1:\n            return A[i] + 1\n\n    return -1\n"}
{"task_id": "MBPP/372", "completion": "\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]\n"}
{"task_id": "MBPP/373", "completion": "\n    return l * w * h\n\n"}
{"task_id": "MBPP/374", "completion": "\n    if len(str) == 0:\n        return ['']\n    if len(str) == 1:\n        return [str]\n\n    perms = []\n    for i in range(len(str)):\n        char = str[i]\n        remaining = str[:i] + str[i+1:]\n        for p in permute_string(remaining):\n            perms.append(char + p)\n    return perms\n\n"}
{"task_id": "MBPP/375", "completion": "\n    return round(n / m) * m\n"}
{"task_id": "MBPP/376", "completion": "\n    seen = set()\n    result = []\n    for item in test_tup:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return tuple(result)\n\n"}
{"task_id": "MBPP/377", "completion": "\n    return s.replace(c, '')\n"}
{"task_id": "MBPP/378", "completion": "\n    if len(test_list) > 1:\n        return test_list[1:] + [test_list[0]]\n    return test_list\n\n"}
{"task_id": "MBPP/379", "completion": "\n    return 2 * (l*w + w*h + h*l)\n"}
{"task_id": "MBPP/380", "completion": "\n    return [[0 for _ in range(colnum)] for _ in range(rownum)]\n\n"}
{"task_id": "MBPP/381", "completion": "\n    return sorted(list_data, key=itemgetter(index_no))\n"}
{"task_id": "MBPP/382", "completion": "\n\n        Check if array A[low..mid] and A[mid+1..high] are rotated.\n        \"\"\"\n        if A[low] < A[mid]:\n            return A[low] < A[high]\n        return A[mid] < A[high]\n\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if is_rotated(A, mid, low, high):\n            return mid\n        if A[low] <= A[mid]:\n            if A[low] <= A[high]:\n                high = mid - 1\n            else:\n                low = mid + 1\n        else:\n            if A[mid] <= A[high]:\n                high = mid - 1\n            else:\n                low = mid + 1\n\n    return -1\n"}
{"task_id": "MBPP/383", "completion": "\n    return n ^ 0x55555555\n\n"}
{"task_id": "MBPP/384", "completion": "\n    return arr.count(min(arr))\n"}
{"task_id": "MBPP/385", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return n + get_perrin(n - 1)\n\n"}
{"task_id": "MBPP/386", "completion": "\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                stack.append(i)\n    return len(stack)\n\n"}
{"task_id": "MBPP/387", "completion": "\n    # Convert the hexadecimal number to decimal\n    decimal_num = int(N, 16)\n\n    # Check if the number is even or odd\n    if decimal_num % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"}
{"task_id": "MBPP/388", "completion": "\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return power - 1\n\n"}
{"task_id": "MBPP/389", "completion": "\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n\n    lucas_numbers = [2, 1]\n\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[i - 1] + lucas_numbers[i - 2])\n\n    return lucas_numbers[n]\n\n"}
{"task_id": "MBPP/390", "completion": "\n    return [string + item for item in list]\n"}
{"task_id": "MBPP/391", "completion": "\n    result = []\n    for d1, d2, d3 in zip(l1, l2, l3):\n        result.append({**d1, **d2, **d3})\n    return result\n"}
{"task_id": "MBPP/392", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return max(n + get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n"}
{"task_id": "MBPP/393", "completion": "\n    return max(input_list, key=lambda x: len(x))\n"}
{"task_id": "MBPP/394", "completion": "\n    return len(test_tup) == len(set(test_tup))\n"}
{"task_id": "MBPP/395", "completion": "\n    count_dict = {}\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    for char in str1:\n        if count_dict[char] == 1:\n            return char\n\n    return None\n\n"}
{"task_id": "MBPP/396", "completion": "\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/397", "completion": "\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n"}
{"task_id": "MBPP/398", "completion": "\n    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n"}
{"task_id": "MBPP/399", "completion": "\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/400", "completion": "\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    return freq_dict\n"}
{"task_id": "MBPP/401", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of same length\")\n\n    result = ()\n    for t1, t2 in zip(test_tup1, test_tup2):\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result += (add_nested_tuples(t1, t2),)\n        else:\n            result += (t1 + t2,)\n    return result\n\n"}
{"task_id": "MBPP/402", "completion": "\n    if r > n:\n        return 0\n    if r > p - r:\n        return 0\n    numerator = 1\n    for i in range(r):\n        numerator = (numerator * (n - i)) % p\n        denominator = (denominator * (i + 1)) % p\n    return numerator * pow(denominator, p - 2, p)\n\n"}
{"task_id": "MBPP/403", "completion": "\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, str) is not None\n"}
{"task_id": "MBPP/404", "completion": "\n    if a < b:\n        return a\n    else:\n        return b\n"}
{"task_id": "MBPP/405", "completion": "\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"}
{"task_id": "MBPP/406", "completion": "\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"}
{"task_id": "MBPP/407", "completion": "\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Find the first pair of digits that are in descending order\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i+1]:\n        i -= 1\n    # If no such pair is found, the number is already the largest\n    if i == -1:\n        return n\n    # Find the second digit in the pair that is larger than the first\n    j = i + 1\n    while j < len(digits) and digits[j] > digits[i]:\n        j += 1\n    # Swap the first and second digits\n    digits[i], digits[j-1] = digits[j-1], digits[i]\n    # Rearrange the digits in descending order\n    digits[i+1:] = sorted(digits[i+1:], reverse=True)\n    # Return the number as an integer\n    return int(''.join(map(str, digits)))\n\n"}
{"task_id": "MBPP/408", "completion": "\n    if not nums1 or not nums2:\n        return []\n\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(pairs) < k:\n                heapq.heappush(pairs, (num1 + num2, (num1, num2)))\n            else:\n                if num1 + num2 < pairs[0][0]:\n                    heapq.heapreplace(pairs, (num1 + num2, (num1, num2)))\n\n    return [pair[1] for pair in pairs]\n"}
{"task_id": "MBPP/409", "completion": "\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n"}
{"task_id": "MBPP/410", "completion": "\n    return min(listval)\n"}
{"task_id": "MBPP/411", "completion": "\n    return re.sub(r\"_([a-zA-Z])\", lambda m: m.group(1).upper(), word)\n"}
{"task_id": "MBPP/412", "completion": "\n    return [x for x in l if x % 2 == 0]\n"}
{"task_id": "MBPP/413", "completion": "\n    if n > len(list1):\n        return \"Index out of range\"\n    else:\n        return list1[n-1]\n"}
{"task_id": "MBPP/414", "completion": "\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/415", "completion": "\n    if len(arr) < 2:\n        return None\n\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_so_far = max_product\n    min_so_far = min_product\n\n    for i in range(2, len(arr)):\n        if arr[i] < 0:\n            max_product = max(min_product * arr[i], arr[i])\n            min_product = min(max_so_far * arr[i], arr[i])\n        else:\n            max_product = max(max_so_far * arr[i], arr[i])\n            min_product = min(min_so_far * arr[i], arr[i])\n\n        max_so_far = max(max_so_far, max_product)\n        min_so_far = min(min_so_far, min_product)\n\n    return max_so_far\n\n"}
{"task_id": "MBPP/416", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(n, breakSum(n-1), breakSum(n-2)+1)\n"}
{"task_id": "MBPP/417", "completion": "\n    common_first_element = []\n    for tup in Input:\n        common_first_element.append(tup[0])\n    return common_first_element\n"}
{"task_id": "MBPP/418", "completion": "\n    max_length = -1\n    max_sublist = None\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n                max_sublist = sublist\n    return max_sublist\n\n"}
{"task_id": "MBPP/419", "completion": "\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))\n\n"}
{"task_id": "MBPP/420", "completion": "\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n    return sum\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/421", "completion": "\n    return ''.join(test_tup)\n"}
{"task_id": "MBPP/422", "completion": "\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n\nn = int(input(\"Enter the number of terms: \"))"}
{"task_id": "MBPP/423", "completion": "\n    if m == 0 or n == 0:\n        return 0\n\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if i == m-1 and j == n-1:\n                dp[i][j] = gold[i][j]\n            else:\n                right = dp[i][j+1] if j+1 < n else 0\n                down = dp[i+1][j] if i+1 < m else 0\n                dp[i][j] = max(right, down) + gold[i][j]\n\n    return dp[0][0]\n\n"}
{"task_id": "MBPP/424", "completion": "\n    return [i[-1] for i in test_tuple]\n"}
{"task_id": "MBPP/425", "completion": "\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/426", "completion": "\n    return list(filter(lambda x: x % 2 != 0, nums))\n\n"}
{"task_id": "MBPP/427", "completion": "\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        return match.group(1) + '-' + match.group(2) + '-' + match.group(3)\n    else:\n        return \"Invalid date format\"\n"}
{"task_id": "MBPP/428", "completion": "\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n\n        for i in range(gap, n):\n\n            temp = my_list[i]\n\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n"}
{"task_id": "MBPP/429", "completion": "\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n"}
{"task_id": "MBPP/430", "completion": "\n    # calculate the discriminant\n    D = b**2 - 3*a*c\n\n    # check if the discriminant is positive\n    if D >= 0:\n        x1 = (-b - D**0.5) / (2*a)\n        x2 = (-b + D**0.5) / (2*a)\n        return x1, x2\n    else:\n        return \"The parabola has no real directrix.\"\n"}
{"task_id": "MBPP/431", "completion": "\n    return len(set(list1) & set(list2)) > 0\n"}
{"task_id": "MBPP/432", "completion": "\n    return (base1 + base2) / 2 * height\n\n"}
{"task_id": "MBPP/433", "completion": "\n    for i in arr:\n        if i > number:\n            return True\n    return False\n\n"}
{"task_id": "MBPP/434", "completion": "\n    pattern = re.compile(r'a+b')\n    if pattern.search(text):\n        return True\n    return False\n"}
{"task_id": "MBPP/435", "completion": "\n    return n % 10\n"}
{"task_id": "MBPP/436", "completion": "\n    for i in list1:\n        if i < 0:\n            print(i)\n"}
{"task_id": "MBPP/437", "completion": "\n    return ''.join(ch for ch in str1 if ch % 2 == 0)\n\n"}
{"task_id": "MBPP/438", "completion": "\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n\n"}
{"task_id": "MBPP/439", "completion": "\n    return int(''.join(map(str, L)))\n\n"}
{"task_id": "MBPP/440", "completion": "\n    pattern = re.compile(r'\\badv\\b')\n    words = pattern.findall(text)\n    positions = [m.start() for m in re.finditer(r'\\badv\\b', text)]\n    return positions\n\ntext = \"I am very happy. I love to play football.\""}
{"task_id": "MBPP/441", "completion": "\n    return 6 * l ** 2\n\n"}
{"task_id": "MBPP/442", "completion": "\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n"}
{"task_id": "MBPP/443", "completion": "\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n"}
{"task_id": "MBPP/444", "completion": "\n    return [t[:K] for t in test_list]\n\n"}
{"task_id": "MBPP/445", "completion": "\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of equal length\"\n\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n\n    return result\n\n"}
{"task_id": "MBPP/446", "completion": "\n    count_dict = Counter(tup)\n    result = {i: count_dict[i] for i in lst if i in count_dict}\n    return result\n"}
{"task_id": "MBPP/447", "completion": "\n    return [lambda x: x**3](nums)\n\nnums = [1, 2, 3, 4, 5]"}
{"task_id": "MBPP/448", "completion": "\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n"}
{"task_id": "MBPP/449", "completion": "\n    # Calculate the distance between two points\n    def distance(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n\n    # Check if the triangle is valid\n    def is_valid(x1, y1, x2, y2, x3, y3):\n        # Calculate the area of the triangle\n        area = 0.5 * (-x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))\n        return abs(area) > 0\n\n    # Check if the triangle is valid\n    if not is_valid(x1, y1, x2, y2, x3, y3):\n        return False\n\n    # Check if the triangle is valid\n    if distance(x1, y1, x2, y2) == distance(x1, y1, x3, y3) + distance(x2, y2, x3, y3):\n        return True\n\n    if distance(x1, y1, x2, y2) == distance(x2, y2, x3, y3) + distance(x1, y1, x3, y3):\n        return True\n\n    if distance(x1, y1, x2, y2) == distance(x1, y1, x3, y3) + distance(x2, y2, x3, y3):\n        return True\n\n    return False\n\n"}
{"task_id": "MBPP/450", "completion": "\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"}
{"task_id": "MBPP/451", "completion": "\n    return re.sub(r'\\s', '', text1)\n\n"}
{"task_id": "MBPP/452", "completion": "\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None\n"}
{"task_id": "MBPP/453", "completion": "\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                sum = sum + i\n            else:\n                sum = sum + (i + n//i)\n    return sum\n"}
{"task_id": "MBPP/454", "completion": "\n    return re.findall(r'\\b\\w*z\\w*\\b', text)\n"}
{"task_id": "MBPP/455", "completion": "\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n"}
{"task_id": "MBPP/456", "completion": "\n    return [s[::-1] for s in stringlist]\n"}
{"task_id": "MBPP/457", "completion": "\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"}
{"task_id": "MBPP/458", "completion": "\n    return l * b\n\n"}
{"task_id": "MBPP/459", "completion": "\n    return re.sub('[A-Z]', '', str1)\n"}
{"task_id": "MBPP/460", "completion": "\n    return [lst[i][0] for i in range(len(lst))]\n\n"}
{"task_id": "MBPP/461", "completion": "\n    return sum(1 for c in str if c.isupper())\n\n"}
{"task_id": "MBPP/462", "completion": "\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            m = list1[i]\n            remaining = list1[:i] + list1[i+1:]\n            for c in combinations_list(remaining):\n                result.append([m] + c)\n        return result\n"}
{"task_id": "MBPP/463", "completion": "\n    if not arr:\n        return None\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n\n    return max_product\n\n"}
{"task_id": "MBPP/464", "completion": "\n    values = dict.values()\n    return len(set(values)) == 1\n\n"}
{"task_id": "MBPP/465", "completion": "\n    return {k: v for k, v in dict1.items() if v}\n\n"}
{"task_id": "MBPP/466", "completion": "\n    mid = (low + high) // 2\n\n    # If mid is the last element, then it is the peak element\n    if mid == n - 1 and arr[mid] > arr[mid + 1]:\n        return mid\n\n    # If mid is the first element, then it is the peak element\n    if mid == 0 and arr[mid] > arr[mid + 1]:\n        return mid\n\n    # If mid is not the first and last element, then check if it is the peak element\n    if arr[mid] > arr[mid + 1] and arr[mid] > arr[mid - 1]:\n        return mid\n\n    # If mid is the last element and the element before it is greater than the element after it, then it is the peak element\n    if arr[mid] < arr[mid + 1] and arr[mid] > arr[mid - 1]:\n        return find_peak_util(arr, low, mid - 1, n)\n\n    # If mid is the first element and the element after it is greater than the element before it, then it is the peak element\n    if arr[mid] < arr[mid + 1] and arr[mid] > arr[mid - 1]:\n        return find_peak_util(arr, mid + 1, high, n)\n\n    # If the element before mid is greater than the element after mid, then the peak element is in the left half\n    if arr[mid - 1] > arr[mid + 1]:\n        return find_peak_util(arr, low, mid - 1, n)\n\n    # If the element after mid is greater than the element before mid, then the peak element is in the right half\n    if arr[mid + 1] > arr[mid - 1]:\n        return find_peak_util(arr, mid + 1, high, n)\n\n    return -1\n\n"}
{"task_id": "MBPP/467", "completion": "\n    if deciNum == 0:\n        return '0'\n\n    octalNum = \"\"\n    while deciNum != 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n\n    return octalNum\n\n"}
{"task_id": "MBPP/468", "completion": "\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            product = 1\n            for k in sub_arr:\n                product *= k\n            max_product = max(max_product, product)\n    return max_product\n"}
{"task_id": "MBPP/469", "completion": "\n    n = len(price)\n    if n == 0:\n        return 0\n\n    # Initialize the dp table\n    dp = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    # Initialize the dp table for base case\n    for i in range(n):\n        dp[0][i] = 0\n\n    for i in range(1, k+1):\n        max_so_far = dp[i][0] - price[0]\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], max_so_far + price[j])\n            max_so_far = max(max_so_far, dp[i-1][j] - price[j])\n\n    return dp[k][n-1]\n"}
{"task_id": "MBPP/470", "completion": "\n    return tuple(a + b for a, b in test_tup)\n"}
{"task_id": "MBPP/471", "completion": "\n    remainder_arr = []\n    for i in range(lens):\n        remainder_arr.append(arr[i] % n)\n    return remainder_arr\n\n"}
{"task_id": "MBPP/472", "completion": "\n    if len(l) == 0:\n        return False\n    else:\n        return all(x - y == -1 for x, y in zip(l, l[1:]))\n"}
{"task_id": "MBPP/473", "completion": "\n    return tuple(set(test_list1) & set(test_list2))\n\n"}
{"task_id": "MBPP/474", "completion": "\n    return str1.replace(ch, newch)\n\n"}
{"task_id": "MBPP/475", "completion": "\n    return dict(sorted(dict1.items()))\n"}
{"task_id": "MBPP/476", "completion": "\n    return sum(sorted(nums)[:2])\n\n"}
{"task_id": "MBPP/477", "completion": "\n    return string.lower()\n\n"}
{"task_id": "MBPP/478", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/479", "completion": "\n    while n >= 10:\n        n = n // 10\n    return n\n\n"}
{"task_id": "MBPP/480", "completion": "\n    str1 = str1.lower()\n    count = [0]*256\n    max_count = 0\n    res = ''\n\n    for i in str1:\n        count[ord(i)] += 1\n\n    for i in str1:\n        if (count[ord(i)] > max_count):\n            max_count = count[ord(i)]\n            res = i\n\n    return res\n"}
{"task_id": "MBPP/481", "completion": "\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    if set[n-1] > sum:\n        return is_subset_sum(set, n-1, sum)\n\n    return is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])\n\n"}
{"task_id": "MBPP/482", "completion": "\n    pattern = r\"[A-Z]+[a-z]+\"\n    matches = re.findall(pattern, text)\n    return matches\n"}
{"task_id": "MBPP/483", "completion": "\n    i = 1\n    while True:\n        factorial = 1\n        for j in range(1, i + 1):\n            factorial *= j\n        if factorial % x == 0:\n            return i\n        i += 1\n\n"}
{"task_id": "MBPP/484", "completion": "\n    result = []\n    for t1 in test_list1:\n        if t1 not in test_list2:\n            result.append(t1)\n    for t2 in test_list2:\n        if t2 not in test_list1:\n            result.append(t2)\n    return result\n\n"}
{"task_id": "MBPP/485", "completion": "\n    return str(n) == str(n)[::-1]\n\n"}
{"task_id": "MBPP/486", "completion": "\n    if r > n or r < 0:\n        return 0\n    else:\n        return fact(n) / (fact(r) * fact(n - r))\n"}
{"task_id": "MBPP/487", "completion": "\n    return sorted(tup, key=lambda x: x[-1])\n"}
{"task_id": "MBPP/488", "completion": "\n    return (3 * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * a**2) / 2\n"}
{"task_id": "MBPP/489", "completion": "\n    max_val = max(arr)\n    return arr.count(max_val)\n"}
{"task_id": "MBPP/490", "completion": "\n    symmetric_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                symmetric_pairs.append((test_list[i], test_list[j]))\n    return symmetric_pairs\n\n"}
{"task_id": "MBPP/491", "completion": "\n    return a * (1 - r**n) / (1 - r)\n"}
{"task_id": "MBPP/492", "completion": "\n    first = 0\n    last = len(item_list) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n"}
{"task_id": "MBPP/493", "completion": "\n    # Calculate the distance between the start and end points\n    dx = endx - startx\n    dy = endy - starty\n    distance = math.sqrt(dx**2 + dy**2)\n\n    # Calculate the number of sides\n    sides = int(distance / (2 * radius))\n\n    # Calculate the angle between each side\n    angle = math.pi / 3\n\n    # Calculate the coordinates\n    polygons = []\n    for i in range(sides + 1):\n        x = startx + dx * (1 - i / sides)\n        y = starty + dy * (1 - i / sides)\n        r = radius * (1 - i / sides)\n        x1 = x + r * math.cos(angle * i)\n        y1 = y + r * math.sin(angle * i)\n        x2 = x + r * math.cos(angle * (i + 0.5))\n        y2 = y + r * math.sin(angle * (i + 0.5))\n        polygons.append([(x, y), (x1, y1), (x2, y2)])\n\n    return polygons\n"}
{"task_id": "MBPP/494", "completion": "\n    return int(str(test_tup), 2)\n\n"}
{"task_id": "MBPP/495", "completion": "\n    return re.sub(r'[a-z]', '', str1)\n"}
{"task_id": "MBPP/496", "completion": "\n    if n > len(nums):\n        raise ValueError(\"n is larger than the list length\")\n\n    # Use heapify to convert list into a heap, O(len(nums))\n    hq.heapify(nums)\n\n    # Pop smallest n elements from heap, O(n log n)\n    smallest_nums = [hq.heappop(nums) for _ in range(n)]\n\n    return smallest_nums\n"}
{"task_id": "MBPP/497", "completion": "\n    return math.pi * r * (r + math.sqrt(r**2 + h**2))\n"}
{"task_id": "MBPP/498", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/499", "completion": "\n    return 2 * r\n\n"}
{"task_id": "MBPP/500", "completion": "\n    return ''.join(list)\n"}
{"task_id": "MBPP/501", "completion": "\n    while(y):\n        x, y = y, x % y\n    return x\n"}
{"task_id": "MBPP/502", "completion": "\n    return n % m\n\n"}
{"task_id": "MBPP/503", "completion": "\n    return [nums[i] + nums[i + 1] for i in range(len(nums) - 1)]\n\n"}
{"task_id": "MBPP/504", "completion": "\n    return sum(i**3 for i in range(1, n+1))\n\nn = int(input(\"Enter a number: \"))"}
{"task_id": "MBPP/505", "completion": "\n    # Count the number of non-zero elements.\n    count = sum(1 for a in A if a != 0)\n    # Fill the rest of the array with zeros.\n    A[:count] = [0]*count\n    return A\n"}
{"task_id": "MBPP/506", "completion": "\n    if k > n:\n        raise ValueError(\"k must be less than or equal to n\")\n    if k < 0:\n        raise ValueError(\"k must be non-negative\")\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n    return result\n\n"}
{"task_id": "MBPP/507", "completion": "\n    return [word for word in list1 if word not in removewords]\n"}
{"task_id": "MBPP/508", "completion": "\n    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True\n\n"}
{"task_id": "MBPP/509", "completion": "\n    sum_odd = 0\n    count_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_odd += i\n            count_odd += 1\n    return sum_odd / count_odd\n"}
{"task_id": "MBPP/510", "completion": "\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for l in range(n):\n        dp[l][l] = 1\n    for l in range(n):\n        for i in range(l+1, n):\n            j = l-1\n            while j >= i-l:\n                if arr[i]*arr[j] < k:\n                    dp[i][l] += dp[j][l-1]\n                j -= 1\n            dp[i][l] += dp[i-1][l]\n    return dp[n-1][n-1]\n\n"}
