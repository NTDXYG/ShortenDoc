{"task_id": "EvoEval/0", "completion": "\n    base_cost_per_item = 5.0\n    additional_charge_per_heavy_item = 10.0\n    string_item_multiplier = 1.5\n\n    total_cost = 0.0\n    has_string_item = False\n\n    for item in items:\n        if isinstance(item, str):\n            total_cost += base_cost_per_item * string_item_multiplier\n            has_string_item = True\n        else:\n            item_cost = base_cost_per_item\n            if item > 5.0:\n                item_cost += additional_charge_per_heavy_item\n            total_cost += item_cost\n\n    if has_string_item:\n        total_cost *= string_item_multiplier\n\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n\n    return f\"{total_cost:.2f}\"\n"}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        weight = 1.0 if isinstance(item, str) else item\n        base_cost = 5.0\n        if weight > 5.0:\n            base_cost += 10.0\n        total_cost += base_cost\n\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    encrypted_words = []\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n    \n    for word in words:\n        encrypted_word = []\n        for char in word.lower():\n            if char.isalpha():\n                shifted_char = chr((ord(char) - ord('a') + key) % 26 + ord('a'))\n                encrypted_word.append(shifted_char)\n            else:\n                encrypted_word.append(char)\n        encrypted_words.append(''.join(encrypted_word))\n    \n    return encrypted_words\n"}
{"task_id": "EvoEval/3", "completion": "\n    results = []\n    n = len(input_string)\n    \n    def backtrack(start: int, path: List[str]):\n        if start == n:\n            results.append(''.join(chr(int(num) + 96) for num in path))\n            return\n        \n        # Single digit case\n        if start < n:\n            backtrack(start + 1, path + [input_string[start]])\n        \n        # Two digits case\n        if start < n - 1 and int(input_string[start:start+2]) <= 26:\n            backtrack(start + 2, path + [input_string[start:start+2]])\n    \n    backtrack(0, [])\n    return results\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    \n    lit_count = 1  # The first candle is always lit\n    max_height = candles[0]\n    \n    for height in candles[1:]:\n        if height > max_height:\n            lit_count += 1\n            max_height = height\n    \n    return lit_count\n"}
{"task_id": "EvoEval/5", "completion": "\n    rows = len(matrix)\n    if rows == 0:\n        return []\n    \n    result = []\n    for i in range(rows):\n        if i % 2 == 0:\n            result.extend(matrix[i])\n        else:\n            result.extend(matrix[i][::-1])\n    \n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    rows = len(grid)\n    cols = len(grid[0])\n    x, y = position\n\n    # Check if the position is out of bounds\n    if x < 0 or x >= rows or y < 0 or y >= cols:\n        return grid\n\n    # Check if the clicked cell is already revealed or is a mine\n    if grid[x][y] == 0 or grid[x][y] == 1:\n        return grid\n\n    # If the clicked cell is unknown and empty, reveal it and its adjacent cells\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n        for i in range(max(0, x-1), min(rows, x+2)):\n            for j in range(max(0, y-1), min(cols, y+2)):\n                if grid[i][j] == -1:\n                    grid[i][j] = 0\n\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    \n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    # Split the canvas into a list of characters for easier manipulation\n    canvas_list = list(canvas)\n    \n    # Find the position of the painter 'P'\n    painter_positions = [i for i, char in enumerate(canvas_list) if char == 'P']\n    \n    # If there are no painters, return the canvas as is\n    if not painter_positions:\n        return canvas\n    \n    # If there is more than one painter or the number of painted spaces divides the empty spaces evenly, return 'Invalid canvas'\n    if len(painter_positions) != 1:\n        return 'Invalid canvas'\n    \n    painter_pos = painter_positions[0]\n    \n    # Initialize a queue for BFS and a set to keep track of visited positions\n    queue = [painter_pos]\n    visited = set(queue)\n    \n    # Directions for horizontal movement\n    directions = [-1, 1]\n    \n    # Perform BFS to paint all accessible empty spaces\n    while queue:\n        current_pos = queue.pop(0)\n        \n        # Paint the current position if it's an empty space\n        if canvas_list[current_pos] == '-':\n            canvas_list[current_pos] = '*'\n        \n        # Explore the next positions horizontally\n        for direction in directions:\n            next_pos = current_pos + direction\n            \n            # Check if the next position is within bounds and is an empty space\n            if 0 <= next_pos < len(canvas_list) and canvas_list[next_pos] == '-' and next_pos not in visited:\n                queue.append(next_pos)\n                visited.add(next_pos)\n    \n    # Join the list back into a string and return the updated canvas\n    return ''.join(canvas_list)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n\n    # Remove punctuation and convert to lowercase\n    translator = str.maketrans('', '', string.punctuation)\n    cleaned_string = string.translate(translator).lower()\n    \n    # Split the string into words\n    words = cleaned_string.split()\n    \n    # Calculate word frequencies\n    word_freq = {}\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n    \n    return word_freq\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_counts = {'C': 0, 'D': 0, 'B': 0}\n    result = []\n    total_animals = 0\n\n    for animal_sound in animal_string.split():\n        if total_animals >= 5:\n            break\n\n        animal = animal_sound[0]\n        if animal in animal_counts and animal_counts[animal] < 2:\n            sound_count = animal_sound.count('|')\n            result.append(sound_count)\n            animal_counts[animal] += 1\n            total_animals += 1\n\n    return result\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])}, and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    # Step 1: Find the element with the maximum occurrence.\n    from collections import Counter\n    flux_counter = Counter(flux_values)\n    most_common_elements = flux_counter.most_common()\n    \n    # If there are multiple elements with the same maximum occurrence, select the smallest one.\n    most_occurred_number = min(most_common_elements[0][0], most_common_elements[1][0]) if len(most_common_elements) > 1 and most_common_elements[0][1] == most_common_elements[1][1] else most_common_elements[0][0]\n    \n    # Step 2: Find the sum of all elements in the array.\n    total_sum = sum(flux_values)\n    \n    # Step 3: Multiply the sum of all elements with the most occurred number.\n    energy_signature = total_sum * most_occurred_number\n    \n    return energy_signature\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    \n    count_dict = {}\n    for elem in elems:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    rarest_count = min(count_dict.values())\n    for elem in elems:\n        if count_dict[elem] == rarest_count:\n            return elem\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_char(char, char_set):\n        index = char_set.index(char.lower())\n        next_index = (index + 1) % len(char_set)\n        return char_set[next_index]\n    \n    alias = []\n    \n    for char in name:\n        if char.lower() in vowels:\n            next_vowel = next_char(char, vowels)\n            alias.append(next_vowel.upper() if char.isupper() else next_vowel)\n        elif char.lower() in consonants:\n            next_consonant = next_char(char, consonants)\n            alias.append(next_consonant.upper() if char.isupper() else next_consonant)\n        else:\n            alias.append(char)\n    \n    return ''.join(alias)\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Extract values from the hand\n    values = [card[:-1] for card in hand]\n    \n    # Convert face cards to numerical values\n    value_map = {'A': '1', 'J': '11', 'Q': '12', 'K': '13'}\n    values = [value_map[v] if v in value_map else v for v in values]\n    \n    # Convert values to integers\n    values = list(map(int, values))\n    \n    # Count the occurrences of each value\n    from collections import Counter\n    value_counts = Counter(values)\n    \n    # Initialize score\n    score = 0\n    \n    # Calculate score based on the counts\n    for value, count in value_counts.items():\n        if count == 2:\n            score += value\n        elif count == 3:\n            score += 2 * value\n        elif count == 4:\n            score += 3 * value\n        elif count == 5:\n            score += 4 * value\n    \n    return score\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    \n    fib_sequence = [0, 1]\n    for i in range(2, n):\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    \n    return sum(fib_sequence[:n])\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n"}
{"task_id": "EvoEval/18", "completion": "\n    count = 0\n    num = 7\n    while True:\n        if num % 7 == 0 and sum(int(digit) for digit in str(num)) == 7:\n            count += 1\n            if count == n:\n                return num\n        num += 7\n"}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0])\n    danger_count = 0\n\n    for r in range(rows):\n        for c in range(cols):\n            if m[r][c] == 2:  # Vampire found\n                # Check the entire row for humans\n                for col in range(cols):\n                    if m[r][col] == 1:\n                        danger_count += 1\n                        m[r][col] = -1  # Mark as counted\n                # Check the entire column for humans\n                for row in range(rows):\n                    if m[row][c] == 1:\n                        danger_count += 1\n                        m[row][c] = -1  # Mark as counted\n\n    return danger_count\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    \n    result = []\n    for i in range(1, n + 1):\n        result.append(','.join(str(x) for x in range(1, i + 1)))\n    \n    for i in range(n, 0, -1):\n        result.append(','.join(str(x) for x in range(n, i - 1, -1)))\n    \n    return result\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(grid, word):\n        N = len(grid)\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        \n        def in_bounds(x, y):\n            return 0 <= x < N and 0 <= y < N\n        \n        def search(x, y, index):\n            if index == len(word):\n                return True\n            if not in_bounds(x, y) or grid[x][y] != word[index]:\n                return False\n            for dx, dy in directions:\n                if search(x + dx, y + dy, index + 1):\n                    return True\n            return False\n        \n        for i in range(N):\n            for j in range(N):\n                if grid[i][j] == word[0] and search(i, j, 0):\n                    return True\n        return False\n    \n    for word in words:\n        if not find_word(grid, word):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    distance_km = v * t * 365.25 * 24 * 3600  # Convert years to seconds\n    distance_ly = distance_km / 9.461e12\n    return distance_ly\n"}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    result = []\n    \n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(str(primes[ord(char) - ord('a')]))\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/24", "completion": "\n    translation_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    \n    alien_word = ''.join(translation_map[char] for char in english_word if char in translation_map)\n    return alien_word\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n    \n    # Initialize variables to keep track of the maximum frequency and the corresponding sentence\n    max_frequency = 0\n    max_frequency_sentence = \"\"\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Count the frequency of the word in the current sentence\n        frequency = sentence.lower().split().count(word.lower())\n        \n        # Update the maximum frequency and sentence if the current frequency is higher\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_sentence = sentence\n    \n    # Return the result as a tuple\n    return (max_frequency, max_frequency_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    def is_valid(x, y):\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0\n\n    def get_directions(path):\n        directions = []\n        for i in range(1, len(path)):\n            prev_x, prev_y = path[i-1]\n            curr_x, curr_y = path[i]\n            if curr_x > prev_x:\n                directions.append(\"down\")\n            elif curr_x < prev_x:\n                directions.append(\"up\")\n            elif curr_y > prev_y:\n                directions.append(\"right\")\n            elif curr_y < prev_y:\n                directions.append(\"left\")\n        return directions\n\n    if start == end:\n        return []\n\n    queue = [(start, [start])]\n    visited = set()\n    visited.add(start)\n\n    while queue:\n        (current, path) = queue.pop(0)\n        x, y = current\n\n        if current == end:\n            return get_directions(path)\n\n        for dx, dy, direction in [(-1, 0, \"up\"), (1, 0, \"down\"), (0, -1, \"left\"), (0, 1, \"right\")]:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                queue.append(((nx, ny), path + [(nx, ny)]))\n\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    result = []\n    for i in range(0, len(s), n):\n        result.append(s[i:i+n])\n    return result\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n\n    if taxable_income <= 0:\n        return 0.0\n\n    tax = 0.0\n\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.30\n        taxable_income = 130000\n\n    if taxable_income > 85000:\n        tax += (taxable_income - 85000) * 0.25\n        taxable_income = 85000\n\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n        taxable_income = 10000\n\n    return tax\n"}
{"task_id": "EvoEval/29", "completion": "\n    palindromes = set()\n    \n    for i in range(len(s)):\n        # Check for odd length palindromes\n        l, r = i, i\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            palindromes.add(s[l:r+1])\n            l -= 1\n            r += 1\n        \n        # Check for even length palindromes\n        l, r = i, i + 1\n        while l >= 0 and r < len(s) and s[l] == s[r]:\n            palindromes.add(s[l:r+1])\n            l -= 1\n            r += 1\n    \n    return sorted(palindromes)\n"}
{"task_id": "EvoEval/30", "completion": "\n    def is_valid(x, y, maze):\n        return 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 1\n\n    def bfs(maze, start, end):\n        queue = [(start, [start])]\n        visited = set()\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        while queue:\n            (current, path) = queue.pop(0)\n            if current == end:\n                return path\n            visited.add(current)\n            for direction in directions:\n                next_x, next_y = current[0] + direction[0], current[1] + direction[1]\n                if is_valid(next_x, next_y, maze) and (next_x, next_y) not in visited:\n                    queue.append(((next_x, next_y), path + [(next_x, next_y)]))\n                    visited.add((next_x, next_y))\n        return []\n\n    return bfs(maze, start, end)\n"}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D list to store the number of unique paths to each cell\n    dp = [[0] * n for _ in range(m)]\n    \n    # There is only one way to reach any cell in the first row or first column\n    for i in range(m):\n        dp[i][0] = 1\n    for j in range(n):\n        dp[0][j] = 1\n    \n    # Fill the dp table\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    # The bottom-right corner will have the number of unique paths\n    return dp[m-1][n-1]\n"}
{"task_id": "EvoEval/32", "completion": "\n    shuffled_playlist = playlist[:]\n    playlist_length = len(playlist)\n    \n    for i in range(playlist_length):\n        if \"Rock\" in shuffled_playlist[i]:\n            continue\n        \n        swap_index = seed % playlist_length\n        if swap_index != i:\n            shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        \n        seed = (seed * 16807) % 2147483647\n    \n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There's one way to stay at the ground level\n\n    for i in range(1, n + 1):\n        for stone in magic_stones:\n            if i - stone >= 0:\n                dp[i] += dp[i - stone]\n\n    return dp[n]\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation_percentages = [0] * n\n    current_percentage = 0\n\n    for day in range(1, n + 1):\n        if day < m:\n            current_percentage += 10\n        elif day == m:\n            current_percentage *= 2\n            if current_percentage > 100:\n                current_percentage = 100\n        else:\n            current_percentage -= 10\n\n        if current_percentage < 0:\n            current_percentage = 0\n\n        transformation_percentages[day - 1] = current_percentage\n\n    return transformation_percentages\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1:\n        return False\n    \n    local, domain = email.split(\"@\")\n    \n    if not local or not domain:\n        return False\n    \n    if \".\" not in domain:\n        return False\n    \n    return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    n = len(xs)\n    integral_coefficients = [0] * (n + 1)\n    \n    for i in range(n):\n        integral_coefficients[i + 1] = xs[i] / (i + 1)\n    \n    return integral_coefficients\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_vowel(v):\n        index = vowels.index(v.lower())\n        next_index = (index + 1) % len(vowels)\n        return vowels[next_index].upper() if v.isupper() else vowels[next_index]\n    \n    def next_consonant(c):\n        index = consonants.index(c.lower())\n        next_index = (index + 1) % len(consonants)\n        return consonants[next_index].upper() if c.isupper() else consonants[next_index]\n    \n    transformed = []\n    \n    for char in s:\n        if char.lower() in vowels:\n            transformed.append(next_vowel(char))\n        elif char.lower() in consonants:\n            transformed.append(next_consonant(char))\n        else:\n            transformed.append(char)\n    \n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticon_to_emoji = {\n        \":)\" : \"\ud83d\ude0a\",\n        \":(\" : \"\u2639\ufe0f\",\n        \":D\" : \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n    \n    for emoticon, emoji in emoticon_to_emoji.items():\n        sentence = sentence.replace(emoticon, emoji)\n    \n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    # Calculate the width of the ASCII art\n    width = 2 + n * len(s)\n    \n    # Create the top border\n    top_border = '*' * width\n    \n    # Create the middle part of the ASCII art\n    middle_part = ''\n    for char in s:\n        middle_part += char * n\n    \n    # Create the framed middle part\n    framed_middle_part = '*' + middle_part + '*'\n    \n    # Create the full ASCII art\n    ascii_art = [framed_middle_part] * n\n    ascii_art.append(top_border)\n    \n    return '\\n'.join(ascii_art)\n"}
{"task_id": "EvoEval/40", "completion": "\n    def parse_potion(potion):\n        name, power = potion.rsplit(' ', 1)\n        return name, int(power)\n\n    def backtrack(potions, target, start, current_mix, current_sum, result):\n        if current_sum == target:\n            if not result or len(current_mix) < len(result) or (len(current_mix) == len(result) and ''.join(current_mix) < ''.join(result)):\n                result[:] = current_mix[:]\n            return\n        if current_sum > target:\n            return\n        for i in range(start, len(potions)):\n            current_mix.append(potions[i])\n            backtrack(potions, target, i + 1, current_mix, current_sum + parse_potion(potions[i])[1], result)\n            current_mix.pop()\n\n    potions = sorted(potions)\n    result = []\n    backtrack(potions, target, 0, [], 0, result)\n    return result\n"}
{"task_id": "EvoEval/41", "completion": "\n    import heapq\n\n    def spider_web_jump(arr):\n        rows, cols = len(arr), len(arr[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        # Priority queue to store (energy, row, col)\n        pq = [(arr[0][0], 0, 0)]\n        # Dictionary to store the minimum energy required to reach each cell\n        min_energy = {(0, 0): arr[0][0]}\n        \n        while pq:\n            current_energy, r, c = heapq.heappop(pq)\n            \n            # If we reached the safe cell\n            if arr[r][c] == 0:\n                return current_energy\n            \n            for dr, dc in directions:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < rows and 0 <= nc < cols:\n                    new_energy = current_energy + arr[nr][nc]\n                    if (nr, nc) not in min_energy or new_energy < min_energy[(nr, nc)]:\n                        min_energy[(nr, nc)] = new_energy\n                        heapq.heappush(pq, (new_energy, nr, nc))\n        \n        return -1  # Safe cell is guaranteed, so this line should never be reached\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_legendary_item(player_input):\n        if not player_input:\n            return (False, None)\n        \n        player_input.sort(reverse=True)\n        \n        if player_input[0] == 5:\n            if len(player_input) > 1:\n                return (True, player_input[1])\n            else:\n                return (True, -1)\n        else:\n            return (False, None)\n"}
{"task_id": "EvoEval/43", "completion": "\n    trip_duration = distance / speed\n    fuel_consumption_per_year = spaceship_weight * planet_gravity * 0.1\n    total_fuel_consumption = trip_duration * fuel_consumption_per_year\n    \n    if fuel >= total_fuel_consumption:\n        remaining_fuel = fuel - total_fuel_consumption\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    total_capacity = w + 2 * e  # Since dragons and griffins have the same capacity\n    \n    return total_weight <= total_capacity\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    n = len(arr)\n    \n    for i in range(n):\n        left_view = 0\n        right_view = 0\n        \n        # Count hills to the left\n        for j in range(i - 1, -1, -1):\n            if arr[j] <= arr[i]:\n                left_view += 1\n            else:\n                break\n        \n        # Count hills to the right\n        for j in range(i + 1, n):\n            if arr[j] <= arr[i]:\n                right_view += 1\n            else:\n                break\n        \n        # Total view from the current hill\n        total_view = left_view + right_view + 1  # +1 for the hill itself\n        max_view = max(max_view, total_view)\n    \n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n    result = []\n    for case in test_cases:\n        secret_message = \"\"\n        for word in case:\n            # Extract the first letter of each word, ignoring symbols\n            first_letter = ''.join(filter(str.isalpha, word))[0].lower() if ''.join(filter(str.isalpha, word)) else ''\n            secret_message += first_letter\n        \n        # Check if the secret message can be found within the original strings\n        if any(secret_message in ''.join(filter(str.isalpha, word)).lower() for word in case):\n            result.append(\"Take the cannoli.\")\n        else:\n            result.append(secret_message)\n    \n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, required_quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < required_quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    def wizard_inventory(inventory_logs):\n    inventory = {}\n    \n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        \n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        \n        if inventory[item] <= 0:\n            del inventory[item]\n    \n    return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse_code_dict = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G',\n        '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N',\n        '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U',\n        '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1',\n        '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7',\n        '11100': '8', '11110': '9', '11111': '0'\n    }\n\n    words = msg.split('/')\n    decoded_message = []\n\n    for word in words:\n        characters = word.split()\n        decoded_word = ''.join(morse_code_dict[char] for char in characters)\n        decoded_message.append(decoded_word)\n\n    return ' '.join(decoded_message)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n\n    text = text.upper()\n    morse_code = []\n\n    for char in text:\n        if char in morse_code_dict:\n            morse_code.append(morse_code_dict[char])\n\n    return ' '.join(morse_code)\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not list_of_alphabets:\n        return string\n    \n    result = []\n    for i, char in enumerate(string):\n        result.append(list_of_alphabets[i % len(list_of_alphabets)])\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/52", "completion": "\n    fulfilled_orders = 0\n    batches_used = 0\n    \n    for order in orders:\n        if order == n:\n            if batches_used < m:\n                fulfilled_orders += 1\n                batches_used += 1\n    \n    return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    transformed = []\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            next_vowel = vowels[(index + 1) % len(vowels)]\n            if char.isupper():\n                transformed.append(next_vowel.upper())\n            else:\n                transformed.append(next_vowel)\n        elif char.lower() in consonants:\n            index = consonants.index(char.lower())\n            next_consonant = consonants[(index + 1) % len(consonants)]\n            if char.isupper():\n                transformed.append(next_consonant.upper())\n            else:\n                transformed.append(next_consonant)\n        elif char == '?':\n            if i % 2 == 0:\n                transformed.append('!')\n            else:\n                transformed.append('?')\n        elif char == '!':\n            if i % 2 == 0:\n                transformed.append('?')\n            else:\n                transformed.append('!')\n        else:\n            transformed.append(char)\n    \n    return ''.join(transformed)\n"}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == star:\n                coordinates.append((row_index, col_index))\n    return coordinates\n"}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = []\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            encrypted_message.append(new_char)\n        else:\n            encrypted_message.append(char)\n    \n    return ''.join(encrypted_message)\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'\n    }\n    \n    words = s.split()\n    morse_code = []\n    \n    for word in words:\n        morse_word = []\n        for char in word:\n            morse_word.append(morse_code_dict[char])\n        morse_code.append(' '.join(morse_word))\n    \n    return ' / '.join(morse_code)\n"}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = ''\n        for i, char in enumerate(dish):\n            transformed_dish += magic_spell[i % len(magic_spell)]\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    translation = []\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    for word in earth_phrase.split():\n        translated_word = ''\n        first_letter_is_vowel = word[0] in vowels\n        \n        for char in word:\n            if char in vowels:\n                translated_word += vowels[(vowels.index(char) + 1) % 5]\n            elif char in consonants:\n                translated_word += consonants[(consonants.index(char) + 1) % 21]\n        \n        translated_word = translated_word.capitalize()\n        if first_letter_is_vowel:\n            translated_word += 'xy'\n        else:\n            translated_word += 'yz'\n        \n        translation.append(translated_word)\n    \n    return '@'.join(translation)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    \n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda item: (-item[1], item[0]))\n    return sorted_ingredients\n"}
{"task_id": "EvoEval/60", "completion": "\n    happy_ants_count = 0\n    sugar_locations_set = set(sugar_locations)\n    \n    for position, direction in ant_positions:\n        if direction == \"right\":\n            while position < path_length:\n                if position in sugar_locations_set:\n                    happy_ants_count += 1\n                    break\n                position += 1\n        elif direction == \"left\":\n            while position >= 0:\n                if position in sugar_locations_set:\n                    happy_ants_count += 1\n                    break\n                position -= 1\n    \n    return happy_ants_count\n"}
{"task_id": "EvoEval/61", "completion": "\n    result = []\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    for i, char in enumerate(s):\n        if char == ' ':\n            result.append(char)\n            continue\n        \n        if char.isalpha():\n            if i % 2 == 1:\n                char = char.swapcase()\n            \n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                next_vowel = vowels[(index + 1) % len(vowels)]\n                if char.isupper():\n                    next_vowel = next_vowel.upper()\n                result.append(next_vowel)\n            else:\n                index = consonants.index(char.lower())\n                prev_consonant = consonants[(index - 1) % len(consonants)]\n                if char.isupper():\n                    prev_consonant = prev_consonant.upper()\n                result.append(prev_consonant)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    def recipe_converter(recipe, conversion_factor):\n    return {ingredient: quantity * conversion_factor for ingredient, quantity in recipe.items()}\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return pyramid\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n    \n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    final_order = {}\n    \n    if not order:\n        return menu\n    \n    for food, customizations in order.items():\n        ingredients = menu[food].copy()\n        \n        if \"remove\" in customizations:\n            for ingredient in customizations[\"remove\"]:\n                ingredients.remove(ingredient)\n        \n        if \"add\" in customizations:\n            for ingredient in customizations[\"add\"]:\n                ingredients.append(ingredient)\n        \n        final_order[food] = ingredients\n    \n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [num for num in range(2, n) if is_prime(num)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    anagram_pairs.sort(key=lambda x: (x[0], x[1]))\n    return anagram_pairs\n"}
{"task_id": "EvoEval/67", "completion": "\n    total_calories = {}\n    \n    for customer in customers:\n        if customer in meals:\n            total_calories[customer] = sum(meal['calories'] for meal in meals[customer])\n        else:\n            total_calories[customer] = 0\n    \n    return total_calories\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n\n    # Check if the array is already sorted\n    if arr == sorted_arr:\n        return True\n\n    # Try all rotations\n    for i in range(n):\n        rotated_arr = arr[-i:] + arr[:-i]\n        if rotated_arr == sorted_arr:\n            return True\n\n    # Try all possible single swaps\n    for i in range(n):\n        for j in range(i + 1, n):\n            arr[i], arr[j] = arr[j], arr[i]\n            if arr == sorted_arr:\n                return True\n            arr[i], arr[j] = arr[j], arr[i]  # Swap back\n\n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    seen = {}\n    for i, card in enumerate(cards):\n        if magicNumber % card == 0:\n            complement = magicNumber // card\n            if complement in seen:\n                return (seen[complement], i)\n        seen[card] = i\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    \n    for i in range(len(path) - 1):\n        current_planet = path[i]\n        next_planet = path[i + 1]\n        \n        if current_planet not in planets or next_planet not in planets[current_planet]:\n            return False\n    \n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    result = []\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            is_upper = char.isupper()\n            char = char.lower()\n            shifted_char = chr((ord(char) - ord('a') + n) % 26 + ord('a'))\n            if is_upper:\n                shifted_char = shifted_char.upper()\n            result.append(shifted_char)\n            if shifted_char.lower() in 'aeiou':\n                vowel_count += 1\n        else:\n            result.append(char)\n    \n    return ''.join(result), vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for i in range(len(lst)):\n        name = lst[i]\n        digit_count = sum(c.isdigit() for c in name)\n        story = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {digit_count} tales a day\"\n        result.append(story)\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    total_treasures = sum(sum(row) for row in grid)\n    \n    if total_treasures == 0:\n        return 0\n    \n    trips = math.ceil(total_treasures / bag_capacity)\n    \n    # Each trip involves entering and exiting the pyramid\n    return trips * 2\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = []\n    for char in s:\n        if char in cipher:\n            result.append(cipher[char])\n        else:\n            result.append(char)\n    return ''.join(result)\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            index = (vowels.index(char.lower()) + 1) % len(vowels)\n            if char.isupper():\n                result.append(vowels[index].upper())\n            else:\n                result.append(vowels[index])\n        elif char.lower() in consonants:\n            index = (consonants.index(char.lower()) + 1) % len(consonants)\n            if char.isupper():\n                result.append(consonants[index].upper())\n            else:\n                result.append(consonants[index])\n        elif char.isdigit():\n            result.append(str((int(char) + 1) % 10))\n        elif char in '?!':\n            if i % 2 == 0:\n                result.append('!' if char == '?' else '?')\n            else:\n                result.append(char)\n        else:\n            result.append(char)\n\n    return ''.join(result)\n"}
{"task_id": "EvoEval/76", "completion": "\n    def create_pyramid(lst):\n    if not lst:\n        return []\n    \n    pyramid = []\n    total_sum = sum(lst)\n    \n    for num in lst:\n        level = '#' * num\n        pyramid.append(level)\n    \n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def calculate_points(num, k):\n        points = 0\n        while num % k == 0:\n            num //= k\n            points += 1\n        return points\n\n    points_list = [(num, calculate_points(num, k)) for num in sequence]\n    points_list.sort(key=lambda x: x[1], reverse=True)\n    \n    return [points for num, points in points_list]\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    \n    # Collect elements from the main diagonal (top-left to bottom-right)\n    for i in range(n):\n        result.append(mat[i][i])\n    \n    # Collect elements from the anti-diagonal (top-right to bottom-left)\n    for i in range(n):\n        result.append(mat[i][n - 1 - i])\n    \n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    min_price = float('inf')\n    \n    for i in range(days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n    \n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    def adventure_game(map, instructions):\n    # Find the start position\n    start_row, start_column = None, None\n    for r in range(len(map)):\n        for c in range(len(map[r])):\n            if map[r][c] == 'S':\n                start_row, start_column = r, c\n                break\n        if start_row is not None:\n            break\n    \n    # Initialize the path with the start position\n    path = [(start_row, start_column)]\n    current_row, current_column = start_row, start_column\n    \n    # Define movement directions\n    directions = {\n        'up': (-1, 0),\n        'down': (1, 0),\n        'left': (0, -1),\n        'right': (0, 1)\n    }\n    \n    # Process each instruction\n    for instruction in instructions:\n        move = directions[instruction]\n        new_row, new_column = current_row + move[0], current_column + move[1]\n        \n        # Check if the new position is within bounds and not a wall\n        if 0 <= new_row < len(map) and 0 <= new_column < len(map[0]) and map[new_row][new_column] != 'X':\n            current_row, current_column = new_row, new_column\n            path.append((current_row, current_column))\n            \n            # Check if the new position is the end\n            if map[current_row][current_column] == 'E':\n                return path\n    \n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    \n    order_map = {char: index for index, char in enumerate(alien_dictionary)}\n    \n    def compare_words(word1, word2):\n        min_len = min(len(word1), len(word2))\n        for i in range(min_len):\n            if order_map[word1[i]] < order_map[word2[i]]:\n                return -1\n            elif order_map[word1[i]] > order_map[word2[i]]:\n                return 1\n        if len(word1) < len(word2):\n            return -1\n        elif len(word1) > len(word2):\n            return 1\n        return 0\n    \n    for i in range(len(word_list) - 1):\n        if compare_words(word_list[i], word_list[i + 1]) > 0:\n            return \"INCORRECT\"\n    \n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    elements = {\n        'Fire': 0,\n        'Water': 0,\n        'Air': 0,\n        'Earth': 0\n    }\n\n    zodiac_dates = [\n        (('03-21', '04-19'), 'Fire'),  # Aries\n        (('04-20', '05-20'), 'Earth'),  # Taurus\n        (('05-21', '06-20'), 'Air'),  # Gemini\n        (('06-21', '07-22'), 'Water'),  # Cancer\n        (('07-23', '08-22'), 'Fire'),  # Leo\n        (('08-23', '09-22'), 'Earth'),  # Virgo\n        (('09-23', '10-22'), 'Air'),  # Libra\n        (('10-23', '11-21'), 'Water'),  # Scorpio\n        (('11-22', '12-21'), 'Fire'),  # Sagittarius\n        (('12-22', '01-19'), 'Earth'),  # Capricorn\n        (('01-20', '02-18'), 'Air'),  # Aquarius\n        (('02-19', '03-20'), 'Water')  # Pisces\n    ]\n\n    def get_zodiac_element(date):\n        month_day = date[5:]\n        for (start, end), element in zodiac_dates:\n            if (start <= month_day <= end) or (start > end and (month_day >= start or month_day <= end)):\n                return element\n        return None\n\n    for birthday in birthdays:\n        element = get_zodiac_element(birthday)\n        if element:\n            elements[element] += 1\n\n    return {k: v for k, v in elements.items() if v > 0}\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = \"aeiouAEIOU\"\n    s_list = list(s)\n    i, j = 0, len(s) - 1\n    \n    while i < j:\n        if s_list[i] in vowels and s_list[j] in vowels:\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        elif s_list[i] not in vowels:\n            i += 1\n        elif s_list[j] not in vowels:\n            j -= 1\n    \n    return ''.join(s_list)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def tree_traversal(tree):\n    def dfs(node, path):\n        if not node:\n            paths.append(path)\n            return\n        for key, value in node.items():\n            dfs(value, path + [key])\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    rows = len(grid)\n    cols = len(grid[0])\n    \n    # Initialize a distance grid with infinity\n    dist = [[float('inf')] * cols for _ in range(rows)]\n    \n    # Starting point is (0, 0)\n    start = (0, 0)\n    dist[start[0]][start[1]] = 0\n    \n    # Queue for BFS\n    queue = [start]\n    \n    # Directions for moving right and down\n    directions = [(0, 1), (1, 0)]\n    \n    while queue:\n        current = queue.pop(0)\n        current_row, current_col = current\n        \n        for direction in directions:\n            new_row = current_row + direction[0]\n            new_col = current_col + direction[1]\n            \n            if 0 <= new_row < rows and 0 <= new_col < cols and grid[new_row][new_col] == 0:\n                new_dist = dist[current_row][current_col] + 1\n                if new_dist < dist[new_row][new_col]:\n                    dist[new_row][new_col] = new_dist\n                    queue.append((new_row, new_col))\n    \n    princess_row, princess_col = coord\n    if dist[princess_row][princess_col] == float('inf'):\n        return -1\n    else:\n        return dist[princess_row][princess_col]\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return \"\"\n    \n    top, bottom = 0, len(arr) - 1\n    left, right = 0, len(arr[0]) - 1\n    result = []\n    \n    while top <= bottom and left <= right:\n        # Traverse from left to right along the top row\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        \n        # Traverse from top to bottom along the right column\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        \n        if top <= bottom:\n            # Traverse from right to left along the bottom row\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        \n        if left <= right:\n            # Traverse from bottom to top along the left column\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def planet_population(dict_of_planets):\n    result = {}\n    for planet, data in dict_of_planets.items():\n        population, size = data\n        if population is not None and size is not None and population > 0 and size > 0:\n            density = round(population / size, 2)\n            result[planet] = density\n    return result\n"}
{"task_id": "EvoEval/89", "completion": "\n    remaining_aliens = []\n    for alien in aliens:\n        if alien == ray or alien == ray - 1 or alien == ray + 1:\n            continue\n        remaining_aliens.append(alien)\n    return remaining_aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    result = 0\n    for digit1 in s1:\n        for digit2 in s2:\n            result += int(digit1) + int(digit2)\n    return result\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    \n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    result = []\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i in range(n):\n        letter = alphabet[i % 26]\n        if i == 0:\n            layer = 'A'\n        else:\n            layer = letter * (2 * i)\n            layer = layer[:i] + 'A' + layer[i:]\n        layer = layer.center(2 * n - 1)\n        result.append(layer)\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = []\n    n_values_cycle = itertools.cycle(n_values)\n    \n    for char in message:\n        if char.isalpha():\n            shift = next(n_values_cycle)\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            result.append(new_char)\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "EvoEval/94", "completion": "\n    sorted_spells = []\n    for spell in strings:\n        words = spell.split()\n        sorted_words = sorted(words, key=len)\n        sorted_spells.append(' '.join(sorted_words))\n    return sorted_spells\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    \n    primary_diagonal_sum = 0\n    secondary_diagonal_sum = 0\n    \n    for i in range(len(m)):\n        primary_diagonal_sum += m[i][i]\n        secondary_diagonal_sum += m[i][len(m) - i - 1]\n    \n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = abs(lst[i])\n        if value % i == 0:\n            product_of_digits = 1\n            for digit in str(value):\n                product_of_digits *= int(digit)\n            if product_of_digits == i:\n                magic_indices.append(i)\n    return sorted(magic_indices)\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    encounter_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encounter_list = []\n\n    for continent in encounter_order:\n        for human, location in humans.items():\n            if location == continent:\n                encounter_list.append(human)\n\n    return encounter_list\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + (i - 1)\n        sequence.append(next_num)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n\n    for round_duration in rounds:\n        # Calculate the position to eliminate\n        eliminate_position = (current_position + round_duration * music) % len(players)\n        # Eliminate the player at the calculated position\n        players.pop(eliminate_position)\n        # Update the current position to the next player after elimination\n        current_position = eliminate_position % len(players)\n\n    return players\n"}
