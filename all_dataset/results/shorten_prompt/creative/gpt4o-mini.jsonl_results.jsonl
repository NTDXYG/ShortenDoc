{"task_id": "EvoEval/0", "completion": "\n    base_cost = 5.0\n    total_cost = 0.0\n    string_item_multiplier = 1.0\n    location_factor = 1.0\n\n    if location == \"National\":\n        location_factor = 1.5\n    elif location == \"International\":\n        location_factor = 2.5\n\n    for item in items:\n        if isinstance(item, str):\n            total_cost += base_cost * 1.5\n            string_item_multiplier = 1.5\n            continue\n        weight = item\n        item_cost = base_cost\n        if weight > 5:\n            item_cost += 10.0\n        total_cost += item_cost\n\n    total_cost *= location_factor * string_item_multiplier\n    return f\"{total_cost:.2f}\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    total_cost = 0.0\n    location_factors = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5\n    }\n    \n    factor = location_factors.get(location, 1.0)\n\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        \n        item_cost = base_cost\n        if weight > 5:\n            item_cost += 10.0\n        \n        total_cost += item_cost\n\n    total_cost *= factor\n    return round(total_cost, 2)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/2", "completion": "\n    if isinstance(key, str):\n        key = sum(ord(char) for char in key)\n\n    encrypted_words = []\n    \n    for word in words:\n        encrypted_word = []\n        for char in word.lower():\n            if char.isalpha():\n                shifted = ord(char) + key\n                if shifted > ord('z'):\n                    shifted -= 26\n                encrypted_word.append(chr(shifted))\n            else:\n                encrypted_word.append(char)\n        encrypted_words.append(''.join(encrypted_word))\n    \n    return encrypted_words\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(index: int, path: str):\n        if index == len(input_string):\n            combinations.append(path)\n            return\n        \n        # Single digit decoding\n        if index < len(input_string):\n            num = int(input_string[index])\n            if 1 <= num <= 26:\n                backtrack(index + 1, path + chr(num + 96))\n        \n        # Double digit decoding\n        if index + 1 < len(input_string):\n            num = int(input_string[index:index + 2])\n            if 10 <= num <= 26:\n                backtrack(index + 2, path + chr(num + 96))\n\n    combinations = []\n    backtrack(0, \"\")\n    return combinations\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    count = 1  # The first candle is always lit\n    max_height = candles[0]\n\n    for height in candles[1:]:\n        if height > max_height:\n            count += 1\n            max_height = height\n\n    return count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix:\n        return []\n\n    result = []\n    rows = len(matrix)\n    \n    for i in range(rows):\n        if i % 2 == 0:\n            # Traverse left to right\n            result.extend(matrix[i])\n        else:\n            # Traverse right to left\n            result.extend(reversed(matrix[i]))\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:  # clicked on a mine\n        return grid\n    if grid[x][y] == 0:  # already revealed\n        return grid\n\n    def reveal(x, y):\n        if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n            return\n        if grid[x][y] == 1 or grid[x][y] == 0:  # mine or already revealed\n            return\n        grid[x][y] = 0  # reveal the cell\n        for dx in [-1, 0, 1]:\n            for dy in [-1, 0, 1]:\n                if dx != 0 or dy != 0:  # skip the current cell\n                    reveal(x + dx, y + dy)\n\n    reveal(x, y)\n    return grid\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:  # North\n            y += 1\n        elif direction == 1:  # East\n            x += 1\n        elif direction == 2:  # South\n            y -= 1\n        elif direction == 3:  # West\n            x -= 1\n\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/8", "completion": "\n    if canvas.count('P') != 1:\n        return 'Invalid canvas'\n    \n    painter_index = canvas.index('P')\n    left_index = painter_index\n    right_index = painter_index\n\n    # Move left\n    while left_index > 0 and canvas[left_index - 1] != '#':\n        left_index -= 1\n\n    # Move right\n    while right_index < len(canvas) - 1 and canvas[right_index + 1] != '#':\n        right_index += 1\n\n    # Check if the number of painted spaces divides the empty spaces evenly\n    total_empty_spaces = canvas.count('-')\n    painted_spaces = (right_index - left_index + 1) - 1  # Exclude 'P'\n\n    if painted_spaces > 0 and (total_empty_spaces - painted_spaces) % 2 == 0:\n        return 'Invalid canvas'\n\n    # Create the transformed canvas\n    transformed_canvas = list(canvas)\n    for i in range(left_index, right_index + 1):\n        if transformed_canvas[i] == '-':\n            transformed_canvas[i] = '*'\n    \n    return ''.join(transformed_canvas)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 168, in <module>\n  File \"<string>\", line 166, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/9", "completion": "\n    import string as str_lib\n\n    # Remove punctuation and convert to lowercase\n    translator = str.maketrans('', '', str_lib.punctuation)\n    cleaned_string = string.translate(translator).lower()\n    \n    # Split the string into words\n    words = cleaned_string.split()\n    \n    # Calculate frequency\n    frequency = {}\n    for word in words:\n        frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 142, in <module>\n  File \"<string>\", line 140, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/10", "completion": "\n    animal_count = {'C': 0, 'D': 0, 'B': 0}\n    valid_animals = {'C', 'D', 'B'}\n    result = []\n    total_animals = 0\n\n    for animal_sound in animal_string.split():\n        if total_animals >= 5:\n            break\n        \n        animal = animal_sound[0]\n        sound_count = animal_sound.count('|')\n\n        if animal in valid_animals and animal_count[animal] < 2:\n            animal_count[animal] += 1\n            result.append(sound_count)\n            total_animals += 1\n\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n\n    # Count the occurrences of each element\n    count = Counter(flux_values)\n    \n    # Find the element with maximum occurrence (and the smallest in case of a tie)\n    most_common_value = min((num for num, freq in count.items() if freq == max(count.values())))\n\n    # Calculate the sum of all elements\n    total_sum = sum(flux_values)\n\n    # Calculate the unique energy signature\n    unique_energy_signature = total_sum * most_common_value\n\n    return unique_energy_signature\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    frequency = {}\n    for elem in elems:\n        frequency[elem] = frequency.get(elem, 0) + 1\n\n    rarest_element = None\n    min_count = float('inf')\n\n    for elem in elems:\n        if frequency[elem] < min_count:\n            min_count = frequency[elem]\n            rarest_element = elem\n\n    return rarest_element\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    \n    def next_vowel(v):\n        return vowels[(vowels.index(v) + 1) % len(vowels)]\n    \n    def next_consonant(c):\n        return consonants[(consonants.index(c) + 1) % len(consonants)]\n    \n    alias = []\n    \n    for char in name:\n        if char.lower() in vowels:\n            new_char = next_vowel(char.lower())\n            alias.append(new_char.upper() if char.isupper() else new_char)\n        elif char.lower() in consonants:\n            new_char = next_consonant(char.lower())\n            alias.append(new_char.upper() if char.isupper() else new_char)\n        else:\n            alias.append(char)\n    \n    return ''.join(alias)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/15", "completion": "\n    value_count = {}\n    \n    for card in hand:\n        value = card[:-1]  # Get the value part of the card\n        if value == 'A':\n            value = 1\n        elif value == 'J':\n            value = 11\n        elif value == 'Q':\n            value = 12\n        elif value == 'K':\n            value = 13\n        else:\n            value = int(value)\n        \n        if value in value_count:\n            value_count[value] += 1\n        else:\n            value_count[value] = 1\n\n    score = 0\n    for value, count in value_count.items():\n        if count == 2:  # Pair\n            score += value\n        elif count == 3:  # Triple\n            score += 2 * value\n        elif count == 4:  # Four of a kind\n            score += 3 * value\n        elif count == 5:  # Five of a kind\n            score += 4 * value\n\n    return score\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/16", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    a, b = 0, 1\n    total_sum = a + b\n\n    for _ in range(2, n):\n        a, b = b, a + b\n        total_sum += b\n\n    return total_sum\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/17", "completion": "\n    for wizard, power in wizards:\n        dragon_hp -= power\n        if dragon_hp <= 0:\n            return wizard\n    return 'The dragon won!'\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/18", "completion": "\n    def digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    count = 0\n    current = 7\n    while count < n:\n        if current % 7 == 0 and digit_sum(current) == 7:\n            count += 1\n            if count == n:\n                return current\n        current += 7\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/19", "completion": "\n    rows = len(m)\n    cols = len(m[0]) if rows > 0 else 0\n    danger_humans = set()\n\n    for i in range(rows):\n        for j in range(cols):\n            if m[i][j] == 2:  # Found a vampire\n                # Mark all humans in the same row\n                for k in range(cols):\n                    if m[i][k] == 1:\n                        danger_humans.add((i, k))\n                # Mark all humans in the same column\n                for k in range(rows):\n                    if m[k][j] == 1:\n                        danger_humans.add((k, j))\n\n    return len(danger_humans)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 149, in <module>\n  File \"<string>\", line 147, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    \n    pattern = []\n    \n    # Ascending part\n    for i in range(1, n + 1):\n        pattern.append(','.join(str(x) for x in range(1, i + 1)))\n    \n    # Descending part\n    for i in range(n, 0, -1):\n        pattern.append(','.join(str(x) for x in range(i, 0, -1)))\n    \n    return pattern\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/21", "completion": "\n    def find_word_in_line(word, line):\n        return word in line or word[::-1] in line\n\n    n = len(grid)\n    \n    # Check rows\n    for row in grid:\n        if any(find_word_in_line(word, ''.join(row)) for word in words):\n            continue\n        else:\n            return False\n\n    # Check columns\n    for col in range(n):\n        column = ''.join(grid[row][col] for row in range(n))\n        if any(find_word_in_line(word, column) for word in words):\n            continue\n        else:\n            return False\n\n    return True\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 159, in <module>\n  File \"<string>\", line 157, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/22", "completion": "\n    light_year_km = 9.461e12\n    distance_km = v * t * 365.25 * 24 * 3600  # Convert time to seconds and calculate distance\n    distance_ly = distance_km / light_year_km  # Convert distance to light years\n    return distance_ly\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 123, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/23", "completion": "\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101]\n    result = []\n\n    for char in s:\n        if 'a' <= char <= 'z':\n            index = ord(char) - ord('a')\n            result.append(str(primes[index]))\n        else:\n            result.append(char)\n\n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/24", "completion": "\n    translation_map = {\n        'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', \n        'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', \n        'o': '?', 'p': ':', 'q': ';', 'r': '', 's': '~', 't': '>', 'u': '<', \n        'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'\n    }\n    \n    translated_word = ''.join(translation_map.get(char, char) for char in english_word)\n    return translated_word\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split('. ')\n    frequency = 0\n    max_sentence = \"\"\n    max_count = 0\n\n    for sentence in sentences:\n        count = sentence.lower().split().count(word.lower())\n        frequency += count\n        if count > max_count:\n            max_count = count\n            max_sentence = sentence.strip()\n\n    return (frequency, max_sentence)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    directions = []\n    rows, cols = len(maze), len(maze[0])\n    visited = set()\n    queue = [(start, directions)]\n\n    while queue:\n        (current_row, current_col), path = queue.pop(0)\n\n        if (current_row, current_col) == end:\n            return path\n\n        visited.add((current_row, current_col))\n\n        for dr, dc, direction in [(-1, 0, \"up\"), (1, 0, \"down\"), (0, -1, \"left\"), (0, 1, \"right\")]:\n            new_row, new_col = current_row + dr, current_col + dc\n\n            if 0 <= new_row < rows and 0 <= new_col < cols and maze[new_row][new_col] == 0 and (new_row, new_col) not in visited:\n                queue.append(((new_row, new_col), path + [direction]))\n\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/28", "completion": "\n    # Calculate taxable income after deductions\n    if deductions <= 1000:\n        taxable_income = income - deductions\n    elif deductions <= 3000:\n        taxable_income = income - 1000 - (deductions - 1000) / 2\n    else:\n        taxable_income = income - 1000 - 1000 / 2 - (deductions - 3000) / 3\n\n    # Ensure taxable income is not negative\n    taxable_income = max(taxable_income, 0)\n\n    # Calculate tax based on progressive rates\n    tax = 0\n    if taxable_income > 130000:\n        tax += (taxable_income - 130000) * 0.30\n        taxable_income = 130000\n    if taxable_income > 85000:\n        tax += (taxable_income - 85000) * 0.25\n        taxable_income = 85000\n    if taxable_income > 10000:\n        tax += (taxable_income - 10000) * 0.15\n\n    return tax\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 161, in <module>\n  File \"<string>\", line 159, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub: str) -> bool:\n        return sub == sub[::-1]\n\n    unique_palindromes = set()\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindrome(substring):\n                unique_palindromes.add(substring)\n\n    return sorted(unique_palindromes)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/30", "completion": "\n    from collections import deque\n\n    rows, cols = len(maze), len(maze[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(x, y):\n        return 0 <= x < rows and 0 <= y < cols and maze[x][y] == 1\n\n    queue = deque([(start, [start])])\n    visited = set()\n    visited.add(start)\n\n    while queue:\n        (current_x, current_y), path = queue.popleft()\n\n        if (current_x, current_y) == end:\n            return path\n\n        for dx, dy in directions:\n            next_x, next_y = current_x + dx, current_y + dy\n            if is_valid(next_x, next_y) and (next_x, next_y) not in visited:\n                visited.add((next_x, next_y))\n                queue.append(((next_x, next_y), path + [(next_x, next_y)]))\n\n    return []\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/31", "completion": "\n    # Create a 2D array to store the number of unique paths to each cell\n    dp = [[1] * n for _ in range(m)]\n    \n    # Fill the dp array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    \n    return dp[m - 1][n - 1]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/32", "completion": "\n    playlist_length = len(playlist)\n    shuffled_playlist = playlist[:]\n    \n    for i in range(playlist_length):\n        if \"Rock\" in shuffled_playlist[i]:\n            continue\n        \n        swap_index = seed % playlist_length\n        if \"Rock\" not in shuffled_playlist[swap_index]:\n            shuffled_playlist[i], shuffled_playlist[swap_index] = shuffled_playlist[swap_index], shuffled_playlist[i]\n        \n        seed = (seed * 16807) % 2147483647\n    \n    return shuffled_playlist\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/33", "completion": "\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There's one way to stay at the ground (do nothing)\n\n    for step in range(1, n + 1):\n        for stone in magic_stones:\n            if step - stone >= 0:\n                dp[step] += dp[step - stone]\n\n    return dp[n]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0] * n\n    for day in range(1, n):\n        if day < m:\n            transformation[day] = min(transformation[day - 1] + 10, 100)\n        elif day == m:\n            transformation[day] = min(transformation[day - 1] * 2, 100)\n        else:\n            transformation[day] = max(transformation[day - 1] - 10, 0)\n    return transformation\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 152, in <module>\n  File \"<string>\", line 150, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/35", "completion": "\n    if email.count('@') != 1:\n        return False\n    if email.startswith('@') or email.endswith('@'):\n        return False\n    local_part, domain_part = email.split('@')\n    if '.' not in domain_part:\n        return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/36", "completion": "\n    integral_coeffs = [0]  # Start with the constant term (0)\n    for i in range(len(xs)):\n        integral_coeffs.append(xs[i] / (i + 1))\n    return integral_coeffs\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = []\n\n    for char in s:\n        if char.lower() in vowels:\n            next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            transformed.append(next_vowel.upper() if char.isupper() else next_vowel)\n        elif char.lower() in consonants:\n            next_consonant = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            transformed.append(next_consonant.upper() if char.isupper() else next_consonant)\n        else:\n            transformed.append(char)\n\n    return ''.join(transformed)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/38", "completion": "\n    emoticon_map = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    \n    for emoticon, emoji in emoticon_map.items():\n        sentence = sentence.replace(emoticon, emoji)\n    \n    return sentence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/39", "completion": "\n    row = s * n\n    framed_row = '*' + row + '*'\n    framed_art = [framed_row] * n\n    framed_art.append('*' * (len(framed_row)))\n    return '\\n'.join(framed_art)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/40", "completion": "\n    from itertools import combinations\n\n    def get_power(potion):\n        return int(potion.split()[-1])\n\n    potions_with_power = [(potion, get_power(potion)) for potion in potions]\n    potions_with_power.sort(key=lambda x: (x[1], x[0]))\n\n    best_combination = None\n\n    for r in range(1, len(potions) + 1):\n        for combo in combinations(potions_with_power, r):\n            total_power = sum(p[1] for p in combo)\n            if total_power == target:\n                if best_combination is None or len(combo) < len(best_combination) or \\\n                   (len(combo) == len(best_combination) and sorted(combo) < sorted(best_combination)):\n                    best_combination = combo\n\n    if best_combination is None:\n        return []\n    \n    return sorted(potion[0] for potion in best_combination)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/41", "completion": "\n    from collections import deque\n\n    def min_energy_path(arr):\n        rows, cols = len(arr), len(arr[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        energy = [[float('inf')] * cols for _ in range(rows)]\n        energy[0][0] = arr[0][0]\n        queue = deque([(0, 0)])\n\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    new_energy = energy[x][y] + arr[nx][ny]\n                    if new_energy < energy[nx][ny]:\n                        energy[nx][ny] = new_energy\n                        queue.append((nx, ny))\n\n        return energy[rows - 1][cols - 1]\n\n    return min_energy_path(arr)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 169, in <module>\n  File \"<string>\", line 167, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/42", "completion": "\n    if not player_input:\n        return (False, None)\n\n    unique_rarities = sorted(set(player_input), reverse=True)\n\n    if 5 in unique_rarities:\n        if len(unique_rarities) > 1:\n            return (True, unique_rarities[1])\n        else:\n            return (True, -1)\n    \n    return (False, None)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 147, in <module>\n  File \"<string>\", line 145, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/43", "completion": "\n    travel_time = distance / speed\n    fuel_consumption_per_year = spaceship_weight * planet_gravity * 0.1\n    total_fuel_consumed = fuel_consumption_per_year * travel_time\n\n    if fuel >= travel_time:\n        remaining_fuel = fuel - total_fuel_consumed\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 137, in <module>\n  File \"<string>\", line 135, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    unicorns_capacity = w\n    dragons_and_griffins_capacity = 2 * e  # since both dragons and griffins can carry 'e' kg each\n\n    total_capacity = unicorns_capacity + dragons_and_griffins_capacity\n\n    return total_weight <= total_capacity\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n\n    for i in range(len(arr)):\n        left_view = 0\n        right_view = 0\n\n        # Check left side\n        for j in range(i - 1, -1, -1):\n            if arr[j] <= arr[i]:\n                left_view += 1\n            else:\n                break\n\n        # Check right side\n        for j in range(i + 1, len(arr)):\n            if arr[j] <= arr[i]:\n                right_view += 1\n            else:\n                break\n\n        total_view = left_view + right_view\n        max_view = max(max_view, total_view)\n\n    return max_view\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for case in test_cases:\n        secret_message = ''.join(word[0].lower() for word in case if word)\n        if 'take the cannoli' in secret_message:\n            result.append('Take the cannoli.')\n        else:\n            result.append(secret_message)\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if available.get(ingredient, 0) < quantity:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        \n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n\n    # Remove items with zero or negative quantity\n    final_inventory = {item: qty for item, qty in inventory.items() if qty > 0}\n\n    return final_inventory\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/49", "completion": "\n    morse_dict = {\n        '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F',\n        '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L',\n        '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R',\n        '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X',\n        '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3',\n        '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8',\n        '11110': '9', '11111': '0'\n    }\n\n    words = msg.split('/')\n    decoded_message = []\n\n    for word in words:\n        characters = word.split()\n        decoded_word = ''.join(morse_dict[char] for char in characters)\n        decoded_message.append(decoded_word)\n\n    return ' '.join(decoded_message)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 164, in <module>\n  File \"<string>\", line 161, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 47, in morse_decoder\n        decoded_word = ''.join(morse_dict[char] for char in characters)\n  File \"<string>\", line 47, in <genexpr>\n        decoded_word = ''.join(morse_dict[char] for char in characters)\nKeyError: '010101'\n", "passed": false}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {\n        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',\n        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',\n        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',\n        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',\n        'Y': '-.--', 'Z': '--..', ' ': ' '\n    }\n    \n    morse_code = []\n    \n    for char in text:\n        upper_char = char.upper()\n        if upper_char in morse_code_dict:\n            morse_code.append(morse_code_dict[upper_char])\n    \n    return ' '.join(morse_code)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return \"\"\n    if not list_of_alphabets:\n        return string\n\n    encoded_string = []\n    for i, char in enumerate(string):\n        encoded_char = list_of_alphabets[i % len(list_of_alphabets)]\n        encoded_string.append(encoded_char)\n\n    return ''.join(encoded_string)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/52", "completion": "\n    fulfilled_orders = 0\n    for order in orders:\n        if order <= n and fulfilled_orders < m:\n            fulfilled_orders += 1\n    return fulfilled_orders\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/53", "completion": "\n    vowels = \"aeiouAEIOU\"\n    next_vowel = str.maketrans(\"aeiouAEIOU\", \"eiouaEIOUA\")\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    next_consonant = str.maketrans(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", \"cdfghjklmnpqrstvwxyzbCDFGHJKLMNPQRSTVWXYZA\")\n    \n    transformed = []\n    \n    for i, char in enumerate(s):\n        if char in vowels:\n            transformed.append(char.translate(next_vowel))\n        elif char in consonants:\n            transformed.append(char.translate(next_consonant))\n        elif char == '?':\n            transformed.append('!' if i % 2 == 0 else '?')\n        else:\n            transformed.append(char)\n    \n    return ''.join(transformed)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 151, in <module>\n  File \"<string>\", line 149, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/54", "completion": "\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                coordinates.append((i, j))\n    return coordinates\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/55", "completion": "\n    encrypted_message = []\n    \n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = shift + i\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n            encrypted_message.append(new_char)\n        else:\n            encrypted_message.append(char)\n    \n    return ''.join(encrypted_message)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/56", "completion": "\n    morse_dict = {\n        'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.',\n        'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',\n        'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.',\n        's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',\n        'y': '-.--', 'z': '--..'\n    }\n    \n    morse_code = []\n    \n    for word in s.split(' '):\n        morse_word = ' '.join(morse_dict[char] for char in word if char in morse_dict)\n        morse_code.append(morse_word)\n    \n    return ' / '.join(morse_code)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/57", "completion": "\n    transformed_menu = {}\n    spell_length = len(magic_spell)\n\n    for dish, price in menu.items():\n        transformed_dish = ''.join(magic_spell[i % spell_length] for i in range(len(dish)))\n        transformed_menu[transformed_dish] = price\n\n    return transformed_menu\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/58", "completion": "\n    def translate_char(char):\n        vowels = 'aeiou'\n        consonants = 'bcdfghjklmnpqrstvwxyz'\n        \n        if char in vowels:\n            return vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            return consonants[(consonants.index(char) + 1) % len(consonants)]\n        elif char == ' ':\n            return '@'\n        else:\n            return char\n\n    words = earth_phrase.split()\n    translated_words = []\n\n    for word in words:\n        translated_word = ''.join(translate_char(char) for char in word)\n        if word[0] in 'aeiou':\n            translated_word += 'xy'\n        else:\n            translated_word += 'yz'\n        translated_words.append(translated_word.capitalize())\n\n    return ''.join(translated_words)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 163, in <module>\n  File \"<string>\", line 161, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    \n    sorted_ingredients = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_ingredients\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/60", "completion": "\n    sugar_set = set(sugar_locations)\n    happy_count = 0\n\n    for position, direction in ant_positions:\n        if direction == \"right\":\n            while position < path_length:\n                if position in sugar_set:\n                    happy_count += 1\n                    sugar_set.remove(position)\n                position += 1\n        elif direction == \"left\":\n            while position >= 0:\n                if position in sugar_set:\n                    happy_count += 1\n                    sugar_set.remove(position)\n                position -= 1\n\n    return happy_count\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    next_vowel = {vowels[i]: vowels[(i + 1) % len(vowels)] for i in range(len(vowels))}\n    next_vowel.update({vowels[i].upper(): vowels[(i + 1) % len(vowels)].upper() for i in range(len(vowels))})\n\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    prev_consonant = {consonants[i]: consonants[i - 1] for i in range(1, len(consonants))}\n    prev_consonant.update({consonants[i].upper(): consonants[i - 1].upper() for i in range(1, len(consonants))})\n    prev_consonant['b'] = 'z'\n    prev_consonant['B'] = 'Z'\n\n    result = []\n    for index, char in enumerate(s):\n        if char == ' ':\n            result.append(' ')\n        else:\n            if index % 2 == 1:\n                char = char.swapcase()\n            if char in next_vowel:\n                char = next_vowel[char]\n            elif char in prev_consonant:\n                char = prev_consonant[char]\n            result.append(char)\n\n    return ''.join(result)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/62", "completion": "\n    converted_recipe = {}\n    for ingredient, quantity in recipe.items():\n        converted_recipe[ingredient] = quantity * conversion_factor\n    return converted_recipe\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = []\n    while p > 0:\n        pyramid.append(p)\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n    return pyramid[::-1]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 140, in <module>\n  File \"<string>\", line 138, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    result = []\n    for num in range(start, end + 1):\n        if num % divisor == 0 and is_prime(num):\n            result.append(num)\n\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = {}\n\n    for item, modifications in order.items():\n        if item in menu:\n            ingredients = menu[item][:]\n            if 'remove' in modifications:\n                for ingredient in modifications['remove']:\n                    if ingredient in ingredients:\n                        ingredients.remove(ingredient)\n            if 'add' in modifications:\n                ingredients.extend(modifications['add'])\n            final_order[item] = ingredients\n\n    return final_order\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 154, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def are_anagrams(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if are_anagrams(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 158, in <module>\n  File \"<string>\", line 156, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum(meal['calories'] for meal in meals[customer])\n            result[customer] = total_calories\n        else:\n            result[customer] = 0\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n\n    # Check if the array is already sorted\n    if arr == sorted_arr:\n        return True\n\n    # Find the number of positions where arr and sorted_arr differ\n    diff_indices = [i for i in range(n) if arr[i] != sorted_arr[i]]\n\n    # If there are more than 4 differences, we cannot fix it with one swap\n    if len(diff_indices) > 4:\n        return False\n\n    # Check if we can sort the array with one swap\n    for i in range(len(diff_indices)):\n        for j in range(i + 1, len(diff_indices)):\n            # Swap the two differing elements\n            arr[diff_indices[i]], arr[diff_indices[j]] = arr[diff_indices[j]], arr[diff_indices[i]]\n            # Check if the array can be sorted by rotations\n            if is_sorted_after_rotations(arr, sorted_arr):\n                return True\n            # Swap back\n            arr[diff_indices[i]], arr[diff_indices[j]] = arr[diff_indices[j]], arr[diff_indices[i]]\n\n    return False\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 171, in <module>\n  File \"<string>\", line 169, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/69", "completion": "\n    card_indices = {}\n    \n    for index, card in enumerate(cards):\n        if card != 0 and magicNumber % card == 0:\n            complement = magicNumber // card\n            if complement in card_indices:\n                return (card_indices[complement], index)\n            card_indices[card] = index\n            \n    return \"No magic today\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    \n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets:\n            return False\n        if path[i + 1] not in planets[path[i]]:\n            return False\n            \n    return True\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/71", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            start = ord('a') if c.islower() else ord('A')\n            return chr(start + (ord(c) - start + n) % 26)\n        return c\n\n    encrypted_string = ''.join(shift_char(c, n) for c in s)\n    vowel_count = sum(1 for c in encrypted_string.lower() if c in 'aeiou')\n    \n    return encrypted_string, vowel_count\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for item in lst:\n        name = item\n        tale_count = sum(c.isdigit() for c in item)\n        story = f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {tale_count} tales a day\"\n        result.append(story)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/73", "completion": "\n    total_treasures = sum(sum(row) for row in grid)\n    \n    if total_treasures == 0:\n        return 0\n    \n    trips_needed = math.ceil(total_treasures / bag_capacity)\n    \n    # Each trip consists of entering and exiting the pyramid\n    return trips_needed * 2\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/74", "completion": "\n    if not s:\n        return \"\"\n    \n    return ''.join(cipher.get(char, char) for char in s)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_str = []\n\n    for index, char in enumerate(input_str):\n        if char.lower() in vowels:\n            next_vowel = vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n            transformed_str.append(next_vowel.upper() if char.isupper() else next_vowel)\n        elif char.lower() in consonants:\n            next_consonant = consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n            transformed_str.append(next_consonant.upper() if char.isupper() else next_consonant)\n        elif char.isdigit():\n            transformed_str.append(str((int(char) + 1) % 10))\n        elif char == '?':\n            transformed_str.append('!' if index % 2 == 0 else '?')\n        else:\n            transformed_str.append(char)\n\n    return ''.join(transformed_str)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 154, in <module>\n  File \"<string>\", line 152, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    \n    pyramid = []\n    for num in reversed(lst):\n        pyramid.append('#' * num)\n    \n    return pyramid\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        count = 0\n        while n > 1 and n % k == 0:\n            n //= k\n            count += 1\n        return count\n\n    total_points = [points(num, k) for num in sequence]\n    return sorted(total_points, reverse=True)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    \n    # Collect elements from the first diagonal (top-left to bottom-right)\n    for i in range(n):\n        result.append(mat[i][i])\n    \n    # Collect elements from the second diagonal (top-right to bottom-left)\n    for i in range(n):\n        result.append(mat[i][n - 1 - i])\n    \n    # Remove the middle element if it was added twice (for odd n)\n    if n % 2 == 1:\n        middle_index = n // 2\n        result.remove(mat[middle_index][middle_index])\n    \n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    min_price = float('inf')\n\n    for i in range(days):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        current_profit = prices[i] - min_price\n        if current_profit > max_profit:\n            max_profit = current_profit\n\n    return max_profit\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/80", "completion": "\n    # Find the starting position\n    start_row, start_column = next((r, c) for r in range(len(map)) for c in range(len(map[0])) if map[r][c] == 'S')\n    path = [(start_row, start_column)]\n    current_position = (start_row, start_column)\n\n    # Define movement directions\n    directions = {\n        'up': (-1, 0),\n        'down': (1, 0),\n        'left': (0, -1),\n        'right': (0, 1)\n    }\n\n    for instruction in instructions:\n        if instruction in directions:\n            move_row, move_column = directions[instruction]\n            new_row = current_position[0] + move_row\n            new_column = current_position[1] + move_column\n\n            # Check if the new position is within bounds and not a wall\n            if (0 <= new_row < len(map) and\n                0 <= new_column < len(map[0]) and\n                map[new_row][new_column] != 'X'):\n                current_position = (new_row, new_column)\n\n            # Check if the player has reached the end\n            if map[current_position[0]][current_position[1]] == 'E':\n                path.append(current_position)\n                break\n\n        path.append(current_position)\n\n    return path\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 178, in <module>\n  File \"<string>\", line 176, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n\n    # Create a mapping of each character to its index in the alien dictionary\n    order = {char: index for index, char in enumerate(alien_dictionary)}\n\n    def compare_words(word1, word2):\n        # Compare two words based on the alien dictionary order\n        for c1, c2 in zip(word1, word2):\n            if order[c1] < order[c2]:\n                return -1\n            elif order[c1] > order[c2]:\n                return 1\n        # If all characters are the same up to the length of the shorter word\n        return len(word1) - len(word2)\n\n    for i in range(len(word_list) - 1):\n        if compare_words(word_list[i], word_list[i + 1]) > 0:\n            return \"INCORRECT\"\n\n    return \"CORRECT\"\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    element_count = {\n        'Fire': 0,\n        'Water': 0,\n        'Air': 0,\n        'Earth': 0\n    }\n\n    zodiac_dates = {\n        'Aries': ((3, 21), (4, 19), 'Fire'),\n        'Taurus': ((4, 20), (5, 20), 'Earth'),\n        'Gemini': ((5, 21), (6, 20), 'Air'),\n        'Cancer': ((6, 21), (7, 22), 'Water'),\n        'Leo': ((7, 23), (8, 22), 'Fire'),\n        'Virgo': ((8, 23), (9, 22), 'Earth'),\n        'Libra': ((9, 23), (10, 22), 'Air'),\n        'Scorpio': ((10, 23), (11, 21), 'Water'),\n        'Sagittarius': ((11, 22), (12, 21), 'Fire'),\n        'Capricorn': ((12, 22), (1, 19), 'Earth'),\n        'Aquarius': ((1, 20), (2, 18), 'Air'),\n        'Pisces': ((2, 19), (3, 20), 'Water')\n    }\n\n    for birthday in birthdays:\n        year, month, day = map(int, birthday.split('-'))\n        for sign, ((start_month, start_day), (end_month, end_day), element) in zodiac_dates.items():\n            if (month == start_month and day >= start_day) or (month == end_month and day <= end_day) or (start_month < month < end_month):\n                element_count[element] += 1\n                break\n\n    return {element: count for element, count in element_count.items() if count > 0}\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/83", "completion": "\n    vowels = set('aeiouAEIOU')\n    s_list = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s_list[left] not in vowels:\n            left += 1\n        elif s_list[right] not in vowels:\n            right -= 1\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(s_list)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path, paths):\n        if not node:\n            return\n        path.append(node)\n        if not tree[node]:  # If there are no children, it's a leaf\n            paths.append(path.copy())\n        else:\n            for child in tree[node]:\n                dfs(child, path, paths)\n        path.pop()  # Backtrack\n\n    paths = []\n    root = next(iter(tree))  # Get the root node\n    dfs(root, [], paths)\n    return paths\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 153, in <module>\n  File \"<string>\", line 150, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 38, in tree_traversal\n    dfs(root, [], paths)\n  File \"<string>\", line 33, in dfs\n                dfs(child, path, paths)\n  File \"<string>\", line 29, in dfs\n        if not tree[node]:  # If there are no children, it's a leaf\nKeyError: 2\n", "passed": false}
{"task_id": "EvoEval/85", "completion": "\n    from collections import deque\n\n    rows, cols = len(grid), len(grid[0])\n    target_row, target_col = coord\n    if grid[0][0] == 1 or grid[target_row][target_col] == 1:\n        return -1\n\n    queue = deque([(0, 0, 0)])  # (row, col, moves)\n    visited = set((0, 0))\n\n    while queue:\n        row, col, moves = queue.popleft()\n\n        if (row, col) == (target_row, target_col):\n            return moves\n\n        # Move down\n        if row + 1 < rows and grid[row + 1][col] == 0 and (row + 1, col) not in visited:\n            visited.add((row + 1, col))\n            queue.append((row + 1, col, moves + 1))\n\n        # Move right\n        if col + 1 < cols and grid[row][col + 1] == 0 and (row, col + 1) not in visited:\n            visited.add((row, col + 1))\n            queue.append((row, col + 1, moves + 1))\n\n    return -1\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 162, in <module>\n  File \"<string>\", line 160, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 139, in <module>\n  File \"<string>\", line 136, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 24, in sort_movies_by_ratings_and_release_date\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n  File \"<string>\", line 24, in <lambda>\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\nTypeError: bad operand type for unary -: 'str'\n", "passed": false}
{"task_id": "EvoEval/87", "completion": "\n    if not arr or not arr[0]:\n        return \"\"\n\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n\n    while top <= bottom and left <= right:\n        # Traverse from left to right\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n\n        # Traverse from top to bottom\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n\n        if top <= bottom:\n            # Traverse from right to left\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n\n        if left <= right:\n            # Traverse from bottom to top\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n\n    return ''.join(result)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 155, in <module>\n  File \"<string>\", line 153, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/88", "completion": "\n    result = {}\n    for planet, features in dict_of_planets.items():\n        population, size = features\n        if isinstance(population, int) and isinstance(size, int) and population > 0 and size > 0:\n            density = round(population / size, 2)\n            result[planet] = density\n    return result\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 143, in <module>\n  File \"<string>\", line 141, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/89", "completion": "\n    # Calculate the positions to be destroyed\n    positions_to_destroy = {ray - 1, ray, ray + 1}\n\n    # Filter out the remaining aliens\n    remaining_aliens = [alien for alien in aliens if alien not in positions_to_destroy]\n\n    return remaining_aliens\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 144, in <module>\n  File \"<string>\", line 142, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/90", "completion": "\n    digits1 = [int(d) for d in s1]\n    digits2 = [int(d) for d in s2]\n    \n    unique_sums = set()\n    \n    for d1 in digits1:\n        for d2 in digits2:\n            unique_sums.add(d1 + d2)\n    \n    return sum(unique_sums)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 138, in <module>\n  File \"<string>\", line 136, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    \n    for action, distance in spaceship_data:\n        if action == 'Launch':\n            if status == 'On Ground':\n                status = 'In Space'\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Move':\n            if status == 'In Space':\n                continue\n            else:\n                return 'Invalid Action Sequence'\n        elif action == 'Land':\n            if status == 'In Space':\n                status = 'On Ground'\n            else:\n                return 'Invalid Action Sequence'\n        else:\n            return 'Invalid Action Sequence'\n    \n    return status\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/92", "completion": "\n    fountain = []\n    for i in range(n):\n        letter = chr(ord('A') + (i % 26))\n        layer = letter * (2 * i + 1)\n        centered_layer = layer.center(2 * n - 1)\n        fountain.append(centered_layer)\n    return '\\n'.join(fountain)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 146, in <module>\n  File \"<string>\", line 144, in check\n        assert exact_match\nAssertionError\n", "passed": false}
{"task_id": "EvoEval/93", "completion": "\n    encoded_message = []\n    n_length = len(n_values)\n\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift = n_values[i % n_length]\n            if char.islower():\n                new_char = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            else:\n                new_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/94", "completion": "\n    return [' '.join(sorted(spell.split(), key=lambda word: (len(word), spell.split().index(word)))) for spell in strings]\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/95", "completion": "\n    if not all(len(row) == len(m) for row in m):\n        return 'Invalid Matrix'\n    \n    n = len(m)\n    primary_diagonal_sum = sum(m[i][i] for i in range(n))\n    secondary_diagonal_sum = sum(m[i][n - i - 1] for i in range(n))\n    \n    return abs(primary_diagonal_sum - secondary_diagonal_sum)\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/96", "completion": "\n    def product_of_digits(n):\n        n = abs(n)\n        product = 1\n        while n > 0:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for index, value in enumerate(lst):\n        if value % index == 0 and product_of_digits(value) == index:\n            magic_indices.append(index)\n\n    return sorted(magic_indices)\n", "result": "failed: Traceback (most recent call last):\n  File \"<string>\", line 148, in <module>\n  File \"<string>\", line 145, in check\n        exact_match, _ = is_equal(candidate(*inp), exp)\n  File \"<string>\", line 31, in get_magic_indices\n        if value % index == 0 and product_of_digits(value) == index:\nZeroDivisionError: integer modulo by zero\n", "passed": false}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n\n    encounter_order = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n    encountered_humans = []\n\n    for continent in encounter_order:\n        for human, human_continent in humans.items():\n            if human_continent == continent:\n                encountered_humans.append(human)\n\n    return encountered_humans\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_value = sequence[i-1] + sequence[i-2] + (i - 1)\n        sequence.append(next_value)\n\n    for i in range(len(sequence)):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n\n    return sequence\n", "result": "passed", "passed": true}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    current_position = 0\n\n    for round_time in rounds:\n        if len(players) == 0:\n            break\n        \n        # Calculate the number of positions to advance\n        positions_to_advance = (round_time * music) % len(players)\n        current_position = (current_position + positions_to_advance) % len(players)\n        \n        # Eliminate the player at the current position\n        players.pop(current_position)\n        \n        # The next round starts from the current position, which is now the next player\n        if len(players) > 0:\n            current_position %= len(players)\n\n    return players\n", "result": "passed", "passed": true}
