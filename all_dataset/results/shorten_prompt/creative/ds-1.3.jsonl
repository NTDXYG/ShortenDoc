{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            try:\n                item = float(item)\n            except ValueError:\n                return \"Invalid input\"\n            item_weight = item\n        else:\n            item_weight = item\n            item_weight = item_weight * 1.5\n\n        if item_weight > 5:\n            total_cost += (item_weight - 5) * 10 + 5 * 5\n        else:\n            total_cost += item_weight * 5\n\n    if location == 'Local':\n        return round(total_cost, 2)\n    elif location == 'National':\n        return round(total_cost * 1.5, 2)\n    elif location == 'International':\n        return round(total_cost * 2.5, 2)\n    else:\n        return round(total_cost, 2)\n"}
{"task_id": "EvoEval/1", "completion": "\n    base_cost = 5.0\n    additional_cost = 10.0\n    weight_factor = {\n        \"Local\": 1.0,\n        \"National\": 1.5,\n        \"International\": 2.5,\n    }\n\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            item = float(item)\n        total_cost += base_cost + (item * weight_factor.get(location, 1.0))\n        if item > 5.0:\n            total_cost += additional_cost\n\n    return round(total_cost, 2)\n"}
{"task_id": "EvoEval/2", "completion": "\n    pass\n"}
{"task_id": "EvoEval/3", "completion": "\n    def get_combinations(input_string: str, index: int, current_string: str, result: List[str]):\n        if index == len(input_string):\n            result.append(current_string)\n            return\n        for i in range(index, len(input_string)):\n            get_combinations(input_string, i + 1, current_string + input_string[i], result)\n\n    result = []\n    get_combinations(input_string, 0, \"\", result)\n    return result\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n\n    max_candle = candles[0]\n    count = 1\n\n    for candle in candles[1:]:\n        if candle > max_candle:\n            max_candle = candle\n            count += 1\n\n    return count\n"}
{"task_id": "EvoEval/5", "completion": "\n    result = []\n    row, col = 0, 0\n    while len(matrix) > 0:\n        result.append(matrix[row][col])\n        if row % 2 == 0:  # moving right\n            if col == len(matrix[row]) - 1:  # reached right end, move down\n                row += 1\n            elif col == 0:  # reached left end, move down\n                row += 1\n            else:  # move right\n                col += 1\n        else:  # moving left\n            if col == 0:  # reached left end, move down\n                row += 1\n            elif col == len(matrix[row]) - 1:  # reached right end, move down\n                row += 1\n            else:  # move left\n                col -= 1\n    return result\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if grid[x][y] == 1:\n        return grid\n    elif grid[x][y] == 0:\n        for dx, dy in [(-1, -1), (0, -1), (1, -1), (-1, 0), (1, 0), (-1, 1), (0, 1), (1, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                grid[nx][ny] = 0\n        return grid\n    else:\n        return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    # Define the starting point\n    x, y = 0, 0\n\n    # Define the direction\n    directions = {0: (0, 1), 1: (1, 0), 2: (0, -1), 3: (-1, 0)}\n\n    # Define the sequence\n    sequence = [0, 1, 0, 3]\n\n    # Check if the sequence leads to Shangri-La\n    for direction in sequence:\n        x, y = x + directions[direction][0], y + directions[direction][1]\n\n    # Check if the sequence leads back to the starting point\n    if (x, y) == (0, 0):\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    if 'P' not in canvas:\n        return canvas\n\n    new_canvas = list(canvas)\n    for i, c in enumerate(new_canvas):\n        if c == 'P':\n            if i > 0 and new_canvas[i-1] == '-' and i < len(new_canvas)-1 and new_canvas[i+1] == '-':\n                new_canvas[i] = '*'\n            else:\n                return 'Invalid canvas'\n\n    return ''.join(new_canvas)\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    import string\n    string = string.punctuation.replace(' ', '')\n    string = string.lower()\n    words = string.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animals = {'C': 'meow', 'D': 'woof', 'B': 'chirp'}\n    animal_sounds = animal_string.split()\n    count_list = [0]*len(animals)\n\n    for sound in animal_sounds:\n        if sound[0] in animals:\n            if count_list[animals.index(sound[0])] < 2:\n                count_list[animals.index(sound[0])] += 1\n\n    return count_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {', '.join(fruits)} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    c = Counter(flux_values)\n    max_occurrence = max(c.values())\n    sum_of_elements = sum(flux_values)\n    return sum_of_elements * max_occurrence\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n\n    from collections import Counter\n    count_dict = Counter(elems)\n    rarest_element = min(count_dict, key=count_dict.get)\n\n    return rarest_element\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    new_name = ''\n    for char in name:\n        if char.lower() in vowels:\n            new_name += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            new_name += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            new_name += char\n    return new_name\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    # Count the frequency of each card\n    card_freq = {}\n    for card in hand:\n        if card[0] in card_freq:\n            card_freq[card[0]] += 1\n        else:\n            card_freq[card[0]] = 1\n\n    # Sort the cards by their values\n    sorted_cards = sorted(card_freq.items(), key=lambda x: x[0])\n\n    # Evaluate the hand\n    score = 0\n    pair = False\n    triple = False\n    quadruple = False\n    for card, freq in sorted_cards:\n        if freq == 2:\n            pair = True\n            score += int(card)\n        elif freq == 3:\n            triple = True\n            score += int(card) * 2\n        elif freq == 4:\n            quadruple = True\n            score += int(card) * 3\n\n    if pair and triple:\n        score += int(sorted_cards[-1][0]) * 4\n    elif pair and quadruple:\n        score += int(sorted_cards[-1][0]) * 6\n    elif triple and quadruple:\n        score += int(sorted_cards[-1][0]) * 7\n\n    return score\n\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib_list = [0, 1]\n        for i in range(2, n):\n            fib_list.append(fib_list[i-1] + fib_list[i-2])\n        return sum(fib_list)\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    def sum_of_digits(n: int) -> int:\n        return sum(int(digit) for digit in str(n))\n\n    i = 1\n    while True:\n        if sum_of_digits(i) == 7:\n            if n == 1:\n                return i\n            else:\n                n -= 1\n        i += 1\n"}
{"task_id": "EvoEval/19", "completion": "\n    def vampire_in_row(row):\n        return sum(1 for i in range(len(row)) if row[i] == 2)\n\n    def vampire_in_col(col):\n        return sum(1 for i in range(len(col)) if col[i] == 2)\n\n    def vampire_in_square(m, r, c):\n        return sum(1 for i in range(r, r + 3) for j in range(c, c + 3) if m[i][j] == 2)\n\n    def vampire_in_matrix(m):\n        n = len(m)\n        return sum(vampire_in_row(row) + vampire_in_col(col) + vampire_in_square(m, i, j) for i in range(n) for j in range(n) if m[i][j] == 1)\n\n    return vampire_in_matrix(m)\n\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n < 0:\n        return []\n    result = []\n    for i in range(1, n + 1):\n        result.append(','.join(map(str, range(1, i + 1))))\n        result.append(','.join(map(str, range(i, 0, -1))))\n    return result\n\n"}
{"task_id": "EvoEval/21", "completion": "\n    def is_word_in_row(grid, word):\n        for i in range(len(grid)):\n            if word in ''.join(grid[i]):\n                return True\n        return False\n\n    def is_word_in_col(grid, word):\n        transposed = list(map(list, zip(*grid)))\n        return is_word_in_row(transposed, word)\n\n    def is_word_in_diag(grid, word):\n        n = len(grid)\n        for i in range(n):\n            for j in range(n):\n                if i + len(word) <= n and j + len(word) <= n:\n                    if word in ''.join(grid[i+k][j+k] for k in range(len(word))):\n                        return True\n                if i - len(word) >= 0 and j + len(word) <= n:\n                    if word in ''.join(grid[i-k][j+k] for k in range(len(word))):\n                        return True\n                if i - len(word) >= 0 and j - len(word) >= 0:\n                    if word in ''.join(grid[i-k][j-k] for k in range(len(word))):\n                        return True\n        return False\n\n    return all(is_word_in_row(grid, word) or is_word_in_col(grid, word) or is_word_in_diag(grid, word) for word in words)\n\n"}
{"task_id": "EvoEval/22", "completion": "\n    light_year = 9.461 * 10**12\n    distance = t * v\n    return distance / light_year\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        while True:\n            n += 1\n            if is_prime(n):\n                return n\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    result = \"\"\n    for c in s:\n        if 'a' <= c <= 'z':\n            result += str(primes[ord(c) - ord('a')])\n        else:\n            result += c\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    pass\n"}
{"task_id": "EvoEval/25", "completion": "\n    # Split the text into sentences\n    sentences = text.split('. ')\n    \n    # Initialize variables\n    max_frequency = 0\n    max_sentence = \"\"\n    word_frequency = 0\n    \n    # Iterate over the sentences\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n        \n        # Count the frequency of the word\n        word_frequency += words.count(word)\n        \n        # Check if the current sentence is the max\n        if word_frequency > max_frequency:\n            max_frequency = word_frequency\n            max_sentence = sentence\n            \n        # Reset the word frequency for the next sentence\n        word_frequency = 0\n    \n    # Return the result\n    return (max_frequency, max_sentence)\n"}
{"task_id": "EvoEval/26", "completion": "\n    if start == end:\n        return []\n\n    directions = []\n    while start != end:\n        if start[0] < end[0]:\n            start = (start[0] + 1, start[1])\n            directions.append('down')\n        elif start[1] < end[1]:\n            start = (start[0], start[1] + 1)\n            directions.append('right')\n        else:\n            start = (start[0] - 1, start[1])\n            directions.append('up')\n\n        if start == end:\n            break\n\n        if start[0] > end[0]:\n            start = (start[0] - 1, start[1])\n            directions.append('left')\n\n    return directions\n\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    if income <= 10000:\n        return 0\n    elif income <= 25000:\n        return (income - 10000) * 0.15\n    elif income <= 45000:\n        return (income - 25000) * 0.25\n    else:\n        return (income - 45000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    substrings = set()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substrings.add(s[i:j])\n\n    return [s for s in substrings if is_palindrome(s)]\n\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    import random\n    random.seed(seed)\n    shuffled_playlist = []\n    for i in range(len(playlist)):\n        if \"Rock\" not in playlist[i]:\n            shuffled_playlist.append(playlist[(seed * 16807) % len(playlist)])\n        seed = (seed * 16807) % 2147483647\n    return shuffled_playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    # Initialize a list to store the number of ways to reach each step\n    ways = [0] * (n + 1)\n\n    # The only way to reach the 0th step is from the 1st step\n    ways[0] = 1\n\n    # For each magic stone, for each step from the magic stone's power to n, add the number of ways to reach the previous step\n    for stone in magic_stones:\n        for i in range(stone, n + 1):\n            ways[i] += ways[i - stone]\n\n    # The number of distinct ways to reach the top of the staircase is the last element in the ways list\n    return ways[-1]\n"}
{"task_id": "EvoEval/34", "completion": "\n    if m > n:\n        return \"Invalid input\"\n    transformation_list = []\n    for i in range(1, n + 1):\n        if i == m:\n            transformation_list.append(0)\n        elif i < m:\n            transformation_list.append(0)\n        else:\n            if i == m + 1:\n                transformation_list.append(10)\n            else:\n                transformation_list.append(min(100, transformation_list[-1] + (i - m) * 10))\n    return transformation_list\n\n"}
{"task_id": "EvoEval/35", "completion": "\n    if email.count(\"@\") != 1 or email[0] == email[-1] or \".\" not in email[email.find(\"@\"):]:\n        return False\n    else:\n        return True\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(xs) == 0:\n        return []\n    result = [0] * (len(xs) + 1)\n    for i in range(len(xs)):\n        result[i] = xs[i] / (i + 1)\n    return result\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed_s = ''\n\n    for char in s:\n        if char.lower() in vowels:\n            transformed_s += char.lower().replace(char, vowels[(vowels.index(char.lower()) + 1) % len(vowels)])\n        elif char.lower() in consonants:\n            transformed_s += char.lower().replace(char, consonants[(consonants.index(char.lower()) + 1) % len(consonants)])\n        else:\n            transformed_s += char\n\n    return transformed_s\n\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\" : \"\ud83d\ude09\"\n    }\n\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n\n    return sentence\n"}
{"task_id": "EvoEval/39", "completion": "\n    def asciiArt(n, s):\n        return (s * n).center(len(s) * n)\n\n    return '\\n'.join(asciiArt(n, line) for line in s)\n\n"}
{"task_id": "EvoEval/40", "completion": "\n    # First, we sort the potions by their power level in descending order.\n    # Then, we iterate over the sorted potions.\n    # If the current potion's power level is less than the target, we add it to the result list.\n    # If the current potion's power level is equal to the target, we add it to the result list.\n    # If the current potion's power level is greater than the target, we continue to the next potion.\n    # Finally, we return the result list.\n\n    potions.sort(key=lambda x: int(x.split()[1]), reverse=True)\n    result = []\n    total_power = 0\n    for potion in potions:\n        potion_name, potion_power = potion.split()\n        if total_power + int(potion_power) > target:\n            break\n        total_power += int(potion_power)\n        result.append(potion)\n    return result\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    def minEnergy(self, arr):\n        m, n = len(arr), len(arr[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = arr[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + arr[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + arr[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n        return dp[-1][-1]\n"}
{"task_id": "EvoEval/42", "completion": "\n    def find_second_most_valuable_item(items):\n        if len(items) < 2:\n            return None\n        items.sort(reverse=True)\n        return items[1]\n\n    legendary_item_found = False\n    second_most_valuable_item_rarity = find_second_most_valuable_item(player_input)\n\n    if 5 in player_input:\n        legendary_item_found = True\n\n    return (legendary_item_found, second_most_valuable_item_rarity)\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    remaining_fuel = fuel - fuel_consumption\n    if remaining_fuel < 0:\n        return 'Insufficient fuel'\n    elif distance / speed <= remaining_fuel:\n        return round(remaining_fuel - (distance / speed) * fuel_consumption, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    unicorns_weight = sum(q)\n    total_dragon_dragon_weight = w + e\n    if unicorns_weight <= total_dragon_dragon_weight:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    max_view = 0\n    current_view = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            current_view += 1\n        else:\n            max_view = max(max_view, current_view)\n            current_view = 0\n    max_view = max(max_view, current_view)\n    return max_view\n"}
{"task_id": "EvoEval/46", "completion": "\n    def hidden_message(test_cases):\n        secret_messages = []\n        for test_case in test_cases:\n            for word in test_case:\n                if 'Take the cannoli.' in word.lower():\n                    secret_messages.append(word.replace('Take the cannoli.', ''))\n                else:\n                    secret_messages.append('Take the cannoli.')\n        return secret_messages\n\n    print(hidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']]))\n    print(hidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']]))\n    print(hidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']]))\n\nhidden_message([['Hello, world!', 'okay?'], ['Every', 'good', 'boy', 'does', 'fine']])\nhidden_message([['apple'], ['Banana', 'grape', 'kiwi', 'melon']])\nhidden_message([['This', 'is', '?a', 'test', 'case??'], ['hi']])\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n        available[ingredient] -= quantity\n    return True\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n        if inventory[item] <= 0:\n            del inventory[item]\n    return inventory\n"}
{"task_id": "EvoEval/49", "completion": "\n\n        Decode a morse code string into plain text.\n        \"\"\"\n        decoded_text = ''\n        for symbol in morse_code.split():\n            if symbol == ' ':\n                decoded_text += ' '\n            else:\n                decoded_text += list(morse_code_dict.keys())[list(morse_code_dict.values()).index(symbol)]\n        return decoded_text\n\n    return ' '.join(decode_morse(msg) for msg in msg.split('/'))\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code_dict = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.', '&': '-.-.--', ':': '---...', ';': '-.-.-.', '=': '-...-', '+': '.-.-.', '/': '-..-.', '-': '-....-', '(': '-.--.', ')': '-.--.-', '@': '.--.-.', ' ': '/'}\n    morse_code = ''\n    for char in text.upper():\n        if char in morse_code_dict:\n            morse_code += morse_code_dict[char] + ' '\n        else:\n            morse_code += char + ' '\n    return morse_code.strip()\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string or not list_of_alphabets:\n        return ''\n    result = ''\n    for i in range(len(string)):\n        if i < len(list_of_alphabets):\n            result += list_of_alphabets[i]\n        else:\n            result += list_of_alphabets[i - len(list_of_alphabets)]\n    return result\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    # sort the orders in descending order\n    orders.sort(reverse=True)\n\n    # initialize the number of batches and the number of orders fulfilled\n    batches = 0\n    orders_fulfilled = 0\n\n    # iterate over the orders\n    for order in orders:\n        # if the order can be fulfilled in a batch, add it to the number of orders fulfilled and increment the number of batches\n        if order <= n:\n            orders_fulfilled += 1\n            batches += 1\n            n -= order\n        # if the order cannot be fulfilled in a batch, break the loop\n        if n == 0:\n            break\n\n    # return the number of orders fulfilled in a day\n    return min(orders_fulfilled, m)\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans = str.maketrans(vowels + consonants, vowels[1:] + consonants[1:])\n    result = s.translate(trans)\n    if len(s) % 2 == 0:\n        result = result.replace('a', 'A').replace('e', 'E').replace('i', 'I').replace('o', 'O').replace('u', 'U')\n    else:\n        result = result.replace('a', 'B').replace('e', 'D').replace('i', 'F').replace('o', 'H').replace('u', 'J')\n    return result\n\n"}
{"task_id": "EvoEval/54", "completion": "\n    star_coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                star_coordinates.append((i, j))\n    return star_coordinates\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    def shift_char(c, shift):\n        if not c.isalpha():\n            return c\n        ascii_offset = ord('a') if c.islower() else ord('A')\n        return chr(((ord(c) - ascii_offset + shift) % 26) + ascii_offset)\n\n    return ''.join(shift_char(c, shift) for c, shift in zip(message, (shift + i for i in range(len(message)))))\n\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..', ' ': '/'}\n    return ' '.join(morse_code_dict[i] for i in s if i in morse_code_dict)\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def transform_dish(dish, spell):\n        transformed_dish = ''\n        for char in spell:\n            if char in dish:\n                transformed_dish += char\n            else:\n                transformed_dish += char * (len(dish) - len(transformed_dish))\n                break\n        return transformed_dish\n\n    transformed_menu = {}\n    for dish, price in menu.items():\n        transformed_dish = transform_dish(dish, magic_spell)\n        transformed_menu[transformed_dish] = price\n    return transformed_menu\n\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    trans_phrase = ''\n    words = earth_phrase.split(' ')\n    for word in words:\n        new_word = ''\n        for char in word:\n            if char in vowels:\n                new_word += vowels[(vowels.index(char)+1)%5]\n            elif char in consonants:\n                new_word += consonants[(consonants.index(char)+1)%21]\n            elif char == ' ':\n                new_word += '@'\n            else:\n                new_word += char\n        new_word = new_word[0].upper() + new_word[1:]\n        if word[0] in vowels:\n            new_word += 'xy'\n        else:\n            new_word += 'yz'\n        trans_phrase += new_word + ' '\n    return trans_phrase.rstrip()\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n\n    ingredient_list = sorted([(k, v) for k, v in ingredient_dict.items()], key=lambda x: (-x[1], x[0]))\n\n    return ingredient_list\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    def is_sugar(sugar_locations, position):\n        return position in sugar_locations\n\n    def is_valid_position(path_length, position, direction):\n        if direction == \"right\":\n            return position + 1 < path_length\n        else:\n            return position - 1 >= 0\n\n    def is_happy_ant(sugar_locations, position, ants):\n        for ant in ants:\n            if is_sugar(sugar_locations, ant[0]) and ant[1] == \"right\":\n                return True\n            elif is_sugar(sugar_locations, ant[0]) and ant[1] == \"left\":\n                return True\n        return False\n\n    happy_ants = 0\n    for ant in ant_positions:\n        if is_valid_position(path_length, ant[0], ant[1]) and is_happy_ant(sugar_locations, ant[0], ant_positions):\n            happy_ants += 1\n    return happy_ants\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i].isalpha():\n                if s[i].lower() in vowels:\n                    result += s[i].upper()\n                else:\n                    result += vowels[(vowels.index(s[i].lower())+1)%5]\n            else:\n                result += s[i]\n        else:\n            if s[i].isalpha():\n                if s[i].lower() in consonants:\n                    result += consonants[(consonants.index(s[i].lower())-1)%26]\n                else:\n                    result += consonants[(consonants.index(s[i].lower())+1)%26]\n            else:\n                result += s[i]\n    return result\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_recipe[ingredient] = quantity * conversion_factor\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    def create_pyramid(p):\n        blocks = [p]\n        while p > 0:\n            if p % 2 == 0:\n                p -= 2\n            else:\n                p -= 3\n            blocks.append(p)\n        return blocks[::-1]\n\n    print(create_pyramid(10))\n    print(create_pyramid(9))\n\ncreate_pyramid(10)\ncreate_pyramid(9)\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_divisible(n, divisor):\n        return n % divisor == 0\n\n    result = []\n    for i in range(start, end + 1):\n        if is_prime(i) and is_divisible(i, divisor):\n            result.append(i)\n    return result\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    result = {}\n    for dish, details in menu.items():\n        if dish in order:\n            remove = set(order[dish].get(\"remove\", []))\n            add = set(order[dish].get(\"add\", []))\n            result[dish] = (details - remove) | add\n        else:\n            result[dish] = details\n    return result\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_anagram(n, m):\n        return sorted(str(n)) == sorted(str(m))\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n    pairs = []\n\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                pairs.append((primes[i], primes[j]))\n\n    return sorted(pairs)\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        total_calories = 0\n        if customer in meals:\n            for meal in meals[customer]:\n                total_calories += meal['calories']\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    if not arr:\n        return True\n\n    def check_sorted(arr):\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n\n    def rotate(arr):\n        arr.insert(0, arr.pop())\n        return arr\n\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n        return arr\n\n    def dfs(arr, visited):\n        if check_sorted(arr):\n            return True\n        for i in range(len(arr)):\n            if (not visited[i]) and (i > 0 and arr[i] < arr[i - 1]):\n                visited[i] = True\n                if dfs(rotate(arr), visited):\n                    return True\n                visited[i] = False\n            if (not visited[i]) and (i < len(arr) - 1 and arr[i] > arr[i + 1]):\n                visited[i] = True\n                if dfs(swap(arr, i, i + 1), visited):\n                    return True\n                visited[i] = False\n        return False\n\n    return dfs(arr, [False] * len(arr))\n\n"}
{"task_id": "EvoEval/69", "completion": "\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i]*cards[j] == magicNumber:\n                return (i, j)\n    return \"No magic today\"\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    encrypted_string = \"\"\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            ascii_offset = ord('a') if char.islower() else ord('A')\n            encrypted_char = chr((ord(char) - ascii_offset + n) % 26 + ascii_offset)\n            if encrypted_char in vowels:\n                vowel_count += 1\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return (encrypted_string, vowel_count)\n\n"}
{"task_id": "EvoEval/72", "completion": "\n    result = []\n    for string in lst:\n        name = string[0]\n        count = sum(c.isdigit() for c in string)\n        result.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {count} tales a day\")\n    return result\n"}
{"task_id": "EvoEval/73", "completion": "\n    def count_trips(grid, bag_capacity):\n        m, n = len(grid), len(grid[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[m][n] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if grid[i][j] == 0:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1]\n                else:\n                    dp[i][j] = dp[i + 1][j] * dp[i][j + 1]\n        return dp[0][0]\n\n    return count_trips(grid, bag_capacity)\n"}
{"task_id": "EvoEval/74", "completion": "\n    result = \"\"\n    for char in s:\n        if char in cipher:\n            result += cipher[char]\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    digits = '0123456789'\n    special_chars = '.,;: !()?'\n    result = ''\n    for i in range(len(input_str)):\n        if input_str[i] in vowels:\n            result += vowels[(vowels.index(input_str[i])+1)%len(vowels)]\n        elif input_str[i] in consonants:\n            result += consonants[(consonants.index(input_str[i])+1)%len(consonants)]\n        elif input_str[i] in digits:\n            result += str((int(input_str[i])+1)%10)\n        elif input_str[i] in special_chars:\n            result += input_str[i] if i%2==0 else '!' if i%4==0 else '?'\n        else:\n            result += input_str[i]\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    if not lst:\n        return []\n    pyramid = []\n    for num in lst:\n        pyramid.append('#' * num)\n    return pyramid[::-1]\n\n"}
{"task_id": "EvoEval/77", "completion": "\n    def points(n, k):\n        count = 0\n        while n != 1:\n            n = n // k if n % k == 0 else n + 1\n            count += 1\n        return count\n\n    sequence.sort(reverse=True)\n    return [points(n, k) for n in sequence]\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    m = n // 2\n    res = []\n    for i in range(m):\n        for j in range(m):\n            res.append(mat[i][j])\n            res.append(mat[i][n-1-j])\n            res.append(mat[n-1-i][n-1-j])\n            res.append(mat[n-1-i][j])\n    return res\n"}
{"task_id": "EvoEval/79", "completion": "\n    # Initialize the maximum profit to 0\n    max_profit = 0\n\n    # Iterate over the prices list\n    for i in range(days - 1):\n        # If the current price is less than the next price, buy the fruit\n        if prices[i] < prices[i + 1]:\n            max_profit += prices[i + 1] - prices[i]\n\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    start_row, start_column = 0, 0\n    directions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}\n    path = [(start_row, start_column)]\n\n    for direction in instructions:\n        move_row, move_column = directions[direction]\n        new_row, new_column = start_row + move_row, start_column + move_column\n\n        if (new_row < 0 or new_column < 0 or new_row >= len(map) or new_column >= len(map[0])) or map[new_row][new_column] == 'X':\n            path.append(start_row, start_column)\n        else:\n            start_row, start_column = new_row, new_column\n            path.append((start_row, start_column))\n\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dictionary = list(alien_dictionary)\n    for i in range(len(word_list) - 1):\n        for j in range(len(word_list[i]) - 1):\n            if word_list[i][j] > alien_dictionary[j]:\n                return \"INCORRECT\"\n            elif word_list[i][j] < alien_dictionary[j]:\n                break\n        else:\n            continue\n        break\n    return \"CORRECT\"\n\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n\n    zodiac_signs = {\n        \"Aquarius\": [\"01-20\", \"02-18\", \"03-20\", \"04-19\", \"05-20\", \"06-20\", \"07-22\", \"08-22\", \"09-22\", \"10-22\", \"11-21\", \"12-21\"],\n        \"Pisces\": [\"03-21\", \"04-20\", \"05-21\", \"06-21\", \"07-23\", \"08-23\", \"09-23\", \"10-23\", \"11-22\", \"12-22\", \"01-23\"],\n        \"Aries\": [\"01-02\", \"02-18\", \"03-20\", \"04-19\", \"05-20\", \"06-20\", \"07-22\", \"08-22\", \"09-22\", \"10-22\", \"11-21\", \"12-21\"],\n        \"Taurus\": [\"01-20\", \"02-18\", \"03-20\", \"04-19\", \"05-20\", \"06-20\", \"07-22\", \"08-22\", \"09-22\", \"10-22\", \"11-21\", \"12-21\"],\n        \"Gemini\": [\"03-21\", \"04-20\", \"05-21\", \"06-21\", \"07-23\", \"08-23\", \"09-23\", \"10-23\", \"11-22\", \"12-22\", \"01-23\"],\n        \"Cancer\": [\"01-20\", \"02-18\", \"03-20\", \"04-19\", \"05-20\", \"06-20\", \"07-"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(tree, path, res):\n        if not tree:\n            return\n        if not tree.get('left') and not tree.get('right'):\n            res.append(path + [tree.keys()[0]])\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], res)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], res)\n        if 'left' in tree:\n            dfs(tree['left'], path + [tree.keys()[0]], res)\n        if 'right' in tree:\n            dfs(tree['right'], path + [tree.keys()[0]], res)\n\n    res = []\n    dfs(tree, [], res)\n    return res\n\n"}
{"task_id": "EvoEval/85", "completion": "\n    def min_moves(coord, grid):\n        start = tuple(coord)\n        end = tuple(map(sum, zip((0,0), coord)))\n        moves = 0\n        visited = set()\n        queue = collections.deque([(start, moves)])\n        while queue:\n            current, moves = queue.popleft()\n            if current == end:\n                return moves\n            for direction in ((0,1), (1,0)):\n                next_pos = (current[0]+direction[0], current[1]+direction[1])\n                if 0<=next_pos[0]<len(grid) and 0<=next_pos[1]<len(grid[0]) and grid[next_pos[0]][next_pos[1]]==0 and next_pos not in visited:\n                    queue.append((next_pos, moves+1))\n                    visited.add(next_pos)\n        return -1\n\n    return min_moves(coord, grid)\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie for movie, rating in sorted_movies]\n\n\nmovies_dict = {\"Toy Story\": [8.3, 1995], \"Toy Story 2\": [7.9, 1999], \"Toy Story 3\": [8.3, 2010], \"Toy Story 4\": [7.8, 2019]}"}
{"task_id": "EvoEval/87", "completion": "\n    def spiral(arr):\n        if not arr or not arr[0]:\n            return ''\n        res = []\n        while arr:\n            res += arr.pop(0)\n            if arr and arr[0]:\n                for row in arr:\n                    res.append(row.pop())\n            if arr:\n                res += arr.pop()[::-1]\n            if arr and arr[0]:\n                for row in arr[::-1]:\n                    res.append(row.pop(0))\n        return ''.join(res)\n\n    return spiral(arr)\n"}
{"task_id": "EvoEval/88", "completion": "\n    def calculate_population_density(planet, population, size):\n        if population and size:\n            return round(population / size, 2)\n        else:\n            return None\n\n    return {planet: calculate_population_density(planet, population, size) for planet, (population, size) in dict_of_planets.items() if population and size}\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    def is_adjacent(a, b):\n        return abs(a - b) == 1\n\n    def is_odd(n):\n        return n % 2 != 0\n\n    def is_target(a, target):\n        return a == target or is_adjacent(a, target)\n\n    def remove_target(lst, target):\n        return [i for i in lst if not is_target(i, target)]\n\n    return remove_target(aliens, ray)\n\n"}
{"task_id": "EvoEval/90", "completion": "\n    def unique_combinations(s1, s2):\n        return set(itertools.permutations(s1, len(s1)) + itertools.permutations(s2, len(s2)))\n\n    return sum(int(d1) * int(d2) for d1, d2 in unique_combinations(s1, s2))\n"}
{"task_id": "EvoEval/91", "completion": "\n    def validate_action(action, status):\n        if action == 'Launch' and status != 'On Ground':\n            return False\n        if action == 'Move' and status != 'In Space':\n            return False\n        if action == 'Land' and status != 'In Space':\n            return False\n        return True\n\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if not validate_action(action, status):\n            return 'Invalid Action Sequence'\n        if action == 'Launch':\n            status = 'In Space'\n        elif action == 'Move':\n            status = 'In Space'\n        else:\n            status = 'On Ground'\n    return status\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ''\n        for j in range(n - i - 1):\n            layer += ' '\n        for j in range(2 * i + 1):\n            layer += alphabet[j]\n        for j in range(2 * i - 1, -1, -1):\n            layer += alphabet[j]\n        result.append(layer)\n    return '\\n'.join(result)\n\n"}
{"task_id": "EvoEval/93", "completion": "\n    def shift_char(c, n):\n        if c.isalpha():\n            ascii_offset = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - ascii_offset + n) % 26 + ascii_offset)\n        else:\n            return c\n\n    def shift_message(message, n_values):\n        return ''.join(shift_char(c, n_values[i % len(n_values)]) for i, c in enumerate(message))\n\n    return shift_message(message, n_values)\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sort_words(spell):\n        words = spell.split()\n        words.sort(key=len)\n        return ' '.join(words)\n\n    return [sort_words(spell) for spell in strings]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    def is_square(m):\n        return len(m) == len(m[0])\n\n    def diagonal_sum(m, diagonal_num):\n        if not is_square(m):\n            return 'Invalid Matrix'\n        if diagonal_num == 1:\n            return sum(m[i][i] for i in range(len(m)))\n        elif diagonal_num == 2:\n            return sum(m[i][len(m)-i-1] for i in range(len(m)))\n        else:\n            return 'Invalid Diagonal Number'\n\n    return abs(diagonal_sum(m, 1) - diagonal_sum(m, 2))\n\n"}
{"task_id": "EvoEval/96", "completion": "\n    def get_product_of_digits(n):\n        product = 1\n        while n:\n            product *= n % 10\n            n //= 10\n        return product\n\n    magic_indices = []\n    for i in range(len(lst)):\n        if lst[i] % i == 0 and get_product_of_digits(i) == i:\n            magic_indices.append(i)\n\n    return sorted(magic_indices)\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    def validate(alien, humans):\n        if not isinstance(alien, str) or not isinstance(humans, dict):\n            return False\n        if alien not in [\"Xenomorph\", \"Predator\", \"Klingon\"]:\n            return False\n        for human in humans.values():\n            if human not in [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]:\n                return False\n        return True\n\n    def sort_humans(humans):\n        return sorted(humans, key=lambda x: list(humans).index(x))\n\n    if not validate(alien, humans):\n        return []\n\n    encounter_order = [\"Asia\", \"Africa\", \"North America\", \"South America\", \"Europe\"]\n    encounter_order.remove(humans[alien])\n    encounter_order.extend(list(humans.keys())[:len(encounter_order)])\n\n    return sort_humans([human for human in encounter_order if humans[human] == alien])\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n        if is_prime(next_num):\n            sequence[i] = 'prime'\n    return sequence\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for i in range(len(rounds)):\n        for j in range(rounds[i]):\n            if players:\n                players.pop(0)\n    return players\n\n"}
