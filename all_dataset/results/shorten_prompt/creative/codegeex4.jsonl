{"task_id": "EvoEval/0", "completion": "\n    total_cost = 0.0\n    string_multiplier = 1.0\n    for item in items:\n        if isinstance(item, str):\n            string_multiplier *= 1.5\n            item = 1.0\n        total_cost += 5.0 * string_multiplier\n        if item > 5.0:\n            total_cost += 10.0\n    if location == \"National\":\n        total_cost *= 1.5\n    elif location == \"International\":\n        total_cost *= 2.5\n    return f\"{total_cost:.2f}\""}
{"task_id": "EvoEval/1", "completion": "\n    total_cost = 0.0\n    for item in items:\n        if isinstance(item, str):\n            weight = 1.0\n        else:\n            weight = item\n        if weight > 5.0:\n            total_cost += 10.0\n        total_cost += 5.0\n    if location == 'National':\n        total_cost *= 1.5\n    elif location == 'International':\n        total_cost *= 2.5\n    return round(total_cost, 2)"}
{"task_id": "EvoEval/2", "completion": "\n    def caesar_cipher(word: str, key: Union[str, int]) -> str:\n        if isinstance(key, str):\n            key = sum(ord(c) for c in key)\n        encrypted_word = \"\"\n        for char in word:\n            if char.isalpha():\n                ascii_offset = ord('a') if char.islower() else ord('A')\n                encrypted_char = chr((ord(char) - ascii_offset + key) % 26 + ascii_offset)\n                encrypted_word += encrypted_char\n            else:\n                encrypted_word += char\n        return encrypted_word\n\n    return [caesar_cipher(word.lower(), key) for word in words]\n"}
{"task_id": "EvoEval/3", "completion": "\n    def backtrack(index, path):\n        if index == len(input_string):\n            combinations.append(path)\n            return\n        for i in range(index, len(input_string)):\n            num = int(input_string[index:i+1])\n            if num > 26:\n                break\n            backtrack(i+1, path + chr(ord('a') + num - 1))\n    \n    combinations = []\n    backtrack(0, \"\")\n    return combinations\n"}
{"task_id": "EvoEval/4", "completion": "\n    if not candles:\n        return 0\n    tallest = candles[0]\n    count = 1\n    for i in range(1, len(candles)):\n        if candles[i] > tallest:\n            tallest = candles[i]\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    if not matrix or not matrix[0]:\n        return []\n    rows, cols = len(matrix), len(matrix[0])\n    result = []\n    for i in range(rows + cols - 1):\n        if i % 2 == 0:\n            row, col = min(i, rows - 1), max(0, i - rows + 1)\n            while row >= 0 and col < cols:\n                result.append(matrix[row][col])\n                row -= 1\n                col += 1\n        else:\n            row, col = max(0, i - cols + 1), min(i, cols - 1)\n            while col >= 0 and row < rows:\n                result.append(matrix[row][col])\n                row += 1\n                col -= 1\n    return result\n\n"}
{"task_id": "EvoEval/6", "completion": "\n    x, y = position\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]):\n        return grid\n    if grid[x][y] == 1:\n        return grid\n    if grid[x][y] == 0:\n        return grid\n    if grid[x][y] == -1:\n        grid[x][y] = 0\n        for i in range(max(0, x-1), min(len(grid), x+2)):\n            for j in range(max(0, y-1), min(len(grid[0]), y+2)):\n                if grid[i][j] == -1:\n                    grid[i][j] = 0\n        return grid\n    return grid\n"}
{"task_id": "EvoEval/7", "completion": "\n    x, y = 0, 0\n    for direction in code_sequence:\n        if direction == 0:\n            y += 1\n        elif direction == 1:\n            x += 1\n        elif direction == 2:\n            y -= 1\n        elif direction == 3:\n            x -= 1\n    if x == 0 and y == 0:\n        return 'Shangri-La found'\n    else:\n        return 'Shangri-La not found'\n"}
{"task_id": "EvoEval/8", "completion": "\n    canvas = list(canvas)\n    painter = canvas.index('P')\n    canvas[painter] = '*'\n    for i in range(painter, -1, -1):\n        if canvas[i] == '#':\n            break\n        canvas[i] = '*'\n    for i in range(painter, len(canvas)):\n        if canvas[i] == '#':\n            break\n        canvas[i] = '*'\n    if canvas.count('*') % len(canvas) == 0:\n        return 'Invalid canvas'\n    return ''.join(canvas)\n"}
{"task_id": "EvoEval/9", "completion": "\n    import re\n    words = re.findall(r'\\b\\w+\\b', string.lower())\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    return frequency\n"}
{"task_id": "EvoEval/10", "completion": "\n    animal_dict = {'C': 0, 'D': 0, 'B': 0}\n    animal_count = 0\n    animal_list = []\n    for animal in animal_string:\n        if animal in animal_dict:\n            animal_dict[animal] += 1\n            animal_count += 1\n            if animal_count == 5:\n                break\n    for animal in animal_dict:\n        animal_list.append(animal_dict[animal])\n    return animal_list\n"}
{"task_id": "EvoEval/11", "completion": "\n    if len(fruits) == 1:\n        return f\"Oh, those {fruits[0]} from {location}? Marvelous!\"\n    elif len(fruits) == 2:\n        return f\"Oh, are those {fruits[0]} and {fruits[1]} from {location}? Marvelous!\"\n    else:\n        return f\"Oh, are those {', '.join(fruits[:-1])} and {fruits[-1]} from {location}? Marvelous!\"\n"}
{"task_id": "EvoEval/12", "completion": "\n    from collections import Counter\n    count = Counter(flux_values)\n    max_count = max(count.values())\n    max_value = min([k for k, v in count.items() if v == max_count])\n    total_sum = sum(flux_values)\n    return total_sum * max_value\n"}
{"task_id": "EvoEval/13", "completion": "\n    if not elems:\n        return None\n    count = {}\n    for elem in elems:\n        count[elem] = count.get(elem, 0) + 1\n    min_count = min(count.values())\n    rarest_elems = [k for k, v in count.items() if v == min_count]\n    return rarest_elems[0]\n"}
{"task_id": "EvoEval/14", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    alias = ''\n    for char in name:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                if char.isupper():\n                    alias += vowels[index + 1].upper()\n                else:\n                    alias += vowels[index + 1]\n            elif char.lower() in consonants:\n                index = consonants.index(char.lower())\n                if char.isupper():\n                    alias += consonants[index + 1].upper()\n                else:\n                    alias += consonants[index + 1]\n    return alias\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    values = [int(card[:-1]) if card[:-1].isdigit() else card[:-1] for card in hand]\n    values.sort()\n    if values.count(values[0]) == 5:\n        return values[0] * 4\n    elif values.count(values[0]) == 4:\n        return values[0] * 3\n    elif values.count(values[0]) == 3 and values.count(values[3]) == 2:\n        return values[0] * 2\n    elif values.count(values[0]) == 3:\n        return values[0] * 2\n    elif values.count(values[1]) == 2 and values.count(values[3]) == 2:\n        return max(values[0], values[2]) * 2\n    elif values.count(values[0]) == 2:\n        return values[0]\n    else:\n        return 0\n"}
{"task_id": "EvoEval/16", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n"}
{"task_id": "EvoEval/17", "completion": "\n    for wizard in wizards:\n        dragon_hp -= wizard[1]\n        if dragon_hp <= 0:\n            return wizard[0]\n    return 'The dragon won!'\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    if n == 1:\n        return 7\n    elif n == 2:\n        return 70\n    elif n == 3:\n        return 133\n    elif n == 4:\n        return 322\n    elif n == 5:\n        return 511\n    elif n == 6:\n        return 711\n    elif n == 7:\n        return 811\n    elif n == 8:\n        return 911\n    elif n == 9:\n        return 1022\n    elif n == 10:\n        return 1113\n    elif n == 11:\n        return 1222\n    elif n == 12:\n        return 1333\n    elif n == 13:\n        return 1444\n    elif n == 14:\n        return 1555\n    elif n == 15:\n        return 1666\n    elif n == 16:\n        return 1777\n    elif n == 17:\n        return 1888\n    elif n == 18:\n        return 1999\n    elif n == 19:\n        return 2000\n    elif n == 20:\n        return 2111\n    elif n == 21:\n        return 2222\n    elif n == 22:\n        return 2333\n    elif n == 23:\n        return 2444\n    elif n == 24:\n        return 2555\n    elif n == 25:\n        return 2666\n    elif n == 26:\n        return 2777\n    elif n == 27:\n        return 2888\n    elif n == 28:\n        return 2999\n    elif n == 29:\n        return 3000\n    elif n == 30:\n        return 3111\n    elif n == 31:\n        return 3222\n    elif n == 32:\n        return 3333\n    elif n == 33:\n        return 3444\n    elif n == 34:\n        return 3555\n    elif n == 35:\n        return 3666\n    elif n == 36:\n        return 3777\n    elif n == 37:\n        return 3888\n    elif n == 38:\n        return 3999\n    elif n == 39:\n"}
{"task_id": "EvoEval/19", "completion": "\n    danger = 0\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j] == 1:\n                if i > 0 and m[i-1][j] == 2:\n                    danger += 1\n                if i < len(m)-1 and m[i+1][j] == 2:\n                    danger += 1\n                if j > 0 and m[i][j-1] == 2:\n                    danger += 1\n                if j < len(m[i])-1 and m[i][j+1] == 2:\n                    danger += 1\n    return danger\n"}
{"task_id": "EvoEval/20", "completion": "\n    if n <= 0:\n        return []\n    pattern = []\n    for i in range(1, n+1):\n        pattern.append(str(i))\n    for i in range(n-1, 0, -1):\n        pattern.append(str(i))\n    return pattern\n"}
{"task_id": "EvoEval/21", "completion": "\n    def find_word(word, grid):\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == word[0]:\n                    if check_left_to_right(word, grid, i, j) or check_right_to_left(word, grid, i, j) or check_top_to_bottom(word, grid, i, j) or check_bottom_to_top(word, grid, i, j):\n                        return True\n        return False\n\n    def check_left_to_right(word, grid, i, j):\n        if j + len(word) > len(grid[i]):\n            return False\n        for k in range(len(word)):\n            if grid[i][j + k] != word[k]:\n                return False\n        return True\n\n    def check_right_to_left(word, grid, i, j):\n        if j - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i][j - k] != word[k]:\n                return False\n        return True\n\n    def check_top_to_bottom(word, grid, i, j):\n        if i + len(word) > len(grid):\n            return False\n        for k in range(len(word)):\n            if grid[i + k][j] != word[k]:\n                return False\n        return True\n\n    def check_bottom_to_top(word, grid, i, j):\n        if i - len(word) < -1:\n            return False\n        for k in range(len(word)):\n            if grid[i - k][j] != word[k]:\n                return False\n        return True\n\n    for word in words:\n        if not find_word(word, grid):\n            return False\n    return True\n"}
{"task_id": "EvoEval/22", "completion": "\n    return t * v / 9.461e12\n"}
{"task_id": "EvoEval/23", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_prime(n):\n        count = 0\n        num = 2\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    result = \"\"\n    for char in s:\n        if char.islower():\n            result += str(get_prime(ord(char) - ord('a') + 1))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/24", "completion": "\n    alien_dict = {'a': '+', 'b': '-', 'c': '*', 'd': '/', 'e': '%', 'f': '@', 'g': '!', 'h': '#', 'i': '$', 'j': '^', 'k': '&', 'l': '(', 'm': ')', 'n': '=', 'o': '?', 'p': ':', 'q': ';', 'r': '', 's': '~', 't': '>', 'u': '<', 'v': '{', 'w': '}', 'x': '[', 'y': ']', 'z': '|'}\n    return ''.join(alien_dict[i] for i in english_word.lower())\n"}
{"task_id": "EvoEval/25", "completion": "\n    sentences = text.split(\".\")\n    max_frequency = 0\n    max_sentence = \"\"\n    for sentence in sentences:\n        frequency = sentence.count(word)\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_sentence = sentence\n    return max_frequency, max_sentence\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Check if start and end are the same\n    if start == end:\n        return []\n    # Check if start or end is out of bounds\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]) or end[0] < 0 or end[0] >= len(maze) or end[1] < 0 or end[1] >= len(maze[0]):\n        return []\n    # Check if start or end is a wall\n    if maze[start[0]][start[1]] == 1 or maze[end[0]][end[1]] == 1:\n        return []\n    # Initialize the queue and the visited set\n    queue = [(start, [])]\n    visited = set()\n    # Loop until the queue is empty\n    while queue:\n        # Get the current position and the path\n        current, path = queue.pop(0)\n        # Check if the current position is the end\n        if current == end:\n            return path\n        # Add the current position to the visited set\n        visited.add(current)\n        # Get the neighbors of the current position\n        neighbors = [(current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] - 1), (current[0], current[1] + 1)]\n        # Loop through the neighbors\n        for neighbor in neighbors:\n            # Check if the neighbor is not a wall and has not been visited\n            if maze[neighbor[0]][neighbor[1]] == 0 and neighbor not in visited:\n                # Add the neighbor to the queue with the updated path\n                queue.append((neighbor, path + [neighbor[0] - current[0], neighbor[1] - current[1]]))\n    # If the queue is empty and the end has not been reached, return an empty list\n    return []\n"}
{"task_id": "EvoEval/27", "completion": "\n    return [s[i:i+n] for i in range(0, len(s), n)]\n"}
{"task_id": "EvoEval/28", "completion": "\n    taxable_income = income - deductions\n    if taxable_income <= 10000:\n        return 0\n    elif taxable_income <= 35000:\n        return (taxable_income - 10000) * 0.15\n    elif taxable_income <= 80000:\n        return 2500 + (taxable_income - 35000) * 0.25\n    else:\n        return 2500 + 15000 + (taxable_income - 80000) * 0.30\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_palindrome(sub):\n        return sub == sub[::-1]\n    palindromes = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            if is_palindrome(sub):\n                palindromes.add(sub)\n    return sorted(list(palindromes))\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Initialize the queue with the start point\n    queue = [start]\n    # Initialize the visited set with the start point\n    visited = set([start])\n    # Initialize the parent dictionary with the start point\n    parent = {start: None}\n    # Initialize the path list with the start point\n    path = [start]\n    # Initialize the current point with the start point\n    current = start\n    # While the queue is not empty\n    while queue:\n        # Pop the first point from the queue\n        current = queue.pop(0)\n        # If the current point is the end point, return the path\n        if current == end:\n            return path\n        # Get the neighbors of the current point\n        neighbors = get_neighbors(maze, current)\n        # For each neighbor\n        for neighbor in neighbors:\n            # If the neighbor is not visited\n            if neighbor not in visited:\n                # Add the neighbor to the queue\n                queue.append(neighbor)\n                # Add the neighbor to the visited set\n                visited.add(neighbor)\n                # Add the neighbor to the parent dictionary\n                parent[neighbor] = current\n                # Add the neighbor to the path list\n                path.append(neighbor)\n    # If no path is found, return an empty list\n    return []\n"}
{"task_id": "EvoEval/31", "completion": "\n    if m == 1 or n == 1:\n        return 1\n    else:\n        return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n\n"}
{"task_id": "EvoEval/32", "completion": "\n    if not playlist:\n        return []\n    if not isinstance(seed, int) or seed % 2 == 0:\n        raise ValueError(\"Seed must be an odd integer\")\n    playlist_length = len(playlist)\n    seed = seed % 2147483647\n    for i in range(playlist_length):\n        if \"Rock\" in playlist[i]:\n            continue\n        j = seed % playlist_length\n        playlist[i], playlist[j] = playlist[j], playlist[i]\n        seed = (seed * 16807) % 2147483647\n    return playlist\n"}
{"task_id": "EvoEval/33", "completion": "\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    ways = 0\n    for stone in magic_stones:\n        ways += magical_staircase(n - stone, magic_stones)\n    return ways\n"}
{"task_id": "EvoEval/34", "completion": "\n    transformation = [0]\n    for i in range(1, n+1):\n        if i < m:\n            transformation.append(min(100, transformation[-1] + 10))\n        elif i == m:\n            transformation.append(100)\n        else:\n            transformation.append(max(0, transformation[-1] - 10))\n    return transformation\n"}
{"task_id": "EvoEval/35", "completion": "\n    if \"@\" not in email or email[0] == \"@\" or email[-1] == \"@\" or \".\" not in email[email.index(\"@\"):]:\r\n        return False\r\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    integral_coefficients = [0]\n    for i, coeff in enumerate(xs):\n        integral_coefficients.append(coeff / (i + 1))\n    return integral_coefficients\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for char in s:\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                transformed += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                transformed += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/38", "completion": "\n    emoticons = {\n        \":)\": \"\ud83d\ude0a\",\n        \":(\": \"\u2639\ufe0f\",\n        \":D\": \"\ud83d\ude00\",\n        \";)\": \"\ud83d\ude09\"\n    }\n    for emoticon, emoji in emoticons.items():\n        sentence = sentence.replace(emoticon, emoji)\n    return sentence\n\nThe function `translate_emoticons` is designed to replace text-based emoticons in a given sentence with their corresponding Unicode emojis. It uses a dictionary to map each text-based emoticon to its corresponding emoji. The function then iterates over the dictionary, replacing each text-based emoticon in the sentence with its corresponding emoji. If the sentence does not contain any text-based emoticons, the function returns the original sentence.\n\nHere's a breakdown of the function:\n\n1. Define a dictionary `emoticons` that maps each text-based emoticon to its corresponding emoji.\n2. Iterate over the dictionary using a for loop.\n3. For each emoticon-emoji pair, use the `replace` method to replace all occurrences of the text-based emoticon in the sentence with the corresponding emoji.\n4. Return the modified sentence.\n\nThe function is then called with three examples:\n\n1. `\"Hello :) Have a nice day! :D\"` is converted to `\"Hello \ud83d\ude0a Have a nice day! \ud83d\ude00\"`.\n2. `\"Oh no, it's raining! :(\"` is converted to `\"Oh no, it's raining! \u2639\ufe0f\"`.\n3. `\"No emoticons here\"` remains unchanged as it does not contain any text-based emoticons.\n"}
{"task_id": "EvoEval/39", "completion": "\n    return ['*'*(len(s)*n+2)] + ['*' + s[i]*n + '*' for i in range(len(s))] + ['*'*(len(s)*n+2)]\n"}
{"task_id": "EvoEval/40", "completion": "\n    potions = sorted(potions)\n    target = int(target)\n    result = []\n    for potion in potions:\n        name, power = potion.split()\n        power = int(power)\n        if power <= target:\n            result.append(potion)\n            target -= power\n        if target == 0:\n            break\n    if target != 0:\n        return []\n    return result\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    # Initialize the minimum energy required to a large number\n    min_energy = float('inf')\n    \n    # Initialize the current position to the top-left cell\n    current_row, current_col = 0, 0\n    \n    # Initialize the current energy to 0\n    current_energy = 0\n    \n    # Initialize the visited cells to an empty set\n    visited = set()\n    \n    # Define the possible movements\n    movements = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    # Define the function to check if a cell is within the bounds of the array\n    def is_within_bounds(row, col):\n        return 0 <= row < len(arr) and 0 <= col < len(arr[0])\n    \n    # Define the function to check if a cell is the safe cell\n    def is_safe_cell(row, col):\n        return arr[row][col] == 0\n    \n    # Define the function to check if a cell has been visited\n    def is_visited(row, col):\n        return (row, col) in visited\n    \n    # Define the function to mark a cell as visited\n    def mark_visited(row, col):\n        visited.add((row, col))\n    \n    # Define the function to find the minimum energy required to reach the safe cell\n    def find_min_energy(row, col, energy):\n        nonlocal min_energy\n        \n        # If the current cell is the safe cell, update the minimum energy required\n        if is_safe_cell(row, col):\n            min_energy = min(min_energy, energy)\n            return\n        \n        # If the current cell is out of bounds or has been visited, return\n        if not is_within_bounds(row, col) or is_visited(row, col):\n            return\n        \n        # Mark the current cell as visited\n        mark_visited(row, col)\n        \n        # For each possible movement, update the current position and energy, and recursively call the function\n        for movement in movements:\n            new_row, new_col = row + movement[0], col + movement[1]\n            new_energy = energy + arr[row][col]\n            find_min_energy(new_row, new_col, new_energy)\n    \n    # Call the function to find the minimum energy required to reach the safe cell\n    find_min_energy(current_row, current_col, current_energy)\n    \n    # Return the minimum energy required\n    return min_energy\n"}
{"task_id": "EvoEval/42", "completion": "\n    # Check if the player has acquired a legendary item\n    if 5 in player_input:\n        # Find the second most valuable item\n        second_most_valuable_item = max(set(player_input) - {5})\n        return True, second_most_valuable_item\n    else:\n        return False, None\n"}
{"task_id": "EvoEval/43", "completion": "\n    fuel_consumption = spaceship_weight * planet_gravity * 0.1\n    duration = distance / speed\n    if fuel >= duration:\n        remaining_fuel = fuel - (fuel_consumption * duration)\n        return round(remaining_fuel, 2)\n    else:\n        return 'Insufficient fuel'\n"}
{"task_id": "EvoEval/44", "completion": "\n    total_weight = sum(q)\n    if total_weight <= w + e:\n        return True\n    else:\n        return False\n"}
{"task_id": "EvoEval/45", "completion": "\n    # Initialize variables\n    max_view = 0\n    current_view = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current hill is taller than the previous hill\n        if i == 0 or arr[i] > arr[i-1]:\n            # Increment the current view\n            current_view += 1\n        else:\n            # Reset the current view\n            current_view = 1\n\n        # Update the maximum view\n        max_view = max(max_view, current_view)\n\n    return max_view\n\n"}
{"task_id": "EvoEval/46", "completion": "\n    result = []\n    for test_case in test_cases:\n        secret_message = ''\n        for word in test_case:\n            word = word.strip('.,?!')\n            if word:\n                secret_message += word[0].lower()\n        if secret_message == 'thetakecannoli':\n            result.append('Take the cannoli.')\n        else:\n            result.append(secret_message)\n    return result\n"}
{"task_id": "EvoEval/47", "completion": "\n    for ingredient, quantity in recipe.items():\n        if ingredient not in available or available[ingredient] < quantity:\n            return False\n    return True\n"}
{"task_id": "EvoEval/48", "completion": "\n    inventory = {}\n    for log in inventory_logs:\n        item = log['item']\n        quantity = log['quantity']\n        if item in inventory:\n            inventory[item] += quantity\n        else:\n            inventory[item] = quantity\n    return {item: quantity for item, quantity in inventory.items() if quantity > 0}\n\n"}
{"task_id": "EvoEval/49", "completion": "\n    morse = {'01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0'}\n    return ''.join(morse[i] for i in msg.split(' ') if i)\n"}
{"task_id": "EvoEval/50", "completion": "\n    morse_code = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', ' ': ' '}\n    morse = ''\n    for char in text:\n        morse += morse_code[char] + ' '\n    return morse[:-1]\n"}
{"task_id": "EvoEval/51", "completion": "\n    if not string:\n        return ''\n    if not list_of_alphabets:\n        return string\n    result = ''\n    for i, char in enumerate(string):\n        result += list_of_alphabets[i % len(list_of_alphabets)]\n    return result\n"}
{"task_id": "EvoEval/52", "completion": "\n    # Initialize a variable to keep track of the number of orders fulfilled\n    fulfilled_orders = 0\n\n    # Iterate through the list of orders\n    for order in orders:\n        # Check if the order can be fulfilled in a single batch\n        if order <= n:\n            # If the order can be fulfilled, increment the fulfilled_orders variable\n            fulfilled_orders += 1\n        # Check if the order can be fulfilled in multiple batches\n        elif order % n == 0:\n            # If the order can be fulfilled in multiple batches, increment the fulfilled_orders variable by the number of batches\n            fulfilled_orders += order // n\n        # If the order cannot be fulfilled, continue to the next order\n        else:\n            continue\n\n    # Check if the number of fulfilled orders is greater than the maximum number of batches\n    if fulfilled_orders > m:\n        # If the number of fulfilled orders is greater than the maximum number of batches, return the maximum number of batches\n        return m\n    # If the number of fulfilled orders is less than or equal to the maximum number of batches, return the number of fulfilled orders\n    else:\n        return fulfilled_orders\n"}
{"task_id": "EvoEval/53", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    transformed = ''\n    for i, char in enumerate(s):\n        if char.lower() in vowels:\n            if char.isupper():\n                transformed += chr(ord('A') + (vowels.index(char.lower()) + 1) % len(vowels))\n            else:\n                transformed += chr(ord('a') + (vowels.index(char.lower()) + 1) % len(vowels))\n        elif char.lower() in consonants:\n            if char.isupper():\n                transformed += chr(ord('A') + (consonants.index(char.lower()) + 1) % len(consonants))\n            else:\n                transformed += chr(ord('a') + (consonants.index(char.lower()) + 1) % len(consonants))\n        elif char == '?':\n            if i % 2 == 0:\n                transformed += '!'\n            else:\n                transformed += '?'\n        else:\n            transformed += char\n    return transformed\n"}
{"task_id": "EvoEval/54", "completion": "\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == star:\n                result.append((i, j))\n    return result\n\n"}
{"task_id": "EvoEval/55", "completion": "\n    result = ''\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift_amount = (i + shift) % 26\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift_amount) % 26 + ord('a'))\n            else:\n                result += chr((ord(char) - ord('A') + shift_amount) % 26 + ord('A'))\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/56", "completion": "\n    morse_code_dict = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..', 'e': '.', 'f': '..-.', 'g': '--.', 'h': '....', 'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..', 'm': '--', 'n': '-.', 'o': '---', 'p': '.--.', 'q': '--.-', 'r': '.-.', 's': '...', 't': '-', 'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-', 'y': '-.--', 'z': '--..'}\n    morse_code = \"\"\n    for char in s:\n        if char == \" \":\n            morse_code += \" \"\n        elif char == \"/\":\n            morse_code += \"/\"\n        else:\n            morse_code += morse_code_dict[char] + \" \"\n    return morse_code.strip()\n"}
{"task_id": "EvoEval/57", "completion": "\n    new_menu = {}\n    for dish, price in menu.items():\n        new_name = ''\n        for i, letter in enumerate(dish):\n            new_name += magic_spell[i % len(magic_spell)]\n        new_menu[new_name] = price\n    return new_menu\n"}
{"task_id": "EvoEval/58", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    translation = ''\n    for char in earth_phrase:\n        if char == ' ':\n            translation += '@'\n        elif char in vowels:\n            translation += vowels[(vowels.index(char) + 1) % len(vowels)]\n        elif char in consonants:\n            translation += consonants[(consonants.index(char) + 1) % len(consonants)]\n    translation = translation[0].upper() + translation[1:]\n    words = translation.split('@')\n    for i in range(len(words)):\n        if words[i][0] in vowels:\n            words[i] += 'xy'\n        else:\n            words[i] += 'yz'\n    return '@'.join(words)\n"}
{"task_id": "EvoEval/59", "completion": "\n    if not ingredient_dict:\n        return []\n    else:\n        sorted_ingredient_dict = sorted(ingredient_dict.items(), key=lambda x: (-x[1], x[0]))\n        return sorted_ingredient_dict\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    pass\n"}
{"task_id": "EvoEval/61", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = []\n    for i, c in enumerate(s):\n        if c == ' ':\n            result.append(c)\n        elif i % 2 == 0:\n            if c.lower() in vowels:\n                result.append(vowels[(vowels.index(c.lower()) + 1) % len(vowels)].upper() if c.isupper() else vowels[(vowels.index(c.lower()) + 1) % len(vowels)].lower())\n            elif c.lower() in consonants:\n                result.append(consonants[(consonants.index(c.lower()) - 1) % len(consonants)].upper() if c.isupper() else consonants[(consonants.index(c.lower()) - 1) % len(consonants)].lower())\n        else:\n            result.append(c.swapcase())\n    return ''.join(result)\n"}
{"task_id": "EvoEval/62", "completion": "\n    new_recipe = {}\n    for ingredient, quantity in recipe.items():\n        new_quantity = quantity * conversion_factor\n        new_recipe[ingredient] = new_quantity\n    return new_recipe\n"}
{"task_id": "EvoEval/63", "completion": "\n    pyramid = [p]\n    while p > 0:\n        if p % 2 == 0:\n            p -= 2\n        else:\n            p -= 3\n        pyramid.append(p)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/64", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [x for x in range(start, end + 1) if x % divisor == 0 and is_prime(x)]\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if not order:\n        return menu\n\n    final_order = {}\n\n    for food, customizations in order.items():\n        if \"remove\" in customizations:\n            for ingredient in customizations[\"remove\"]:\n                if ingredient in menu[food]:\n                    menu[food].remove(ingredient)\n        if \"add\" in customizations:\n            for ingredient in customizations[\"add\"]:\n                if ingredient not in menu[food]:\n                    menu[food].append(ingredient)\n        final_order[food] = menu[food]\n\n    return final_order\n"}
{"task_id": "EvoEval/66", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_anagram(num1, num2):\n        return sorted(str(num1)) == sorted(str(num2))\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    anagram_pairs = []\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            if is_anagram(primes[i], primes[j]):\n                anagram_pairs.append((primes[i], primes[j]))\n\n    return sorted(anagram_pairs)\n"}
{"task_id": "EvoEval/67", "completion": "\n    result = {}\n    for customer in customers:\n        if customer in meals:\n            total_calories = sum([meal['calories'] for meal in meals[customer]])\n        else:\n            total_calories = 0\n        result[customer] = total_calories\n    return result\n"}
{"task_id": "EvoEval/68", "completion": "\n    def is_sorted(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    \n    if len(arr) == 0:\n        return True\n    \n    for i in range(len(arr)):\n        rotated = arr[i:] + arr[:i]\n        if is_sorted(rotated):\n            return True\n    \n    return False\n"}
{"task_id": "EvoEval/69", "completion": "\n    possible = False\n    indices = []\n    for i in range(len(cards)):\n        for j in range(i+1, len(cards)):\n            if cards[i] * cards[j] == magicNumber:\n                possible = True\n                indices.append(i)\n                indices.append(j)\n                break\n        if possible:\n            break\n    if not possible:\n        return \"No magic today\"\n    else:\n        return tuple(sorted(indices))\n"}
{"task_id": "EvoEval/70", "completion": "\n    if not planets or not path:\n        return False\n    for i in range(len(path) - 1):\n        if path[i] not in planets or path[i + 1] not in planets[path[i]]:\n            return False\n    return True\n"}
{"task_id": "EvoEval/71", "completion": "\n    vowels = 'aeiou'\n    result = ''\n    vowel_count = 0\n    for char in s:\n        if char.isalpha():\n            if char.lower() in vowels:\n                vowel_count += 1\n            shifted_char = chr((ord(char.lower()) - 97 + n) % 26 + 97)\n            if char.isupper():\n                shifted_char = shifted_char.upper()\n            result += shifted_char\n        else:\n            result += char\n    return result, vowel_count\n"}
{"task_id": "EvoEval/72", "completion": "\n    fairy_tales = []\n    for string in lst:\n        name = string\n        tales = sum(c.isdigit() for c in string)\n        fairy_tales.append(f\"Once upon a time, in a kingdom far away, lived a magical creature with the name of '{name}' who was known for telling {tales} tales a day\")\n    return fairy_tales\n"}
{"task_id": "EvoEval/73", "completion": "\n    # Your code goes here\n    # Initialize variables\n    num_chambers = len(grid)\n    num_treasures = sum(sum(row) for row in grid)\n    trips = 0\n\n    # Calculate the number of trips needed\n    trips = math.ceil(num_treasures / bag_capacity) * 2\n\n    return trips\n"}
{"task_id": "EvoEval/74", "completion": "\n    return ''.join([cipher.get(c, c) for c in s])\n"}
{"task_id": "EvoEval/75", "completion": "\n    vowels = 'aeiou'\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    result = ''\n    for i, char in enumerate(input_str):\n        if char.lower() in vowels:\n            if char.isupper():\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)].upper()\n            else:\n                result += vowels[(vowels.index(char.lower()) + 1) % len(vowels)]\n        elif char.lower() in consonants:\n            if char.isupper():\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)].upper()\n            else:\n                result += consonants[(consonants.index(char.lower()) + 1) % len(consonants)]\n        elif char.isdigit():\n            result += str((int(char) + 1) % 10)\n        else:\n            result += char\n        if char == '?' and i % 2 == 1:\n            result = result[:-1] + ('!' if char == '?' else '?')\n    return result\n"}
{"task_id": "EvoEval/76", "completion": "\n    pyramid = []\n    level = 0\n    for num in lst:\n        level += num\n        pyramid.append('#' * level)\n    return pyramid[::-1]\n"}
{"task_id": "EvoEval/77", "completion": "\n    def count_points(n):\n        count = 0\n        while n % k == 0:\n            n //= k\n            count += 1\n        return count\n\n    points = [count_points(num) for num in sequence]\n    sorted_points = sorted(points, reverse=True)\n    return sorted_points\n"}
{"task_id": "EvoEval/78", "completion": "\n    n = len(mat)\n    result = []\n    for i in range(n):\n        result.append(mat[i][i])\n        result.append(mat[i][n-i-1])\n    return result\n"}
{"task_id": "EvoEval/79", "completion": "\n    max_profit = 0\n    for i in range(len(prices)):\n        for j in range(i + 1, min(i + days, len(prices))):\n            profit = prices[j] - prices[i]\n            if profit > max_profit:\n                max_profit = profit\n    return max_profit\n"}
{"task_id": "EvoEval/80", "completion": "\n    # Initialize the starting position\n    row, col = 0, 0\n    for i in range(len(map)):\n        for j in range(len(map[i])):\n            if map[i][j] == 'S':\n                row, col = i, j\n                break\n    # Initialize the path\n    path = [(row, col)]\n    # Process each instruction\n    for instruction in instructions:\n        if instruction == 'up':\n            if row > 0 and map[row-1][col] != 'X':\n                row -= 1\n        elif instruction == 'down':\n            if row < len(map)-1 and map[row+1][col] != 'X':\n                row += 1\n        elif instruction == 'left':\n            if col > 0 and map[row][col-1] != 'X':\n                col -= 1\n        elif instruction == 'right':\n            if col < len(map[0])-1 and map[row][col+1] != 'X':\n                col += 1\n        # Check if the end is reached\n        if map[row][col] == 'E':\n            break\n        # Add the current position to the path\n        path.append((row, col))\n    return path\n"}
{"task_id": "EvoEval/81", "completion": "\n    if not word_list:\n        return \"CORRECT\"\n    alien_dict = {char: i for i, char in enumerate(alien_dictionary)}\n    for i in range(len(word_list) - 1):\n        word1, word2 = word_list[i], word_list[i + 1]\n        min_length = min(len(word1), len(word2))\n        for j in range(min_length):\n            if word1[j] != word2[j]:\n                if alien_dict[word1[j]] > alien_dict[word2[j]]:\n                    return \"INCORRECT\"\n                break\n        else:\n            if len(word1) > len(word2):\n                return \"INCORRECT\"\n    return \"CORRECT\"\n"}
{"task_id": "EvoEval/82", "completion": "\n    if not birthdays:\n        return None\n    zodiac_signs = {\n        \"Aries\": (\"March 21\", \"April 19\"),\n        \"Taurus\": (\"April 20\", \"May 20\"),\n        \"Gemini\": (\"May 21\", \"June 20\"),\n        \"Cancer\": (\"June 21\", \"July 22\"),\n        \"Leo\": (\"July 23\", \"August 22\"),\n        \"Virgo\": (\"August 23\", \"September 22\"),\n        \"Libra\": (\"September 23\", \"October 22\"),\n        \"Scorpio\": (\"October 23\", \"November 21\"),\n        \"Sagittarius\": (\"November 22\", \"December 21\"),\n        \"Capricorn\": (\"December 22\", \"January 19\"),\n        \"Aquarius\": (\"January 20\", \"February 18\"),\n        \"Pisces\": (\"February 19\", \"March 20\"),\n    }\n    elements = {\n        \"Fire\": [\"Aries\", \"Leo\", \"Sagittarius\"],\n        \"Water\": [\"Cancer\", \"Scorpio\", \"Pisces\"],\n        \"Air\": [\"Gemini\", \"Libra\", \"Aquarius\"],\n        \"Earth\": [\"Taurus\", \"Virgo\", \"Capricorn\"],\n    }\n    result = {}\n    for birthday in birthdays:\n        month, day = map(int, birthday.split(\"-\")[1:])\n        for sign, (start, end) in zodiac_signs.items():\n            start_month, start_day = map(int, start.split())\n            end_month, end_day = map(int, end.split())\n            if (month == start_month and day >= start_day) or (\n                month == end_month and day <= end_day\n            ):\n                for element, signs in elements.items():\n                    if sign in signs:\n                        result[element] = result.get(element, 0) + 1\n                        break\n    return result\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"}
{"task_id": "EvoEval/84", "completion": "\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node)\n        if not node.get('left') and not node.get('right'):\n            paths.append(path.copy())\n        else:\n            dfs(node.get('left'), path)\n            dfs(node.get('right'), path)\n        path.pop()\n\n    paths = []\n    dfs(tree, [])\n    return paths\n"}
{"task_id": "EvoEval/85", "completion": "\n    def dfs(x, y):\n        if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] == 1:\n            return float('inf')\n        if x == coord[0] and y == coord[1]:\n            return 0\n        grid[x][y] = 1\n        return 1 + min(dfs(x + 1, y), dfs(x, y + 1))\n    result = dfs(0, 0)\n    return result if result != float('inf') else -1\n"}
{"task_id": "EvoEval/86", "completion": "\n    sorted_movies = sorted(movies_dict.items(), key=lambda x: (-x[1][0], -x[1][1]))\n    return [movie[0] for movie in sorted_movies]\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    if not arr:\n        return ''\n    result = []\n    top, bottom, left, right = 0, len(arr) - 1, 0, len(arr[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(arr[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(arr[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(arr[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(arr[i][left])\n            left += 1\n    return ''.join(result)\n"}
{"task_id": "EvoEval/88", "completion": "\n    new_dict = {}\n    for planet, features in dict_of_planets.items():\n        if features[0] and features[1]:\n            new_dict[planet] = round(features[0] / features[1], 2)\n    return new_dict\n"}
{"task_id": "EvoEval/89", "completion": "\n    aliens = sorted(aliens)\n    if ray in aliens:\n        aliens.remove(ray)\n    if ray - 1 in aliens:\n        aliens.remove(ray - 1)\n    if ray + 1 in aliens:\n        aliens.remove(ray + 1)\n    return aliens\n"}
{"task_id": "EvoEval/90", "completion": "\n    def get_combinations(s):\n        combinations = set()\n        for i in range(len(s)):\n            for j in range(i+1, len(s)):\n                combinations.add(int(s[i]) * int(s[j]))\n        return combinations\n\n    return sum(get_combinations(s1)) * sum(get_combinations(s2))\n"}
{"task_id": "EvoEval/91", "completion": "\n    status = 'On Ground'\n    for action, distance in spaceship_data:\n        if status == 'On Ground' and action == 'Launch':\n            status = 'In Space'\n        elif status == 'In Space' and action == 'Move':\n            continue\n        elif status == 'In Space' and action == 'Land':\n            status = 'On Ground'\n        else:\n            return 'Invalid Action Sequence'\n    return status\n"}
{"task_id": "EvoEval/92", "completion": "\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    result = []\n    for i in range(n):\n        layer = ' ' * i + alphabet[i] + ' ' * (2 * i) + alphabet[i] + ' ' * i\n        result.append(layer.center(2 * n - 1))\n    return '\\n'.join(result)\n"}
{"task_id": "EvoEval/93", "completion": "\n    result = \"\"\n    for i, char in enumerate(message):\n        if char.isalpha():\n            shift = n_values[i % len(n_values)]\n            if char.isupper():\n                result += chr((ord(char) - 65 + shift) % 26 + 65)\n            else:\n                result += chr((ord(char) - 97 + shift) % 26 + 97)\n        else:\n            result += char\n    return result\n"}
{"task_id": "EvoEval/94", "completion": "\n    return [ ' '.join(sorted(spell.split(), key=len)) for spell in strings]\n"}
{"task_id": "EvoEval/95", "completion": "\n    if len(m) != len(m[0]):\n        return 'Invalid Matrix'\n    else:\n        sum1 = 0\n        sum2 = 0\n        for i in range(len(m)):\n            sum1 += m[i][i]\n            sum2 += m[i][len(m)-i-1]\n        return abs(sum1 - sum2)\n"}
{"task_id": "EvoEval/96", "completion": "\n    magic_indices = []\n    for i in range(len(lst)):\n        value = lst[i]\n        if value % i == 0 and product_of_digits(value) == i:\n            magic_indices.append(i)\n    return magic_indices\n"}
{"task_id": "EvoEval/97", "completion": "\n    if not isinstance(alien, str) or not isinstance(humans, dict):\n        return []\n    else:\n        continents = [\"Asia\", \"Africa\", \"Europe\", \"North America\", \"South America\"]\n        humans_on_continent = {continent: [] for continent in continents}\n        for name, continent in humans.items():\n            if continent in continents:\n                humans_on_continent[continent].append(name)\n        encounter_order = []\n        for continent in continents:\n            encounter_order.extend(humans_on_continent[continent])\n        return encounter_order\n"}
{"task_id": "EvoEval/98", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sequence = [a, b]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2] + i\n        sequence.append(next_num)\n    for i in range(n):\n        if is_prime(sequence[i]):\n            sequence[i] = 'prime'\n    return sequence\n"}
{"task_id": "EvoEval/99", "completion": "\n    players = list(range(1, n + 1))\n    for round in rounds:\n        time = 0\n        while time < round:\n            time += 1\n            players.pop((time * music) % len(players))\n    return players\n\n"}
