{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n    return result\n\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(level, max_level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), prod(numbers)\n\n"}
{"task_id": "HumanEval/9", "completion": "\n    maxes = []\n    current_max = float('-inf')\n    for number in numbers:\n        current_max = max(current_max, number)\n        maxes.append(current_max)\n    return maxes\n\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n"}
{"task_id": "HumanEval/18", "completion": "\n    return len([i for i in range(len(string)) if string[i:i+len(substring)] == substring])\n"}
{"task_id": "HumanEval/19", "completion": "\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=lambda x: number_dict[x]))\n\n"}
{"task_id": "HumanEval/20", "completion": "\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    return list(dict.fromkeys(numbers))\n\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest non zero coefficient must be non zero\")\n    return -xs[0] / xs[-1]\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    l = [even_indices[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n    return l\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fib(n-1) + fib(n-2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib(i)):\n            count += 1\n        i += 1\n    return fib(i-1)\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        if l[i] > 0:\n            break\n        if l[i] == l[i - 1] and i > 0:\n            continue\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n**2\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10\")\n    if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower()\n    text = text.replace(' ', '')\n    text = text.replace('.', '')\n    text = text.replace(',', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace(';', '')\n    text = text.replace(':', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('/', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('|', '')\n    text = text.replace('<', '')\n    text = text.replace('>', '')\n    text = text.replace('^', '')\n    text = text.replace('~', '')\n    text = text.replace('`', '')\n    text = text.replace('@', '')\n    text = text.replace('#', '')\n    text = text.replace('$', '')\n    text = text.replace('%', '')\n    text = text.replace('&', '')\n    text = text.replace('*', '')\n    text = text.replace('=', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace('1', '')\n    text = text.replace('2', '')\n    text = text.replace('3', '')\n    text = text.replace('4', '')\n    text = text.replace('5', '')\n    text = text.replace('6', '')\n    text = text.replace('7', '')\n    text = text.replace('8', '')\n    text = text.replace('9', '')\n    text = text.replace('0', '')\n    text = text.replace('!', '')\n    text = text.replace('?', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace(';', '')\n    text = text.replace(':', '')\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('/', '')\n    text = text.replace('\\\\', '')\n    text = text.replace('|', '')\n    text = text.replace('<', '')\n    text = text.replace('"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "\n    return all(i < t for i in l)\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n    if l[0] < l[-1]:\n        return all(x <= y for x, y in zip(l, l[1:]))\n    else:\n        return all(x >= y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n"}
{"task_id": "HumanEval/62", "completion": "\n    return xs[1:] if len(xs) > 1 else []\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = 'aeiou'\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x = str(x)\n    shift %= len(x)\n    return x[-shift:] + x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Write your code here\n    pass\n"}
{"task_id": "HumanEval/68", "completion": "\n    pass\n\n"}
{"task_id": "HumanEval/69", "completion": "\n    # your code here\n    from collections import Counter\n    count = Counter(lst)\n    for k, v in count.items():\n        if v >= k:\n            return k\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    if sum(q) > w:\n        return False\n    if q == q[::-1]:\n        return True\n    return False\n"}
{"task_id": "HumanEval/73", "completion": "\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 3:\n        if arr[0] == arr[2]:\n            return 0\n        else:\n            return 1\n    if len(arr) == 4:\n        if arr[0] == arr[3] and arr[1] == arr[2]:\n            return 0\n        elif arr[0] == arr[3] or arr[1] == arr[2]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 5:\n        if arr[0] == arr[4] and arr[1] == arr[3]:\n            return 0\n        elif arr[0] == arr[4] or arr[1] == arr[3]:\n            return 1\n        else:\n            return 2\n    if len(arr) == 6:\n        if arr[0] == arr[5] and arr[1] == arr[4] and arr[2] == arr[3]:\n            return 0\n        elif arr[0] == arr[5] and arr[1] == arr[4] or arr[1] == arr[4] and arr[2] == arr[3] or arr[0] == arr[5] and arr[2] == arr[3]:\n            return 1\n        elif arr[0] == arr[5] or arr[1] == arr[4] or arr[2] == arr[3]:\n            return 2\n        else:\n            return 3\n    if len(arr) == 7:\n        if arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] and arr[3] == arr[3]:\n            return 0\n        elif arr[0] == arr[6] and arr[1] == arr[5] and arr[2] == arr[4] or arr[0] == arr[6] and arr[1] == arr[5] and arr[3] == arr[3] or arr[0] == arr[6"}
{"task_id": "HumanEval/74", "completion": "\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        if sum([len(i) for i in lst1]) < sum([len(i) for i in lst2]):\n            return lst1\n        elif sum([len(i) for i in lst1]) > sum([len(i) for i in lst2]):\n            return lst2\n        else:\n            return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    while x % n == 0:\n        x /= n\n    return x == 1\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a**0.3333333333333333 == int(a**0.3333333333333333)\n"}
{"task_id": "HumanEval/78", "completion": "\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in primes)\n"}
{"task_id": "HumanEval/79", "completion": "\n    return \"db\" + bin(decimal)[2:] + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1\n    else:\n        return 9 * (10 ** (n - 2)) + starts_one_ends(n - 1)\n"}
{"task_id": "HumanEval/84", "completion": "\n    return bin(sum(int(i) for i in str(N)))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 0)\n\n"}
{"task_id": "HumanEval/86", "completion": "\n    return ' '.join(sorted(word, key=lambda x: ord(x)) for word in s.split())\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            encrypted += alphabet[(index + 2) % 26]\n        else:\n            encrypted += char\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            return lst[i]\n    return None\n"}
{"task_id": "HumanEval/91", "completion": "\n    return sum(1 for word in S.split() if word == \"I\")\n"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))\n\nlst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]"}
{"task_id": "HumanEval/95", "completion": "\n    if len(dict) == 0:\n        return False\n    else:\n        for key in dict:\n            if not isinstance(key, str):\n                return False\n            if key.islower() != all(key.islower() for key in dict) or key.isupper() != all(key.isupper() for key in dict):\n                return False\n        return True\n"}
{"task_id": "HumanEval/96", "completion": "\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return abs(a%10)*abs(b%10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    return round(float(value))\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    for i in range(n):\n        pile.append(n + 2*i)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(',', '').split()\n\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    else:\n        return y - 1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round(sum(range(n, m + 1)) / (m - n + 1))\n        return bin(avg)[2:]\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted([i for i in x if len(set(str(i))) == len(str(i))])\n"}
{"task_id": "HumanEval/105", "completion": "\n    return [str(i) for i in sorted([i for i in arr if 1 <= i <= 9], reverse=True)]\n\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    def sum_numbers(n):\n        if n == 0:\n            return 0\n        else:\n            return n + sum_numbers(n-1)\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_numbers(i))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if len(arr) == 0:\n        return True\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    return \"YES\" if sum(lst1) % 2 == 0 else \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if test == '':\n        return {}\n    else:\n        test = test.split()\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n        test = list(dict.fromkeys(test))\n        test = sorted(test)\n        test = list(test)\n"}
{"task_id": "HumanEval/112", "completion": "\n    return (\"\".join([i for i in s if i not in c]),s==s[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(sum(1 for i in s if int(i) % 2 != 0), len(s), sum(1 for i in s if int(i) % 2 != 0), len(s)) for s in lst]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    # Write your code here\n    # Initialize the number of times you need to lower the buckets\n    num_buckets = 0\n    \n    # Iterate through each row in the grid\n    for row in grid:\n        # Initialize the number of buckets needed for the current row\n        buckets_needed = 0\n        \n        # Iterate through each well in the row\n        for well in row:\n            # If the well has water, increment the number of buckets needed\n            if well == 1:\n                buckets_needed += 1\n        \n        # Calculate the number of times you need to lower the buckets for the current row\n        num_buckets += math.ceil(buckets_needed / capacity)\n    \n    return num_buckets\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for c in word if c.lower() not in 'aeiou')\n        if consonants == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                s = lst[i] + lst[j]\n                if is_balanced(s):\n                    return 'Yes'\n    return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    if k == 0:\n        return []\n    if k >= len(arr):\n        return sorted(arr)\n    return sorted(arr, reverse=True)[:k]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum([x for x in arr[:k] if x < 100])\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    odd_collatz = [i for i in collatz if i % 2 != 0]\n    return sorted(odd_collatz)\n"}
{"task_id": "HumanEval/124", "completion": "\n    try:\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2:\n            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n                if day > 29:\n                    return False\n            elif day > 28:\n                return False\n        return True\n    except:\n        return False\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst) and len(lst) == len(set(lst))\n\n"}
{"task_id": "HumanEval/127", "completion": "\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    sign = 1\n    for i in arr:\n        if i < 0:\n            sign *= -1\n        elif i == 0:\n            return 0\n    return sum(arr) * sign\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[float('inf')] * (k + 1) for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = min(dp[i-1][0], dp[i][0])\n    for j in range(1, k + 1):\n        for i in range(n):\n            for j in range(n):\n                if i > 0:\n                    dp[i][j] = min(dp[i][j], dp[i-1][j-1] + grid[i][j])\n                if j > 0:\n                    dp[i][j] = min(dp[i][j], dp[i][j-1] + grid[i][j])\n    return dp[n-1][k-1]\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    if n == 3:\n        return [1, 3, 2, 8]\n    if n == 4:\n        return [1, 3, 2, 8, 21]\n    if n == 5:\n        return [1, 3, 2, 8, 21, 55]\n    if n == 6:\n        return [1, 3, 2, 8, 21, 55, 144]\n    if n == 7:\n        return [1, 3, 2, 8, 21, 55, 144, 377]\n    if n == 8:\n        return [1, 3, 2, 8, 21, 55, 144, 377, 987]\n    if n == 9:\n        return [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584]\n    if n == 10:\n        return [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765]\n    if n == 11:\n        return [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765, 17711]\n    if n == 12:\n        return [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765, 17711, 46368]\n    if n == 13:\n        return [1, 3, 2, 8, 21, 55, 144, 377, 987, 2584, 6765, 17711, 46368, 121393]\n    if n == 14:\n        return [1, 3, 2, 8, 21, 55, 144, "}
{"task_id": "HumanEval/131", "completion": "\n    return eval('*'.join([str(i) for i in range(1, n+1) if i%2 != 0]))\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum([int(math.ceil(x))**2 for x in lst])\n\n"}
{"task_id": "HumanEval/134", "completion": "\n    if txt == \"\":\n        return False\n    else:\n        if txt[-1].isalpha() and txt[-1] not in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    if len(arr) == 0:\n        return -1\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] >= arr[i-1]:\n            max_index = i\n    return max_index\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg = [i for i in lst if i < 0]\n    pos = [i for i in lst if i > 0]\n    if len(neg) == 0:\n        neg = None\n    else:\n        neg = max(neg)\n    if len(pos) == 0:\n        pos = None\n    else:\n        pos = min(pos)\n    return (neg, pos)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    else:\n        return a if isinstance(a, str) else b\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8:\n        return False\n    if n % 2 == 1:\n        return False\n    return True\n\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"}
{"task_id": "HumanEval/140", "completion": "\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"___\", \"-\")\n    return text\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    if len(file_name) > 3:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if file_name[0].isalpha() == False:\n        return 'No'\n    if file_name.split('.')[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum([i**2 if (index+1)%3==0 else i**3 if (index+1)%4==0 else i for index, i in enumerate(lst)])\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\n    # Your code here\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_den) % x_den == 0 and (n_num * x_den) % n_den == 0\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x)))), reverse=False)\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 == 1 and int(str(num)[-1]) % 2 == 1:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    try:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])\n    except ValueError:\n        return ()\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Remove strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    lst.sort(key=lambda s: (len(s), s))\n    return lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    return sum([i**2 for i in lst if i > 0 and i%2 == 1])\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(game[i]-guess[i]) for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "\n    # Write your code here\n    strongest_extension = extensions[0]\n    strongest_strength = -len(extensions[0])\n    for extension in extensions:\n        strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n    return f\"{class_name}.{strongest_extension}\"\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    return any(b in a[i:] + a[:i] for i in range(len(a)))\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = ''\n    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    symbols = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n    for i in range(len(values)):\n        while number >= values[i]:\n            roman += symbols[i]\n            number -= values[i]\n    return roman\n"}
{"task_id": "HumanEval/157", "completion": "\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique:\n            max_unique = len(unique_chars)\n            max_word = word\n        elif len(unique_chars) == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if need > remaining:\n        return [number + remaining, 0]\n    else:\n        return [number + need, remaining - need]\n"}
{"task_id": "HumanEval/160", "completion": "\n    # Your code goes here\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(a, b+1, 2)]\n"}
