{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            stack.append(char)\n            temp += char\n            if len(stack) == 1:\n                result.append(temp)\n                temp = ''\n            else:\n                temp += ' '\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    def get_max_depth(s: str) -> int:\n        max_depth = 0\n        current_depth = 0\n        for c in s:\n            if c == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif c == ')':\n                current_depth -= 1\n        return max_depth\n\n    return [get_max_depth(s) for s in paren_string.split()]\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n\n"}
{"task_id": "HumanEval/8", "completion": "\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return (sum_numbers, product_numbers)\n"}
{"task_id": "HumanEval/9", "completion": "\n    max_val = numbers[0]\n    result = [max_val]\n    for num in numbers[1:]:\n        if num > max_val:\n            max_val = num\n        result.append(max_val)\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]\n\n"}
{"task_id": "HumanEval/11", "completion": "\n    # Convert the strings to binary and perform XOR operation\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n    # If the length of the result is odd, append '0' to make it even\n    if len(result) % 2 != 0:\n        result = '0' + result\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[0:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            start = pos + 1\n            count += 1\n        else:\n            break\n    return count\n\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda num: [num_dict[n] for n in num.split()]))\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i-1], numbers[i])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int) and value > 0]\n"}
{"task_id": "HumanEval/23", "completion": "\n    count = 0\n    for _ in string:\n        count += 1\n    return count\n\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [i for i in l if i > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    xs = xs[::-1]\n    for i in range(len(xs)):\n        if xs[i] != 0:\n            return -xs[i] / xs[i+1]\n    return None\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    # Split the list into three parts\n    l1, l2, l3 = l[::3], l[1::3], l[2::3]\n\n    # Sort the second part\n    l2.sort()\n\n    # Replace the values in the first part with the sorted second part\n    l[::3] = l2\n\n    return l\n\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\n    return max(l)\n\n"}
{"task_id": "HumanEval/36", "completion": "\n    def count_sevens(n: int):\n        return str(n).count('7')\n\n    def divisible_by(n: int, divisor: int):\n        return n % divisor == 0\n\n    count = 0\n    for i in range(1, n):\n        if divisible_by(i, 11) or divisible_by(i, 13):\n            count += count_sevens(i)\n    return count\n\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    l_prime = l.copy()\n    for i, value in zip(range(0, len(l), 2), even_indices_values):\n        l_prime[i] = value\n    return l_prime\n\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def fib(n: int) -> int:\n        if n <= 1:\n            return n\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    i = 0\n    while True:\n        fib_i = fib(i)\n        if is_prime(fib_i):\n            i += 1\n            if i == n:\n                return fib_i\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            sum_ = l[i] + l[left] + l[right]\n            if sum_ == 0:\n                return True\n            elif sum_ < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/41", "completion": "\n    return n * (n - 1) // 2\n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [i + 1 for i in l]\n\n"}
{"task_id": "HumanEval/43", "completion": "\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return False\n    l.sort()\n    left = 0\n    right = len(l) - 1\n    while left < right:\n        if l[left] + l[right] == 0:\n            return True\n        elif l[left] + l[right] < 0:\n            left += 1\n        else:\n            right -= 1\n    return False\n\n"}
{"task_id": "HumanEval/44", "completion": "\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n"}
{"task_id": "HumanEval/52", "completion": "\n    for i in l:\n        if i >= t:\n            return False\n    return True\n\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    return all(x < y for x, y in zip(l, l[1:])) or all(x > y for x, y in zip(l, l[1:]))\n\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(list(set(l1) & set(l2)))\n\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return sum(range(1, n + 1))\n\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    if len(xs) < 2:\n        return []\n    return [i * xs[i + 1] for i in range(len(xs) - 1)]\n\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n        return fibfib_list[-1]\n"}
{"task_id": "HumanEval/64", "completion": "\n    vowels = \"aeiou\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    shift %= len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split()\n    total_fruits = int(fruits[-2].split(' ')[0])\n    total_apples = int(fruits[0].split(' ')[0])\n    total_oranges = int(fruits[2].split(' ')[0])\n    return total_fruits - total_apples - total_oranges\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_values = [(i, node) for i, node in enumerate(arr) if node % 2 == 0]\n    if even_values:\n        smallest_even_value = min(even_values)\n        return [smallest_even_value[1], smallest_even_value[0]]\n    else:\n        return []\n"}
{"task_id": "HumanEval/69", "completion": "\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(1, max(c)+1):\n        if i in c and c[i] >= i:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/70", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    def sum_of_elements(lst):\n        return sum(lst)\n\n    def is_balanced(lst, max_weight):\n        return is_palindrome(lst) and sum_of_elements(lst) <= max_weight\n\n    return is_balanced(q, w)\n"}
{"task_id": "HumanEval/73", "completion": "\n    def is_palindrome(arr):\n        return arr == arr[::-1]\n\n    def count_changes(arr):\n        changes = 0\n        for i in range(len(arr) // 2):\n            if arr[i] != arr[-i - 1]:\n                changes += 1\n        return changes\n\n    if is_palindrome(arr):\n        return 0\n    else:\n        return count_changes(arr)\n\n"}
{"task_id": "HumanEval/74", "completion": "\n    def count_chars(lst):\n        return [sum(1 for c in s if c.isalpha()) for s in lst]\n\n    lst1_chars = count_chars(lst1)\n    lst2_chars = count_chars(lst2)\n\n    if sum(lst1_chars) < sum(lst2_chars):\n        return lst1\n    elif sum(lst1_chars) > sum(lst2_chars):\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n"}
{"task_id": "HumanEval/76", "completion": "\n    if x < 1 or n < 1:\n        return False\n    else:\n        return x**(1/n) == int(x**(1/n))\n"}
{"task_id": "HumanEval/77", "completion": "\n    return a == round(a ** (1. / 3)) ** 3\n\n"}
{"task_id": "HumanEval/78", "completion": "\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    dec_to_hex = {value: key for key, value in hex_to_dec.items()}\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for digit in num:\n        if digit in hex_to_dec:\n            dec_num = hex_to_dec[digit]\n            if dec_num in primes:\n                count += 1\n        else:\n            return 0\n    return count\n\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary = bin(decimal).replace(\"0b\", \"\")\n    return \"db\" + binary + \"db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    for i in range(0, len(s) - 2, 3):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    def grade_equation(grades):\n        return ['A+' if grade == 4.0 else ('A' if grade == 3.7 else ('B' if grade == 3.3 else ('B-' if grade == 3.0 else ('C+' if grade == 1.7 else ('C' if grade == 1.3 else ('C-' if grade == 1.0 else ('D+' if grade == 0.7 else 'D'))))))))\n\n    return [grade_equation(grade) for grade in grades]\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 10\n    elif n == 2:\n        return 90\n    else:\n        return 9 * (10 ** (n - 2))\n\n"}
{"task_id": "HumanEval/84", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return bin(sum_of_digits(N))[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 != 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    def sort_word(word):\n        return ''.join(sorted(word))\n\n    return ' '.join(map(sort_word, s.split(' ')))\n\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    return result\n\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return array\n\n    first_index = 0\n    last_index = len(array) - 1\n    sum_first_last = array[first_index] + array[last_index]\n\n    if sum_first_last % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n\n    return array\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                if char == 'z':\n                    result += 'a'\n                else:\n                    result += chr(ord(char) + 2)\n            else:\n                if char == 'Z':\n                    result += 'A'\n                else:\n                    result += chr(ord(char) + 2)\n        else:\n            result += char\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in lst:\n        if num < first:\n            second, first = first, num\n        elif first < num < second:\n            second = num\n    if second == float('inf'):\n        return None\n    return second\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    # Split the string into sentences\n    sentences = S.split('.')\n    # Initialize a counter\n    count = 0\n    # Iterate over the sentences\n    for sentence in sentences:\n        # If the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            # Increment the counter\n            count += 1\n    # Return the counter\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\n    def swap_case(c):\n        if c.isupper():\n            return c.lower()\n        else:\n            return c.upper()\n\n    def replace_vowels(c):\n        vowels = 'aeiou'\n        if c.lower() in vowels:\n            index = vowels.index(c.lower())\n            if index + 2 < len(vowels):\n                return vowels[index + 2]\n            else:\n                return vowels[index + 2 - len(vowels)]\n        else:\n            return c\n\n    return ''.join(map(replace_vowels, map(swap_case, message)))\n\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    return sum(sum_of_digits(i) for i in lst if is_prime(i))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    keys_are_all_upper = all(k.isupper() for k in dict.keys())\n    keys_are_all_lower = all(k.islower() for k in dict.keys())\n\n    return keys_are_all_upper or keys_are_all_lower\n\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(n) if is_prime(i)]\n\n"}
{"task_id": "HumanEval/97", "completion": "\n    a = str(a)\n    b = str(b)\n    product = int(a[0]) * int(b[0])\n    return product\n"}
{"task_id": "HumanEval/98", "completion": "\n    vowels = \"AEIOU\"\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    def closest_integer(value):\n        value = float(value)\n        if value < 0:\n            return int(value) if value % 1 != 0 else int(value) - 1\n        else:\n            return int(value) if value % 1 != 0 else int(value) + 1\n\n    return closest_integer(value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    def next_odd(n):\n        return n + 1 if n % 2 != 0 else n\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n\n\n    pile = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:\n            pile.append(next_even(pile[-1]))\n        else:\n            pile.append(next_odd(pile[-1]))\n    return pile\n\n"}
{"task_id": "HumanEval/101", "completion": "\n    return s.replace(\",\", \"\").split()\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    else:\n        return max(x, y)\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m + 1))\n        avg = round(total / (m - n + 1))\n        return bin(avg)\n\n"}
{"task_id": "HumanEval/104", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    return sorted([x for x in x if not any(is_even(int(d)) for d in str(x))])\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    def to_words(n):\n        if n == 1:\n            return \"One\"\n        elif n == 2:\n            return \"Two\"\n        elif n == 3:\n            return \"Three\"\n        elif n == 4:\n            return \"Four\"\n        elif n == 5:\n            return \"Five\"\n        elif n == 6:\n            return \"Six\"\n        elif n == 7:\n            return \"Seven\"\n        elif n == 8:\n            return \"Eight\"\n        elif n == 9:\n            return \"Nine\"\n        else:\n            return \"\"\n\n    def sort_arr(arr):\n        arr.sort()\n        return arr\n\n    def reverse_arr(arr):\n        return arr[::-1]\n\n    def arr_to_words(arr):\n        return [to_words(i) for i in arr]\n\n    arr = sort_arr(arr)\n    arr = reverse_arr(arr)\n    return arr_to_words(arr)\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            sum = 0\n            for j in range(1, i+1):\n                sum += j\n            result.append(sum)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            return -sum_digits(-n)\n        result = 0\n        while n > 0:\n            result += n % 10\n            n //= 10\n        return result\n\n    return sum(sum_digits(i) > 0 for i in arr)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n\n    for i in range(len(arr)):\n        if arr[i] < arr[(i + 1) % len(arr)]:\n            return False\n\n    return True\n\n"}
{"task_id": "HumanEval/110", "completion": "\n    def is_even(n):\n        return n % 2 == 0\n\n    for i in range(len(lst1)):\n        if not is_even(lst1[i]):\n            for j in range(len(lst2)):\n                if is_even(lst2[j]):\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n            else:\n                return \"NO\"\n    return \"YES\"\n\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n\n    histogram_dict = {}\n    words = test.split()\n\n    for word in words:\n        if word in histogram_dict:\n            histogram_dict[word] += 1\n        else:\n            histogram_dict[word] = 1\n\n    max_count = max(histogram_dict.values())\n    return {k: v for k, v in histogram_dict.items() if v == max_count}\n\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"the number of odd elements {i}n the str{i}ng {i} of the {i}nput.\" for i in range(1, len(lst) + 1)]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    cur_sum = 0\n\n    for num in nums:\n        cur_sum += num\n        min_sum = min(min_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n\n    return min_sum\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_buckets(grid, capacity):\n        n = len(grid)\n        m = len(grid[0])\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    count += 1\n        return min(count // capacity, n * m)\n\n    return max_buckets(grid, capacity)\n"}
{"task_id": "HumanEval/116", "completion": "\n    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))\n\n"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        return sum(1 for c in word if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_balanced(s):\n        count = 0\n        for char in s:\n            if char == '(':\n                count += 1\n            elif char == ')':\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    s1, s2 = lst\n    if not is_balanced(s1) or not is_balanced(s2):\n        return 'No'\n    return 'Yes'\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(arr[:k])\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    return sorted([num for num in sequence if num % 2 != 0])\n\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def is_leap_year(year):\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n\n    def days_in_month(month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        elif month == 2:\n            if is_leap_year(year):\n                return 29\n            else:\n                return 28\n\n    def valid_date(date):\n        if re.match(r'\\d{2}-\\d{2}-\\d{4}', date) is None:\n            return False\n        mm, dd, yyyy = map(int, date.split('-'))\n        if mm < 1 or mm > 12 or dd < 1 or dd > days_in_month(mm, yyyy):\n            return False\n        return True\n\n    return valid_date(date)\n\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split()\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)\n\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) == len(set(lst)):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\n    if start > end:\n        return \"NO\"\n\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    product = 1\n    for num in arr:\n        product *= num\n    return abs(product)\n\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    visited = [[False]*n for _ in range(n)]\n    path = []\n    min_path = [float('inf')]*n\n    min_path_index = [-1]*n\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n\n    def dfs(x, y, k):\n        nonlocal min_path, min_path_index, path\n        if k == 0:\n            if len(path) == n:\n                min_path[x] = min(min_path[x], sum(path))\n                min_path_index[x] = len(path)\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                path.append(grid[nx][ny])\n                dfs(nx, ny, k-1)\n                path.pop()\n                visited[nx][ny] = False\n\n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            path.append(grid[i][j])\n            dfs(i, j, k-1)\n            path.pop()\n            visited[i][j] = False\n\n    return [grid[i][j] for i, j in zip(min_path_index, min_path_index)]\n"}
{"task_id": "HumanEval/130", "completion": "\n    def tri(n):\n        if n == 0:\n            return [3]\n        elif n == 1:\n            return [3, 3]\n        elif n == 2:\n            return [3, 3, 2, 8]\n        else:\n            sequence = [3, 3, 2, 8]\n            for i in range(4, n + 1):\n                if i % 2 == 0:\n                    sequence.append(sequence[i // 2] + sequence[i // 2 - 1] + sequence[i // 2 + 1])\n                else:\n                    sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n            return sequence\n\n    print(tri(3))\n\ntri(3)\n<jupyter>\n<empty_output>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupyter>\n<jupy"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum(int(round(i))**2 for i in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if len(txt) == 0:\n        return False\n    if len(txt) == 1:\n        return not txt[-1].isalpha()\n    return not txt[-1].isalpha() and not txt[-2].isalpha()\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    neg_lst = [i for i in lst if i < 0]\n    pos_lst = [i for i in lst if i > 0]\n    neg_lst.sort(reverse=True)\n    pos_lst.sort()\n    a, b = None, None\n    if neg_lst:\n        a = neg_lst[0]\n    if pos_lst:\n        b = pos_lst[0]\n    return a, b\n\n"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(s):\n        try:\n            return float(s)\n        except ValueError:\n            return None\n\n    def convert_to_int(s):\n        try:\n            return int(s)\n        except ValueError:\n            return None\n\n    a = convert_to_float(a)\n    b = convert_to_int(b)\n\n    if a is None and b is None:\n        return None\n    elif a is not None and b is None:\n        return a\n    elif a is None and b is not None:\n        return b\n    else:\n        return a if a < b else b\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    # Your code here\n    pass\n"}
{"task_id": "HumanEval/139", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    return text.replace(\" \", \"_\")\n\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    def check_name(file_name):\n        if len(file_name) > 3 and file_name[-3:].isdigit() and file_name.count('.') == 1:\n            name_parts = file_name.split('.')\n            if name_parts[0].isalpha() and name_parts[0][0].islower() and name_parts[0][-1].isalpha() and name_parts[0][-1].islower():\n                if name_parts[1] in ['txt', 'exe', 'dll']:\n                    return 'Yes'\n        return 'No'\n\n    return check_name(file_name)\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(x**3 if i%3==0 else x**2 if i%4==0 else 0 for i,x in enumerate(lst))\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return \" \".join(result)\n\n"}
{"task_id": "HumanEval/144", "completion": "\n    def simplify(x, n):\n        x_num, x_den = map(int, x.split('/'))\n        n_num, n_den = map(int, n.split('/'))\n        return x_num * n_num == x_den * n_den\n\n    return simplify(x, n)\n"}
{"task_id": "HumanEval/145", "completion": "\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_special(n):\n        str_n = str(n)\n        return str_n[0] in '13579' and str_n[-1] in '13579' and n > 10\n\n    return len([n for n in nums if is_special(n)])\n"}
{"task_id": "HumanEval/147", "completion": "\n    def is_multiple_of_3(n):\n        return n % 3 == 0\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if is_multiple_of_3(a[i] + a[j] + a[k]):\n                    count += 1\n    return count\n\n\nn = 5\na = [i * i - i + 1 for i in range(1, n + 1)]"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        if index1 < index2:\n            return tuple(planets[index1+1:index2])\n        else:\n            return tuple(planets[index2+1:index1])\n"}
{"task_id": "HumanEval/149", "completion": "\n    def list_sort(lst):\n        lst = [i for i in lst if len(i) % 2 == 0]\n        lst.sort(key=lambda x: (len(x), x))\n        return lst\n\n    print(list_sort([\"aa\", \"a\", \"aaa\"]))\n    print(list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]))\n\nlist_sort([\"aa\", \"a\", \"aaa\"])\nlist_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(guess[i]-score[i]) for i in range(len(score))]\n"}
{"task_id": "HumanEval/153", "completion": "\n    class_name = class_name.replace(\" \", \"\")\n    extensions.sort(key=lambda x: (sum(c.isupper() for c in x) - sum(c.islower() for c in x), x), reverse=True)\n    for extension in extensions:\n        if extension.startswith(class_name):\n            return f\"{class_name}.{extension}\"\n    return f\"{class_name}.{extensions[0]}\"\n\n"}
{"task_id": "HumanEval/154", "completion": "\n    def rotations(s):\n        return [s[i:] + s[:i] for i in range(len(s))]\n\n    return any(rot in a for rot in rotations(b))\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n"}
{"task_id": "HumanEval/156", "completion": "\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n\n"}
{"task_id": "HumanEval/157", "completion": "\n    # Check if the three sides can form a right-angled triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_count = 0\n    max_word = \"\"\n    for word in words:\n        unique_count = len(set(word))\n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    if remaining >= need:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n"}
{"task_id": "HumanEval/161", "completion": "\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return list(range(a, b + 1))\n\n"}
