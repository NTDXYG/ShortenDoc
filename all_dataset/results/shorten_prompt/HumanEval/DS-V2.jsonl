{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == ' ':\n            continue\n        current_group += char\n        if char == '(':\n            if stack:\n                stack.append(char)\n            else:\n                stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)\n"}
{"task_id": "HumanEval/5", "completion": "\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    if numbers:\n        result.append(numbers[-1])\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    max_depths = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths\n"}
{"task_id": "HumanEval/7", "completion": "\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n    \n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    \n    return total_sum, total_product\n"}
{"task_id": "HumanEval/9", "completion": "\n    result = []\n    current_max = None\n    \n    for num in numbers:\n        if current_max is None or num > current_max:\n            current_max = num\n        result.append(current_max)\n    \n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\n    return ''.join('0' if x == y else '1' for x, y in zip(a, b))\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\n    result = ' '.join(str(i) for i in range(n + 1))\n    return result\n"}
{"task_id": "HumanEval/16", "completion": "\n    distinct_characters = set()\n    for char in string:\n        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n"}
{"task_id": "HumanEval/17", "completion": "\n    beats = []\n    notes = music_string.split()\n    \n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    \n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    step = 1  # To allow overlapping\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    # Create a dictionary to map words to their corresponding numerical values\n    word_to_num = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Convert the list of words to a list of numerical values\n    num_values = [word_to_num[word] for word in words]\n    \n    # Sort the numerical values\n    num_values.sort()\n    \n    # Convert the sorted numerical values back to words\n    sorted_words = [\n        next(word for word, num in word_to_num.items() if num == value)\n        for value in num_values\n    ]\n    \n    # Join the sorted words back into a space-delimited string\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    \n    return tuple(sorted(closest_pair))\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    rescaled_numbers = [(x - min_val) / range_val for x in numbers]\n    \n    return rescaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    length = 0\n    for _ in string:\n        length += 1\n    return length\n"}
{"task_id": "HumanEval/24", "completion": "\n    if n <= 1:\n        return None\n    \n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = set()\n    result = []\n    for number in numbers:\n        if numbers.count(number) == 1:\n            result.append(number)\n        elif number not in seen:\n            seen.add(number)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n"}
{"task_id": "HumanEval/28", "completion": "\n    result = \"\"\n    for s in strings:\n        result += s\n    return result\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    # Initial guess for the root\n    a = -1.0\n    b = 1.0\n\n    # Use the bisection method to find the root\n    while abs(b - a) > 1e-10:\n        c = (a + b) / 2.0\n        if f(c) == 0:\n            return c\n        elif f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n\n    return (a + b) / 2.0\n"}
{"task_id": "HumanEval/33", "completion": "\n    for i in range(0, len(l), 3):\n        if i + 2 < len(l):\n            l[i:i+3] = sorted(l[i:i+3])\n        else:\n            l[i:] = sorted(l[i:])\n    return l\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    \n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    l_prime = l[:]\n    for i in range(0, len(l), 2):\n        l_prime[i] = even_indices[i // 2]\n    return l_prime\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back to original order. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fibonacci():\n        a, b = 0, 1\n        while True:\n            yield a\n            a, b = b, a + b\n\n    fib_gen = fibonacci()\n    count = 0\n    for fib in fib_gen:\n        if is_prime(fib):\n            count += 1\n            if count == n:\n                return fib\n"}
{"task_id": "HumanEval/40", "completion": "\n    n = len(l)\n    if n < 3:\n        return False\n    \n    l.sort()\n    \n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Since all cars are moving at the same speed, the number of collisions\n    # is simply the number of pairs of cars from the two sets that meet.\n    # Each car from the first set will collide with each car from the second set.\n    # Therefore, the total number of collisions is n * n.\n    \n    collisions = n * n\n    \n    return collisions\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2:\n        raise ValueError(\"Base must be at least 2\")\n    \n    if x == 0:\n        return \"0\"\n    \n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    \n    return ''.join(result[::-1])\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    return d\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    from collections import Counter\n    \n    return Counter(s0) == Counter(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    n = len(xs)\n    return [i * xs[i] for i in range(1, n)]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    \n    return c\n"}
{"task_id": "HumanEval/64", "completion": "\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    if shift <= 0:\n        return str(x)\n    \n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift >= length:\n        return x_str\n    \n    shifted_str = x_str[-shift:] + x_str[:-shift]\n    return shifted_str\n"}
{"task_id": "HumanEval/66", "completion": "\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Split the string to extract the number of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    min_even_value = float('inf')\n    min_index = -1\n    \n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even_value:\n            min_even_value = value\n            min_index = i\n    \n    if min_even_value == float('inf'):\n        return []\n    else:\n        return [min_even_value, min_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    max_valid_num = -1\n    for num, freq in frequency.items():\n        if num > 0 and freq >= num:\n            if max_valid_num == -1 or num > max_valid_num:\n                max_valid_num = num\n\n    return max_valid_num\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        if len(sorted_lst) > 1:\n            result.append(sorted_lst.pop(0))\n            result.append(sorted_lst.pop())\n        else:\n            result.append(sorted_lst.pop())\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    if len(q) == 0:\n        return False\n    \n    # Check if the list is palindromic\n    is_palindromic = q == q[::-1]\n    \n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to the maximum possible weight\n    can_fly = total_weight <= w\n    \n    # Return True if both conditions are met\n    return is_palindromic and can_fly\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    def total_match(lst1, lst2):\n        def total_chars(lst):\n            return sum(len(s) for s in lst)\n        \n        total_chars_lst1 = total_chars(lst1)\n        total_chars_lst2 = total_chars(lst2)\n        \n        if total_chars_lst1 <= total_chars_lst2:\n            return lst1\n        else:\n            return lst2\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n    \n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i != j and j != k and i != k and i * j * k == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    \n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    \n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\n    if a < 0:\n        a = -a\n    \n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for char in num:\n        if char in prime_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    binary_str = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary_str}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 1  # Only the number 1 itself\n    \n    # For n-digit numbers, the first digit can be 1 or the last digit can be 1\n    # There are 9 possible choices for the first digit (1-9) and 10 possible choices for the last digit (0-9)\n    # But if the first digit is 1, the last digit can be any of 10 (0-9)\n    # If the last digit is 1, the first digit can be any of 9 (1-9)\n    # We subtract 1 to avoid double-counting the case where both the first and last digits are 1\n    \n    return 9 * 10**(n-2) + 10**(n-1) - 1\n"}
{"task_id": "HumanEval/84", "completion": "\n    sum_digits = sum(int(digit) for digit in str(N))\n    return bin(sum_digits)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    \n    # Sort by rows in ascending order, and by columns in descending order within each row\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return array\n    \n    first_value = array[0]\n    last_value = array[-1]\n    sum_values = first_value + last_value\n    \n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                encrypted_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None\n"}
{"task_id": "HumanEval/91", "completion": "\n    count = 0\n    sentences = re.split(r'[.!?]', S)\n    for sentence in sentences:\n        if sentence.strip().lower().startswith(\"i\"):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    return (x == y + z) or (y == x + z) or (z == x + y)\n"}
{"task_id": "HumanEval/93", "completion": "\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                # Find the next vowel in the alphabet\n                if char.lower() == 'a':\n                    new_char = 'c'\n                elif char.lower() == 'e':\n                    new_char = 'g'\n                elif char.lower() == 'i':\n                    new_char = 'k'\n                elif char.lower() == 'o':\n                    new_char = 'q'\n                elif char.lower() == 'u':\n                    new_char = 'w'\n                # Swap case\n                new_char = new_char.swapcase() if char.isupper() else new_char\n            else:\n                # Swap case for non-vowel letters\n                new_char = char.swapcase()\n            encoded_message += new_char\n        else:\n            # Non-alphabetic characters remain unchanged\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n    \n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    \n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n <= 0:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    if '.' in value:\n        integer_part, decimal_part = value.split('.')\n        decimal_part = int(decimal_part[0])\n        if int(integer_part) >= 0:\n            if decimal_part >= 5:\n                return int(integer_part) + 1\n            else:\n                return int(integer_part)\n        else:\n            if decimal_part >= 5:\n                return int(integer_part) - 1\n            else:\n                return int(integer_part)\n    else:\n        return int(value)\n"}
{"task_id": "HumanEval/100", "completion": "\n    pile = []\n    current_level = n\n    while current_level > 0:\n        pile.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\n    words = s.replace(',', ' ').split()\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    else:\n        return y\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_result = bin(rounded_avg)\n    \n    return binary_result\n"}
{"task_id": "HumanEval/104", "completion": "\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n"}
{"task_id": "HumanEval/105", "completion": "\n    # Filter out numbers not between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each digit to its corresponding name\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit with its corresponding name\n    result = [digit_to_name[num] for num in reversed_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    count = 0\n    for num in arr:\n        sum_digits = 0\n        abs_num = abs(num)\n        while abs_num > 0:\n            sum_digits += abs_num % 10\n            abs_num //= 10\n        if num < 0:\n            sum_digits = -sum_digits\n        if sum_digits > 0:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n    \n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    # Find the index of the minimum element in the sorted array\n    min_index = sorted_arr.index(min(sorted_arr))\n    \n    # Perform the right shift operation `min_index` times\n    shifted_arr = arr[-min_index:] + arr[:-min_index]\n    \n    # Check if the shifted array is sorted\n    return shifted_arr == sorted_arr\n"}
{"task_id": "HumanEval/110", "completion": "\n    # Check if lst1 already contains only even numbers\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    # Check if lst2 contains at least as many even numbers as there are odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    from collections import Counter\n\n    # Split the input string into individual letters\n    letters = test.split()\n    \n    # Count the occurrences of each letter\n    letter_counts = Counter(letters)\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Filter the dictionary to include only letters with the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\n    result = ''.join([char for char in s if char != c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits_count}n the str{odd_digits_count}ng {odd_digits_count} of the {odd_digits_count}nput.\")\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_buckets_lowered = 0\n    \n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            total_buckets_lowered += math.ceil(water_units / capacity)\n    \n    return total_buckets_lowered\n"}
{"task_id": "HumanEval/116", "completion": "\n    arr.sort(key=lambda x: (bin(x).count('1'), x))\n    return arr\n"}
{"task_id": "HumanEval/117", "completion": "\n    words = s.split()\n    vowels = \"aeiouAEIOU\"\n    result = []\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"AEIOUaeiou\"\n    consonants = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    \n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    open_count = 0\n    close_count = 0\n    \n    for char in lst[0]:\n        if char == '(':\n            open_count += 1\n        else:\n            close_count += 1\n    \n    for char in lst[1]:\n        if char == '(':\n            open_count += 1\n        else:\n            close_count += 1\n    \n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Take the first k elements from the sorted array\n    max_k_elements = sorted_arr[:k]\n    \n    # Sort the k elements in ascending order\n    result = sorted(max_k_elements)\n    \n    return result\n"}
{"task_id": "HumanEval/121", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total\n"}
{"task_id": "HumanEval/122", "completion": "\n    total_sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100:\n            total_sum += arr[i]\n    return total_sum\n"}
{"task_id": "HumanEval/123", "completion": "\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n    \n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day > 30:\n            return False\n    elif month == 2:\n        if day > 29:\n            return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    \n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return False\n        if lst[i] == lst[i - 1]:\n            if i > 1 and lst[i] == lst[i - 2]:\n                return False\n    \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product_of_signs *= 1\n        elif num < 0:\n            product_of_signs *= -1\n        else:\n            product_of_signs *= 0\n        sum_of_magnitudes += abs(num)\n    \n    return sum_of_magnitudes * product_of_signs\n"}
{"task_id": "HumanEval/129", "completion": "\n    def dfs(x, y, path, length):\n        if length == k:\n            if result is None or path < result:\n                result.clear()\n                result.extend(path)\n            return\n        \n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path, length + 1)\n                path.pop()\n                visited.remove((nx, ny))\n\n    N = len(grid)\n    result = None\n    for i in range(N):\n        for j in range(N):\n            visited = set()\n            visited.add((i, j))\n            dfs(i, j, [grid[i][j]], 1)\n    \n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    \n    result = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result.append(1 + i // 2)\n        else:\n            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n    \n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    nested = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack and stack[-1] == '[':\n                    nested = True\n            else:\n                return False\n    \n    return nested and not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    total = 0\n    for num in lst:\n        ceiling_num = math.ceil(num)\n        total += ceiling_num ** 2\n    return total\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    \n    last_char = txt[-1]\n    if last_char.isalpha():\n        words = txt.split()\n        if len(words) == 0:\n            return False\n        last_word = words[-1]\n        return last_char != last_word[-1]\n    return False\n"}
{"task_id": "HumanEval/135", "completion": "\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            return i\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        b = float(b)\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n == 1:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        factorial_i = 1\n        for j in range(1, i + 1):\n            factorial_i *= j\n        result *= factorial_i\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\n    import re\n\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace sequences of more than 2 underscores with a single underscore\n    text = re.sub(r'_{2,}', '_', text)\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    def file_name_check(file_name):\n        # Check if the file name contains exactly one dot\n        if file_name.count('.') != 1:\n            return 'No'\n        \n        # Split the file name into the part before and after the dot\n        name_part, extension_part = file_name.split('.')\n        \n        # Check if the name part starts with a latin alphabet letter\n        if not re.match(r'^[a-zA-Z]', name_part):\n            return 'No'\n        \n        # Check if the name part contains more than three digits\n        if len(re.findall(r'\\d', name_part)) > 3:\n            return 'No'\n        \n        # Check if the extension part is one of the allowed extensions\n        if extension_part not in ['txt', 'exe', 'dll']:\n            return 'No'\n        \n        return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total_sum = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total_sum += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total_sum += num ** 3\n        else:\n            total_sum += num\n    return total_sum\n"}
{"task_id": "HumanEval/143", "completion": "\n    words = sentence.split()\n    prime_words = []\n    \n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    \n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    from fractions import Fraction\n\n    def simplify(x, n):\n        # Convert the string fractions to Fraction objects\n        x_frac = Fraction(x)\n        n_frac = Fraction(n)\n        \n        # Multiply the two fractions\n        result = x_frac * n_frac\n        \n        # Check if the result is a whole number\n        return result.denominator == 1\n\n    # Example usage:\n    # print(simplify(\"1/5\", \"5/1\"))  # Output: True\n    # print(simplify(\"1/6\", \"2/1\"))  # Output: False\n    # print(simplify(\"7/10\", \"10/2\"))  # Output: False\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit in [1, 3, 5, 7, 9] and last_digit in [1, 3, 5, 7, 9]:\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize a counter for the valid triples\n    count = 0\n    \n    # Iterate over all possible triples (i, j, k) with i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length of words, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\n    total_sum = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            total_sum += num ** 2\n    return total_sum\n"}
{"task_id": "HumanEval/152", "completion": "\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n"}
{"task_id": "HumanEval/153", "completion": "\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    # Concatenate the second word with itself to handle rotations\n    rotated_b = b + b\n    \n    # Check if the first word contains any rotation of the second word\n    return b in a or any(rotated_b[i:i+len(b)] in a for i in range(len(b)))\n"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n    \n    # Convert the number to a positive value if it's negative\n    num = abs(num)\n    \n    # Iterate through each digit in the number\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    \n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_count = 0\n    max_word = \"\"\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            max_word = word\n        elif unique_count == max_unique_count:\n            if word < max_word:\n                max_word = word\n    \n    return max_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    \n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
