{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    balance = 0\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            if balance == 0 and current_group:\n                result.append(''.join(current_group))\n                current_group = []\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        \n        current_group.append(char)\n\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\n    if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    \n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    def max_nesting_level(s: str) -> int:\n        max_level = 0\n        current_level = 0\n        for char in s:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        return max_level\n\n    groups = paren_string.split()\n    return [max_nesting_level(group) for group in groups]\n"}
{"task_id": "HumanEval/7", "completion": "\n    return [s for s in strings if substring in s]\n"}
{"task_id": "HumanEval/8", "completion": "\n    if not numbers:\n        return (0, 1)\n    \n    total_sum = sum(numbers)\n    total_product = 1\n    for number in numbers:\n        total_product *= number\n    \n    return (total_sum, total_product)\n"}
{"task_id": "HumanEval/9", "completion": "\n    if not numbers:\n        return []\n\n    max_so_far = numbers[0]\n    result = [max_so_far]\n\n    for num in numbers[1:]:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n\n    return result\n"}
{"task_id": "HumanEval/10", "completion": "\n    if is_palindrome(string):\n        return string\n\n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the prefix before the palindromic suffix\n            return string + string[:i][::-1]\n\n    return string  # Fallback, should not reach here\n"}
{"task_id": "HumanEval/11", "completion": "\n    if len(a) != len(b):\n        raise ValueError(\"Strings must be of the same length\")\n\n    result = []\n    for char_a, char_b in zip(a, b):\n        result.append('1' if char_a != char_b else '0')\n\n    return ''.join(result)\n"}
{"task_id": "HumanEval/12", "completion": "\n    if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string\n"}
{"task_id": "HumanEval/13", "completion": "\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\n    return [string[:i] for i in range(1, len(string) + 1)]\n"}
{"task_id": "HumanEval/15", "completion": "\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"task_id": "HumanEval/16", "completion": "\n    return len(set(string.lower()))\n"}
{"task_id": "HumanEval/17", "completion": "\n    note_durations = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    return [note_durations[note] for note in notes]\n"}
{"task_id": "HumanEval/18", "completion": "\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1  # Move to the next character to allow for overlapping\n        \n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into words\n    words = numbers.split()\n    \n    # Convert words to their corresponding numeric values\n    numeric_values = [num_dict[word] for word in words]\n    \n    # Sort the numeric values\n    numeric_values.sort()\n    \n    # Convert sorted numeric values back to words\n    sorted_words = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in numeric_values]\n    \n    # Join the sorted words into a single string\n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n"}
{"task_id": "HumanEval/21", "completion": "\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    if range_val == 0:\n        return [0.0] * len(numbers)  # All values are the same\n    \n    return [(num - min_val) / range_val for num in numbers]\n"}
{"task_id": "HumanEval/22", "completion": "\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # In case n is 1, the largest divisor is 1\n"}
{"task_id": "HumanEval/25", "completion": "\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\n    seen = {}\n    result = []\n    \n    for number in numbers:\n        if number in seen:\n            seen[number] += 1\n        else:\n            seen[number] = 1\n    \n    for number in numbers:\n        if seen[number] == 1:\n            result.append(number)\n    \n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\n    return string.swapcase()\n"}
{"task_id": "HumanEval/28", "completion": "\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\n    return [x for x in l if x > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\n    if len(xs) % 2 != 0 or all(c == 0 for c in xs):\n        raise ValueError(\"Coefficient list must have an even number of coefficients and cannot be all zero.\")\n\n    # Using Newton's method to find a root\n    def derivative(xs):\n        return [i * coeff for i, coeff in enumerate(xs) if i > 0]\n\n    x0 = 0.0  # Initial guess\n    tolerance = 1e-7\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        f_x0 = poly(xs, x0)\n        f_prime_x0 = poly(derivative(xs), x0)\n\n        if f_prime_x0 == 0:\n            raise ValueError(\"Derivative is zero. No solution found.\")\n\n        x1 = x0 - f_x0 / f_prime_x0\n\n        if abs(x1 - x0) < tolerance:\n            return x1\n\n        x0 = x1\n\n    raise ValueError(\"Maximum iterations reached. No solution found.\")\n"}
{"task_id": "HumanEval/33", "completion": "\n    sorted_third = sorted(l[i] for i in range(len(l)) if i % 3 == 0)\n    result = l[:]\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_third[j]\n            j += 1\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\n    return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "\n    if not l:\n        return None\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/36", "completion": "\n    count = 0\n    for i in range(n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    \n    result = l[:]\n    for i, val in enumerate(even_indices):\n        result[i * 2] = val\n    \n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 0, 1\n    count = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            count += 1\n            if count == n:\n                return fib2\n"}
{"task_id": "HumanEval/40", "completion": "\n    n = len(l)\n    l.sort()\n    \n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\n    # The number of collisions is simply the product of the number of cars moving in each direction.\n    # Since all cars are moving at the same speed and will collide with each other, the total number of collisions\n    # is n (cars moving left to right) multiplied by n (cars moving right to left).\n    \n    return n * n\n"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    \n    return ''.join(reversed(digits))\n"}
{"task_id": "HumanEval/45", "completion": "\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0] * (n + 1)\n    fib[0], fib[1], fib[2], fib[3] = 0, 0, 2, 0\n\n    for i in range(4, n + 1):\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3] + fib[i - 4]\n\n    return fib[n]\n"}
{"task_id": "HumanEval/47", "completion": "\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]\n"}
{"task_id": "HumanEval/48", "completion": "\n    text = text.lower().replace(\" \", \"\")\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)\n"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)\n"}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/57", "completion": "\n    if not l:\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    \n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\n    return sorted(set(l1) & set(l2))\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest_factor = 1\n    for i in range(2, n + 1):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    return largest_factor\n"}
{"task_id": "HumanEval/60", "completion": "\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n"}
{"task_id": "HumanEval/62", "completion": "\n    return [i * coeff for i, coeff in enumerate(xs)][1:]\n"}
{"task_id": "HumanEval/63", "completion": "\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    fibfib_sequence = [0, 0, 1] + [0] * (n - 2)\n    \n    for i in range(3, n + 1):\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\n    \n    return fibfib_sequence[n]\n"}
{"task_id": "HumanEval/64", "completion": "\n    s = s.lower()\n    vowels = 'aeiou'\n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s) - 1:\n            count += 1\n            \n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\n    str_x = str(x)\n    n = len(str_x)\n    shift = shift % n  # Normalize shift to the length of the number\n    if shift == 0:\n        return str_x\n    return str_x[-shift:] + str_x[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\n    return sum(ord(char) for char in s if char.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\n    # Extract the number of apples and oranges from the string\n    parts = s.split()\n    apples = int(parts[0])  # First part is the number of apples\n    oranges = int(parts[2])  # Third part is the number of oranges\n\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\n    if not arr:\n        return []\n    \n    smallest_even = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n    \n    if smallest_index == -1:\n        return []\n    \n    return [smallest_even, smallest_index]\n"}
{"task_id": "HumanEval/69", "completion": "\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    result = -1\n    for num in frequency:\n        if frequency[num] >= num:\n            result = max(result, num)\n\n    return result\n"}
{"task_id": "HumanEval/70", "completion": "\n    if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    \n    while sorted_lst:\n        result.append(sorted_lst.pop(0))  # Take the first element\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))  # Take the last element\n    \n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n            \n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/76", "completion": "\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x\n"}
{"task_id": "HumanEval/77", "completion": "\n    return round(a ** (1/3)) ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\n    if decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    \n    binary = bin(decimal)[2:]  # Convert to binary and remove the '0b' prefix\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n    \n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\n    letter_grades = []\n    for gpa in grades:\n        if gpa >= 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n < 1:\n        return 0\n\n    # Count of n-digit numbers\n    total_n_digit_numbers = 9 * (10 ** (n - 1))\n\n    # Count of n-digit numbers that start with 1\n    start_with_1 = 10 ** (n - 1)\n\n    # Count of n-digit numbers that end with 1\n    end_with_1 = 10 ** (n - 1)\n\n    # Count of n-digit numbers that both start and end with 1\n    start_and_end_with_1 = 10 ** (n - 2) if n > 1 else 0\n\n    # Total count of n-digit numbers that start or end with 1\n    count = start_with_1 + end_with_1 - start_and_end_with_1\n\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\n    digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n"}
{"task_id": "HumanEval/86", "completion": "\n    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        if word:  # Check if the word is not empty\n            ordered_word = ''.join(sorted(word))\n            ordered_words.append(ordered_word)\n        else:\n            ordered_words.append('')  # Preserve the empty space\n\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\n    result = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                result.append((i, j))\n    \n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result\n"}
{"task_id": "HumanEval/88", "completion": "\n    if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    total = first + last\n    \n    sorted_array = sorted(array)\n    \n    if total % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            # Shift character by 2 places\n            shifted = ord(char) + 2\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n            encrypted += chr(shifted)\n        else:\n            encrypted += char  # Non-alphabetic characters remain unchanged\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\n    if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[1] if len(unique_lst) > 1 else None\n"}
{"task_id": "HumanEval/91", "completion": "\n    import re\n\n    # Split the string into sentences using regex\n    sentences = re.split(r'[.!?]', S)\n\n    # Count the number of sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n\n    return boredom_count\n"}
{"task_id": "HumanEval/92", "completion": "\n    return x == y + z or y == x + z or z == x + y\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    encoded_message = []\n\n    for char in message:\n        if char.isalpha():\n            # Swap case\n            if char in vowels:\n                # Replace vowel with the letter 2 places ahead\n                if char.islower():\n                    new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                else:\n                    new_char = chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                new_char = char.swapcase()\n            encoded_message.append(new_char)\n        else:\n            encoded_message.append(char)\n\n    return ''.join(encoded_message)\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = -1\n    for number in lst:\n        if is_prime(number) and number > largest_prime:\n            largest_prime = number\n\n    if largest_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    keys = dict.keys()\n    all_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n\n    return all_lower or all_upper\n"}
{"task_id": "HumanEval/96", "completion": "\n    if n < 2:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    \n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    return (abs(a) % 10) * (abs(b) % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n"}
{"task_id": "HumanEval/100", "completion": "\n    stones = []\n    for i in range(n):\n        stones.append(n + 2 * i)\n    return stones\n"}
{"task_id": "HumanEval/101", "completion": "\n    import re\n    return re.findall(r'\\S+', s)\n"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    return y - 1 if y - 1 >= x else -1\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    \n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total_sum / count\n    rounded_average = round(average)\n    \n    return bin(rounded_average)\n"}
{"task_id": "HumanEval/104", "completion": "\n    return sorted(set(num for num in x if all(int(digit) % 2 != 0 for digit in str(num))))\n"}
{"task_id": "HumanEval/105", "completion": "\n    if not arr:\n        return []\n    \n    # Filter the array to include only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Mapping of numbers to their corresponding names\n    number_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_names[num] for num in filtered_arr]\n    \n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    result = []\n    for i in range(n):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_of_numbers = sum(range(1, i + 1))\n            result.append(sum_of_numbers)\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        return sum(int(digit) if n >= 0 else -int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n"}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n\n    # Check for the point of rotation\n    for i in range(n):\n        if arr[i] == sorted_arr[0]:\n            # Check if the array from this point is sorted\n            if arr[i:] + arr[:i] == sorted_arr:\n                return True\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\n    odd_count = sum(1 for x in lst1 if x % 2 != 0)\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    if odd_count <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\n    if not test:\n        return {}\n    \n    counts = {}\n    for letter in test.split():\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}\n"}
{"task_id": "HumanEval/112", "completion": "\n    # Remove all occurrences of character c from string s\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)\n"}
{"task_id": "HumanEval/113", "completion": "\n    return [f\"the number of odd elements {sum(1 for char in s if char in '13579')}n the str{sum(1 for char in s if char in '13579')}ng {sum(1 for char in s if char in '13579')} of the {sum(1 for char in s if char in '13579')}nput.\" for s in lst]\n"}
{"task_id": "HumanEval/114", "completion": "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_moves = 0\n    for row in grid:\n        water_units = sum(row)\n        if water_units > 0:\n            total_moves += math.ceil(water_units / capacity)\n    return total_moves\n"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\n    if not s:\n        return []\n\n    vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n\n    for word in words:\n        consonant_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\n    # Define the set of vowels\n    vowels = \"aeiouAEIOU\"\n    \n    # Initialize the index to track the position of the closest vowel\n    closest_vowel = \"\"\n    \n    # Iterate through the word in reverse order\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the vowel is between two consonants\n            if i > 0 and word[i - 1] not in vowels and word[i - 1].isalpha():\n                closest_vowel = word[i]\n                break\n    \n    return closest_vowel\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    a, b = lst\n    return 'Yes' if (is_good(a + b) or is_good(b + a)) else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\n    if k == 0:\n        return []\n    \n    # Sort the array in descending order and take the first k elements\n    max_k_elements = sorted(arr, reverse=True)[:k]\n    \n    # Return the sorted list of the maximum k numbers\n    return sorted(max_k_elements)\n"}
{"task_id": "HumanEval/121", "completion": "\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\n    return sum(x for x in arr[:k] if 0 <= x < 100)\n"}
{"task_id": "HumanEval/123", "completion": "\n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)  # Include the last term which is 1\n\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)\n"}
{"task_id": "HumanEval/124", "completion": "\n    if not date:\n        return False\n\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29  # Leap year check can be added if needed\n\n    return False\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n"}
{"task_id": "HumanEval/126", "completion": "\n    if len(lst) <= 1:\n        return True\n    \n    seen = set()\n    for i in range(len(lst)):\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i])\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    if intersection_start >= intersection_end:\n        return \"NO\"\n\n    intersection_length = intersection_end - intersection_start\n\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n    \n    product_sign = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            magnitude_sum += num\n        elif num < 0:\n            magnitude_sum += -num\n            product_sign *= -1\n        else:\n            product_sign = 0\n    \n    return magnitude_sum * product_sign\n"}
{"task_id": "HumanEval/129", "completion": "\n    from collections import deque\n\n    def bfs(start):\n        queue = deque([(start, [grid[start[0]][start[1]]])])\n        min_path = None\n\n        while queue:\n            (x, y), path = queue.popleft()\n\n            if len(path) == k:\n                if min_path is None or path < min_path:\n                    min_path = path\n                continue\n\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < len(grid) and 0 <= ny < len(grid[0]):\n                    queue.append(((nx, ny), path + [grid[nx][ny]]))\n\n        return min_path\n\n    result = None\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            path = bfs((i, j))\n            if result is None or path < result:\n                result = path\n\n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    result = []\n    for i in range(n + 1):\n        result.append(tri_helper(i))\n    return result\n"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Remove the last digit\n    \n    return product if has_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n            if len(stack) > 1:\n                nested = True\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return nested and not stack\n"}
{"task_id": "HumanEval/133", "completion": "\n    return sum((int(num) + (num % 1 > 0)) ** 2 for num in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt) == 1 or txt[-2] == ' ')\n"}
{"task_id": "HumanEval/135", "completion": "\n    for i in range(len(arr) - 1):\n        if arr[i + 1] >= arr[i]:\n            return i + 1\n    return -1\n"}
{"task_id": "HumanEval/136", "completion": "\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n"}
{"task_id": "HumanEval/137", "completion": "\n    if a == b:\n        return None\n    \n    try:\n        a_float = float(a)\n    except ValueError:\n        a_float = None\n\n    try:\n        b_float = float(b)\n    except ValueError:\n        b_float = None\n\n    if a_float is not None and b_float is not None:\n        return b if b_float > a_float else a\n\n    return b if isinstance(b, (int, float, str)) else a\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 8:\n        return False\n    return (n % 2 == 0)\n"}
{"task_id": "HumanEval/139", "completion": "\n    if n < 1:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n\nfrom math import factorial\n"}
{"task_id": "HumanEval/140", "completion": "\n    # Replace multiple spaces with a single space\n    text = ' '.join(text.split())\n    \n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace underscores with a single underscore if there are more than 2 consecutive spaces\n    text = text.replace('__', '_')\n    \n    return text\n"}
{"task_id": "HumanEval/141", "completion": "\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, extension = file_name.split('.')\n    \n    if not name or not name[0].isalpha() or sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n    return total\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n\n    return result_numerator % result_denominator == 0\n"}
{"task_id": "HumanEval/145", "completion": "\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\n    def is_odd_digit(n):\n        str_n = str(abs(n))\n        return int(str_n[0]) % 2 == 1 and int(str_n[-1]) % 2 == 1\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    return tuple(planets[index1 + 1:index2])\n"}
{"task_id": "HumanEval/149", "completion": "\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n"}
{"task_id": "HumanEval/150", "completion": "\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n    \n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n"}
{"task_id": "HumanEval/152", "completion": "\n    return [abs(g - s) for s, g in zip(game, guess)]\n"}
{"task_id": "HumanEval/153", "completion": "\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\n    if len(b) > len(a):\n        return False\n    \n    # Create a new string by concatenating 'b' with itself\n    b_rotated = b + b\n    \n    # Check if 'a' contains any substring of 'b_rotated' that is of length equal to 'b'\n    return b_rotated.find(a) != -1\n"}
{"task_id": "HumanEval/155", "completion": "\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\n    if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = [\n        (1000, 'm'),\n        (900, 'cm'),\n        (500, 'd'),\n        (400, 'cd'),\n        (100, 'c'),\n        (90, 'xc'),\n        (50, 'l'),\n        (40, 'xl'),\n        (10, 'x'),\n        (9, 'ix'),\n        (5, 'v'),\n        (4, 'iv'),\n        (1, 'i')\n    ]\n\n    result = []\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result.append(numeral)\n            number -= value\n\n    return ''.join(result)\n"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n"}
{"task_id": "HumanEval/158", "completion": "\n    max_unique_count = 0\n    result_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\n        if (unique_count > max_unique_count) or (unique_count == max_unique_count and word < result_word):\n            max_unique_count = unique_count\n            result_word = word\n\n    return result_word\n"}
{"task_id": "HumanEval/159", "completion": "\n    total_needed = need + number\n    if remaining >= need:\n        return [total_needed, remaining - need]\n    else:\n        return [total_needed, remaining]\n"}
{"task_id": "HumanEval/160", "completion": "\n    expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += f\" {op} {num}\"\n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\n    if any(c.isalpha() for c in s):\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        return s[::-1]\n"}
{"task_id": "HumanEval/162", "completion": "\n    if not text:\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n"}
