{"task_id": "EvoEval/0", "completion": "\n    import re\n\n    def is_happy(s):\n        s = re.sub(r'[^0-9]*', '', s)\n        for i in range(len(s) - 2):\n            if len(set(s[i:i + 3])) != 3:\n                return False\n        return True\n\n    def to_num(s):\n        s = re.sub(r'[^0-9\\.]', '', s)\n        s = s.replace('.', '')\n        return float(s)\n\n    a_happy = is_happy(a)\n    b_happy = is_happy(b)\n\n    if not a_happy and not b_happy:\n        return None\n    elif a_happy and not b_happy:\n        return a\n    elif not a_happy and b_happy:\n        return b\n    else:\n        a_num = to_num(a)\n        b_num = to_num(b)\n        if a_num > b_num:\n            return a\n        elif a_num < b_num:\n            return b\n        else:\n            return None\n\n"}
{"task_id": "EvoEval/1", "completion": "\n\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        string = string.swapcase()\n        return str(num) + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        string = string.swapcase()\n        return str(num) + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        string = string.swapcase()\n        return str(num) + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        string = string.swapcase()\n        return str(num) + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('.')[1]\n        num = round(float(num))\n        string = string.swapcase()\n        return str(num) + ' ' + string\n    \"\"\"\n    def round_and_flip(value: str) -> str:\n        num, string = value.split('.')[0], value.split('."}
{"task_id": "EvoEval/2", "completion": "\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(pow(2, n, p))\n    return result\n"}
{"task_id": "EvoEval/3", "completion": "\n\n    lst.sort(key=lambda s: s.count('('))\n    balance = 0\n    for s in lst:\n        for c in s:\n            if c == '(':\n                balance += 1\n            elif c == ')':\n                balance -= 1\n            if balance < 0:\n                return 'No'\n    return 'Yes'\n\"\"\"\n"}
{"task_id": "EvoEval/4", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def digit_sum(n):\n        return sum(map(int, str(n)))\n\n    primes = [i for i in lst if is_prime(i)]\n    if not primes:\n        return 0\n    return max(digit_sum(i) for i in primes)\n\n"}
{"task_id": "EvoEval/5", "completion": "\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            if round(numbers[0] + numbers[-1]) % 2 == 0:\n                return sorted(numbers, reverse=True)\n            else:\n                return sorted(numbers)\n    return numbers\n"}
{"task_id": "EvoEval/6", "completion": "\n    total_stones = 0\n    for i in range(n):\n        if n % 2 == 0:\n            total_stones += n + 2 * i\n        else:\n            total_stones += n + 2 * i\n    if n % 2 == 0:\n        return total_stones / n\n    else:\n        return total_stones / n\n\n"}
{"task_id": "EvoEval/7", "completion": "\n    lst = list(range(1, n + 1))\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)\n\n"}
{"task_id": "EvoEval/8", "completion": "\n    stack = []\n    count = 0\n    for char in string:\n        if char == bracket:\n            count += 1\n        if char == \"<\":\n            stack.append(char)\n        if char == \">\":\n            if not stack:\n                return False, count\n            stack.pop()\n    return len(stack) == 0, count\n\n"}
{"task_id": "EvoEval/9", "completion": "\n    planet_order = {\n        \"mercury\": 1,\n        \"venus\": 2,\n        \"earth\": 3,\n        \"mars\": 4,\n        \"jupiter\": 5,\n        \"saturn\": 6,\n        \"uranus\": 7,\n        \"neptune\": 8\n    }\n\n    roman_numerals = {\n        1: \"i\",\n        2: \"ii\",\n        3: \"iii\",\n        4: \"iv\",\n        5: \"v\",\n        6: \"vi\",\n        7: \"vii\",\n        8: \"viii\"\n    }\n\n    if planet1 not in planet_order or planet2 not in planet_order:\n        return {}\n\n    start = min(planet_order[planet1], planet_order[planet2])\n    end = max(planet_order[planet1], planet_order[planet2])\n\n    return {planet: roman_numerals[order] for planet, order in planet_order.items() if start < order < end}\n\n"}
{"task_id": "EvoEval/10", "completion": "\n    # Define the grade boundaries\n    grade_boundaries = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\": 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n        \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\": 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    }\n\n    # Initialize an empty list to store the results\n    results = []\n\n    # Loop through the input list\n    for name, gpa in name_grade_list:\n        # Convert the name to proper case\n        proper_case_name = name[0].upper() + name[1:].lower()\n\n        # Determine the letter grade based on the GPA\n        for grade, boundary in grade_boundaries.items():\n            if gpa >= boundary:\n                letter_grade = grade\n                break\n\n        # Append the result to the list\n        results.append((proper_case_name, letter_grade))\n\n    return results\n\n"}
{"task_id": "EvoEval/11", "completion": "\n"}
{"task_id": "EvoEval/12", "completion": "\n    def count_consonants(name):\n        return sum(1 for c in name if c.lower() in 'bcdfghjklmnpqrstvwxyz')\n\n    grades = {\n        4.0: 'A+',\n        3.7: 'A+',\n        3.3: 'A',\n        3.0: 'A-',\n        2.7: 'B+',\n        2.3: 'B',\n        2.0: 'B-',\n        1.7: 'C+',\n        1.3: 'C',\n        1.0: 'C-',\n        0.7: 'D+',\n        0.3: 'D',\n        0.0: 'D-',\n        0.0: 'E',\n    }\n\n    result = []\n    for student in student_info:\n        consonants = count_consonants(student['name'])\n        if consonants == n:\n            for grade, letter_grade in grades.items():\n                if student['GPA'] >= grade:\n                    result.append({'name': student['name'], 'grade': letter_grade})\n                    break\n        else:\n            result.append({'name': student['name'], 'grade': 'E'})\n\n    return result\n\n"}
{"task_id": "EvoEval/13", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    arr = [n for n in arr if sum_digits(n) > 0]\n    odd_arr = [n for n in arr if n % 2 != 0]\n    even_lst1 = [n for n in lst1 if n % 2 == 0]\n\n    if len(odd_arr) <= len(even_lst1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"}
{"task_id": "EvoEval/14", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(n, m+1) if is_prime(i)]\n    if not primes:\n        return -1\n    avg = round(sum(primes) / len(primes))\n    return bin(avg)\n\n"}
{"task_id": "EvoEval/15", "completion": "\n    balance = 0\n    zero_sum_points = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return False\n        elif balance == 0:\n            zero_sum_points += 1\n    return zero_sum_points >= 3\n"}
{"task_id": "EvoEval/16", "completion": "\n    vowels = \"aeiouAEIOU\"\n    notes = [4, 2, 1]\n    word = word[::-1]\n    music_string = music_string[::-1]\n    result = []\n    for i in range(1, len(word) - 1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            for j in range(i + 1, len(music_string)):\n                if music_string[j] == \"o\":\n                    result.append(notes[0])\n                    break\n                elif music_string[j] == \"o|\":\n                    result.append(notes[1])\n                    break\n                elif music_string[j] == \".|\":\n                    result.append(notes[2])\n                    break\n    return result\n\n"}
{"task_id": "EvoEval/17", "completion": "\n    fibfib_seq = [0, 0, 1]\n    for i in range(3, n + 1):\n        fibfib_seq.append(fibfib_seq[i - 1] + fibfib_seq[i - 2] + fibfib_seq[i - 3])\n    target = fibfib_seq[n]\n    if target == 0:\n        return -1\n    count = lst.count(target)\n    if count >= target:\n        return target\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/18", "completion": "\n    nums.sort()\n    if len(nums) < 3:\n        return 0\n    return min(nums[0] + nums[1] + nums[2], nums[-1] + nums[-2] + nums[-3])\n\n"}
{"task_id": "EvoEval/19", "completion": "\n    balance = 0\n    smallest_deposit = None\n    largest_withdrawal = None\n    balance_fallen_below_zero = False\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            balance_fallen_below_zero = True\n        elif operation > 0:\n            if smallest_deposit is None or operation < smallest_deposit:\n                smallest_deposit = operation\n        elif operation < 0:\n            if largest_withdrawal is None or operation > largest_withdrawal:\n                largest_withdrawal = operation\n    return largest_withdrawal, smallest_deposit, balance_fallen_below_zero\n"}
{"task_id": "EvoEval/20", "completion": "\n    def reverse_case(name):\n        return name.swapcase()\n\n    def assign_grade(gpa):\n        if gpa >= 4.0: return 'A+'\n        elif gpa >= 3.7: return 'A'\n        elif gpa >= 3.3: return 'A-'\n        elif gpa >= 3.0: return 'B+'\n        elif gpa >= 2.7: return 'B'\n        elif gpa >= 2.3: return 'B-'\n        elif gpa >= 2.0: return 'C+'\n        elif gpa >= 1.7: return 'C'\n        elif gpa >= 1.3: return 'C-'\n        elif gpa >= 1.0: return 'D+'\n        elif gpa >= 0.7: return 'D'\n        elif gpa >= 0.0: return 'D-'\n        else: return 'E'\n\n    return [(reverse_case(name), assign_grade(gpa)) for name, gpa in zip(s, grades)]\n"}
{"task_id": "EvoEval/21", "completion": "\n    if x < base:\n        return [str(x)]\n    else:\n        return [str(x % base)] + base_change_prefixes(x // base, base)\n"}
{"task_id": "EvoEval/22", "completion": "\n\n    def binary_planet_distance(planet1, planet2):\n        planets = ['Sun', 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        if planet1 not in planets or planet2 not in planets:\n            return ''\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        return 'bd' + ''.join(format(i, 'b') for i in range(min(index1, index2)+1, max(index1, index2))) + 'bd'\n    \"\"\"\n    def binary_planet_distance(planet1, planet2):\n        planets = ['Sun', 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n        if planet1 not in planets or planet2 not in planets:\n            return ''\n        index1, index2 = planets.index(planet1), planets.index(planet2)\n        return 'bd' + ''.join(format(i, 'b') for i in range(min(index1, index2)+1, max(index1, index2))) + 'bd'\n    \"\"\"\n    def binary_planet_distance(planet1, planet2):\n        planets = ['Sun', 'Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',"}
{"task_id": "EvoEval/23", "completion": "\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return factorial(n) * brazilian_factorial(n-1)\n\n    levels = [n]\n    while n > 0:\n        n = n - 2 if n % 2 == 0 else n - 1\n        levels.append(n)\n\n    return [brazilian_factorial(n) for n in levels]\n"}
{"task_id": "EvoEval/24", "completion": "\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    num_list = numbers.split()\n    if len(num_list) % 3 != 0:\n        return 'Not a happy string'\n    for i in range(0, len(num_list), 3):\n        if len(set(num_list[i:i+3])) != 3:\n            return 'Not a happy string'\n    num_list = [num_dict[num] for num in num_list]\n    num_list.sort()\n    num_list = [num for num in num_dict if num_dict[num] in num_list]\n    return ' '.join(num_list)\n"}
{"task_id": "EvoEval/25", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    sum_triples, product_triples = 0, 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    sum_triples += a[i]\n                    product_triples *= a[i]\n    return (sum_triples, product_triples if product_triples != 1 else 0)\n"}
{"task_id": "EvoEval/26", "completion": "\n    # Mapping of numeral to its value\n    numeral_values = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Mapping of value to its numeral\n    value_numerals = {v: k for k, v in numeral_values.items()}\n\n    # List to store tuples of (numeral, original index)\n    numeral_indices = []\n\n    for i, value_string in enumerate(values):\n        # Split the string into numerals\n        numerals = value_string.split()\n\n        # Sort the numerals by their values\n        numerals.sort(key=lambda numeral: numeral_values[numeral])\n\n        # Find the smallest even numeral\n        for numeral in numerals:\n            if numeral_values[numeral] % 2 == 0:\n                numeral_indices.append((numeral, i))\n                break\n\n    # Sort the numerals by their values and their original indices\n    numeral_indices.sort(key=lambda x: (numeral_values[x[0]], x[1]))\n\n    # Return the smallest even numeral and its original index\n    if numeral_indices:\n        return numeral_indices[0]\n    else:\n        return ()\n"}
{"task_id": "EvoEval/27", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_count = sum(is_prime(n) for n in lst1)\n    non_prime_count = len(lst1) - prime_count\n\n    if non_prime_count <= prime_count + len(lst2):\n        return x\n    else:\n        return y\n"}
{"task_id": "EvoEval/28", "completion": "\n    grade_scale = {4.0: \"A+\", 3.7: \"A\", 3.3: \"A-\", 3.0: \"B+\", 2.7: \"B\", 2.3: \"B-\", 2.0: \"C+\", 1.7: \"C\", 1.3: \"C-\", 1.0: \"D+\", 0.7: \"D\", 0.0: \"D-\", 0.0: \"E\"}\n    grades_list = []\n    for gpa in grades:\n        if gpa in grade_scale.keys():\n            if s0[0] == s1[0] and s0[1] == s1[1] and s0[2] == s1[2] and s0[3] == s1[3] and s0[4] == s1[4] and s0[5] == s1[5]:\n                grades_list.append(grade_scale[gpa])\n    return grades_list\n\n"}
{"task_id": "EvoEval/29", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if n == 1:\n        return y\n    elif is_prime(n):\n        return n\n    else:\n        i = 2\n        while n % i != 0:\n            i += 1\n        return i - 1\n"}
{"task_id": "EvoEval/30", "completion": "\n    # Split the fraction into numerator and denominator\n    num, den = map(int, x.split('/'))\n    # Split the music_string into a list of notes\n    notes = music_string.split()\n    # Create a dictionary to map notes to their beats\n    note_to_beats = {'o': 4, 'o|': 2, '.|': 1}\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the notes\n    for note in notes:\n        # Calculate the beats for the note\n        beats = note_to_beats[note]\n        # If the beats simplify the fraction, add True to the result, otherwise add False\n        if num * beats % den == 0:\n            result.append(True)\n        else:\n            result.append(False)\n    # Return the result\n    return result\n"}
{"task_id": "EvoEval/31", "completion": "\n    def prime_factors(n: int) -> List[int]:\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def factorial(n: int) -> int:\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n)\n\n    primes = prime_factors(n)\n    counts = [1] * len(primes)\n    i = 1\n    while i < len(primes):\n        if primes[i] == primes[i-1]:\n            counts[i-1] += 1\n            primes[i] = 0\n        i += 1\n    primes = [i for i in primes if i != 0]\n    return eval('*'.join([str(factorial(primes[i])**counts[i]) for i in range(len(primes))]))\n"}
{"task_id": "EvoEval/32", "completion": "\n    def nested_parens(s: str) -> int:\n        stack = []\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                max_depth = max(max_depth, len(stack))\n            elif c == ')':\n                stack.pop()\n        return max_depth\n\n    def circular_shift(num: int, shift: int) -> List[int]:\n        num_str = str(num)\n        num_len = len(num_str)\n        shift %= num_len\n        return [int(num_str[(i - shift) % num_len]) for i in range(num_len)]\n\n    return [nested_parens(s) for s in input]\n"}
{"task_id": "EvoEval/33", "completion": "\n    roman_dict = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500, 'm': 1000}\n    if len(s) < 3:\n        return False\n    if int(s, 20) > 1000:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return False\n    if 'iv' in s or 'ix' in s or 'xc' in s or 'cd' in s or 'cm' in s:\n        return False\n    num = 0\n    i = 0\n    while i < len(s):\n        if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n            num += roman_dict[s[i + 1]] - roman_dict[s[i]]\n            i += 2\n        else:\n            num += roman_dict[s[i]]\n            i += 1\n    return num\n\n"}
{"task_id": "EvoEval/34", "completion": "\n    import hashlib\n    def md5(s: str) -> str:\n        return hashlib.md5(s.encode()).hexdigest()\n    if not paren_string:\n        return []\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        stack = []\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if not stack:\n                    result.append(md5('None'))\n                    break\n                stack.pop()\n                current_depth -= 1\n        else:\n            if stack:\n                result.append(md5('None'))\n            else:\n                result.append(md5(str(max_depth)))\n    return result\n"}
{"task_id": "EvoEval/35", "completion": "\n    def is_happy_string(s):\n        if len(s) < 3:\n            return False\n        for i in range(len(s) - 2):\n            if len(set(s[i:i+3])) != 3:\n                return False\n        return True\n\n    if not dict:\n        return False\n\n    keys = list(dict.keys())\n    if not all(is_happy_string(k) for k in keys):\n        return False\n\n    if not all(k.islower() or k.isupper() for k in keys):\n        return False\n\n    return True\n\n"}
{"task_id": "EvoEval/36", "completion": "\n    if len(arr) == 0:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return pow(2, len(arr), p) < p\n    return False\n\n"}
{"task_id": "EvoEval/37", "completion": "\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            sub_array = nums[i:j+1]\n            sum_sub_array = sum(sub_array)\n            if sum_sub_array < min_sum:\n                min_sum = sum_sub_array\n    even_digits = sum(1 for digit in str(min_sum) if int(digit) % 2 == 0)\n    odd_digits = sum(1 for digit in str(min_sum) if int(digit) % 2 != 0)\n    return (even_digits, odd_digits)\n"}
{"task_id": "EvoEval/38", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def count_palindromes(n, is_even):\n        count = 0\n        for i in range(1, n):\n            if is_even:\n                if i % 2 == 0 and is_palindrome(i):\n                    count += 1\n            else:\n                if i % 2 != 0 and is_palindrome(i):\n                    count += 1\n        return count\n\n    even_count = count_palindromes(n, True)\n    odd_count = count_palindromes(n, False)\n\n    l_set = set(l)\n    even_sum = any(i in l_set and (n - i) in l_set for i in range(1, n) if i % 2 == 0)\n    odd_sum = any(i in l_set and (n - i) in l_set for i in range(1, n) if i % 2 != 0)\n\n    return (even_sum, odd_sum)\n\n"}
{"task_id": "EvoEval/39", "completion": "\n    n = len(arr)\n    changes = 0\n    for i in range(n//2):\n        if arr[i] != arr[n-i-1]:\n            changes += 1\n    return changes*x + y\n"}
{"task_id": "EvoEval/40", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_odd_ends(n):\n        str_n = str(n)\n        return str_n[0] in '13579' and str_n[-1] in '13579'\n\n    def largest_prime_factor(n):\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n        return n\n\n    max_prime = 2\n    for num in nums:\n        if num > 10 and is_odd_ends(num) and is_prime(num):\n            max_prime = max(max_prime, largest_prime_factor(num))\n    return max_prime if max_prime > 2 else None\n\n"}
{"task_id": "EvoEval/41", "completion": "\n    vowels = 'AEIOU'\n    count = 0\n    if shift > len(s):\n        s = s[::-1]\n    for i in range(0, len(s), 2):\n        char = chr((ord(s[i]) - 65 + shift) % 26 + 65)\n        if char in vowels:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/42", "completion": "\n    # remove the first and last character of the string\n    expression = expression[1:-1]\n    # split the string by \"><\" to get each expression\n    expressions = expression.split(\"><\")\n    for exp in expressions:\n        # split the expression by \",\" to get each fraction\n        fractions = exp.split(\",\")\n        product = 1\n        for fraction in fractions:\n            # split the fraction by \"/\" to get the numerator and denominator\n            numerator, denominator = map(int, fraction.split(\"/\"))\n            # calculate the product of the fractions\n            product *= numerator / denominator\n        # if the product is not a whole number, return False\n        if product != int(product):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/43", "completion": "\n    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 2]\n\n    fib4 = [0, 0, 0, 2]\n    for i in range(4, n):\n        fib4.append(fib4[-1] + fib4[-2] + fib4[-3] + fib4[-4])\n\n    if (fib4[0] + fib4[-1]) % 2 == 0:\n        fib4.sort()\n    else:\n        fib4.sort(reverse=True)\n\n    return fib4\n\n"}
{"task_id": "EvoEval/44", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = []\n    for i in range(1, len(str(number))):\n        for j in range(1, number+1):\n            if j % 10**i == 0:\n                prefix = str(j)[:-i]\n                prefix_roman = ''\n                for k in range(len(prefix)):\n                    prefix_roman += roman_numerals[int(prefix[k]) * 10**(len(prefix)-k)]\n                result.append(prefix_roman)\n    return result\n"}
{"task_id": "EvoEval/45", "completion": "\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    product_primes = 1\n    for num in numbers:\n        if is_prime(num):\n            sum_primes += num\n            product_primes *= num\n    return (sum_primes, product_primes)\n"}
{"task_id": "EvoEval/46", "completion": "\n    even_positive_list = [num for num in l if num > 0 and num % 2 == 0]\n    if even_positive_list:\n        return max(even_positive_list)\n    else:\n        return -1\n\n"}
{"task_id": "EvoEval/47", "completion": "\n    vowels = \"AEIOU\"\n    n = sum(1 for c in s[::2] if c in vowels)\n    return [f\"In the string, the number of uppercase vowels in even indices is {n}, and the number of odd digits is {sum(1 for c in lst[i] if int(c) % 2 != 0)}. \" for i in range(len(lst))]\n\n"}
{"task_id": "EvoEval/48", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return [s for s in strings if s.startswith(prefix) and is_prime(len(s))]\n"}
{"task_id": "EvoEval/49", "completion": "\n    two_n_mod_p = 2**n % p\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = -1 * sum(int(digit) for digit in str(num)[1:])\n        else:\n            num = sum(int(digit) for digit in str(num))\n        if num > two_n_mod_p:\n            count += 1\n    return count\n\n"}
{"task_id": "EvoEval/50", "completion": "\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, 0, -2):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n"}
{"task_id": "EvoEval/51", "completion": "\n    if isinstance(a, str):\n        if a.isalpha():\n            a = a.swapcase()\n        else:\n            a = a[::-1]\n    if isinstance(b, str):\n        if b.isalpha():\n            b = b.swapcase()\n        else:\n            b = b[::-1]\n\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        try:\n            a = float(a)\n        except ValueError:\n            pass\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        try:\n            b = float(b)\n        except ValueError:\n            pass\n\n    if a == b:\n        return None\n    else:\n        return b\n\n"}
{"task_id": "EvoEval/52", "completion": "\n    if not arr:\n        return ([], None)\n\n    smallest_even_val = float('inf')\n    smallest_even_idx = -1\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even_val:\n            smallest_even_val = num\n            smallest_even_idx = i\n\n    if smallest_even_idx == -1:\n        return ([], None)\n\n    plucked_node = [smallest_even_val, smallest_even_idx]\n\n    for i, num in enumerate(arr):\n        if i != smallest_even_idx:\n            sum_of_magnitudes += abs(num)\n            product_of_signs *= (1 if num > 0 else -1)\n\n    return (plucked_node, sum_of_magnitudes * product_of_signs)\n\n"}
{"task_id": "EvoEval/53", "completion": "\n    hex_grades = {4.0: 'F', 3.7: 'F', 3.3: 'E', 3.0: 'D', 2.7: 'D', 2.3: 'C', 2.0: 'C', 1.7: 'B', 1.3: 'B', 1.0: 'A', 0.7: 'A', 0.0: '5', 1: '4', 2: '3', 3: '2'}\n    prime_hex_grades = ['D', 'B', '7', '5', '3']\n    count = 0\n    for gpa in grades:\n        if hex_grades[gpa] in prime_hex_grades:\n            count += 1\n    return count\n"}
{"task_id": "EvoEval/54", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        if is_prime(num):\n            current_sum += num\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n    return max_sum\n"}
{"task_id": "EvoEval/55", "completion": "\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    if number > 0:\n        for key in sorted(roman_numerals.keys(), reverse=True):\n            while number >= key:\n                result += roman_numerals[key]\n                number -= key\n    else:\n        return None\n    return hashlib.md5(result.encode()).hexdigest()\n"}
{"task_id": "EvoEval/56", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        factors = []\n        for i in range(2, n + 1):\n            while n % i == 0 and is_prime(i):\n                factors.append(i)\n                n //= i\n        return factors\n\n    factors = prime_factors(n)\n    odd_factors = [i for i in factors if i % 2 != 0]\n    if not odd_factors:\n        return 0\n    product = 1\n    for i in odd_factors:\n        product *= i\n    return product\n\n"}
{"task_id": "EvoEval/57", "completion": "\n    def is_palindrome(arr):\r\n        return arr == arr[::-1]\r\n\r\n    def is_odd_digit(arr):\r\n        return all(int(i) % 2 != 0 for i in str(int(''.join(map(str, arr)))))\r\n\r\n    def count_changes(arr):\r\n        return sum(a != b for a, b in zip(arr, arr[::-1])) // 2\r\n\r\n    if not is_palindrome(arr):\r\n        return count_changes(arr)\r\n    elif not is_odd_digit(arr):\r\n        return count_changes(arr)\r\n    else:\r\n        return 0\r\n\r\n\r"}
{"task_id": "EvoEval/58", "completion": "\n    def max_freq_and_sum_check(lst, a, b):\n        from collections import Counter\n        c = Counter(lst)\n        max_freq = max([k for k, v in c.items() if v >= k], default=-1)\n        if max_freq == -1:\n            return (max_freq, False)\n        else:\n            return (max_freq, a == max_freq + b or b == max_freq + a)\n\n    print(max_freq_and_sum_check([4, 1, 2, 2, 3, 1], 2, 0))\n    print(max_freq_and_sum_check([1, 2, 2, 3, 3, 3, 4, 4, 4], 5, 2))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 8, 3))\n    print(max_freq_and_sum_check([5, 5, 4, 4, 4], 10, 5))\n\n"}
{"task_id": "EvoEval/59", "completion": "\n    def base_change(s, base):\n        return int(s, 10) if base == 10 else hex(int(s, 10))[2:] if base == 16 else ''\n\n    def odd_count(s):\n        return sum(1 for c in s if int(c) % 2 != 0)\n\n    return [f\"the number of odd elements {odd_count(base_change(s, base))}n the str{odd_count(base_change(s, base))}ng {odd_count(base_change(s, base))} of the {odd_count(base_change(s, base))}nput.\" for s in lst]\n\n"}
{"task_id": "EvoEval/60", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    arr.append(a[0])\n    min_val = min(arr)\n    min_index = arr.index(min_val)\n    even_values = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    even_values.sort()\n    return [even_values[0][0], even_values[0][1]] if even_values else []\n\n"}
{"task_id": "EvoEval/61", "completion": "\n\n"}
{"task_id": "EvoEval/62", "completion": "\n    words = text.split()\n    words.sort(key=str.lower)\n    result = []\n    while words:\n        result.append(words.pop(0))\n        if words:\n            result.append(words.pop(-1))\n    return \"-\".join(result).replace(\" \", \"_\")\n\n"}
{"task_id": "EvoEval/63", "completion": "\n\n"}
{"task_id": "EvoEval/64", "completion": "\n    from sympy import isprime\n\n    # Calculate 2^n modulo p\n    modulo_result = 2**n % p\n\n    # Initialize an empty list to store prime numbers\n    prime_numbers = []\n\n    # Iterate from 2 to the calculated modulo result\n    for i in range(2, modulo_result):\n        # If i is a prime number, append it to the list\n        if isprime(i):\n            prime_numbers.append(i)\n\n    return prime_numbers\n\n"}
{"task_id": "EvoEval/65", "completion": "\n    if p == 1:\n        return 1\n    else:\n        return (p - 1) % (2 ** n)\n\n"}
{"task_id": "EvoEval/66", "completion": "\n    # find largest even number in range [x, y]\n    largest_even = -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            largest_even = i\n            break\n\n    # create array a\n    a = [0] * n\n    for i in range(1, n + 1):\n        a[i - 1] = i * i - i + 1\n\n    # find largest triple sum\n    triple_sum = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    temp_sum = a[i] + a[j] + a[k]\n                    if largest_even != -1:\n                        temp_sum += largest_even\n                    if temp_sum > triple_sum:\n                        triple_sum = temp_sum\n\n    return triple_sum\n\n"}
{"task_id": "EvoEval/67", "completion": "\n    numbers.sort()\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < threshold and diff > max_diff:\n                max_diff = diff\n    return max_diff\n"}
{"task_id": "EvoEval/68", "completion": "\n    def odd_digits_product(n):\n        product = 1\n        for digit in str(n):\n            if int(digit) % 2 != 0:\n                product *= int(digit)\n        return product\n\n    min_sum = 0\n    for num in nums:\n        min_sum += odd_digits_product(num)\n    return min_sum\n"}
{"task_id": "EvoEval/69", "completion": "\n    happy_strings = []\n    for string in lst:\n        if len(string) % 3 == 0:\n            distinct_chars = len(set(string))\n            if distinct_chars == len(string) // 3:\n                happy_strings.append(string)\n    happy_strings.sort(key=lambda s: (len(s), s))\n    return happy_happy_strings\n"}
{"task_id": "EvoEval/70", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= math.factorial(i)\n        return result\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = abs(special_factorial(numbers[i]) - special_factorial(numbers[i + 1]))\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair\n\n"}
{"task_id": "EvoEval/71", "completion": "\n    def brazilian_factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * brazilian_factorial(n - 1)\n\n    max_weight = brazilian_factorial(n)\n\n    if sum(w) > max_weight:\n        return False\n\n    if w != w[::-1]:\n        return False\n\n    return True\n"}
{"task_id": "EvoEval/72", "completion": "\n    def special_factorial(n: int) -> int:\n        result = 1\n        for i in range(1, n + 1):\n            result *= factorial(i)\n        return result\n\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if abs(special_factorial(numbers[i]) - special_factorial(numbers[i - 1])) >= threshold:\n            return False\n    return True\n"}
{"task_id": "EvoEval/73", "completion": "\n    n = Fraction(n)\n    return [Fraction(fraction) * n == Fraction(fraction).numerator // Fraction(fraction).denominator for fraction in fractions]\n"}
{"task_id": "EvoEval/74", "completion": "\n    # Check if all elements in lst1 are even\n    lst1_even = all(i % 2 == 0 for i in lst1)\n    # Check if all elements in lst2 are odd\n    lst2_odd = all(i % 2 == 1 for i in lst2)\n    \n    # If lst1 is already all even or lst2 is already all odd, return \"YES\"\n    if lst1_even or lst2_odd:\n        yn = \"YES\"\n    else:\n        yn = \"NO\"\n    \n    # Check if x is equal to the sum of y and z\n    if x == y + z:\n        sum_yn = \"SUM\"\n    else:\n        sum_yn = \"NO_SUM\"\n    \n    # Return the combined result\n    return f\"{sum_yn} {yn}\"\n"}
{"task_id": "EvoEval/75", "completion": "\n"}
{"task_id": "EvoEval/76", "completion": "\n    def is_prime(n):\r\n        if n < 2:\r\n            return False\r\n        for i in range(2, int(n**0.5) + 1):\r\n            if n % i == 0:\r\n                return False\r\n        return True\r\n\r\n    def sum_of_digits(n):\r\n        return sum(int(digit) for digit in str(n))\r\n\r\n    prime_sum = [sum_of_digits(n) if is_prime(n) else n for n in lst]\r\n    return sorted(prime_sum, reverse=prime_sum[0] % 2 == 0)\r\n\r\n\r"}
{"task_id": "EvoEval/77", "completion": "\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] < 0:\n            digits = [int(d) for d in str(arr[i]) if d.isdigit()]\n            if sum(digits) > 0:\n                sum += arr[i]\n        elif arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum\n\n"}
{"task_id": "EvoEval/78", "completion": "\n    vowels = \"AEIOU\"\n    s = list(s)\n    for i in range(len(s)):\n        if s[i].isalpha():\n            s[i] = s[i].lower() if s[i].isupper() else s[i].upper()\n        else:\n            s = s[::-1]\n            break\n    s = \"\".join(s)\n    count = sum(1 for i in range(0, len(s), 2) if s[i] in vowels)\n    return (s, count)\n\n"}
{"task_id": "EvoEval/79", "completion": "\n    # your code here\n    def is_happy(s):\n        for i in range(len(s) - 2):\n            if len(set(s[i:i + 3])) != 3:\n                return False\n        return True\n\n    def reverse_case(s):\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)\n\n    if is_happy(s):\n        return reverse_case(s)\n    else:\n        return s[::-1]\n\n"}
{"task_id": "EvoEval/80", "completion": "\n    def encode(s: str) -> str:\n        return s[-1] + s[:-1]\n\n    def decode(s: str) -> str:\n        return s[1:] + s[0]\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    encoded = ''.join(encode(s[i:i+3]) for i in range(0, len(s), 3))\n    decoded = ''.join(decode(encoded[i:i+3]) for i in range(0, len(encoded), 3))\n    result = ''.join(ch for ch in decoded if ch not in c)\n\n    if is_palindrome(result):\n        return result, True\n    else:\n        return decode(result), False\n"}
{"task_id": "EvoEval/81", "completion": "\n    fibfib_sequence: List[int] = [0, 0, 1]\n    for i in range(3, n):\n        fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n    mean = sum(fibfib_sequence) / n\n    mad = sum(abs(x - mean) for x in fibfib_sequence) / n\n    return mad\n"}
{"task_id": "EvoEval/82", "completion": "\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(n - 2):\n        a, b, c = b, c, (a + b + c) % 2\n        if c == 0:\n            c = 1\n    return c\n\n"}
{"task_id": "EvoEval/83", "completion": "\n    text = re.sub(r' {2,}', '_', text)\n    text = re.sub(r'\\s', '_', text)\n    num = int(text.replace('_', ''))\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"}
{"task_id": "EvoEval/84", "completion": "\n    result = {}\n    for i in range(1, len(string) + 1):\n        prefix = string[:i]\n        histogram = {}\n        for letter in prefix:\n            if letter in histogram:\n                histogram[letter] += 1\n            else:\n                histogram[letter] = 1\n        max_count = max(histogram.values())\n        result[prefix] = {k: v for k, v in histogram.items() if v == max_count}\n    return result\n"}
{"task_id": "EvoEval/85", "completion": "\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        lst.sort(key=lambda x: bin(x).count('1'))\n        return lst[1]\n"}
{"task_id": "EvoEval/86", "completion": "\n    common_operands = set(operand_lists[0])\n    for operand_list in operand_lists[1:]:\n        common_operands = common_operands & set(operand_list)\n    common_operands = sorted(list(common_operands))\n    if not common_operands:\n        return None\n    result = common_operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += common_operands[i+1]\n        elif operators[i] == '-':\n            result -= common_operands[i+1]\n        elif operators[i] == '*':\n            result *= common_operands[i+1]\n        elif operators[i] == '//':\n            result //= common_operands[i+1]\n        elif operators[i] == '**':\n            result **= common_operands[i+1]\n    return result\n\n"}
{"task_id": "EvoEval/87", "completion": "\n    stack = []\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i, c in enumerate(text):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                text = text[:i] + text[i+1:]\n            else:\n                stack.pop()\n    if stack:\n        for i in stack[::-1]:\n            if text[i] in vowels:\n                text = text[:i] + text[i+1:]\n    return text\n\n"}
{"task_id": "EvoEval/88", "completion": "\n    words = s.replace(\",\", \"\").split()\n    words = [word for word in words if len(word) % 2 == 0]\n    words.sort(key=lambda x: (len(x), x))\n    return words\n\n"}
{"task_id": "EvoEval/89", "completion": "\n    import hashlib\n    result = []\n    for string in strings:\n        if string:\n            hash_string = hashlib.md5(string.encode()).hexdigest()\n            if hash_substring in hash_string:\n                result.append(string)\n    return result if result else None\n"}
{"task_id": "EvoEval/90", "completion": "\n    vowels = 'aeiou'\n    result = {}\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return {}\n        if not key.islower() and not key.isupper():\n            return {}\n        count = sum(1 for char in key if char in vowels)\n        result[key] = count\n    return result\n\n"}
{"task_id": "EvoEval/91", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    l_prime_even = [x if is_prime(n) else y for n in l[::2]]\n    l_sorted = sorted(l[1::2])\n\n    return l_prime_even + l_sorted\n\n"}
{"task_id": "EvoEval/92", "completion": "\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    common = [i for i in a if i in l1]\n    common_multiples_of_3 = [i for i in common if i % 3 == 0]\n    if not common_multiples_of_3:\n        return (common, 0)\n    else:\n        triples = [(i, j, k) for i in common_multiples_of_3 for j in common_multiples_of_3 for k in common_multiples_of_3 if i < j < k and i + j + k % 3 == 0]\n        return (common, len(triples))\n"}
{"task_id": "EvoEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if not is_prime(len(string)):\n        return ''\n\n    for i in range(len(string) - 2, 0, -1):\n        if string[i] in vowels and string[i-1] not in vowels and string[i+1] not in vowels:\n            return string[i]\n\n    return ''\n"}
{"task_id": "EvoEval/94", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    def count_positive_sum_digits(arr):\n        return sum(sum_digits(n) > 0 for n in arr)\n\n    positive_count = count_positive_sum_digits(arr)\n    sorted_arr = sorted(arr, key=lambda n: (sum_digits(n) > 0, abs(n) if sum_digits(n) > 0 else -n))\n    return sorted_arr if positive_count % 2 == 0 else sorted_arr[::-1]\n\n"}
{"task_id": "EvoEval/95", "completion": "\n    filtered_strings = [s for s in strings if substring in s and len(s) % 2 == 0]\n    return sorted(filtered_strings, key=lambda s: (len(s), s))\n"}
{"task_id": "EvoEval/96", "completion": "\n    common_elements = set(l1).intersection(l2)\n    for i in common_elements:\n        if -i in common_elements:\n            return True\n    return False\n\n"}
{"task_id": "EvoEval/97", "completion": "\n    if n < 3:\n        return 0\n\n    fib = [0, 0, 1]\n    for i in range(3, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2] + fib[i - 3] + i * i - i + 1)\n\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (fib[i] + fib[j] + fib[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n"}
{"task_id": "EvoEval/98", "completion": "\n    if not dict:\n        return False\n    for key, value in dict.items():\n        if not (key.islower() or key.isupper()):\n            return False\n        if not (value.count('(') == value.count(')')):\n            return False\n    return True\n\n"}
{"task_id": "EvoEval/99", "completion": "\n    if x < base:\n        return 1\n    else:\n        return 1 + len_base_conversion(x // base, base)\n\n"}
